
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 f3 84 02 00       	call   c0028518 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c2 90 02 c0       	mov    ebx,0xc00290c2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 90 02 c0    	cmp    ebx,0xc00290d0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 d8 02 c0       	mov    eax,0xc002d818
c0000049:	3d 18 d8 02 c0       	cmp    eax,0xc002d818
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 d8 02 c0       	push   0xc002d818
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 d8 02 c0       	mov    eax,0xc002d818
c0000075:	2d 18 d8 02 c0       	sub    eax,0xc002d818
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 d8 02 c0       	push   0xc002d818
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 de 02 c0 00 	cmp    BYTE PTR ds:0xc002de48,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 90 02 c0       	mov    ebx,0xc00290d8
c00000bb:	81 eb d4 90 02 c0    	sub    ebx,0xc00290d4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 90 02 c0       	mov    esi,0xc00290d4
c00000ca:	a1 4c de 02 c0       	mov    eax,ds:0xc002de4c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c de 02 c0       	mov    ds:0xc002de4c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c de 02 c0       	mov    eax,ds:0xc002de4c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 d8 02 c0       	push   0xc002d818
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 de 02 c0 01 	mov    BYTE PTR ds:0xc002de48,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 de 02 c0       	push   0xc002de50
c000012c:	68 18 d8 02 c0       	push   0xc002d818
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 9d d4 01 00       	call   c001d838 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 ff 27 01 00       	call   c0012bb2 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 7b d4 01 00       	call   c001d838 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 ce d8 01 00       	call   c001dcaa <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 7b de 01 00       	call   c001e260 <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 90 e2 02 c0 	lgdtd  ds:0xc002e290
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 dc 44 01 00       	call   c0014ab5 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 68 de 02 c0       	mov    ds:0xc002de68,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 68 de 02 c0    	mov    DWORD PTR ds:0xc002de68,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 68 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002de68
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6f20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6f20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6f20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6f20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 80 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de80
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 84 de 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd217c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 84 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd217c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ac de 02 c0    	cmp    DWORD PTR ds:0xc002deac,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d bc de 02 c0    	mov    ecx,DWORD PTR ds:0xc002debc
c0000e60:	c7 42 0c b4 de 02 c0 	mov    DWORD PTR [edx+0xc],0xc002deb4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 bc de 02 c0    	mov    DWORD PTR ds:0xc002debc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ac de 02 c0    	mov    DWORD PTR ds:0xc002deac,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 80 de 02 c0 02 	test   BYTE PTR ds:0xc002de80,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 80 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de80
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 84 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd217c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 84 de 02 c0 	mov    DWORD PTR [edx*4-0x3ffd217c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 b4 de 02 c0 	lea    edx,[eax*8-0x3ffd214c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 80 de 02 c0       	mov    eax,0xc002de80
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d c0 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002dec0
c00011e2:	81 fb b4 de 02 c0    	cmp    ebx,0xc002deb4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d b4 de 02 c0       	cmp    eax,0xc002deb4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d b0 de 02 c0    	cmp    DWORD PTR ds:0xc002deb0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 bc de 02 c0       	mov    ds:0xc002debc,eax
c000121e:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c0001223:	a3 b0 de 02 c0       	mov    ds:0xc002deb0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 b4 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002deb4
c0001231:	c7 40 0c b4 de 02 c0 	mov    DWORD PTR [eax+0xc],0xc002deb4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 c0 de 02 c0       	mov    ds:0xc002dec0,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 b4 de 02 c0 	mov    DWORD PTR [eax+0x8],0xc002deb4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 78 de 02 c0 	lea    ebp,[edx*4-0x3ffd2188]
c0001282:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 80 de 02 c0 	lea    ecx,[edx*4-0x3ffd2180]
c000129d:	8b 14 95 80 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2180]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd b4 e1 02 c0 	or     DWORD PTR [edi*4-0x3ffd1e4c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 b4 de 02 c0 	lea    eax,[eax*8-0x3ffd214c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d bc de 02 c0    	mov    DWORD PTR ds:0xc002debc,ecx
c0001357:	89 0d c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,ecx
c000135d:	c7 41 08 b4 de 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002deb4
c0001364:	c7 41 0c b4 de 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002deb4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ac de 02 c0 	lea    edx,[ecx*8-0x3ffd2154]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d b4 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e4c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d b4 e1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1e4c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ac de 02 c0 	lea    edx,[eax*4-0x3ffd2154]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d b4 e1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1e4c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d bc de 02 c0    	mov    DWORD PTR ds:0xc002debc,edi
c000142a:	89 3d c0 de 02 c0    	mov    DWORD PTR ds:0xc002dec0,edi
c0001430:	c7 47 08 b4 de 02 c0 	mov    DWORD PTR [edi+0x8],0xc002deb4
c0001437:	c7 47 0c b4 de 02 c0 	mov    DWORD PTR [edi+0xc],0xc002deb4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d b0 de 02 c0    	mov    DWORD PTR ds:0xc002deb0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ac de 02 c0    	mov    DWORD PTR ds:0xc002deac,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 80 de 02 c0       	mov    edx,0xc002de80
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 80 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de80,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 80 de 02 c0       	mov    eax,0xc002de80
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d d4 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1d4
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 d4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1d4,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d d4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1d4,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 ac de 02 c0    	cmp    DWORD PTR ds:0xc002deac,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d ac de 02 c0    	mov    DWORD PTR ds:0xc002deac,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 80 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de80,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 dc e1 02 c0    	push   DWORD PTR ds:0xc002e1dc
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 80 de 02 c0 00 	cmp    DWORD PTR ds:0xc002de80,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 dc e1 02 c0       	mov    eax,ds:0xc002e1dc
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d ac de 02 c0 00 	cmp    DWORD PTR ds:0xc002deac,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 84 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd217c]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 b4 de 02 c0       	mov    eax,0xc002deb4
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d ac e1 02 c0       	cmp    eax,0xc002e1ac
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 e8 e1 02 c0       	mov    eax,ds:0xc002e1e8
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 d0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1d0
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 e4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1e4
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 f4 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1f4
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 80 de 02 c0       	mov    eax,0xc002de80
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 80 de 02 c0       	mov    eax,ds:0xc002de80
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 80 de 02 c0       	mov    ds:0xc002de80,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d c4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c4,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d c8 e1 02 c0    	mov    DWORD PTR ds:0xc002e1c8,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d cc e1 02 c0    	mov    DWORD PTR ds:0xc002e1cc,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 d4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1d4,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 60 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6a0]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 5a f0 01 00       	jmp    c0020c86 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 60 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6a0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 8b f0 01 00       	jmp    c0020ccd <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 60 19 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce6a0]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 b3 f0 01 00       	jmp    c0020d14 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 38 49 02 00       	call   c002687c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 93 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6d00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 93 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6d00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 93 02 c0       	mov    edx,0xc0029320
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 94 c6 02 c0       	mov    edx,0xc002c694
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 93 02 c0       	mov    edx,0xc002932c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 93 02 c0       	mov    edx,0xc0029310
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 20 e2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1de0]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 00 e2 02 c0    	mov    ax,ds:0xc002e200
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 00 e2 02 c0    	mov    ds:0xc002e200,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 35 37 02 00       	call   c002687c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 93 02 c0       	mov    eax,0xc0029332
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 92 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6d80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 93 02 c0       	mov    eax,0xc002933b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 93 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6d00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 00 21 02 00       	call   c002687c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 93 02 c0       	mov    edx,0xc0029310
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 92 02 c0       	mov    edx,0xc0029200
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 92 02 c0       	mov    edx,0xc0029210
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 20 e2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1de0]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 20 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1de0],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 c7 0a 02 00       	call   c002687c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 ad 0a 02 00       	call   c002687c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 92 02 c0       	mov    eax,0xc0029257
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 92 02 c0       	mov    eax,0xc0029250
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 20 e2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1de0]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 92 02 c0       	mov    esi,0xc0029240
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 f0 f1 01 00       	call   c002687c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 93 02 c0       	mov    edx,0xc0029320
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 92 02 c0       	mov    edx,0xc0029220
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 92 02 c0       	mov    edx,0xc0029230
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 93 02 c0       	mov    edx,0xc0029342
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 93 02 c0       	mov    edx,0xc002934e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 93 02 c0       	mov    edx,0xc0029362
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 96 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029680
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 96 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029680
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 94 02 c0       	mov    eax,0xc0029480
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 93 02 c0       	mov    eax,0xc00293c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 44 fb 01 00       	call   c002834f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 07 fb 01 00       	call   c0028331 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 db fa 01 00       	call   c002834f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 8e f1 01 00       	call   c0027a54 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 08 fc 01 00       	call   c00284e0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 55 fa 01 00       	call   c002834f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 97 f9 01 00       	call   c002834f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 64 f9 01 00       	call   c0028331 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 51 f8 01 00       	call   c002834f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 19 f8 01 00       	call   c0028331 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 25 f6 01 00       	call   c002834f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 ea f5 01 00       	call   c0028331 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6420]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 fa f2 01 00       	call   c00280e3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 78 ec 01 00       	call   c0027a80 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 34 f5 01 00       	call   c0028353 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 22 f6 01 00       	call   c0028477 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 0c ec 01 00       	call   c0027a80 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 b7 f4 01 00       	call   c002834d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 98 f4 01 00       	call   c0028351 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 26 f6 01 00       	call   c0028500 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 d8 f1 01 00       	call   c00280e3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 56 eb 01 00       	call   c0027a80 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 12 f4 01 00       	call   c0028353 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 00 f5 01 00       	call   c0028477 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 ea ea 01 00       	call   c0027a80 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 95 f3 01 00       	call   c002834d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 75 f3 01 00       	call   c0028351 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 02 f5 01 00       	call   c0028500 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 b0 f2 01 00       	call   c002834f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 6e f2 01 00       	call   c0028331 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 56 f2 01 00       	call   c002834f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 c8 ef 01 00       	call   c00280e3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ca e2 01 00       	call   c0027403 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 2d e9 01 00       	call   c0027a80 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 7f ef 01 00       	call   c00280e3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 85 e2 01 00       	call   c0027403 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 54 ef 01 00       	call   c00280e3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 a4 f1 01 00       	call   c002834d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 81 e8 01 00       	call   c0027a54 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 fb f2 01 00       	call   c00284e0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 2a f1 01 00       	call   c0028331 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 25 e8 01 00       	call   c0027a54 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 a3 ee 01 00       	call   c00280e3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 26 e8 01 00       	call   c0027a80 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 78 ee 01 00       	call   c00280e3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 df ea 01 00       	call   c0027d64 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 5e e1 01 00       	call   c0027403 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 be da 01 00       	call   c0026d98 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 95 f1 01 00       	call   c0028477 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 7e e7 01 00       	call   c0027a80 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 65 f1 01 00       	call   c0028477 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 d7 e0 01 00       	call   c0027403 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 10 f0 01 00       	call   c0028353 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 f8 e9 01 00       	call   c0027d64 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 7e e0 01 00       	call   c0027403 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 64 f1 01 00       	call   c0028500 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 3e ed 01 00       	call   c00280e3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 95 e6 01 00       	call   c0027a54 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 74 ef 01 00       	call   c002834f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 0d e0 01 00       	call   c0027403 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 39 e6 01 00       	call   c0027a54 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 d3 f0 01 00       	call   c0028500 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 8c ec 01 00       	call   c00280e3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 09 e6 01 00       	call   c0027a80 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 5c ec 01 00       	call   c00280e3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 62 df 01 00       	call   c0027403 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 32 ec 01 00       	call   c00280e3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 84 ee 01 00       	call   c002834f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 5b e5 01 00       	call   c0027a54 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 d5 ef 01 00       	call   c00284e0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 04 ee 01 00       	call   c0028331 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 fe e4 01 00       	call   c0027a54 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 7c eb 01 00       	call   c00280e3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ff e4 01 00       	call   c0027a80 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 51 eb 01 00       	call   c00280e3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 b8 e7 01 00       	call   c0027d64 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 37 de 01 00       	call   c0027403 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 87 d7 01 00       	call   c0026d98 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 5e ee 01 00       	call   c0028477 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 47 e4 01 00       	call   c0027a80 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 2e ee 01 00       	call   c0028477 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 a0 dd 01 00       	call   c0027403 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 d9 ec 01 00       	call   c0028353 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 c0 e6 01 00       	call   c0027d64 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 3f dd 01 00       	call   c0027403 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 25 ee 01 00       	call   c0028500 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ff e9 01 00       	call   c00280e3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 56 e3 01 00       	call   c0027a54 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 35 ec 01 00       	call   c002834f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ce dc 01 00       	call   c0027403 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 fa e2 01 00       	call   c0027a54 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 6f e9 01 00       	call   c00280e3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 75 dc 01 00       	call   c0027403 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9c 02 c0       	mov    eax,0xc0029c40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9c 02 c0       	mov    eax,0xc0029c54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 ea e7 01 00       	call   c00280e3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 68 e1 01 00       	call   c0027a80 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 fa d3 01 00       	call   c0026d98 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 d1 ea 01 00       	call   c0028477 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 ba e0 01 00       	call   c0027a80 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 9d ea 01 00       	call   c0028477 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 0f da 01 00       	call   c0027403 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 6f ea 01 00       	call   c0028477 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 5e e0 01 00       	call   c0027a80 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 c7 d9 01 00       	call   c0027403 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 e8 d2 01 00       	call   c0026d98 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 bf e9 01 00       	call   c0028477 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 a8 df 01 00       	call   c0027a80 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 8b e9 01 00       	call   c0028477 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 fd d8 01 00       	call   c0027403 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 5d e9 01 00       	call   c0028477 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 4c df 01 00       	call   c0027a80 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 b5 d8 01 00       	call   c0027403 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 93 d8 01 00       	call   c0027403 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 6f d1 01 00       	call   c0026d98 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 46 e8 01 00       	call   c0028477 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 2f de 01 00       	call   c0027a80 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 12 e8 01 00       	call   c0028477 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 84 d7 01 00       	call   c0027403 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 e4 e7 01 00       	call   c0028477 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 cd dd 01 00       	call   c0027a80 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 36 d7 01 00       	call   c0027403 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 96 e7 01 00       	call   c0028477 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 7f dd 01 00       	call   c0027a80 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 e8 d6 01 00       	call   c0027403 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 fd cf 01 00       	call   c0026d98 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 d4 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 bd dc 01 00       	call   c0027a80 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 a4 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 16 d6 01 00       	call   c0027403 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 76 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 5f dc 01 00       	call   c0027a80 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 c8 d5 01 00       	call   c0027403 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 28 e6 01 00       	call   c0028477 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 11 dc 01 00       	call   c0027a80 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 7a d5 01 00       	call   c0027403 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 4e d5 01 00       	call   c0027403 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 ab db 01 00       	call   c0027a80 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 67 e4 01 00       	call   c0028353 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 f6 d4 01 00       	call   c0027403 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 53 db 01 00       	call   c0027a80 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 0f e4 01 00       	call   c0028353 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 89 cd 01 00       	call   c0026d98 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 60 e4 01 00       	call   c0028477 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 49 da 01 00       	call   c0027a80 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 2c e4 01 00       	call   c0028477 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 9e d3 01 00       	call   c0027403 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 fe e3 01 00       	call   c0028477 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 e7 d9 01 00       	call   c0027a80 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 50 d3 01 00       	call   c0027403 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 b0 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 99 d9 01 00       	call   c0027a80 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 02 d3 01 00       	call   c0027403 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 62 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 4b d9 01 00       	call   c0027a80 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 b4 d2 01 00       	call   c0027403 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 14 e3 01 00       	call   c0028477 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 fd d8 01 00       	call   c0027a80 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 66 d2 01 00       	call   c0027403 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 68 cb 01 00       	call   c0026d98 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 3f e2 01 00       	call   c0028477 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 28 d8 01 00       	call   c0027a80 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 0f e2 01 00       	call   c0028477 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 81 d1 01 00       	call   c0027403 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 e1 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ca d7 01 00       	call   c0027a80 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 33 d1 01 00       	call   c0027403 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 93 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 7c d7 01 00       	call   c0027a80 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 e5 d0 01 00       	call   c0027403 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 45 e1 01 00       	call   c0028477 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 2e d7 01 00       	call   c0027a80 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 97 d0 01 00       	call   c0027403 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 f7 e0 01 00       	call   c0028477 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 e0 d6 01 00       	call   c0027a80 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 49 d0 01 00       	call   c0027403 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 1d d0 01 00       	call   c0027403 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 7a d6 01 00       	call   c0027a80 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 36 df 01 00       	call   c0028353 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 c5 cf 01 00       	call   c0027403 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 22 d6 01 00       	call   c0027a80 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 de de 01 00       	call   c0028353 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 6c cf 01 00       	call   c0027403 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 c9 d5 01 00       	call   c0027a80 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 85 de 01 00       	call   c0028353 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 13 cf 01 00       	call   c0027403 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 70 d5 01 00       	call   c0027a80 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 2c de 01 00       	call   c0028353 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 8a c7 01 00       	call   c0026d98 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 61 de 01 00       	call   c0028477 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 4a d4 01 00       	call   c0027a80 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 2d de 01 00       	call   c0028477 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 9f cd 01 00       	call   c0027403 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ff dd 01 00       	call   c0028477 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 e8 d3 01 00       	call   c0027a80 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 51 cd 01 00       	call   c0027403 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 b1 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 9a d3 01 00       	call   c0027a80 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 03 cd 01 00       	call   c0027403 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 63 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 4c d3 01 00       	call   c0027a80 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 b5 cc 01 00       	call   c0027403 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 15 dd 01 00       	call   c0028477 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 fe d2 01 00       	call   c0027a80 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 67 cc 01 00       	call   c0027403 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 c7 dc 01 00       	call   c0028477 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 b0 d2 01 00       	call   c0027a80 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 16 cc 01 00       	call   c0027403 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 76 dc 01 00       	call   c0028477 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 5f d2 01 00       	call   c0027a80 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 c8 cb 01 00       	call   c0027403 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 c2 c4 01 00       	call   c0026d98 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 99 db 01 00       	call   c0028477 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 82 d1 01 00       	call   c0027a80 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 62 db 01 00       	call   c0028477 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 d4 ca 01 00       	call   c0027403 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 34 db 01 00       	call   c0028477 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 1d d1 01 00       	call   c0027a80 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 86 ca 01 00       	call   c0027403 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 e6 da 01 00       	call   c0028477 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 cf d0 01 00       	call   c0027a80 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 38 ca 01 00       	call   c0027403 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 98 da 01 00       	call   c0028477 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 81 d0 01 00       	call   c0027a80 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 ea c9 01 00       	call   c0027403 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 4a da 01 00       	call   c0028477 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 33 d0 01 00       	call   c0027a80 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 9c c9 01 00       	call   c0027403 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 fc d9 01 00       	call   c0028477 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 e5 cf 01 00       	call   c0027a80 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 4b c9 01 00       	call   c0027403 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 ab d9 01 00       	call   c0028477 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 94 cf 01 00       	call   c0027a80 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 03 c9 01 00       	call   c0027403 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 dc c8 01 00       	call   c0027403 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 3a cf 01 00       	call   c0027a80 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 f6 d7 01 00       	call   c0028353 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 85 c8 01 00       	call   c0027403 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 e3 ce 01 00       	call   c0027a80 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 9f d7 01 00       	call   c0028353 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 2d c8 01 00       	call   c0027403 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 8b ce 01 00       	call   c0027a80 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 47 d7 01 00       	call   c0028353 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 d5 c7 01 00       	call   c0027403 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 33 ce 01 00       	call   c0027a80 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 ef d6 01 00       	call   c0028353 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 7d c7 01 00       	call   c0027403 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 db cd 01 00       	call   c0027a80 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 97 d6 01 00       	call   c0028353 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 2b c7 01 00       	call   c0027403 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 89 cd 01 00       	call   c0027a80 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 45 d6 01 00       	call   c0028353 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 59 bf 01 00       	call   c0026d98 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 30 d6 01 00       	call   c0028477 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 19 cc 01 00       	call   c0027a80 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 00 d6 01 00       	call   c0028477 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 72 c5 01 00       	call   c0027403 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd637c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 a6 d5 01 00       	call   c0028477 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 8f cb 01 00       	call   c0027a80 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 fa c4 01 00       	call   c0027403 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 47 d5 01 00       	call   c0028477 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 30 cb 01 00       	call   c0027a80 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 9b c4 01 00       	call   c0027403 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 e8 d4 01 00       	call   c0028477 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 d1 ca 01 00       	call   c0027a80 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 3c c4 01 00       	call   c0027403 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 89 d4 01 00       	call   c0028477 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 72 ca 01 00       	call   c0027a80 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 dd c3 01 00       	call   c0027403 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 2a d4 01 00       	call   c0028477 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 13 ca 01 00       	call   c0027a80 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 7e c3 01 00       	call   c0027403 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 cb d3 01 00       	call   c0028477 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 b4 c9 01 00       	call   c0027a80 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 1f c3 01 00       	call   c0027403 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 6c d3 01 00       	call   c0028477 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 55 c9 01 00       	call   c0027a80 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 c0 c2 01 00       	call   c0027403 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 0d d3 01 00       	call   c0028477 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 f6 c8 01 00       	call   c0027a80 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 61 c2 01 00       	call   c0027403 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 6b bb 01 00       	call   c0026d98 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 42 d2 01 00       	call   c0028477 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 2b c8 01 00       	call   c0027a80 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 12 d2 01 00       	call   c0028477 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 84 c1 01 00       	call   c0027403 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6360]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 b7 d1 01 00       	call   c0028477 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 a0 c7 01 00       	call   c0027a80 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 0b c1 01 00       	call   c0027403 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 57 d1 01 00       	call   c0028477 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 40 c7 01 00       	call   c0027a80 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 ab c0 01 00       	call   c0027403 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 f7 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 e0 c6 01 00       	call   c0027a80 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 4b c0 01 00       	call   c0027403 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 97 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 80 c6 01 00       	call   c0027a80 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 eb bf 01 00       	call   c0027403 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 37 d0 01 00       	call   c0028477 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 20 c6 01 00       	call   c0027a80 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 8b bf 01 00       	call   c0027403 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 d7 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 c0 c5 01 00       	call   c0027a80 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 2b bf 01 00       	call   c0027403 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 77 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 60 c5 01 00       	call   c0027a80 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 cb be 01 00       	call   c0027403 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 17 cf 01 00       	call   c0028477 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 00 c5 01 00       	call   c0027a80 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 6b be 01 00       	call   c0027403 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9c 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6344]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 10 be 01 00       	call   c0027403 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 6d c4 01 00       	call   c0027a80 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 29 cd 01 00       	call   c0028353 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 b3 bd 01 00       	call   c0027403 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 10 c4 01 00       	call   c0027a80 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 cc cc 01 00       	call   c0028353 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 56 bd 01 00       	call   c0027403 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 b3 c3 01 00       	call   c0027a80 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 6f cc 01 00       	call   c0028353 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 f9 bc 01 00       	call   c0027403 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 56 c3 01 00       	call   c0027a80 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 12 cc 01 00       	call   c0028353 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 9c bc 01 00       	call   c0027403 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 f9 c2 01 00       	call   c0027a80 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 b5 cb 01 00       	call   c0028353 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 3f bc 01 00       	call   c0027403 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 9c c2 01 00       	call   c0027a80 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 58 cb 01 00       	call   c0028353 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 e2 bb 01 00       	call   c0027403 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 3f c2 01 00       	call   c0027a80 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 fb ca 01 00       	call   c0028353 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 85 bb 01 00       	call   c0027403 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 e2 c1 01 00       	call   c0027a80 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 9e ca 01 00       	call   c0028353 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 9a c1 01 00       	call   c0027a80 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 0a cc 01 00       	jmp    c0028500 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 7c c8 01 00       	call   c002834f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 3a c8 01 00       	call   c0028331 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 d1 c5 01 00       	call   c00280e3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 d2 b8 01 00       	call   c0027403 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 a1 c5 01 00       	call   c00280e3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 08 c2 01 00       	call   c0027d64 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 a7 c7 01 00       	call   c0028331 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 aa c7 01 00       	call   c002834f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 7d c7 01 00       	call   c002834f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 76 c1 01 00       	call   c0027d64 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 f8 c8 01 00       	call   c0028500 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 d3 c8 01 00       	call   c0028500 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 ad c4 01 00       	call   c00280e3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 04 be 01 00       	call   c0027a54 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 e3 c6 01 00       	call   c002834f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 7c b7 01 00       	call   c0027403 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 a0 bd 01 00       	call   c0027a54 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 3a c8 01 00       	call   c0028500 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 7a c0 01 00       	call   c0027d64 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 f7 b6 01 00       	call   c0027403 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 23 c3 01 00       	call   c00280e3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 23 b6 01 00       	call   c0027403 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 03 b6 01 00       	call   c0027403 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 d3 c2 01 00       	call   c00280e3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 23 c5 01 00       	call   c002834d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 02 bc 01 00       	call   c0027a54 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 7c c6 01 00       	call   c00284e0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 ab c4 01 00       	call   c0028331 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 a9 bb 01 00       	call   c0027a54 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 27 c2 01 00       	call   c00280e3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 aa bb 01 00       	call   c0027a80 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 fc c1 01 00       	call   c00280e3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 63 be 01 00       	call   c0027d64 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 e2 b4 01 00       	call   c0027403 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 ac c1 01 00       	call   c00280e3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 f8 c3 01 00       	call   c002834f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 ed ba 01 00       	call   c0027a80 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 bf ba 01 00       	call   c0027a80 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 f8 c0 01 00       	call   c00280e3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 5c bd 01 00       	call   c0027d64 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 24 bd 01 00       	call   c0027d64 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 a3 b3 01 00       	call   c0027403 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 88 c4 01 00       	call   c0028500 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 62 c0 01 00       	call   c00280e3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 b9 b9 01 00       	call   c0027a54 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 98 c2 01 00       	call   c002834f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 30 b3 01 00       	call   c0027403 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 54 b9 01 00       	call   c0027a54 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 ee c3 01 00       	call   c0028500 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 b7 c1 01 00       	call   c002834f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 75 c1 01 00       	call   c0028331 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 0c bf 01 00       	call   c00280e3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 0d b2 01 00       	call   c0027403 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 dc be 01 00       	call   c00280e3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 43 bb 01 00       	call   c0027d64 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 e2 c0 01 00       	call   c0028331 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 e5 c0 01 00       	call   c002834f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 b8 c0 01 00       	call   c002834f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 b1 ba 01 00       	call   c0027d64 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 33 c2 01 00       	call   c0028500 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 0e c2 01 00       	call   c0028500 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 e8 bd 01 00       	call   c00280e3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 3f b7 01 00       	call   c0027a54 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 1e c0 01 00       	call   c002834f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 b7 b0 01 00       	call   c0027403 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 db b6 01 00       	call   c0027a54 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 75 c1 01 00       	call   c0028500 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 b5 b9 01 00       	call   c0027d64 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 32 b0 01 00       	call   c0027403 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 5d bc 01 00       	call   c00280e3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 5d af 01 00       	call   c0027403 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 3d af 01 00       	call   c0027403 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 0d bc 01 00       	call   c00280e3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 5d be 01 00       	call   c002834d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 3b b5 01 00       	call   c0027a54 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 b5 bf 01 00       	call   c00284e0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 e4 bd 01 00       	call   c0028331 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 e1 b4 01 00       	call   c0027a54 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 5f bb 01 00       	call   c00280e3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 e2 b4 01 00       	call   c0027a80 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 34 bb 01 00       	call   c00280e3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 9b b7 01 00       	call   c0027d64 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 1a ae 01 00       	call   c0027403 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 e4 ba 01 00       	call   c00280e3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 30 bd 01 00       	call   c002834f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 25 b4 01 00       	call   c0027a80 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 f7 b3 01 00       	call   c0027a80 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 2e ba 01 00       	call   c00280e3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 92 b6 01 00       	call   c0027d64 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 5f b6 01 00       	call   c0027d64 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 de ac 01 00       	call   c0027403 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 c3 bd 01 00       	call   c0028500 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 9d b9 01 00       	call   c00280e3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 f4 b2 01 00       	call   c0027a54 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 d3 bb 01 00       	call   c002834f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 6b ac 01 00       	call   c0027403 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 8f b2 01 00       	call   c0027a54 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 29 bd 01 00       	call   c0028500 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 f2 ba 01 00       	call   c002834f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 b0 ba 01 00       	call   c0028331 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 47 b8 01 00       	call   c00280e3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 48 ab 01 00       	call   c0027403 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 17 b8 01 00       	call   c00280e3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 7e b4 01 00       	call   c0027d64 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 1d ba 01 00       	call   c0028331 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 20 ba 01 00       	call   c002834f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 f3 b9 01 00       	call   c002834f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 ec b3 01 00       	call   c0027d64 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 6e bb 01 00       	call   c0028500 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 49 bb 01 00       	call   c0028500 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 23 b7 01 00       	call   c00280e3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 7a b0 01 00       	call   c0027a54 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 59 b9 01 00       	call   c002834f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 f2 a9 01 00       	call   c0027403 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 16 b0 01 00       	call   c0027a54 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 b0 ba 01 00       	call   c0028500 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 f0 b2 01 00       	call   c0027d64 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 6d a9 01 00       	call   c0027403 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 98 b5 01 00       	call   c00280e3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 98 a8 01 00       	call   c0027403 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 78 a8 01 00       	call   c0027403 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 48 b5 01 00       	call   c00280e3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 98 b7 01 00       	call   c002834d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 76 ae 01 00       	call   c0027a54 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 f0 b8 01 00       	call   c00284e0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 1f b7 01 00       	call   c0028331 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 1c ae 01 00       	call   c0027a54 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 9a b4 01 00       	call   c00280e3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 1d ae 01 00       	call   c0027a80 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 6f b4 01 00       	call   c00280e3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 d6 b0 01 00       	call   c0027d64 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 55 a7 01 00       	call   c0027403 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 1f b4 01 00       	call   c00280e3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 6b b6 01 00       	call   c002834f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 60 ad 01 00       	call   c0027a80 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 32 ad 01 00       	call   c0027a80 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 69 b3 01 00       	call   c00280e3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 cd af 01 00       	call   c0027d64 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 9a af 01 00       	call   c0027d64 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 19 a6 01 00       	call   c0027403 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 fe b6 01 00       	call   c0028500 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 d8 b2 01 00       	call   c00280e3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 2f ac 01 00       	call   c0027a54 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 0e b5 01 00       	call   c002834f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 a6 a5 01 00       	call   c0027403 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ca ab 01 00       	call   c0027a54 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 64 b6 01 00       	call   c0028500 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 2d b4 01 00       	call   c002834f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 eb b3 01 00       	call   c0028331 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 82 b1 01 00       	call   c00280e3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 83 a4 01 00       	call   c0027403 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 52 b1 01 00       	call   c00280e3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 b9 ad 01 00       	call   c0027d64 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 58 b3 01 00       	call   c0028331 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 5b b3 01 00       	call   c002834f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 2e b3 01 00       	call   c002834f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 27 ad 01 00       	call   c0027d64 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 a9 b4 01 00       	call   c0028500 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 84 b4 01 00       	call   c0028500 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 5e b0 01 00       	call   c00280e3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 b5 a9 01 00       	call   c0027a54 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 94 b2 01 00       	call   c002834f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 2d a3 01 00       	call   c0027403 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 51 a9 01 00       	call   c0027a54 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 eb b3 01 00       	call   c0028500 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 2b ac 01 00       	call   c0027d64 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 a8 a2 01 00       	call   c0027403 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 d3 ae 01 00       	call   c00280e3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 d3 a1 01 00       	call   c0027403 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 b3 a1 01 00       	call   c0027403 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 83 ae 01 00       	call   c00280e3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 d3 b0 01 00       	call   c002834d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 b1 a7 01 00       	call   c0027a54 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 2b b2 01 00       	call   c00284e0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 5a b0 01 00       	call   c0028331 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 57 a7 01 00       	call   c0027a54 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 d5 ad 01 00       	call   c00280e3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 58 a7 01 00       	call   c0027a80 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 aa ad 01 00       	call   c00280e3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 11 aa 01 00       	call   c0027d64 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 90 a0 01 00       	call   c0027403 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 5a ad 01 00       	call   c00280e3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 a6 af 01 00       	call   c002834f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 9b a6 01 00       	call   c0027a80 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 6d a6 01 00       	call   c0027a80 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 a4 ac 01 00       	call   c00280e3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 08 a9 01 00       	call   c0027d64 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 d5 a8 01 00       	call   c0027d64 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 54 9f 01 00       	call   c0027403 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 39 b0 01 00       	call   c0028500 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 13 ac 01 00       	call   c00280e3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 6a a5 01 00       	call   c0027a54 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 49 ae 01 00       	call   c002834f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 e1 9e 01 00       	call   c0027403 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 05 a5 01 00       	call   c0027a54 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 9f af 01 00       	call   c0028500 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 65 ad 01 00       	call   c002834f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 23 ad 01 00       	call   c0028331 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 ba aa 01 00       	call   c00280e3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 bb 9d 01 00       	call   c0027403 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 8a aa 01 00       	call   c00280e3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 f1 a6 01 00       	call   c0027d64 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 90 ac 01 00       	call   c0028331 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 93 ac 01 00       	call   c002834f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 66 ac 01 00       	call   c002834f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 5f a6 01 00       	call   c0027d64 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 e1 ad 01 00       	call   c0028500 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 b8 ad 01 00       	call   c0028500 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 92 a9 01 00       	call   c00280e3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 e9 a2 01 00       	call   c0027a54 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 c8 ab 01 00       	call   c002834f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 61 9c 01 00       	call   c0027403 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 89 a2 01 00       	call   c0027a54 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 23 ad 01 00       	call   c0028500 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 64 a5 01 00       	call   c0027d64 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 e1 9b 01 00       	call   c0027403 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 0d a8 01 00       	call   c00280e3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 0d 9b 01 00       	call   c0027403 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 ed 9a 01 00       	call   c0027403 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 bd a7 01 00       	call   c00280e3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 f1 a9 01 00       	call   c0028331 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 e8 a0 01 00       	call   c0027a54 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 62 ab 01 00       	call   c00284e0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 91 a9 01 00       	call   c0028331 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 8b a0 01 00       	call   c0027a54 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 09 a7 01 00       	call   c00280e3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 8c a0 01 00       	call   c0027a80 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 de a6 01 00       	call   c00280e3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 45 a3 01 00       	call   c0027d64 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 c4 99 01 00       	call   c0027403 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 8e a6 01 00       	call   c00280e3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 da a8 01 00       	call   c002834f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 cf 9f 01 00       	call   c0027a80 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 a1 9f 01 00       	call   c0027a80 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 e5 a5 01 00       	call   c00280e3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 4c a2 01 00       	call   c0027d64 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 35 9f 01 00       	call   c0027a80 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 f1 a7 01 00       	call   c0028353 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 e4 a1 01 00       	call   c0027d64 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 63 98 01 00       	call   c0027403 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 48 a9 01 00       	call   c0028500 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 22 a5 01 00       	call   c00280e3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 79 9e 01 00       	call   c0027a54 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 58 a7 01 00       	call   c002834f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 f0 97 01 00       	call   c0027403 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 18 9e 01 00       	call   c0027a54 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 b2 a8 01 00       	call   c0028500 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd631c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6328]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 6d a5 01 00       	call   c002834f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 2b a5 01 00       	call   c0028331 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 17 a5 01 00       	call   c002834f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 89 a2 01 00       	call   c00280e3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 07 9c 01 00       	call   c0027a80 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 59 a2 01 00       	call   c00280e3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 5f 95 01 00       	call   c0027403 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 2e a2 01 00       	call   c00280e3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 7e a4 01 00       	call   c002834d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 5f 9b 01 00       	call   c0027a54 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 d9 a5 01 00       	call   c00284e0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 08 a4 01 00       	call   c0028331 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 07 9b 01 00       	call   c0027a54 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 85 a1 01 00       	call   c00280e3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 08 9b 01 00       	call   c0027a80 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 5a a1 01 00       	call   c00280e3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c1 9d 01 00       	call   c0027d64 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 40 94 01 00       	call   c0027403 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 68 9d 01 00       	call   c0027d64 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 ee 93 01 00       	call   c0027403 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 d4 a4 01 00       	call   c0028500 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ae a0 01 00       	call   c00280e3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 05 9a 01 00       	call   c0027a54 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 e4 a2 01 00       	call   c002834f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 7d 93 01 00       	call   c0027403 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 a9 99 01 00       	call   c0027a54 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 43 a4 01 00       	call   c0028500 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 f8 9f 01 00       	call   c00280e3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 75 99 01 00       	call   c0027a80 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 c6 9f 01 00       	call   c00280e3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 cc 92 01 00       	call   c0027403 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 9c 9f 01 00       	call   c00280e3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 f0 a1 01 00       	call   c0028351 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 c9 98 01 00       	call   c0027a54 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 43 a3 01 00       	call   c00284e0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 72 a1 01 00       	call   c0028331 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 70 98 01 00       	call   c0027a54 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 ee 9e 01 00       	call   c00280e3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 71 98 01 00       	call   c0027a80 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 c3 9e 01 00       	call   c00280e3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 2a 9b 01 00       	call   c0027d64 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 a9 91 01 00       	call   c0027403 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 c5 9a 01 00       	call   c0027d64 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 44 91 01 00       	call   c0027403 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 2a a2 01 00       	call   c0028500 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 04 9e 01 00       	call   c00280e3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 5b 97 01 00       	call   c0027a54 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 3a a0 01 00       	call   c002834f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 d3 90 01 00       	call   c0027403 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ff 96 01 00       	call   c0027a54 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 70 9d 01 00       	call   c00280e3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 76 90 01 00       	call   c0027403 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9d 02 c0       	mov    eax,0xc0029dfe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f 9e 02 c0       	mov    eax,0xc0029e0f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 9e 02 c0       	push   0xc0029e46
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 88 e2 02 c0       	mov    eax,0xc002e288
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f 9e 02 c0       	push   0xc0029e4f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 7c 68 02 c0       	mov    eax,0xc002687c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 9e 02 c0       	push   0xc0029e59
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 b0 65 02 c0       	mov    eax,0xc00265b0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 9e 02 c0       	push   0xc0029e62
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 7c 69 02 c0       	mov    eax,0xc002697c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c 9e 02 c0       	push   0xc0029e6c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 fc 66 02 c0       	mov    eax,0xc00266fc
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 9e 02 c0       	push   0xc0029e75
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 8c e2 02 c0       	mov    eax,0xc002e28c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 9e 02 c0       	push   0xc0029e82
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 8d e2 02 c0       	mov    eax,0xc002e28d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 4d 5d 00 00       	call   c0014370 <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 1b 00 00       	push   0x1b3f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c000e668:	68 8f 9e 02 c0       	push   0xc0029e8f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 33 f4 00 00       	call   c001daa8 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 1e f7 00 00       	call   c001dda8 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 07 e6 01 c0       	push   0xc001e607
c000e693:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c000e699:	e8 0a f7 00 00       	call   c001dda8 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 a8 17 03 c0       	mov    ds:0xc00317a8,eax
c000e6a6:	c6 05 8d e2 02 c0 01 	mov    BYTE PTR ds:0xc002e28d,0x1
c000e6ad:	e8 d5 02 01 00       	call   c001e987 <Vm::initialise8086()>
c000e6b2:	e8 a1 4a 00 00       	call   c0013158 <Fs::initVFS()>
c000e6b7:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 49 dd 00 00       	call   c001c41c <Sys::loadSyscalls()>
c000e6d3:	e8 6c bc 00 00       	call   c001a344 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c 9e 02 c0       	push   0xc0029e9c
c000e6e2:	68 a5 9e 02 c0       	push   0xc0029ea5
c000e6e7:	e8 7e c9 00 00       	call   c001b06a <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 4c 55 00 00       	call   c0013c40 <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 3f 5c 00 00       	call   c0014344 <Device::loadDriversForAll()>
c000e705:	e8 80 b7 00 00       	call   c0019e8a <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad 9e 02 c0       	push   0xc0029ead
c000e719:	e8 92 ee 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 d8 f0 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 d8 f9 00 00       	call   c001e10c <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 9e 02 c0       	push   0xc0029ec9
c000e749:	50                   	push   eax
c000e74a:	e8 9b 5c 00 00       	call   c00143ea <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 a1 e2 02 c0 04 	test   BYTE PTR ds:0xc002e2a1,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 63 7c 01 00       	call   c0026546 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 7e a2 00 00       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 57 a2 00 00       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 35 a2 00 00       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 13 a2 00 00       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 a0 e2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e2a0,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 21 a1 00 00       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 fc a0 00 00       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 cd 7a 01 00       	call   c0026500 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 8a 7a 01 00       	call   c00264e0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 18 a1 00 00       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 9e 02 c0       	push   0xc0029ed9
c000eaaf:	e8 20 43 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec 9e 02 c0       	push   0xc0029eec
c000ead2:	e8 fd 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd 9e 02 c0       	push   0xc0029efd
c000eaf5:	e8 da 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e 9f 02 c0       	push   0xc0029f0e
c000eb18:	e8 b7 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f 9f 02 c0       	push   0xc0029f1f
c000eb3b:	e8 94 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 9f 02 c0       	push   0xc0029f30
c000eb5e:	e8 71 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 9f 02 c0       	push   0xc0029f41
c000eb81:	e8 4e 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 9f 02 c0       	push   0xc0029f52
c000eba4:	e8 2b 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 9f 02 c0       	push   0xc0029f63
c000ebc7:	e8 08 42 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 9f 02 c0       	push   0xc0029f74
c000ebea:	e8 e5 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 9f 02 c0       	push   0xc0029f85
c000ec0d:	e8 c2 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 9f 02 c0       	push   0xc0029f96
c000ec30:	e8 9f 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 9f 02 c0       	push   0xc0029fa7
c000ec53:	e8 7c 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 9f 02 c0       	push   0xc0029fb8
c000ec76:	e8 59 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 9f 02 c0       	push   0xc0029fc9
c000ec99:	e8 36 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da 9f 02 c0       	push   0xc0029fda
c000ecbc:	e8 13 41 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb 9f 02 c0       	push   0xc0029feb
c000ecdf:	e8 f0 40 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc 9f 02 c0       	push   0xc0029ffc
c000ed02:	e8 cd 40 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a0 02 c0       	push   0xc002a00d
c000ed21:	e8 ae 40 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 60 b9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b960
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 9d 40 00 00       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a0 02 c0       	push   0xc002a01e
c000ee0a:	e8 6e b6 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a0 02 c0       	push   0xc002a024
c000ee42:	e8 36 b6 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 a0 e2 02 c0 04 	test   BYTE PTR ds:0xc002e2a0,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 c4 d1 02 c0 	sete   BYTE PTR ds:0xc002d1c4
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 b3 91 00 00       	call   c0018068 <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 36 53 00 00       	call   c00141fa <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 60 9d 00 00       	call   c0018c54 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 f7 52 00 00       	call   c00141fa <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 61 58 00 00       	call   c0014780 <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 c7 52 00 00       	call   c00141fa <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 53 ef 00 00       	call   c001dea8 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a0 02 c0       	push   0xc002a02a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 31 3e 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a0 02 c0       	push   0xc002a03b
c000efc0:	e8 b8 b4 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a0 02 c0       	push   0xc002a048
c000efd5:	e8 a3 b4 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a052
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 8c b4 00 00       	jmp    c001a47d <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a0 02 c0       	push   0xc002a08c
c000f086:	e8 49 3d 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 92 e2 02 c0       	mov    ds:0xc002e292,eax
c000f0c7:	66 89 15 90 e2 02 c0 	mov    WORD PTR ds:0xc002e290,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 9b ea 00 00       	call   c001dc79 <unlockScheduler()>
c000f1de:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 54 93 01 00       	call   c0028580 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 4b 93 01 00       	call   c0028580 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 98 e2 02 c0 ff 07 	mov    WORD PTR ds:0xc002e298,0x7ff
c000f323:	a3 9a e2 02 c0       	mov    ds:0xc002e29a,eax
c000f328:	0f 01 1d 98 e2 02 c0 	lidtd  ds:0xc002e298
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 09 28 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 20 2d 00 00       	call   c0012340 <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 6a 1e 00 00       	call   c00114a8 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 9b 1e 00 00       	call   c00114e8 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 88 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e288
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d a8 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1a8
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 a8 d1 02 c0       	mov    eax,ds:0xc002d1a8
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a0 02 c0       	push   0xc002a0a8
c000f6f4:	e8 db 36 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 a8 d1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d1a8,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 ff 26 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d a8 d1 02 c0    	mov    ebp,DWORD PTR ds:0xc002d1a8
c000f727:	e8 b1 07 00 00       	call   c000fedd <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 07 2b 00 00       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d a8 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1a8
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a0 02 c0       	push   0xc002a0d8
c000f7ad:	e8 cb ac 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a0 02 c0       	push   0xc002a0dd
c000f7c3:	e8 b5 ac 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 9e e4 00 00       	call   c001dc77 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 8f e4 00 00       	call   c001dc79 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 23 26 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 36 2b 00 00       	call   c0012340 <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 08 26 00 00       	call   c0011e1e <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 d9 27 00 00       	call   c0011ffc <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 c0 d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1c0
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 c0 d1 02 c0       	mov    eax,ds:0xc002d1c0
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 8a 0c 00 00       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 4c 0c 00 00       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 e3 0c 00 00       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 c0 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d1c0
c000fb46:	80 3d 20 e3 02 c0 00 	cmp    BYTE PTR ds:0xc002e320,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d c0 d1 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d1c0,0x8000
c000fba0:	c6 05 20 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e320,0x1
c000fba7:	c7 05 58 e3 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e358,0xc000fa13
c000fbb1:	c7 05 44 e3 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e344,0xc000f89a
c000fbbb:	c7 05 40 e3 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e340,0xc000f8e5
c000fbc5:	c7 05 4c e3 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e34c,0xc000fa59
c000fbcf:	c7 05 54 e3 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e354,0xc000f963
c000fbd9:	c7 05 48 e3 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e348,0xc000f9c1
c000fbe3:	c7 05 50 e3 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e350,0xc000f9c2
c000fbed:	c7 05 5c e3 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e35c,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 20             	sub    esp,0x20
c000fc05:	e8 ca 09 00 00       	call   c00105d4 <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 e4 a0 02 c0       	push   0xc002a0e4
c000fc4a:	e8 85 31 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	05 ff 0f 00 00       	add    eax,0xfff
c000fc59:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc61:	e8 2a 04 00 00       	call   c0010090 <Phys::physicalMemorySetup(unsigned int)>
c000fc66:	e8 cb 20 00 00       	call   c0011d36 <Virt::virtualMemorySetup()>
c000fc6b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7a:	75 0e                	jne    c000fc8a <kernel_main+0x92>
c000fc7c:	89 d8                	mov    eax,ebx
c000fc7e:	25 48 03 00 00       	and    eax,0x348
c000fc83:	3d 00 03 00 00       	cmp    eax,0x300
c000fc88:	74 10                	je     c000fc9a <kernel_main+0xa2>
c000fc8a:	83 ec 0c             	sub    esp,0xc
c000fc8d:	68 61 b9 02 c0       	push   0xc002b961
c000fc92:	e8 e6 a7 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	89 1d a0 e2 02 c0    	mov    DWORD PTR ds:0xc002e2a0,ebx
c000fca3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fca7:	53                   	push   ebx
c000fca8:	e8 77 21 00 00       	call   c0011e24 <VAS::VAS()>
c000fcad:	89 1d 0c e4 02 c0    	mov    DWORD PTR ds:0xc002e40c,ebx
c000fcb3:	e8 68 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcb8:	c7 04 24 fb a0 02 c0 	mov    DWORD PTR [esp],0xc002a0fb
c000fcbf:	e8 10 31 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fcc4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccb:	e8 70 fb ff ff       	call   c000f840 <malloc>
c000fcd0:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd3:	89 c6                	mov    esi,eax
c000fcd5:	e8 60 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcda:	58                   	pop    eax
c000fcdb:	89 35 88 e2 02 c0    	mov    DWORD PTR ds:0xc002e288,esi
c000fce1:	5a                   	pop    edx
c000fce2:	56                   	push   esi
c000fce3:	68 18 a1 02 c0       	push   0xc002a118
c000fce8:	e8 e7 30 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fced:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c000fcf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf4:	6a 00                	push   0x0
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	50                   	push   eax
c000fcfb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fcfe:	83 c4 14             	add    esp,0x14
c000fd01:	53                   	push   ebx
c000fd02:	e8 cd 23 00 00       	call   c00120d4 <VAS::~VAS()>
c000fd07:	c7 04 24 2b a1 02 c0 	mov    DWORD PTR [esp],0xc002a12b
c000fd0e:	e8 6a a7 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000fd13:	83 c4 30             	add    esp,0x30
c000fd16:	5b                   	pop    ebx
c000fd17:	5e                   	pop    esi
c000fd18:	5f                   	pop    edi
c000fd19:	c3                   	ret    

c000fd1a <Phys::allocateDMA(unsigned long)>:
c000fd1a:	55                   	push   ebp
c000fd1b:	31 d2                	xor    edx,edx
c000fd1d:	57                   	push   edi
c000fd1e:	31 ed                	xor    ebp,ebp
c000fd20:	56                   	push   esi
c000fd21:	31 c9                	xor    ecx,ecx
c000fd23:	53                   	push   ebx
c000fd24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	c1 ee 0c             	shr    esi,0xc
c000fd33:	eb 17                	jmp    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd35:	85 c9                	test   ecx,ecx
c000fd37:	75 04                	jne    c000fd3d <Phys::allocateDMA(unsigned long)+0x23>
c000fd39:	89 d5                	mov    ebp,edx
c000fd3b:	89 d0                	mov    eax,edx
c000fd3d:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd40:	39 de                	cmp    esi,ebx
c000fd42:	74 20                	je     c000fd64 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd44:	42                   	inc    edx
c000fd45:	89 d9                	mov    ecx,ebx
c000fd47:	83 fa 2f             	cmp    edx,0x2f
c000fd4a:	7f 11                	jg     c000fd5d <Phys::allocateDMA(unsigned long)+0x43>
c000fd4c:	80 ba e0 e2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1d20],0x0
c000fd53:	74 e0                	je     c000fd35 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd55:	31 c9                	xor    ecx,ecx
c000fd57:	42                   	inc    edx
c000fd58:	83 fa 2f             	cmp    edx,0x2f
c000fd5b:	7e ef                	jle    c000fd4c <Phys::allocateDMA(unsigned long)+0x32>
c000fd5d:	5b                   	pop    ebx
c000fd5e:	31 c0                	xor    eax,eax
c000fd60:	5e                   	pop    esi
c000fd61:	5f                   	pop    edi
c000fd62:	5d                   	pop    ebp
c000fd63:	c3                   	ret    
c000fd64:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd67:	89 d7                	mov    edi,edx
c000fd69:	4f                   	dec    edi
c000fd6a:	79 03                	jns    c000fd6f <Phys::allocateDMA(unsigned long)+0x55>
c000fd6c:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd6f:	c1 ff 04             	sar    edi,0x4
c000fd72:	89 c2                	mov    edx,eax
c000fd74:	c1 fa 04             	sar    edx,0x4
c000fd77:	39 fa                	cmp    edx,edi
c000fd79:	75 2f                	jne    c000fdaa <Phys::allocateDMA(unsigned long)+0x90>
c000fd7b:	85 db                	test   ebx,ebx
c000fd7d:	74 1a                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd7f:	be e0 e2 02 c0       	mov    esi,0xc002e2e0
c000fd84:	8d 90 e0 e2 02 c0    	lea    edx,[eax-0x3ffd1d20]
c000fd8a:	f7 d6                	not    esi
c000fd8c:	29 c6                	sub    esi,eax
c000fd8e:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd91:	42                   	inc    edx
c000fd92:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd95:	39 d9                	cmp    ecx,ebx
c000fd97:	7f f5                	jg     c000fd8e <Phys::allocateDMA(unsigned long)+0x74>
c000fd99:	85 ff                	test   edi,edi
c000fd9b:	74 13                	je     c000fdb0 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9d:	5b                   	pop    ebx
c000fd9e:	05 50 20 0c 00       	add    eax,0xc2050
c000fda3:	5e                   	pop    esi
c000fda4:	c1 e0 0c             	shl    eax,0xc
c000fda7:	5f                   	pop    edi
c000fda8:	5d                   	pop    ebp
c000fda9:	c3                   	ret    
c000fdaa:	89 ea                	mov    edx,ebp
c000fdac:	31 c9                	xor    ecx,ecx
c000fdae:	eb a7                	jmp    c000fd57 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb0:	5b                   	pop    ebx
c000fdb1:	c1 e0 0c             	shl    eax,0xc
c000fdb4:	5e                   	pop    esi
c000fdb5:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdba:	5f                   	pop    edi
c000fdbb:	5d                   	pop    ebp
c000fdbc:	c3                   	ret    

c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc5:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcb:	c1 e9 0c             	shr    ecx,0xc
c000fdce:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd3:	76 25                	jbe    c000fdfa <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd5:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fdda:	c1 e8 0c             	shr    eax,0xc
c000fddd:	8d 50 10             	lea    edx,[eax+0x10]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 15                	je     c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde4:	8d 82 e0 e2 02 c0    	lea    eax,[edx-0x3ffd1d20]
c000fdea:	8d 94 11 e0 e2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1d20]
c000fdf1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf4:	40                   	inc    eax
c000fdf5:	39 d0                	cmp    eax,edx
c000fdf7:	75 f8                	jne    c000fdf1 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdf9:	c3                   	ret    
c000fdfa:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe00:	c1 ea 0c             	shr    edx,0xc
c000fe03:	eb db                	jmp    c000fde0 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe05 <Phys::setPageState(unsigned long, bool)>:
c000fe05:	56                   	push   esi
c000fe06:	ba 01 00 00 00       	mov    edx,0x1
c000fe0b:	53                   	push   ebx
c000fe0c:	8b 35 ac d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d1ac
c000fe12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe16:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe1a:	89 c8                	mov    eax,ecx
c000fe1c:	83 e1 07             	and    ecx,0x7
c000fe1f:	c1 e8 03             	shr    eax,0x3
c000fe22:	d3 e3                	shl    ebx,cl
c000fe24:	01 c6                	add    esi,eax
c000fe26:	d3 e2                	shl    edx,cl
c000fe28:	f7 d2                	not    edx
c000fe2a:	20 16                	and    BYTE PTR [esi],dl
c000fe2c:	03 05 ac d1 02 c0    	add    eax,DWORD PTR ds:0xc002d1ac
c000fe32:	08 18                	or     BYTE PTR [eax],bl
c000fe34:	5b                   	pop    ebx
c000fe35:	5e                   	pop    esi
c000fe36:	c3                   	ret    

c000fe37 <Phys::getPageState(unsigned long)>:
c000fe37:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe3b:	8b 15 ac d1 02 c0    	mov    edx,DWORD PTR ds:0xc002d1ac
c000fe41:	89 c8                	mov    eax,ecx
c000fe43:	83 e1 07             	and    ecx,0x7
c000fe46:	c1 e8 03             	shr    eax,0x3
c000fe49:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe4d:	d3 f8                	sar    eax,cl
c000fe4f:	83 e0 01             	and    eax,0x1
c000fe52:	c3                   	ret    

c000fe53 <Phys::freePage(unsigned long)>:
c000fe53:	53                   	push   ebx
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe5b:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe61:	76 57                	jbe    c000feba <Phys::freePage(unsigned long)+0x67>
c000fe63:	c1 eb 0c             	shr    ebx,0xc
c000fe66:	53                   	push   ebx
c000fe67:	e8 cb ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fe6c:	5a                   	pop    edx
c000fe6d:	84 c0                	test   al,al
c000fe6f:	74 5b                	je     c000fecc <Phys::freePage(unsigned long)+0x79>
c000fe71:	a1 d0 e2 02 c0       	mov    eax,ds:0xc002e2d0
c000fe76:	48                   	dec    eax
c000fe77:	a3 d0 e2 02 c0       	mov    ds:0xc002e2d0,eax
c000fe7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe82:	c1 e0 02             	shl    eax,0x2
c000fe85:	99                   	cdq    
c000fe86:	f7 3d d4 e2 02 c0    	idiv   DWORD PTR ds:0xc002e2d4
c000fe8c:	39 05 cc e2 02 c0    	cmp    DWORD PTR ds:0xc002e2cc,eax
c000fe92:	75 13                	jne    c000fea7 <Phys::freePage(unsigned long)+0x54>
c000fe94:	83 ec 08             	sub    esp,0x8
c000fe97:	6a 00                	push   0x0
c000fe99:	53                   	push   ebx
c000fe9a:	e8 66 ff ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000fe9f:	83 c4 10             	add    esp,0x10
c000fea2:	83 c4 08             	add    esp,0x8
c000fea5:	5b                   	pop    ebx
c000fea6:	c3                   	ret    
c000fea7:	83 ec 0c             	sub    esp,0xc
c000feaa:	a3 cc e2 02 c0       	mov    ds:0xc002e2cc,eax
c000feaf:	50                   	push   eax
c000feb0:	e8 b3 0a 00 00       	call   c0010968 <VgaText::updateRAMUsageDisplay(int)>
c000feb5:	83 c4 10             	add    esp,0x10
c000feb8:	eb da                	jmp    c000fe94 <Phys::freePage(unsigned long)+0x41>
c000feba:	68 00 10 00 00       	push   0x1000
c000febf:	53                   	push   ebx
c000fec0:	e8 f8 fe ff ff       	call   c000fdbd <Phys::freeDMA(unsigned long, unsigned long)>
c000fec5:	59                   	pop    ecx
c000fec6:	5b                   	pop    ebx
c000fec7:	83 c4 08             	add    esp,0x8
c000feca:	5b                   	pop    ebx
c000fecb:	c3                   	ret    
c000fecc:	c7 44 24 10 46 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a146
c000fed4:	83 c4 08             	add    esp,0x8
c000fed7:	5b                   	pop    ebx
c000fed8:	e9 a0 a5 00 00       	jmp    c001a47d <Krnl::panic(char const*)>

c000fedd <Phys::allocatePage()>:
c000fedd:	56                   	push   esi
c000fede:	53                   	push   ebx
c000fedf:	83 ec 14             	sub    esp,0x14
c000fee2:	8b 35 c4 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e2c4
c000fee8:	89 f3                	mov    ebx,esi
c000feea:	eb 0a                	jmp    c000fef6 <Phys::allocatePage()+0x19>
c000feec:	89 1d c4 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c4,ebx
c000fef2:	39 de                	cmp    esi,ebx
c000fef4:	74 24                	je     c000ff1a <Phys::allocatePage()+0x3d>
c000fef6:	53                   	push   ebx
c000fef7:	e8 3b ff ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000fefc:	5a                   	pop    edx
c000fefd:	84 c0                	test   al,al
c000feff:	74 7b                	je     c000ff7c <Phys::allocatePage()+0x9f>
c000ff01:	43                   	inc    ebx
c000ff02:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff08:	75 e2                	jne    c000feec <Phys::allocatePage()+0xf>
c000ff0a:	31 db                	xor    ebx,ebx
c000ff0c:	c7 05 c4 e2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e2c4,0x0
c000ff16:	39 de                	cmp    esi,ebx
c000ff18:	75 dc                	jne    c000fef6 <Phys::allocatePage()+0x19>
c000ff1a:	83 ec 0c             	sub    esp,0xc
c000ff1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff25:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c000ff2b:	e8 a0 2b 00 00       	call   c0012ad0 <VAS::scanForEviction()>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	85 c0                	test   eax,eax
c000ff35:	0f 85 a8 00 00 00    	jne    c000ffe3 <Phys::allocatePage()+0x106>
c000ff3b:	83 ec 0c             	sub    esp,0xc
c000ff3e:	68 7a a1 02 c0       	push   0xc002a17a
c000ff43:	e8 8c 2e 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ff48:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff4f:	e8 c6 fd ff ff       	call   c000fd1a <Phys::allocateDMA(unsigned long)>
c000ff54:	83 c4 10             	add    esp,0x10
c000ff57:	85 c0                	test   eax,eax
c000ff59:	75 6f                	jne    c000ffca <Phys::allocatePage()+0xed>
c000ff5b:	83 ec 0c             	sub    esp,0xc
c000ff5e:	68 8b a1 02 c0       	push   0xc002a18b
c000ff63:	e8 15 a5 00 00       	call   c001a47d <Krnl::panic(char const*)>
c000ff68:	83 c4 10             	add    esp,0x10
c000ff6b:	8b 1d c4 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2c4
c000ff71:	53                   	push   ebx
c000ff72:	e8 c0 fe ff ff       	call   c000fe37 <Phys::getPageState(unsigned long)>
c000ff77:	5a                   	pop    edx
c000ff78:	84 c0                	test   al,al
c000ff7a:	75 85                	jne    c000ff01 <Phys::allocatePage()+0x24>
c000ff7c:	6a 01                	push   0x1
c000ff7e:	53                   	push   ebx
c000ff7f:	e8 81 fe ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c000ff84:	a1 d0 e2 02 c0       	mov    eax,ds:0xc002e2d0
c000ff89:	40                   	inc    eax
c000ff8a:	a3 d0 e2 02 c0       	mov    ds:0xc002e2d0,eax
c000ff8f:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff92:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff95:	c1 e0 02             	shl    eax,0x2
c000ff98:	99                   	cdq    
c000ff99:	f7 3d d4 e2 02 c0    	idiv   DWORD PTR ds:0xc002e2d4
c000ff9f:	5a                   	pop    edx
c000ffa0:	39 05 cc e2 02 c0    	cmp    DWORD PTR ds:0xc002e2cc,eax
c000ffa6:	59                   	pop    ecx
c000ffa7:	75 27                	jne    c000ffd0 <Phys::allocatePage()+0xf3>
c000ffa9:	83 ec 08             	sub    esp,0x8
c000ffac:	a1 c4 e2 02 c0       	mov    eax,ds:0xc002e2c4
c000ffb1:	c1 e0 0c             	shl    eax,0xc
c000ffb4:	50                   	push   eax
c000ffb5:	68 5c a1 02 c0       	push   0xc002a15c
c000ffba:	e8 15 2e 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000ffbf:	a1 c4 e2 02 c0       	mov    eax,ds:0xc002e2c4
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	c1 e0 0c             	shl    eax,0xc
c000ffca:	83 c4 14             	add    esp,0x14
c000ffcd:	5b                   	pop    ebx
c000ffce:	5e                   	pop    esi
c000ffcf:	c3                   	ret    
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	a3 cc e2 02 c0       	mov    ds:0xc002e2cc,eax
c000ffd8:	50                   	push   eax
c000ffd9:	e8 8a 09 00 00       	call   c0010968 <VgaText::updateRAMUsageDisplay(int)>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	eb c6                	jmp    c000ffa9 <Phys::allocatePage()+0xcc>
c000ffe3:	83 ec 08             	sub    esp,0x8
c000ffe6:	50                   	push   eax
c000ffe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffeb:	68 6b a1 02 c0       	push   0xc002a16b
c000fff0:	e8 df 2d 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c000fff5:	83 c4 10             	add    esp,0x10
c000fff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fffc:	eb cc                	jmp    c000ffca <Phys::allocatePage()+0xed>

c000fffe <Phys::allocateContiguousPages(int)>:
c000fffe:	57                   	push   edi
c000ffff:	56                   	push   esi
c0010000:	53                   	push   ebx
c0010001:	31 db                	xor    ebx,ebx
c0010003:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010007:	e8 6b dc 00 00       	call   c001dc77 <lockScheduler()>
c001000c:	85 db                	test   ebx,ebx
c001000e:	75 11                	jne    c0010021 <Phys::allocateContiguousPages(int)+0x23>
c0010010:	e8 c8 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c0010015:	83 ff 01             	cmp    edi,0x1
c0010018:	89 c6                	mov    esi,eax
c001001a:	74 21                	je     c001003d <Phys::allocateContiguousPages(int)+0x3f>
c001001c:	bb 01 00 00 00       	mov    ebx,0x1
c0010021:	e8 b7 fe ff ff       	call   c000fedd <Phys::allocatePage()>
c0010026:	89 da                	mov    edx,ebx
c0010028:	c1 e2 0c             	shl    edx,0xc
c001002b:	01 f2                	add    edx,esi
c001002d:	39 c2                	cmp    edx,eax
c001002f:	74 17                	je     c0010048 <Phys::allocateContiguousPages(int)+0x4a>
c0010031:	bb 01 00 00 00       	mov    ebx,0x1
c0010036:	89 c6                	mov    esi,eax
c0010038:	83 ff 01             	cmp    edi,0x1
c001003b:	75 e4                	jne    c0010021 <Phys::allocateContiguousPages(int)+0x23>
c001003d:	e8 37 dc 00 00       	call   c001dc79 <unlockScheduler()>
c0010042:	89 f0                	mov    eax,esi
c0010044:	5b                   	pop    ebx
c0010045:	5e                   	pop    esi
c0010046:	5f                   	pop    edi
c0010047:	c3                   	ret    
c0010048:	43                   	inc    ebx
c0010049:	39 fb                	cmp    ebx,edi
c001004b:	75 bf                	jne    c001000c <Phys::allocateContiguousPages(int)+0xe>
c001004d:	e8 27 dc 00 00       	call   c001dc79 <unlockScheduler()>
c0010052:	89 f0                	mov    eax,esi
c0010054:	5b                   	pop    ebx
c0010055:	5e                   	pop    esi
c0010056:	5f                   	pop    edi
c0010057:	c3                   	ret    

c0010058 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010058:	56                   	push   esi
c0010059:	53                   	push   ebx
c001005a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001005e:	39 1d c8 e2 02 c0    	cmp    DWORD PTR ds:0xc002e2c8,ebx
c0010064:	73 06                	jae    c001006c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010066:	89 1d c8 e2 02 c0    	mov    DWORD PTR ds:0xc002e2c8,ebx
c001006c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010070:	c1 eb 0c             	shr    ebx,0xc
c0010073:	c1 e8 0c             	shr    eax,0xc
c0010076:	39 d8                	cmp    eax,ebx
c0010078:	73 13                	jae    c001008d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001007a:	6a 00                	push   0x0
c001007c:	8d 70 01             	lea    esi,[eax+0x1]
c001007f:	50                   	push   eax
c0010080:	e8 80 fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010085:	5a                   	pop    edx
c0010086:	89 f0                	mov    eax,esi
c0010088:	59                   	pop    ecx
c0010089:	39 f3                	cmp    ebx,esi
c001008b:	75 ed                	jne    c001007a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001008d:	5b                   	pop    ebx
c001008e:	5e                   	pop    esi
c001008f:	c3                   	ret    

c0010090 <Phys::physicalMemorySetup(unsigned int)>:
c0010090:	55                   	push   ebp
c0010091:	57                   	push   edi
c0010092:	56                   	push   esi
c0010093:	53                   	push   ebx
c0010094:	31 db                	xor    ebx,ebx
c0010096:	83 ec 40             	sub    esp,0x40
c0010099:	6a 30                	push   0x30
c001009b:	6a 00                	push   0x0
c001009d:	68 e0 e2 02 c0       	push   0xc002e2e0
c00100a2:	e8 d1 06 ff ff       	call   c0000778 <memset>
c00100a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b0:	05 00 10 00 00       	add    eax,0x1000
c00100b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100b9:	83 c4 10             	add    esp,0x10
c00100bc:	83 ec 08             	sub    esp,0x8
c00100bf:	6a 01                	push   0x1
c00100c1:	53                   	push   ebx
c00100c2:	43                   	inc    ebx
c00100c3:	e8 3d fd ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d1:	75 e9                	jne    c00100bc <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d3:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100da:	66 85 c0             	test   ax,ax
c00100dd:	0f 84 8e 01 00 00    	je     c0010271 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f3:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100fc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010104:	eb 15                	jmp    c001011b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010106:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001010a:	83 c3 18             	add    ebx,0x18
c001010d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010111:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010115:	0f 84 66 01 00 00    	je     c0010281 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001011b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001011e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010121:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010124:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010128:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001012c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001012e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010131:	01 f0                	add    eax,esi
c0010133:	55                   	push   ebp
c0010134:	11 fa                	adc    edx,edi
c0010136:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001013a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001013e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010142:	56                   	push   esi
c0010143:	68 c4 a1 02 c0       	push   0xc002a1c4
c0010148:	e8 87 2c 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001014d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010151:	83 c4 10             	add    esp,0x10
c0010154:	09 f8                	or     eax,edi
c0010156:	0f 85 25 01 00 00    	jne    c0010281 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001015c:	4d                   	dec    ebp
c001015d:	75 a7                	jne    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001015f:	ba 00 00 08 00       	mov    edx,0x80000
c0010164:	89 c1                	mov    ecx,eax
c0010166:	39 f2                	cmp    edx,esi
c0010168:	19 f9                	sbb    ecx,edi
c001016a:	0f 82 a7 00 00 00    	jb     c0010217 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010170:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010174:	89 c1                	mov    ecx,eax
c0010176:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c001017a:	0f 83 97 00 00 00    	jae    c0010217 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010180:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010185:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010189:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001018d:	39 fa                	cmp    edx,edi
c001018f:	19 e8                	sbb    eax,ebp
c0010191:	0f 82 14 01 00 00    	jb     c00102ab <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010197:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001019b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019f:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a5:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101aa:	83 d5 ff             	adc    ebp,0xffffffff
c00101ad:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b1:	31 c0                	xor    eax,eax
c00101b3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b7:	39 fa                	cmp    edx,edi
c00101b9:	89 c1                	mov    ecx,eax
c00101bb:	19 e9                	sbb    ecx,ebp
c00101bd:	0f 83 43 ff ff ff    	jae    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c3:	be 00 00 08 00       	mov    esi,0x80000
c00101c8:	50                   	push   eax
c00101c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101cd:	57                   	push   edi
c00101ce:	56                   	push   esi
c00101cf:	68 e8 a1 02 c0       	push   0xc002a1e8
c00101d4:	e8 fb 2b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00101d9:	5a                   	pop    edx
c00101da:	59                   	pop    ecx
c00101db:	57                   	push   edi
c00101dc:	56                   	push   esi
c00101dd:	e8 76 fe ff ff       	call   c0010058 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101ea:	83 c4 0c             	add    esp,0xc
c00101ed:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f1:	03 05 d4 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e2d4
c00101f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101fe:	a3 d4 e2 02 c0       	mov    ds:0xc002e2d4,eax
c0010203:	52                   	push   edx
c0010204:	50                   	push   eax
c0010205:	68 a7 a1 02 c0       	push   0xc002a1a7
c001020a:	e8 c5 2b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001020f:	83 c4 10             	add    esp,0x10
c0010212:	e9 ef fe ff ff       	jmp    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010217:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001021b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010223:	39 ea                	cmp    edx,ebp
c0010225:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010229:	0f 82 d7 fe ff ff    	jb     c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010234:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010238:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c001023c:	0f 83 c4 fe ff ff    	jae    c0010106 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	39 ee                	cmp    esi,ebp
c0010244:	89 f8                	mov    eax,edi
c0010246:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c001024a:	0f 83 78 ff ff ff    	jae    c00101c8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010254:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010258:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001025c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010260:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001026c:	e9 57 ff ff ff       	jmp    c00101c8 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010271:	83 ec 0c             	sub    esp,0xc
c0010274:	68 99 a1 02 c0       	push   0xc002a199
c0010279:	e8 ff a1 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001027e:	83 c4 10             	add    esp,0x10
c0010281:	bb 40 01 00 00       	mov    ebx,0x140
c0010286:	83 ec 08             	sub    esp,0x8
c0010289:	6a 00                	push   0x0
c001028b:	53                   	push   ebx
c001028c:	43                   	inc    ebx
c001028d:	e8 73 fb ff ff       	call   c000fe05 <Phys::setPageState(unsigned long, bool)>
c0010292:	ff 05 d4 e2 02 c0    	inc    DWORD PTR ds:0xc002e2d4
c0010298:	83 c4 10             	add    esp,0x10
c001029b:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a1:	75 e3                	jne    c0010286 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a3:	83 c4 3c             	add    esp,0x3c
c00102a6:	5b                   	pop    ebx
c00102a7:	5e                   	pop    esi
c00102a8:	5f                   	pop    edi
c00102a9:	5d                   	pop    ebp
c00102aa:	c3                   	ret    
c00102ab:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102bb:	e9 d7 fe ff ff       	jmp    c0010197 <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102c0 <Pipe::isAtty()>:
c00102c0:	31 c0                	xor    eax,eax
c00102c2:	c3                   	ret    
c00102c3:	90                   	nop

c00102c4 <Pipe::~Pipe()>:
c00102c4:	83 ec 0c             	sub    esp,0xc
c00102c7:	ba 54 a2 02 c0       	mov    edx,0xc002a254
c00102cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d0:	89 10                	mov    DWORD PTR [eax],edx
c00102d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d6:	83 ec 0c             	sub    esp,0xc
c00102d9:	50                   	push   eax
c00102da:	e8 37 16 00 00       	call   c0011916 <UnixFile::~UnixFile()>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	90                   	nop
c00102e3:	83 c4 0c             	add    esp,0xc
c00102e6:	c3                   	ret    
c00102e7:	90                   	nop

c00102e8 <Pipe::~Pipe()>:
c00102e8:	83 ec 0c             	sub    esp,0xc
c00102eb:	83 ec 0c             	sub    esp,0xc
c00102ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f2:	e8 cd ff ff ff       	call   c00102c4 <Pipe::~Pipe()>
c00102f7:	83 c4 10             	add    esp,0x10
c00102fa:	83 ec 08             	sub    esp,0x8
c00102fd:	6a 20                	push   0x20
c00102ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010303:	e8 ec 29 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0010308:	83 c4 10             	add    esp,0x10
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Pipe::read(unsigned long long, void*, int*)>:
c0010310:	55                   	push   ebp
c0010311:	57                   	push   edi
c0010312:	56                   	push   esi
c0010313:	53                   	push   ebx
c0010314:	83 ec 1c             	sub    esp,0x1c
c0010317:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001031b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001031f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010323:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010326:	89 c8                	mov    eax,ecx
c0010328:	99                   	cdq    
c0010329:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001032d:	74 19                	je     c0010348 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001032f:	39 f9                	cmp    ecx,edi
c0010331:	89 d1                	mov    ecx,edx
c0010333:	19 f1                	sbb    ecx,esi
c0010335:	73 11                	jae    c0010348 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010337:	e8 3b d9 00 00       	call   c001dc77 <lockScheduler()>
c001033c:	e8 71 dc 00 00       	call   c001dfb2 <schedule()>
c0010341:	e8 33 d9 00 00       	call   c001dc79 <unlockScheduler()>
c0010346:	eb db                	jmp    c0010323 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010348:	39 f8                	cmp    eax,edi
c001034a:	89 d1                	mov    ecx,edx
c001034c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010350:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010354:	19 f1                	sbb    ecx,esi
c0010356:	73 08                	jae    c0010360 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010358:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001035c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010360:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010363:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010366:	29 c6                	sub    esi,eax
c0010368:	89 f1                	mov    ecx,esi
c001036a:	c1 f9 1f             	sar    ecx,0x1f
c001036d:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010371:	89 ca                	mov    edx,ecx
c0010373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010377:	19 d1                	sbb    ecx,edx
c0010379:	73 04                	jae    c001037f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c001037b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001037f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010383:	89 fd                	mov    ebp,edi
c0010385:	29 f5                	sub    ebp,esi
c0010387:	85 f6                	test   esi,esi
c0010389:	74 12                	je     c001039d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c001038b:	52                   	push   edx
c001038c:	56                   	push   esi
c001038d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010390:	50                   	push   eax
c0010391:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010395:	e8 aa 03 ff ff       	call   c0000744 <memcpy>
c001039a:	83 c4 10             	add    esp,0x10
c001039d:	85 ed                	test   ebp,ebp
c001039f:	74 12                	je     c00103b3 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a1:	50                   	push   eax
c00103a2:	55                   	push   ebp
c00103a3:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103a6:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103aa:	56                   	push   esi
c00103ab:	e8 94 03 ff ff       	call   c0000744 <memcpy>
c00103b0:	83 c4 10             	add    esp,0x10
c00103b3:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103b9:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103bc:	99                   	cdq    
c00103bd:	89 f7                	mov    edi,esi
c00103bf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103c3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103c7:	c1 ff 1f             	sar    edi,0x1f
c00103ca:	57                   	push   edi
c00103cb:	56                   	push   esi
c00103cc:	52                   	push   edx
c00103cd:	50                   	push   eax
c00103ce:	e8 a9 65 01 00       	call   c002697c <__umoddi3>
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103d9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103de:	75 10                	jne    c00103f0 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e0:	83 ec 0c             	sub    esp,0xc
c00103e3:	68 11 a2 02 c0       	push   0xc002a211
c00103e8:	e8 90 a0 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00103ed:	83 c4 10             	add    esp,0x10
c00103f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103f8:	89 10                	mov    DWORD PTR [eax],edx
c00103fa:	83 c4 1c             	add    esp,0x1c
c00103fd:	31 c0                	xor    eax,eax
c00103ff:	5b                   	pop    ebx
c0010400:	5e                   	pop    esi
c0010401:	5f                   	pop    edi
c0010402:	5d                   	pop    ebp
c0010403:	c3                   	ret    

c0010404 <Pipe::write(unsigned long long, void*, int*)>:
c0010404:	55                   	push   ebp
c0010405:	57                   	push   edi
c0010406:	56                   	push   esi
c0010407:	53                   	push   ebx
c0010408:	83 ec 1c             	sub    esp,0x1c
c001040b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001040f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010413:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010417:	89 04 24             	mov    DWORD PTR [esp],eax
c001041a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001041d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010420:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010424:	89 de                	mov    esi,ebx
c0010426:	89 df                	mov    edi,ebx
c0010428:	c1 ff 1f             	sar    edi,0x1f
c001042b:	01 c6                	add    esi,eax
c001042d:	89 c8                	mov    eax,ecx
c001042f:	11 d7                	adc    edi,edx
c0010431:	99                   	cdq    
c0010432:	39 f1                	cmp    ecx,esi
c0010434:	89 d0                	mov    eax,edx
c0010436:	19 f8                	sbb    eax,edi
c0010438:	b8 01 00 00 00       	mov    eax,0x1
c001043d:	0f 82 80 00 00 00    	jb     c00104c3 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010443:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010446:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010449:	01 d8                	add    eax,ebx
c001044b:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001044f:	99                   	cdq    
c0010450:	f7 f9                	idiv   ecx
c0010452:	29 d1                	sub    ecx,edx
c0010454:	89 d7                	mov    edi,edx
c0010456:	89 c8                	mov    eax,ecx
c0010458:	99                   	cdq    
c0010459:	39 ce                	cmp    esi,ecx
c001045b:	19 d3                	sbb    ebx,edx
c001045d:	bb 00 00 00 00       	mov    ebx,0x0
c0010462:	72 04                	jb     c0010468 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010464:	89 f3                	mov    ebx,esi
c0010466:	29 cb                	sub    ebx,ecx
c0010468:	89 f1                	mov    ecx,esi
c001046a:	29 d9                	sub    ecx,ebx
c001046c:	74 1a                	je     c0010488 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001046e:	52                   	push   edx
c001046f:	51                   	push   ecx
c0010470:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010474:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010478:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001047b:	57                   	push   edi
c001047c:	e8 c3 02 ff ff       	call   c0000744 <memcpy>
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010488:	85 db                	test   ebx,ebx
c001048a:	74 12                	je     c001049e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001048c:	50                   	push   eax
c001048d:	53                   	push   ebx
c001048e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010492:	51                   	push   ecx
c0010493:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010496:	e8 a9 02 ff ff       	call   c0000744 <memcpy>
c001049b:	83 c4 10             	add    esp,0x10
c001049e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104a6:	75 10                	jne    c00104b8 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104a8:	83 ec 0c             	sub    esp,0xc
c00104ab:	68 2d a2 02 c0       	push   0xc002a22d
c00104b0:	e8 c8 9f 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00104b5:	83 c4 10             	add    esp,0x10
c00104b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104bf:	89 38                	mov    DWORD PTR [eax],edi
c00104c1:	31 c0                	xor    eax,eax
c00104c3:	83 c4 1c             	add    esp,0x1c
c00104c6:	5b                   	pop    ebx
c00104c7:	5e                   	pop    esi
c00104c8:	5f                   	pop    edi
c00104c9:	5d                   	pop    ebp
c00104ca:	c3                   	ret    
c00104cb:	90                   	nop

c00104cc <Pipe::Pipe(int)>:
c00104cc:	83 ec 0c             	sub    esp,0xc
c00104cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d3:	83 ec 08             	sub    esp,0x8
c00104d6:	6a 00                	push   0x0
c00104d8:	50                   	push   eax
c00104d9:	e8 56 12 00 00       	call   c0011734 <UnixFile::UnixFile(int)>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	ba 54 a2 02 c0       	mov    edx,0xc002a254
c00104e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ea:	89 10                	mov    DWORD PTR [eax],edx
c00104ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104f4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010506:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001050d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010511:	83 ec 0c             	sub    esp,0xc
c0010514:	50                   	push   eax
c0010515:	e8 26 f3 ff ff       	call   c000f840 <malloc>
c001051a:	83 c4 10             	add    esp,0x10
c001051d:	89 c2                	mov    edx,eax
c001051f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010523:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001052e:	90                   	nop
c001052f:	83 c4 0c             	add    esp,0xc
c0010532:	c3                   	ret    
c0010533:	90                   	nop

c0010534 <VgaText::isAtty()>:
c0010534:	b0 01                	mov    al,0x1
c0010536:	c3                   	ret    
c0010537:	90                   	nop

c0010538 <VgaText::~VgaText()>:
c0010538:	83 ec 0c             	sub    esp,0xc
c001053b:	ba 10 a3 02 c0       	mov    edx,0xc002a310
c0010540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010544:	89 10                	mov    DWORD PTR [eax],edx
c0010546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	50                   	push   eax
c001054e:	e8 c3 13 00 00       	call   c0011916 <UnixFile::~UnixFile()>
c0010553:	83 c4 10             	add    esp,0x10
c0010556:	90                   	nop
c0010557:	83 c4 0c             	add    esp,0xc
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::~VgaText()>:
c001055c:	83 ec 0c             	sub    esp,0xc
c001055f:	83 ec 0c             	sub    esp,0xc
c0010562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010566:	e8 cd ff ff ff       	call   c0010538 <VgaText::~VgaText()>
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	83 ec 08             	sub    esp,0x8
c0010571:	68 60 12 00 00       	push   0x1260
c0010576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001057a:	e8 75 27 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	83 c4 0c             	add    esp,0xc
c0010585:	c3                   	ret    

c0010586 <VgaText::read(unsigned long long, void*, int*)>:
c0010586:	83 ec 10             	sub    esp,0x10
c0010589:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001058d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010595:	e8 e0 5b 00 00       	call   c001617a <readKeyboard(VgaText*, char*, unsigned long)>
c001059a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001059e:	89 02                	mov    DWORD PTR [edx],eax
c00105a0:	31 c0                	xor    eax,eax
c00105a2:	83 c4 1c             	add    esp,0x1c
c00105a5:	c3                   	ret    

c00105a6 <setTerminalScrollLock(bool)>:
c00105a6:	c3                   	ret    

c00105a7 <addToTerminalCycle(VgaText*)>:
c00105a7:	8b 15 60 e3 02 c0    	mov    edx,DWORD PTR ds:0xc002e360
c00105ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b1:	85 d2                	test   edx,edx
c00105b3:	75 0c                	jne    c00105c1 <addToTerminalCycle(VgaText*)+0x1a>
c00105b5:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105bb:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c00105c0:	c3                   	ret    
c00105c1:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105c7:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105cd:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105d3:	c3                   	ret    

c00105d4 <installVgaTextImplementation()>:
c00105d4:	83 ec 10             	sub    esp,0x10
c00105d7:	6a 20                	push   0x20
c00105d9:	6a 00                	push   0x0
c00105db:	68 40 e3 02 c0       	push   0xc002e340
c00105e0:	e8 93 01 ff ff       	call   c0000778 <memset>
c00105e5:	83 c4 1c             	add    esp,0x1c
c00105e8:	c3                   	ret    

c00105e9 <scrollTerminalScrollLock(int)>:
c00105e9:	c3                   	ret    

c00105ea <VgaText::load()>:
c00105ea:	53                   	push   ebx
c00105eb:	31 c0                	xor    eax,eax
c00105ed:	83 ec 58             	sub    esp,0x58
c00105f0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105f4:	89 e2                	mov    edx,esp
c00105f6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105fa:	40                   	inc    eax
c00105fb:	83 f8 50             	cmp    eax,0x50
c00105fe:	75 f6                	jne    c00105f6 <VgaText::load()+0xc>
c0010600:	31 c0                	xor    eax,eax
c0010602:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010609:	84 c9                	test   cl,cl
c001060b:	74 06                	je     c0010613 <VgaText::load()+0x29>
c001060d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010610:	40                   	inc    eax
c0010611:	eb ef                	jmp    c0010602 <VgaText::load()+0x18>
c0010613:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010619:	85 c0                	test   eax,eax
c001061b:	74 09                	je     c0010626 <VgaText::load()+0x3c>
c001061d:	51                   	push   ecx
c001061e:	51                   	push   ecx
c001061f:	52                   	push   edx
c0010620:	53                   	push   ebx
c0010621:	ff d0                	call   eax
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001062c:	85 c0                	test   eax,eax
c001062e:	74 09                	je     c0010639 <VgaText::load()+0x4f>
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	53                   	push   ebx
c0010634:	ff d0                	call   eax
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	83 c4 58             	add    esp,0x58
c001063c:	5b                   	pop    ebx
c001063d:	c3                   	ret    

c001063e <VgaText::updateCursor()>:
c001063e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010642:	39 05 64 e3 02 c0    	cmp    DWORD PTR ds:0xc002e364,eax
c0010648:	75 0c                	jne    c0010656 <VgaText::updateCursor()+0x18>
c001064a:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010650:	85 c0                	test   eax,eax
c0010652:	74 02                	je     c0010656 <VgaText::updateCursor()+0x18>
c0010654:	ff e0                	jmp    eax
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <VgaText::showCursor(bool)>:
c0010658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001065c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010660:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010666:	c3                   	ret    
c0010667:	90                   	nop

c0010668 <VgaText::disableBlink(bool)>:
c0010668:	56                   	push   esi
c0010669:	53                   	push   ebx
c001066a:	51                   	push   ecx
c001066b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001066f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010673:	39 1d 64 e3 02 c0    	cmp    DWORD PTR ds:0xc002e364,ebx
c0010679:	75 18                	jne    c0010693 <VgaText::disableBlink(bool)+0x2b>
c001067b:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010681:	85 c0                	test   eax,eax
c0010683:	74 0e                	je     c0010693 <VgaText::disableBlink(bool)+0x2b>
c0010685:	89 f1                	mov    ecx,esi
c0010687:	52                   	push   edx
c0010688:	52                   	push   edx
c0010689:	0f b6 d1             	movzx  edx,cl
c001068c:	52                   	push   edx
c001068d:	53                   	push   ebx
c001068e:	ff d0                	call   eax
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	89 f0                	mov    eax,esi
c0010695:	83 f0 01             	xor    eax,0x1
c0010698:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001069e:	58                   	pop    eax
c001069f:	5b                   	pop    ebx
c00106a0:	5e                   	pop    esi
c00106a1:	c3                   	ret    

c00106a2 <VgaText::doANSI_SGR(int)>:
c00106a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106aa:	85 d2                	test   edx,edx
c00106ac:	75 14                	jne    c00106c2 <VgaText::doANSI_SGR(int)+0x20>
c00106ae:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106b4:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106ba:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c0:	eb 65                	jmp    c0010727 <VgaText::doANSI_SGR(int)+0x85>
c00106c2:	83 fa 07             	cmp    edx,0x7
c00106c5:	75 14                	jne    c00106db <VgaText::doANSI_SGR(int)+0x39>
c00106c7:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106cd:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106d3:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106d9:	eb 4c                	jmp    c0010727 <VgaText::doANSI_SGR(int)+0x85>
c00106db:	83 fa 1b             	cmp    edx,0x1b
c00106de:	74 ce                	je     c00106ae <VgaText::doANSI_SGR(int)+0xc>
c00106e0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106e3:	83 f9 07             	cmp    ecx,0x7
c00106e6:	77 09                	ja     c00106f1 <VgaText::doANSI_SGR(int)+0x4f>
c00106e8:	8b 14 8d e0 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e20]
c00106ef:	eb 20                	jmp    c0010711 <VgaText::doANSI_SGR(int)+0x6f>
c00106f1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106f4:	83 f9 07             	cmp    ecx,0x7
c00106f7:	77 09                	ja     c0010702 <VgaText::doANSI_SGR(int)+0x60>
c00106f9:	8b 14 8d e0 d1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2e20]
c0010700:	eb 25                	jmp    c0010727 <VgaText::doANSI_SGR(int)+0x85>
c0010702:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010705:	83 f9 07             	cmp    ecx,0x7
c0010708:	77 0e                	ja     c0010718 <VgaText::doANSI_SGR(int)+0x76>
c001070a:	8b 14 95 98 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f68]
c0010711:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010717:	c3                   	ret    
c0010718:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001071b:	83 f9 07             	cmp    ecx,0x7
c001071e:	77 0d                	ja     c001072d <VgaText::doANSI_SGR(int)+0x8b>
c0010720:	8b 14 95 70 d0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2f90]
c0010727:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001072d:	c3                   	ret    

c001072e <VgaText::setDefaultBgColour(VgaColour)>:
c001072e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010736:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001073c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010742:	c3                   	ret    
c0010743:	90                   	nop

c0010744 <VgaText::setDefaultFgColour(VgaColour)>:
c0010744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001074c:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010752:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010758:	c3                   	ret    
c0010759:	90                   	nop

c001075a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001075a:	53                   	push   ebx
c001075b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001075f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010763:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010767:	51                   	push   ecx
c0010768:	e8 c1 ff ff ff       	call   c001072e <VgaText::setDefaultBgColour(VgaColour)>
c001076d:	58                   	pop    eax
c001076e:	5a                   	pop    edx
c001076f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010773:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010777:	5b                   	pop    ebx
c0010778:	eb ca                	jmp    c0010744 <VgaText::setDefaultFgColour(VgaColour)>

c001077a <VgaText::combineColours(unsigned char, unsigned char)>:
c001077a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001077e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010783:	83 e0 0f             	and    eax,0xf
c0010786:	c1 e2 04             	shl    edx,0x4
c0010789:	09 d0                	or     eax,edx
c001078b:	c3                   	ret    

c001078c <VgaText::scrollScreen()>:
c001078c:	57                   	push   edi
c001078d:	56                   	push   esi
c001078e:	be 01 00 00 00       	mov    esi,0x1
c0010793:	53                   	push   ebx
c0010794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010798:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001079e:	31 ff                	xor    edi,edi
c00107a0:	01 d9                	add    ecx,ebx
c00107a2:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107a5:	83 fe 17             	cmp    esi,0x17
c00107a8:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107ae:	75 28                	jne    c00107d8 <VgaText::scrollScreen()+0x4c>
c00107b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00107b6:	74 1c                	je     c00107d4 <VgaText::scrollScreen()+0x48>
c00107b8:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107bf:	50                   	push   eax
c00107c0:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107c7:	50                   	push   eax
c00107c8:	e8 ad ff ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c00107cd:	5a                   	pop    edx
c00107ce:	5a                   	pop    edx
c00107cf:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107d2:	eb 04                	jmp    c00107d8 <VgaText::scrollScreen()+0x4c>
c00107d4:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107d8:	47                   	inc    edi
c00107d9:	41                   	inc    ecx
c00107da:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e0:	75 c0                	jne    c00107a2 <VgaText::scrollScreen()+0x16>
c00107e2:	46                   	inc    esi
c00107e3:	83 fe 18             	cmp    esi,0x18
c00107e6:	75 b0                	jne    c0010798 <VgaText::scrollScreen()+0xc>
c00107e8:	39 1d 64 e3 02 c0    	cmp    DWORD PTR ds:0xc002e364,ebx
c00107ee:	75 24                	jne    c0010814 <VgaText::scrollScreen()+0x88>
c00107f0:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107f7:	74 08                	je     c0010801 <VgaText::scrollScreen()+0x75>
c00107f9:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00107ff:	eb 13                	jmp    c0010814 <VgaText::scrollScreen()+0x88>
c0010801:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010807:	85 c0                	test   eax,eax
c0010809:	74 09                	je     c0010814 <VgaText::scrollScreen()+0x88>
c001080b:	83 ec 0c             	sub    esp,0xc
c001080e:	53                   	push   ebx
c001080f:	ff d0                	call   eax
c0010811:	83 c4 10             	add    esp,0x10
c0010814:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010818:	5b                   	pop    ebx
c0010819:	5e                   	pop    esi
c001081a:	5f                   	pop    edi
c001081b:	e9 1e fe ff ff       	jmp    c001063e <VgaText::updateCursor()>

c0010820 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010820:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010825:	c1 e0 08             	shl    eax,0x8
c0010828:	89 c2                	mov    edx,eax
c001082a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001082f:	09 d0                	or     eax,edx
c0010831:	c3                   	ret    

c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010832:	53                   	push   ebx
c0010833:	83 ec 08             	sub    esp,0x8
c0010836:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001083a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001083f:	50                   	push   eax
c0010840:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010845:	50                   	push   eax
c0010846:	e8 2f ff ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c001084b:	5a                   	pop    edx
c001084c:	0f b6 c0             	movzx  eax,al
c001084f:	5b                   	pop    ebx
c0010850:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010855:	50                   	push   eax
c0010856:	53                   	push   ebx
c0010857:	e8 c4 ff ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c001085c:	5a                   	pop    edx
c001085d:	5a                   	pop    edx
c001085e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010864:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010868:	0f b7 d2             	movzx  edx,dx
c001086b:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010870:	39 0d 64 e3 02 c0    	cmp    DWORD PTR ds:0xc002e364,ecx
c0010876:	75 14                	jne    c001088c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010878:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c001087e:	85 c0                	test   eax,eax
c0010880:	74 0a                	je     c001088c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010882:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010886:	83 c4 08             	add    esp,0x8
c0010889:	5b                   	pop    ebx
c001088a:	ff e0                	jmp    eax
c001088c:	83 c4 08             	add    esp,0x8
c001088f:	5b                   	pop    ebx
c0010890:	c3                   	ret    
c0010891:	90                   	nop

c0010892 <VgaText::getCursorX()>:
c0010892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010896:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001089c:	c3                   	ret    
c001089d:	90                   	nop

c001089e <VgaText::getCursorY()>:
c001089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a2:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108a8:	c3                   	ret    
c00108a9:	90                   	nop

c00108aa <VgaText::setCursor(int, int)>:
c00108aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108b2:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108bc:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108c2:	e9 77 fd ff ff       	jmp    c001063e <VgaText::updateCursor()>
c00108c7:	90                   	nop

c00108c8 <VgaText::setCursorX(int)>:
c00108c8:	83 ec 10             	sub    esp,0x10
c00108cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108cf:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108d9:	50                   	push   eax
c00108da:	e8 cb ff ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00108df:	83 c4 1c             	add    esp,0x1c
c00108e2:	c3                   	ret    
c00108e3:	90                   	nop

c00108e4 <VgaText::setCursorY(int)>:
c00108e4:	83 ec 10             	sub    esp,0x10
c00108e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108ef:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108f5:	50                   	push   eax
c00108f6:	e8 af ff ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00108fb:	83 c4 1c             	add    esp,0x1c
c00108fe:	c3                   	ret    
c00108ff:	90                   	nop

c0010900 <VgaText::incrementCursor(bool)>:
c0010900:	56                   	push   esi
c0010901:	53                   	push   ebx
c0010902:	51                   	push   ecx
c0010903:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001090b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010911:	40                   	inc    eax
c0010912:	83 f8 50             	cmp    eax,0x50
c0010915:	74 08                	je     c001091f <VgaText::incrementCursor(bool)+0x1f>
c0010917:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001091d:	eb 33                	jmp    c0010952 <VgaText::incrementCursor(bool)+0x52>
c001091f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010925:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001092f:	8d 50 01             	lea    edx,[eax+0x1]
c0010932:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010938:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001093e:	75 12                	jne    c0010952 <VgaText::incrementCursor(bool)+0x52>
c0010940:	83 ec 0c             	sub    esp,0xc
c0010943:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010949:	53                   	push   ebx
c001094a:	e8 3d fe ff ff       	call   c001078c <VgaText::scrollScreen()>
c001094f:	83 c4 10             	add    esp,0x10
c0010952:	89 f0                	mov    eax,esi
c0010954:	84 c0                	test   al,al
c0010956:	74 0c                	je     c0010964 <VgaText::incrementCursor(bool)+0x64>
c0010958:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001095c:	5a                   	pop    edx
c001095d:	5b                   	pop    ebx
c001095e:	5e                   	pop    esi
c001095f:	e9 da fc ff ff       	jmp    c001063e <VgaText::updateCursor()>
c0010964:	58                   	pop    eax
c0010965:	5b                   	pop    ebx
c0010966:	5e                   	pop    esi
c0010967:	c3                   	ret    

c0010968 <VgaText::updateRAMUsageDisplay(int)>:
c0010968:	56                   	push   esi
c0010969:	8b 35 c0 d1 02 c0    	mov    esi,DWORD PTR ds:0xc002d1c0
c001096f:	53                   	push   ebx
c0010970:	bb 0a 00 00 00       	mov    ebx,0xa
c0010975:	6a 0f                	push   0xf
c0010977:	6a 00                	push   0x0
c0010979:	e8 fc fd ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c001097e:	5a                   	pop    edx
c001097f:	59                   	pop    ecx
c0010980:	0f b6 c8             	movzx  ecx,al
c0010983:	51                   	push   ecx
c0010984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010988:	99                   	cdq    
c0010989:	f7 fb                	idiv   ebx
c001098b:	89 d3                	mov    ebx,edx
c001098d:	83 c0 30             	add    eax,0x30
c0010990:	83 c3 30             	add    ebx,0x30
c0010993:	0f be c0             	movsx  eax,al
c0010996:	0f b6 db             	movzx  ebx,bl
c0010999:	50                   	push   eax
c001099a:	e8 81 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c001099f:	5a                   	pop    edx
c00109a0:	5a                   	pop    edx
c00109a1:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109a8:	51                   	push   ecx
c00109a9:	53                   	push   ebx
c00109aa:	e8 71 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c00109af:	5b                   	pop    ebx
c00109b0:	5a                   	pop    edx
c00109b1:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109b8:	51                   	push   ecx
c00109b9:	6a 25                	push   0x25
c00109bb:	e8 60 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c0:	59                   	pop    ecx
c00109c1:	5b                   	pop    ebx
c00109c2:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109c9:	5b                   	pop    ebx
c00109ca:	5e                   	pop    esi
c00109cb:	c3                   	ret    

c00109cc <VgaText::updateDiskUsage()>:
c00109cc:	55                   	push   ebp
c00109cd:	bd 10 27 00 00       	mov    ebp,0x2710
c00109d2:	57                   	push   edi
c00109d3:	8b 3d c0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1c0
c00109d9:	56                   	push   esi
c00109da:	53                   	push   ebx
c00109db:	6a 0f                	push   0xf
c00109dd:	6a 00                	push   0x0
c00109df:	e8 96 fd ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c00109e4:	5a                   	pop    edx
c00109e5:	0f b6 d8             	movzx  ebx,al
c00109e8:	59                   	pop    ecx
c00109e9:	8b 35 e8 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325e8
c00109ef:	53                   	push   ebx
c00109f0:	b9 0a 00 00 00       	mov    ecx,0xa
c00109f5:	89 f0                	mov    eax,esi
c00109f7:	99                   	cdq    
c00109f8:	f7 fd                	idiv   ebp
c00109fa:	99                   	cdq    
c00109fb:	f7 f9                	idiv   ecx
c00109fd:	8d 42 30             	lea    eax,[edx+0x30]
c0010a00:	0f b6 c0             	movzx  eax,al
c0010a03:	50                   	push   eax
c0010a04:	e8 17 fe ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a09:	5d                   	pop    ebp
c0010a0a:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a0f:	5a                   	pop    edx
c0010a10:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a14:	53                   	push   ebx
c0010a15:	89 f0                	mov    eax,esi
c0010a17:	99                   	cdq    
c0010a18:	f7 fd                	idiv   ebp
c0010a1a:	99                   	cdq    
c0010a1b:	f7 f9                	idiv   ecx
c0010a1d:	8d 42 30             	lea    eax,[edx+0x30]
c0010a20:	0f b6 c0             	movzx  eax,al
c0010a23:	50                   	push   eax
c0010a24:	e8 f7 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a29:	5d                   	pop    ebp
c0010a2a:	bd 64 00 00 00       	mov    ebp,0x64
c0010a2f:	5a                   	pop    edx
c0010a30:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a37:	53                   	push   ebx
c0010a38:	89 f0                	mov    eax,esi
c0010a3a:	99                   	cdq    
c0010a3b:	f7 fd                	idiv   ebp
c0010a3d:	99                   	cdq    
c0010a3e:	f7 f9                	idiv   ecx
c0010a40:	8d 42 30             	lea    eax,[edx+0x30]
c0010a43:	0f b6 c0             	movzx  eax,al
c0010a46:	50                   	push   eax
c0010a47:	e8 d4 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4c:	5d                   	pop    ebp
c0010a4d:	5a                   	pop    edx
c0010a4e:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a55:	53                   	push   ebx
c0010a56:	89 f0                	mov    eax,esi
c0010a58:	99                   	cdq    
c0010a59:	f7 f9                	idiv   ecx
c0010a5b:	89 d6                	mov    esi,edx
c0010a5d:	99                   	cdq    
c0010a5e:	f7 f9                	idiv   ecx
c0010a60:	8d 42 30             	lea    eax,[edx+0x30]
c0010a63:	0f b6 c0             	movzx  eax,al
c0010a66:	50                   	push   eax
c0010a67:	e8 b4 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6c:	5d                   	pop    ebp
c0010a6d:	5a                   	pop    edx
c0010a6e:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a75:	53                   	push   ebx
c0010a76:	8d 46 30             	lea    eax,[esi+0x30]
c0010a79:	0f b6 f0             	movzx  esi,al
c0010a7c:	56                   	push   esi
c0010a7d:	e8 9e fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a82:	5e                   	pop    esi
c0010a83:	8b 35 e4 25 03 c0    	mov    esi,DWORD PTR ds:0xc00325e4
c0010a89:	5d                   	pop    ebp
c0010a8a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a91:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a96:	53                   	push   ebx
c0010a97:	89 f0                	mov    eax,esi
c0010a99:	99                   	cdq    
c0010a9a:	f7 fd                	idiv   ebp
c0010a9c:	99                   	cdq    
c0010a9d:	f7 f9                	idiv   ecx
c0010a9f:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa2:	0f b6 c0             	movzx  eax,al
c0010aa5:	50                   	push   eax
c0010aa6:	e8 75 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aab:	5a                   	pop    edx
c0010aac:	5d                   	pop    ebp
c0010aad:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ab4:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ab9:	53                   	push   ebx
c0010aba:	89 f0                	mov    eax,esi
c0010abc:	99                   	cdq    
c0010abd:	f7 fd                	idiv   ebp
c0010abf:	99                   	cdq    
c0010ac0:	f7 f9                	idiv   ecx
c0010ac2:	8d 42 30             	lea    eax,[edx+0x30]
c0010ac5:	0f b6 c0             	movzx  eax,al
c0010ac8:	50                   	push   eax
c0010ac9:	e8 52 fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ace:	5a                   	pop    edx
c0010acf:	5d                   	pop    ebp
c0010ad0:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010ad7:	bd 64 00 00 00       	mov    ebp,0x64
c0010adc:	53                   	push   ebx
c0010add:	89 f0                	mov    eax,esi
c0010adf:	99                   	cdq    
c0010ae0:	f7 fd                	idiv   ebp
c0010ae2:	99                   	cdq    
c0010ae3:	f7 f9                	idiv   ecx
c0010ae5:	83 c2 30             	add    edx,0x30
c0010ae8:	0f b6 d2             	movzx  edx,dl
c0010aeb:	52                   	push   edx
c0010aec:	e8 2f fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af1:	5a                   	pop    edx
c0010af2:	5d                   	pop    ebp
c0010af3:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010afa:	53                   	push   ebx
c0010afb:	89 f0                	mov    eax,esi
c0010afd:	99                   	cdq    
c0010afe:	f7 f9                	idiv   ecx
c0010b00:	89 d6                	mov    esi,edx
c0010b02:	99                   	cdq    
c0010b03:	f7 f9                	idiv   ecx
c0010b05:	8d 42 30             	lea    eax,[edx+0x30]
c0010b08:	0f b6 c0             	movzx  eax,al
c0010b0b:	50                   	push   eax
c0010b0c:	e8 0f fd ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b11:	5a                   	pop    edx
c0010b12:	59                   	pop    ecx
c0010b13:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b1a:	53                   	push   ebx
c0010b1b:	8d 46 30             	lea    eax,[esi+0x30]
c0010b1e:	0f b6 f0             	movzx  esi,al
c0010b21:	56                   	push   esi
c0010b22:	e8 f9 fc ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b27:	5b                   	pop    ebx
c0010b28:	5e                   	pop    esi
c0010b29:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b30:	5b                   	pop    ebx
c0010b31:	5e                   	pop    esi
c0010b32:	5f                   	pop    edi
c0010b33:	5d                   	pop    ebp
c0010b34:	c3                   	ret    
c0010b35:	90                   	nop

c0010b36 <VgaText::updateTitle()>:
c0010b36:	53                   	push   ebx
c0010b37:	31 c0                	xor    eax,eax
c0010b39:	83 ec 58             	sub    esp,0x58
c0010b3c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b40:	89 e1                	mov    ecx,esp
c0010b42:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b46:	40                   	inc    eax
c0010b47:	83 f8 50             	cmp    eax,0x50
c0010b4a:	75 f6                	jne    c0010b42 <VgaText::updateTitle()+0xc>
c0010b4c:	31 c0                	xor    eax,eax
c0010b4e:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b55:	84 db                	test   bl,bl
c0010b57:	74 06                	je     c0010b5f <VgaText::updateTitle()+0x29>
c0010b59:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b5c:	40                   	inc    eax
c0010b5d:	eb ef                	jmp    c0010b4e <VgaText::updateTitle()+0x18>
c0010b5f:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b65:	85 c0                	test   eax,eax
c0010b67:	74 09                	je     c0010b72 <VgaText::updateTitle()+0x3c>
c0010b69:	53                   	push   ebx
c0010b6a:	53                   	push   ebx
c0010b6b:	51                   	push   ecx
c0010b6c:	52                   	push   edx
c0010b6d:	ff d0                	call   eax
c0010b6f:	83 c4 10             	add    esp,0x10
c0010b72:	e8 55 fe ff ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0010b77:	83 c4 58             	add    esp,0x58
c0010b7a:	5b                   	pop    ebx
c0010b7b:	c3                   	ret    

c0010b7c <VgaText::setTitleTextColour(VgaColour)>:
c0010b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b84:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b8a:	eb aa                	jmp    c0010b36 <VgaText::updateTitle()>

c0010b8c <VgaText::setTitleColour(VgaColour)>:
c0010b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b94:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010b9a:	eb 9a                	jmp    c0010b36 <VgaText::updateTitle()>

c0010b9c <VgaText::setTitle(char*)>:
c0010b9c:	53                   	push   ebx
c0010b9d:	83 ec 10             	sub    esp,0x10
c0010ba0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba8:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bae:	50                   	push   eax
c0010baf:	e8 80 fc fe ff       	call   c0000834 <strcpy>
c0010bb4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bb8:	83 c4 18             	add    esp,0x18
c0010bbb:	5b                   	pop    ebx
c0010bbc:	e9 75 ff ff ff       	jmp    c0010b36 <VgaText::updateTitle()>
c0010bc1:	90                   	nop

c0010bc2 <VgaText::decrementCursor(bool)>:
c0010bc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bc6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bca:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	74 07                	je     c0010bdb <VgaText::decrementCursor(bool)+0x19>
c0010bd4:	48                   	dec    eax
c0010bd5:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010bdb:	84 c9                	test   cl,cl
c0010bdd:	74 09                	je     c0010be8 <VgaText::decrementCursor(bool)+0x26>
c0010bdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010be3:	e9 56 fa ff ff       	jmp    c001063e <VgaText::updateCursor()>
c0010be8:	c3                   	ret    
c0010be9:	90                   	nop

c0010bea <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bea:	53                   	push   ebx
c0010beb:	83 ec 08             	sub    esp,0x8
c0010bee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bf2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bf6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010bfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010bfe:	3c 07                	cmp    al,0x7
c0010c00:	75 2a                	jne    c0010c2c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c02:	a1 14 e4 02 c0       	mov    eax,ds:0xc002e414
c0010c07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c0f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c17:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c23:	83 c4 08             	add    esp,0x8
c0010c26:	5b                   	pop    ebx
c0010c27:	e9 a6 2f 00 00       	jmp    c0013bd2 <Buzzer::beep(int, int, bool)>
c0010c2c:	3c 0d                	cmp    al,0xd
c0010c2e:	75 0c                	jne    c0010c3c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c30:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c3a:	eb 3b                	jmp    c0010c77 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c3c:	3c 0a                	cmp    al,0xa
c0010c3e:	75 40                	jne    c0010c80 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c40:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c46:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c50:	8d 50 01             	lea    edx,[eax+0x1]
c0010c53:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c59:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c5f:	75 12                	jne    c0010c73 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c61:	83 ec 0c             	sub    esp,0xc
c0010c64:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c6a:	53                   	push   ebx
c0010c6b:	e8 1c fb ff ff       	call   c001078c <VgaText::scrollScreen()>
c0010c70:	83 c4 10             	add    esp,0x10
c0010c73:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c77:	83 c4 08             	add    esp,0x8
c0010c7a:	5b                   	pop    ebx
c0010c7b:	e9 be f9 ff ff       	jmp    c001063e <VgaText::updateCursor()>
c0010c80:	3c 08                	cmp    al,0x8
c0010c82:	75 31                	jne    c0010cb5 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c84:	50                   	push   eax
c0010c85:	50                   	push   eax
c0010c86:	6a 01                	push   0x1
c0010c88:	53                   	push   ebx
c0010c89:	e8 34 ff ff ff       	call   c0010bc2 <VgaText::decrementCursor(bool)>
c0010c8e:	5a                   	pop    edx
c0010c8f:	59                   	pop    ecx
c0010c90:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c96:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010c9c:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ca2:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ca8:	6a 20                	push   0x20
c0010caa:	53                   	push   ebx
c0010cab:	e8 82 fb ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb0:	83 c4 28             	add    esp,0x28
c0010cb3:	5b                   	pop    ebx
c0010cb4:	c3                   	ret    
c0010cb5:	83 ec 08             	sub    esp,0x8
c0010cb8:	0f be c0             	movsx  eax,al
c0010cbb:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cc7:	51                   	push   ecx
c0010cc8:	52                   	push   edx
c0010cc9:	50                   	push   eax
c0010cca:	53                   	push   ebx
c0010ccb:	e8 62 fb ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd0:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cd4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cdc:	83 c4 28             	add    esp,0x28
c0010cdf:	5b                   	pop    ebx
c0010ce0:	e9 1b fc ff ff       	jmp    c0010900 <VgaText::incrementCursor(bool)>
c0010ce5:	90                   	nop

c0010ce6 <VgaText::isShowingCursor()>:
c0010ce6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cea:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf0:	c3                   	ret    
c0010cf1:	90                   	nop

c0010cf2 <VgaText::isBlinkDisabled()>:
c0010cf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf6:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010cfc:	83 f0 01             	xor    eax,0x1
c0010cff:	c3                   	ret    

c0010d00 <VgaText::setCursorHeight(int)>:
c0010d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d04:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d08:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d0e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d19:	e9 3a f9 ff ff       	jmp    c0010658 <VgaText::showCursor(bool)>

c0010d1e <VgaText::getCursorHeight()>:
c0010d1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d22:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d28:	c3                   	ret    

c0010d29 <setActiveTerminal(VgaText*)>:
c0010d29:	53                   	push   ebx
c0010d2a:	83 ec 08             	sub    esp,0x8
c0010d2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d31:	85 db                	test   ebx,ebx
c0010d33:	75 11                	jne    c0010d46 <setActiveTerminal(VgaText*)+0x1d>
c0010d35:	c7 44 24 10 68 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a268
c0010d3d:	83 c4 08             	add    esp,0x8
c0010d40:	5b                   	pop    ebx
c0010d41:	e9 37 97 00 00       	jmp    c001a47d <Krnl::panic(char const*)>
c0010d46:	50                   	push   eax
c0010d47:	50                   	push   eax
c0010d48:	53                   	push   ebx
c0010d49:	68 76 a2 02 c0       	push   0xc002a276
c0010d4e:	e8 81 20 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0010d53:	a1 64 e3 02 c0       	mov    eax,ds:0xc002e364
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	85 c0                	test   eax,eax
c0010d5d:	74 0c                	je     c0010d6b <setActiveTerminal(VgaText*)+0x42>
c0010d5f:	83 ec 0c             	sub    esp,0xc
c0010d62:	50                   	push   eax
c0010d63:	e8 d6 f8 ff ff       	call   c001063e <VgaText::updateCursor()>
c0010d68:	83 c4 10             	add    esp,0x10
c0010d6b:	89 1d 64 e3 02 c0    	mov    DWORD PTR ds:0xc002e364,ebx
c0010d71:	51                   	push   ecx
c0010d72:	51                   	push   ecx
c0010d73:	53                   	push   ebx
c0010d74:	68 8e a2 02 c0       	push   0xc002a28e
c0010d79:	e8 56 20 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0010d7e:	83 c4 0c             	add    esp,0xc
c0010d81:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d87:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d8d:	53                   	push   ebx
c0010d8e:	e8 17 fb ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c0010d93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d96:	e8 57 ff ff ff       	call   c0010cf2 <VgaText::isBlinkDisabled()>
c0010d9b:	5a                   	pop    edx
c0010d9c:	0f b6 c0             	movzx  eax,al
c0010d9f:	59                   	pop    ecx
c0010da0:	50                   	push   eax
c0010da1:	53                   	push   ebx
c0010da2:	e8 c1 f8 ff ff       	call   c0010668 <VgaText::disableBlink(bool)>
c0010da7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010daa:	e8 6f ff ff ff       	call   c0010d1e <VgaText::getCursorHeight()>
c0010daf:	5a                   	pop    edx
c0010db0:	59                   	pop    ecx
c0010db1:	50                   	push   eax
c0010db2:	53                   	push   ebx
c0010db3:	e8 48 ff ff ff       	call   c0010d00 <VgaText::setCursorHeight(int)>
c0010db8:	83 c4 10             	add    esp,0x10
c0010dbb:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dc2:	75 0a                	jne    c0010dce <setActiveTerminal(VgaText*)+0xa5>
c0010dc4:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dce:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dd2:	83 c4 08             	add    esp,0x8
c0010dd5:	5b                   	pop    ebx
c0010dd6:	e9 0f f8 ff ff       	jmp    c00105ea <VgaText::load()>

c0010ddb <doTerminalCycle()>:
c0010ddb:	83 ec 18             	sub    esp,0x18
c0010dde:	a1 60 e3 02 c0       	mov    eax,ds:0xc002e360
c0010de3:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010de9:	50                   	push   eax
c0010dea:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c0010def:	e8 35 ff ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c0010df4:	83 c4 1c             	add    esp,0x1c
c0010df7:	c3                   	ret    

c0010df8 <VgaText::doUpdate()>:
c0010df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfc:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e02:	85 c0                	test   eax,eax
c0010e04:	74 02                	je     c0010e08 <VgaText::doUpdate()+0x10>
c0010e06:	ff e0                	jmp    eax
c0010e08:	c3                   	ret    
c0010e09:	90                   	nop

c0010e0a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e0a:	55                   	push   ebp
c0010e0b:	57                   	push   edi
c0010e0c:	56                   	push   esi
c0010e0d:	53                   	push   ebx
c0010e0e:	83 ec 1c             	sub    esp,0x1c
c0010e11:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e15:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e1a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e21:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e24:	50                   	push   eax
c0010e25:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e2a:	50                   	push   eax
c0010e2b:	e8 4a f9 ff ff       	call   c001077a <VgaText::combineColours(unsigned char, unsigned char)>
c0010e30:	59                   	pop    ecx
c0010e31:	0f b6 c0             	movzx  eax,al
c0010e34:	5b                   	pop    ebx
c0010e35:	31 c9                	xor    ecx,ecx
c0010e37:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e3f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e43:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e4d:	0f b7 db             	movzx  ebx,bx
c0010e50:	01 db                	add    ebx,ebx
c0010e52:	01 fb                	add    ebx,edi
c0010e54:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e57:	84 c0                	test   al,al
c0010e59:	0f 84 38 01 00 00    	je     c0010f97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e5f:	3c 0d                	cmp    al,0xd
c0010e61:	75 0f                	jne    c0010e72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e63:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e6d:	e9 1f 01 00 00       	jmp    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e72:	3c 0a                	cmp    al,0xa
c0010e74:	75 5b                	jne    c0010ed1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e76:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e7c:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e86:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e89:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e8f:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e95:	75 12                	jne    c0010ea9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e97:	83 ec 0c             	sub    esp,0xc
c0010e9a:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea0:	55                   	push   ebp
c0010ea1:	e8 e6 f8 ff ff       	call   c001078c <VgaText::scrollScreen()>
c0010ea6:	83 c4 10             	add    esp,0x10
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	55                   	push   ebp
c0010ead:	e8 8c f7 ff ff       	call   c001063e <VgaText::updateCursor()>
c0010eb2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010eba:	83 c4 10             	add    esp,0x10
c0010ebd:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ec3:	31 c9                	xor    ecx,ecx
c0010ec5:	0f b7 db             	movzx  ebx,bx
c0010ec8:	01 db                	add    ebx,ebx
c0010eca:	01 fb                	add    ebx,edi
c0010ecc:	e9 c0 00 00 00       	jmp    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed1:	3c 08                	cmp    al,0x8
c0010ed3:	75 4e                	jne    c0010f23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010ed5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ed9:	53                   	push   ebx
c0010eda:	53                   	push   ebx
c0010edb:	6a 01                	push   0x1
c0010edd:	55                   	push   ebp
c0010ede:	e8 df fc ff ff       	call   c0010bc2 <VgaText::decrementCursor(bool)>
c0010ee3:	58                   	pop    eax
c0010ee4:	5a                   	pop    edx
c0010ee5:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010eeb:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef1:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010ef7:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010efd:	6a 20                	push   0x20
c0010eff:	55                   	push   ebp
c0010f00:	e8 2d f9 ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f05:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f0d:	83 c4 20             	add    esp,0x20
c0010f10:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f16:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f1a:	0f b7 db             	movzx  ebx,bx
c0010f1d:	01 db                	add    ebx,ebx
c0010f1f:	01 fb                	add    ebx,edi
c0010f21:	eb 6e                	jmp    c0010f91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f23:	51                   	push   ecx
c0010f24:	51                   	push   ecx
c0010f25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f29:	50                   	push   eax
c0010f2a:	e8 f1 f8 ff ff       	call   c0010820 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f2f:	83 c4 10             	add    esp,0x10
c0010f32:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f35:	39 2d 64 e3 02 c0    	cmp    DWORD PTR ds:0xc002e364,ebp
c0010f3b:	75 2a                	jne    c0010f67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f3d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f43:	85 c0                	test   eax,eax
c0010f45:	74 20                	je     c0010f67 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f47:	52                   	push   edx
c0010f48:	52                   	push   edx
c0010f49:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f4f:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f59:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f5d:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f60:	51                   	push   ecx
c0010f61:	55                   	push   ebp
c0010f62:	ff d0                	call   eax
c0010f64:	83 c4 20             	add    esp,0x20
c0010f67:	83 c3 02             	add    ebx,0x2
c0010f6a:	50                   	push   eax
c0010f6b:	50                   	push   eax
c0010f6c:	6a 00                	push   0x0
c0010f6e:	55                   	push   ebp
c0010f6f:	e8 8c f9 ff ff       	call   c0010900 <VgaText::incrementCursor(bool)>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f7e:	75 0f                	jne    c0010f8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f80:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f88:	0f b7 db             	movzx  ebx,bx
c0010f8b:	01 db                	add    ebx,ebx
c0010f8d:	01 fb                	add    ebx,edi
c0010f8f:	b1 01                	mov    cl,0x1
c0010f91:	46                   	inc    esi
c0010f92:	e9 bd fe ff ff       	jmp    c0010e54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f97:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010f9b:	83 ec 0c             	sub    esp,0xc
c0010f9e:	55                   	push   ebp
c0010f9f:	e8 9a f6 ff ff       	call   c001063e <VgaText::updateCursor()>
c0010fa4:	83 c4 10             	add    esp,0x10
c0010fa7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fab:	84 c9                	test   cl,cl
c0010fad:	74 0c                	je     c0010fbb <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010faf:	83 ec 0c             	sub    esp,0xc
c0010fb2:	55                   	push   ebp
c0010fb3:	e8 40 fe ff ff       	call   c0010df8 <VgaText::doUpdate()>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fc2:	83 c4 1c             	add    esp,0x1c
c0010fc5:	5b                   	pop    ebx
c0010fc6:	5e                   	pop    esi
c0010fc7:	5f                   	pop    edi
c0010fc8:	5d                   	pop    ebp
c0010fc9:	c3                   	ret    

c0010fca <VgaText::clearScreen()>:
c0010fca:	57                   	push   edi
c0010fcb:	56                   	push   esi
c0010fcc:	31 f6                	xor    esi,esi
c0010fce:	53                   	push   ebx
c0010fcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fd3:	52                   	push   edx
c0010fd4:	6a 00                	push   0x0
c0010fd6:	6a 00                	push   0x0
c0010fd8:	53                   	push   ebx
c0010fd9:	e8 cc f8 ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c0010fde:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010fee:	7e 26                	jle    c0011016 <VgaText::clearScreen()+0x4c>
c0010ff0:	31 ff                	xor    edi,edi
c0010ff2:	50                   	push   eax
c0010ff3:	50                   	push   eax
c0010ff4:	56                   	push   esi
c0010ff5:	57                   	push   edi
c0010ff6:	47                   	inc    edi
c0010ff7:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010ffd:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011003:	6a 20                	push   0x20
c0011005:	53                   	push   ebx
c0011006:	e8 27 f8 ff ff       	call   c0010832 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001100b:	83 c4 20             	add    esp,0x20
c001100e:	83 ff 50             	cmp    edi,0x50
c0011011:	75 df                	jne    c0010ff2 <VgaText::clearScreen()+0x28>
c0011013:	46                   	inc    esi
c0011014:	eb d2                	jmp    c0010fe8 <VgaText::clearScreen()+0x1e>
c0011016:	83 ec 0c             	sub    esp,0xc
c0011019:	53                   	push   ebx
c001101a:	e8 d9 fd ff ff       	call   c0010df8 <VgaText::doUpdate()>
c001101f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011026:	83 c4 10             	add    esp,0x10
c0011029:	5b                   	pop    ebx
c001102a:	5e                   	pop    esi
c001102b:	5f                   	pop    edi
c001102c:	c3                   	ret    
c001102d:	90                   	nop

c001102e <VgaText::putchar(char)>:
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	83 ec 14             	sub    esp,0x14
c0011033:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011037:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001103b:	3c 5b                	cmp    al,0x5b
c001103d:	75 21                	jne    c0011060 <VgaText::putchar(char)+0x32>
c001103f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011046:	74 28                	je     c0011070 <VgaText::putchar(char)+0x42>
c0011048:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011051:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c001105b:	e9 e2 00 00 00       	jmp    c0011142 <VgaText::putchar(char)+0x114>
c0011060:	3c 1b                	cmp    al,0x1b
c0011062:	75 0c                	jne    c0011070 <VgaText::putchar(char)+0x42>
c0011064:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c001106b:	e9 d2 00 00 00       	jmp    c0011142 <VgaText::putchar(char)+0x114>
c0011070:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011076:	84 c9                	test   cl,cl
c0011078:	0f 84 ab 00 00 00    	je     c0011129 <VgaText::putchar(char)+0xfb>
c001107e:	8d 50 c0             	lea    edx,[eax-0x40]
c0011081:	80 fa 3e             	cmp    dl,0x3e
c0011084:	0f 87 82 00 00 00    	ja     c001110c <VgaText::putchar(char)+0xde>
c001108a:	3c 6d                	cmp    al,0x6d
c001108c:	75 4d                	jne    c00110db <VgaText::putchar(char)+0xad>
c001108e:	31 f6                	xor    esi,esi
c0011090:	31 d2                	xor    edx,edx
c0011092:	31 c0                	xor    eax,eax
c0011094:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c001109a:	7e 30                	jle    c00110cc <VgaText::putchar(char)+0x9e>
c001109c:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110a4:	80 fa 3b             	cmp    dl,0x3b
c00110a7:	75 17                	jne    c00110c0 <VgaText::putchar(char)+0x92>
c00110a9:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110ad:	50                   	push   eax
c00110ae:	53                   	push   ebx
c00110af:	e8 ee f5 ff ff       	call   c00106a2 <VgaText::doANSI_SGR(int)>
c00110b4:	59                   	pop    ecx
c00110b5:	31 d2                	xor    edx,edx
c00110b7:	58                   	pop    eax
c00110b8:	31 c0                	xor    eax,eax
c00110ba:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110be:	eb 09                	jmp    c00110c9 <VgaText::putchar(char)+0x9b>
c00110c0:	6b c0 0a             	imul   eax,eax,0xa
c00110c3:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110c7:	88 ca                	mov    dl,cl
c00110c9:	46                   	inc    esi
c00110ca:	eb c8                	jmp    c0011094 <VgaText::putchar(char)+0x66>
c00110cc:	84 d2                	test   dl,dl
c00110ce:	74 31                	je     c0011101 <VgaText::putchar(char)+0xd3>
c00110d0:	50                   	push   eax
c00110d1:	53                   	push   ebx
c00110d2:	e8 cb f5 ff ff       	call   c00106a2 <VgaText::doANSI_SGR(int)>
c00110d7:	58                   	pop    eax
c00110d8:	5a                   	pop    edx
c00110d9:	eb 26                	jmp    c0011101 <VgaText::putchar(char)+0xd3>
c00110db:	3c 4a                	cmp    al,0x4a
c00110dd:	75 22                	jne    c0011101 <VgaText::putchar(char)+0xd3>
c00110df:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110e6:	75 19                	jne    c0011101 <VgaText::putchar(char)+0xd3>
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	53                   	push   ebx
c00110ec:	e8 d9 fe ff ff       	call   c0010fca <VgaText::clearScreen()>
c00110f1:	83 c4 0c             	add    esp,0xc
c00110f4:	6a 00                	push   0x0
c00110f6:	6a 00                	push   0x0
c00110f8:	53                   	push   ebx
c00110f9:	e8 ac f7 ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001110a:	eb 36                	jmp    c0011142 <VgaText::putchar(char)+0x114>
c001110c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011112:	83 fa 0e             	cmp    edx,0xe
c0011115:	7f 2b                	jg     c0011142 <VgaText::putchar(char)+0x114>
c0011117:	8d 4a 01             	lea    ecx,[edx+0x1]
c001111a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011120:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011127:	eb 19                	jmp    c0011142 <VgaText::putchar(char)+0x114>
c0011129:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001112f:	0f be c0             	movsx  eax,al
c0011132:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011138:	50                   	push   eax
c0011139:	53                   	push   ebx
c001113a:	e8 ab fa ff ff       	call   c0010bea <VgaText::putchar(char, VgaColour, VgaColour)>
c001113f:	83 c4 10             	add    esp,0x10
c0011142:	83 c4 14             	add    esp,0x14
c0011145:	5b                   	pop    ebx
c0011146:	5e                   	pop    esi
c0011147:	c3                   	ret    

c0011148 <VgaText::puts(char const*)>:
c0011148:	53                   	push   ebx
c0011149:	83 ec 08             	sub    esp,0x8
c001114c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011150:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011153:	84 c0                	test   al,al
c0011155:	74 12                	je     c0011169 <VgaText::puts(char const*)+0x21>
c0011157:	43                   	inc    ebx
c0011158:	51                   	push   ecx
c0011159:	51                   	push   ecx
c001115a:	50                   	push   eax
c001115b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001115f:	e8 ca fe ff ff       	call   c001102e <VgaText::putchar(char)>
c0011164:	83 c4 10             	add    esp,0x10
c0011167:	eb e7                	jmp    c0011150 <VgaText::puts(char const*)+0x8>
c0011169:	83 c4 08             	add    esp,0x8
c001116c:	5b                   	pop    ebx
c001116d:	c3                   	ret    

c001116e <VgaText::putx(unsigned int)>:
c001116e:	57                   	push   edi
c001116f:	b9 11 00 00 00       	mov    ecx,0x11
c0011174:	56                   	push   esi
c0011175:	be aa a2 02 c0       	mov    esi,0xc002a2aa
c001117a:	53                   	push   ebx
c001117b:	83 ec 20             	sub    esp,0x20
c001117e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011182:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011186:	fc                   	cld    
c0011187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011189:	be 08 00 00 00       	mov    esi,0x8
c001118e:	50                   	push   eax
c001118f:	50                   	push   eax
c0011190:	89 d8                	mov    eax,ebx
c0011192:	c1 e3 04             	shl    ebx,0x4
c0011195:	c1 e8 1c             	shr    eax,0x1c
c0011198:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001119d:	50                   	push   eax
c001119e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111a2:	e8 87 fe ff ff       	call   c001102e <VgaText::putchar(char)>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	4e                   	dec    esi
c00111ab:	75 e1                	jne    c001118e <VgaText::putx(unsigned int)+0x20>
c00111ad:	83 c4 20             	add    esp,0x20
c00111b0:	5b                   	pop    ebx
c00111b1:	5e                   	pop    esi
c00111b2:	5f                   	pop    edi
c00111b3:	c3                   	ret    

c00111b4 <VgaText::VgaText(char const*)>:
c00111b4:	57                   	push   edi
c00111b5:	56                   	push   esi
c00111b6:	53                   	push   ebx
c00111b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bb:	83 ec 08             	sub    esp,0x8
c00111be:	6a 00                	push   0x0
c00111c0:	50                   	push   eax
c00111c1:	e8 6e 05 00 00       	call   c0011734 <UnixFile::UnixFile(int)>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	ba 10 a3 02 c0       	mov    edx,0xc002a310
c00111ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d2:	89 10                	mov    DWORD PTR [eax],edx
c00111d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d8:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e6:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f4:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c00111fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ff:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011218:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011226:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001122d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011231:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011242:	bb 40 e3 02 c0       	mov    ebx,0xc002e340
c0011247:	b8 08 00 00 00       	mov    eax,0x8
c001124c:	fc                   	cld    
c001124d:	89 d7                	mov    edi,edx
c001124f:	89 de                	mov    esi,ebx
c0011251:	89 c1                	mov    ecx,eax
c0011253:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	05 1e 10 00 00       	add    eax,0x101e
c001125e:	83 ec 08             	sub    esp,0x8
c0011261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011265:	50                   	push   eax
c0011266:	e8 c9 f5 fe ff       	call   c0000834 <strcpy>
c001126b:	83 c4 10             	add    esp,0x10
c001126e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011272:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c001127c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011280:	83 c0 0c             	add    eax,0xc
c0011283:	83 ec 04             	sub    esp,0x4
c0011286:	68 00 0f 00 00       	push   0xf00
c001128b:	6a 00                	push   0x0
c001128d:	50                   	push   eax
c001128e:	e8 e5 f4 fe ff       	call   c0000778 <memset>
c0011293:	83 c4 10             	add    esp,0x10
c0011296:	83 ec 04             	sub    esp,0x4
c0011299:	6a 00                	push   0x0
c001129b:	6a 07                	push   0x7
c001129d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a1:	e8 b4 f4 ff ff       	call   c001075a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	83 ec 08             	sub    esp,0x8
c00112ac:	6a 02                	push   0x2
c00112ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b2:	e8 49 fa ff ff       	call   c0010d00 <VgaText::setCursorHeight(int)>
c00112b7:	83 c4 10             	add    esp,0x10
c00112ba:	83 ec 04             	sub    esp,0x4
c00112bd:	6a 00                	push   0x0
c00112bf:	6a 00                	push   0x0
c00112c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c5:	e8 e0 f5 ff ff       	call   c00108aa <VgaText::setCursor(int, int)>
c00112ca:	83 c4 10             	add    esp,0x10
c00112cd:	83 ec 08             	sub    esp,0x8
c00112d0:	6a 01                	push   0x1
c00112d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112d6:	e8 7d f3 ff ff       	call   c0010658 <VgaText::showCursor(bool)>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	83 ec 08             	sub    esp,0x8
c00112e1:	6a 01                	push   0x1
c00112e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e7:	e8 7c f3 ff ff       	call   c0010668 <VgaText::disableBlink(bool)>
c00112ec:	83 c4 10             	add    esp,0x10
c00112ef:	83 ec 0c             	sub    esp,0xc
c00112f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f6:	e8 cf fc ff ff       	call   c0010fca <VgaText::clearScreen()>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011302:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130d:	05 9e 10 00 00       	add    eax,0x109e
c0011312:	83 ec 04             	sub    esp,0x4
c0011315:	68 96 00 00 00       	push   0x96
c001131a:	6a 00                	push   0x0
c001131c:	50                   	push   eax
c001131d:	e8 56 f4 fe ff       	call   c0000778 <memset>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011329:	05 34 11 00 00       	add    eax,0x1134
c001132e:	83 ec 04             	sub    esp,0x4
c0011331:	68 2c 01 00 00       	push   0x12c
c0011336:	6a 00                	push   0x0
c0011338:	50                   	push   eax
c0011339:	e8 3a f4 fe ff       	call   c0000778 <memset>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	90                   	nop
c0011342:	5b                   	pop    ebx
c0011343:	5e                   	pop    esi
c0011344:	5f                   	pop    edi
c0011345:	c3                   	ret    

c0011346 <VgaText::receiveKey(unsigned char)>:
c0011346:	55                   	push   ebp
c0011347:	57                   	push   edi
c0011348:	56                   	push   esi
c0011349:	53                   	push   ebx
c001134a:	83 ec 1c             	sub    esp,0x1c
c001134d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011351:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011355:	84 db                	test   bl,bl
c0011357:	0f 84 c9 00 00 00    	je     c0011426 <VgaText::receiveKey(unsigned char)+0xe0>
c001135d:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011363:	80 fb 08             	cmp    bl,0x8
c0011366:	75 2c                	jne    c0011394 <VgaText::receiveKey(unsigned char)+0x4e>
c0011368:	83 ec 0c             	sub    esp,0xc
c001136b:	57                   	push   edi
c001136c:	e8 23 f4 fe ff       	call   c0000794 <strlen>
c0011371:	83 c4 10             	add    esp,0x10
c0011374:	85 c0                	test   eax,eax
c0011376:	74 41                	je     c00113b9 <VgaText::receiveKey(unsigned char)+0x73>
c0011378:	50                   	push   eax
c0011379:	50                   	push   eax
c001137a:	6a 08                	push   0x8
c001137c:	56                   	push   esi
c001137d:	e8 ac fc ff ff       	call   c001102e <VgaText::putchar(char)>
c0011382:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011385:	e8 0a f4 fe ff       	call   c0000794 <strlen>
c001138a:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011392:	eb 22                	jmp    c00113b6 <VgaText::receiveKey(unsigned char)+0x70>
c0011394:	0f be c3             	movsx  eax,bl
c0011397:	52                   	push   edx
c0011398:	52                   	push   edx
c0011399:	50                   	push   eax
c001139a:	56                   	push   esi
c001139b:	e8 8e fc ff ff       	call   c001102e <VgaText::putchar(char)>
c00113a0:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113a4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113a9:	59                   	pop    ecx
c00113aa:	5d                   	pop    ebp
c00113ab:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113af:	50                   	push   eax
c00113b0:	57                   	push   edi
c00113b1:	e8 be f5 fe ff       	call   c0000974 <strcat>
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c0:	75 05                	jne    c00113c7 <VgaText::receiveKey(unsigned char)+0x81>
c00113c2:	80 fb 0a             	cmp    bl,0xa
c00113c5:	75 53                	jne    c001141a <VgaText::receiveKey(unsigned char)+0xd4>
c00113c7:	83 ec 0c             	sub    esp,0xc
c00113ca:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d0:	53                   	push   ebx
c00113d1:	e8 be f3 fe ff       	call   c0000794 <strlen>
c00113d6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113d9:	89 c5                	mov    ebp,eax
c00113db:	e8 b4 f3 fe ff       	call   c0000794 <strlen>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113e7:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113ec:	76 10                	jbe    c00113fe <VgaText::receiveKey(unsigned char)+0xb8>
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	68 bb a2 02 c0       	push   0xc002a2bb
c00113f6:	e8 82 90 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	50                   	push   eax
c00113ff:	50                   	push   eax
c0011400:	57                   	push   edi
c0011401:	53                   	push   ebx
c0011402:	e8 6d f5 fe ff       	call   c0000974 <strcat>
c0011407:	83 c4 0c             	add    esp,0xc
c001140a:	68 96 00 00 00       	push   0x96
c001140f:	6a 00                	push   0x0
c0011411:	57                   	push   edi
c0011412:	e8 61 f3 fe ff       	call   c0000778 <memset>
c0011417:	83 c4 10             	add    esp,0x10
c001141a:	83 ec 0c             	sub    esp,0xc
c001141d:	56                   	push   esi
c001141e:	e8 d5 f9 ff ff       	call   c0010df8 <VgaText::doUpdate()>
c0011423:	83 c4 10             	add    esp,0x10
c0011426:	83 c4 1c             	add    esp,0x1c
c0011429:	5b                   	pop    ebx
c001142a:	5e                   	pop    esi
c001142b:	5f                   	pop    edi
c001142c:	5d                   	pop    ebp
c001142d:	c3                   	ret    

c001142e <VgaText::write(unsigned long long, void*, int*)>:
c001142e:	55                   	push   ebp
c001142f:	57                   	push   edi
c0011430:	56                   	push   esi
c0011431:	53                   	push   ebx
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011439:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001143d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011441:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011448:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001144b:	39 eb                	cmp    ebx,ebp
c001144d:	74 13                	je     c0011462 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001144f:	43                   	inc    ebx
c0011450:	50                   	push   eax
c0011451:	50                   	push   eax
c0011452:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011456:	50                   	push   eax
c0011457:	56                   	push   esi
c0011458:	e8 d1 fb ff ff       	call   c001102e <VgaText::putchar(char)>
c001145d:	83 c4 10             	add    esp,0x10
c0011460:	eb e9                	jmp    c001144b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011462:	83 ec 0c             	sub    esp,0xc
c0011465:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001146c:	56                   	push   esi
c001146d:	e8 86 f9 ff ff       	call   c0010df8 <VgaText::doUpdate()>
c0011472:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011476:	89 38                	mov    DWORD PTR [eax],edi
c0011478:	83 c4 1c             	add    esp,0x1c
c001147b:	31 c0                	xor    eax,eax
c001147d:	5b                   	pop    ebx
c001147e:	5e                   	pop    esi
c001147f:	5f                   	pop    edi
c0011480:	5d                   	pop    ebp
c0011481:	c3                   	ret    

c0011482 <newTerminal(char*)>:
c0011482:	83 ec 28             	sub    esp,0x28
c0011485:	68 60 12 00 00       	push   0x1260
c001148a:	e8 b1 e3 ff ff       	call   c000f840 <malloc>
c001148f:	5a                   	pop    edx
c0011490:	59                   	pop    ecx
c0011491:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011495:	50                   	push   eax
c0011496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001149a:	e8 15 fd ff ff       	call   c00111b4 <VgaText::VgaText(char const*)>
c001149f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114a3:	83 c4 2c             	add    esp,0x2c
c00114a6:	c3                   	ret    
c00114a7:	90                   	nop

c00114a8 <TSS::TSS()>:
c00114a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114b3:	90                   	nop
c00114b4:	c3                   	ret    
c00114b5:	90                   	nop

c00114b6 <TSS::setESP(unsigned long)>:
c00114b6:	55                   	push   ebp
c00114b7:	89 e5                	mov    ebp,esp
c00114b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114c2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114c5:	90                   	nop
c00114c6:	5d                   	pop    ebp
c00114c7:	c3                   	ret    

c00114c8 <TSS::flush()>:
c00114c8:	55                   	push   ebp
c00114c9:	89 e5                	mov    ebp,esp
c00114cb:	83 ec 10             	sub    esp,0x10
c00114ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00114d3:	83 c8 03             	or     eax,0x3
c00114d6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114da:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114de:	66 89 d0             	mov    ax,dx
c00114e1:	0f 00 d8             	ltr    ax
c00114e4:	90                   	nop
c00114e5:	c9                   	leave  
c00114e6:	c3                   	ret    
c00114e7:	90                   	nop

c00114e8 <TSS::setup(unsigned long, unsigned long)>:
c00114e8:	55                   	push   ebp
c00114e9:	89 e5                	mov    ebp,esp
c00114eb:	83 ec 18             	sub    esp,0x18
c00114ee:	83 ec 0c             	sub    esp,0xc
c00114f1:	6a 68                	push   0x68
c00114f3:	e8 48 e3 ff ff       	call   c000f840 <malloc>
c00114f8:	83 c4 10             	add    esp,0x10
c00114fb:	89 c2                	mov    edx,eax
c00114fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011500:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011509:	83 ec 04             	sub    esp,0x4
c001150c:	6a 68                	push   0x68
c001150e:	6a 00                	push   0x0
c0011510:	50                   	push   eax
c0011511:	e8 62 f2 fe ff       	call   c0000778 <memset>
c0011516:	83 c4 10             	add    esp,0x10
c0011519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001151f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001153a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001153d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011540:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011543:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001155b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011564:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011567:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001156d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011570:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011573:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011588:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001158b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001158e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011591:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011594:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011597:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001159a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001159d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a3:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b0:	0f 20 da             	mov    edx,cr3
c00115b3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115b6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115b9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c2:	83 ec 08             	sub    esp,0x8
c00115c5:	50                   	push   eax
c00115c6:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115c9:	50                   	push   eax
c00115ca:	e8 4f da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	83 ec 08             	sub    esp,0x8
c00115d5:	6a 68                	push   0x68
c00115d7:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115da:	50                   	push   eax
c00115db:	e8 5a da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e0:	83 c4 10             	add    esp,0x10
c00115e3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115e7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115ea:	83 e0 0f             	and    eax,0xf
c00115ed:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f3:	83 c8 40             	or     eax,0x40
c00115f6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f9:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00115fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011604:	05 78 01 00 00       	add    eax,0x178
c0011609:	83 ec 04             	sub    esp,0x4
c001160c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001160f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011612:	50                   	push   eax
c0011613:	e8 56 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011618:	83 c4 10             	add    esp,0x10
c001161b:	89 c2                	mov    edx,eax
c001161d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011620:	89 10                	mov    DWORD PTR [eax],edx
c0011622:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0011627:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001162d:	05 78 01 00 00       	add    eax,0x178
c0011632:	83 ec 0c             	sub    esp,0xc
c0011635:	50                   	push   eax
c0011636:	e8 77 da ff ff       	call   c000f0b2 <GDT::flush()>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011641:	8b 00                	mov    eax,DWORD PTR [eax]
c0011643:	83 ec 08             	sub    esp,0x8
c0011646:	50                   	push   eax
c0011647:	68 24 a3 02 c0       	push   0xc002a324
c001164c:	e8 83 17 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011651:	83 c4 10             	add    esp,0x10
c0011654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011657:	8b 00                	mov    eax,DWORD PTR [eax]
c0011659:	c9                   	leave  
c001165a:	c3                   	ret    
c001165b:	90                   	nop

c001165c <ReservedFilename::read(unsigned long long, void*, int*)>:
c001165c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011667:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001166c:	75 08                	jne    c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001166e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011674:	eb 38                	jmp    c00116ae <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011676:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001167b:	75 17                	jne    c0011694 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001167d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011682:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011685:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001168b:	8b 10                	mov    edx,DWORD PTR [eax]
c001168d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011691:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011694:	89 c1                	mov    ecx,eax
c0011696:	83 e1 fd             	and    ecx,0xfffffffd
c0011699:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001169f:	74 cd                	je     c001166e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116a6:	83 e0 ef             	and    eax,0xffffffef
c00116a9:	83 f8 08             	cmp    eax,0x8
c00116ac:	76 c0                	jbe    c001166e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116ae:	31 c0                	xor    eax,eax
c00116b0:	c3                   	ret    
c00116b1:	90                   	nop

c00116b2 <ReservedFilename::isAtty()>:
c00116b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116b9:	31 c0                	xor    eax,eax
c00116bb:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c1:	74 09                	je     c00116cc <ReservedFilename::isAtty()+0x1a>
c00116c3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116c9:	0f 94 c0             	sete   al
c00116cc:	c3                   	ret    
c00116cd:	90                   	nop

c00116ce <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116dd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116e2:	75 08                	jne    c00116ec <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116e4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116ea:	eb 3d                	jmp    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116ec:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f1:	75 17                	jne    c001170a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116fb:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c0011701:	8b 10                	mov    edx,DWORD PTR [eax]
c0011703:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011707:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001170a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001170f:	75 04                	jne    c0011715 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011711:	89 0a                	mov    DWORD PTR [edx],ecx
c0011713:	eb 14                	jmp    c0011729 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011715:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001171a:	74 c8                	je     c00116e4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001171c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011721:	83 e0 ef             	and    eax,0xffffffef
c0011724:	83 f8 08             	cmp    eax,0x8
c0011727:	76 bb                	jbe    c00116e4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011729:	31 c0                	xor    eax,eax
c001172b:	c3                   	ret    

c001172c <UnixFile::getFileDescriptor()>:
c001172c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011733:	c3                   	ret    

c0011734 <UnixFile::UnixFile(int)>:
c0011734:	53                   	push   ebx
c0011735:	83 ec 28             	sub    esp,0x28
c0011738:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c001173d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011741:	89 10                	mov    DWORD PTR [eax],edx
c0011743:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001174b:	0f 8f 8c 01 00 00    	jg     c00118dd <UnixFile::UnixFile(int)+0x1a9>
c0011751:	a1 20 d2 02 c0       	mov    eax,ds:0xc002d220
c0011756:	8d 50 01             	lea    edx,[eax+0x1]
c0011759:	89 15 20 d2 02 c0    	mov    DWORD PTR ds:0xc002d220,edx
c001175f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011763:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011766:	83 ec 08             	sub    esp,0x8
c0011769:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001176d:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011772:	e8 79 6e 01 00       	call   c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	a0 f4 e3 02 c0       	mov    al,ds:0xc002e3f4
c001177f:	83 f0 01             	xor    eax,0x1
c0011782:	84 c0                	test   al,al
c0011784:	0f 84 54 01 00 00    	je     c00118de <UnixFile::UnixFile(int)+0x1aa>
c001178a:	c6 05 f4 e3 02 c0 01 	mov    BYTE PTR ds:0xc002e3f4,0x1
c0011791:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011799:	83 ec 0c             	sub    esp,0xc
c001179c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a0:	e8 9b e0 ff ff       	call   c000f840 <malloc>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	89 c3                	mov    ebx,eax
c00117aa:	83 ec 08             	sub    esp,0x8
c00117ad:	68 03 ff ff 0f       	push   0xfffff03
c00117b2:	53                   	push   ebx
c00117b3:	e8 2c 01 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c00117b8:	83 c4 10             	add    esp,0x10
c00117bb:	89 1d ec e3 02 c0    	mov    DWORD PTR ds:0xc002e3ec,ebx
c00117c1:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117c9:	83 ec 0c             	sub    esp,0xc
c00117cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d0:	e8 6b e0 ff ff       	call   c000f840 <malloc>
c00117d5:	83 c4 10             	add    esp,0x10
c00117d8:	89 c3                	mov    ebx,eax
c00117da:	83 ec 08             	sub    esp,0x8
c00117dd:	68 01 ff ff 0f       	push   0xfffff01
c00117e2:	53                   	push   ebx
c00117e3:	e8 fc 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c00117e8:	83 c4 10             	add    esp,0x10
c00117eb:	89 1d f0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3f0,ebx
c00117f1:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00117f9:	83 ec 0c             	sub    esp,0xc
c00117fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011800:	e8 3b e0 ff ff       	call   c000f840 <malloc>
c0011805:	83 c4 10             	add    esp,0x10
c0011808:	89 c3                	mov    ebx,eax
c001180a:	83 ec 08             	sub    esp,0x8
c001180d:	68 00 ff ff 0f       	push   0xfffff00
c0011812:	53                   	push   ebx
c0011813:	e8 cc 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c0011818:	83 c4 10             	add    esp,0x10
c001181b:	89 1d e4 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e4,ebx
c0011821:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011829:	83 ec 0c             	sub    esp,0xc
c001182c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011830:	e8 0b e0 ff ff       	call   c000f840 <malloc>
c0011835:	83 c4 10             	add    esp,0x10
c0011838:	89 c3                	mov    ebx,eax
c001183a:	83 ec 08             	sub    esp,0x8
c001183d:	68 02 ff ff 0f       	push   0xfffff02
c0011842:	53                   	push   ebx
c0011843:	e8 9c 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c0011848:	83 c4 10             	add    esp,0x10
c001184b:	89 1d e8 e3 02 c0    	mov    DWORD PTR ds:0xc002e3e8,ebx
c0011851:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011859:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001185e:	7f 7e                	jg     c00118de <UnixFile::UnixFile(int)+0x1aa>
c0011860:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011868:	83 ec 0c             	sub    esp,0xc
c001186b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001186f:	e8 cc df ff ff       	call   c000f840 <malloc>
c0011874:	83 c4 10             	add    esp,0x10
c0011877:	89 c3                	mov    ebx,eax
c0011879:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001187d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011882:	83 ec 08             	sub    esp,0x8
c0011885:	50                   	push   eax
c0011886:	53                   	push   ebx
c0011887:	e8 58 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c001188c:	83 c4 10             	add    esp,0x10
c001188f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011893:	89 1c 85 c0 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c40],ebx
c001189a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118a2:	83 ec 0c             	sub    esp,0xc
c00118a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118a9:	e8 92 df ff ff       	call   c000f840 <malloc>
c00118ae:	83 c4 10             	add    esp,0x10
c00118b1:	89 c3                	mov    ebx,eax
c00118b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118b7:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118bc:	83 ec 08             	sub    esp,0x8
c00118bf:	50                   	push   eax
c00118c0:	53                   	push   ebx
c00118c1:	e8 1e 00 00 00       	call   c00118e4 <ReservedFilename::ReservedFilename(int)>
c00118c6:	83 c4 10             	add    esp,0x10
c00118c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118cd:	89 1c 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],ebx
c00118d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d8:	e9 7c ff ff ff       	jmp    c0011859 <UnixFile::UnixFile(int)+0x125>
c00118dd:	90                   	nop
c00118de:	83 c4 28             	add    esp,0x28
c00118e1:	5b                   	pop    ebx
c00118e2:	c3                   	ret    
c00118e3:	90                   	nop

c00118e4 <ReservedFilename::ReservedFilename(int)>:
c00118e4:	83 ec 0c             	sub    esp,0xc
c00118e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118eb:	83 ec 08             	sub    esp,0x8
c00118ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f2:	50                   	push   eax
c00118f3:	e8 3c fe ff ff       	call   c0011734 <UnixFile::UnixFile(int)>
c00118f8:	83 c4 10             	add    esp,0x10
c00118fb:	ba 2c a4 02 c0       	mov    edx,0xc002a42c
c0011900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011904:	89 10                	mov    DWORD PTR [eax],edx
c0011906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001190e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011911:	90                   	nop
c0011912:	83 c4 0c             	add    esp,0xc
c0011915:	c3                   	ret    

c0011916 <UnixFile::~UnixFile()>:
c0011916:	83 ec 1c             	sub    esp,0x1c
c0011919:	ba 10 a4 02 c0       	mov    edx,0xc002a410
c001191e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011922:	89 10                	mov    DWORD PTR [eax],edx
c0011924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001192b:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011930:	7f 73                	jg     c00119a5 <UnixFile::~UnixFile()+0x8f>
c0011932:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011942:	e8 7d 6d 01 00       	call   c00286c4 <LinkedList<UnixFile>::getFirstElement()>
c0011947:	83 c4 10             	add    esp,0x10
c001194a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001194e:	83 ec 0c             	sub    esp,0xc
c0011951:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011956:	e8 71 6d 01 00       	call   c00286cc <LinkedList<UnixFile>::removeFirst()>
c001195b:	83 c4 10             	add    esp,0x10
c001195e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011962:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011966:	74 40                	je     c00119a8 <UnixFile::~UnixFile()+0x92>
c0011968:	83 ec 08             	sub    esp,0x8
c001196b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001196f:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011974:	e8 77 6c 01 00       	call   c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011979:	83 c4 10             	add    esp,0x10
c001197c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011980:	8d 50 01             	lea    edx,[eax+0x1]
c0011983:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011987:	3d 88 13 00 00       	cmp    eax,0x1388
c001198c:	0f 94 c0             	sete   al
c001198f:	84 c0                	test   al,al
c0011991:	74 a7                	je     c001193a <UnixFile::~UnixFile()+0x24>
c0011993:	83 ec 0c             	sub    esp,0xc
c0011996:	68 e8 a3 02 c0       	push   0xc002a3e8
c001199b:	e8 dd 8a 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00119a0:	83 c4 10             	add    esp,0x10
c00119a3:	eb 95                	jmp    c001193a <UnixFile::~UnixFile()+0x24>
c00119a5:	90                   	nop
c00119a6:	eb 01                	jmp    c00119a9 <UnixFile::~UnixFile()+0x93>
c00119a8:	90                   	nop
c00119a9:	90                   	nop
c00119aa:	83 c4 1c             	add    esp,0x1c
c00119ad:	c3                   	ret    

c00119ae <UnixFile::~UnixFile()>:
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	83 ec 0c             	sub    esp,0xc
c00119b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119b8:	e8 59 ff ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c00119bd:	83 c4 10             	add    esp,0x10
c00119c0:	83 ec 08             	sub    esp,0x8
c00119c3:	6a 0c                	push   0xc
c00119c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c9:	e8 26 13 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	83 c4 0c             	add    esp,0xc
c00119d4:	c3                   	ret    
c00119d5:	90                   	nop

c00119d6 <ReservedFilename::~ReservedFilename()>:
c00119d6:	83 ec 0c             	sub    esp,0xc
c00119d9:	ba 2c a4 02 c0       	mov    edx,0xc002a42c
c00119de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e2:	89 10                	mov    DWORD PTR [eax],edx
c00119e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119e8:	83 ec 0c             	sub    esp,0xc
c00119eb:	50                   	push   eax
c00119ec:	e8 25 ff ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	90                   	nop
c00119f5:	83 c4 0c             	add    esp,0xc
c00119f8:	c3                   	ret    
c00119f9:	90                   	nop

c00119fa <ReservedFilename::~ReservedFilename()>:
c00119fa:	83 ec 0c             	sub    esp,0xc
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a04:	e8 cd ff ff ff       	call   c00119d6 <ReservedFilename::~ReservedFilename()>
c0011a09:	83 c4 10             	add    esp,0x10
c0011a0c:	83 ec 08             	sub    esp,0x8
c0011a0f:	6a 0c                	push   0xc
c0011a11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a15:	e8 da 12 00 00       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	83 c4 0c             	add    esp,0xc
c0011a20:	c3                   	ret    

c0011a21 <getFromFileDescriptor(int)>:
c0011a21:	53                   	push   ebx
c0011a22:	83 ec 08             	sub    esp,0x8
c0011a25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a29:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a2f:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a35:	7f 2c                	jg     c0011a63 <getFromFileDescriptor(int)+0x42>
c0011a37:	83 ec 0c             	sub    esp,0xc
c0011a3a:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011a3f:	e8 80 6c 01 00       	call   c00286c4 <LinkedList<UnixFile>::getFirstElement()>
c0011a44:	83 c4 10             	add    esp,0x10
c0011a47:	85 c0                	test   eax,eax
c0011a49:	75 04                	jne    c0011a4f <getFromFileDescriptor(int)+0x2e>
c0011a4b:	31 c0                	xor    eax,eax
c0011a4d:	eb 6e                	jmp    c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a4f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a52:	74 69                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a54:	52                   	push   edx
c0011a55:	52                   	push   edx
c0011a56:	50                   	push   eax
c0011a57:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011a5c:	e8 0d 6d 01 00       	call   c002876e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a61:	eb e1                	jmp    c0011a44 <getFromFileDescriptor(int)+0x23>
c0011a63:	a1 ec e3 02 c0       	mov    eax,ds:0xc002e3ec
c0011a68:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a6e:	74 4d                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a70:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c0011a75:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a7b:	74 40                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a7d:	a1 e8 e3 02 c0       	mov    eax,ds:0xc002e3e8
c0011a82:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a88:	74 33                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a8a:	a1 e4 e3 02 c0       	mov    eax,ds:0xc002e3e4
c0011a8f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a95:	74 26                	je     c0011abd <getFromFileDescriptor(int)+0x9c>
c0011a97:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a9d:	83 f8 08             	cmp    eax,0x8
c0011aa0:	77 09                	ja     c0011aab <getFromFileDescriptor(int)+0x8a>
c0011aa2:	8b 04 85 c0 e3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1c40]
c0011aa9:	eb 12                	jmp    c0011abd <getFromFileDescriptor(int)+0x9c>
c0011aab:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab1:	83 fb 08             	cmp    ebx,0x8
c0011ab4:	77 95                	ja     c0011a4b <getFromFileDescriptor(int)+0x2a>
c0011ab6:	8b 04 9d 80 e3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1c80]
c0011abd:	83 c4 08             	add    esp,0x8
c0011ac0:	5b                   	pop    ebx
c0011ac1:	c3                   	ret    

c0011ac2 <__static_initialization_and_destruction_0(int, int)>:
c0011ac2:	83 ec 0c             	sub    esp,0xc
c0011ac5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011aca:	75 34                	jne    c0011b00 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011acc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ad4:	75 2a                	jne    c0011b00 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011ade:	e8 b5 6a 01 00       	call   c0028598 <LinkedList<UnixFile>::LinkedList()>
c0011ae3:	83 c4 10             	add    esp,0x10
c0011ae6:	83 ec 04             	sub    esp,0x4
c0011ae9:	68 a4 d1 02 c0       	push   0xc002d1a4
c0011aee:	68 f8 e3 02 c0       	push   0xc002e3f8
c0011af3:	68 96 85 02 c0       	push   0xc0028596
c0011af8:	e8 71 11 00 00       	call   c0012c6e <__cxa_atexit>
c0011afd:	83 c4 10             	add    esp,0x10
c0011b00:	90                   	nop
c0011b01:	83 c4 0c             	add    esp,0xc
c0011b04:	c3                   	ret    

c0011b05 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b05:	83 ec 0c             	sub    esp,0xc
c0011b08:	83 ec 08             	sub    esp,0x8
c0011b0b:	68 ff ff 00 00       	push   0xffff
c0011b10:	6a 01                	push   0x1
c0011b12:	e8 ab ff ff ff       	call   c0011ac2 <__static_initialization_and_destruction_0(int, int)>
c0011b17:	83 c4 10             	add    esp,0x10
c0011b1a:	83 c4 0c             	add    esp,0xc
c0011b1d:	c3                   	ret    

c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b1e:	53                   	push   ebx
c0011b1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b27:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b2d:	89 c8                	mov    eax,ecx
c0011b2f:	d1 e8                	shr    eax,1
c0011b31:	03 05 28 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d228
c0011b37:	83 e1 01             	and    ecx,0x1
c0011b3a:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b3c:	75 09                	jne    c0011b47 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b3e:	83 e2 f0             	and    edx,0xfffffff0
c0011b41:	09 da                	or     edx,ebx
c0011b43:	88 10                	mov    BYTE PTR [eax],dl
c0011b45:	5b                   	pop    ebx
c0011b46:	c3                   	ret    
c0011b47:	c1 e3 04             	shl    ebx,0x4
c0011b4a:	83 e2 0f             	and    edx,0xf
c0011b4d:	09 da                	or     edx,ebx
c0011b4f:	88 10                	mov    BYTE PTR [eax],dl
c0011b51:	5b                   	pop    ebx
c0011b52:	c3                   	ret    

c0011b53 <Virt::getPageState(unsigned long)>:
c0011b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b57:	8b 0d 28 d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d228
c0011b5d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b63:	89 d0                	mov    eax,edx
c0011b65:	d1 e8                	shr    eax,1
c0011b67:	83 e2 01             	and    edx,0x1
c0011b6a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b6d:	75 04                	jne    c0011b73 <Virt::getPageState(unsigned long)+0x20>
c0011b6f:	83 e0 0f             	and    eax,0xf
c0011b72:	c3                   	ret    
c0011b73:	c0 e8 04             	shr    al,0x4
c0011b76:	c3                   	ret    

c0011b77 <Virt::allocateKernelVirtualPages(int)>:
c0011b77:	55                   	push   ebp
c0011b78:	31 ed                	xor    ebp,ebp
c0011b7a:	57                   	push   edi
c0011b7b:	56                   	push   esi
c0011b7c:	53                   	push   ebx
c0011b7d:	31 db                	xor    ebx,ebx
c0011b7f:	83 ec 1c             	sub    esp,0x1c
c0011b82:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b86:	8b 3d 24 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d224
c0011b8c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b91:	57                   	push   edi
c0011b92:	e8 bc ff ff ff       	call   c0011b53 <Virt::getPageState(unsigned long)>
c0011b97:	5a                   	pop    edx
c0011b98:	84 c0                	test   al,al
c0011b9a:	75 3a                	jne    c0011bd6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b9c:	85 db                	test   ebx,ebx
c0011b9e:	75 02                	jne    c0011ba2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ba0:	89 fd                	mov    ebp,edi
c0011ba2:	43                   	inc    ebx
c0011ba3:	39 f3                	cmp    ebx,esi
c0011ba5:	74 5a                	je     c0011c01 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011ba7:	47                   	inc    edi
c0011ba8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bae:	76 31                	jbe    c0011be1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bb0:	c7 05 24 d2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d224,0xc8000
c0011bba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bbf:	75 28                	jne    c0011be9 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bc1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bc6:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bcb:	57                   	push   edi
c0011bcc:	e8 82 ff ff ff       	call   c0011b53 <Virt::getPageState(unsigned long)>
c0011bd1:	5a                   	pop    edx
c0011bd2:	84 c0                	test   al,al
c0011bd4:	74 c6                	je     c0011b9c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bd6:	31 db                	xor    ebx,ebx
c0011bd8:	47                   	inc    edi
c0011bd9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bdf:	77 cf                	ja     c0011bb0 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011be1:	89 3d 24 d2 02 c0    	mov    DWORD PTR ds:0xc002d224,edi
c0011be7:	eb a8                	jmp    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011be9:	83 ec 0c             	sub    esp,0xc
c0011bec:	68 40 a4 02 c0       	push   0xc002a440
c0011bf1:	e8 87 88 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0011bf6:	8b 3d 24 d2 02 c0    	mov    edi,DWORD PTR ds:0xc002d224
c0011bfc:	83 c4 10             	add    esp,0x10
c0011bff:	eb 90                	jmp    c0011b91 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c01:	89 2d 24 d2 02 c0    	mov    DWORD PTR ds:0xc002d224,ebp
c0011c07:	4b                   	dec    ebx
c0011c08:	74 5f                	je     c0011c69 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c0a:	85 f6                	test   esi,esi
c0011c0c:	74 3d                	je     c0011c4b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c0e:	89 e8                	mov    eax,ebp
c0011c10:	31 db                	xor    ebx,ebx
c0011c12:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c15:	eb 14                	jmp    c0011c2b <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c17:	6a 01                	push   0x1
c0011c19:	43                   	inc    ebx
c0011c1a:	50                   	push   eax
c0011c1b:	e8 fe fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c20:	58                   	pop    eax
c0011c21:	39 f3                	cmp    ebx,esi
c0011c23:	5a                   	pop    edx
c0011c24:	74 25                	je     c0011c4b <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c26:	a1 24 d2 02 c0       	mov    eax,ds:0xc002d224
c0011c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c2e:	85 db                	test   ebx,ebx
c0011c30:	89 15 24 d2 02 c0    	mov    DWORD PTR ds:0xc002d224,edx
c0011c36:	74 20                	je     c0011c58 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c38:	39 df                	cmp    edi,ebx
c0011c3a:	75 db                	jne    c0011c17 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c3c:	6a 03                	push   0x3
c0011c3e:	43                   	inc    ebx
c0011c3f:	50                   	push   eax
c0011c40:	e8 d9 fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c45:	59                   	pop    ecx
c0011c46:	39 f3                	cmp    ebx,esi
c0011c48:	58                   	pop    eax
c0011c49:	75 db                	jne    c0011c26 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c4b:	83 c4 1c             	add    esp,0x1c
c0011c4e:	89 e8                	mov    eax,ebp
c0011c50:	5b                   	pop    ebx
c0011c51:	c1 e0 0c             	shl    eax,0xc
c0011c54:	5e                   	pop    esi
c0011c55:	5f                   	pop    edi
c0011c56:	5d                   	pop    ebp
c0011c57:	c3                   	ret    
c0011c58:	6a 02                	push   0x2
c0011c5a:	bb 01 00 00 00       	mov    ebx,0x1
c0011c5f:	50                   	push   eax
c0011c60:	e8 b9 fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c65:	58                   	pop    eax
c0011c66:	5a                   	pop    edx
c0011c67:	eb bd                	jmp    c0011c26 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c69:	6a 04                	push   0x4
c0011c6b:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c6e:	55                   	push   ebp
c0011c6f:	a3 24 d2 02 c0       	mov    ds:0xc002d224,eax
c0011c74:	e8 a5 fe ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c79:	59                   	pop    ecx
c0011c7a:	89 e8                	mov    eax,ebp
c0011c7c:	5b                   	pop    ebx
c0011c7d:	c1 e0 0c             	shl    eax,0xc
c0011c80:	83 c4 1c             	add    esp,0x1c
c0011c83:	5b                   	pop    ebx
c0011c84:	5e                   	pop    esi
c0011c85:	5f                   	pop    edi
c0011c86:	5d                   	pop    ebp
c0011c87:	c3                   	ret    

c0011c88 <Virt::freeSwapfilePage(unsigned long)>:
c0011c88:	53                   	push   ebx
c0011c89:	8b 15 08 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e408
c0011c8f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c93:	b8 01 00 00 00       	mov    eax,0x1
c0011c98:	89 cb                	mov    ebx,ecx
c0011c9a:	d3 e0                	shl    eax,cl
c0011c9c:	c1 eb 05             	shr    ebx,0x5
c0011c9f:	f7 d0                	not    eax
c0011ca1:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011ca4:	5b                   	pop    ebx
c0011ca5:	c3                   	ret    

c0011ca6 <Virt::swapIDToSector(unsigned long)>:
c0011ca6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011caa:	0f af 05 2c d2 02 c0 	imul   eax,DWORD PTR ds:0xc002d22c
c0011cb1:	03 05 34 d2 02 c0    	add    eax,DWORD PTR ds:0xc002d234
c0011cb7:	c3                   	ret    

c0011cb8 <Virt::allocateSwapfilePage()>:
c0011cb8:	55                   	push   ebp
c0011cb9:	31 d2                	xor    edx,edx
c0011cbb:	57                   	push   edi
c0011cbc:	56                   	push   esi
c0011cbd:	53                   	push   ebx
c0011cbe:	83 ec 0c             	sub    esp,0xc
c0011cc1:	8b 0d 2c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d22c
c0011cc7:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c0011ccc:	f7 f1                	div    ecx
c0011cce:	39 0d 30 d2 02 c0    	cmp    DWORD PTR ds:0xc002d230,ecx
c0011cd4:	72 2d                	jb     c0011d03 <Virt::allocateSwapfilePage()+0x4b>
c0011cd6:	8b 35 08 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e408
c0011cdc:	8b 16                	mov    edx,DWORD PTR [esi]
c0011cde:	f6 c2 01             	test   dl,0x1
c0011ce1:	74 3c                	je     c0011d1f <Virt::allocateSwapfilePage()+0x67>
c0011ce3:	31 c9                	xor    ecx,ecx
c0011ce5:	bf 01 00 00 00       	mov    edi,0x1
c0011cea:	eb 12                	jmp    c0011cfe <Virt::allocateSwapfilePage()+0x46>
c0011cec:	89 fd                	mov    ebp,edi
c0011cee:	89 ca                	mov    edx,ecx
c0011cf0:	d3 e5                	shl    ebp,cl
c0011cf2:	c1 ea 05             	shr    edx,0x5
c0011cf5:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011cf8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cfa:	85 ea                	test   edx,ebp
c0011cfc:	74 2a                	je     c0011d28 <Virt::allocateSwapfilePage()+0x70>
c0011cfe:	41                   	inc    ecx
c0011cff:	39 c8                	cmp    eax,ecx
c0011d01:	77 e9                	ja     c0011cec <Virt::allocateSwapfilePage()+0x34>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	68 c7 a5 02 c0       	push   0xc002a5c7
c0011d0b:	e8 6d 87 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0011d10:	83 c4 10             	add    esp,0x10
c0011d13:	31 c9                	xor    ecx,ecx
c0011d15:	83 c4 0c             	add    esp,0xc
c0011d18:	89 c8                	mov    eax,ecx
c0011d1a:	5b                   	pop    ebx
c0011d1b:	5e                   	pop    esi
c0011d1c:	5f                   	pop    edi
c0011d1d:	5d                   	pop    ebp
c0011d1e:	c3                   	ret    
c0011d1f:	89 f3                	mov    ebx,esi
c0011d21:	bd 01 00 00 00       	mov    ebp,0x1
c0011d26:	31 c9                	xor    ecx,ecx
c0011d28:	09 ea                	or     edx,ebp
c0011d2a:	89 c8                	mov    eax,ecx
c0011d2c:	89 13                	mov    DWORD PTR [ebx],edx
c0011d2e:	83 c4 0c             	add    esp,0xc
c0011d31:	5b                   	pop    ebx
c0011d32:	5e                   	pop    esi
c0011d33:	5f                   	pop    edi
c0011d34:	5d                   	pop    ebp
c0011d35:	c3                   	ret    

c0011d36 <Virt::virtualMemorySetup()>:
c0011d36:	53                   	push   ebx
c0011d37:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d3c:	83 ec 08             	sub    esp,0x8
c0011d3f:	6a 0f                	push   0xf
c0011d41:	53                   	push   ebx
c0011d42:	43                   	inc    ebx
c0011d43:	e8 d6 fd ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d48:	59                   	pop    ecx
c0011d49:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d4f:	58                   	pop    eax
c0011d50:	75 ed                	jne    c0011d3f <Virt::virtualMemorySetup()+0x9>
c0011d52:	83 ec 08             	sub    esp,0x8
c0011d55:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d5a:	68 00 00 00 c8       	push   0xc8000000
c0011d5f:	68 de a5 02 c0       	push   0xc002a5de
c0011d64:	e8 6b 10 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011d69:	58                   	pop    eax
c0011d6a:	5a                   	pop    edx
c0011d6b:	68 00 f0 ff ef       	push   0xeffff000
c0011d70:	68 f2 a5 02 c0       	push   0xc002a5f2
c0011d75:	e8 5a 10 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011d7a:	83 c4 10             	add    esp,0x10
c0011d7d:	83 ec 08             	sub    esp,0x8
c0011d80:	6a 00                	push   0x0
c0011d82:	53                   	push   ebx
c0011d83:	43                   	inc    ebx
c0011d84:	e8 95 fd ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d92:	75 e9                	jne    c0011d7d <Virt::virtualMemorySetup()+0x47>
c0011d94:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011d99:	83 ec 08             	sub    esp,0x8
c0011d9c:	6a 0f                	push   0xf
c0011d9e:	53                   	push   ebx
c0011d9f:	43                   	inc    ebx
c0011da0:	e8 79 fd ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011da5:	83 c4 10             	add    esp,0x10
c0011da8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011dae:	75 e9                	jne    c0011d99 <Virt::virtualMemorySetup()+0x63>
c0011db0:	83 c4 08             	add    esp,0x8
c0011db3:	5b                   	pop    ebx
c0011db4:	c3                   	ret    

c0011db5 <Virt::swappingSetup()>:
c0011db5:	83 ec 18             	sub    esp,0x18
c0011db8:	68 06 a6 02 c0       	push   0xc002a606
c0011dbd:	e8 12 10 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011dc2:	58                   	pop    eax
c0011dc3:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c0011dc8:	5a                   	pop    edx
c0011dc9:	31 d2                	xor    edx,edx
c0011dcb:	f7 35 2c d2 02 c0    	div    DWORD PTR ds:0xc002d22c
c0011dd1:	c1 e8 05             	shr    eax,0x5
c0011dd4:	50                   	push   eax
c0011dd5:	68 1c a6 02 c0       	push   0xc002a61c
c0011dda:	e8 f5 0f 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0011ddf:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c0011de4:	31 d2                	xor    edx,edx
c0011de6:	f7 35 2c d2 02 c0    	div    DWORD PTR ds:0xc002d22c
c0011dec:	c1 e8 05             	shr    eax,0x5
c0011def:	89 04 24             	mov    DWORD PTR [esp],eax
c0011df2:	e8 49 da ff ff       	call   c000f840 <malloc>
c0011df7:	83 c4 0c             	add    esp,0xc
c0011dfa:	89 c1                	mov    ecx,eax
c0011dfc:	a3 08 e4 02 c0       	mov    ds:0xc002e408,eax
c0011e01:	31 d2                	xor    edx,edx
c0011e03:	a1 30 d2 02 c0       	mov    eax,ds:0xc002d230
c0011e08:	f7 35 2c d2 02 c0    	div    DWORD PTR ds:0xc002d22c
c0011e0e:	c1 e8 05             	shr    eax,0x5
c0011e11:	50                   	push   eax
c0011e12:	6a 00                	push   0x0
c0011e14:	51                   	push   ecx
c0011e15:	e8 5e e9 fe ff       	call   c0000778 <memset>
c0011e1a:	83 c4 1c             	add    esp,0x1c
c0011e1d:	c3                   	ret    

c0011e1e <Virt::getAKernelVAS()>:
c0011e1e:	a1 0c e4 02 c0       	mov    eax,ds:0xc002e40c
c0011e23:	c3                   	ret    

c0011e24 <VAS::VAS()>:
c0011e24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e33:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e3e:	a3 0c e4 02 c0       	mov    ds:0xc002e40c,eax
c0011e43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e47:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e56:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e5d:	90                   	nop
c0011e5e:	c3                   	ret    
c0011e5f:	90                   	nop

c0011e60 <VAS::VAS(VAS*)>:
c0011e60:	83 ec 0c             	sub    esp,0xc
c0011e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e72:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011e79:	83 ec 0c             	sub    esp,0xc
c0011e7c:	68 60 a4 02 c0       	push   0xc002a460
c0011e81:	e8 f7 85 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0011e86:	83 c4 10             	add    esp,0x10
c0011e89:	90                   	nop
c0011e8a:	83 c4 0c             	add    esp,0xc
c0011e8d:	c3                   	ret    

c0011e8e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e92:	89 c2                	mov    edx,eax
c0011e94:	c1 e8 0a             	shr    eax,0xa
c0011e97:	c1 ea 16             	shr    edx,0x16
c0011e9a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e9f:	19 c9                	sbb    ecx,ecx
c0011ea1:	c1 e2 0c             	shl    edx,0xc
c0011ea4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011eaa:	25 fc 0f 00 00       	and    eax,0xffc
c0011eaf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011eb6:	01 d0                	add    eax,edx
c0011eb8:	c3                   	ret    
c0011eb9:	90                   	nop

c0011eba <VAS::getPageTableEntry(unsigned long)>:
c0011eba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ebe:	89 ca                	mov    edx,ecx
c0011ec0:	c1 e9 0a             	shr    ecx,0xa
c0011ec3:	c1 ea 16             	shr    edx,0x16
c0011ec6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ecc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ed2:	c1 e0 0c             	shl    eax,0xc
c0011ed5:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ed8:	c3                   	ret    

c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ed9:	57                   	push   edi
c0011eda:	56                   	push   esi
c0011edb:	be 01 00 00 00       	mov    esi,0x1
c0011ee0:	53                   	push   ebx
c0011ee1:	83 ec 10             	sub    esp,0x10
c0011ee4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ee8:	c1 eb 0c             	shr    ebx,0xc
c0011eeb:	eb 3f                	jmp    c0011f2c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011eed:	e8 2c ff ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0011ef2:	83 ec 08             	sub    esp,0x8
c0011ef5:	57                   	push   edi
c0011ef6:	50                   	push   eax
c0011ef7:	e8 be ff ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0011efc:	83 c4 10             	add    esp,0x10
c0011eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f01:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f05:	f6 c4 04             	test   ah,0x4
c0011f08:	75 5f                	jne    c0011f69 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f0a:	80 fa 04             	cmp    dl,0x4
c0011f0d:	74 78                	je     c0011f87 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f0f:	80 fa 02             	cmp    dl,0x2
c0011f12:	0f 84 88 00 00 00    	je     c0011fa0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f18:	80 fa 03             	cmp    dl,0x3
c0011f1b:	0f 84 ad 00 00 00    	je     c0011fce <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f21:	fe ca                	dec    dl
c0011f23:	0f 84 92 00 00 00    	je     c0011fbb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f29:	43                   	inc    ebx
c0011f2a:	31 f6                	xor    esi,esi
c0011f2c:	53                   	push   ebx
c0011f2d:	e8 21 fc ff ff       	call   c0011b53 <Virt::getPageState(unsigned long)>
c0011f32:	5f                   	pop    edi
c0011f33:	89 df                	mov    edi,ebx
c0011f35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f39:	c1 e7 0c             	shl    edi,0xc
c0011f3c:	84 c0                	test   al,al
c0011f3e:	75 ad                	jne    c0011eed <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f40:	83 ec 0c             	sub    esp,0xc
c0011f43:	68 37 a6 02 c0       	push   0xc002a637
c0011f48:	e8 30 85 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0011f4d:	e8 cc fe ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0011f52:	5a                   	pop    edx
c0011f53:	59                   	pop    ecx
c0011f54:	57                   	push   edi
c0011f55:	50                   	push   eax
c0011f56:	e8 5f ff ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f60:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f64:	f6 c4 04             	test   ah,0x4
c0011f67:	74 c0                	je     c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f69:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f6d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f72:	83 ec 0c             	sub    esp,0xc
c0011f75:	50                   	push   eax
c0011f76:	e8 d8 de ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f82:	80 fa 04             	cmp    dl,0x4
c0011f85:	75 88                	jne    c0011f0f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f87:	89 f0                	mov    eax,esi
c0011f89:	84 c0                	test   al,al
c0011f8b:	75 47                	jne    c0011fd4 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f8d:	c7 44 24 20 84 a4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a484
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	5b                   	pop    ebx
c0011f99:	5e                   	pop    esi
c0011f9a:	5f                   	pop    edi
c0011f9b:	e9 dd 84 00 00       	jmp    c001a47d <Krnl::panic(char const*)>
c0011fa0:	89 f0                	mov    eax,esi
c0011fa2:	84 c0                	test   al,al
c0011fa4:	75 15                	jne    c0011fbb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	68 53 a6 02 c0       	push   0xc002a653
c0011fae:	e8 ca 84 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	e9 6e ff ff ff       	jmp    c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fbb:	83 ec 08             	sub    esp,0x8
c0011fbe:	6a 00                	push   0x0
c0011fc0:	53                   	push   ebx
c0011fc1:	e8 58 fb ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fc6:	83 c4 10             	add    esp,0x10
c0011fc9:	e9 5b ff ff ff       	jmp    c0011f29 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fce:	89 f0                	mov    eax,esi
c0011fd0:	84 c0                	test   al,al
c0011fd2:	75 15                	jne    c0011fe9 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fd4:	83 ec 08             	sub    esp,0x8
c0011fd7:	6a 00                	push   0x0
c0011fd9:	53                   	push   ebx
c0011fda:	e8 3f fb ff ff       	call   c0011b1e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fdf:	83 c4 10             	add    esp,0x10
c0011fe2:	83 c4 10             	add    esp,0x10
c0011fe5:	5b                   	pop    ebx
c0011fe6:	5e                   	pop    esi
c0011fe7:	5f                   	pop    edi
c0011fe8:	c3                   	ret    
c0011fe9:	c7 44 24 20 6f a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a66f
c0011ff1:	83 c4 10             	add    esp,0x10
c0011ff4:	5b                   	pop    ebx
c0011ff5:	5e                   	pop    esi
c0011ff6:	5f                   	pop    edi
c0011ff7:	e9 81 84 00 00       	jmp    c001a47d <Krnl::panic(char const*)>

c0011ffc <VAS::freeAllocatedPages(unsigned long)>:
c0011ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012000:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012004:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012008:	74 09                	je     c0012013 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001200a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001200e:	e9 c6 fe ff ff       	jmp    c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012013:	c7 44 24 04 a8 a4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a4a8
c001201b:	e9 b4 0d 00 00       	jmp    c0012dd4 <Dbg::kprintf(char const*, ...)>

c0012020 <VAS::virtualToPhysical(unsigned long)>:
c0012020:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012024:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012028:	e8 8d fe ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c001202d:	5a                   	pop    edx
c001202e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012030:	59                   	pop    ecx
c0012031:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012036:	c3                   	ret    
c0012037:	90                   	nop

c0012038 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012038:	55                   	push   ebp
c0012039:	57                   	push   edi
c001203a:	56                   	push   esi
c001203b:	53                   	push   ebx
c001203c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012040:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012044:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012048:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001204c:	85 db                	test   ebx,ebx
c001204e:	7e 22                	jle    c0012072 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012050:	c1 e3 0c             	shl    ebx,0xc
c0012053:	01 f3                	add    ebx,esi
c0012055:	56                   	push   esi
c0012056:	81 c6 00 10 00 00    	add    esi,0x1000
c001205c:	55                   	push   ebp
c001205d:	e8 58 fe ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012062:	5a                   	pop    edx
c0012063:	59                   	pop    ecx
c0012064:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012066:	21 f9                	and    ecx,edi
c0012068:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001206c:	39 f3                	cmp    ebx,esi
c001206e:	89 08                	mov    DWORD PTR [eax],ecx
c0012070:	75 e3                	jne    c0012055 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012072:	5b                   	pop    ebx
c0012073:	5e                   	pop    esi
c0012074:	5f                   	pop    edi
c0012075:	5d                   	pop    ebp
c0012076:	c3                   	ret    
c0012077:	90                   	nop

c0012078 <VAS::setToWriteCombining(unsigned long, int)>:
c0012078:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001207d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012083:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001208a:	75 01                	jne    c001208d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001208c:	c3                   	ret    
c001208d:	68 80 00 00 00       	push   0x80
c0012092:	6a ff                	push   0xffffffff
c0012094:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001209c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120a0:	e8 93 ff ff ff       	call   c0012038 <VAS::reflagRange(unsigned long, int, int, int)>
c00120a5:	83 c4 14             	add    esp,0x14
c00120a8:	c3                   	ret    
c00120a9:	90                   	nop

c00120aa <VAS::mapOtherVASIn(bool, VAS*)>:
c00120aa:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120b3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00120b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120ba:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00120bd:	19 c0                	sbb    eax,eax
c00120bf:	83 ca 03             	or     edx,0x3
c00120c2:	83 e0 fc             	and    eax,0xfffffffc
c00120c5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120cc:	0f 20 d8             	mov    eax,cr3
c00120cf:	0f 22 d8             	mov    cr3,eax
c00120d2:	c3                   	ret    
c00120d3:	90                   	nop

c00120d4 <VAS::~VAS()>:
c00120d4:	83 ec 2c             	sub    esp,0x2c
c00120d7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120df:	e8 93 bb 00 00       	call   c001dc77 <lockScheduler()>
c00120e4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00120eb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120ee:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c00120f4:	83 ec 04             	sub    esp,0x4
c00120f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00120fb:	6a 01                	push   0x1
c00120fd:	50                   	push   eax
c00120fe:	e8 a7 ff ff ff       	call   c00120aa <VAS::mapOtherVASIn(bool, VAS*)>
c0012103:	83 c4 10             	add    esp,0x10
c0012106:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001210e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012116:	0f 8f d7 00 00 00    	jg     c00121f3 <VAS::~VAS()+0x11f>
c001211c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012120:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012123:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012127:	c1 e2 02             	shl    edx,0x2
c001212a:	01 d0                	add    eax,edx
c001212c:	8b 00                	mov    eax,DWORD PTR [eax]
c001212e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012136:	83 e0 01             	and    eax,0x1
c0012139:	0f 84 ab 00 00 00    	je     c00121ea <VAS::~VAS()+0x116>
c001213f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012147:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001214f:	7f 75                	jg     c00121c6 <VAS::~VAS()+0xf2>
c0012151:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012155:	c1 e0 0a             	shl    eax,0xa
c0012158:	89 c2                	mov    edx,eax
c001215a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001215e:	01 d0                	add    eax,edx
c0012160:	c1 e0 0c             	shl    eax,0xc
c0012163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012167:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001216c:	8b 00                	mov    eax,DWORD PTR [eax]
c001216e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012171:	8b 80 32 19 00 00    	mov    eax,DWORD PTR [eax+0x1932]
c0012177:	83 ec 04             	sub    esp,0x4
c001217a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001217e:	6a 01                	push   0x1
c0012180:	50                   	push   eax
c0012181:	e8 08 fd ff ff       	call   c0011e8e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012186:	83 c4 10             	add    esp,0x10
c0012189:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001218d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012191:	8b 00                	mov    eax,DWORD PTR [eax]
c0012193:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001219b:	25 01 04 00 00       	and    eax,0x401
c00121a0:	3d 01 04 00 00       	cmp    eax,0x401
c00121a5:	75 19                	jne    c00121c0 <VAS::~VAS()+0xec>
c00121a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ab:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b0:	83 ec 0c             	sub    esp,0xc
c00121b3:	50                   	push   eax
c00121b4:	e8 9a dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121b9:	83 c4 10             	add    esp,0x10
c00121bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121c0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121c4:	eb 81                	jmp    c0012147 <VAS::~VAS()+0x73>
c00121c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ca:	25 00 04 00 00       	and    eax,0x400
c00121cf:	74 19                	je     c00121ea <VAS::~VAS()+0x116>
c00121d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121da:	83 ec 0c             	sub    esp,0xc
c00121dd:	50                   	push   eax
c00121de:	e8 70 dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121ea:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121ee:	e9 1b ff ff ff       	jmp    c001210e <VAS::~VAS()+0x3a>
c00121f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121fa:	83 ec 0c             	sub    esp,0xc
c00121fd:	50                   	push   eax
c00121fe:	e8 d6 fc ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001220a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001220d:	83 ec 0c             	sub    esp,0xc
c0012210:	50                   	push   eax
c0012211:	e8 3d dc ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c0012216:	83 c4 10             	add    esp,0x10
c0012219:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001221d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012221:	c1 e0 02             	shl    eax,0x2
c0012224:	83 ec 08             	sub    esp,0x8
c0012227:	50                   	push   eax
c0012228:	68 cc a4 02 c0       	push   0xc002a4cc
c001222d:	e8 a2 0b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012232:	83 c4 10             	add    esp,0x10
c0012235:	e8 3f ba 00 00       	call   c001dc79 <unlockScheduler()>
c001223a:	90                   	nop
c001223b:	83 c4 2c             	add    esp,0x2c
c001223e:	c3                   	ret    
c001223f:	90                   	nop

c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012240:	55                   	push   ebp
c0012241:	57                   	push   edi
c0012242:	56                   	push   esi
c0012243:	53                   	push   ebx
c0012244:	83 ec 1c             	sub    esp,0x1c
c0012247:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001224b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001224f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012255:	77 08                	ja     c001225f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012257:	0f 20 d8             	mov    eax,cr3
c001225a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001225d:	75 47                	jne    c00122a6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001225f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012263:	09 d8                	or     eax,ebx
c0012265:	a9 ff 0f 00 00       	test   eax,0xfff
c001226a:	75 57                	jne    c00122c3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001226c:	89 de                	mov    esi,ebx
c001226e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012271:	c1 ee 16             	shr    esi,0x16
c0012274:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001227b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001227f:	74 54                	je     c00122d5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012281:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012285:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001228b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001228f:	c1 e6 0c             	shl    esi,0xc
c0012292:	c1 eb 0a             	shr    ebx,0xa
c0012295:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001229b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001229e:	83 c4 1c             	add    esp,0x1c
c00122a1:	5b                   	pop    ebx
c00122a2:	5e                   	pop    esi
c00122a3:	5f                   	pop    edi
c00122a4:	5d                   	pop    ebp
c00122a5:	c3                   	ret    
c00122a6:	83 ec 0c             	sub    esp,0xc
c00122a9:	68 ec a4 02 c0       	push   0xc002a4ec
c00122ae:	e8 21 0b 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122ba:	09 d8                	or     eax,ebx
c00122bc:	a9 ff 0f 00 00       	test   eax,0xfff
c00122c1:	74 a9                	je     c001226c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122c3:	83 ec 0c             	sub    esp,0xc
c00122c6:	68 54 a5 02 c0       	push   0xc002a554
c00122cb:	e8 ad 81 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00122d0:	83 c4 10             	add    esp,0x10
c00122d3:	eb 97                	jmp    c001226c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122d9:	e8 ff db ff ff       	call   c000fedd <Phys::allocatePage()>
c00122de:	89 c5                	mov    ebp,eax
c00122e0:	e8 39 fb ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c00122e5:	83 ec 0c             	sub    esp,0xc
c00122e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122ec:	6a 01                	push   0x1
c00122ee:	e8 84 f8 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c00122f3:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122fa:	6a 01                	push   0x1
c00122fc:	50                   	push   eax
c00122fd:	55                   	push   ebp
c00122fe:	81 cd 07 04 00 00    	or     ebp,0x407
c0012304:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012308:	51                   	push   ecx
c0012309:	e8 26 02 00 00       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001230e:	83 c4 1c             	add    esp,0x1c
c0012311:	68 00 10 00 00       	push   0x1000
c0012316:	6a 00                	push   0x0
c0012318:	50                   	push   eax
c0012319:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001231d:	e8 56 e4 fe ff       	call   c0000778 <memset>
c0012322:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012326:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012329:	e8 ab fb ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c001232e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012332:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012335:	83 c4 10             	add    esp,0x10
c0012338:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001233b:	e9 41 ff ff ff       	jmp    c0012281 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0012340 <VAS::allocatePages(int, int)>:
c0012340:	55                   	push   ebp
c0012341:	57                   	push   edi
c0012342:	56                   	push   esi
c0012343:	53                   	push   ebx
c0012344:	83 ec 1c             	sub    esp,0x1c
c0012347:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001234b:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0012350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012356:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001235c:	83 e0 01             	and    eax,0x1
c001235f:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012363:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012367:	0f 85 cc 00 00 00    	jne    c0012439 <VAS::allocatePages(int, int)+0xf9>
c001236d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012370:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012374:	85 c0                	test   eax,eax
c0012376:	0f 84 a1 00 00 00    	je     c001241d <VAS::allocatePages(int, int)+0xdd>
c001237c:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012380:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012384:	c1 e6 0c             	shl    esi,0xc
c0012387:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001238b:	85 c0                	test   eax,eax
c001238d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012390:	7e 33                	jle    c00123c5 <VAS::allocatePages(int, int)+0x85>
c0012392:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012396:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001239a:	81 cd 00 04 00 00    	or     ebp,0x400
c00123a0:	e8 38 db ff ff       	call   c000fedd <Phys::allocatePage()>
c00123a5:	55                   	push   ebp
c00123a6:	53                   	push   ebx
c00123a7:	50                   	push   eax
c00123a8:	57                   	push   edi
c00123a9:	e8 92 fe ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123ae:	83 c4 10             	add    esp,0x10
c00123b1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123b6:	74 03                	je     c00123bb <VAS::allocatePages(int, int)+0x7b>
c00123b8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123bb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123c1:	39 de                	cmp    esi,ebx
c00123c3:	75 db                	jne    c00123a0 <VAS::allocatePages(int, int)+0x60>
c00123c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123ca:	75 12                	jne    c00123de <VAS::allocatePages(int, int)+0x9e>
c00123cc:	0f 20 d8             	mov    eax,cr3
c00123cf:	0f 22 d8             	mov    cr3,eax
c00123d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123d6:	83 c4 1c             	add    esp,0x1c
c00123d9:	5b                   	pop    ebx
c00123da:	5e                   	pop    esi
c00123db:	5f                   	pop    edi
c00123dc:	5d                   	pop    ebp
c00123dd:	c3                   	ret    
c00123de:	c1 ee 0a             	shr    esi,0xa
c00123e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123e5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123eb:	c1 eb 0a             	shr    ebx,0xa
c00123ee:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00123f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00123fa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012400:	39 c3                	cmp    ebx,eax
c0012402:	77 ce                	ja     c00123d2 <VAS::allocatePages(int, int)+0x92>
c0012404:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012407:	81 c3 00 10 00 00    	add    ebx,0x1000
c001240d:	39 d8                	cmp    eax,ebx
c001240f:	73 f3                	jae    c0012404 <VAS::allocatePages(int, int)+0xc4>
c0012411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012415:	83 c4 1c             	add    esp,0x1c
c0012418:	5b                   	pop    ebx
c0012419:	5e                   	pop    esi
c001241a:	5f                   	pop    edi
c001241b:	5d                   	pop    ebp
c001241c:	c3                   	ret    
c001241d:	83 ec 0c             	sub    esp,0xc
c0012420:	68 78 a5 02 c0       	push   0xc002a578
c0012425:	e8 53 80 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001242a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001242d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012431:	83 c4 10             	add    esp,0x10
c0012434:	e9 43 ff ff ff       	jmp    c001237c <VAS::allocatePages(int, int)+0x3c>
c0012439:	83 ec 0c             	sub    esp,0xc
c001243c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012440:	e8 32 f7 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0012445:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012449:	83 c4 10             	add    esp,0x10
c001244c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012451:	0f 87 9b 00 00 00    	ja     c00124f2 <VAS::allocatePages(int, int)+0x1b2>
c0012457:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001245b:	85 d2                	test   edx,edx
c001245d:	7e 3c                	jle    c001249b <VAS::allocatePages(int, int)+0x15b>
c001245f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012463:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012467:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001246b:	c1 e5 0c             	shl    ebp,0xc
c001246e:	81 ce 00 04 00 00    	or     esi,0x400
c0012474:	01 dd                	add    ebp,ebx
c0012476:	e8 62 da ff ff       	call   c000fedd <Phys::allocatePage()>
c001247b:	56                   	push   esi
c001247c:	53                   	push   ebx
c001247d:	50                   	push   eax
c001247e:	57                   	push   edi
c001247f:	e8 bc fd ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012484:	83 c4 10             	add    esp,0x10
c0012487:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001248c:	74 03                	je     c0012491 <VAS::allocatePages(int, int)+0x151>
c001248e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012491:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012497:	39 dd                	cmp    ebp,ebx
c0012499:	75 db                	jne    c0012476 <VAS::allocatePages(int, int)+0x136>
c001249b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124a0:	0f 84 26 ff ff ff    	je     c00123cc <VAS::allocatePages(int, int)+0x8c>
c00124a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ae:	89 d3                	mov    ebx,edx
c00124b0:	c1 e0 0c             	shl    eax,0xc
c00124b3:	c1 eb 0a             	shr    ebx,0xa
c00124b6:	01 d0                	add    eax,edx
c00124b8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124be:	c1 e8 0a             	shr    eax,0xa
c00124c1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124cc:	2d 00 00 40 00       	sub    eax,0x400000
c00124d1:	39 c3                	cmp    ebx,eax
c00124d3:	0f 87 f9 fe ff ff    	ja     c00123d2 <VAS::allocatePages(int, int)+0x92>
c00124d9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124dc:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e2:	39 d8                	cmp    eax,ebx
c00124e4:	73 f3                	jae    c00124d9 <VAS::allocatePages(int, int)+0x199>
c00124e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124ea:	83 c4 1c             	add    esp,0x1c
c00124ed:	5b                   	pop    ebx
c00124ee:	5e                   	pop    esi
c00124ef:	5f                   	pop    edi
c00124f0:	5d                   	pop    ebp
c00124f1:	c3                   	ret    
c00124f2:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00124f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124fd:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012504:	0f 84 4d ff ff ff    	je     c0012457 <VAS::allocatePages(int, int)+0x117>
c001250a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012512:	e9 40 ff ff ff       	jmp    c0012457 <VAS::allocatePages(int, int)+0x117>
c0012517:	90                   	nop

c0012518 <VAS::setCPUSpecific(unsigned long)>:
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	6a 05                	push   0x5
c001251d:	68 00 00 40 c2       	push   0xc2400000
c0012522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252a:	e8 11 fd ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c001252f:	83 c4 1c             	add    esp,0x1c
c0012532:	c3                   	ret    
c0012533:	90                   	nop

c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012534:	55                   	push   ebp
c0012535:	57                   	push   edi
c0012536:	56                   	push   esi
c0012537:	53                   	push   ebx
c0012538:	83 ec 1c             	sub    esp,0x1c
c001253b:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0012540:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012544:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001254a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001254e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012554:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012558:	83 e0 01             	and    eax,0x1
c001255b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001255f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012563:	85 c0                	test   eax,eax
c0012565:	7e 39                	jle    c00125a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012567:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001256b:	89 f3                	mov    ebx,esi
c001256d:	c1 e0 0c             	shl    eax,0xc
c0012570:	01 f0                	add    eax,esi
c0012572:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012576:	55                   	push   ebp
c0012577:	53                   	push   ebx
c0012578:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001257c:	29 f0                	sub    eax,esi
c001257e:	01 d8                	add    eax,ebx
c0012580:	50                   	push   eax
c0012581:	57                   	push   edi
c0012582:	e8 b9 fc ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012587:	83 c4 10             	add    esp,0x10
c001258a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001258f:	74 03                	je     c0012594 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012591:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012594:	81 c3 00 10 00 00    	add    ebx,0x1000
c001259a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001259e:	75 d6                	jne    c0012576 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125a5:	75 10                	jne    c00125b7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125a7:	0f 20 d8             	mov    eax,cr3
c00125aa:	0f 22 d8             	mov    cr3,eax
c00125ad:	83 c4 1c             	add    esp,0x1c
c00125b0:	89 f0                	mov    eax,esi
c00125b2:	5b                   	pop    ebx
c00125b3:	5e                   	pop    esi
c00125b4:	5f                   	pop    edi
c00125b5:	5d                   	pop    ebp
c00125b6:	c3                   	ret    
c00125b7:	89 f3                	mov    ebx,esi
c00125b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125bd:	c1 eb 0a             	shr    ebx,0xa
c00125c0:	c1 e0 0c             	shl    eax,0xc
c00125c3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125c9:	01 f0                	add    eax,esi
c00125cb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125d1:	c1 e8 0a             	shr    eax,0xa
c00125d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125d9:	2d 00 00 40 00       	sub    eax,0x400000
c00125de:	39 c3                	cmp    ebx,eax
c00125e0:	77 cb                	ja     c00125ad <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125e2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125e5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125eb:	39 d8                	cmp    eax,ebx
c00125ed:	73 f3                	jae    c00125e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125ef:	83 c4 1c             	add    esp,0x1c
c00125f2:	89 f0                	mov    eax,esi
c00125f4:	5b                   	pop    ebx
c00125f5:	5e                   	pop    esi
c00125f6:	5f                   	pop    edi
c00125f7:	5d                   	pop    ebp
c00125f8:	c3                   	ret    
c00125f9:	90                   	nop

c00125fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00125fa:	55                   	push   ebp
c00125fb:	57                   	push   edi
c00125fc:	56                   	push   esi
c00125fd:	53                   	push   ebx
c00125fe:	83 ec 1c             	sub    esp,0x1c
c0012601:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012605:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012609:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001260d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012611:	a9 ff 0f 00 00       	test   eax,0xfff
c0012616:	75 4a                	jne    c0012662 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012618:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001261c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001261f:	c1 eb 16             	shr    ebx,0x16
c0012622:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012629:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001262d:	74 4d                	je     c001267c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001262f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012633:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012637:	c1 e8 0a             	shr    eax,0xa
c001263a:	80 fa 01             	cmp    dl,0x1
c001263d:	19 d2                	sbb    edx,edx
c001263f:	c1 e3 0c             	shl    ebx,0xc
c0012642:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012646:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001264c:	25 fc 0f 00 00       	and    eax,0xffc
c0012651:	01 d8                	add    eax,ebx
c0012653:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001265a:	83 c4 1c             	add    esp,0x1c
c001265d:	5b                   	pop    ebx
c001265e:	5e                   	pop    esi
c001265f:	5f                   	pop    edi
c0012660:	5d                   	pop    ebp
c0012661:	c3                   	ret    
c0012662:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012666:	83 ec 0c             	sub    esp,0xc
c0012669:	68 a4 a5 02 c0       	push   0xc002a5a4
c001266e:	e8 0a 7e 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0012673:	83 c4 10             	add    esp,0x10
c0012676:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001267a:	eb 9c                	jmp    c0012618 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001267c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012680:	e8 58 d8 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012685:	89 c5                	mov    ebp,eax
c0012687:	e8 92 f7 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012693:	6a 01                	push   0x1
c0012695:	e8 dd f4 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c001269a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126a1:	6a 01                	push   0x1
c00126a3:	50                   	push   eax
c00126a4:	55                   	push   ebp
c00126a5:	81 cd 07 04 00 00    	or     ebp,0x407
c00126ab:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126af:	51                   	push   ecx
c00126b0:	e8 7f fe ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126b5:	83 c4 1c             	add    esp,0x1c
c00126b8:	68 00 10 00 00       	push   0x1000
c00126bd:	6a 00                	push   0x0
c00126bf:	50                   	push   eax
c00126c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126c4:	e8 af e0 fe ff       	call   c0000778 <memset>
c00126c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126cd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126d0:	e8 04 f8 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c00126d5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126e2:	e9 48 ff ff ff       	jmp    c001262f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126e7:	90                   	nop

c00126e8 <VAS::VAS(bool)>:
c00126e8:	53                   	push   ebx
c00126e9:	83 ec 28             	sub    esp,0x28
c00126ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00126f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00126ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012703:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001270a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001270e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012712:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012715:	e8 c3 d7 ff ff       	call   c000fedd <Phys::allocatePage()>
c001271a:	89 c2                	mov    edx,eax
c001271c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012720:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012723:	e8 f6 f6 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0012728:	89 c3                	mov    ebx,eax
c001272a:	83 ec 0c             	sub    esp,0xc
c001272d:	6a 01                	push   0x1
c001272f:	e8 43 f4 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	89 c2                	mov    edx,eax
c0012739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012740:	83 ec 0c             	sub    esp,0xc
c0012743:	6a 03                	push   0x3
c0012745:	6a 01                	push   0x1
c0012747:	52                   	push   edx
c0012748:	50                   	push   eax
c0012749:	53                   	push   ebx
c001274a:	e8 e5 fd ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001274f:	83 c4 20             	add    esp,0x20
c0012752:	89 c2                	mov    edx,eax
c0012754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012758:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001275b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012763:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001276b:	7f 1c                	jg     c0012789 <VAS::VAS(bool)+0xa1>
c001276d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012771:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012774:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012778:	c1 e2 02             	shl    edx,0x2
c001277b:	01 d0                	add    eax,edx
c001277d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012783:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012787:	eb da                	jmp    c0012763 <VAS::VAS(bool)+0x7b>
c0012789:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012791:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012799:	7f 7a                	jg     c0012815 <VAS::VAS(bool)+0x12d>
c001279b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001279f:	2d 00 02 00 00       	sub    eax,0x200
c00127a4:	c1 e0 0c             	shl    eax,0xc
c00127a7:	83 c8 03             	or     eax,0x3
c00127aa:	89 c2                	mov    edx,eax
c00127ac:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00127b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127b7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127bd:	83 e0 10             	and    eax,0x10
c00127c0:	84 c0                	test   al,al
c00127c2:	74 07                	je     c00127cb <VAS::VAS(bool)+0xe3>
c00127c4:	b8 00 01 00 00       	mov    eax,0x100
c00127c9:	eb 05                	jmp    c00127d0 <VAS::VAS(bool)+0xe8>
c00127cb:	b8 00 00 00 00       	mov    eax,0x0
c00127d0:	09 d0                	or     eax,edx
c00127d2:	89 c1                	mov    ecx,eax
c00127d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127df:	c1 e2 02             	shl    edx,0x2
c00127e2:	01 d0                	add    eax,edx
c00127e4:	89 ca                	mov    edx,ecx
c00127e6:	89 10                	mov    DWORD PTR [eax],edx
c00127e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ec:	2d 40 03 00 00       	sub    eax,0x340
c00127f1:	83 f8 7f             	cmp    eax,0x7f
c00127f4:	77 16                	ja     c001280c <VAS::VAS(bool)+0x124>
c00127f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012801:	c1 e2 02             	shl    edx,0x2
c0012804:	01 d0                	add    eax,edx
c0012806:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001280c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012810:	e9 7c ff ff ff       	jmp    c0012791 <VAS::VAS(bool)+0xa9>
c0012815:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001281a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012820:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012826:	83 e0 10             	and    eax,0x10
c0012829:	84 c0                	test   al,al
c001282b:	74 07                	je     c0012834 <VAS::VAS(bool)+0x14c>
c001282d:	b8 03 41 00 00       	mov    eax,0x4103
c0012832:	eb 05                	jmp    c0012839 <VAS::VAS(bool)+0x151>
c0012834:	b8 03 40 00 00       	mov    eax,0x4003
c0012839:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001283d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012840:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012846:	89 02                	mov    DWORD PTR [edx],eax
c0012848:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001284d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012853:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012859:	83 ec 08             	sub    esp,0x8
c001285c:	50                   	push   eax
c001285d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012861:	e8 b2 fc ff ff       	call   c0012518 <VAS::setCPUSpecific(unsigned long)>
c0012866:	83 c4 10             	add    esp,0x10
c0012869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012870:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0012875:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012881:	83 e0 10             	and    eax,0x10
c0012884:	84 c0                	test   al,al
c0012886:	74 07                	je     c001288f <VAS::VAS(bool)+0x1a7>
c0012888:	b8 00 01 00 00       	mov    eax,0x100
c001288d:	eb 05                	jmp    c0012894 <VAS::VAS(bool)+0x1ac>
c001288f:	b8 00 00 00 00       	mov    eax,0x0
c0012894:	09 c2                	or     edx,eax
c0012896:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289d:	05 fc 0f 00 00       	add    eax,0xffc
c00128a2:	83 ca 03             	or     edx,0x3
c00128a5:	89 10                	mov    DWORD PTR [eax],edx
c00128a7:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00128ac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b2:	83 ec 0c             	sub    esp,0xc
c00128b5:	50                   	push   eax
c00128b6:	e8 2b 1c 00 00       	call   c00144e6 <Device::getName()>
c00128bb:	83 c4 10             	add    esp,0x10
c00128be:	83 ec 08             	sub    esp,0x8
c00128c1:	68 89 a6 02 c0       	push   0xc002a689
c00128c6:	50                   	push   eax
c00128c7:	e8 f4 df fe ff       	call   c00008c0 <strcmp>
c00128cc:	83 c4 10             	add    esp,0x10
c00128cf:	85 c0                	test   eax,eax
c00128d1:	0f 94 c0             	sete   al
c00128d4:	84 c0                	test   al,al
c00128d6:	74 70                	je     c0012948 <VAS::VAS(bool)+0x260>
c00128d8:	e8 7d b3 00 00       	call   c001dc5a <disableIRQs()>
c00128dd:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00128e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e8:	05 7c 09 00 00       	add    eax,0x97c
c00128ed:	83 ec 0c             	sub    esp,0xc
c00128f0:	50                   	push   eax
c00128f1:	e8 c6 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128f6:	83 c4 10             	add    esp,0x10
c00128f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128fe:	89 c3                	mov    ebx,eax
c0012900:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0012905:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001290b:	05 7c 09 00 00       	add    eax,0x97c
c0012910:	83 ec 0c             	sub    esp,0xc
c0012913:	50                   	push   eax
c0012914:	e8 a3 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012919:	83 c4 10             	add    esp,0x10
c001291c:	83 ec 08             	sub    esp,0x8
c001291f:	50                   	push   eax
c0012920:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012924:	e8 91 f5 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	8b 00                	mov    eax,DWORD PTR [eax]
c001292e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012933:	6a 11                	push   0x11
c0012935:	53                   	push   ebx
c0012936:	50                   	push   eax
c0012937:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001293b:	e8 00 f9 ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	e8 20 b3 00 00       	call   c001dc68 <enableIRQs()>
c0012948:	90                   	nop
c0012949:	83 c4 28             	add    esp,0x28
c001294c:	5b                   	pop    ebx
c001294d:	c3                   	ret    

c001294e <VAS::evict(unsigned long)>:
c001294e:	55                   	push   ebp
c001294f:	57                   	push   edi
c0012950:	56                   	push   esi
c0012951:	53                   	push   ebx
c0012952:	83 ec 14             	sub    esp,0x14
c0012955:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0012959:	55                   	push   ebp
c001295a:	68 97 a6 02 c0       	push   0xc002a697
c001295f:	e8 70 04 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012964:	e8 4f f3 ff ff       	call   c0011cb8 <Virt::allocateSwapfilePage()>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	89 c7                	mov    edi,eax
c001296e:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c0012973:	85 c0                	test   eax,eax
c0012975:	7e 3d                	jle    c00129b4 <VAS::evict(unsigned long)+0x66>
c0012977:	89 ee                	mov    esi,ebp
c0012979:	31 db                	xor    ebx,ebx
c001297b:	83 ec 0c             	sub    esp,0xc
c001297e:	57                   	push   edi
c001297f:	e8 22 f3 ff ff       	call   c0011ca6 <Virt::swapIDToSector(unsigned long)>
c0012984:	89 34 24             	mov    DWORD PTR [esp],esi
c0012987:	01 d8                	add    eax,ebx
c0012989:	6a 01                	push   0x1
c001298b:	31 d2                	xor    edx,edx
c001298d:	43                   	inc    ebx
c001298e:	52                   	push   edx
c001298f:	81 c6 00 02 00 00    	add    esi,0x200
c0012995:	50                   	push   eax
c0012996:	0f be 05 38 d2 02 c0 	movsx  eax,BYTE PTR ds:0xc002d238
c001299d:	ff 34 85 9c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1864]
c00129a4:	e8 ab 3c 00 00       	call   c0016654 <LogicalDisk::write(unsigned long long, int, void*)>
c00129a9:	83 c4 20             	add    esp,0x20
c00129ac:	39 1d 2c d2 02 c0    	cmp    DWORD PTR ds:0xc002d22c,ebx
c00129b2:	7f c7                	jg     c001297b <VAS::evict(unsigned long)+0x2d>
c00129b4:	83 ec 08             	sub    esp,0x8
c00129b7:	c1 e7 0b             	shl    edi,0xb
c00129ba:	55                   	push   ebp
c00129bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129bf:	e8 f6 f4 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c00129c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00129c6:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00129cc:	09 d7                	or     edi,edx
c00129ce:	89 38                	mov    DWORD PTR [eax],edi
c00129d0:	ff 05 04 e4 02 c0    	inc    DWORD PTR ds:0xc002e404
c00129d6:	0f 20 d8             	mov    eax,cr3
c00129d9:	0f 22 d8             	mov    cr3,eax
c00129dc:	83 c4 1c             	add    esp,0x1c
c00129df:	5b                   	pop    ebx
c00129e0:	5e                   	pop    esi
c00129e1:	5f                   	pop    edi
c00129e2:	5d                   	pop    ebp
c00129e3:	c3                   	ret    

c00129e4 <VAS::tryLoadBackOffDisk(unsigned long)>:
c00129e4:	57                   	push   edi
c00129e5:	56                   	push   esi
c00129e6:	53                   	push   ebx
c00129e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129eb:	83 ec 08             	sub    esp,0x8
c00129ee:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00129f4:	53                   	push   ebx
c00129f5:	68 a6 a6 02 c0       	push   0xc002a6a6
c00129fa:	e8 d5 03 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00129ff:	83 c4 10             	add    esp,0x10
c0012a02:	85 db                	test   ebx,ebx
c0012a04:	74 20                	je     c0012a26 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0012a06:	83 ec 08             	sub    esp,0x8
c0012a09:	53                   	push   ebx
c0012a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a0e:	e8 a7 f4 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012a13:	83 c4 10             	add    esp,0x10
c0012a16:	89 c6                	mov    esi,eax
c0012a18:	85 c0                	test   eax,eax
c0012a1a:	74 0a                	je     c0012a26 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c0012a1c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a1e:	f7 c7 01 00 00 00    	test   edi,0x1
c0012a24:	74 06                	je     c0012a2c <VAS::tryLoadBackOffDisk(unsigned long)+0x48>
c0012a26:	31 c0                	xor    eax,eax
c0012a28:	5b                   	pop    ebx
c0012a29:	5e                   	pop    esi
c0012a2a:	5f                   	pop    edi
c0012a2b:	c3                   	ret    
c0012a2c:	e8 ac d4 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012a31:	c1 ef 0b             	shr    edi,0xb
c0012a34:	8b 16                	mov    edx,DWORD PTR [esi]
c0012a36:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012a3c:	09 c2                	or     edx,eax
c0012a3e:	81 ca 01 08 00 00    	or     edx,0x801
c0012a44:	89 16                	mov    DWORD PTR [esi],edx
c0012a46:	0f 20 d8             	mov    eax,cr3
c0012a49:	0f 22 d8             	mov    cr3,eax
c0012a4c:	a1 2c d2 02 c0       	mov    eax,ds:0xc002d22c
c0012a51:	85 c0                	test   eax,eax
c0012a53:	7e 3b                	jle    c0012a90 <VAS::tryLoadBackOffDisk(unsigned long)+0xac>
c0012a55:	31 f6                	xor    esi,esi
c0012a57:	83 ec 0c             	sub    esp,0xc
c0012a5a:	57                   	push   edi
c0012a5b:	e8 46 f2 ff ff       	call   c0011ca6 <Virt::swapIDToSector(unsigned long)>
c0012a60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a63:	01 f0                	add    eax,esi
c0012a65:	6a 01                	push   0x1
c0012a67:	31 d2                	xor    edx,edx
c0012a69:	46                   	inc    esi
c0012a6a:	52                   	push   edx
c0012a6b:	81 c3 00 02 00 00    	add    ebx,0x200
c0012a71:	50                   	push   eax
c0012a72:	0f be 05 38 d2 02 c0 	movsx  eax,BYTE PTR ds:0xc002d238
c0012a79:	ff 34 85 9c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1864]
c0012a80:	e8 63 3b 00 00       	call   c00165e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012a85:	83 c4 20             	add    esp,0x20
c0012a88:	39 35 2c d2 02 c0    	cmp    DWORD PTR ds:0xc002d22c,esi
c0012a8e:	7f c7                	jg     c0012a57 <VAS::tryLoadBackOffDisk(unsigned long)+0x73>
c0012a90:	83 ec 0c             	sub    esp,0xc
c0012a93:	ff 0d 04 e4 02 c0    	dec    DWORD PTR ds:0xc002e404
c0012a99:	57                   	push   edi
c0012a9a:	e8 e9 f1 ff ff       	call   c0011c88 <Virt::freeSwapfilePage(unsigned long)>
c0012a9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012aa3:	83 c4 10             	add    esp,0x10
c0012aa6:	25 ff 0f 00 00       	and    eax,0xfff
c0012aab:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012ab0:	77 07                	ja     c0012ab9 <VAS::tryLoadBackOffDisk(unsigned long)+0xd5>
c0012ab2:	b0 01                	mov    al,0x1
c0012ab4:	e9 6f ff ff ff       	jmp    c0012a28 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c0012ab9:	83 ec 0c             	sub    esp,0xc
c0012abc:	68 b4 a6 02 c0       	push   0xc002a6b4
c0012ac1:	e8 0e 03 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	b0 01                	mov    al,0x1
c0012acb:	e9 58 ff ff ff       	jmp    c0012a28 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c0012ad0 <VAS::scanForEviction()>:
c0012ad0:	55                   	push   ebp
c0012ad1:	57                   	push   edi
c0012ad2:	31 ff                	xor    edi,edi
c0012ad4:	56                   	push   esi
c0012ad5:	31 f6                	xor    esi,esi
c0012ad7:	53                   	push   ebx
c0012ad8:	83 ec 1c             	sub    esp,0x1c
c0012adb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012adf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0012ae2:	89 d8                	mov    eax,ebx
c0012ae4:	39 c3                	cmp    ebx,eax
c0012ae6:	74 72                	je     c0012b5a <VAS::scanForEviction()+0x8a>
c0012ae8:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012aed:	75 0e                	jne    c0012afd <VAS::scanForEviction()+0x2d>
c0012aef:	89 c1                	mov    ecx,eax
c0012af1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012af4:	c1 e9 16             	shr    ecx,0x16
c0012af7:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012afb:	74 51                	je     c0012b4e <VAS::scanForEviction()+0x7e>
c0012afd:	50                   	push   eax
c0012afe:	55                   	push   ebp
c0012aff:	e8 b6 f3 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c0012b04:	5a                   	pop    edx
c0012b05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b07:	59                   	pop    ecx
c0012b08:	89 d1                	mov    ecx,edx
c0012b0a:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012b10:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012b16:	74 54                	je     c0012b6c <VAS::scanForEviction()+0x9c>
c0012b18:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012b1b:	05 00 10 00 00       	add    eax,0x1000
c0012b20:	3d ff ff bf ff       	cmp    eax,0xffbfffff
c0012b25:	76 3d                	jbe    c0012b64 <VAS::scanForEviction()+0x94>
c0012b27:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012b2e:	85 db                	test   ebx,ebx
c0012b30:	74 79                	je     c0012bab <VAS::scanForEviction()+0xdb>
c0012b32:	31 c0                	xor    eax,eax
c0012b34:	be 01 00 00 00       	mov    esi,0x1
c0012b39:	a9 ff ff 3f 00       	test   eax,0x3fffff
c0012b3e:	75 bd                	jne    c0012afd <VAS::scanForEviction()+0x2d>
c0012b40:	89 c1                	mov    ecx,eax
c0012b42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012b45:	c1 e9 16             	shr    ecx,0x16
c0012b48:	f6 04 8a 01          	test   BYTE PTR [edx+ecx*4],0x1
c0012b4c:	75 af                	jne    c0012afd <VAS::scanForEviction()+0x2d>
c0012b4e:	05 00 00 40 00       	add    eax,0x400000
c0012b53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b56:	39 c3                	cmp    ebx,eax
c0012b58:	75 8e                	jne    c0012ae8 <VAS::scanForEviction()+0x18>
c0012b5a:	89 f1                	mov    ecx,esi
c0012b5c:	84 c9                	test   cl,cl
c0012b5e:	74 88                	je     c0012ae8 <VAS::scanForEviction()+0x18>
c0012b60:	89 f7                	mov    edi,esi
c0012b62:	eb 84                	jmp    c0012ae8 <VAS::scanForEviction()+0x18>
c0012b64:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0012b67:	e9 78 ff ff ff       	jmp    c0012ae4 <VAS::scanForEviction()+0x14>
c0012b6c:	f6 c2 01             	test   dl,0x1
c0012b6f:	74 a7                	je     c0012b18 <VAS::scanForEviction()+0x48>
c0012b71:	f6 c2 40             	test   dl,0x40
c0012b74:	74 0b                	je     c0012b81 <VAS::scanForEviction()+0xb1>
c0012b76:	83 e2 bf             	and    edx,0xffffffbf
c0012b79:	89 10                	mov    DWORD PTR [eax],edx
c0012b7b:	89 f8                	mov    eax,edi
c0012b7d:	84 c0                	test   al,al
c0012b7f:	74 97                	je     c0012b18 <VAS::scanForEviction()+0x48>
c0012b81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b85:	83 ec 08             	sub    esp,0x8
c0012b88:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0012b8b:	55                   	push   ebp
c0012b8c:	e8 bd fd ff ff       	call   c001294e <VAS::evict(unsigned long)>
c0012b91:	81 45 10 00 10 00 00 	add    DWORD PTR [ebp+0x10],0x1000
c0012b98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b9c:	83 c4 2c             	add    esp,0x2c
c0012b9f:	89 d0                	mov    eax,edx
c0012ba1:	5b                   	pop    ebx
c0012ba2:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012ba7:	5e                   	pop    esi
c0012ba8:	5f                   	pop    edi
c0012ba9:	5d                   	pop    ebp
c0012baa:	c3                   	ret    
c0012bab:	bf 01 00 00 00       	mov    edi,0x1
c0012bb0:	eb 80                	jmp    c0012b32 <VAS::scanForEviction()+0x62>

c0012bb2 <mapVASFirstTime>:
c0012bb2:	55                   	push   ebp
c0012bb3:	57                   	push   edi
c0012bb4:	56                   	push   esi
c0012bb5:	53                   	push   ebx
c0012bb6:	83 ec 0c             	sub    esp,0xc
c0012bb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bbe:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012bc1:	4a                   	dec    edx
c0012bc2:	0f 84 8e 00 00 00    	je     c0012c56 <mapVASFirstTime+0xa4>
c0012bc8:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012bcb:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012bce:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012bd3:	c1 e5 15             	shl    ebp,0x15
c0012bd6:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012bdb:	8b ba 32 19 00 00    	mov    edi,DWORD PTR [edx+0x1932]
c0012be1:	29 eb                	sub    ebx,ebp
c0012be3:	29 ee                	sub    esi,ebp
c0012be5:	e8 f3 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012bea:	83 ec 0c             	sub    esp,0xc
c0012bed:	68 03 04 00 00       	push   0x403
c0012bf2:	6a 01                	push   0x1
c0012bf4:	53                   	push   ebx
c0012bf5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012bfb:	50                   	push   eax
c0012bfc:	57                   	push   edi
c0012bfd:	e8 32 f9 ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c02:	83 c4 20             	add    esp,0x20
c0012c05:	39 f3                	cmp    ebx,esi
c0012c07:	75 dc                	jne    c0012be5 <mapVASFirstTime+0x33>
c0012c09:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c0e:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c13:	29 ee                	sub    esi,ebp
c0012c15:	29 e8                	sub    eax,ebp
c0012c17:	89 c5                	mov    ebp,eax
c0012c19:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c1d:	19 db                	sbb    ebx,ebx
c0012c1f:	e8 b9 d2 ff ff       	call   c000fedd <Phys::allocatePage()>
c0012c24:	83 e3 04             	and    ebx,0x4
c0012c27:	83 ec 0c             	sub    esp,0xc
c0012c2a:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c30:	53                   	push   ebx
c0012c31:	6a 01                	push   0x1
c0012c33:	56                   	push   esi
c0012c34:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012c3a:	50                   	push   eax
c0012c3b:	57                   	push   edi
c0012c3c:	e8 f3 f8 ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c41:	83 c4 20             	add    esp,0x20
c0012c44:	39 f5                	cmp    ebp,esi
c0012c46:	75 d1                	jne    c0012c19 <mapVASFirstTime+0x67>
c0012c48:	0f 20 d8             	mov    eax,cr3
c0012c4b:	0f 22 d8             	mov    cr3,eax
c0012c4e:	83 c4 0c             	add    esp,0xc
c0012c51:	5b                   	pop    ebx
c0012c52:	5e                   	pop    esi
c0012c53:	5f                   	pop    edi
c0012c54:	5d                   	pop    ebp
c0012c55:	c3                   	ret    
c0012c56:	83 ec 0c             	sub    esp,0xc
c0012c59:	68 c8 a6 02 c0       	push   0xc002a6c8
c0012c5e:	e8 71 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012c63:	83 c4 10             	add    esp,0x10
c0012c66:	83 c4 0c             	add    esp,0xc
c0012c69:	5b                   	pop    ebx
c0012c6a:	5e                   	pop    esi
c0012c6b:	5f                   	pop    edi
c0012c6c:	5d                   	pop    ebp
c0012c6d:	c3                   	ret    

c0012c6e <__cxa_atexit>:
c0012c6e:	31 c0                	xor    eax,eax
c0012c70:	c3                   	ret    

c0012c71 <__cxa_finalize>:
c0012c71:	c3                   	ret    

c0012c72 <__stack_chk_fail>:
c0012c72:	55                   	push   ebp
c0012c73:	89 e5                	mov    ebp,esp
c0012c75:	83 ec 14             	sub    esp,0x14
c0012c78:	68 e1 a6 02 c0       	push   0xc002a6e1
c0012c7d:	e8 52 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012c82:	58                   	pop    eax
c0012c83:	5a                   	pop    edx
c0012c84:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012c87:	68 31 a7 02 c0       	push   0xc002a731
c0012c8c:	e8 43 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012c91:	59                   	pop    ecx
c0012c92:	58                   	pop    eax
c0012c93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c96:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012c99:	68 31 a7 02 c0       	push   0xc002a731
c0012c9e:	e8 31 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012ca3:	5a                   	pop    edx
c0012ca4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ca7:	59                   	pop    ecx
c0012ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0012caa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cad:	68 31 a7 02 c0       	push   0xc002a731
c0012cb2:	e8 1d 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012cb7:	5a                   	pop    edx
c0012cb8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cbb:	59                   	pop    ecx
c0012cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012cc3:	68 31 a7 02 c0       	push   0xc002a731
c0012cc8:	e8 07 01 00 00       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0012ccd:	c7 04 24 39 a7 02 c0 	mov    DWORD PTR [esp],0xc002a739
c0012cd4:	e8 a4 77 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0012cd9:	83 c4 10             	add    esp,0x10
c0012cdc:	c9                   	leave  
c0012cdd:	c3                   	ret    

c0012cde <__cxa_pure_virtual>:
c0012cde:	83 ec 18             	sub    esp,0x18
c0012ce1:	68 51 a7 02 c0       	push   0xc002a751
c0012ce6:	e8 92 77 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0012ceb:	83 c4 1c             	add    esp,0x1c
c0012cee:	c3                   	ret    

c0012cef <operator new[](unsigned long)>:
c0012cef:	e9 4c cb ff ff       	jmp    c000f840 <malloc>

c0012cf4 <operator delete(void*, unsigned long)>:
c0012cf4:	e9 67 cb ff ff       	jmp    c000f860 <rfree>

c0012cf9 <operator delete[](void*)>:
c0012cf9:	e9 62 cb ff ff       	jmp    c000f860 <rfree>

c0012cfe <operator delete[](void*, unsigned long)>:
c0012cfe:	e9 5d cb ff ff       	jmp    c000f860 <rfree>

c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d03:	57                   	push   edi
c0012d04:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d09:	56                   	push   esi
c0012d0a:	be 64 a7 02 c0       	mov    esi,0xc002a764
c0012d0f:	53                   	push   ebx
c0012d10:	83 ec 40             	sub    esp,0x40
c0012d13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d17:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d1b:	fc                   	cld    
c0012d1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d1e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d22:	83 f9 3e             	cmp    ecx,0x3e
c0012d25:	7e 05                	jle    c0012d2c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d27:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d2c:	89 df                	mov    edi,ebx
c0012d2e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d32:	eb 02                	jmp    c0012d36 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012d34:	89 c7                	mov    edi,eax
c0012d36:	31 d2                	xor    edx,edx
c0012d38:	46                   	inc    esi
c0012d39:	89 f8                	mov    eax,edi
c0012d3b:	f7 f1                	div    ecx
c0012d3d:	39 cf                	cmp    edi,ecx
c0012d3f:	73 f3                	jae    c0012d34 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012d41:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d44:	eb 02                	jmp    c0012d48 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012d46:	89 c3                	mov    ebx,eax
c0012d48:	31 d2                	xor    edx,edx
c0012d4a:	4e                   	dec    esi
c0012d4b:	89 d8                	mov    eax,ebx
c0012d4d:	f7 f1                	div    ecx
c0012d4f:	39 cb                	cmp    ebx,ecx
c0012d51:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012d55:	88 16                	mov    BYTE PTR [esi],dl
c0012d57:	73 ed                	jae    c0012d46 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012d59:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012d5d:	83 c4 40             	add    esp,0x40
c0012d60:	5b                   	pop    ebx
c0012d61:	5e                   	pop    esi
c0012d62:	5f                   	pop    edi
c0012d63:	c3                   	ret    

c0012d64 <Dbg::logc(char)>:
c0012d64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d68:	ba fd 03 00 00       	mov    edx,0x3fd
c0012d6d:	ec                   	in     al,dx
c0012d6e:	a8 20                	test   al,0x20
c0012d70:	74 fb                	je     c0012d6d <Dbg::logc(char)+0x9>
c0012d72:	ba f8 03 00 00       	mov    edx,0x3f8
c0012d77:	88 c8                	mov    al,cl
c0012d79:	ee                   	out    dx,al
c0012d7a:	c3                   	ret    

c0012d7b <Dbg::logs(char*)>:
c0012d7b:	53                   	push   ebx
c0012d7c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d80:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d83:	84 c0                	test   al,al
c0012d85:	74 0f                	je     c0012d96 <Dbg::logs(char*)+0x1b>
c0012d87:	50                   	push   eax
c0012d88:	43                   	inc    ebx
c0012d89:	e8 d6 ff ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012d8e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012d91:	5a                   	pop    edx
c0012d92:	84 c0                	test   al,al
c0012d94:	75 f1                	jne    c0012d87 <Dbg::logs(char*)+0xc>
c0012d96:	5b                   	pop    ebx
c0012d97:	c3                   	ret    

c0012d98 <Dbg::logWriteInt(unsigned int)>:
c0012d98:	83 ec 10             	sub    esp,0x10
c0012d9b:	6a 0a                	push   0xa
c0012d9d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012da1:	50                   	push   eax
c0012da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da6:	e8 58 ff ff ff       	call   c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dab:	50                   	push   eax
c0012dac:	e8 ca ff ff ff       	call   c0012d7b <Dbg::logs(char*)>
c0012db1:	83 c4 20             	add    esp,0x20
c0012db4:	c3                   	ret    

c0012db5 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012db5:	83 ec 10             	sub    esp,0x10
c0012db8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012dc0:	50                   	push   eax
c0012dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dc5:	e8 39 ff ff ff       	call   c0012d03 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012dca:	50                   	push   eax
c0012dcb:	e8 ab ff ff ff       	call   c0012d7b <Dbg::logs(char*)>
c0012dd0:	83 c4 20             	add    esp,0x20
c0012dd3:	c3                   	ret    

c0012dd4 <Dbg::kprintf(char const*, ...)>:
c0012dd4:	55                   	push   ebp
c0012dd5:	57                   	push   edi
c0012dd6:	56                   	push   esi
c0012dd7:	53                   	push   ebx
c0012dd8:	83 ec 0c             	sub    esp,0xc
c0012ddb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ddf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012de3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012de7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012dea:	84 c0                	test   al,al
c0012dec:	74 4a                	je     c0012e38 <Dbg::kprintf(char const*, ...)+0x64>
c0012dee:	31 db                	xor    ebx,ebx
c0012df0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012df3:	3c 25                	cmp    al,0x25
c0012df5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012df8:	0f 85 e4 00 00 00    	jne    c0012ee2 <Dbg::kprintf(char const*, ...)+0x10e>
c0012dfe:	83 c3 02             	add    ebx,0x2
c0012e01:	8a 07                	mov    al,BYTE PTR [edi]
c0012e03:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e06:	83 e8 25             	sub    eax,0x25
c0012e09:	3c 53                	cmp    al,0x53
c0012e0b:	0f 87 ba 00 00 00    	ja     c0012ecb <Dbg::kprintf(char const*, ...)+0xf7>
c0012e11:	0f b6 c0             	movzx  eax,al
c0012e14:	ff 24 85 a4 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd585c]
c0012e1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e1f:	89 c8                	mov    eax,ecx
c0012e21:	83 c1 04             	add    ecx,0x4
c0012e24:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e28:	ff 30                	push   DWORD PTR [eax]
c0012e2a:	e8 4c ff ff ff       	call   c0012d7b <Dbg::logs(char*)>
c0012e2f:	58                   	pop    eax
c0012e30:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012e34:	84 c0                	test   al,al
c0012e36:	75 b8                	jne    c0012df0 <Dbg::kprintf(char const*, ...)+0x1c>
c0012e38:	83 c4 0c             	add    esp,0xc
c0012e3b:	5b                   	pop    ebx
c0012e3c:	5e                   	pop    esi
c0012e3d:	5f                   	pop    edi
c0012e3e:	5d                   	pop    ebp
c0012e3f:	c3                   	ret    
c0012e40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e44:	89 d0                	mov    eax,edx
c0012e46:	83 c2 04             	add    edx,0x4
c0012e49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e4d:	ff 30                	push   DWORD PTR [eax]
c0012e4f:	e8 44 ff ff ff       	call   c0012d98 <Dbg::logWriteInt(unsigned int)>
c0012e54:	58                   	pop    eax
c0012e55:	eb d9                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012e5b:	89 d0                	mov    eax,edx
c0012e5d:	83 c2 04             	add    edx,0x4
c0012e60:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012e63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012e67:	50                   	push   eax
c0012e68:	e8 f7 fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012e6d:	58                   	pop    eax
c0012e6e:	eb c0                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e70:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e74:	89 c8                	mov    eax,ecx
c0012e76:	83 c1 04             	add    ecx,0x4
c0012e79:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e7d:	ff 30                	push   DWORD PTR [eax]
c0012e7f:	e8 14 ff ff ff       	call   c0012d98 <Dbg::logWriteInt(unsigned int)>
c0012e84:	5f                   	pop    edi
c0012e85:	eb a9                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012e87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e8b:	89 c8                	mov    eax,ecx
c0012e8d:	83 c1 04             	add    ecx,0x4
c0012e90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e94:	6a 10                	push   0x10
c0012e96:	ff 30                	push   DWORD PTR [eax]
c0012e98:	e8 18 ff ff ff       	call   c0012db5 <Dbg::logWriteIntBase(unsigned int, int)>
c0012e9d:	59                   	pop    ecx
c0012e9e:	5f                   	pop    edi
c0012e9f:	eb 8f                	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ea1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ea5:	89 d0                	mov    eax,edx
c0012ea7:	83 c2 08             	add    edx,0x8
c0012eaa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eae:	6a 10                	push   0x10
c0012eb0:	ff 30                	push   DWORD PTR [eax]
c0012eb2:	e8 fe fe ff ff       	call   c0012db5 <Dbg::logWriteIntBase(unsigned int, int)>
c0012eb7:	58                   	pop    eax
c0012eb8:	5a                   	pop    edx
c0012eb9:	e9 72 ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ebe:	6a 25                	push   0x25
c0012ec0:	e8 9f fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012ec5:	58                   	pop    eax
c0012ec6:	e9 65 ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ecb:	6a 25                	push   0x25
c0012ecd:	e8 92 fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012ed2:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ed5:	50                   	push   eax
c0012ed6:	e8 89 fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012edb:	5a                   	pop    edx
c0012edc:	59                   	pop    ecx
c0012edd:	e9 4e ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee2:	50                   	push   eax
c0012ee3:	89 eb                	mov    ebx,ebp
c0012ee5:	e8 7a fe ff ff       	call   c0012d64 <Dbg::logc(char)>
c0012eea:	89 fd                	mov    ebp,edi
c0012eec:	58                   	pop    eax
c0012eed:	e9 3e ff ff ff       	jmp    c0012e30 <Dbg::kprintf(char const*, ...)+0x5c>

c0012ef2 <File::read(unsigned long long, void*, int*)>:
c0012ef2:	53                   	push   ebx
c0012ef3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ef7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012efb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f02:	3c 19                	cmp    al,0x19
c0012f04:	77 35                	ja     c0012f3b <File::read(unsigned long long, void*, int*)+0x49>
c0012f06:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0012f0d:	85 c0                	test   eax,eax
c0012f0f:	74 2a                	je     c0012f3b <File::read(unsigned long long, void*, int*)+0x49>
c0012f11:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f17:	85 c0                	test   eax,eax
c0012f19:	74 20                	je     c0012f3b <File::read(unsigned long long, void*, int*)+0x49>
c0012f1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f1f:	74 21                	je     c0012f42 <File::read(unsigned long long, void*, int*)+0x50>
c0012f21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f23:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f27:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f35:	5b                   	pop    ebx
c0012f36:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012f39:	ff e0                	jmp    eax
c0012f3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f40:	eb 05                	jmp    c0012f47 <File::read(unsigned long long, void*, int*)+0x55>
c0012f42:	b8 05 00 00 00       	mov    eax,0x5
c0012f47:	5b                   	pop    ebx
c0012f48:	c3                   	ret    
c0012f49:	90                   	nop

c0012f4a <File::write(unsigned long long, void*, int*)>:
c0012f4a:	53                   	push   ebx
c0012f4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f53:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f5a:	3c 19                	cmp    al,0x19
c0012f5c:	77 35                	ja     c0012f93 <File::write(unsigned long long, void*, int*)+0x49>
c0012f5e:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0012f65:	85 c0                	test   eax,eax
c0012f67:	74 2a                	je     c0012f93 <File::write(unsigned long long, void*, int*)+0x49>
c0012f69:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f6f:	85 c0                	test   eax,eax
c0012f71:	74 20                	je     c0012f93 <File::write(unsigned long long, void*, int*)+0x49>
c0012f73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f77:	74 21                	je     c0012f9a <File::write(unsigned long long, void*, int*)+0x50>
c0012f79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f7f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012f8d:	5b                   	pop    ebx
c0012f8e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012f91:	ff e0                	jmp    eax
c0012f93:	b8 0b 00 00 00       	mov    eax,0xb
c0012f98:	eb 05                	jmp    c0012f9f <File::write(unsigned long long, void*, int*)+0x55>
c0012f9a:	b8 05 00 00 00       	mov    eax,0x5
c0012f9f:	5b                   	pop    ebx
c0012fa0:	c3                   	ret    
c0012fa1:	90                   	nop

c0012fa2 <Directory::read(unsigned long long, void*, int*)>:
c0012fa2:	53                   	push   ebx
c0012fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fa7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fab:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fb2:	3c 19                	cmp    al,0x19
c0012fb4:	77 35                	ja     c0012feb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fb6:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0012fbd:	85 c0                	test   eax,eax
c0012fbf:	74 2a                	je     c0012feb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fc1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fc7:	85 c0                	test   eax,eax
c0012fc9:	74 20                	je     c0012feb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012fcb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fcf:	74 21                	je     c0012ff2 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012fd1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fd3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fd7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fdd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fe1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fe5:	5b                   	pop    ebx
c0012fe6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012fe9:	ff e0                	jmp    eax
c0012feb:	b8 0b 00 00 00       	mov    eax,0xb
c0012ff0:	eb 05                	jmp    c0012ff7 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012ff2:	b8 05 00 00 00       	mov    eax,0x5
c0012ff7:	5b                   	pop    ebx
c0012ff8:	c3                   	ret    
c0012ff9:	90                   	nop

c0012ffa <Directory::write(unsigned long long, void*, int*)>:
c0012ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ffe:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013005:	b8 0b 00 00 00       	mov    eax,0xb
c001300a:	80 fa 19             	cmp    dl,0x19
c001300d:	77 18                	ja     c0013027 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001300f:	8b 14 95 a0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1760]
c0013016:	85 d2                	test   edx,edx
c0013018:	74 0d                	je     c0013027 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001301a:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013021:	19 c0                	sbb    eax,eax
c0013023:	83 e0 0a             	and    eax,0xa
c0013026:	40                   	inc    eax
c0013027:	c3                   	ret    

c0013028 <File::isAtty()>:
c0013028:	31 c0                	xor    eax,eax
c001302a:	c3                   	ret    
c001302b:	90                   	nop

c001302c <Directory::isAtty()>:
c001302c:	31 c0                	xor    eax,eax
c001302e:	c3                   	ret    
c001302f:	90                   	nop

c0013030 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0013030:	b8 0a 00 00 00       	mov    eax,0xa
c0013035:	c3                   	ret    

c0013036 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013036:	b8 0a 00 00 00       	mov    eax,0xa
c001303b:	c3                   	ret    

c001303c <File::~File()>:
c001303c:	83 ec 0c             	sub    esp,0xc
c001303f:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c0013044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013048:	89 10                	mov    DWORD PTR [eax],edx
c001304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001304e:	83 ec 0c             	sub    esp,0xc
c0013051:	50                   	push   eax
c0013052:	e8 bf e8 ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	90                   	nop
c001305b:	83 c4 0c             	add    esp,0xc
c001305e:	c3                   	ret    
c001305f:	90                   	nop

c0013060 <File::~File()>:
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	83 ec 0c             	sub    esp,0xc
c0013066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001306a:	e8 cd ff ff ff       	call   c001303c <File::~File()>
c001306f:	83 c4 10             	add    esp,0x10
c0013072:	83 ec 08             	sub    esp,0x8
c0013075:	68 14 01 00 00       	push   0x114
c001307a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001307e:	e8 71 fc ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013083:	83 c4 10             	add    esp,0x10
c0013086:	83 c4 0c             	add    esp,0xc
c0013089:	c3                   	ret    

c001308a <Directory::~Directory()>:
c001308a:	83 ec 0c             	sub    esp,0xc
c001308d:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c0013092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013096:	89 10                	mov    DWORD PTR [eax],edx
c0013098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	50                   	push   eax
c00130a0:	e8 71 e8 ff ff       	call   c0011916 <UnixFile::~UnixFile()>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	90                   	nop
c00130a9:	83 c4 0c             	add    esp,0xc
c00130ac:	c3                   	ret    
c00130ad:	90                   	nop

c00130ae <Directory::~Directory()>:
c00130ae:	83 ec 0c             	sub    esp,0xc
c00130b1:	83 ec 0c             	sub    esp,0xc
c00130b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b8:	e8 cd ff ff ff       	call   c001308a <Directory::~Directory()>
c00130bd:	83 c4 10             	add    esp,0x10
c00130c0:	83 ec 08             	sub    esp,0x8
c00130c3:	68 14 01 00 00       	push   0x114
c00130c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130cc:	e8 23 fc ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	83 c4 0c             	add    esp,0xc
c00130d7:	c3                   	ret    

c00130d8 <Filesystem::Filesystem()>:
c00130d8:	ba fc a8 02 c0       	mov    edx,0xc002a8fc
c00130dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130e1:	89 10                	mov    DWORD PTR [eax],edx
c00130e3:	8b 15 10 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e410
c00130e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00130f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130f4:	a3 10 e4 02 c0       	mov    ds:0xc002e410,eax
c00130f9:	90                   	nop
c00130fa:	c3                   	ret    
c00130fb:	90                   	nop

c00130fc <Filesystem::~Filesystem()>:
c00130fc:	ba fc a8 02 c0       	mov    edx,0xc002a8fc
c0013101:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013105:	89 10                	mov    DWORD PTR [eax],edx
c0013107:	90                   	nop
c0013108:	c3                   	ret    
c0013109:	90                   	nop

c001310a <Filesystem::~Filesystem()>:
c001310a:	83 ec 0c             	sub    esp,0xc
c001310d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013111:	e8 e6 ff ff ff       	call   c00130fc <Filesystem::~Filesystem()>
c0013116:	83 c4 04             	add    esp,0x4
c0013119:	83 ec 08             	sub    esp,0x8
c001311c:	6a 08                	push   0x8
c001311e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013122:	e8 cd fb ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013127:	83 c4 10             	add    esp,0x10
c001312a:	83 c4 0c             	add    esp,0xc
c001312d:	c3                   	ret    

c001312e <Fs::getcwd(Process*, char*, int)>:
c001312e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013132:	31 c0                	xor    eax,eax
c0013134:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013137:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001313b:	7d 15                	jge    c0013152 <Fs::getcwd(Process*, char*, int)+0x24>
c001313d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013141:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013148:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001314b:	84 c9                	test   cl,cl
c001314d:	74 06                	je     c0013155 <Fs::getcwd(Process*, char*, int)+0x27>
c001314f:	40                   	inc    eax
c0013150:	eb e2                	jmp    c0013134 <Fs::getcwd(Process*, char*, int)+0x6>
c0013152:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013155:	31 c0                	xor    eax,eax
c0013157:	c3                   	ret    

c0013158 <Fs::initVFS()>:
c0013158:	83 ec 18             	sub    esp,0x18
c001315b:	6a 08                	push   0x8
c001315d:	e8 de c6 ff ff       	call   c000f840 <malloc>
c0013162:	89 04 24             	mov    DWORD PTR [esp],eax
c0013165:	e8 ae dc 00 00       	call   c0020e18 <FAT::FAT()>
c001316a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013171:	e8 ca c6 ff ff       	call   c000f840 <malloc>
c0013176:	89 04 24             	mov    DWORD PTR [esp],eax
c0013179:	e8 f2 ee 00 00       	call   c0022070 <ISO9660::ISO9660()>
c001317e:	83 c4 1c             	add    esp,0x1c
c0013181:	c3                   	ret    

c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013182:	55                   	push   ebp
c0013183:	57                   	push   edi
c0013184:	56                   	push   esi
c0013185:	53                   	push   ebx
c0013186:	81 ec 10 04 00 00    	sub    esp,0x410
c001318c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013193:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001319a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00131a1:	68 00 04 00 00       	push   0x400
c00131a6:	6a 00                	push   0x0
c00131a8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00131ac:	56                   	push   esi
c00131ad:	e8 c6 d5 fe ff       	call   c0000778 <memset>
c00131b2:	83 c4 10             	add    esp,0x10
c00131b5:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00131b9:	75 0b                	jne    c00131c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00131bb:	50                   	push   eax
c00131bc:	50                   	push   eax
c00131bd:	57                   	push   edi
c00131be:	56                   	push   esi
c00131bf:	e8 70 d6 fe ff       	call   c0000834 <strcpy>
c00131c4:	eb 41                	jmp    c0013207 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00131c6:	8a 07                	mov    al,BYTE PTR [edi]
c00131c8:	3c 5c                	cmp    al,0x5c
c00131ca:	74 04                	je     c00131d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00131cc:	3c 2f                	cmp    al,0x2f
c00131ce:	75 18                	jne    c00131e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00131d0:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00131d3:	3c 60                	cmp    al,0x60
c00131d5:	7e 03                	jle    c00131da <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00131d7:	83 e8 20             	sub    eax,0x20
c00131da:	88 04 24             	mov    BYTE PTR [esp],al
c00131dd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00131e4:	50                   	push   eax
c00131e5:	50                   	push   eax
c00131e6:	eb 18                	jmp    c0013200 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00131e8:	50                   	push   eax
c00131e9:	50                   	push   eax
c00131ea:	55                   	push   ebp
c00131eb:	56                   	push   esi
c00131ec:	e8 43 d6 fe ff       	call   c0000834 <strcpy>
c00131f1:	5a                   	pop    edx
c00131f2:	59                   	pop    ecx
c00131f3:	68 68 c0 02 c0       	push   0xc002c068
c00131f8:	56                   	push   esi
c00131f9:	e8 76 d7 fe ff       	call   c0000974 <strcat>
c00131fe:	5d                   	pop    ebp
c00131ff:	58                   	pop    eax
c0013200:	57                   	push   edi
c0013201:	56                   	push   esi
c0013202:	e8 6d d7 fe ff       	call   c0000974 <strcat>
c0013207:	83 c4 10             	add    esp,0x10
c001320a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001320d:	3c 60                	cmp    al,0x60
c001320f:	7e 03                	jle    c0013214 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013211:	83 e8 20             	sub    eax,0x20
c0013214:	88 04 24             	mov    BYTE PTR [esp],al
c0013217:	88 03                	mov    BYTE PTR [ebx],al
c0013219:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013220:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013226:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001322a:	bf 03 00 00 00       	mov    edi,0x3
c001322f:	b8 03 00 00 00       	mov    eax,0x3
c0013234:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013237:	84 d2                	test   dl,dl
c0013239:	0f 84 91 00 00 00    	je     c00132d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001323f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013242:	80 fa 5c             	cmp    dl,0x5c
c0013245:	74 05                	je     c001324c <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013247:	80 fa 2f             	cmp    dl,0x2f
c001324a:	75 12                	jne    c001325e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c001324c:	89 c5                	mov    ebp,eax
c001324e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013253:	74 09                	je     c001325e <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013255:	40                   	inc    eax
c0013256:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001325a:	89 cf                	mov    edi,ecx
c001325c:	eb d6                	jmp    c0013234 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001325e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013263:	75 5b                	jne    c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013265:	80 fa 2e             	cmp    dl,0x2e
c0013268:	75 56                	jne    c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001326a:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001326e:	74 19                	je     c0013289 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013270:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013275:	74 53                	je     c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013277:	89 f9                	mov    ecx,edi
c0013279:	41                   	inc    ecx
c001327a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001327d:	80 fa 2f             	cmp    dl,0x2f
c0013280:	74 f7                	je     c0013279 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013282:	80 fa 5c             	cmp    dl,0x5c
c0013285:	74 f2                	je     c0013279 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013287:	eb d1                	jmp    c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013289:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001328e:	74 3a                	je     c00132ca <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013290:	83 f8 03             	cmp    eax,0x3
c0013293:	74 c5                	je     c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013295:	41                   	inc    ecx
c0013296:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013299:	80 fa 2f             	cmp    dl,0x2f
c001329c:	74 f7                	je     c0013295 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001329e:	80 fa 5c             	cmp    dl,0x5c
c00132a1:	74 f2                	je     c0013295 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00132a3:	48                   	dec    eax
c00132a4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132a8:	75 06                	jne    c00132b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132aa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ae:	eb f3                	jmp    c00132a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00132b0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00132b4:	74 07                	je     c00132bd <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00132b6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132ba:	48                   	dec    eax
c00132bb:	eb f3                	jmp    c00132b0 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00132bd:	40                   	inc    eax
c00132be:	eb 9a                	jmp    c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c0:	80 fa 2f             	cmp    dl,0x2f
c00132c3:	74 95                	je     c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132c5:	80 fa 5c             	cmp    dl,0x5c
c00132c8:	74 90                	je     c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132ca:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00132cd:	40                   	inc    eax
c00132ce:	eb 8a                	jmp    c001325a <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132d0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	53                   	push   ebx
c00132d8:	e8 b7 d4 fe ff       	call   c0000794 <strlen>
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00132e5:	75 26                	jne    c001330d <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00132e7:	83 ec 0c             	sub    esp,0xc
c00132ea:	53                   	push   ebx
c00132eb:	e8 a4 d4 fe ff       	call   c0000794 <strlen>
c00132f0:	83 c4 10             	add    esp,0x10
c00132f3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00132f8:	74 26                	je     c0013320 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	53                   	push   ebx
c00132fe:	e8 91 d4 fe ff       	call   c0000794 <strlen>
c0013303:	83 c4 10             	add    esp,0x10
c0013306:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001330b:	eb c7                	jmp    c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001330d:	83 ec 0c             	sub    esp,0xc
c0013310:	53                   	push   ebx
c0013311:	e8 7e d4 fe ff       	call   c0000794 <strlen>
c0013316:	83 c4 10             	add    esp,0x10
c0013319:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001331e:	74 c7                	je     c00132e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013320:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013326:	5b                   	pop    ebx
c0013327:	5e                   	pop    esi
c0013328:	5f                   	pop    edi
c0013329:	5d                   	pop    ebp
c001332a:	c3                   	ret    
c001332b:	90                   	nop

c001332c <File::File(char const*, Process*)>:
c001332c:	83 ec 0c             	sub    esp,0xc
c001332f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013333:	83 ec 08             	sub    esp,0x8
c0013336:	6a 00                	push   0x0
c0013338:	50                   	push   eax
c0013339:	e8 f6 e3 ff ff       	call   c0011734 <UnixFile::UnixFile(int)>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	ba 60 a9 02 c0       	mov    edx,0xc002a960
c0013346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001334a:	89 10                	mov    DWORD PTR [eax],edx
c001334c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013350:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335a:	83 c0 0d             	add    eax,0xd
c001335d:	83 ec 04             	sub    esp,0x4
c0013360:	52                   	push   edx
c0013361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013365:	50                   	push   eax
c0013366:	e8 17 fe ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c001336b:	83 c4 10             	add    esp,0x10
c001336e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013372:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013375:	8d 50 bf             	lea    edx,[eax-0x41]
c0013378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013386:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001338a:	90                   	nop
c001338b:	83 c4 0c             	add    esp,0xc
c001338e:	c3                   	ret    
c001338f:	90                   	nop

c0013390 <File::open(FileOpenMode)>:
c0013390:	53                   	push   ebx
c0013391:	b8 0b 00 00 00       	mov    eax,0xb
c0013396:	83 ec 08             	sub    esp,0x8
c0013399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001339d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00133a4:	80 fa 19             	cmp    dl,0x19
c00133a7:	77 40                	ja     c00133e9 <File::open(FileOpenMode)+0x59>
c00133a9:	8b 14 95 a0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1760]
c00133b0:	85 d2                	test   edx,edx
c00133b2:	74 35                	je     c00133e9 <File::open(FileOpenMode)+0x59>
c00133b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00133ba:	85 d2                	test   edx,edx
c00133bc:	74 2b                	je     c00133e9 <File::open(FileOpenMode)+0x59>
c00133be:	b8 06 00 00 00       	mov    eax,0x6
c00133c3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00133c7:	75 20                	jne    c00133e9 <File::open(FileOpenMode)+0x59>
c00133c9:	8b 02                	mov    eax,DWORD PTR [edx]
c00133cb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00133d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133d5:	51                   	push   ecx
c00133d6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00133d9:	51                   	push   ecx
c00133da:	52                   	push   edx
c00133db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	85 c0                	test   eax,eax
c00133e3:	75 04                	jne    c00133e9 <File::open(FileOpenMode)+0x59>
c00133e5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00133e9:	83 c4 08             	add    esp,0x8
c00133ec:	5b                   	pop    ebx
c00133ed:	c3                   	ret    

c00133ee <File::close()>:
c00133ee:	53                   	push   ebx
c00133ef:	b8 0b 00 00 00       	mov    eax,0xb
c00133f4:	83 ec 08             	sub    esp,0x8
c00133f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133fb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013402:	80 fa 19             	cmp    dl,0x19
c0013405:	77 41                	ja     c0013448 <File::close()+0x5a>
c0013407:	8b 1c 95 a0 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1760]
c001340e:	85 db                	test   ebx,ebx
c0013410:	74 36                	je     c0013448 <File::close()+0x5a>
c0013412:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013419:	74 2d                	je     c0013448 <File::close()+0x5a>
c001341b:	b8 05 00 00 00       	mov    eax,0x5
c0013420:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013424:	74 22                	je     c0013448 <File::close()+0x5a>
c0013426:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001342a:	8b 04 95 a0 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1760]
c0013431:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013437:	53                   	push   ebx
c0013438:	53                   	push   ebx
c0013439:	8b 10                	mov    edx,DWORD PTR [eax]
c001343b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013441:	50                   	push   eax
c0013442:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013445:	83 c4 10             	add    esp,0x10
c0013448:	83 c4 08             	add    esp,0x8
c001344b:	5b                   	pop    ebx
c001344c:	c3                   	ret    
c001344d:	90                   	nop

c001344e <File::seek(unsigned long long)>:
c001344e:	56                   	push   esi
c001344f:	53                   	push   ebx
c0013450:	b8 0b 00 00 00       	mov    eax,0xb
c0013455:	51                   	push   ecx
c0013456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001345a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001345e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013465:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013469:	80 fa 19             	cmp    dl,0x19
c001346c:	77 31                	ja     c001349f <File::seek(unsigned long long)+0x51>
c001346e:	8b 14 95 a0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1760]
c0013475:	85 d2                	test   edx,edx
c0013477:	74 26                	je     c001349f <File::seek(unsigned long long)+0x51>
c0013479:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001347f:	85 d2                	test   edx,edx
c0013481:	74 1c                	je     c001349f <File::seek(unsigned long long)+0x51>
c0013483:	b8 05 00 00 00       	mov    eax,0x5
c0013488:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001348c:	74 11                	je     c001349f <File::seek(unsigned long long)+0x51>
c001348e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013490:	53                   	push   ebx
c0013491:	51                   	push   ecx
c0013492:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013498:	52                   	push   edx
c0013499:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001349c:	83 c4 10             	add    esp,0x10
c001349f:	5a                   	pop    edx
c00134a0:	5b                   	pop    ebx
c00134a1:	5e                   	pop    esi
c00134a2:	c3                   	ret    
c00134a3:	90                   	nop

c00134a4 <File::tell(unsigned long long*)>:
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	b8 0b 00 00 00       	mov    eax,0xb
c00134ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134b0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134b7:	80 fa 19             	cmp    dl,0x19
c00134ba:	77 34                	ja     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134bc:	8b 14 95 a0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1760]
c00134c3:	85 d2                	test   edx,edx
c00134c5:	74 29                	je     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134c7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134cd:	85 d2                	test   edx,edx
c00134cf:	74 1f                	je     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134d1:	b8 05 00 00 00       	mov    eax,0x5
c00134d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134da:	74 14                	je     c00134f0 <File::tell(unsigned long long*)+0x4c>
c00134dc:	50                   	push   eax
c00134dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00134df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134e9:	52                   	push   edx
c00134ea:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	83 c4 0c             	add    esp,0xc
c00134f3:	c3                   	ret    

c00134f4 <File::rewind()>:
c00134f4:	83 ec 10             	sub    esp,0x10
c00134f7:	6a 00                	push   0x0
c00134f9:	6a 00                	push   0x0
c00134fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ff:	e8 4a ff ff ff       	call   c001344e <File::seek(unsigned long long)>
c0013504:	83 c4 1c             	add    esp,0x1c
c0013507:	c3                   	ret    

c0013508 <File::unlink()>:
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	b8 0b 00 00 00       	mov    eax,0xb
c0013510:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013514:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001351b:	80 f9 19             	cmp    cl,0x19
c001351e:	77 2f                	ja     c001354f <File::unlink()+0x47>
c0013520:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0013527:	85 c9                	test   ecx,ecx
c0013529:	74 24                	je     c001354f <File::unlink()+0x47>
c001352b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013531:	85 c9                	test   ecx,ecx
c0013533:	74 1a                	je     c001354f <File::unlink()+0x47>
c0013535:	b8 06 00 00 00       	mov    eax,0x6
c001353a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001353e:	75 0f                	jne    c001354f <File::unlink()+0x47>
c0013540:	83 c2 0d             	add    edx,0xd
c0013543:	50                   	push   eax
c0013544:	50                   	push   eax
c0013545:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013547:	52                   	push   edx
c0013548:	51                   	push   ecx
c0013549:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001354c:	83 c4 10             	add    esp,0x10
c001354f:	83 c4 0c             	add    esp,0xc
c0013552:	c3                   	ret    
c0013553:	90                   	nop

c0013554 <File::rename(char const*)>:
c0013554:	83 ec 0c             	sub    esp,0xc
c0013557:	b8 0b 00 00 00       	mov    eax,0xb
c001355c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013560:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013567:	80 f9 19             	cmp    cl,0x19
c001356a:	77 32                	ja     c001359e <File::rename(char const*)+0x4a>
c001356c:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0013573:	85 c9                	test   ecx,ecx
c0013575:	74 27                	je     c001359e <File::rename(char const*)+0x4a>
c0013577:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001357d:	85 c9                	test   ecx,ecx
c001357f:	74 1d                	je     c001359e <File::rename(char const*)+0x4a>
c0013581:	b8 06 00 00 00       	mov    eax,0x6
c0013586:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001358a:	75 12                	jne    c001359e <File::rename(char const*)+0x4a>
c001358c:	83 c2 0d             	add    edx,0xd
c001358f:	50                   	push   eax
c0013590:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013596:	52                   	push   edx
c0013597:	51                   	push   ecx
c0013598:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001359b:	83 c4 10             	add    esp,0x10
c001359e:	83 c4 0c             	add    esp,0xc
c00135a1:	c3                   	ret    

c00135a2 <File::chfatattr(unsigned char, unsigned char)>:
c00135a2:	57                   	push   edi
c00135a3:	b8 0b 00 00 00       	mov    eax,0xb
c00135a8:	56                   	push   esi
c00135a9:	53                   	push   ebx
c00135aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00135bd:	80 f9 19             	cmp    cl,0x19
c00135c0:	77 37                	ja     c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135c2:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c00135c9:	85 c9                	test   ecx,ecx
c00135cb:	74 2c                	je     c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135cd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135d3:	85 c9                	test   ecx,ecx
c00135d5:	74 22                	je     c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135d7:	b8 06 00 00 00       	mov    eax,0x6
c00135dc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135e0:	75 17                	jne    c00135f9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00135e2:	8b 39                	mov    edi,DWORD PTR [ecx]
c00135e4:	89 f0                	mov    eax,esi
c00135e6:	83 c2 0d             	add    edx,0xd
c00135e9:	0f b6 f0             	movzx  esi,al
c00135ec:	0f b6 db             	movzx  ebx,bl
c00135ef:	56                   	push   esi
c00135f0:	53                   	push   ebx
c00135f1:	52                   	push   edx
c00135f2:	51                   	push   ecx
c00135f3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00135f6:	83 c4 10             	add    esp,0x10
c00135f9:	5b                   	pop    ebx
c00135fa:	5e                   	pop    esi
c00135fb:	5f                   	pop    edi
c00135fc:	c3                   	ret    
c00135fd:	90                   	nop

c00135fe <File::exists()>:
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	31 c0                	xor    eax,eax
c0013603:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013607:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001360e:	80 f9 19             	cmp    cl,0x19
c0013611:	77 24                	ja     c0013637 <File::exists()+0x39>
c0013613:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c001361a:	85 c9                	test   ecx,ecx
c001361c:	74 19                	je     c0013637 <File::exists()+0x39>
c001361e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013624:	85 c9                	test   ecx,ecx
c0013626:	74 0f                	je     c0013637 <File::exists()+0x39>
c0013628:	83 c2 0d             	add    edx,0xd
c001362b:	50                   	push   eax
c001362c:	50                   	push   eax
c001362d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001362f:	52                   	push   edx
c0013630:	51                   	push   ecx
c0013631:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013634:	83 c4 10             	add    esp,0x10
c0013637:	83 c4 0c             	add    esp,0xc
c001363a:	c3                   	ret    
c001363b:	90                   	nop

c001363c <File::stat(unsigned long long*, bool*)>:
c001363c:	56                   	push   esi
c001363d:	53                   	push   ebx
c001363e:	50                   	push   eax
c001363f:	b8 0b 00 00 00       	mov    eax,0xb
c0013644:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013648:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001364c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013653:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013657:	80 f9 19             	cmp    cl,0x19
c001365a:	77 3d                	ja     c0013699 <File::stat(unsigned long long*, bool*)+0x5d>
c001365c:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0013663:	85 c9                	test   ecx,ecx
c0013665:	74 32                	je     c0013699 <File::stat(unsigned long long*, bool*)+0x5d>
c0013667:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001366d:	85 c9                	test   ecx,ecx
c001366f:	74 28                	je     c0013699 <File::stat(unsigned long long*, bool*)+0x5d>
c0013671:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013673:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013677:	74 13                	je     c001368c <File::stat(unsigned long long*, bool*)+0x50>
c0013679:	83 ec 04             	sub    esp,0x4
c001367c:	56                   	push   esi
c001367d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013683:	51                   	push   ecx
c0013684:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013687:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001368a:	eb 0a                	jmp    c0013696 <File::stat(unsigned long long*, bool*)+0x5a>
c001368c:	53                   	push   ebx
c001368d:	83 c2 0d             	add    edx,0xd
c0013690:	56                   	push   esi
c0013691:	52                   	push   edx
c0013692:	51                   	push   ecx
c0013693:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013696:	83 c4 10             	add    esp,0x10
c0013699:	5a                   	pop    edx
c001369a:	5b                   	pop    ebx
c001369b:	5e                   	pop    esi
c001369c:	c3                   	ret    

c001369d <Fs::setcwd(Process*, char*)>:
c001369d:	55                   	push   ebp
c001369e:	57                   	push   edi
c001369f:	56                   	push   esi
c00136a0:	53                   	push   ebx
c00136a1:	81 ec 20 02 00 00    	sub    esp,0x220
c00136a7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00136ae:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00136b4:	57                   	push   edi
c00136b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00136bc:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00136c0:	56                   	push   esi
c00136c1:	e8 bc fa ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c00136c6:	89 34 24             	mov    DWORD PTR [esp],esi
c00136c9:	e8 c6 d0 fe ff       	call   c0000794 <strlen>
c00136ce:	83 c4 10             	add    esp,0x10
c00136d1:	83 f8 02             	cmp    eax,0x2
c00136d4:	77 17                	ja     c00136ed <Fs::setcwd(Process*, char*)+0x50>
c00136d6:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00136db:	83 e8 41             	sub    eax,0x41
c00136de:	83 f8 19             	cmp    eax,0x19
c00136e1:	76 24                	jbe    c0013707 <Fs::setcwd(Process*, char*)+0x6a>
c00136e3:	b8 03 00 00 00       	mov    eax,0x3
c00136e8:	e9 e0 00 00 00       	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c00136ed:	83 ec 0c             	sub    esp,0xc
c00136f0:	56                   	push   esi
c00136f1:	e8 9e d0 fe ff       	call   c0000794 <strlen>
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	83 f8 03             	cmp    eax,0x3
c00136fc:	75 34                	jne    c0013732 <Fs::setcwd(Process*, char*)+0x95>
c00136fe:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013703:	75 2d                	jne    c0013732 <Fs::setcwd(Process*, char*)+0x95>
c0013705:	eb cf                	jmp    c00136d6 <Fs::setcwd(Process*, char*)+0x39>
c0013707:	8b 14 85 a0 e8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1760]
c001370e:	b8 05 00 00 00       	mov    eax,0x5
c0013713:	85 d2                	test   edx,edx
c0013715:	0f 84 b2 00 00 00    	je     c00137cd <Fs::setcwd(Process*, char*)+0x130>
c001371b:	b8 06 00 00 00       	mov    eax,0x6
c0013720:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013727:	0f 85 92 00 00 00    	jne    c00137bf <Fs::setcwd(Process*, char*)+0x122>
c001372d:	e9 9b 00 00 00       	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	68 14 01 00 00       	push   0x114
c001373a:	e8 01 c1 ff ff       	call   c000f840 <malloc>
c001373f:	83 c4 0c             	add    esp,0xc
c0013742:	89 c3                	mov    ebx,eax
c0013744:	55                   	push   ebp
c0013745:	56                   	push   esi
c0013746:	50                   	push   eax
c0013747:	e8 e0 fb ff ff       	call   c001332c <File::File(char const*, Process*)>
c001374c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013751:	83 c4 0c             	add    esp,0xc
c0013754:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013758:	50                   	push   eax
c0013759:	8d 44 24 10          	lea    eax,[esp+0x10]
c001375d:	50                   	push   eax
c001375e:	53                   	push   ebx
c001375f:	e8 d8 fe ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	83 f8 02             	cmp    eax,0x2
c001376a:	74 04                	je     c0013770 <Fs::setcwd(Process*, char*)+0xd3>
c001376c:	85 c0                	test   eax,eax
c001376e:	74 1c                	je     c001378c <Fs::setcwd(Process*, char*)+0xef>
c0013770:	b8 01 00 00 00       	mov    eax,0x1
c0013775:	85 db                	test   ebx,ebx
c0013777:	74 54                	je     c00137cd <Fs::setcwd(Process*, char*)+0x130>
c0013779:	83 ec 0c             	sub    esp,0xc
c001377c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001377e:	53                   	push   ebx
c001377f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013782:	83 c4 10             	add    esp,0x10
c0013785:	b8 01 00 00 00       	mov    eax,0x1
c001378a:	eb 41                	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c001378c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013791:	75 1c                	jne    c00137af <Fs::setcwd(Process*, char*)+0x112>
c0013793:	b8 02 00 00 00       	mov    eax,0x2
c0013798:	85 db                	test   ebx,ebx
c001379a:	74 31                	je     c00137cd <Fs::setcwd(Process*, char*)+0x130>
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137a1:	53                   	push   ebx
c00137a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137a5:	83 c4 10             	add    esp,0x10
c00137a8:	b8 02 00 00 00       	mov    eax,0x2
c00137ad:	eb 1e                	jmp    c00137cd <Fs::setcwd(Process*, char*)+0x130>
c00137af:	85 db                	test   ebx,ebx
c00137b1:	74 0c                	je     c00137bf <Fs::setcwd(Process*, char*)+0x122>
c00137b3:	83 ec 0c             	sub    esp,0xc
c00137b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b8:	53                   	push   ebx
c00137b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	50                   	push   eax
c00137c0:	50                   	push   eax
c00137c1:	56                   	push   esi
c00137c2:	57                   	push   edi
c00137c3:	e8 6c d0 fe ff       	call   c0000834 <strcpy>
c00137c8:	83 c4 10             	add    esp,0x10
c00137cb:	31 c0                	xor    eax,eax
c00137cd:	81 c4 1c 02 00 00    	add    esp,0x21c
c00137d3:	5b                   	pop    ebx
c00137d4:	5e                   	pop    esi
c00137d5:	5f                   	pop    edi
c00137d6:	5d                   	pop    ebp
c00137d7:	c3                   	ret    

c00137d8 <Directory::Directory(char const*, Process*)>:
c00137d8:	83 ec 0c             	sub    esp,0xc
c00137db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137df:	83 ec 08             	sub    esp,0x8
c00137e2:	6a 00                	push   0x0
c00137e4:	50                   	push   eax
c00137e5:	e8 4a df ff ff       	call   c0011734 <UnixFile::UnixFile(int)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	ba 7c a9 02 c0       	mov    edx,0xc002a97c
c00137f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f6:	89 10                	mov    DWORD PTR [eax],edx
c00137f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137fc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013806:	83 c0 0d             	add    eax,0xd
c0013809:	83 ec 04             	sub    esp,0x4
c001380c:	52                   	push   edx
c001380d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013811:	50                   	push   eax
c0013812:	e8 6b f9 ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013817:	83 c4 10             	add    esp,0x10
c001381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013821:	8d 50 bf             	lea    edx,[eax-0x41]
c0013824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013828:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001382e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013832:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013836:	90                   	nop
c0013837:	83 c4 0c             	add    esp,0xc
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <Directory::open()>:
c001383c:	53                   	push   ebx
c001383d:	b8 0b 00 00 00       	mov    eax,0xb
c0013842:	83 ec 08             	sub    esp,0x8
c0013845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013849:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013850:	80 fa 19             	cmp    dl,0x19
c0013853:	77 3d                	ja     c0013892 <Directory::open()+0x56>
c0013855:	8b 14 95 a0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1760]
c001385c:	85 d2                	test   edx,edx
c001385e:	74 32                	je     c0013892 <Directory::open()+0x56>
c0013860:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013866:	85 d2                	test   edx,edx
c0013868:	74 28                	je     c0013892 <Directory::open()+0x56>
c001386a:	b8 06 00 00 00       	mov    eax,0x6
c001386f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013873:	75 1d                	jne    c0013892 <Directory::open()+0x56>
c0013875:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001387b:	50                   	push   eax
c001387c:	8b 02                	mov    eax,DWORD PTR [edx]
c001387e:	51                   	push   ecx
c001387f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013882:	51                   	push   ecx
c0013883:	52                   	push   edx
c0013884:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013887:	83 c4 10             	add    esp,0x10
c001388a:	85 c0                	test   eax,eax
c001388c:	75 04                	jne    c0013892 <Directory::open()+0x56>
c001388e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013892:	83 c4 08             	add    esp,0x8
c0013895:	5b                   	pop    ebx
c0013896:	c3                   	ret    
c0013897:	90                   	nop

c0013898 <Directory::close()>:
c0013898:	53                   	push   ebx
c0013899:	b8 0b 00 00 00       	mov    eax,0xb
c001389e:	83 ec 08             	sub    esp,0x8
c00138a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00138a5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00138ac:	80 fa 19             	cmp    dl,0x19
c00138af:	77 41                	ja     c00138f2 <Directory::close()+0x5a>
c00138b1:	8b 1c 95 a0 e8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd1760]
c00138b8:	85 db                	test   ebx,ebx
c00138ba:	74 36                	je     c00138f2 <Directory::close()+0x5a>
c00138bc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00138c3:	74 2d                	je     c00138f2 <Directory::close()+0x5a>
c00138c5:	b8 05 00 00 00       	mov    eax,0x5
c00138ca:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00138ce:	74 22                	je     c00138f2 <Directory::close()+0x5a>
c00138d0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00138d4:	8b 04 95 a0 e8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1760]
c00138db:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00138e1:	53                   	push   ebx
c00138e2:	53                   	push   ebx
c00138e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00138e5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00138eb:	50                   	push   eax
c00138ec:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	83 c4 08             	add    esp,0x8
c00138f5:	5b                   	pop    ebx
c00138f6:	c3                   	ret    
c00138f7:	90                   	nop

c00138f8 <Directory::unlink()>:
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	b8 0b 00 00 00       	mov    eax,0xb
c0013900:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013904:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001390b:	80 f9 19             	cmp    cl,0x19
c001390e:	77 2f                	ja     c001393f <Directory::unlink()+0x47>
c0013910:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0013917:	85 c9                	test   ecx,ecx
c0013919:	74 24                	je     c001393f <Directory::unlink()+0x47>
c001391b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013921:	85 c9                	test   ecx,ecx
c0013923:	74 1a                	je     c001393f <Directory::unlink()+0x47>
c0013925:	b8 06 00 00 00       	mov    eax,0x6
c001392a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001392e:	75 0f                	jne    c001393f <Directory::unlink()+0x47>
c0013930:	83 c2 0d             	add    edx,0xd
c0013933:	50                   	push   eax
c0013934:	50                   	push   eax
c0013935:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013937:	52                   	push   edx
c0013938:	51                   	push   ecx
c0013939:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001393c:	83 c4 10             	add    esp,0x10
c001393f:	83 c4 0c             	add    esp,0xc
c0013942:	c3                   	ret    
c0013943:	90                   	nop

c0013944 <Directory::rename(char const*)>:
c0013944:	83 ec 0c             	sub    esp,0xc
c0013947:	b8 0b 00 00 00       	mov    eax,0xb
c001394c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013950:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013957:	80 f9 19             	cmp    cl,0x19
c001395a:	77 32                	ja     c001398e <Directory::rename(char const*)+0x4a>
c001395c:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0013963:	85 c9                	test   ecx,ecx
c0013965:	74 27                	je     c001398e <Directory::rename(char const*)+0x4a>
c0013967:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001396d:	85 c9                	test   ecx,ecx
c001396f:	74 1d                	je     c001398e <Directory::rename(char const*)+0x4a>
c0013971:	b8 06 00 00 00       	mov    eax,0x6
c0013976:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001397a:	75 12                	jne    c001398e <Directory::rename(char const*)+0x4a>
c001397c:	83 c2 0d             	add    edx,0xd
c001397f:	50                   	push   eax
c0013980:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013982:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013986:	52                   	push   edx
c0013987:	51                   	push   ecx
c0013988:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001398b:	83 c4 10             	add    esp,0x10
c001398e:	83 c4 0c             	add    esp,0xc
c0013991:	c3                   	ret    

c0013992 <Directory::exists()>:
c0013992:	83 ec 0c             	sub    esp,0xc
c0013995:	31 c0                	xor    eax,eax
c0013997:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001399b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139a2:	80 f9 19             	cmp    cl,0x19
c00139a5:	77 24                	ja     c00139cb <Directory::exists()+0x39>
c00139a7:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c00139ae:	85 c9                	test   ecx,ecx
c00139b0:	74 19                	je     c00139cb <Directory::exists()+0x39>
c00139b2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139b8:	85 c9                	test   ecx,ecx
c00139ba:	74 0f                	je     c00139cb <Directory::exists()+0x39>
c00139bc:	83 c2 0d             	add    edx,0xd
c00139bf:	50                   	push   eax
c00139c0:	50                   	push   eax
c00139c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139c3:	52                   	push   edx
c00139c4:	51                   	push   ecx
c00139c5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00139c8:	83 c4 10             	add    esp,0x10
c00139cb:	83 c4 0c             	add    esp,0xc
c00139ce:	c3                   	ret    
c00139cf:	90                   	nop

c00139d0 <Directory::read(dirent*)>:
c00139d0:	83 ec 1c             	sub    esp,0x1c
c00139d3:	b8 0b 00 00 00       	mov    eax,0xb
c00139d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00139dc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139e3:	80 fa 19             	cmp    dl,0x19
c00139e6:	77 30                	ja     c0013a18 <Directory::read(dirent*)+0x48>
c00139e8:	8b 14 95 a0 e8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1760]
c00139ef:	85 d2                	test   edx,edx
c00139f1:	74 25                	je     c0013a18 <Directory::read(dirent*)+0x48>
c00139f3:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00139fa:	74 1c                	je     c0013a18 <Directory::read(dirent*)+0x48>
c00139fc:	83 ec 0c             	sub    esp,0xc
c00139ff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a01:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a05:	52                   	push   edx
c0013a06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a0a:	6a 00                	push   0x0
c0013a0c:	68 10 01 00 00       	push   0x110
c0013a11:	51                   	push   ecx
c0013a12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a15:	83 c4 20             	add    esp,0x20
c0013a18:	83 c4 1c             	add    esp,0x1c
c0013a1b:	c3                   	ret    

c0013a1c <Directory::create()>:
c0013a1c:	83 ec 0c             	sub    esp,0xc
c0013a1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a2f:	80 f9 19             	cmp    cl,0x19
c0013a32:	77 2f                	ja     c0013a63 <Directory::create()+0x47>
c0013a34:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0013a3b:	85 c9                	test   ecx,ecx
c0013a3d:	74 24                	je     c0013a63 <Directory::create()+0x47>
c0013a3f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a45:	85 c9                	test   ecx,ecx
c0013a47:	74 1a                	je     c0013a63 <Directory::create()+0x47>
c0013a49:	b8 06 00 00 00       	mov    eax,0x6
c0013a4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a52:	75 0f                	jne    c0013a63 <Directory::create()+0x47>
c0013a54:	83 c2 0d             	add    edx,0xd
c0013a57:	50                   	push   eax
c0013a58:	50                   	push   eax
c0013a59:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a5b:	52                   	push   edx
c0013a5c:	51                   	push   ecx
c0013a5d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	83 c4 0c             	add    esp,0xc
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013a68:	b8 0a 00 00 00       	mov    eax,0xa
c0013a6d:	c3                   	ret    

c0013a6e <Bus::Bus(char const*)>:
c0013a6e:	83 ec 0c             	sub    esp,0xc
c0013a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a75:	83 ec 08             	sub    esp,0x8
c0013a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a7c:	50                   	push   eax
c0013a7d:	e8 68 09 00 00       	call   c00143ea <Device::Device(char const*)>
c0013a82:	83 c4 10             	add    esp,0x10
c0013a85:	ba 98 a9 02 c0       	mov    edx,0xc002a998
c0013a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8e:	89 10                	mov    DWORD PTR [eax],edx
c0013a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a94:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013a9e:	90                   	nop
c0013a9f:	83 c4 0c             	add    esp,0xc
c0013aa2:	c3                   	ret    
c0013aa3:	90                   	nop

c0013aa4 <Bus::~Bus()>:
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	ba 98 a9 02 c0       	mov    edx,0xc002a998
c0013aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab0:	89 10                	mov    DWORD PTR [eax],edx
c0013ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab6:	83 ec 0c             	sub    esp,0xc
c0013ab9:	50                   	push   eax
c0013aba:	e8 0d 06 00 00       	call   c00140cc <Device::~Device()>
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	90                   	nop
c0013ac3:	83 c4 0c             	add    esp,0xc
c0013ac6:	c3                   	ret    
c0013ac7:	90                   	nop

c0013ac8 <Bus::~Bus()>:
c0013ac8:	83 ec 0c             	sub    esp,0xc
c0013acb:	83 ec 0c             	sub    esp,0xc
c0013ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ad2:	e8 cd ff ff ff       	call   c0013aa4 <Bus::~Bus()>
c0013ad7:	83 c4 10             	add    esp,0x10
c0013ada:	83 ec 08             	sub    esp,0x8
c0013add:	68 58 01 00 00       	push   0x158
c0013ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ae6:	e8 09 f2 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013aeb:	83 c4 10             	add    esp,0x10
c0013aee:	83 c4 0c             	add    esp,0xc
c0013af1:	c3                   	ret    

c0013af2 <Buzzer::Buzzer(char const*)>:
c0013af2:	83 ec 0c             	sub    esp,0xc
c0013af5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013af9:	83 ec 08             	sub    esp,0x8
c0013afc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b00:	50                   	push   eax
c0013b01:	e8 e4 08 00 00       	call   c00143ea <Device::Device(char const*)>
c0013b06:	83 c4 10             	add    esp,0x10
c0013b09:	ba c4 a9 02 c0       	mov    edx,0xc002a9c4
c0013b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b12:	89 10                	mov    DWORD PTR [eax],edx
c0013b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b18:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b26:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013b30:	90                   	nop
c0013b31:	83 c4 0c             	add    esp,0xc
c0013b34:	c3                   	ret    
c0013b35:	90                   	nop

c0013b36 <Buzzer::~Buzzer()>:
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	ba c4 a9 02 c0       	mov    edx,0xc002a9c4
c0013b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b42:	89 10                	mov    DWORD PTR [eax],edx
c0013b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	50                   	push   eax
c0013b4c:	e8 7b 05 00 00       	call   c00140cc <Device::~Device()>
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	90                   	nop
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Buzzer::~Buzzer()>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b64:	e8 cd ff ff ff       	call   c0013b36 <Buzzer::~Buzzer()>
c0013b69:	83 c4 10             	add    esp,0x10
c0013b6c:	83 ec 08             	sub    esp,0x8
c0013b6f:	68 5c 01 00 00       	push   0x15c
c0013b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b78:	e8 77 f1 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	83 c4 0c             	add    esp,0xc
c0013b83:	c3                   	ret    

c0013b84 <Buzzer::stop()>:
c0013b84:	83 ec 14             	sub    esp,0x14
c0013b87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b8d:	6a 00                	push   0x0
c0013b8f:	50                   	push   eax
c0013b90:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013b93:	83 c4 1c             	add    esp,0x1c
c0013b96:	c3                   	ret    

c0013b97 <beepThread(void*)>:
c0013b97:	53                   	push   ebx
c0013b98:	83 ec 08             	sub    esp,0x8
c0013b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b9f:	e8 d5 a0 00 00       	call   c001dc79 <unlockScheduler()>
c0013ba4:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013ba9:	52                   	push   edx
c0013baa:	52                   	push   edx
c0013bab:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013bb1:	52                   	push   edx
c0013bb2:	50                   	push   eax
c0013bb3:	e8 0e a6 00 00       	call   c001e1c6 <nanoSleep(unsigned long long)>
c0013bb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bbb:	e8 c4 ff ff ff       	call   c0013b84 <Buzzer::stop()>
c0013bc0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013bc8:	83 c4 18             	add    esp,0x18
c0013bcb:	5b                   	pop    ebx
c0013bcc:	e9 3b a5 00 00       	jmp    c001e10c <blockTask(TaskState)>
c0013bd1:	90                   	nop

c0013bd2 <Buzzer::beep(int, int, bool)>:
c0013bd2:	57                   	push   edi
c0013bd3:	56                   	push   esi
c0013bd4:	53                   	push   ebx
c0013bd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bd9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013bdd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013be1:	52                   	push   edx
c0013be2:	52                   	push   edx
c0013be3:	8b 06                	mov    eax,DWORD PTR [esi]
c0013be5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be9:	56                   	push   esi
c0013bea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013bed:	83 c4 10             	add    esp,0x10
c0013bf0:	89 f8                	mov    eax,edi
c0013bf2:	84 c0                	test   al,al
c0013bf4:	74 1f                	je     c0013c15 <Buzzer::beep(int, int, bool)+0x43>
c0013bf6:	50                   	push   eax
c0013bf7:	50                   	push   eax
c0013bf8:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013bfe:	99                   	cdq    
c0013bff:	52                   	push   edx
c0013c00:	50                   	push   eax
c0013c01:	e8 c0 a5 00 00       	call   c001e1c6 <nanoSleep(unsigned long long)>
c0013c06:	83 c4 10             	add    esp,0x10
c0013c09:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c0d:	5b                   	pop    ebx
c0013c0e:	5e                   	pop    esi
c0013c0f:	5f                   	pop    edi
c0013c10:	e9 6f ff ff ff       	jmp    c0013b84 <Buzzer::stop()>
c0013c15:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c1b:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0013c20:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013c28:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013c2c:	c7 44 24 14 97 3b 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013b97
c0013c34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c38:	5b                   	pop    ebx
c0013c39:	5e                   	pop    esi
c0013c3a:	5f                   	pop    edi
c0013c3b:	e9 68 a1 00 00       	jmp    c001dda8 <Process::createThread(void (*)(void*), void*, int)>

c0013c40 <User::loadClockSettings(int)>:
c0013c40:	53                   	push   ebx
c0013c41:	83 ec 14             	sub    esp,0x14
c0013c44:	68 14 01 00 00       	push   0x114
c0013c49:	e8 f2 bb ff ff       	call   c000f840 <malloc>
c0013c4e:	83 c4 0c             	add    esp,0xc
c0013c51:	89 c3                	mov    ebx,eax
c0013c53:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c0013c59:	68 ec a9 02 c0       	push   0xc002a9ec
c0013c5e:	50                   	push   eax
c0013c5f:	e8 c8 f6 ff ff       	call   c001332c <File::File(char const*, Process*)>
c0013c64:	58                   	pop    eax
c0013c65:	5a                   	pop    edx
c0013c66:	6a 01                	push   0x1
c0013c68:	53                   	push   ebx
c0013c69:	e8 22 f7 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c0013c6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c71:	e8 78 f7 ff ff       	call   c00133ee <File::close()>
c0013c76:	83 c4 10             	add    esp,0x10
c0013c79:	85 db                	test   ebx,ebx
c0013c7b:	74 0f                	je     c0013c8c <User::loadClockSettings(int)+0x4c>
c0013c7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c7f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013c83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c86:	83 c4 08             	add    esp,0x8
c0013c89:	5b                   	pop    ebx
c0013c8a:	ff e0                	jmp    eax
c0013c8c:	83 c4 08             	add    esp,0x8
c0013c8f:	5b                   	pop    ebx
c0013c90:	c3                   	ret    
c0013c91:	90                   	nop

c0013c92 <Clock::Clock(char const*)>:
c0013c92:	83 ec 0c             	sub    esp,0xc
c0013c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c99:	83 ec 08             	sub    esp,0x8
c0013c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ca0:	50                   	push   eax
c0013ca1:	e8 44 07 00 00       	call   c00143ea <Device::Device(char const*)>
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	ba 14 aa 02 c0       	mov    edx,0xc002aa14
c0013cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb2:	89 10                	mov    DWORD PTR [eax],edx
c0013cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013cc2:	90                   	nop
c0013cc3:	83 c4 0c             	add    esp,0xc
c0013cc6:	c3                   	ret    
c0013cc7:	90                   	nop

c0013cc8 <Clock::~Clock()>:
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	ba 14 aa 02 c0       	mov    edx,0xc002aa14
c0013cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd4:	89 10                	mov    DWORD PTR [eax],edx
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	83 ec 0c             	sub    esp,0xc
c0013cdd:	50                   	push   eax
c0013cde:	e8 e9 03 00 00       	call   c00140cc <Device::~Device()>
c0013ce3:	83 c4 10             	add    esp,0x10
c0013ce6:	90                   	nop
c0013ce7:	83 c4 0c             	add    esp,0xc
c0013cea:	c3                   	ret    
c0013ceb:	90                   	nop

c0013cec <Clock::~Clock()>:
c0013cec:	83 ec 0c             	sub    esp,0xc
c0013cef:	83 ec 0c             	sub    esp,0xc
c0013cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cf6:	e8 cd ff ff ff       	call   c0013cc8 <Clock::~Clock()>
c0013cfb:	83 c4 10             	add    esp,0x10
c0013cfe:	83 ec 08             	sub    esp,0x8
c0013d01:	68 58 01 00 00       	push   0x158
c0013d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d0a:	e8 e5 ef ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0013d0f:	83 c4 10             	add    esp,0x10
c0013d12:	83 c4 0c             	add    esp,0xc
c0013d15:	c3                   	ret    

c0013d16 <Clock::timeInSecondsLocal()>:
c0013d16:	53                   	push   ebx
c0013d17:	83 ec 14             	sub    esp,0x14
c0013d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d20:	50                   	push   eax
c0013d21:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013d24:	0f b6 0d 18 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e418
c0013d2b:	03 0d 1c e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e41c
c0013d31:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013d37:	89 cb                	mov    ebx,ecx
c0013d39:	c1 fb 1f             	sar    ebx,0x1f
c0013d3c:	01 c8                	add    eax,ecx
c0013d3e:	11 da                	adc    edx,ebx
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	31 c9                	xor    ecx,ecx
c0013d45:	80 3d 19 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e419,0x0
c0013d4c:	74 05                	je     c0013d53 <Clock::timeInSecondsLocal()+0x3d>
c0013d4e:	b9 08 07 00 00       	mov    ecx,0x708
c0013d53:	31 db                	xor    ebx,ebx
c0013d55:	01 c8                	add    eax,ecx
c0013d57:	11 da                	adc    edx,ebx
c0013d59:	83 c4 08             	add    esp,0x8
c0013d5c:	5b                   	pop    ebx
c0013d5d:	c3                   	ret    

c0013d5e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013d5e:	57                   	push   edi
c0013d5f:	56                   	push   esi
c0013d60:	53                   	push   ebx
c0013d61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013d65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d69:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013d6f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013d72:	0f b6 05 18 e4 02 c0 	movzx  eax,BYTE PTR ds:0xc002e418
c0013d79:	03 05 1c e4 02 c0    	add    eax,DWORD PTR ds:0xc002e41c
c0013d7f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013d85:	99                   	cdq    
c0013d86:	29 c6                	sub    esi,eax
c0013d88:	19 d7                	sbb    edi,edx
c0013d8a:	89 f0                	mov    eax,esi
c0013d8c:	89 fa                	mov    edx,edi
c0013d8e:	31 f6                	xor    esi,esi
c0013d90:	80 3d 19 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e419,0x0
c0013d97:	74 05                	je     c0013d9e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013d99:	be 08 07 00 00       	mov    esi,0x708
c0013d9e:	31 ff                	xor    edi,edi
c0013da0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013da4:	29 f0                	sub    eax,esi
c0013da6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013daa:	19 fa                	sbb    edx,edi
c0013dac:	89 d8                	mov    eax,ebx
c0013dae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013db2:	5b                   	pop    ebx
c0013db3:	5e                   	pop    esi
c0013db4:	5f                   	pop    edi
c0013db5:	ff e0                	jmp    eax

c0013db7 <datetimeToSeconds(datetime_t)>:
c0013db7:	55                   	push   ebp
c0013db8:	57                   	push   edi
c0013db9:	56                   	push   esi
c0013dba:	53                   	push   ebx
c0013dbb:	83 ec 14             	sub    esp,0x14
c0013dbe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013dc2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013dc6:	89 d3                	mov    ebx,edx
c0013dc8:	0f b6 c6             	movzx  eax,dh
c0013dcb:	c1 eb 10             	shr    ebx,0x10
c0013dce:	48                   	dec    eax
c0013dcf:	66 81 eb 6c 07       	sub    bx,0x76c
c0013dd4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013dd8:	0f b6 f5             	movzx  esi,ch
c0013ddb:	89 cf                	mov    edi,ecx
c0013ddd:	6b f6 3c             	imul   esi,esi,0x3c
c0013de0:	c1 ef 10             	shr    edi,0x10
c0013de3:	0f b6 c9             	movzx  ecx,cl
c0013de6:	89 f8                	mov    eax,edi
c0013de8:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dee:	0f b6 f8             	movzx  edi,al
c0013df1:	0f b6 d2             	movzx  edx,dl
c0013df4:	01 fe                	add    esi,edi
c0013df6:	01 f1                	add    ecx,esi
c0013df8:	0f b7 f3             	movzx  esi,bx
c0013dfb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dff:	c1 f9 1f             	sar    ecx,0x1f
c0013e02:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e07:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e0b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e10:	8b 0c 8d 60 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd55a0]
c0013e17:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e1b:	76 29                	jbe    c0013e46 <datetimeToSeconds(datetime_t)+0x8f>
c0013e1d:	f6 c3 03             	test   bl,0x3
c0013e20:	75 24                	jne    c0013e46 <datetimeToSeconds(datetime_t)+0x8f>
c0013e22:	31 d2                	xor    edx,edx
c0013e24:	bf 64 00 00 00       	mov    edi,0x64
c0013e29:	89 d8                	mov    eax,ebx
c0013e2b:	66 f7 f7             	div    di
c0013e2e:	66 85 d2             	test   dx,dx
c0013e31:	75 12                	jne    c0013e45 <datetimeToSeconds(datetime_t)+0x8e>
c0013e33:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013e39:	bf 90 01 00 00       	mov    edi,0x190
c0013e3e:	99                   	cdq    
c0013e3f:	f7 ff                	idiv   edi
c0013e41:	85 d2                	test   edx,edx
c0013e43:	75 01                	jne    c0013e46 <datetimeToSeconds(datetime_t)+0x8f>
c0013e45:	41                   	inc    ecx
c0013e46:	66 83 fb 46          	cmp    bx,0x46
c0013e4a:	76 45                	jbe    c0013e91 <datetimeToSeconds(datetime_t)+0xda>
c0013e4c:	bb 46 00 00 00       	mov    ebx,0x46
c0013e51:	bf 64 00 00 00       	mov    edi,0x64
c0013e56:	bd 90 01 00 00       	mov    ebp,0x190
c0013e5b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013e60:	f6 c3 03             	test   bl,0x3
c0013e63:	75 23                	jne    c0013e88 <datetimeToSeconds(datetime_t)+0xd1>
c0013e65:	89 d8                	mov    eax,ebx
c0013e67:	99                   	cdq    
c0013e68:	f7 ff                	idiv   edi
c0013e6a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013e6f:	85 d2                	test   edx,edx
c0013e71:	75 15                	jne    c0013e88 <datetimeToSeconds(datetime_t)+0xd1>
c0013e73:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013e79:	99                   	cdq    
c0013e7a:	f7 fd                	idiv   ebp
c0013e7c:	83 fa 01             	cmp    edx,0x1
c0013e7f:	19 c0                	sbb    eax,eax
c0013e81:	f7 d0                	not    eax
c0013e83:	05 6e 01 00 00       	add    eax,0x16e
c0013e88:	01 c1                	add    ecx,eax
c0013e8a:	43                   	inc    ebx
c0013e8b:	39 f3                	cmp    ebx,esi
c0013e8d:	7c cc                	jl     c0013e5b <datetimeToSeconds(datetime_t)+0xa4>
c0013e8f:	eb 35                	jmp    c0013ec6 <datetimeToSeconds(datetime_t)+0x10f>
c0013e91:	74 33                	je     c0013ec6 <datetimeToSeconds(datetime_t)+0x10f>
c0013e93:	b8 45 00 00 00       	mov    eax,0x45
c0013e98:	89 c2                	mov    edx,eax
c0013e9a:	83 e2 03             	and    edx,0x3
c0013e9d:	39 f0                	cmp    eax,esi
c0013e9f:	7e 0f                	jle    c0013eb0 <datetimeToSeconds(datetime_t)+0xf9>
c0013ea1:	83 fa 01             	cmp    edx,0x1
c0013ea4:	19 d2                	sbb    edx,edx
c0013ea6:	48                   	dec    eax
c0013ea7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013eae:	eb e8                	jmp    c0013e98 <datetimeToSeconds(datetime_t)+0xe1>
c0013eb0:	b8 6d 01 00 00       	mov    eax,0x16d
c0013eb5:	85 d2                	test   edx,edx
c0013eb7:	75 0b                	jne    c0013ec4 <datetimeToSeconds(datetime_t)+0x10d>
c0013eb9:	66 83 fb 01          	cmp    bx,0x1
c0013ebd:	19 c0                	sbb    eax,eax
c0013ebf:	05 6e 01 00 00       	add    eax,0x16e
c0013ec4:	29 c1                	sub    ecx,eax
c0013ec6:	b8 80 51 01 00       	mov    eax,0x15180
c0013ecb:	f7 e9                	imul   ecx
c0013ecd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013ed1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ed5:	83 c4 14             	add    esp,0x14
c0013ed8:	5b                   	pop    ebx
c0013ed9:	5e                   	pop    esi
c0013eda:	5f                   	pop    edi
c0013edb:	5d                   	pop    ebp
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ede:	57                   	push   edi
c0013edf:	56                   	push   esi
c0013ee0:	53                   	push   ebx
c0013ee1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013ee5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013ee7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013eea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ef2:	e8 c0 fe ff ff       	call   c0013db7 <datetimeToSeconds(datetime_t)>
c0013ef7:	59                   	pop    ecx
c0013ef8:	0f b6 0d 18 e4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e418
c0013eff:	5b                   	pop    ebx
c0013f00:	03 0d 1c e4 02 c0    	add    ecx,DWORD PTR ds:0xc002e41c
c0013f06:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f0c:	89 cb                	mov    ebx,ecx
c0013f0e:	c1 fb 1f             	sar    ebx,0x1f
c0013f11:	29 c8                	sub    eax,ecx
c0013f13:	19 da                	sbb    edx,ebx
c0013f15:	31 c9                	xor    ecx,ecx
c0013f17:	80 3d 19 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e419,0x0
c0013f1e:	74 05                	je     c0013f25 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f20:	b9 08 07 00 00       	mov    ecx,0x708
c0013f25:	31 db                	xor    ebx,ebx
c0013f27:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013f2b:	29 c8                	sub    eax,ecx
c0013f2d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f31:	19 da                	sbb    edx,ebx
c0013f33:	89 f8                	mov    eax,edi
c0013f35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013f39:	5b                   	pop    ebx
c0013f3a:	5e                   	pop    esi
c0013f3b:	5f                   	pop    edi
c0013f3c:	ff e0                	jmp    eax

c0013f3e <secondsToDatetime(unsigned long long)>:
c0013f3e:	55                   	push   ebp
c0013f3f:	57                   	push   edi
c0013f40:	56                   	push   esi
c0013f41:	53                   	push   ebx
c0013f42:	83 ec 1c             	sub    esp,0x1c
c0013f45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013f49:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013f4d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013f51:	6a 00                	push   0x0
c0013f53:	68 80 51 01 00       	push   0x15180
c0013f58:	55                   	push   ebp
c0013f59:	57                   	push   edi
c0013f5a:	e8 1d 29 01 00       	call   c002687c <__udivdi3>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013f68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f6c:	6a 00                	push   0x0
c0013f6e:	68 80 51 01 00       	push   0x15180
c0013f73:	55                   	push   ebp
c0013f74:	57                   	push   edi
c0013f75:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f7a:	e8 fd 29 01 00       	call   c002697c <__umoddi3>
c0013f7f:	83 c4 10             	add    esp,0x10
c0013f82:	99                   	cdq    
c0013f83:	f7 ff                	idiv   edi
c0013f85:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f8a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013f8d:	89 d0                	mov    eax,edx
c0013f8f:	99                   	cdq    
c0013f90:	f7 ff                	idiv   edi
c0013f92:	85 db                	test   ebx,ebx
c0013f94:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013f97:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013f9a:	79 11                	jns    c0013fad <secondsToDatetime(unsigned long long)+0x6f>
c0013f9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013fa0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013fa6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fab:	eb 07                	jmp    c0013fb4 <secondsToDatetime(unsigned long long)+0x76>
c0013fad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013fb2:	89 d8                	mov    eax,ebx
c0013fb4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013fb9:	99                   	cdq    
c0013fba:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013fbf:	f7 f9                	idiv   ecx
c0013fc1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013fc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fca:	31 d2                	xor    edx,edx
c0013fcc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013fd4:	01 c3                	add    ebx,eax
c0013fd6:	89 d8                	mov    eax,ebx
c0013fd8:	f7 f1                	div    ecx
c0013fda:	31 d2                	xor    edx,edx
c0013fdc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013fdf:	89 d8                	mov    eax,ebx
c0013fe1:	f7 f7                	div    edi
c0013fe3:	31 d2                	xor    edx,edx
c0013fe5:	29 c1                	sub    ecx,eax
c0013fe7:	89 d8                	mov    eax,ebx
c0013fe9:	f7 f5                	div    ebp
c0013feb:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013ff0:	29 c1                	sub    ecx,eax
c0013ff2:	31 d2                	xor    edx,edx
c0013ff4:	89 c8                	mov    eax,ecx
c0013ff6:	f7 f5                	div    ebp
c0013ff8:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014001:	31 d2                	xor    edx,edx
c0014003:	89 c8                	mov    eax,ecx
c0014005:	f7 f5                	div    ebp
c0014007:	31 d2                	xor    edx,edx
c0014009:	01 c3                	add    ebx,eax
c001400b:	89 c8                	mov    eax,ecx
c001400d:	f7 f7                	div    edi
c001400f:	bf 99 00 00 00       	mov    edi,0x99
c0014014:	29 c3                	sub    ebx,eax
c0014016:	31 d2                	xor    edx,edx
c0014018:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0014020:	29 c3                	sub    ebx,eax
c0014022:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014025:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014028:	bb 05 00 00 00       	mov    ebx,0x5
c001402d:	83 c1 02             	add    ecx,0x2
c0014030:	89 c8                	mov    eax,ecx
c0014032:	f7 f7                	div    edi
c0014034:	31 d2                	xor    edx,edx
c0014036:	89 c7                	mov    edi,eax
c0014038:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001403e:	83 c0 02             	add    eax,0x2
c0014041:	f7 f3                	div    ebx
c0014043:	89 eb                	mov    ebx,ebp
c0014045:	29 c3                	sub    ebx,eax
c0014047:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001404d:	88 1e                	mov    BYTE PTR [esi],bl
c001404f:	19 c0                	sbb    eax,eax
c0014051:	31 d2                	xor    edx,edx
c0014053:	83 e0 0c             	and    eax,0xc
c0014056:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001405a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0014062:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014066:	83 f9 01             	cmp    ecx,0x1
c0014069:	0f 96 c2             	setbe  dl
c001406c:	41                   	inc    ecx
c001406d:	01 d0                	add    eax,edx
c001406f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0014072:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014076:	83 c4 1c             	add    esp,0x1c
c0014079:	89 f0                	mov    eax,esi
c001407b:	5b                   	pop    ebx
c001407c:	5e                   	pop    esi
c001407d:	5f                   	pop    edi
c001407e:	5d                   	pop    ebp
c001407f:	c2 04 00             	ret    0x4

c0014082 <Clock::timeInDatetimeLocal()>:
c0014082:	53                   	push   ebx
c0014083:	83 ec 14             	sub    esp,0x14
c0014086:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001408a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001408e:	e8 83 fc ff ff       	call   c0013d16 <Clock::timeInSecondsLocal()>
c0014093:	83 c4 0c             	add    esp,0xc
c0014096:	52                   	push   edx
c0014097:	50                   	push   eax
c0014098:	53                   	push   ebx
c0014099:	e8 a0 fe ff ff       	call   c0013f3e <secondsToDatetime(unsigned long long)>
c001409e:	89 d8                	mov    eax,ebx
c00140a0:	83 c4 14             	add    esp,0x14
c00140a3:	5b                   	pop    ebx
c00140a4:	c2 04 00             	ret    0x4
c00140a7:	90                   	nop

c00140a8 <Device::hibernate()>:
c00140a8:	c3                   	ret    
c00140a9:	90                   	nop

c00140aa <Device::wake()>:
c00140aa:	c3                   	ret    
c00140ab:	90                   	nop

c00140ac <Device::detect()>:
c00140ac:	c3                   	ret    
c00140ad:	90                   	nop

c00140ae <Device::disableLegacy()>:
c00140ae:	c3                   	ret    
c00140af:	90                   	nop

c00140b0 <Device::powerSaving(PowerSavingLevel)>:
c00140b0:	c3                   	ret    
c00140b1:	90                   	nop

c00140b2 <DriverlessDevice::close(int, int, void*)>:
c00140b2:	31 c0                	xor    eax,eax
c00140b4:	c3                   	ret    
c00140b5:	90                   	nop

c00140b6 <DriverlessDevice::detect()>:
c00140b6:	c3                   	ret    
c00140b7:	90                   	nop

c00140b8 <DriverlessDevice::open(int, int, void*)>:
c00140b8:	83 ec 18             	sub    esp,0x18
c00140bb:	68 90 aa 02 c0       	push   0xc002aa90
c00140c0:	e8 b8 63 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00140c5:	83 c8 ff             	or     eax,0xffffffff
c00140c8:	83 c4 1c             	add    esp,0x1c
c00140cb:	c3                   	ret    

c00140cc <Device::~Device()>:
c00140cc:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c00140d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140d5:	89 10                	mov    DWORD PTR [eax],edx
c00140d7:	90                   	nop
c00140d8:	c3                   	ret    
c00140d9:	90                   	nop

c00140da <Device::~Device()>:
c00140da:	83 ec 0c             	sub    esp,0xc
c00140dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00140e1:	e8 e6 ff ff ff       	call   c00140cc <Device::~Device()>
c00140e6:	83 c4 04             	add    esp,0x4
c00140e9:	83 ec 08             	sub    esp,0x8
c00140ec:	68 58 01 00 00       	push   0x158
c00140f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f5:	e8 fa eb ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00140fa:	83 c4 10             	add    esp,0x10
c00140fd:	83 c4 0c             	add    esp,0xc
c0014100:	c3                   	ret    
c0014101:	90                   	nop

c0014102 <Device::findAndLoadDriver()>:
c0014102:	c3                   	ret    
c0014103:	90                   	nop

c0014104 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014104:	57                   	push   edi
c0014105:	b9 09 00 00 00       	mov    ecx,0x9
c001410a:	56                   	push   esi
c001410b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001410f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014113:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001411d:	81 c7 18 01 00 00    	add    edi,0x118
c0014123:	fc                   	cld    
c0014124:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014126:	5e                   	pop    esi
c0014127:	5f                   	pop    edi
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <Device::preOpenACPI(void*, char*, char*)>:
c001412a:	56                   	push   esi
c001412b:	53                   	push   ebx
c001412c:	83 ec 08             	sub    esp,0x8
c001412f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014133:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014137:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0014141:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014145:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001414b:	6a 1e                	push   0x1e
c001414d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0014153:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014157:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001415d:	50                   	push   eax
c001415e:	e8 e1 c5 fe ff       	call   c0000744 <memcpy>
c0014163:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014167:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001416b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0014173:	83 c4 14             	add    esp,0x14
c0014176:	5b                   	pop    ebx
c0014177:	5e                   	pop    esi
c0014178:	e9 c7 c5 fe ff       	jmp    c0000744 <memcpy>
c001417d:	90                   	nop

c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001417e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014182:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014187:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001418e:	75 0b                	jne    c001419b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014190:	8b 00                	mov    eax,DWORD PTR [eax]
c0014192:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014196:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014199:	eb 1e                	jmp    c00141b9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001419b:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00141a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141a6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141b6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00141b9:	ff e0                	jmp    eax
c00141bb:	90                   	nop

c00141bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141c0:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141c5:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141cc:	75 0b                	jne    c00141d9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00141ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00141d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141d4:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00141d7:	eb 1e                	jmp    c00141f7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00141d9:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00141de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00141e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00141ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00141f4:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c00141f7:	ff e0                	jmp    eax
c00141f9:	90                   	nop

c00141fa <Device::addChild(Device*)>:
c00141fa:	53                   	push   ebx
c00141fb:	83 ec 08             	sub    esp,0x8
c00141fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014202:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014206:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001420c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014212:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014214:	85 d2                	test   edx,edx
c0014216:	74 04                	je     c001421c <Device::addChild(Device*)+0x22>
c0014218:	89 d3                	mov    ebx,edx
c001421a:	eb f6                	jmp    c0014212 <Device::addChild(Device*)+0x18>
c001421c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001421f:	83 ec 0c             	sub    esp,0xc
c0014222:	6a 08                	push   0x8
c0014224:	e8 17 b6 ff ff       	call   c000f840 <malloc>
c0014229:	89 03                	mov    DWORD PTR [ebx],eax
c001422b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014231:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014238:	83 c4 18             	add    esp,0x18
c001423b:	5b                   	pop    ebx
c001423c:	c3                   	ret    
c001423d:	90                   	nop

c001423e <Device::removeAllChildren()>:
c001423e:	56                   	push   esi
c001423f:	53                   	push   ebx
c0014240:	52                   	push   edx
c0014241:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014245:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001424b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001424e:	74 17                	je     c0014267 <Device::removeAllChildren()+0x29>
c0014250:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014253:	85 c0                	test   eax,eax
c0014255:	74 0c                	je     c0014263 <Device::removeAllChildren()+0x25>
c0014257:	83 ec 0c             	sub    esp,0xc
c001425a:	8b 10                	mov    edx,DWORD PTR [eax]
c001425c:	50                   	push   eax
c001425d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0014260:	83 c4 10             	add    esp,0x10
c0014263:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014265:	eb e4                	jmp    c001424b <Device::removeAllChildren()+0xd>
c0014267:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001426d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014273:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014279:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014280:	58                   	pop    eax
c0014281:	5b                   	pop    ebx
c0014282:	5e                   	pop    esi
c0014283:	c3                   	ret    

c0014284 <Device::hibernateAll()>:
c0014284:	53                   	push   ebx
c0014285:	83 ec 14             	sub    esp,0x14
c0014288:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001428e:	53                   	push   ebx
c001428f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014292:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014298:	83 c4 10             	add    esp,0x10
c001429b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001429e:	74 0f                	je     c00142af <Device::hibernateAll()+0x2b>
c00142a0:	83 ec 0c             	sub    esp,0xc
c00142a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142a6:	e8 d9 ff ff ff       	call   c0014284 <Device::hibernateAll()>
c00142ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142ad:	eb e9                	jmp    c0014298 <Device::hibernateAll()+0x14>
c00142af:	83 c4 08             	add    esp,0x8
c00142b2:	5b                   	pop    ebx
c00142b3:	c3                   	ret    

c00142b4 <Device::wakeAll()>:
c00142b4:	53                   	push   ebx
c00142b5:	83 ec 14             	sub    esp,0x14
c00142b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142be:	53                   	push   ebx
c00142bf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00142c2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142c8:	83 c4 10             	add    esp,0x10
c00142cb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142ce:	74 0f                	je     c00142df <Device::wakeAll()+0x2b>
c00142d0:	83 ec 0c             	sub    esp,0xc
c00142d3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142d6:	e8 d9 ff ff ff       	call   c00142b4 <Device::wakeAll()>
c00142db:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142dd:	eb e9                	jmp    c00142c8 <Device::wakeAll()+0x14>
c00142df:	83 c4 08             	add    esp,0x8
c00142e2:	5b                   	pop    ebx
c00142e3:	c3                   	ret    

c00142e4 <Device::detectAll()>:
c00142e4:	53                   	push   ebx
c00142e5:	83 ec 14             	sub    esp,0x14
c00142e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142ee:	53                   	push   ebx
c00142ef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00142f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142fe:	74 0f                	je     c001430f <Device::detectAll()+0x2b>
c0014300:	83 ec 0c             	sub    esp,0xc
c0014303:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014306:	e8 d9 ff ff ff       	call   c00142e4 <Device::detectAll()>
c001430b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001430d:	eb e9                	jmp    c00142f8 <Device::detectAll()+0x14>
c001430f:	83 c4 08             	add    esp,0x8
c0014312:	5b                   	pop    ebx
c0014313:	c3                   	ret    

c0014314 <Device::disableLegacyAll()>:
c0014314:	53                   	push   ebx
c0014315:	83 ec 14             	sub    esp,0x14
c0014318:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001431c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001431e:	53                   	push   ebx
c001431f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014322:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001432e:	74 0f                	je     c001433f <Device::disableLegacyAll()+0x2b>
c0014330:	83 ec 0c             	sub    esp,0xc
c0014333:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014336:	e8 d9 ff ff ff       	call   c0014314 <Device::disableLegacyAll()>
c001433b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001433d:	eb e9                	jmp    c0014328 <Device::disableLegacyAll()+0x14>
c001433f:	83 c4 08             	add    esp,0x8
c0014342:	5b                   	pop    ebx
c0014343:	c3                   	ret    

c0014344 <Device::loadDriversForAll()>:
c0014344:	53                   	push   ebx
c0014345:	83 ec 08             	sub    esp,0x8
c0014348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001434c:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014352:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014354:	85 db                	test   ebx,ebx
c0014356:	74 12                	je     c001436a <Device::loadDriversForAll()+0x26>
c0014358:	83 ec 0c             	sub    esp,0xc
c001435b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001435e:	e8 e1 ff ff ff       	call   c0014344 <Device::loadDriversForAll()>
c0014363:	83 c4 10             	add    esp,0x10
c0014366:	89 d8                	mov    eax,ebx
c0014368:	eb e8                	jmp    c0014352 <Device::loadDriversForAll()+0xe>
c001436a:	83 c4 08             	add    esp,0x8
c001436d:	5b                   	pop    ebx
c001436e:	c3                   	ret    
c001436f:	90                   	nop

c0014370 <Device::closeAll()>:
c0014370:	53                   	push   ebx
c0014371:	83 ec 08             	sub    esp,0x8
c0014374:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014378:	8b 03                	mov    eax,DWORD PTR [ebx]
c001437a:	6a 00                	push   0x0
c001437c:	6a 00                	push   0x0
c001437e:	6a 00                	push   0x0
c0014380:	53                   	push   ebx
c0014381:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014384:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001438a:	83 c4 10             	add    esp,0x10
c001438d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014390:	74 0f                	je     c00143a1 <Device::closeAll()+0x31>
c0014392:	83 ec 0c             	sub    esp,0xc
c0014395:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014398:	e8 d3 ff ff ff       	call   c0014370 <Device::closeAll()>
c001439d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001439f:	eb e9                	jmp    c001438a <Device::closeAll()+0x1a>
c00143a1:	83 c4 08             	add    esp,0x8
c00143a4:	5b                   	pop    ebx
c00143a5:	c3                   	ret    

c00143a6 <Device::powerSavingAll(PowerSavingLevel)>:
c00143a6:	56                   	push   esi
c00143a7:	53                   	push   ebx
c00143a8:	83 ec 0c             	sub    esp,0xc
c00143ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00143b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143b5:	56                   	push   esi
c00143b6:	53                   	push   ebx
c00143b7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00143ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143c6:	74 0f                	je     c00143d7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00143c8:	52                   	push   edx
c00143c9:	52                   	push   edx
c00143ca:	56                   	push   esi
c00143cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143ce:	e8 d3 ff ff ff       	call   c00143a6 <Device::powerSavingAll(PowerSavingLevel)>
c00143d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143d5:	eb e9                	jmp    c00143c0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00143d7:	58                   	pop    eax
c00143d8:	5b                   	pop    ebx
c00143d9:	5e                   	pop    esi
c00143da:	c3                   	ret    
c00143db:	90                   	nop

c00143dc <Device::setName(char const*)>:
c00143dc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00143e4:	e9 4b c4 fe ff       	jmp    c0000834 <strcpy>
c00143e9:	90                   	nop

c00143ea <Device::Device(char const*)>:
c00143ea:	83 ec 1c             	sub    esp,0x1c
c00143ed:	ba b8 aa 02 c0       	mov    edx,0xc002aab8
c00143f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143f6:	89 10                	mov    DWORD PTR [eax],edx
c00143f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00143fc:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001440a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014418:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014426:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014430:	83 ec 08             	sub    esp,0x8
c0014433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001443b:	e8 9c ff ff ff       	call   c00143dc <Device::setName(char const*)>
c0014440:	83 c4 10             	add    esp,0x10
c0014443:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001444b:	83 ec 0c             	sub    esp,0xc
c001444e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014452:	e8 e9 b3 ff ff       	call   c000f840 <malloc>
c0014457:	83 c4 10             	add    esp,0x10
c001445a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014460:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014467:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001446b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0014471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014475:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001447b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014485:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001448b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014496:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001449d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144a1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00144a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ac:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ba:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00144d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d6:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00144e0:	90                   	nop
c00144e1:	83 c4 1c             	add    esp,0x1c
c00144e4:	c3                   	ret    
c00144e5:	90                   	nop

c00144e6 <Device::getName()>:
c00144e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144ea:	05 d0 00 00 00       	add    eax,0xd0
c00144ef:	c3                   	ret    

c00144f0 <DriverlessDevice::DriverlessDevice(char const*)>:
c00144f0:	83 ec 0c             	sub    esp,0xc
c00144f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144fe:	50                   	push   eax
c00144ff:	e8 e6 fe ff ff       	call   c00143ea <Device::Device(char const*)>
c0014504:	83 c4 10             	add    esp,0x10
c0014507:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c001450c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014510:	89 10                	mov    DWORD PTR [eax],edx
c0014512:	90                   	nop
c0014513:	83 c4 0c             	add    esp,0xc
c0014516:	c3                   	ret    
c0014517:	90                   	nop

c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014518:	57                   	push   edi
c0014519:	56                   	push   esi
c001451a:	53                   	push   ebx
c001451b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001451f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014523:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014527:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001452d:	75 0c                	jne    c001453b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001452f:	52                   	push   edx
c0014530:	52                   	push   edx
c0014531:	53                   	push   ebx
c0014532:	56                   	push   esi
c0014533:	e8 82 42 01 00       	call   c00287ba <LinkedList<Device>::addElement(Device*)>
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014544:	74 12                	je     c0014558 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014546:	50                   	push   eax
c0014547:	57                   	push   edi
c0014548:	56                   	push   esi
c0014549:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001454c:	e8 c7 ff ff ff       	call   c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014551:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	eb e9                	jmp    c0014541 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014558:	5b                   	pop    ebx
c0014559:	5e                   	pop    esi
c001455a:	5f                   	pop    edi
c001455b:	c3                   	ret    

c001455c <getDevicesOfType(DeviceType)>:
c001455c:	53                   	push   ebx
c001455d:	83 ec 14             	sub    esp,0x14
c0014560:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014564:	53                   	push   ebx
c0014565:	e8 2c 43 01 00       	call   c0028896 <LinkedList<Device>::LinkedList()>
c001456a:	83 c4 0c             	add    esp,0xc
c001456d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014571:	53                   	push   ebx
c0014572:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c0014578:	e8 9b ff ff ff       	call   c0014518 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001457d:	89 d8                	mov    eax,ebx
c001457f:	83 c4 18             	add    esp,0x18
c0014582:	5b                   	pop    ebx
c0014583:	c2 04 00             	ret    0x4

c0014586 <HardDiskController::HardDiskController(char const*)>:
c0014586:	83 ec 0c             	sub    esp,0xc
c0014589:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001458d:	83 ec 08             	sub    esp,0x8
c0014590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014594:	50                   	push   eax
c0014595:	e8 50 fe ff ff       	call   c00143ea <Device::Device(char const*)>
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c00145a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145a6:	89 10                	mov    DWORD PTR [eax],edx
c00145a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ac:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00145b6:	90                   	nop
c00145b7:	83 c4 0c             	add    esp,0xc
c00145ba:	c3                   	ret    
c00145bb:	90                   	nop

c00145bc <HardDiskController::~HardDiskController()>:
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	ba 10 ab 02 c0       	mov    edx,0xc002ab10
c00145c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145c8:	89 10                	mov    DWORD PTR [eax],edx
c00145ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145ce:	83 ec 0c             	sub    esp,0xc
c00145d1:	50                   	push   eax
c00145d2:	e8 f5 fa ff ff       	call   c00140cc <Device::~Device()>
c00145d7:	83 c4 10             	add    esp,0x10
c00145da:	90                   	nop
c00145db:	83 c4 0c             	add    esp,0xc
c00145de:	c3                   	ret    
c00145df:	90                   	nop

c00145e0 <HardDiskController::~HardDiskController()>:
c00145e0:	83 ec 0c             	sub    esp,0xc
c00145e3:	83 ec 0c             	sub    esp,0xc
c00145e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145ea:	e8 cd ff ff ff       	call   c00145bc <HardDiskController::~HardDiskController()>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	83 ec 08             	sub    esp,0x8
c00145f5:	68 58 01 00 00       	push   0x158
c00145fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145fe:	e8 f1 e6 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0014603:	83 c4 10             	add    esp,0x10
c0014606:	83 c4 0c             	add    esp,0xc
c0014609:	c3                   	ret    

c001460a <PhysicalDisk::eject()>:
c001460a:	83 ec 18             	sub    esp,0x18
c001460d:	68 34 ab 02 c0       	push   0xc002ab34
c0014612:	e8 bd e7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014617:	83 c8 ff             	or     eax,0xffffffff
c001461a:	83 c4 1c             	add    esp,0x1c
c001461d:	c3                   	ret    

c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014625:	83 ec 08             	sub    esp,0x8
c0014628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462c:	50                   	push   eax
c001462d:	e8 b8 fd ff ff       	call   c00143ea <Device::Device(char const*)>
c0014632:	83 c4 10             	add    esp,0x10
c0014635:	ba 64 ab 02 c0       	mov    edx,0xc002ab64
c001463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463e:	89 10                	mov    DWORD PTR [eax],edx
c0014640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014644:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001464b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014668:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001466c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014676:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014680:	90                   	nop
c0014681:	83 c4 0c             	add    esp,0xc
c0014684:	c3                   	ret    
c0014685:	90                   	nop

c0014686 <PhysicalDisk::startCache()>:
c0014686:	56                   	push   esi
c0014687:	53                   	push   ebx
c0014688:	83 ec 10             	sub    esp,0x10
c001468b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001468f:	6a 44                	push   0x44
c0014691:	e8 aa b1 ff ff       	call   c000f840 <malloc>
c0014696:	89 c6                	mov    esi,eax
c0014698:	58                   	pop    eax
c0014699:	5a                   	pop    edx
c001469a:	53                   	push   ebx
c001469b:	56                   	push   esi
c001469c:	e8 2d 27 00 00       	call   c0016dce <VCache::VCache(PhysicalDisk*)>
c00146a1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00146a7:	83 c4 14             	add    esp,0x14
c00146aa:	5b                   	pop    ebx
c00146ab:	5e                   	pop    esi
c00146ac:	c3                   	ret    
c00146ad:	90                   	nop

c00146ae <PhysicalDisk::~PhysicalDisk()>:
c00146ae:	83 ec 0c             	sub    esp,0xc
c00146b1:	ba 64 ab 02 c0       	mov    edx,0xc002ab64
c00146b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ba:	89 10                	mov    DWORD PTR [eax],edx
c00146bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	50                   	push   eax
c00146c4:	e8 03 fa ff ff       	call   c00140cc <Device::~Device()>
c00146c9:	83 c4 10             	add    esp,0x10
c00146cc:	90                   	nop
c00146cd:	83 c4 0c             	add    esp,0xc
c00146d0:	c3                   	ret    
c00146d1:	90                   	nop

c00146d2 <PhysicalDisk::~PhysicalDisk()>:
c00146d2:	83 ec 0c             	sub    esp,0xc
c00146d5:	83 ec 0c             	sub    esp,0xc
c00146d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146dc:	e8 cd ff ff ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c00146e1:	83 c4 10             	add    esp,0x10
c00146e4:	83 ec 08             	sub    esp,0x8
c00146e7:	68 6c 01 00 00       	push   0x16c
c00146ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146f0:	e8 ff e5 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	83 c4 0c             	add    esp,0xc
c00146fb:	c3                   	ret    

c00146fc <FPU::FPU(char const*)>:
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014703:	83 ec 08             	sub    esp,0x8
c0014706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470a:	50                   	push   eax
c001470b:	e8 da fc ff ff       	call   c00143ea <Device::Device(char const*)>
c0014710:	83 c4 10             	add    esp,0x10
c0014713:	ba a8 ab 02 c0       	mov    edx,0xc002aba8
c0014718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001471c:	89 10                	mov    DWORD PTR [eax],edx
c001471e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014722:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001472c:	90                   	nop
c001472d:	83 c4 0c             	add    esp,0xc
c0014730:	c3                   	ret    
c0014731:	90                   	nop

c0014732 <FPU::~FPU()>:
c0014732:	83 ec 0c             	sub    esp,0xc
c0014735:	ba a8 ab 02 c0       	mov    edx,0xc002aba8
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	89 10                	mov    DWORD PTR [eax],edx
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	83 ec 0c             	sub    esp,0xc
c0014747:	50                   	push   eax
c0014748:	e8 7f f9 ff ff       	call   c00140cc <Device::~Device()>
c001474d:	83 c4 10             	add    esp,0x10
c0014750:	90                   	nop
c0014751:	83 c4 0c             	add    esp,0xc
c0014754:	c3                   	ret    
c0014755:	90                   	nop

c0014756 <FPU::~FPU()>:
c0014756:	83 ec 0c             	sub    esp,0xc
c0014759:	83 ec 0c             	sub    esp,0xc
c001475c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014760:	e8 cd ff ff ff       	call   c0014732 <FPU::~FPU()>
c0014765:	83 c4 10             	add    esp,0x10
c0014768:	83 ec 08             	sub    esp,0x8
c001476b:	68 58 01 00 00       	push   0x158
c0014770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014774:	e8 7b e5 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0014779:	83 c4 10             	add    esp,0x10
c001477c:	83 c4 0c             	add    esp,0xc
c001477f:	c3                   	ret    

c0014780 <setupFPU()>:
c0014780:	53                   	push   ebx
c0014781:	83 ec 08             	sub    esp,0x8
c0014784:	8b 15 88 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e288
c001478a:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014791:	74 19                	je     c00147ac <setupFPU()+0x2c>
c0014793:	83 ec 0c             	sub    esp,0xc
c0014796:	68 58 01 00 00       	push   0x158
c001479b:	e8 a0 b0 ff ff       	call   c000f840 <malloc>
c00147a0:	89 c3                	mov    ebx,eax
c00147a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147a5:	e8 60 0c 01 00       	call   c002540a <AVX::AVX()>
c00147aa:	eb 5b                	jmp    c0014807 <setupFPU()+0x87>
c00147ac:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00147b2:	84 c0                	test   al,al
c00147b4:	79 19                	jns    c00147cf <setupFPU()+0x4f>
c00147b6:	83 ec 0c             	sub    esp,0xc
c00147b9:	68 58 01 00 00       	push   0x158
c00147be:	e8 7d b0 ff ff       	call   c000f840 <malloc>
c00147c3:	89 c3                	mov    ebx,eax
c00147c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00147c8:	e8 63 0d 01 00       	call   c0025530 <SSE::SSE()>
c00147cd:	eb 38                	jmp    c0014807 <setupFPU()+0x87>
c00147cf:	a8 20                	test   al,0x20
c00147d1:	74 19                	je     c00147ec <setupFPU()+0x6c>
c00147d3:	83 ec 0c             	sub    esp,0xc
c00147d6:	68 58 01 00 00       	push   0x158
c00147db:	e8 60 b0 ff ff       	call   c000f840 <malloc>
c00147e0:	89 c3                	mov    ebx,eax
c00147e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00147e5:	e8 b0 0c 01 00       	call   c002549a <MMX::MMX()>
c00147ea:	eb 1b                	jmp    c0014807 <setupFPU()+0x87>
c00147ec:	a8 10                	test   al,0x10
c00147ee:	74 1c                	je     c001480c <setupFPU()+0x8c>
c00147f0:	83 ec 0c             	sub    esp,0xc
c00147f3:	68 58 01 00 00       	push   0x158
c00147f8:	e8 43 b0 ff ff       	call   c000f840 <malloc>
c00147fd:	89 c3                	mov    ebx,eax
c00147ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0014802:	e8 b7 0d 01 00       	call   c00255be <x87::x87()>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	eb 24                	jmp    c0014830 <setupFPU()+0xb0>
c001480c:	83 e0 ef             	and    eax,0xffffffef
c001480f:	83 ec 0c             	sub    esp,0xc
c0014812:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014818:	68 94 ab 02 c0       	push   0xc002ab94
c001481d:	e8 b2 e5 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014822:	0f 20 c0             	mov    eax,cr0
c0014825:	83 c8 04             	or     eax,0x4
c0014828:	0f 22 c0             	mov    cr0,eax
c001482b:	31 db                	xor    ebx,ebx
c001482d:	83 c4 10             	add    esp,0x10
c0014830:	89 d8                	mov    eax,ebx
c0014832:	83 c4 08             	add    esp,0x8
c0014835:	5b                   	pop    ebx
c0014836:	c3                   	ret    
c0014837:	90                   	nop

c0014838 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014838:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001483c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014840:	c1 e0 04             	shl    eax,0x4
c0014843:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014847:	8d 50 10             	lea    edx,[eax+0x10]
c001484a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014850:	74 08                	je     c001485a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014852:	83 c0 04             	add    eax,0x4
c0014855:	39 d0                	cmp    eax,edx
c0014857:	75 f1                	jne    c001484a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014859:	c3                   	ret    
c001485a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014864:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001486e:	eb e2                	jmp    c0014852 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014870 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014870:	57                   	push   edi
c0014871:	31 c0                	xor    eax,eax
c0014873:	56                   	push   esi
c0014874:	53                   	push   ebx
c0014875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014879:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001487d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014881:	89 da                	mov    edx,ebx
c0014883:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014887:	c1 e2 04             	shl    edx,0x4
c001488a:	01 ca                	add    edx,ecx
c001488c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014894:	74 16                	je     c00148ac <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014896:	40                   	inc    eax
c0014897:	83 f8 04             	cmp    eax,0x4
c001489a:	75 f0                	jne    c001488c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001489c:	c7 44 24 10 d8 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002abd8
c00148a4:	5b                   	pop    ebx
c00148a5:	5e                   	pop    esi
c00148a6:	5f                   	pop    edi
c00148a7:	e9 d1 5b 00 00       	jmp    c001a47d <Krnl::panic(char const*)>
c00148ac:	8d 04 98             	lea    eax,[eax+ebx*4]
c00148af:	8d 04 81             	lea    eax,[ecx+eax*4]
c00148b2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00148b8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00148be:	5b                   	pop    ebx
c00148bf:	5e                   	pop    esi
c00148c0:	5f                   	pop    edi
c00148c1:	c3                   	ret    

c00148c2 <doubleFault(regs*, void*)>:
c00148c2:	55                   	push   ebp
c00148c3:	89 e5                	mov    ebp,esp
c00148c5:	83 ec 08             	sub    esp,0x8
c00148c8:	83 ec 0c             	sub    esp,0xc
c00148cb:	68 13 ac 02 c0       	push   0xc002ac13
c00148d0:	e8 a8 5b 00 00       	call   c001a47d <Krnl::panic(char const*)>
c00148d5:	83 c4 10             	add    esp,0x10
c00148d8:	90                   	nop
c00148d9:	c9                   	leave  
c00148da:	c3                   	ret    
c00148db:	90                   	nop

c00148dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00148dc:	56                   	push   esi
c00148dd:	53                   	push   ebx
c00148de:	50                   	push   eax
c00148df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00148e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148e7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00148ec:	75 35                	jne    c0014923 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00148ee:	8d 43 20             	lea    eax,[ebx+0x20]
c00148f1:	31 d2                	xor    edx,edx
c00148f3:	89 c1                	mov    ecx,eax
c00148f5:	c1 e1 04             	shl    ecx,0x4
c00148f8:	01 f1                	add    ecx,esi
c00148fa:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014902:	74 3e                	je     c0014942 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014904:	42                   	inc    edx
c0014905:	83 fa 04             	cmp    edx,0x4
c0014908:	75 f0                	jne    c00148fa <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001490a:	83 ec 0c             	sub    esp,0xc
c001490d:	68 58 ac 02 c0       	push   0xc002ac58
c0014912:	e8 66 5b 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0014917:	83 c4 10             	add    esp,0x10
c001491a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001491f:	5a                   	pop    edx
c0014920:	5b                   	pop    ebx
c0014921:	5e                   	pop    esi
c0014922:	c3                   	ret    
c0014923:	83 ec 0c             	sub    esp,0xc
c0014926:	56                   	push   esi
c0014927:	e8 ba fb ff ff       	call   c00144e6 <Device::getName()>
c001492c:	83 c4 10             	add    esp,0x10
c001492f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014932:	75 ba                	jne    c00148ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014934:	83 fb 0f             	cmp    ebx,0xf
c0014937:	7f 29                	jg     c0014962 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014939:	0f b6 9b e0 d4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2b20]
c0014940:	eb ac                	jmp    c00148ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014942:	8d 04 82             	lea    eax,[edx+eax*4]
c0014945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014949:	8d 04 86             	lea    eax,[esi+eax*4]
c001494c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014952:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014956:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001495c:	89 d8                	mov    eax,ebx
c001495e:	5a                   	pop    edx
c001495f:	5b                   	pop    ebx
c0014960:	5e                   	pop    esi
c0014961:	c3                   	ret    
c0014962:	83 ec 0c             	sub    esp,0xc
c0014965:	68 20 ac 02 c0       	push   0xc002ac20
c001496a:	e8 0e 5b 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	e9 77 ff ff ff       	jmp    c00148ee <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014977:	90                   	nop

c0014978 <InterruptController::clearAllHandlers(int, bool)>:
c0014978:	56                   	push   esi
c0014979:	53                   	push   ebx
c001497a:	52                   	push   edx
c001497b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001497f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014983:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014988:	75 61                	jne    c00149eb <InterruptController::clearAllHandlers(int, bool)+0x73>
c001498a:	8d 46 20             	lea    eax,[esi+0x20]
c001498d:	c1 e6 04             	shl    esi,0x4
c0014990:	c1 e0 04             	shl    eax,0x4
c0014993:	01 de                	add    esi,ebx
c0014995:	01 d8                	add    eax,ebx
c0014997:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00149a1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00149ab:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00149b5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00149bf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00149c9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00149d3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00149dd:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00149e7:	58                   	pop    eax
c00149e8:	5b                   	pop    ebx
c00149e9:	5e                   	pop    esi
c00149ea:	c3                   	ret    
c00149eb:	83 ec 0c             	sub    esp,0xc
c00149ee:	53                   	push   ebx
c00149ef:	e8 f2 fa ff ff       	call   c00144e6 <Device::getName()>
c00149f4:	83 c4 10             	add    esp,0x10
c00149f7:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149fa:	75 8e                	jne    c001498a <InterruptController::clearAllHandlers(int, bool)+0x12>
c00149fc:	83 fe 0f             	cmp    esi,0xf
c00149ff:	7f 09                	jg     c0014a0a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a01:	0f b6 b6 e0 d4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2b20]
c0014a08:	eb 80                	jmp    c001498a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a0a:	83 ec 0c             	sub    esp,0xc
c0014a0d:	68 94 ac 02 c0       	push   0xc002ac94
c0014a12:	e8 66 5a 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0014a17:	83 c4 10             	add    esp,0x10
c0014a1a:	e9 6b ff ff ff       	jmp    c001498a <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a1f:	90                   	nop

c0014a20 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a20:	56                   	push   esi
c0014a21:	53                   	push   ebx
c0014a22:	52                   	push   edx
c0014a23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a2b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a30:	75 3a                	jne    c0014a6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014a32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a36:	8d 50 20             	lea    edx,[eax+0x20]
c0014a39:	c1 e2 04             	shl    edx,0x4
c0014a3c:	8d 04 16             	lea    eax,[esi+edx*1]
c0014a3f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014a43:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014a49:	74 0b                	je     c0014a56 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014a4b:	83 c0 04             	add    eax,0x4
c0014a4e:	39 d0                	cmp    eax,edx
c0014a50:	75 f1                	jne    c0014a43 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014a52:	58                   	pop    eax
c0014a53:	5b                   	pop    ebx
c0014a54:	5e                   	pop    esi
c0014a55:	c3                   	ret    
c0014a56:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a60:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a6a:	eb df                	jmp    c0014a4b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014a6c:	83 ec 0c             	sub    esp,0xc
c0014a6f:	56                   	push   esi
c0014a70:	e8 71 fa ff ff       	call   c00144e6 <Device::getName()>
c0014a75:	83 c4 10             	add    esp,0x10
c0014a78:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a7b:	75 b5                	jne    c0014a32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a7d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014a82:	7f 11                	jg     c0014a95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014a84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a88:	0f b6 80 e0 d4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2b20]
c0014a8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a93:	eb 9d                	jmp    c0014a32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014a95:	83 ec 0c             	sub    esp,0xc
c0014a98:	68 94 ac 02 c0       	push   0xc002ac94
c0014a9d:	e8 db 59 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0014aa2:	83 c4 10             	add    esp,0x10
c0014aa5:	eb 8b                	jmp    c0014a32 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014aa7 <nmiHandler(regs*, void*)>:
c0014aa7:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0014aac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ab0:	e9 d7 a4 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014ab5 <int_handler>:
c0014ab5:	55                   	push   ebp
c0014ab6:	57                   	push   edi
c0014ab7:	56                   	push   esi
c0014ab8:	53                   	push   ebx
c0014ab9:	83 ec 0c             	sub    esp,0xc
c0014abc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014ac0:	80 3d e4 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030de4,0x0
c0014ac7:	74 0b                	je     c0014ad4 <int_handler+0x1f>
c0014ac9:	fa                   	cli    
c0014aca:	f4                   	hlt    
c0014acb:	80 3d e4 0d 03 c0 00 	cmp    BYTE PTR ds:0xc0030de4,0x0
c0014ad2:	75 f5                	jne    c0014ac9 <int_handler+0x14>
c0014ad4:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0014ad9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014adc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014ae2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014ae8:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014aeb:	83 f8 17             	cmp    eax,0x17
c0014aee:	77 13                	ja     c0014b03 <int_handler+0x4e>
c0014af0:	83 ec 08             	sub    esp,0x8
c0014af3:	8b 17                	mov    edx,DWORD PTR [edi]
c0014af5:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014af8:	0f b6 c0             	movzx  eax,al
c0014afb:	50                   	push   eax
c0014afc:	57                   	push   edi
c0014afd:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b00:	83 c4 10             	add    esp,0x10
c0014b03:	83 c3 15             	add    ebx,0x15
c0014b06:	c1 e3 04             	shl    ebx,0x4
c0014b09:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b0d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b14:	31 db                	xor    ebx,ebx
c0014b16:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b1a:	85 c0                	test   eax,eax
c0014b1c:	74 13                	je     c0014b31 <int_handler+0x7c>
c0014b1e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b21:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b25:	74 1c                	je     c0014b43 <int_handler+0x8e>
c0014b27:	83 ec 08             	sub    esp,0x8
c0014b2a:	52                   	push   edx
c0014b2b:	56                   	push   esi
c0014b2c:	ff d0                	call   eax
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	43                   	inc    ebx
c0014b32:	83 fb 04             	cmp    ebx,0x4
c0014b35:	75 df                	jne    c0014b16 <int_handler+0x61>
c0014b37:	83 c4 0c             	add    esp,0xc
c0014b3a:	31 c0                	xor    eax,eax
c0014b3c:	5b                   	pop    ebx
c0014b3d:	31 d2                	xor    edx,edx
c0014b3f:	5e                   	pop    esi
c0014b40:	5f                   	pop    edi
c0014b41:	5d                   	pop    ebp
c0014b42:	c3                   	ret    
c0014b43:	83 ec 08             	sub    esp,0x8
c0014b46:	52                   	push   edx
c0014b47:	56                   	push   esi
c0014b48:	ff d0                	call   eax
c0014b4a:	83 c4 10             	add    esp,0x10
c0014b4d:	83 c4 0c             	add    esp,0xc
c0014b50:	5b                   	pop    ebx
c0014b51:	5e                   	pop    esi
c0014b52:	5f                   	pop    edi
c0014b53:	5d                   	pop    ebp
c0014b54:	c3                   	ret    
c0014b55:	90                   	nop

c0014b56 <InterruptController::InterruptController(char const*)>:
c0014b56:	83 ec 1c             	sub    esp,0x1c
c0014b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b5d:	83 ec 08             	sub    esp,0x8
c0014b60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b64:	50                   	push   eax
c0014b65:	e8 80 f8 ff ff       	call   c00143ea <Device::Device(char const*)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	ba 60 af 02 c0       	mov    edx,0xc002af60
c0014b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b76:	89 10                	mov    DWORD PTR [eax],edx
c0014b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b7c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014b86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b8e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014b96:	7f 5e                	jg     c0014bf6 <InterruptController::InterruptController(char const*)+0xa0>
c0014b98:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014ba0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ba5:	7f 49                	jg     c0014bf0 <InterruptController::InterruptController(char const*)+0x9a>
c0014ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014baf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bba:	01 ca                	add    edx,ecx
c0014bbc:	83 c2 54             	add    edx,0x54
c0014bbf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bcb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bcf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014bd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014bda:	01 ca                	add    edx,ecx
c0014bdc:	81 c2 54 04 00 00    	add    edx,0x454
c0014be2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014bea:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014bee:	eb b0                	jmp    c0014ba0 <InterruptController::InterruptController(char const*)+0x4a>
c0014bf0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014bf4:	eb 98                	jmp    c0014b8e <InterruptController::InterruptController(char const*)+0x38>
c0014bf6:	90                   	nop
c0014bf7:	83 c4 1c             	add    esp,0x1c
c0014bfa:	c3                   	ret    
c0014bfb:	90                   	nop

c0014bfc <InterruptController::~InterruptController()>:
c0014bfc:	83 ec 0c             	sub    esp,0xc
c0014bff:	ba 60 af 02 c0       	mov    edx,0xc002af60
c0014c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c08:	89 10                	mov    DWORD PTR [eax],edx
c0014c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c0e:	83 ec 0c             	sub    esp,0xc
c0014c11:	50                   	push   eax
c0014c12:	e8 b5 f4 ff ff       	call   c00140cc <Device::~Device()>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	90                   	nop
c0014c1b:	83 c4 0c             	add    esp,0xc
c0014c1e:	c3                   	ret    
c0014c1f:	90                   	nop

c0014c20 <InterruptController::~InterruptController()>:
c0014c20:	83 ec 0c             	sub    esp,0xc
c0014c23:	83 ec 0c             	sub    esp,0xc
c0014c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c2a:	e8 cd ff ff ff       	call   c0014bfc <InterruptController::~InterruptController()>
c0014c2f:	83 c4 10             	add    esp,0x10
c0014c32:	83 ec 08             	sub    esp,0x8
c0014c35:	68 58 21 00 00       	push   0x2158
c0014c3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c3e:	e8 b1 e0 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0014c43:	83 c4 10             	add    esp,0x10
c0014c46:	83 c4 0c             	add    esp,0xc
c0014c49:	c3                   	ret    

c0014c4a <displayDebugInfo(regs*)>:
c0014c4a:	55                   	push   ebp
c0014c4b:	57                   	push   edi
c0014c4c:	56                   	push   esi
c0014c4d:	53                   	push   ebx
c0014c4e:	83 ec 24             	sub    esp,0x24
c0014c51:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014c55:	0f 20 c2             	mov    edx,cr0
c0014c58:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014c5c:	0f 20 d7             	mov    edi,cr2
c0014c5f:	0f 20 de             	mov    esi,cr3
c0014c62:	0f 20 e5             	mov    ebp,cr4
c0014c65:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014c68:	68 ce ac 02 c0       	push   0xc002acce
c0014c6d:	e8 62 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c72:	59                   	pop    ecx
c0014c73:	58                   	pop    eax
c0014c74:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014c77:	68 d9 ac 02 c0       	push   0xc002acd9
c0014c7c:	e8 53 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c81:	58                   	pop    eax
c0014c82:	5a                   	pop    edx
c0014c83:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014c86:	68 e4 ac 02 c0       	push   0xc002ace4
c0014c8b:	e8 44 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c90:	59                   	pop    ecx
c0014c91:	58                   	pop    eax
c0014c92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c95:	68 ef ac 02 c0       	push   0xc002acef
c0014c9a:	e8 35 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014c9f:	58                   	pop    eax
c0014ca0:	5a                   	pop    edx
c0014ca1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014ca4:	68 fa ac 02 c0       	push   0xc002acfa
c0014ca9:	e8 26 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cae:	59                   	pop    ecx
c0014caf:	58                   	pop    eax
c0014cb0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014cb3:	68 05 ad 02 c0       	push   0xc002ad05
c0014cb8:	e8 17 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cbd:	58                   	pop    eax
c0014cbe:	5a                   	pop    edx
c0014cbf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014cc2:	68 10 ad 02 c0       	push   0xc002ad10
c0014cc7:	e8 08 e1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014ccc:	59                   	pop    ecx
c0014ccd:	58                   	pop    eax
c0014cce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014cd1:	68 1b ad 02 c0       	push   0xc002ad1b
c0014cd6:	e8 f9 e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cdb:	58                   	pop    eax
c0014cdc:	5a                   	pop    edx
c0014cdd:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014ce0:	68 26 ad 02 c0       	push   0xc002ad26
c0014ce5:	e8 ea e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cea:	59                   	pop    ecx
c0014ceb:	58                   	pop    eax
c0014cec:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cef:	68 35 ad 02 c0       	push   0xc002ad35
c0014cf4:	e8 db e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014cf9:	58                   	pop    eax
c0014cfa:	5a                   	pop    edx
c0014cfb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014cfe:	68 40 ad 02 c0       	push   0xc002ad40
c0014d03:	e8 cc e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014d08:	59                   	pop    ecx
c0014d09:	58                   	pop    eax
c0014d0a:	57                   	push   edi
c0014d0b:	68 4b ad 02 c0       	push   0xc002ad4b
c0014d10:	e8 bf e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014d15:	58                   	pop    eax
c0014d16:	5a                   	pop    edx
c0014d17:	56                   	push   esi
c0014d18:	68 56 ad 02 c0       	push   0xc002ad56
c0014d1d:	e8 b2 e0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0014d22:	59                   	pop    ecx
c0014d23:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014d28:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d2e:	e8 f6 bf ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c0014d33:	58                   	pop    eax
c0014d34:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014d37:	5a                   	pop    edx
c0014d38:	c1 e0 05             	shl    eax,0x5
c0014d3b:	05 40 d2 02 c0       	add    eax,0xc002d240
c0014d40:	50                   	push   eax
c0014d41:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014d46:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d4c:	e8 f7 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d51:	59                   	pop    ecx
c0014d52:	58                   	pop    eax
c0014d53:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014d58:	68 61 ad 02 c0       	push   0xc002ad61
c0014d5d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d63:	e8 e0 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d68:	58                   	pop    eax
c0014d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d6e:	5a                   	pop    edx
c0014d6f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014d72:	83 c0 0c             	add    eax,0xc
c0014d75:	50                   	push   eax
c0014d76:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014d7b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d81:	e8 c2 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d86:	59                   	pop    ecx
c0014d87:	58                   	pop    eax
c0014d88:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014d8d:	68 6a ad 02 c0       	push   0xc002ad6a
c0014d92:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014d98:	e8 ab c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014d9d:	58                   	pop    eax
c0014d9e:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014da3:	5a                   	pop    edx
c0014da4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014da7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dad:	e8 bc c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014db2:	59                   	pop    ecx
c0014db3:	58                   	pop    eax
c0014db4:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014db9:	68 72 ad 02 c0       	push   0xc002ad72
c0014dbe:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dc4:	e8 7f c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014dc9:	58                   	pop    eax
c0014dca:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014dcf:	5a                   	pop    edx
c0014dd0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dd3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014dd9:	e8 90 c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014dde:	59                   	pop    ecx
c0014ddf:	58                   	pop    eax
c0014de0:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014de5:	68 7a ad 02 c0       	push   0xc002ad7a
c0014dea:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014df0:	e8 53 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014df5:	58                   	pop    eax
c0014df6:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014dfb:	5a                   	pop    edx
c0014dfc:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014dff:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e05:	e8 64 c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e0a:	59                   	pop    ecx
c0014e0b:	58                   	pop    eax
c0014e0c:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e11:	68 82 ad 02 c0       	push   0xc002ad82
c0014e16:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e1c:	e8 27 c3 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014e21:	58                   	pop    eax
c0014e22:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e27:	5a                   	pop    edx
c0014e28:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014e2b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e31:	e8 38 c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e36:	59                   	pop    ecx
c0014e37:	58                   	pop    eax
c0014e38:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e3d:	68 8a ad 02 c0       	push   0xc002ad8a
c0014e42:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e48:	e8 fb c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014e4d:	58                   	pop    eax
c0014e4e:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e53:	5a                   	pop    edx
c0014e54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e57:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e5d:	e8 0c c3 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e62:	59                   	pop    ecx
c0014e63:	58                   	pop    eax
c0014e64:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e69:	68 92 ad 02 c0       	push   0xc002ad92
c0014e6e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e74:	e8 cf c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014e79:	58                   	pop    eax
c0014e7a:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e7f:	5a                   	pop    edx
c0014e80:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014e83:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014e89:	e8 e0 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014e8e:	59                   	pop    ecx
c0014e8f:	58                   	pop    eax
c0014e90:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014e95:	68 9a ad 02 c0       	push   0xc002ad9a
c0014e9a:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ea0:	e8 a3 c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014ea5:	58                   	pop    eax
c0014ea6:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014eab:	5a                   	pop    edx
c0014eac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014eb0:	52                   	push   edx
c0014eb1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014eb7:	e8 b2 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014ebc:	59                   	pop    ecx
c0014ebd:	58                   	pop    eax
c0014ebe:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014ec3:	68 a3 ad 02 c0       	push   0xc002ada3
c0014ec8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ece:	e8 75 c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014ed3:	58                   	pop    eax
c0014ed4:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014ed9:	5a                   	pop    edx
c0014eda:	57                   	push   edi
c0014edb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ee1:	e8 88 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014ee6:	59                   	pop    ecx
c0014ee7:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014eec:	5f                   	pop    edi
c0014eed:	68 ab ad 02 c0       	push   0xc002adab
c0014ef2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014ef8:	e8 4b c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014efd:	58                   	pop    eax
c0014efe:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f03:	5a                   	pop    edx
c0014f04:	56                   	push   esi
c0014f05:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f0b:	e8 5e c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f10:	59                   	pop    ecx
c0014f11:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f16:	5e                   	pop    esi
c0014f17:	68 b3 ad 02 c0       	push   0xc002adb3
c0014f1c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f22:	e8 21 c2 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014f27:	5f                   	pop    edi
c0014f28:	58                   	pop    eax
c0014f29:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f2e:	55                   	push   ebp
c0014f2f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f35:	e8 34 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f3a:	58                   	pop    eax
c0014f3b:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f40:	5a                   	pop    edx
c0014f41:	68 bb ad 02 c0       	push   0xc002adbb
c0014f46:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f4c:	e8 f7 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014f51:	0f 21 c0             	mov    eax,db0
c0014f54:	59                   	pop    ecx
c0014f55:	5e                   	pop    esi
c0014f56:	50                   	push   eax
c0014f57:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f5c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f62:	e8 07 c2 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f67:	5f                   	pop    edi
c0014f68:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f6d:	5d                   	pop    ebp
c0014f6e:	68 c4 ad 02 c0       	push   0xc002adc4
c0014f73:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f79:	e8 ca c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014f7e:	0f 21 c8             	mov    eax,db1
c0014f81:	5a                   	pop    edx
c0014f82:	59                   	pop    ecx
c0014f83:	50                   	push   eax
c0014f84:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f89:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014f8f:	e8 da c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014f94:	5e                   	pop    esi
c0014f95:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014f9a:	5f                   	pop    edi
c0014f9b:	68 cc ad 02 c0       	push   0xc002adcc
c0014fa0:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fa6:	e8 9d c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014fab:	0f 21 d0             	mov    eax,db2
c0014fae:	5d                   	pop    ebp
c0014faf:	5a                   	pop    edx
c0014fb0:	50                   	push   eax
c0014fb1:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014fb6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fbc:	e8 ad c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014fc1:	59                   	pop    ecx
c0014fc2:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014fc7:	5e                   	pop    esi
c0014fc8:	68 d4 ad 02 c0       	push   0xc002add4
c0014fcd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fd3:	e8 70 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0014fd8:	0f 21 d8             	mov    eax,db3
c0014fdb:	5f                   	pop    edi
c0014fdc:	5d                   	pop    ebp
c0014fdd:	50                   	push   eax
c0014fde:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014fe3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0014fe9:	e8 80 c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0014fee:	58                   	pop    eax
c0014fef:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0014ff4:	5a                   	pop    edx
c0014ff5:	68 dc ad 02 c0       	push   0xc002addc
c0014ffa:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015000:	e8 43 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0015005:	0f 21 f0             	mov    eax,db6
c0015008:	59                   	pop    ecx
c0015009:	5e                   	pop    esi
c001500a:	50                   	push   eax
c001500b:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0015010:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015016:	e8 53 c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001501b:	5f                   	pop    edi
c001501c:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0015021:	5d                   	pop    ebp
c0015022:	68 e4 ad 02 c0       	push   0xc002ade4
c0015027:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001502d:	e8 16 c1 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0015032:	0f 21 f8             	mov    eax,db7
c0015035:	5a                   	pop    edx
c0015036:	59                   	pop    ecx
c0015037:	50                   	push   eax
c0015038:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001503d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015043:	e8 26 c1 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c0015048:	5e                   	pop    esi
c0015049:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001504c:	e8 0e 85 00 00       	call   c001d55f <Thr::getDriverNameFromAddress(unsigned long)>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	85 c0                	test   eax,eax
c0015056:	74 7d                	je     c00150d5 <displayDebugInfo(regs*)+0x48b>
c0015058:	89 c6                	mov    esi,eax
c001505a:	50                   	push   eax
c001505b:	50                   	push   eax
c001505c:	56                   	push   esi
c001505d:	68 ec ad 02 c0       	push   0xc002adec
c0015062:	e8 6d dd ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015067:	5a                   	pop    edx
c0015068:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001506d:	59                   	pop    ecx
c001506e:	68 fa ad 02 c0       	push   0xc002adfa
c0015073:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c0015079:	e8 ca c0 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001507e:	5f                   	pop    edi
c001507f:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0015084:	5d                   	pop    ebp
c0015085:	56                   	push   esi
c0015086:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001508c:	e8 b7 c0 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c0015091:	58                   	pop    eax
c0015092:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0015097:	5a                   	pop    edx
c0015098:	68 06 ae 02 c0       	push   0xc002ae06
c001509d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c00150a3:	e8 a0 c0 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c00150a8:	59                   	pop    ecx
c00150a9:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c00150ae:	8b b8 26 19 00 00    	mov    edi,DWORD PTR [eax+0x1926]
c00150b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150b7:	e8 da 84 00 00       	call   c001d596 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00150bc:	5b                   	pop    ebx
c00150bd:	5d                   	pop    ebp
c00150be:	50                   	push   eax
c00150bf:	57                   	push   edi
c00150c0:	e8 a9 c0 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c00150c5:	58                   	pop    eax
c00150c6:	5a                   	pop    edx
c00150c7:	56                   	push   esi
c00150c8:	68 12 ae 02 c0       	push   0xc002ae12
c00150cd:	e8 02 dd ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	fa                   	cli    
c00150d6:	f4                   	hlt    
c00150d7:	eb fe                	jmp    c00150d7 <displayDebugInfo(regs*)+0x48d>

c00150d9 <x87EmulHandler(regs*, void*)>:
c00150d9:	53                   	push   ebx
c00150da:	83 ec 14             	sub    esp,0x14
c00150dd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00150e1:	53                   	push   ebx
c00150e2:	e8 51 a8 00 00       	call   c001f938 <Vm::x87Handler(regs*)>
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	84 c0                	test   al,al
c00150ec:	74 05                	je     c00150f3 <x87EmulHandler(regs*, void*)+0x1a>
c00150ee:	83 c4 08             	add    esp,0x8
c00150f1:	5b                   	pop    ebx
c00150f2:	c3                   	ret    
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	68 22 ae 02 c0       	push   0xc002ae22
c00150fb:	e8 d4 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015103:	e8 42 fb ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c0015108 <gpFault(regs*, void*)>:
c0015108:	53                   	push   ebx
c0015109:	83 ec 14             	sub    esp,0x14
c001510c:	c7 05 38 e4 02 c0 87 ec 01 c0 	mov    DWORD PTR ds:0xc002e438,0xc001ec87
c0015116:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001511a:	53                   	push   ebx
c001511b:	e8 67 9b 00 00       	call   c001ec87 <Vm::faultHandler(regs*)>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	84 c0                	test   al,al
c0015125:	74 05                	je     c001512c <gpFault(regs*, void*)+0x24>
c0015127:	83 c4 08             	add    esp,0x8
c001512a:	5b                   	pop    ebx
c001512b:	c3                   	ret    
c001512c:	83 ec 0c             	sub    esp,0xc
c001512f:	68 38 ae 02 c0       	push   0xc002ae38
c0015134:	e8 9b dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015139:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513c:	e8 09 fb ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c0015141 <pgFault(regs*, void*)>:
c0015141:	83 ec 14             	sub    esp,0x14
c0015144:	0f 20 d0             	mov    eax,cr2
c0015147:	50                   	push   eax
c0015148:	68 53 ae 02 c0       	push   0xc002ae53
c001514d:	e8 82 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015152:	c7 04 24 64 ae 02 c0 	mov    DWORD PTR [esp],0xc002ae64
c0015159:	e8 76 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001515e:	58                   	pop    eax
c001515f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015163:	e8 e2 fa ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c0015168 <otherISRHandler(regs*, void*)>:
c0015168:	53                   	push   ebx
c0015169:	83 ec 0c             	sub    esp,0xc
c001516c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015170:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015173:	50                   	push   eax
c0015174:	50                   	push   eax
c0015175:	68 76 ae 02 c0       	push   0xc002ae76
c001517a:	e8 55 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001517f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015182:	e8 c3 fa ff ff       	call   c0014c4a <displayDebugInfo(regs*)>

c0015187 <opcodeFault(regs*, void*)>:
c0015187:	55                   	push   ebp
c0015188:	89 e5                	mov    ebp,esp
c001518a:	56                   	push   esi
c001518b:	53                   	push   ebx
c001518c:	83 ec 40             	sub    esp,0x40
c001518f:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0015194:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001519a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00151a0:	84 c0                	test   al,al
c00151a2:	74 24                	je     c00151c8 <opcodeFault(regs*, void*)+0x41>
c00151a4:	83 ec 0c             	sub    esp,0xc
c00151a7:	68 94 ae 02 c0       	push   0xc002ae94
c00151ac:	e8 23 dc ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ba:	8d 50 19             	lea    edx,[eax+0x19]
c00151bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151c3:	e9 be 05 00 00       	jmp    c0015786 <opcodeFault(regs*, void*)+0x5ff>
c00151c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00151d1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00151d5:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00151d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151df:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00151e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e5:	8a 00                	mov    al,BYTE PTR [eax]
c00151e7:	3c f0                	cmp    al,0xf0
c00151e9:	75 17                	jne    c0015202 <opcodeFault(regs*, void*)+0x7b>
c00151eb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151f4:	8d 50 01             	lea    edx,[eax+0x1]
c00151f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151fd:	e9 da 00 00 00       	jmp    c00152dc <opcodeFault(regs*, void*)+0x155>
c0015202:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015205:	8a 00                	mov    al,BYTE PTR [eax]
c0015207:	3c f2                	cmp    al,0xf2
c0015209:	74 09                	je     c0015214 <opcodeFault(regs*, void*)+0x8d>
c001520b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001520e:	8a 00                	mov    al,BYTE PTR [eax]
c0015210:	3c f3                	cmp    al,0xf3
c0015212:	75 1b                	jne    c001522f <opcodeFault(regs*, void*)+0xa8>
c0015214:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015218:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001521b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015221:	8d 50 01             	lea    edx,[eax+0x1]
c0015224:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015227:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001522a:	e9 ad 00 00 00       	jmp    c00152dc <opcodeFault(regs*, void*)+0x155>
c001522f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015232:	8a 00                	mov    al,BYTE PTR [eax]
c0015234:	3c 66                	cmp    al,0x66
c0015236:	75 1f                	jne    c0015257 <opcodeFault(regs*, void*)+0xd0>
c0015238:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001523c:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015240:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015246:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015249:	8d 50 01             	lea    edx,[eax+0x1]
c001524c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015252:	e9 85 00 00 00       	jmp    c00152dc <opcodeFault(regs*, void*)+0x155>
c0015257:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001525a:	8a 00                	mov    al,BYTE PTR [eax]
c001525c:	3c 67                	cmp    al,0x67
c001525e:	75 18                	jne    c0015278 <opcodeFault(regs*, void*)+0xf1>
c0015260:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015264:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001526d:	8d 50 01             	lea    edx,[eax+0x1]
c0015270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015273:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015276:	eb 64                	jmp    c00152dc <opcodeFault(regs*, void*)+0x155>
c0015278:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527b:	8a 00                	mov    al,BYTE PTR [eax]
c001527d:	3c 2e                	cmp    al,0x2e
c001527f:	74 09                	je     c001528a <opcodeFault(regs*, void*)+0x103>
c0015281:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015284:	8a 00                	mov    al,BYTE PTR [eax]
c0015286:	3c 3e                	cmp    al,0x3e
c0015288:	75 18                	jne    c00152a2 <opcodeFault(regs*, void*)+0x11b>
c001528a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001528e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015294:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015297:	8d 50 01             	lea    edx,[eax+0x1]
c001529a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152a0:	eb 3a                	jmp    c00152dc <opcodeFault(regs*, void*)+0x155>
c00152a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a5:	8a 00                	mov    al,BYTE PTR [eax]
c00152a7:	3c 36                	cmp    al,0x36
c00152a9:	74 1b                	je     c00152c6 <opcodeFault(regs*, void*)+0x13f>
c00152ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ae:	8a 00                	mov    al,BYTE PTR [eax]
c00152b0:	3c 26                	cmp    al,0x26
c00152b2:	74 12                	je     c00152c6 <opcodeFault(regs*, void*)+0x13f>
c00152b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b7:	8a 00                	mov    al,BYTE PTR [eax]
c00152b9:	3c 64                	cmp    al,0x64
c00152bb:	74 09                	je     c00152c6 <opcodeFault(regs*, void*)+0x13f>
c00152bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152c0:	8a 00                	mov    al,BYTE PTR [eax]
c00152c2:	3c 65                	cmp    al,0x65
c00152c4:	75 16                	jne    c00152dc <opcodeFault(regs*, void*)+0x155>
c00152c6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152ca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d3:	8d 50 01             	lea    edx,[eax+0x1]
c00152d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152dc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152df:	8a 00                	mov    al,BYTE PTR [eax]
c00152e1:	3c 0f                	cmp    al,0xf
c00152e3:	0f 85 ad 00 00 00    	jne    c0015396 <opcodeFault(regs*, void*)+0x20f>
c00152e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ec:	40                   	inc    eax
c00152ed:	8a 00                	mov    al,BYTE PTR [eax]
c00152ef:	3c c2                	cmp    al,0xc2
c00152f1:	74 0e                	je     c0015301 <opcodeFault(regs*, void*)+0x17a>
c00152f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f6:	40                   	inc    eax
c00152f7:	8a 00                	mov    al,BYTE PTR [eax]
c00152f9:	3c c3                	cmp    al,0xc3
c00152fb:	0f 85 95 00 00 00    	jne    c0015396 <opcodeFault(regs*, void*)+0x20f>
c0015301:	83 ec 0c             	sub    esp,0xc
c0015304:	68 b7 ae 02 c0       	push   0xc002aeb7
c0015309:	e8 c6 da ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001530e:	83 c4 10             	add    esp,0x10
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015317:	8d 50 01             	lea    edx,[eax+0x1]
c001531a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015320:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015323:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015326:	8a 00                	mov    al,BYTE PTR [eax]
c0015328:	8d 50 fe             	lea    edx,[eax-0x2]
c001532b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532e:	88 10                	mov    BYTE PTR [eax],dl
c0015330:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015333:	50                   	push   eax
c0015334:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015337:	50                   	push   eax
c0015338:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001533b:	50                   	push   eax
c001533c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001533f:	e8 00 48 00 00       	call   c0019b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015344:	83 c4 10             	add    esp,0x10
c0015347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001534d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015350:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015353:	01 d0                	add    eax,edx
c0015355:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015361:	48                   	dec    eax
c0015362:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015368:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001536b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015371:	83 ec 04             	sub    esp,0x4
c0015374:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015377:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001537a:	50                   	push   eax
c001537b:	e8 34 ae fe ff       	call   c00001b4 <voodooXADD>
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015386:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015389:	01 c2                	add    edx,eax
c001538b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015391:	e9 f0 03 00 00       	jmp    c0015786 <opcodeFault(regs*, void*)+0x5ff>
c0015396:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015399:	8a 00                	mov    al,BYTE PTR [eax]
c001539b:	3c 0f                	cmp    al,0xf
c001539d:	0f 85 8b 01 00 00    	jne    c001552e <opcodeFault(regs*, void*)+0x3a7>
c00153a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a6:	40                   	inc    eax
c00153a7:	8a 00                	mov    al,BYTE PTR [eax]
c00153a9:	3c c7                	cmp    al,0xc7
c00153ab:	0f 86 7d 01 00 00    	jbe    c001552e <opcodeFault(regs*, void*)+0x3a7>
c00153b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b4:	40                   	inc    eax
c00153b5:	8a 00                	mov    al,BYTE PTR [eax]
c00153b7:	3c cf                	cmp    al,0xcf
c00153b9:	0f 87 6f 01 00 00    	ja     c001552e <opcodeFault(regs*, void*)+0x3a7>
c00153bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c2:	40                   	inc    eax
c00153c3:	8a 00                	mov    al,BYTE PTR [eax]
c00153c5:	83 c0 38             	add    eax,0x38
c00153c8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00153cb:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00153cf:	75 0b                	jne    c00153dc <opcodeFault(regs*, void*)+0x255>
c00153d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00153d7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153da:	eb 75                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c00153dc:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00153e0:	75 0b                	jne    c00153ed <opcodeFault(regs*, void*)+0x266>
c00153e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00153e8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153eb:	eb 64                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c00153ed:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00153f1:	75 0b                	jne    c00153fe <opcodeFault(regs*, void*)+0x277>
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00153f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00153fc:	eb 53                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c00153fe:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015402:	75 0b                	jne    c001540f <opcodeFault(regs*, void*)+0x288>
c0015404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015407:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001540a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001540d:	eb 42                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c001540f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015413:	75 0b                	jne    c0015420 <opcodeFault(regs*, void*)+0x299>
c0015415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015418:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001541b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001541e:	eb 31                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c0015420:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015424:	75 0b                	jne    c0015431 <opcodeFault(regs*, void*)+0x2aa>
c0015426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015429:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001542c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001542f:	eb 20                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c0015431:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015435:	75 0b                	jne    c0015442 <opcodeFault(regs*, void*)+0x2bb>
c0015437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001543d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015440:	eb 0f                	jmp    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c0015442:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015446:	75 09                	jne    c0015451 <opcodeFault(regs*, void*)+0x2ca>
c0015448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001544b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001544e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015451:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015455:	74 10                	je     c0015467 <opcodeFault(regs*, void*)+0x2e0>
c0015457:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001545e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015465:	eb 2d                	jmp    c0015494 <opcodeFault(regs*, void*)+0x30d>
c0015467:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001546a:	c1 e0 18             	shl    eax,0x18
c001546d:	89 c2                	mov    edx,eax
c001546f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015472:	c1 e0 08             	shl    eax,0x8
c0015475:	25 00 00 ff 00       	and    eax,0xff0000
c001547a:	09 c2                	or     edx,eax
c001547c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001547f:	c1 e8 08             	shr    eax,0x8
c0015482:	25 00 ff 00 00       	and    eax,0xff00
c0015487:	09 c2                	or     edx,eax
c0015489:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001548c:	c1 e8 18             	shr    eax,0x18
c001548f:	09 d0                	or     eax,edx
c0015491:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015494:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015498:	75 0b                	jne    c00154a5 <opcodeFault(regs*, void*)+0x31e>
c001549a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154a0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00154a3:	eb 75                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c00154a5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154a9:	75 0b                	jne    c00154b6 <opcodeFault(regs*, void*)+0x32f>
c00154ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154b1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00154b4:	eb 64                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c00154b6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154ba:	75 0b                	jne    c00154c7 <opcodeFault(regs*, void*)+0x340>
c00154bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154c2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00154c5:	eb 53                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c00154c7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154cb:	75 0b                	jne    c00154d8 <opcodeFault(regs*, void*)+0x351>
c00154cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154d3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00154d6:	eb 42                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c00154d8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154dc:	75 0b                	jne    c00154e9 <opcodeFault(regs*, void*)+0x362>
c00154de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154e4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00154e7:	eb 31                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c00154e9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154ed:	75 0b                	jne    c00154fa <opcodeFault(regs*, void*)+0x373>
c00154ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00154f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00154f8:	eb 20                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c00154fa:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00154fe:	75 0b                	jne    c001550b <opcodeFault(regs*, void*)+0x384>
c0015500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015503:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015506:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015509:	eb 0f                	jmp    c001551a <opcodeFault(regs*, void*)+0x393>
c001550b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001550f:	75 09                	jne    c001551a <opcodeFault(regs*, void*)+0x393>
c0015511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015514:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015517:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001551a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015520:	8d 50 02             	lea    edx,[eax+0x2]
c0015523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015526:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015529:	e9 58 02 00 00       	jmp    c0015786 <opcodeFault(regs*, void*)+0x5ff>
c001552e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015531:	8a 00                	mov    al,BYTE PTR [eax]
c0015533:	3c 0f                	cmp    al,0xf
c0015535:	0f 85 76 01 00 00    	jne    c00156b1 <opcodeFault(regs*, void*)+0x52a>
c001553b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001553e:	40                   	inc    eax
c001553f:	8a 00                	mov    al,BYTE PTR [eax]
c0015541:	3c c7                	cmp    al,0xc7
c0015543:	0f 85 68 01 00 00    	jne    c00156b1 <opcodeFault(regs*, void*)+0x52a>
c0015549:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001554c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015552:	8d 50 01             	lea    edx,[eax+0x1]
c0015555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015558:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001555b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001555e:	50                   	push   eax
c001555f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015562:	50                   	push   eax
c0015563:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015566:	50                   	push   eax
c0015567:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001556a:	e8 d5 45 00 00       	call   c0019b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015575:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015578:	83 f0 01             	xor    eax,0x1
c001557b:	84 c0                	test   al,al
c001557d:	0f 84 2e 01 00 00    	je     c00156b1 <opcodeFault(regs*, void*)+0x52a>
c0015583:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015586:	3c 01                	cmp    al,0x1
c0015588:	0f 85 23 01 00 00    	jne    c00156b1 <opcodeFault(regs*, void*)+0x52a>
c001558e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015591:	83 f0 01             	xor    eax,0x1
c0015594:	84 c0                	test   al,al
c0015596:	0f 84 15 01 00 00    	je     c00156b1 <opcodeFault(regs*, void*)+0x52a>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00155a2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155a5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00155ac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00155af:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00155b2:	89 c2                	mov    edx,eax
c00155b4:	b8 00 00 00 00       	mov    eax,0x0
c00155b9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00155bc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00155bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00155c5:	ba 00 00 00 00       	mov    edx,0x0
c00155ca:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00155cd:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00155d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00155d6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155d9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00155e0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00155e3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00155e6:	89 c2                	mov    edx,eax
c00155e8:	b8 00 00 00 00       	mov    eax,0x0
c00155ed:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00155f0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00155f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00155f9:	ba 00 00 00 00       	mov    edx,0x0
c00155fe:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015601:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015604:	e8 6e 86 00 00       	call   c001dc77 <lockScheduler()>
c0015609:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001560c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001560f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015611:	89 c1                	mov    ecx,eax
c0015613:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015616:	89 cb                	mov    ebx,ecx
c0015618:	89 d0                	mov    eax,edx
c001561a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001561d:	89 c6                	mov    esi,eax
c001561f:	89 f0                	mov    eax,esi
c0015621:	09 d8                	or     eax,ebx
c0015623:	85 c0                	test   eax,eax
c0015625:	75 21                	jne    c0015648 <opcodeFault(regs*, void*)+0x4c1>
c0015627:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001562a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001562d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015630:	89 01                	mov    DWORD PTR [ecx],eax
c0015632:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015638:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001563b:	83 c8 40             	or     eax,0x40
c001563e:	89 c2                	mov    edx,eax
c0015640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015643:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015646:	eb 3e                	jmp    c0015686 <opcodeFault(regs*, void*)+0x4ff>
c0015648:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001564b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001564e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015650:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015653:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015656:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001565f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015662:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015665:	89 d0                	mov    eax,edx
c0015667:	31 d2                	xor    edx,edx
c0015669:	89 c3                	mov    ebx,eax
c001566b:	89 d6                	mov    esi,edx
c001566d:	89 da                	mov    edx,ebx
c001566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015672:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015678:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001567b:	83 e0 bf             	and    eax,0xffffffbf
c001567e:	89 c2                	mov    edx,eax
c0015680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015683:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015686:	e8 ee 85 00 00       	call   c001dc79 <unlockScheduler()>
c001568b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015691:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015694:	01 c2                	add    edx,eax
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001569c:	83 ec 0c             	sub    esp,0xc
c001569f:	68 c6 ae 02 c0       	push   0xc002aec6
c00156a4:	e8 2b d7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00156a9:	83 c4 10             	add    esp,0x10
c00156ac:	e9 d5 00 00 00       	jmp    c0015786 <opcodeFault(regs*, void*)+0x5ff>
c00156b1:	83 ec 0c             	sub    esp,0xc
c00156b4:	68 d9 ae 02 c0       	push   0xc002aed9
c00156b9:	e8 16 d7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00156be:	83 c4 10             	add    esp,0x10
c00156c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156cd:	c1 e0 04             	shl    eax,0x4
c00156d0:	01 d0                	add    eax,edx
c00156d2:	83 c0 03             	add    eax,0x3
c00156d5:	8a 00                	mov    al,BYTE PTR [eax]
c00156d7:	0f b6 d8             	movzx  ebx,al
c00156da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156dd:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156e6:	c1 e0 04             	shl    eax,0x4
c00156e9:	01 d0                	add    eax,edx
c00156eb:	83 c0 02             	add    eax,0x2
c00156ee:	8a 00                	mov    al,BYTE PTR [eax]
c00156f0:	0f b6 c8             	movzx  ecx,al
c00156f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00156f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00156ff:	c1 e0 04             	shl    eax,0x4
c0015702:	01 d0                	add    eax,edx
c0015704:	40                   	inc    eax
c0015705:	8a 00                	mov    al,BYTE PTR [eax]
c0015707:	0f b6 d0             	movzx  edx,al
c001570a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015713:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015716:	c1 e0 04             	shl    eax,0x4
c0015719:	01 f0                	add    eax,esi
c001571b:	8a 00                	mov    al,BYTE PTR [eax]
c001571d:	0f b6 c0             	movzx  eax,al
c0015720:	83 ec 0c             	sub    esp,0xc
c0015723:	53                   	push   ebx
c0015724:	51                   	push   ecx
c0015725:	52                   	push   edx
c0015726:	50                   	push   eax
c0015727:	68 ec ae 02 c0       	push   0xc002aeec
c001572c:	e8 a3 d6 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015731:	83 c4 20             	add    esp,0x20
c0015734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015737:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001573a:	83 c0 03             	add    eax,0x3
c001573d:	8a 00                	mov    al,BYTE PTR [eax]
c001573f:	0f b6 d8             	movzx  ebx,al
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015748:	83 c0 02             	add    eax,0x2
c001574b:	8a 00                	mov    al,BYTE PTR [eax]
c001574d:	0f b6 c8             	movzx  ecx,al
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015756:	40                   	inc    eax
c0015757:	8a 00                	mov    al,BYTE PTR [eax]
c0015759:	0f b6 d0             	movzx  edx,al
c001575c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015762:	8a 00                	mov    al,BYTE PTR [eax]
c0015764:	0f b6 c0             	movzx  eax,al
c0015767:	83 ec 0c             	sub    esp,0xc
c001576a:	53                   	push   ebx
c001576b:	51                   	push   ecx
c001576c:	52                   	push   edx
c001576d:	50                   	push   eax
c001576e:	68 14 af 02 c0       	push   0xc002af14
c0015773:	e8 5c d6 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0015778:	83 c4 20             	add    esp,0x20
c001577b:	83 ec 0c             	sub    esp,0xc
c001577e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015781:	e8 c4 f4 ff ff       	call   c0014c4a <displayDebugInfo(regs*)>
c0015786:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015789:	5b                   	pop    ebx
c001578a:	5e                   	pop    esi
c001578b:	5d                   	pop    ebp
c001578c:	c3                   	ret    

c001578d <displayProgramFault(char const*)>:
c001578d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015792:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015795:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001579b:	85 c0                	test   eax,eax
c001579d:	74 15                	je     c00157b4 <displayProgramFault(char const*)+0x27>
c001579f:	83 ec 0c             	sub    esp,0xc
c00157a2:	6a 04                	push   0x4
c00157a4:	6a 0f                	push   0xf
c00157a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00157aa:	50                   	push   eax
c00157ab:	e8 5a b6 ff ff       	call   c0010e0a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00157b0:	83 c4 1c             	add    esp,0x1c
c00157b3:	c3                   	ret    
c00157b4:	c3                   	ret    

c00157b5 <setupInterruptController()>:
c00157b5:	55                   	push   ebp
c00157b6:	89 e5                	mov    ebp,esp
c00157b8:	53                   	push   ebx
c00157b9:	83 ec 24             	sub    esp,0x24
c00157bc:	b8 00 00 00 00       	mov    eax,0x0
c00157c1:	85 c0                	test   eax,eax
c00157c3:	0f 95 c0             	setne  al
c00157c6:	84 c0                	test   al,al
c00157c8:	74 5b                	je     c0015825 <setupInterruptController()+0x70>
c00157ca:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00157d1:	83 ec 0c             	sub    esp,0xc
c00157d4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00157d7:	e8 64 a0 ff ff       	call   c000f840 <malloc>
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	89 c3                	mov    ebx,eax
c00157e1:	83 ec 0c             	sub    esp,0xc
c00157e4:	53                   	push   ebx
c00157e5:	e8 12 00 01 00       	call   c00257fc <APIC::APIC()>
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00157f0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00157f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00157f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f8:	83 c0 08             	add    eax,0x8
c00157fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00157fd:	6a 00                	push   0x0
c00157ff:	6a 00                	push   0x0
c0015801:	6a 00                	push   0x0
c0015803:	52                   	push   edx
c0015804:	ff d0                	call   eax
c0015806:	83 c4 10             	add    esp,0x10
c0015809:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001580e:	83 ec 08             	sub    esp,0x8
c0015811:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015814:	50                   	push   eax
c0015815:	e8 e0 e9 ff ff       	call   c00141fa <Device::addChild(Device*)>
c001581a:	83 c4 10             	add    esp,0x10
c001581d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015820:	e9 6b 03 00 00       	jmp    c0015b90 <setupInterruptController()+0x3db>
c0015825:	a0 20 0c 03 c0       	mov    al,ds:0xc0030c20
c001582a:	0f b6 c0             	movzx  eax,al
c001582d:	83 ec 08             	sub    esp,0x8
c0015830:	50                   	push   eax
c0015831:	68 39 af 02 c0       	push   0xc002af39
c0015836:	e8 99 d5 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0015843:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015849:	83 e0 01             	and    eax,0x1
c001584c:	84 c0                	test   al,al
c001584e:	0f 95 c0             	setne  al
c0015851:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015854:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001585b:	83 ec 0c             	sub    esp,0xc
c001585e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015861:	e8 da 9f ff ff       	call   c000f840 <malloc>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	89 c3                	mov    ebx,eax
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	53                   	push   ebx
c001586f:	e8 e0 04 01 00       	call   c0025d54 <PIC::PIC()>
c0015874:	83 c4 10             	add    esp,0x10
c0015877:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001587a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001587d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015880:	8b 00                	mov    eax,DWORD PTR [eax]
c0015882:	83 c0 08             	add    eax,0x8
c0015885:	8b 00                	mov    eax,DWORD PTR [eax]
c0015887:	6a 00                	push   0x0
c0015889:	6a 00                	push   0x0
c001588b:	6a 00                	push   0x0
c001588d:	52                   	push   edx
c001588e:	ff d0                	call   eax
c0015890:	83 c4 10             	add    esp,0x10
c0015893:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015897:	74 73                	je     c001590c <setupInterruptController()+0x157>
c0015899:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001589c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001589f:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a1:	83 c0 0c             	add    eax,0xc
c00158a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a6:	6a 00                	push   0x0
c00158a8:	6a 00                	push   0x0
c00158aa:	6a 00                	push   0x0
c00158ac:	52                   	push   edx
c00158ad:	ff d0                	call   eax
c00158af:	83 c4 10             	add    esp,0x10
c00158b2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158b6:	74 15                	je     c00158cd <setupInterruptController()+0x118>
c00158b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bd:	83 c0 04             	add    eax,0x4
c00158c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00158c2:	83 ec 0c             	sub    esp,0xc
c00158c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158c8:	ff d0                	call   eax
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00158d4:	83 ec 0c             	sub    esp,0xc
c00158d7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00158da:	e8 61 9f ff ff       	call   c000f840 <malloc>
c00158df:	83 c4 10             	add    esp,0x10
c00158e2:	89 c3                	mov    ebx,eax
c00158e4:	83 ec 0c             	sub    esp,0xc
c00158e7:	53                   	push   ebx
c00158e8:	e8 0f ff 00 00       	call   c00257fc <APIC::APIC()>
c00158ed:	83 c4 10             	add    esp,0x10
c00158f0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00158f3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00158f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fb:	83 c0 08             	add    eax,0x8
c00158fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015900:	6a 00                	push   0x0
c0015902:	6a 00                	push   0x0
c0015904:	6a 00                	push   0x0
c0015906:	52                   	push   edx
c0015907:	ff d0                	call   eax
c0015909:	83 c4 10             	add    esp,0x10
c001590c:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0015911:	83 ec 08             	sub    esp,0x8
c0015914:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015917:	50                   	push   eax
c0015918:	e8 dd e8 ff ff       	call   c00141fa <Device::addChild(Device*)>
c001591d:	83 c4 10             	add    esp,0x10
c0015920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015923:	8b 00                	mov    eax,DWORD PTR [eax]
c0015925:	83 c0 24             	add    eax,0x24
c0015928:	8b 00                	mov    eax,DWORD PTR [eax]
c001592a:	6a 00                	push   0x0
c001592c:	68 68 51 01 c0       	push   0xc0015168
c0015931:	6a 00                	push   0x0
c0015933:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015936:	ff d0                	call   eax
c0015938:	83 c4 10             	add    esp,0x10
c001593b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001593e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015940:	83 c0 24             	add    eax,0x24
c0015943:	8b 00                	mov    eax,DWORD PTR [eax]
c0015945:	6a 00                	push   0x0
c0015947:	68 68 51 01 c0       	push   0xc0015168
c001594c:	6a 01                	push   0x1
c001594e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015951:	ff d0                	call   eax
c0015953:	83 c4 10             	add    esp,0x10
c0015956:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015959:	8b 00                	mov    eax,DWORD PTR [eax]
c001595b:	83 c0 24             	add    eax,0x24
c001595e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015960:	6a 00                	push   0x0
c0015962:	68 a7 4a 01 c0       	push   0xc0014aa7
c0015967:	6a 02                	push   0x2
c0015969:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001596c:	ff d0                	call   eax
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015974:	8b 00                	mov    eax,DWORD PTR [eax]
c0015976:	83 c0 24             	add    eax,0x24
c0015979:	8b 00                	mov    eax,DWORD PTR [eax]
c001597b:	6a 00                	push   0x0
c001597d:	68 68 51 01 c0       	push   0xc0015168
c0015982:	6a 03                	push   0x3
c0015984:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015987:	ff d0                	call   eax
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001598f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015991:	83 c0 24             	add    eax,0x24
c0015994:	8b 00                	mov    eax,DWORD PTR [eax]
c0015996:	6a 00                	push   0x0
c0015998:	68 68 51 01 c0       	push   0xc0015168
c001599d:	6a 04                	push   0x4
c001599f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159a2:	ff d0                	call   eax
c00159a4:	83 c4 10             	add    esp,0x10
c00159a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00159ac:	83 c0 24             	add    eax,0x24
c00159af:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b1:	6a 00                	push   0x0
c00159b3:	68 68 51 01 c0       	push   0xc0015168
c00159b8:	6a 05                	push   0x5
c00159ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159bd:	ff d0                	call   eax
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c7:	83 c0 24             	add    eax,0x24
c00159ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00159cc:	6a 00                	push   0x0
c00159ce:	68 87 51 01 c0       	push   0xc0015187
c00159d3:	6a 06                	push   0x6
c00159d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159d8:	ff d0                	call   eax
c00159da:	83 c4 10             	add    esp,0x10
c00159dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e2:	83 c0 24             	add    eax,0x24
c00159e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159e7:	6a 00                	push   0x0
c00159e9:	68 d9 50 01 c0       	push   0xc00150d9
c00159ee:	6a 07                	push   0x7
c00159f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159f3:	ff d0                	call   eax
c00159f5:	83 c4 10             	add    esp,0x10
c00159f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fd:	83 c0 24             	add    eax,0x24
c0015a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a02:	6a 00                	push   0x0
c0015a04:	68 c2 48 01 c0       	push   0xc00148c2
c0015a09:	6a 08                	push   0x8
c0015a0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a0e:	ff d0                	call   eax
c0015a10:	83 c4 10             	add    esp,0x10
c0015a13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a18:	83 c0 24             	add    eax,0x24
c0015a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1d:	6a 00                	push   0x0
c0015a1f:	68 68 51 01 c0       	push   0xc0015168
c0015a24:	6a 09                	push   0x9
c0015a26:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a29:	ff d0                	call   eax
c0015a2b:	83 c4 10             	add    esp,0x10
c0015a2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a33:	83 c0 24             	add    eax,0x24
c0015a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a38:	6a 00                	push   0x0
c0015a3a:	68 68 51 01 c0       	push   0xc0015168
c0015a3f:	6a 0a                	push   0xa
c0015a41:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a44:	ff d0                	call   eax
c0015a46:	83 c4 10             	add    esp,0x10
c0015a49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4e:	83 c0 24             	add    eax,0x24
c0015a51:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a53:	6a 00                	push   0x0
c0015a55:	68 68 51 01 c0       	push   0xc0015168
c0015a5a:	6a 0b                	push   0xb
c0015a5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5f:	ff d0                	call   eax
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a69:	83 c0 24             	add    eax,0x24
c0015a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6e:	6a 00                	push   0x0
c0015a70:	68 68 51 01 c0       	push   0xc0015168
c0015a75:	6a 0c                	push   0xc
c0015a77:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a7a:	ff d0                	call   eax
c0015a7c:	83 c4 10             	add    esp,0x10
c0015a7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a84:	83 c0 24             	add    eax,0x24
c0015a87:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a89:	6a 00                	push   0x0
c0015a8b:	68 08 51 01 c0       	push   0xc0015108
c0015a90:	6a 0d                	push   0xd
c0015a92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a95:	ff d0                	call   eax
c0015a97:	83 c4 10             	add    esp,0x10
c0015a9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9f:	83 c0 24             	add    eax,0x24
c0015aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa4:	6a 00                	push   0x0
c0015aa6:	68 41 51 01 c0       	push   0xc0015141
c0015aab:	6a 0e                	push   0xe
c0015aad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ab0:	ff d0                	call   eax
c0015ab2:	83 c4 10             	add    esp,0x10
c0015ab5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aba:	83 c0 24             	add    eax,0x24
c0015abd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abf:	6a 00                	push   0x0
c0015ac1:	68 68 51 01 c0       	push   0xc0015168
c0015ac6:	6a 0f                	push   0xf
c0015ac8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015acb:	ff d0                	call   eax
c0015acd:	83 c4 10             	add    esp,0x10
c0015ad0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad5:	83 c0 24             	add    eax,0x24
c0015ad8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ada:	6a 00                	push   0x0
c0015adc:	68 68 51 01 c0       	push   0xc0015168
c0015ae1:	6a 10                	push   0x10
c0015ae3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae6:	ff d0                	call   eax
c0015ae8:	83 c4 10             	add    esp,0x10
c0015aeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af0:	83 c0 24             	add    eax,0x24
c0015af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af5:	6a 00                	push   0x0
c0015af7:	68 68 51 01 c0       	push   0xc0015168
c0015afc:	6a 11                	push   0x11
c0015afe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b01:	ff d0                	call   eax
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0b:	83 c0 24             	add    eax,0x24
c0015b0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b10:	6a 00                	push   0x0
c0015b12:	68 68 51 01 c0       	push   0xc0015168
c0015b17:	6a 12                	push   0x12
c0015b19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1c:	ff d0                	call   eax
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b26:	83 c0 24             	add    eax,0x24
c0015b29:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2b:	6a 00                	push   0x0
c0015b2d:	68 68 51 01 c0       	push   0xc0015168
c0015b32:	6a 13                	push   0x13
c0015b34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b37:	ff d0                	call   eax
c0015b39:	83 c4 10             	add    esp,0x10
c0015b3c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b41:	83 c0 24             	add    eax,0x24
c0015b44:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b46:	6a 00                	push   0x0
c0015b48:	68 68 51 01 c0       	push   0xc0015168
c0015b4d:	6a 14                	push   0x14
c0015b4f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b52:	ff d0                	call   eax
c0015b54:	83 c4 10             	add    esp,0x10
c0015b57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5c:	83 c0 24             	add    eax,0x24
c0015b5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b61:	6a 00                	push   0x0
c0015b63:	68 68 51 01 c0       	push   0xc0015168
c0015b68:	6a 1e                	push   0x1e
c0015b6a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6d:	ff d0                	call   eax
c0015b6f:	83 c4 10             	add    esp,0x10
c0015b72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b77:	83 c0 24             	add    eax,0x24
c0015b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7c:	6a 00                	push   0x0
c0015b7e:	68 07 c6 01 c0       	push   0xc001c607
c0015b83:	6a 60                	push   0x60
c0015b85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b88:	ff d0                	call   eax
c0015b8a:	83 c4 10             	add    esp,0x10
c0015b8d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015b93:	c9                   	leave  
c0015b94:	c3                   	ret    
c0015b95:	90                   	nop

c0015b96 <InterruptController::convertLegacyIRQNumber(int)>:
c0015b96:	55                   	push   ebp
c0015b97:	89 e5                	mov    ebp,esp
c0015b99:	83 ec 08             	sub    esp,0x8
c0015b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9f:	83 ec 0c             	sub    esp,0xc
c0015ba2:	50                   	push   eax
c0015ba3:	e8 3e e9 ff ff       	call   c00144e6 <Device::getName()>
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	8a 00                	mov    al,BYTE PTR [eax]
c0015bad:	3c 41                	cmp    al,0x41
c0015baf:	0f 94 c0             	sete   al
c0015bb2:	84 c0                	test   al,al
c0015bb4:	74 28                	je     c0015bde <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bb6:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015bba:	7f 12                	jg     c0015bce <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015bbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bbf:	05 e0 d4 02 c0       	add    eax,0xc002d4e0
c0015bc4:	8a 00                	mov    al,BYTE PTR [eax]
c0015bc6:	0f b6 c0             	movzx  eax,al
c0015bc9:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015bcc:	eb 10                	jmp    c0015bde <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015bce:	83 ec 0c             	sub    esp,0xc
c0015bd1:	68 20 ac 02 c0       	push   0xc002ac20
c0015bd6:	e8 a2 48 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0015bdb:	83 c4 10             	add    esp,0x10
c0015bde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015be1:	c9                   	leave  
c0015be2:	c3                   	ret    
c0015be3:	90                   	nop

c0015be4 <startGUI(void*)>:
c0015be4:	55                   	push   ebp
c0015be5:	89 e5                	mov    ebp,esp
c0015be7:	53                   	push   ebx
c0015be8:	83 ec 04             	sub    esp,0x4
c0015beb:	e8 89 80 00 00       	call   c001dc79 <unlockScheduler()>
c0015bf0:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0015bf6:	83 ec 08             	sub    esp,0x8
c0015bf9:	6a 01                	push   0x1
c0015bfb:	68 a0 af 02 c0       	push   0xc002afa0
c0015c00:	e8 ab 79 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	83 ec 08             	sub    esp,0x8
c0015c0b:	53                   	push   ebx
c0015c0c:	50                   	push   eax
c0015c0d:	e8 ed 7b 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c0015c12:	83 c4 10             	add    esp,0x10
c0015c15:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0015c1b:	83 ec 08             	sub    esp,0x8
c0015c1e:	6a 01                	push   0x1
c0015c20:	68 ba af 02 c0       	push   0xc002afba
c0015c25:	e8 86 79 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	83 ec 08             	sub    esp,0x8
c0015c30:	53                   	push   ebx
c0015c31:	50                   	push   eax
c0015c32:	e8 c8 7b 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c0015c37:	83 c4 10             	add    esp,0x10
c0015c3a:	90                   	nop
c0015c3b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c3e:	c9                   	leave  
c0015c3f:	c3                   	ret    

c0015c40 <startGUIVESA(void*)>:
c0015c40:	55                   	push   ebp
c0015c41:	89 e5                	mov    ebp,esp
c0015c43:	53                   	push   ebx
c0015c44:	83 ec 04             	sub    esp,0x4
c0015c47:	e8 2d 80 00 00       	call   c001dc79 <unlockScheduler()>
c0015c4c:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0015c52:	83 ec 08             	sub    esp,0x8
c0015c55:	6a 01                	push   0x1
c0015c57:	68 d4 af 02 c0       	push   0xc002afd4
c0015c5c:	e8 4f 79 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c0015c61:	83 c4 10             	add    esp,0x10
c0015c64:	83 ec 08             	sub    esp,0x8
c0015c67:	53                   	push   ebx
c0015c68:	50                   	push   eax
c0015c69:	e8 91 7b 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c0015c6e:	83 c4 10             	add    esp,0x10
c0015c71:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0015c77:	83 ec 08             	sub    esp,0x8
c0015c7a:	6a 01                	push   0x1
c0015c7c:	68 ba af 02 c0       	push   0xc002afba
c0015c81:	e8 2a 79 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c0015c86:	83 c4 10             	add    esp,0x10
c0015c89:	83 ec 08             	sub    esp,0x8
c0015c8c:	53                   	push   ebx
c0015c8d:	50                   	push   eax
c0015c8e:	e8 6c 7b 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c0015c93:	83 c4 10             	add    esp,0x10
c0015c96:	90                   	nop
c0015c97:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c9a:	c9                   	leave  
c0015c9b:	c3                   	ret    

c0015c9c <sendKeyToTerminal(unsigned char)>:
c0015c9c:	55                   	push   ebp
c0015c9d:	89 e5                	mov    ebp,esp
c0015c9f:	83 ec 28             	sub    esp,0x28
c0015ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015ca8:	a1 64 e3 02 c0       	mov    eax,ds:0xc002e364
c0015cad:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015cb1:	83 ec 08             	sub    esp,0x8
c0015cb4:	52                   	push   edx
c0015cb5:	50                   	push   eax
c0015cb6:	e8 8b b6 ff ff       	call   c0011346 <VgaText::receiveKey(unsigned char)>
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015cc2:	75 41                	jne    c0015d05 <sendKeyToTerminal(unsigned char)+0x69>
c0015cc4:	e8 d5 7f 00 00       	call   c001dc9e <lockStuff()>
c0015cc9:	a1 40 e4 02 c0       	mov    eax,ds:0xc002e440
c0015cce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cd1:	c7 05 40 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e440,0x0
c0015cdb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015cdf:	74 1f                	je     c0015d00 <sendKeyToTerminal(unsigned char)+0x64>
c0015ce1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ce4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ce7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015cea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015ced:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015cf6:	e8 93 85 00 00       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c0015cfb:	83 c4 10             	add    esp,0x10
c0015cfe:	eb db                	jmp    c0015cdb <sendKeyToTerminal(unsigned char)+0x3f>
c0015d00:	e8 32 83 00 00       	call   c001e037 <unlockStuff()>
c0015d05:	90                   	nop
c0015d06:	c9                   	leave  
c0015d07:	c3                   	ret    

c0015d08 <sendKeyboardToken(KeyboardToken)>:
c0015d08:	55                   	push   ebp
c0015d09:	89 e5                	mov    ebp,esp
c0015d0b:	83 ec 18             	sub    esp,0x18
c0015d0e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d14:	0f b7 c0             	movzx  eax,ax
c0015d17:	83 f2 01             	xor    edx,0x1
c0015d1a:	88 90 60 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1ba0],dl
c0015d20:	a1 48 e4 02 c0       	mov    eax,ds:0xc002e448
c0015d25:	85 c0                	test   eax,eax
c0015d27:	74 24                	je     c0015d4d <sendKeyboardToken(KeyboardToken)+0x45>
c0015d29:	8b 0d 48 e4 02 c0    	mov    ecx,DWORD PTR ds:0xc002e448
c0015d2f:	83 ec 04             	sub    esp,0x4
c0015d32:	68 60 e4 02 c0       	push   0xc002e460
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	89 e2                	mov    edx,esp
c0015d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d3f:	89 02                	mov    DWORD PTR [edx],eax
c0015d41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d44:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d48:	ff d1                	call   ecx
c0015d4a:	83 c4 10             	add    esp,0x10
c0015d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d50:	66 3d 03 02          	cmp    ax,0x203
c0015d54:	75 07                	jne    c0015d5d <sendKeyboardToken(KeyboardToken)+0x55>
c0015d56:	a0 60 e5 02 c0       	mov    al,ds:0xc002e560
c0015d5b:	84 c0                	test   al,al
c0015d5d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015d61:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015d64:	a0 68 e8 02 c0       	mov    al,ds:0xc002e868
c0015d69:	38 c2                	cmp    dl,al
c0015d6b:	74 1c                	je     c0015d89 <sendKeyboardToken(KeyboardToken)+0x81>
c0015d6d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015d70:	a2 68 e8 02 c0       	mov    ds:0xc002e868,al
c0015d75:	a0 68 e8 02 c0       	mov    al,ds:0xc002e868
c0015d7a:	0f b6 c0             	movzx  eax,al
c0015d7d:	83 ec 0c             	sub    esp,0xc
c0015d80:	50                   	push   eax
c0015d81:	e8 20 a8 ff ff       	call   c00105a6 <setTerminalScrollLock(bool)>
c0015d86:	83 c4 10             	add    esp,0x10
c0015d89:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015d8c:	84 c0                	test   al,al
c0015d8e:	0f 84 ae 00 00 00    	je     c0015e42 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d97:	66 3d 10 03          	cmp    ax,0x310
c0015d9b:	75 06                	jne    c0015da3 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015d9d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015da6:	66 3d 11 03          	cmp    ax,0x311
c0015daa:	75 06                	jne    c0015db2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015dac:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015db5:	66 3d 12 03          	cmp    ax,0x312
c0015db9:	75 06                	jne    c0015dc1 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015dbb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc4:	66 3d 13 03          	cmp    ax,0x313
c0015dc8:	75 06                	jne    c0015dd0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015dca:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd3:	66 3d 14 03          	cmp    ax,0x314
c0015dd7:	75 06                	jne    c0015ddf <sendKeyboardToken(KeyboardToken)+0xd7>
c0015dd9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de2:	66 3d 15 03          	cmp    ax,0x315
c0015de6:	75 06                	jne    c0015dee <sendKeyboardToken(KeyboardToken)+0xe6>
c0015de8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df1:	66 3d 16 03          	cmp    ax,0x316
c0015df5:	75 06                	jne    c0015dfd <sendKeyboardToken(KeyboardToken)+0xf5>
c0015df7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e00:	66 3d 17 03          	cmp    ax,0x317
c0015e04:	75 06                	jne    c0015e0c <sendKeyboardToken(KeyboardToken)+0x104>
c0015e06:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e0f:	66 3d 18 03          	cmp    ax,0x318
c0015e13:	75 06                	jne    c0015e1b <sendKeyboardToken(KeyboardToken)+0x113>
c0015e15:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1e:	66 3d 19 03          	cmp    ax,0x319
c0015e22:	75 06                	jne    c0015e2a <sendKeyboardToken(KeyboardToken)+0x122>
c0015e24:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2d:	66 3d 1a 03          	cmp    ax,0x31a
c0015e31:	0f 85 c9 00 00 00    	jne    c0015f00 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e37:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015e3d:	e9 be 00 00 00       	jmp    c0015f00 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e45:	66 3d 10 03          	cmp    ax,0x310
c0015e49:	75 0a                	jne    c0015e55 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015e4b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015e51:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e58:	66 3d 11 03          	cmp    ax,0x311
c0015e5c:	75 0a                	jne    c0015e68 <sendKeyboardToken(KeyboardToken)+0x160>
c0015e5e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015e64:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6b:	66 3d 12 03          	cmp    ax,0x312
c0015e6f:	75 0a                	jne    c0015e7b <sendKeyboardToken(KeyboardToken)+0x173>
c0015e71:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015e77:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7e:	66 3d 13 03          	cmp    ax,0x313
c0015e82:	75 0a                	jne    c0015e8e <sendKeyboardToken(KeyboardToken)+0x186>
c0015e84:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015e8a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e91:	66 3d 14 03          	cmp    ax,0x314
c0015e95:	75 0a                	jne    c0015ea1 <sendKeyboardToken(KeyboardToken)+0x199>
c0015e97:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015e9d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea4:	66 3d 15 03          	cmp    ax,0x315
c0015ea8:	75 0a                	jne    c0015eb4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015eaa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015eb0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb7:	66 3d 16 03          	cmp    ax,0x316
c0015ebb:	75 0a                	jne    c0015ec7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015ebd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015ec3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eca:	66 3d 17 03          	cmp    ax,0x317
c0015ece:	75 0a                	jne    c0015eda <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ed0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ed6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015edd:	66 3d 18 03          	cmp    ax,0x318
c0015ee1:	75 0a                	jne    c0015eed <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015ee3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015ee9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef0:	66 3d 19 03          	cmp    ax,0x319
c0015ef4:	75 0a                	jne    c0015f00 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015ef6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015efc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f03:	66 3d 00 02          	cmp    ax,0x200
c0015f07:	75 2c                	jne    c0015f35 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f09:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0015f0e:	83 f0 01             	xor    eax,0x1
c0015f11:	84 c0                	test   al,al
c0015f13:	74 20                	je     c0015f35 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015f15:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0015f1a:	6a 01                	push   0x1
c0015f1c:	6a 00                	push   0x0
c0015f1e:	68 e4 5b 01 c0       	push   0xc0015be4
c0015f23:	50                   	push   eax
c0015f24:	e8 7f 7e 00 00       	call   c001dda8 <Process::createThread(void (*)(void*), void*, int)>
c0015f29:	83 c4 10             	add    esp,0x10
c0015f2c:	c6 05 60 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e860,0x1
c0015f33:	eb 33                	jmp    c0015f68 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f38:	66 3d 01 02          	cmp    ax,0x201
c0015f3c:	75 2a                	jne    c0015f68 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f3e:	a0 60 e8 02 c0       	mov    al,ds:0xc002e860
c0015f43:	83 f0 01             	xor    eax,0x1
c0015f46:	84 c0                	test   al,al
c0015f48:	74 1e                	je     c0015f68 <sendKeyboardToken(KeyboardToken)+0x260>
c0015f4a:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0015f4f:	6a 01                	push   0x1
c0015f51:	6a 00                	push   0x0
c0015f53:	68 40 5c 01 c0       	push   0xc0015c40
c0015f58:	50                   	push   eax
c0015f59:	e8 4a 7e 00 00       	call   c001dda8 <Process::createThread(void (*)(void*), void*, int)>
c0015f5e:	83 c4 10             	add    esp,0x10
c0015f61:	c6 05 60 e8 02 c0 01 	mov    BYTE PTR ds:0xc002e860,0x1
c0015f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6b:	66 3d 1d 03          	cmp    ax,0x31d
c0015f6f:	75 06                	jne    c0015f77 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015f71:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 1c 03          	cmp    ax,0x31c
c0015f7e:	75 06                	jne    c0015f86 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015f80:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f89:	66 3d 1b 03          	cmp    ax,0x31b
c0015f8d:	75 06                	jne    c0015f95 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015f8f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015f95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f98:	66 3d 1e 03          	cmp    ax,0x31e
c0015f9c:	75 06                	jne    c0015fa4 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015f9e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa7:	66 3d 1f 03          	cmp    ax,0x31f
c0015fab:	75 06                	jne    c0015fb3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015fad:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb6:	66 3d 1a 03          	cmp    ax,0x31a
c0015fba:	75 06                	jne    c0015fc2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015fbc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015fc2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015fc6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015fc9:	83 f0 01             	xor    eax,0x1
c0015fcc:	84 c0                	test   al,al
c0015fce:	74 77                	je     c0016047 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015fd0:	a0 61 e5 02 c0       	mov    al,ds:0xc002e561
c0015fd5:	84 c0                	test   al,al
c0015fd7:	74 41                	je     c001601a <sendKeyboardToken(KeyboardToken)+0x312>
c0015fd9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015fdd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015fe1:	74 2b                	je     c001600e <sendKeyboardToken(KeyboardToken)+0x306>
c0015fe3:	8b 15 64 e8 02 c0    	mov    edx,DWORD PTR ds:0xc002e864
c0015fe9:	89 d0                	mov    eax,edx
c0015feb:	c1 e0 02             	shl    eax,0x2
c0015fee:	01 d0                	add    eax,edx
c0015ff0:	01 c0                	add    eax,eax
c0015ff2:	a3 64 e8 02 c0       	mov    ds:0xc002e864,eax
c0015ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffa:	0f b7 c0             	movzx  eax,ax
c0015ffd:	8d 50 d0             	lea    edx,[eax-0x30]
c0016000:	a1 64 e8 02 c0       	mov    eax,ds:0xc002e864
c0016005:	01 d0                	add    eax,edx
c0016007:	a3 64 e8 02 c0       	mov    ds:0xc002e864,eax
c001600c:	eb 6d                	jmp    c001607b <sendKeyboardToken(KeyboardToken)+0x373>
c001600e:	c7 05 64 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e864,0x0
c0016018:	eb 61                	jmp    c001607b <sendKeyboardToken(KeyboardToken)+0x373>
c001601a:	a1 64 e8 02 c0       	mov    eax,ds:0xc002e864
c001601f:	85 c0                	test   eax,eax
c0016021:	74 18                	je     c001603b <sendKeyboardToken(KeyboardToken)+0x333>
c0016023:	a1 64 e8 02 c0       	mov    eax,ds:0xc002e864
c0016028:	0f b6 c0             	movzx  eax,al
c001602b:	83 ec 0c             	sub    esp,0xc
c001602e:	50                   	push   eax
c001602f:	e8 68 fc ff ff       	call   c0015c9c <sendKeyToTerminal(unsigned char)>
c0016034:	83 c4 10             	add    esp,0x10
c0016037:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001603b:	c7 05 64 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e864,0x0
c0016045:	eb 34                	jmp    c001607b <sendKeyboardToken(KeyboardToken)+0x373>
c0016047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604a:	66 3d 01 01          	cmp    ax,0x101
c001604e:	75 2b                	jne    c001607b <sendKeyboardToken(KeyboardToken)+0x373>
c0016050:	a1 64 e8 02 c0       	mov    eax,ds:0xc002e864
c0016055:	85 c0                	test   eax,eax
c0016057:	74 18                	je     c0016071 <sendKeyboardToken(KeyboardToken)+0x369>
c0016059:	a1 64 e8 02 c0       	mov    eax,ds:0xc002e864
c001605e:	0f b6 c0             	movzx  eax,al
c0016061:	83 ec 0c             	sub    esp,0xc
c0016064:	50                   	push   eax
c0016065:	e8 32 fc ff ff       	call   c0015c9c <sendKeyToTerminal(unsigned char)>
c001606a:	83 c4 10             	add    esp,0x10
c001606d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016071:	c7 05 64 e8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e864,0x0
c001607b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001607e:	83 f0 01             	xor    eax,0x1
c0016081:	84 c0                	test   al,al
c0016083:	74 4c                	je     c00160d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016085:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016088:	83 f0 01             	xor    eax,0x1
c001608b:	84 c0                	test   al,al
c001608d:	74 42                	je     c00160d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001608f:	a0 60 e5 02 c0       	mov    al,ds:0xc002e560
c0016094:	83 f0 01             	xor    eax,0x1
c0016097:	84 c0                	test   al,al
c0016099:	74 36                	je     c00160d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001609b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001609e:	66 83 f8 1f          	cmp    ax,0x1f
c00160a2:	76 09                	jbe    c00160ad <sendKeyboardToken(KeyboardToken)+0x3a5>
c00160a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a7:	66 83 f8 7e          	cmp    ax,0x7e
c00160ab:	76 12                	jbe    c00160bf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b0:	66 83 f8 0a          	cmp    ax,0xa
c00160b4:	74 09                	je     c00160bf <sendKeyboardToken(KeyboardToken)+0x3b7>
c00160b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b9:	66 83 f8 08          	cmp    ax,0x8
c00160bd:	75 12                	jne    c00160d1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00160bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c2:	0f b6 c0             	movzx  eax,al
c00160c5:	83 ec 0c             	sub    esp,0xc
c00160c8:	50                   	push   eax
c00160c9:	e8 ce fb ff ff       	call   c0015c9c <sendKeyToTerminal(unsigned char)>
c00160ce:	83 c4 10             	add    esp,0x10
c00160d1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00160d4:	83 f0 01             	xor    eax,0x1
c00160d7:	84 c0                	test   al,al
c00160d9:	74 4f                	je     c001612a <sendKeyboardToken(KeyboardToken)+0x422>
c00160db:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00160de:	83 f0 01             	xor    eax,0x1
c00160e1:	84 c0                	test   al,al
c00160e3:	74 45                	je     c001612a <sendKeyboardToken(KeyboardToken)+0x422>
c00160e5:	a0 60 e5 02 c0       	mov    al,ds:0xc002e560
c00160ea:	84 c0                	test   al,al
c00160ec:	74 3c                	je     c001612a <sendKeyboardToken(KeyboardToken)+0x422>
c00160ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f1:	66 83 f8 3f          	cmp    ax,0x3f
c00160f5:	76 33                	jbe    c001612a <sendKeyboardToken(KeyboardToken)+0x422>
c00160f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160fa:	66 83 f8 7f          	cmp    ax,0x7f
c00160fe:	77 2a                	ja     c001612a <sendKeyboardToken(KeyboardToken)+0x422>
c0016100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016103:	88 c2                	mov    dl,al
c0016105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016108:	66 83 f8 5f          	cmp    ax,0x5f
c001610c:	76 04                	jbe    c0016112 <sendKeyboardToken(KeyboardToken)+0x40a>
c001610e:	b0 20                	mov    al,0x20
c0016110:	eb 02                	jmp    c0016114 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016112:	b0 00                	mov    al,0x0
c0016114:	29 c2                	sub    edx,eax
c0016116:	88 d0                	mov    al,dl
c0016118:	83 e8 40             	sub    eax,0x40
c001611b:	0f b6 c0             	movzx  eax,al
c001611e:	83 ec 0c             	sub    esp,0xc
c0016121:	50                   	push   eax
c0016122:	e8 75 fb ff ff       	call   c0015c9c <sendKeyToTerminal(unsigned char)>
c0016127:	83 c4 10             	add    esp,0x10
c001612a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612d:	66 3d 00 03          	cmp    ax,0x300
c0016131:	75 0f                	jne    c0016142 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016133:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016136:	83 f0 01             	xor    eax,0x1
c0016139:	84 c0                	test   al,al
c001613b:	74 05                	je     c0016142 <sendKeyboardToken(KeyboardToken)+0x43a>
c001613d:	e8 99 ac ff ff       	call   c0010ddb <doTerminalCycle()>
c0016142:	90                   	nop
c0016143:	c9                   	leave  
c0016144:	c3                   	ret    

c0016145 <clearInternalKeybuffer(VgaText*)>:
c0016145:	55                   	push   ebp
c0016146:	89 e5                	mov    ebp,esp
c0016148:	83 ec 08             	sub    esp,0x8
c001614b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614e:	05 34 11 00 00       	add    eax,0x1134
c0016153:	83 ec 0c             	sub    esp,0xc
c0016156:	50                   	push   eax
c0016157:	e8 38 a6 fe ff       	call   c0000794 <strlen>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016162:	81 c2 34 11 00 00    	add    edx,0x1134
c0016168:	83 ec 04             	sub    esp,0x4
c001616b:	50                   	push   eax
c001616c:	6a 00                	push   0x0
c001616e:	52                   	push   edx
c001616f:	e8 04 a6 fe ff       	call   c0000778 <memset>
c0016174:	83 c4 10             	add    esp,0x10
c0016177:	90                   	nop
c0016178:	c9                   	leave  
c0016179:	c3                   	ret    

c001617a <readKeyboard(VgaText*, char*, unsigned long)>:
c001617a:	55                   	push   ebp
c001617b:	89 e5                	mov    ebp,esp
c001617d:	83 ec 18             	sub    esp,0x18
c0016180:	fb                   	sti    
c0016181:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016188:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001618c:	0f 84 8a 00 00 00    	je     c001621c <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0016192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016195:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c001619b:	84 c0                	test   al,al
c001619d:	75 11                	jne    c00161b0 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c001619f:	e8 d3 7a 00 00       	call   c001dc77 <lockScheduler()>
c00161a4:	e8 09 7e 00 00       	call   c001dfb2 <schedule()>
c00161a9:	e8 cb 7a 00 00       	call   c001dc79 <unlockScheduler()>
c00161ae:	eb e2                	jmp    c0016192 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00161b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00161b3:	8d 50 01             	lea    edx,[eax+0x1]
c00161b6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00161b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161bc:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00161c2:	88 10                	mov    BYTE PTR [eax],dl
c00161c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c7:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00161cd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00161d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d3:	05 34 11 00 00       	add    eax,0x1134
c00161d8:	83 ec 0c             	sub    esp,0xc
c00161db:	50                   	push   eax
c00161dc:	e8 b3 a5 fe ff       	call   c0000794 <strlen>
c00161e1:	83 c4 10             	add    esp,0x10
c00161e4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161e7:	81 c2 34 11 00 00    	add    edx,0x1134
c00161ed:	8d 4a 01             	lea    ecx,[edx+0x1]
c00161f0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00161f3:	81 c2 34 11 00 00    	add    edx,0x1134
c00161f9:	83 ec 04             	sub    esp,0x4
c00161fc:	50                   	push   eax
c00161fd:	51                   	push   ecx
c00161fe:	52                   	push   edx
c00161ff:	e8 78 a4 fe ff       	call   c000067c <memmove>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001620a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001620d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016211:	0f 85 71 ff ff ff    	jne    c0016188 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0016217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001621a:	eb 03                	jmp    c001621f <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c001621c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001621f:	c9                   	leave  
c0016220:	c3                   	ret    
c0016221:	90                   	nop

c0016222 <Keyboard::Keyboard(char const*)>:
c0016222:	83 ec 0c             	sub    esp,0xc
c0016225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016229:	83 ec 08             	sub    esp,0x8
c001622c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016230:	50                   	push   eax
c0016231:	e8 b4 e1 ff ff       	call   c00143ea <Device::Device(char const*)>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	ba f8 af 02 c0       	mov    edx,0xc002aff8
c001623e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016242:	89 10                	mov    DWORD PTR [eax],edx
c0016244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016248:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016252:	c6 05 44 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e444,0x1
c0016259:	90                   	nop
c001625a:	83 c4 0c             	add    esp,0xc
c001625d:	c3                   	ret    

c001625e <Keyboard::~Keyboard()>:
c001625e:	83 ec 0c             	sub    esp,0xc
c0016261:	ba f8 af 02 c0       	mov    edx,0xc002aff8
c0016266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001626a:	89 10                	mov    DWORD PTR [eax],edx
c001626c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016270:	83 ec 0c             	sub    esp,0xc
c0016273:	50                   	push   eax
c0016274:	e8 53 de ff ff       	call   c00140cc <Device::~Device()>
c0016279:	83 c4 10             	add    esp,0x10
c001627c:	90                   	nop
c001627d:	83 c4 0c             	add    esp,0xc
c0016280:	c3                   	ret    
c0016281:	90                   	nop

c0016282 <Keyboard::~Keyboard()>:
c0016282:	83 ec 0c             	sub    esp,0xc
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628c:	e8 cd ff ff ff       	call   c001625e <Keyboard::~Keyboard()>
c0016291:	83 c4 10             	add    esp,0x10
c0016294:	83 ec 08             	sub    esp,0x8
c0016297:	68 5c 01 00 00       	push   0x15c
c001629c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162a0:	e8 4f ca ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	83 c4 0c             	add    esp,0xc
c00162ab:	c3                   	ret    

c00162ac <LogicalDisk::close(int, int, void*)>:
c00162ac:	83 c8 ff             	or     eax,0xffffffff
c00162af:	c3                   	ret    

c00162b0 <LogicalDisk::~LogicalDisk()>:
c00162b0:	83 ec 0c             	sub    esp,0xc
c00162b3:	ba a8 b0 02 c0       	mov    edx,0xc002b0a8
c00162b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162bc:	89 10                	mov    DWORD PTR [eax],edx
c00162be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162c2:	83 ec 0c             	sub    esp,0xc
c00162c5:	50                   	push   eax
c00162c6:	e8 01 de ff ff       	call   c00140cc <Device::~Device()>
c00162cb:	83 c4 10             	add    esp,0x10
c00162ce:	90                   	nop
c00162cf:	83 c4 0c             	add    esp,0xc
c00162d2:	c3                   	ret    
c00162d3:	90                   	nop

c00162d4 <LogicalDisk::~LogicalDisk()>:
c00162d4:	83 ec 0c             	sub    esp,0xc
c00162d7:	83 ec 0c             	sub    esp,0xc
c00162da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162de:	e8 cd ff ff ff       	call   c00162b0 <LogicalDisk::~LogicalDisk()>
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	83 ec 08             	sub    esp,0x8
c00162e9:	68 74 01 00 00       	push   0x174
c00162ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f2:	e8 fd c9 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00162f7:	83 c4 10             	add    esp,0x10
c00162fa:	83 c4 0c             	add    esp,0xc
c00162fd:	c3                   	ret    

c00162fe <LogicalDisk::open(int, int, void*)>:
c00162fe:	83 ec 18             	sub    esp,0x18
c0016301:	68 24 b0 02 c0       	push   0xc002b024
c0016306:	e8 72 41 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001630b:	83 c8 ff             	or     eax,0xffffffff
c001630e:	83 c4 1c             	add    esp,0x1c
c0016311:	c3                   	ret    

c0016312 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016312:	53                   	push   ebx
c0016313:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001631b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001631f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016325:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001632b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016331:	77 10                	ja     c0016343 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016333:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016339:	89 d3                	mov    ebx,edx
c001633b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016341:	72 05                	jb     c0016348 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016343:	83 c8 ff             	or     eax,0xffffffff
c0016346:	89 c2                	mov    edx,eax
c0016348:	5b                   	pop    ebx
c0016349:	c3                   	ret    

c001634a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001634a:	56                   	push   esi
c001634b:	83 c8 ff             	or     eax,0xffffffff
c001634e:	53                   	push   ebx
c001634f:	89 c2                	mov    edx,eax
c0016351:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016355:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016359:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001635d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016363:	77 27                	ja     c001638c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016365:	89 d8                	mov    eax,ebx
c0016367:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001636d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016373:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016378:	89 c2                	mov    edx,eax
c001637a:	73 10                	jae    c001638c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001637c:	89 c8                	mov    eax,ecx
c001637e:	89 da                	mov    edx,ebx
c0016380:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016386:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001638c:	5b                   	pop    ebx
c001638d:	5e                   	pop    esi
c001638e:	c3                   	ret    
c001638f:	90                   	nop

c0016390 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016390:	83 ec 1c             	sub    esp,0x1c
c0016393:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016397:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001639b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001639f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00163aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163b6:	83 ec 08             	sub    esp,0x8
c00163b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00163bd:	50                   	push   eax
c00163be:	e8 27 e0 ff ff       	call   c00143ea <Device::Device(char const*)>
c00163c3:	83 c4 10             	add    esp,0x10
c00163c6:	ba a8 b0 02 c0       	mov    edx,0xc002b0a8
c00163cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163cf:	89 10                	mov    DWORD PTR [eax],edx
c00163d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163d5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163e0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00163e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00163eb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00163f5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00163f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016401:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016407:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001640d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016411:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016414:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016418:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001641e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016428:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001642c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016436:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016440:	90                   	nop
c0016441:	83 c4 1c             	add    esp,0x1c
c0016444:	c3                   	ret    
c0016445:	90                   	nop

c0016446 <LogicalDisk::assignDriveLetter()>:
c0016446:	55                   	push   ebp
c0016447:	57                   	push   edi
c0016448:	56                   	push   esi
c0016449:	53                   	push   ebx
c001644a:	83 ec 14             	sub    esp,0x14
c001644d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016451:	8b 3d 80 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e880
c0016457:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001645d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016461:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016467:	8b 3d 84 e8 02 c0    	mov    edi,DWORD PTR ds:0xc002e884
c001646d:	3c 01                	cmp    al,0x1
c001646f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016473:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016477:	19 c0                	sbb    eax,eax
c0016479:	83 e0 02             	and    eax,0x2
c001647c:	83 c0 41             	add    eax,0x41
c001647f:	0f be e8             	movsx  ebp,al
c0016482:	3c 43                	cmp    al,0x43
c0016484:	75 10                	jne    c0016496 <LogicalDisk::assignDriveLetter()+0x50>
c0016486:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001648d:	75 5d                	jne    c00164ec <LogicalDisk::assignDriveLetter()+0xa6>
c001648f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016494:	75 56                	jne    c00164ec <LogicalDisk::assignDriveLetter()+0xa6>
c0016496:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016499:	ba 01 00 00 00       	mov    edx,0x1
c001649e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00164a2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00164a6:	d3 e2                	shl    edx,cl
c00164a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00164ac:	89 d7                	mov    edi,edx
c00164ae:	89 d6                	mov    esi,edx
c00164b0:	c1 ff 1f             	sar    edi,0x1f
c00164b3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00164b7:	21 f9                	and    ecx,edi
c00164b9:	09 d1                	or     ecx,edx
c00164bb:	75 2f                	jne    c00164ec <LogicalDisk::assignDriveLetter()+0xa6>
c00164bd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00164c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00164c5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00164cb:	09 f2                	or     edx,esi
c00164cd:	89 15 80 e8 02 c0    	mov    DWORD PTR ds:0xc002e880,edx
c00164d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164d7:	09 fa                	or     edx,edi
c00164d9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00164dd:	89 15 84 e8 02 c0    	mov    DWORD PTR ds:0xc002e884,edx
c00164e3:	89 1c bd a0 e8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1760],ebx
c00164ea:	eb 08                	jmp    c00164f4 <LogicalDisk::assignDriveLetter()+0xae>
c00164ec:	45                   	inc    ebp
c00164ed:	40                   	inc    eax
c00164ee:	3c 5b                	cmp    al,0x5b
c00164f0:	75 90                	jne    c0016482 <LogicalDisk::assignDriveLetter()+0x3c>
c00164f2:	31 c0                	xor    eax,eax
c00164f4:	83 c4 14             	add    esp,0x14
c00164f7:	5b                   	pop    ebx
c00164f8:	5e                   	pop    esi
c00164f9:	5f                   	pop    edi
c00164fa:	5d                   	pop    ebp
c00164fb:	c3                   	ret    

c00164fc <LogicalDisk::mount()>:
c00164fc:	56                   	push   esi
c00164fd:	53                   	push   ebx
c00164fe:	51                   	push   ecx
c00164ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016503:	8b 1d 10 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e410
c0016509:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016513:	85 db                	test   ebx,ebx
c0016515:	74 50                	je     c0016567 <LogicalDisk::mount()+0x6b>
c0016517:	e8 46 77 00 00       	call   c001dc62 <getIRQNestingLevel()>
c001651c:	52                   	push   edx
c001651d:	52                   	push   edx
c001651e:	50                   	push   eax
c001651f:	68 48 b0 02 c0       	push   0xc002b048
c0016524:	e8 ab c8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0016529:	83 c4 0c             	add    esp,0xc
c001652c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016533:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016535:	83 e8 41             	sub    eax,0x41
c0016538:	50                   	push   eax
c0016539:	56                   	push   esi
c001653a:	53                   	push   ebx
c001653b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001653e:	83 c4 10             	add    esp,0x10
c0016541:	84 c0                	test   al,al
c0016543:	74 08                	je     c001654d <LogicalDisk::mount()+0x51>
c0016545:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001654b:	eb 1c                	jmp    c0016569 <LogicalDisk::mount()+0x6d>
c001654d:	e8 10 77 00 00       	call   c001dc62 <getIRQNestingLevel()>
c0016552:	51                   	push   ecx
c0016553:	51                   	push   ecx
c0016554:	50                   	push   eax
c0016555:	68 63 b0 02 c0       	push   0xc002b063
c001655a:	e8 75 c8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001655f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	eb ac                	jmp    c0016513 <LogicalDisk::mount()+0x17>
c0016567:	31 c0                	xor    eax,eax
c0016569:	5a                   	pop    edx
c001656a:	5b                   	pop    ebx
c001656b:	5e                   	pop    esi
c001656c:	c3                   	ret    
c001656d:	90                   	nop

c001656e <LogicalDisk::unmount()>:
c001656e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016572:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001657c:	c3                   	ret    
c001657d:	90                   	nop

c001657e <LogicalDisk::eject()>:
c001657e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016582:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016588:	8b 10                	mov    edx,DWORD PTR [eax]
c001658a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001658e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016591:	90                   	nop

c0016592 <LogicalDisk::unassignDriveLetter()>:
c0016592:	57                   	push   edi
c0016593:	56                   	push   esi
c0016594:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016598:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001659f:	84 c9                	test   cl,cl
c00165a1:	75 0f                	jne    c00165b2 <LogicalDisk::unassignDriveLetter()+0x20>
c00165a3:	c7 44 24 0c 7e b0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b07e
c00165ab:	5e                   	pop    esi
c00165ac:	5f                   	pop    edi
c00165ad:	e9 cb 3e 00 00       	jmp    c001a47d <Krnl::panic(char const*)>
c00165b2:	83 e9 41             	sub    ecx,0x41
c00165b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00165bc:	b8 01 00 00 00       	mov    eax,0x1
c00165c1:	c7 04 8d a0 e8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd1760],0x0
c00165cc:	d3 e0                	shl    eax,cl
c00165ce:	89 c7                	mov    edi,eax
c00165d0:	f7 d0                	not    eax
c00165d2:	c1 ff 1f             	sar    edi,0x1f
c00165d5:	21 05 80 e8 02 c0    	and    DWORD PTR ds:0xc002e880,eax
c00165db:	89 fe                	mov    esi,edi
c00165dd:	f7 d6                	not    esi
c00165df:	21 35 84 e8 02 c0    	and    DWORD PTR ds:0xc002e884,esi
c00165e5:	5e                   	pop    esi
c00165e6:	5f                   	pop    edi
c00165e7:	c3                   	ret    

c00165e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00165e8:	57                   	push   edi
c00165e9:	56                   	push   esi
c00165ea:	53                   	push   ebx
c00165eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00165f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016601:	77 41                	ja     c0016644 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016603:	99                   	cdq    
c0016604:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001660a:	01 c8                	add    eax,ecx
c001660c:	11 da                	adc    edx,ebx
c001660e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016614:	19 d7                	sbb    edi,edx
c0016616:	72 33                	jb     c001664b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016618:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001661e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016624:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016628:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001662c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016632:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001663c:	5b                   	pop    ebx
c001663d:	5e                   	pop    esi
c001663e:	5f                   	pop    edi
c001663f:	e9 b0 0a 00 00       	jmp    c00170f4 <VCache::read(unsigned long long, int, void*)>
c0016644:	b8 05 00 00 00       	mov    eax,0x5
c0016649:	eb 05                	jmp    c0016650 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001664b:	b8 07 00 00 00       	mov    eax,0x7
c0016650:	5b                   	pop    ebx
c0016651:	5e                   	pop    esi
c0016652:	5f                   	pop    edi
c0016653:	c3                   	ret    

c0016654 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016654:	57                   	push   edi
c0016655:	56                   	push   esi
c0016656:	53                   	push   ebx
c0016657:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001665b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001665f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016663:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016667:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001666d:	77 41                	ja     c00166b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001666f:	99                   	cdq    
c0016670:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016676:	01 c8                	add    eax,ecx
c0016678:	11 da                	adc    edx,ebx
c001667a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016680:	19 d7                	sbb    edi,edx
c0016682:	72 33                	jb     c00166b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016684:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001668a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016690:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016694:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016698:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001669e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00166a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00166a8:	5b                   	pop    ebx
c00166a9:	5e                   	pop    esi
c00166aa:	5f                   	pop    edi
c00166ab:	e9 4e 09 00 00       	jmp    c0016ffe <VCache::write(unsigned long long, int, void*)>
c00166b0:	b8 05 00 00 00       	mov    eax,0x5
c00166b5:	eb 05                	jmp    c00166bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00166b7:	b8 07 00 00 00       	mov    eax,0x7
c00166bc:	5b                   	pop    ebx
c00166bd:	5e                   	pop    esi
c00166be:	5f                   	pop    edi
c00166bf:	c3                   	ret    

c00166c0 <Mouse::Mouse(char const*)>:
c00166c0:	83 ec 0c             	sub    esp,0xc
c00166c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166c7:	83 ec 08             	sub    esp,0x8
c00166ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166ce:	50                   	push   eax
c00166cf:	e8 16 dd ff ff       	call   c00143ea <Device::Device(char const*)>
c00166d4:	83 c4 10             	add    esp,0x10
c00166d7:	ba d4 b0 02 c0       	mov    edx,0xc002b0d4
c00166dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e0:	89 10                	mov    DWORD PTR [eax],edx
c00166e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00166f0:	90                   	nop
c00166f1:	83 c4 0c             	add    esp,0xc
c00166f4:	c3                   	ret    
c00166f5:	90                   	nop

c00166f6 <Mouse::~Mouse()>:
c00166f6:	83 ec 0c             	sub    esp,0xc
c00166f9:	ba d4 b0 02 c0       	mov    edx,0xc002b0d4
c00166fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016702:	89 10                	mov    DWORD PTR [eax],edx
c0016704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	50                   	push   eax
c001670c:	e8 bb d9 ff ff       	call   c00140cc <Device::~Device()>
c0016711:	83 c4 10             	add    esp,0x10
c0016714:	90                   	nop
c0016715:	83 c4 0c             	add    esp,0xc
c0016718:	c3                   	ret    
c0016719:	90                   	nop

c001671a <Mouse::~Mouse()>:
c001671a:	83 ec 0c             	sub    esp,0xc
c001671d:	83 ec 0c             	sub    esp,0xc
c0016720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016724:	e8 cd ff ff ff       	call   c00166f6 <Mouse::~Mouse()>
c0016729:	83 c4 10             	add    esp,0x10
c001672c:	83 ec 08             	sub    esp,0x8
c001672f:	68 58 01 00 00       	push   0x158
c0016734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016738:	e8 b7 c5 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001673d:	83 c4 10             	add    esp,0x10
c0016740:	83 c4 0c             	add    esp,0xc
c0016743:	c3                   	ret    

c0016744 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016744:	55                   	push   ebp
c0016745:	57                   	push   edi
c0016746:	56                   	push   esi
c0016747:	53                   	push   ebx
c0016748:	81 ec 28 01 00 00    	sub    esp,0x128
c001674e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016755:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001675c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016763:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001676a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001676e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016772:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016779:	e8 68 dd ff ff       	call   c00144e6 <Device::getName()>
c001677e:	5a                   	pop    edx
c001677f:	59                   	pop    ecx
c0016780:	50                   	push   eax
c0016781:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016785:	55                   	push   ebp
c0016786:	e8 a9 a0 fe ff       	call   c0000834 <strcpy>
c001678b:	5b                   	pop    ebx
c001678c:	58                   	pop    eax
c001678d:	68 f8 b0 02 c0       	push   0xc002b0f8
c0016792:	55                   	push   ebp
c0016793:	e8 dc a1 fe ff       	call   c0000974 <strcat>
c0016798:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001679f:	e8 9c 90 ff ff       	call   c000f840 <malloc>
c00167a4:	83 c4 0c             	add    esp,0xc
c00167a7:	89 c3                	mov    ebx,eax
c00167a9:	57                   	push   edi
c00167aa:	56                   	push   esi
c00167ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167b3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00167ba:	55                   	push   ebp
c00167bb:	50                   	push   eax
c00167bc:	e8 cf fb ff ff       	call   c0016390 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00167c1:	83 c4 14             	add    esp,0x14
c00167c4:	53                   	push   ebx
c00167c5:	e8 7c fc ff ff       	call   c0016446 <LogicalDisk::assignDriveLetter()>
c00167ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167cd:	89 c6                	mov    esi,eax
c00167cf:	e8 28 fd ff ff       	call   c00164fc <LogicalDisk::mount()>
c00167d4:	58                   	pop    eax
c00167d5:	5a                   	pop    edx
c00167d6:	53                   	push   ebx
c00167d7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00167de:	e8 17 da ff ff       	call   c00141fa <Device::addChild(Device*)>
c00167e3:	59                   	pop    ecx
c00167e4:	89 f0                	mov    eax,esi
c00167e6:	5b                   	pop    ebx
c00167e7:	0f be f0             	movsx  esi,al
c00167ea:	56                   	push   esi
c00167eb:	68 03 b1 02 c0       	push   0xc002b103
c00167f0:	e8 df c5 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00167f5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00167fb:	5b                   	pop    ebx
c00167fc:	5e                   	pop    esi
c00167fd:	5f                   	pop    edi
c00167fe:	5d                   	pop    ebp
c00167ff:	c3                   	ret    

c0016800 <createPartitionsForDisk(PhysicalDisk*)>:
c0016800:	55                   	push   ebp
c0016801:	57                   	push   edi
c0016802:	56                   	push   esi
c0016803:	53                   	push   ebx
c0016804:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001680a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016811:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016817:	3d 00 02 00 00       	cmp    eax,0x200
c001681c:	74 27                	je     c0016845 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001681e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016824:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001682a:	83 ec 10             	sub    esp,0x10
c001682d:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016831:	99                   	cdq    
c0016832:	c1 e6 0a             	shl    esi,0xa
c0016835:	52                   	push   edx
c0016836:	89 fd                	mov    ebp,edi
c0016838:	50                   	push   eax
c0016839:	55                   	push   ebp
c001683a:	56                   	push   esi
c001683b:	e8 3c 00 01 00       	call   c002687c <__udivdi3>
c0016840:	e9 b1 00 00 00       	jmp    c00168f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	8b 03                	mov    eax,DWORD PTR [ebx]
c001684a:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001684e:	56                   	push   esi
c001684f:	6a 01                	push   0x1
c0016851:	6a 00                	push   0x0
c0016853:	6a 00                	push   0x0
c0016855:	53                   	push   ebx
c0016856:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016859:	83 c4 20             	add    esp,0x20
c001685c:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016864:	75 0a                	jne    c0016870 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016866:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001686e:	74 2c                	je     c001689c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016870:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016876:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001687c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016882:	83 ec 10             	sub    esp,0x10
c0016885:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016889:	89 f7                	mov    edi,esi
c001688b:	c1 e0 0a             	shl    eax,0xa
c001688e:	c1 ff 1f             	sar    edi,0x1f
c0016891:	57                   	push   edi
c0016892:	56                   	push   esi
c0016893:	52                   	push   edx
c0016894:	50                   	push   eax
c0016895:	e8 e2 ff 00 00       	call   c002687c <__udivdi3>
c001689a:	eb 5a                	jmp    c00168f6 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001689c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00168a3:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00168aa:	83 e1 7f             	and    ecx,0x7f
c00168ad:	83 e0 7f             	and    eax,0x7f
c00168b0:	01 c1                	add    ecx,eax
c00168b2:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00168b9:	83 e0 7f             	and    eax,0x7f
c00168bc:	01 c1                	add    ecx,eax
c00168be:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00168c5:	83 e0 7f             	and    eax,0x7f
c00168c8:	00 c1                	add    cl,al
c00168ca:	74 41                	je     c001690d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00168cc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00168d2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00168d8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00168de:	83 ec 10             	sub    esp,0x10
c00168e1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00168e5:	89 f7                	mov    edi,esi
c00168e7:	c1 e0 0a             	shl    eax,0xa
c00168ea:	c1 ff 1f             	sar    edi,0x1f
c00168ed:	57                   	push   edi
c00168ee:	56                   	push   esi
c00168ef:	52                   	push   edx
c00168f0:	50                   	push   eax
c00168f1:	e8 86 ff 00 00       	call   c002687c <__udivdi3>
c00168f6:	83 c4 14             	add    esp,0x14
c00168f9:	52                   	push   edx
c00168fa:	50                   	push   eax
c00168fb:	6a 00                	push   0x0
c00168fd:	6a 00                	push   0x0
c00168ff:	53                   	push   ebx
c0016900:	e8 3f fe ff ff       	call   c0016744 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016905:	83 c4 20             	add    esp,0x20
c0016908:	e9 79 01 00 00       	jmp    c0016a86 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001690d:	89 f0                	mov    eax,esi
c001690f:	31 f6                	xor    esi,esi
c0016911:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016918:	75 02                	jne    c001691c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001691a:	89 f1                	mov    ecx,esi
c001691c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016923:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001692a:	c1 e2 08             	shl    edx,0x8
c001692d:	c1 e7 10             	shl    edi,0x10
c0016930:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016938:	09 fa                	or     edx,edi
c001693a:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016942:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016949:	83 c0 10             	add    eax,0x10
c001694c:	09 fa                	or     edx,edi
c001694e:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016955:	c1 e7 18             	shl    edi,0x18
c0016958:	09 fa                	or     edx,edi
c001695a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016961:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016965:	c1 e7 10             	shl    edi,0x10
c0016968:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001696f:	c1 e2 08             	shl    edx,0x8
c0016972:	09 fa                	or     edx,edi
c0016974:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001697b:	09 fa                	or     edx,edi
c001697d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016984:	c1 e7 18             	shl    edi,0x18
c0016987:	09 fa                	or     edx,edi
c0016989:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001698d:	46                   	inc    esi
c001698e:	83 fe 04             	cmp    esi,0x4
c0016991:	0f 85 7a ff ff ff    	jne    c0016911 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001699b:	83 f0 01             	xor    eax,0x1
c001699e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00169a2:	75 57                	jne    c00169fb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a8:	83 f0 01             	xor    eax,0x1
c00169ab:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00169af:	75 4a                	jne    c00169fb <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00169b1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00169b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00169bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00169c5:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00169cb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00169d1:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00169d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00169db:	89 f7                	mov    edi,esi
c00169dd:	c1 e0 0a             	shl    eax,0xa
c00169e0:	c1 ff 1f             	sar    edi,0x1f
c00169e3:	57                   	push   edi
c00169e4:	56                   	push   esi
c00169e5:	52                   	push   edx
c00169e6:	50                   	push   eax
c00169e7:	e8 90 fe 00 00       	call   c002687c <__udivdi3>
c00169ec:	83 c4 10             	add    esp,0x10
c00169ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00169f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00169f7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00169fb:	84 c9                	test   cl,cl
c00169fd:	74 53                	je     c0016a52 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00169ff:	0f b6 c9             	movzx  ecx,cl
c0016a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016a0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016a1a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016a1e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016a22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016a2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a32:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016a36:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016a3a:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016a3e:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016a42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016a46:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016a4a:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016a4e:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016a52:	31 ed                	xor    ebp,ebp
c0016a54:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016a58:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016a5c:	89 f8                	mov    eax,edi
c0016a5e:	09 f0                	or     eax,esi
c0016a60:	74 1e                	je     c0016a80 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a62:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016a66:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016a6a:	89 d1                	mov    ecx,edx
c0016a6c:	09 c1                	or     ecx,eax
c0016a6e:	74 10                	je     c0016a80 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016a70:	83 ec 0c             	sub    esp,0xc
c0016a73:	57                   	push   edi
c0016a74:	56                   	push   esi
c0016a75:	52                   	push   edx
c0016a76:	50                   	push   eax
c0016a77:	53                   	push   ebx
c0016a78:	e8 c7 fc ff ff       	call   c0016744 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a7d:	83 c4 20             	add    esp,0x20
c0016a80:	45                   	inc    ebp
c0016a81:	83 fd 04             	cmp    ebp,0x4
c0016a84:	75 ce                	jne    c0016a54 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016a86:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016a8c:	5b                   	pop    ebx
c0016a8d:	5e                   	pop    esi
c0016a8e:	5f                   	pop    edi
c0016a8f:	5d                   	pop    ebp
c0016a90:	c3                   	ret    
c0016a91:	90                   	nop

c0016a92 <Serial::Serial(char const*)>:
c0016a92:	83 ec 0c             	sub    esp,0xc
c0016a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a99:	83 ec 08             	sub    esp,0x8
c0016a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa0:	50                   	push   eax
c0016aa1:	e8 44 d9 ff ff       	call   c00143ea <Device::Device(char const*)>
c0016aa6:	83 c4 10             	add    esp,0x10
c0016aa9:	ba 30 b1 02 c0       	mov    edx,0xc002b130
c0016aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab2:	89 10                	mov    DWORD PTR [eax],edx
c0016ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ab8:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ac2:	90                   	nop
c0016ac3:	83 c4 0c             	add    esp,0xc
c0016ac6:	c3                   	ret    
c0016ac7:	90                   	nop

c0016ac8 <Serial::~Serial()>:
c0016ac8:	83 ec 0c             	sub    esp,0xc
c0016acb:	ba 30 b1 02 c0       	mov    edx,0xc002b130
c0016ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ad4:	89 10                	mov    DWORD PTR [eax],edx
c0016ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	50                   	push   eax
c0016ade:	e8 e9 d5 ff ff       	call   c00140cc <Device::~Device()>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	90                   	nop
c0016ae7:	83 c4 0c             	add    esp,0xc
c0016aea:	c3                   	ret    
c0016aeb:	90                   	nop

c0016aec <Serial::~Serial()>:
c0016aec:	83 ec 0c             	sub    esp,0xc
c0016aef:	83 ec 0c             	sub    esp,0xc
c0016af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016af6:	e8 cd ff ff ff       	call   c0016ac8 <Serial::~Serial()>
c0016afb:	83 c4 10             	add    esp,0x10
c0016afe:	83 ec 08             	sub    esp,0x8
c0016b01:	68 58 01 00 00       	push   0x158
c0016b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b0a:	e8 e5 c1 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	83 c4 0c             	add    esp,0xc
c0016b15:	c3                   	ret    

c0016b16 <Timer::Timer(char const*)>:
c0016b16:	83 ec 0c             	sub    esp,0xc
c0016b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b1d:	83 ec 08             	sub    esp,0x8
c0016b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b24:	50                   	push   eax
c0016b25:	e8 c0 d8 ff ff       	call   c00143ea <Device::Device(char const*)>
c0016b2a:	83 c4 10             	add    esp,0x10
c0016b2d:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0016b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b36:	89 10                	mov    DWORD PTR [eax],edx
c0016b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b3c:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016b46:	90                   	nop
c0016b47:	83 c4 0c             	add    esp,0xc
c0016b4a:	c3                   	ret    
c0016b4b:	90                   	nop

c0016b4c <Timer::~Timer()>:
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	ba 74 b1 02 c0       	mov    edx,0xc002b174
c0016b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b58:	89 10                	mov    DWORD PTR [eax],edx
c0016b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5e:	83 ec 0c             	sub    esp,0xc
c0016b61:	50                   	push   eax
c0016b62:	e8 65 d5 ff ff       	call   c00140cc <Device::~Device()>
c0016b67:	83 c4 10             	add    esp,0x10
c0016b6a:	90                   	nop
c0016b6b:	83 c4 0c             	add    esp,0xc
c0016b6e:	c3                   	ret    
c0016b6f:	90                   	nop

c0016b70 <Timer::~Timer()>:
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	83 ec 0c             	sub    esp,0xc
c0016b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b7a:	e8 cd ff ff ff       	call   c0016b4c <Timer::~Timer()>
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	83 ec 08             	sub    esp,0x8
c0016b85:	68 5c 01 00 00       	push   0x15c
c0016b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b8e:	e8 61 c1 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0016b93:	83 c4 10             	add    esp,0x10
c0016b96:	83 c4 0c             	add    esp,0xc
c0016b99:	c3                   	ret    

c0016b9a <Timer::read()>:
c0016b9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b9e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016ba4:	c3                   	ret    

c0016ba5 <timerHandler(unsigned long long)>:
c0016ba5:	55                   	push   ebp
c0016ba6:	57                   	push   edi
c0016ba7:	56                   	push   esi
c0016ba8:	53                   	push   ebx
c0016ba9:	83 ec 0c             	sub    esp,0xc
c0016bac:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016bb0:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016bb4:	01 35 10 e9 02 c0    	add    DWORD PTR ds:0xc002e910,esi
c0016bba:	11 3d 14 e9 02 c0    	adc    DWORD PTR ds:0xc002e914,edi
c0016bc0:	80 3d 8d e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e28d,0x0
c0016bc7:	0f 84 07 01 00 00    	je     c0016cd4 <timerHandler(unsigned long long)+0x12f>
c0016bcd:	e8 cc 70 00 00       	call   c001dc9e <lockStuff()>
c0016bd2:	83 ec 0c             	sub    esp,0xc
c0016bd5:	68 dc 17 03 c0       	push   0xc00317dc
c0016bda:	e8 0f 1d 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016bdf:	c7 04 24 dc 17 03 c0 	mov    DWORD PTR [esp],0xc00317dc
c0016be6:	89 c3                	mov    ebx,eax
c0016be8:	e8 09 1d 01 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016bed:	83 c4 10             	add    esp,0x10
c0016bf0:	84 c0                	test   al,al
c0016bf2:	74 60                	je     c0016c54 <timerHandler(unsigned long long)+0xaf>
c0016bf4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016bfa:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016bfd:	85 c0                	test   eax,eax
c0016bff:	0f 85 91 00 00 00    	jne    c0016c96 <timerHandler(unsigned long long)+0xf1>
c0016c05:	e9 be 00 00 00       	jmp    c0016cc8 <timerHandler(unsigned long long)+0x123>
c0016c0a:	83 ec 0c             	sub    esp,0xc
c0016c0d:	55                   	push   ebp
c0016c0e:	e8 7b 76 00 00       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c0016c13:	83 c4 10             	add    esp,0x10
c0016c16:	39 eb                	cmp    ebx,ebp
c0016c18:	75 12                	jne    c0016c2c <timerHandler(unsigned long long)+0x87>
c0016c1a:	83 ec 0c             	sub    esp,0xc
c0016c1d:	68 dc 17 03 c0       	push   0xc00317dc
c0016c22:	e8 c7 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c27:	89 c3                	mov    ebx,eax
c0016c29:	83 c4 10             	add    esp,0x10
c0016c2c:	83 ec 0c             	sub    esp,0xc
c0016c2f:	68 dc 17 03 c0       	push   0xc00317dc
c0016c34:	e8 bd 1c 01 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016c39:	83 c4 10             	add    esp,0x10
c0016c3c:	84 c0                	test   al,al
c0016c3e:	75 b4                	jne    c0016bf4 <timerHandler(unsigned long long)+0x4f>
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	68 dc 17 03 c0       	push   0xc00317dc
c0016c48:	e8 a1 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c4d:	83 c4 10             	add    esp,0x10
c0016c50:	39 d8                	cmp    eax,ebx
c0016c52:	74 a0                	je     c0016bf4 <timerHandler(unsigned long long)+0x4f>
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	68 dc 17 03 c0       	push   0xc00317dc
c0016c5c:	e8 8d 1c 01 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c61:	c7 04 24 dc 17 03 c0 	mov    DWORD PTR [esp],0xc00317dc
c0016c68:	89 c5                	mov    ebp,eax
c0016c6a:	e8 a3 1c 01 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c6f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016c72:	83 c4 10             	add    esp,0x10
c0016c75:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016c78:	39 15 10 e9 02 c0    	cmp    DWORD PTR ds:0xc002e910,edx
c0016c7e:	a1 14 e9 02 c0       	mov    eax,ds:0xc002e914
c0016c83:	19 c8                	sbb    eax,ecx
c0016c85:	73 83                	jae    c0016c0a <timerHandler(unsigned long long)+0x65>
c0016c87:	50                   	push   eax
c0016c88:	50                   	push   eax
c0016c89:	55                   	push   ebp
c0016c8a:	68 dc 17 03 c0       	push   0xc00317dc
c0016c8f:	e8 2c 1d 01 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c94:	eb 93                	jmp    c0016c29 <timerHandler(unsigned long long)+0x84>
c0016c96:	80 3d 8c e2 02 c0 00 	cmp    BYTE PTR ds:0xc002e28c,0x0
c0016c9d:	74 29                	je     c0016cc8 <timerHandler(unsigned long long)+0x123>
c0016c9f:	39 c6                	cmp    esi,eax
c0016ca1:	bb 00 00 00 00       	mov    ebx,0x0
c0016ca6:	19 df                	sbb    edi,ebx
c0016ca8:	72 19                	jb     c0016cc3 <timerHandler(unsigned long long)+0x11e>
c0016caa:	e8 c8 6f 00 00       	call   c001dc77 <lockScheduler()>
c0016caf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cb4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016cb7:	e8 f6 72 00 00       	call   c001dfb2 <schedule()>
c0016cbc:	e8 b8 6f 00 00       	call   c001dc79 <unlockScheduler()>
c0016cc1:	eb 05                	jmp    c0016cc8 <timerHandler(unsigned long long)+0x123>
c0016cc3:	29 f0                	sub    eax,esi
c0016cc5:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016cc8:	83 c4 0c             	add    esp,0xc
c0016ccb:	5b                   	pop    ebx
c0016ccc:	5e                   	pop    esi
c0016ccd:	5f                   	pop    edi
c0016cce:	5d                   	pop    ebp
c0016ccf:	e9 63 73 00 00       	jmp    c001e037 <unlockStuff()>
c0016cd4:	83 c4 0c             	add    esp,0xc
c0016cd7:	5b                   	pop    ebx
c0016cd8:	5e                   	pop    esi
c0016cd9:	5f                   	pop    edi
c0016cda:	5d                   	pop    ebp
c0016cdb:	c3                   	ret    

c0016cdc <setupTimer(int)>:
c0016cdc:	57                   	push   edi
c0016cdd:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0016ce2:	56                   	push   esi
c0016ce3:	53                   	push   ebx
c0016ce4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016ce8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016cf7:	e8 ea d7 ff ff       	call   c00144e6 <Device::getName()>
c0016cfc:	83 c4 10             	add    esp,0x10
c0016cff:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016d02:	0f 85 8d 00 00 00    	jne    c0016d95 <setupTimer(int)+0xb9>
c0016d08:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0016d0d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016d14:	74 7f                	je     c0016d95 <setupTimer(int)+0xb9>
c0016d16:	83 ec 0c             	sub    esp,0xc
c0016d19:	68 5c 01 00 00       	push   0x15c
c0016d1e:	e8 1d 8b ff ff       	call   c000f840 <malloc>
c0016d23:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d26:	89 c3                	mov    ebx,eax
c0016d28:	e8 31 f7 00 00       	call   c002645e <PIT::PIT()>
c0016d2d:	59                   	pop    ecx
c0016d2e:	5f                   	pop    edi
c0016d2f:	53                   	push   ebx
c0016d30:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c0016d36:	e8 bf d4 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016d3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d3d:	6a 00                	push   0x0
c0016d3f:	6a 00                	push   0x0
c0016d41:	56                   	push   esi
c0016d42:	53                   	push   ebx
c0016d43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016d46:	83 c4 14             	add    esp,0x14
c0016d49:	68 60 01 00 00       	push   0x160
c0016d4e:	e8 ed 8a ff ff       	call   c000f840 <malloc>
c0016d53:	89 04 24             	mov    DWORD PTR [esp],eax
c0016d56:	89 c7                	mov    edi,eax
c0016d58:	e8 b1 f5 00 00       	call   c002630e <APICTimer::APICTimer()>
c0016d5d:	6a 00                	push   0x0
c0016d5f:	6a 00                	push   0x0
c0016d61:	56                   	push   esi
c0016d62:	57                   	push   edi
c0016d63:	e8 a8 f4 00 00       	call   c0026210 <APICTimer::open(int, int, void*)>
c0016d68:	83 c4 20             	add    esp,0x20
c0016d6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d6d:	6a 00                	push   0x0
c0016d6f:	6a 00                	push   0x0
c0016d71:	6a 00                	push   0x0
c0016d73:	53                   	push   ebx
c0016d74:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d77:	58                   	pop    eax
c0016d78:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0016d7d:	5a                   	pop    edx
c0016d7e:	57                   	push   edi
c0016d7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d85:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016d8b:	e8 6a d4 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016d90:	83 c4 10             	add    esp,0x10
c0016d93:	eb 33                	jmp    c0016dc8 <setupTimer(int)+0xec>
c0016d95:	83 ec 0c             	sub    esp,0xc
c0016d98:	68 5c 01 00 00       	push   0x15c
c0016d9d:	e8 9e 8a ff ff       	call   c000f840 <malloc>
c0016da2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016da5:	89 c3                	mov    ebx,eax
c0016da7:	e8 b2 f6 00 00       	call   c002645e <PIT::PIT()>
c0016dac:	58                   	pop    eax
c0016dad:	5a                   	pop    edx
c0016dae:	53                   	push   ebx
c0016daf:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c0016db5:	e8 40 d4 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0016dba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016dbc:	6a 00                	push   0x0
c0016dbe:	6a 00                	push   0x0
c0016dc0:	56                   	push   esi
c0016dc1:	53                   	push   ebx
c0016dc2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016dc5:	83 c4 20             	add    esp,0x20
c0016dc8:	89 d8                	mov    eax,ebx
c0016dca:	5b                   	pop    ebx
c0016dcb:	5e                   	pop    esi
c0016dcc:	5f                   	pop    edi
c0016dcd:	c3                   	ret    

c0016dce <VCache::VCache(PhysicalDisk*)>:
c0016dce:	53                   	push   ebx
c0016dcf:	83 ec 18             	sub    esp,0x18
c0016dd2:	ba a4 b1 02 c0       	mov    edx,0xc002b1a4
c0016dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ddb:	89 10                	mov    DWORD PTR [eax],edx
c0016ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016de1:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016de8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016dec:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016df7:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016dfe:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016e05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e09:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016e10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016e17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e26:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e2e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016e35:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e40:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016e44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e48:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e50:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e58:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016e5f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016e67:	83 ec 0c             	sub    esp,0xc
c0016e6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e6e:	e8 cd 89 ff ff       	call   c000f840 <malloc>
c0016e73:	83 c4 10             	add    esp,0x10
c0016e76:	89 c3                	mov    ebx,eax
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	53                   	push   ebx
c0016e7c:	e8 15 6f 00 00       	call   c001dd96 <Mutex::Mutex()>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e88:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016e8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e8f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e9a:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016ea1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ea5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016eab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eaf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016eb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016eb6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016ebc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016ec2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ec6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016ec9:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ed0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016ed4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016ed8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ede:	05 00 01 00 00       	add    eax,0x100
c0016ee3:	c1 e0 04             	shl    eax,0x4
c0016ee6:	83 ec 0c             	sub    esp,0xc
c0016ee9:	50                   	push   eax
c0016eea:	e8 51 89 ff ff       	call   c000f840 <malloc>
c0016eef:	83 c4 10             	add    esp,0x10
c0016ef2:	89 c2                	mov    edx,eax
c0016ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ef8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eff:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016f06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f0a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016f0e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f12:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016f18:	c1 e0 07             	shl    eax,0x7
c0016f1b:	83 ec 0c             	sub    esp,0xc
c0016f1e:	50                   	push   eax
c0016f1f:	e8 1c 89 ff ff       	call   c000f840 <malloc>
c0016f24:	83 c4 10             	add    esp,0x10
c0016f27:	89 c2                	mov    edx,eax
c0016f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f2d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f30:	90                   	nop
c0016f31:	83 c4 18             	add    esp,0x18
c0016f34:	5b                   	pop    ebx
c0016f35:	c3                   	ret    

c0016f36 <VCache::invalidateReadBuffer()>:
c0016f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f3a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016f40:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016f44:	c3                   	ret    
c0016f45:	90                   	nop

c0016f46 <VCache::writeWriteBuffer()>:
c0016f46:	53                   	push   ebx
c0016f47:	83 ec 14             	sub    esp,0x14
c0016f4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f51:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f53:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016f56:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f59:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016f5c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016f5f:	50                   	push   eax
c0016f60:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016f63:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016f6a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016f71:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016f75:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016f7c:	83 c4 28             	add    esp,0x28
c0016f7f:	5b                   	pop    ebx
c0016f80:	c3                   	ret    
c0016f81:	90                   	nop

c0016f82 <VCache::~VCache()>:
c0016f82:	83 ec 0c             	sub    esp,0xc
c0016f85:	ba a4 b1 02 c0       	mov    edx,0xc002b1a4
c0016f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f8e:	89 10                	mov    DWORD PTR [eax],edx
c0016f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f94:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016f97:	84 c0                	test   al,al
c0016f99:	74 0f                	je     c0016faa <VCache::~VCache()+0x28>
c0016f9b:	83 ec 0c             	sub    esp,0xc
c0016f9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fa2:	e8 9f ff ff ff       	call   c0016f46 <VCache::writeWriteBuffer()>
c0016fa7:	83 c4 10             	add    esp,0x10
c0016faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016fb1:	83 ec 0c             	sub    esp,0xc
c0016fb4:	50                   	push   eax
c0016fb5:	e8 96 88 ff ff       	call   c000f850 <free>
c0016fba:	83 c4 10             	add    esp,0x10
c0016fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fc1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016fc4:	83 ec 0c             	sub    esp,0xc
c0016fc7:	50                   	push   eax
c0016fc8:	e8 83 88 ff ff       	call   c000f850 <free>
c0016fcd:	83 c4 10             	add    esp,0x10
c0016fd0:	90                   	nop
c0016fd1:	83 c4 0c             	add    esp,0xc
c0016fd4:	c3                   	ret    
c0016fd5:	90                   	nop

c0016fd6 <VCache::~VCache()>:
c0016fd6:	83 ec 0c             	sub    esp,0xc
c0016fd9:	83 ec 0c             	sub    esp,0xc
c0016fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fe0:	e8 9d ff ff ff       	call   c0016f82 <VCache::~VCache()>
c0016fe5:	83 c4 10             	add    esp,0x10
c0016fe8:	83 ec 08             	sub    esp,0x8
c0016feb:	6a 44                	push   0x44
c0016fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ff1:	e8 fe bc ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0016ff6:	83 c4 10             	add    esp,0x10
c0016ff9:	83 c4 0c             	add    esp,0xc
c0016ffc:	c3                   	ret    
c0016ffd:	90                   	nop

c0016ffe <VCache::write(unsigned long long, int, void*)>:
c0016ffe:	55                   	push   ebp
c0016fff:	57                   	push   edi
c0017000:	56                   	push   esi
c0017001:	53                   	push   ebx
c0017002:	83 ec 28             	sub    esp,0x28
c0017005:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017009:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001700d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017011:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017015:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017018:	e8 db 71 00 00       	call   c001e1f8 <Semaphore::acquire()>
c001701d:	83 c4 10             	add    esp,0x10
c0017020:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017024:	74 0c                	je     c0017032 <VCache::write(unsigned long long, int, void*)+0x34>
c0017026:	83 ec 0c             	sub    esp,0xc
c0017029:	53                   	push   ebx
c001702a:	e8 07 ff ff ff       	call   c0016f36 <VCache::invalidateReadBuffer()>
c001702f:	83 c4 10             	add    esp,0x10
c0017032:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017036:	74 66                	je     c001709e <VCache::write(unsigned long long, int, void*)+0xa0>
c0017038:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001703b:	99                   	cdq    
c001703c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017040:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017043:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017046:	89 c1                	mov    ecx,eax
c0017048:	89 d0                	mov    eax,edx
c001704a:	31 f1                	xor    ecx,esi
c001704c:	31 f8                	xor    eax,edi
c001704e:	89 ca                	mov    edx,ecx
c0017050:	09 c2                	or     edx,eax
c0017052:	75 3e                	jne    c0017092 <VCache::write(unsigned long long, int, void*)+0x94>
c0017054:	83 fd 01             	cmp    ebp,0x1
c0017057:	75 39                	jne    c0017092 <VCache::write(unsigned long long, int, void*)+0x94>
c0017059:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001705c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017062:	51                   	push   ecx
c0017063:	50                   	push   eax
c0017064:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017068:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001706c:	0f af c8             	imul   ecx,eax
c001706f:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017072:	51                   	push   ecx
c0017073:	e8 cc 96 fe ff       	call   c0000744 <memcpy>
c0017078:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	40                   	inc    eax
c001707f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017082:	83 c0 80             	add    eax,0xffffff80
c0017085:	75 57                	jne    c00170de <VCache::write(unsigned long long, int, void*)+0xe0>
c0017087:	83 ec 0c             	sub    esp,0xc
c001708a:	53                   	push   ebx
c001708b:	e8 b6 fe ff ff       	call   c0016f46 <VCache::writeWriteBuffer()>
c0017090:	eb 34                	jmp    c00170c6 <VCache::write(unsigned long long, int, void*)+0xc8>
c0017092:	83 ec 0c             	sub    esp,0xc
c0017095:	53                   	push   ebx
c0017096:	e8 ab fe ff ff       	call   c0016f46 <VCache::writeWriteBuffer()>
c001709b:	83 c4 10             	add    esp,0x10
c001709e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00170a1:	83 fd 7f             	cmp    ebp,0x7f
c00170a4:	7f 25                	jg     c00170cb <VCache::write(unsigned long long, int, void*)+0xcd>
c00170a6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00170a9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00170ac:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00170af:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00170b3:	52                   	push   edx
c00170b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00170ba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00170be:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00170c1:	e8 7e 96 fe ff       	call   c0000744 <memcpy>
c00170c6:	83 c4 10             	add    esp,0x10
c00170c9:	eb 13                	jmp    c00170de <VCache::write(unsigned long long, int, void*)+0xe0>
c00170cb:	83 ec 0c             	sub    esp,0xc
c00170ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00170d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170d4:	55                   	push   ebp
c00170d5:	57                   	push   edi
c00170d6:	56                   	push   esi
c00170d7:	50                   	push   eax
c00170d8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00170db:	83 c4 20             	add    esp,0x20
c00170de:	83 ec 0c             	sub    esp,0xc
c00170e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00170e4:	e8 bd 76 00 00       	call   c001e7a6 <Semaphore::release()>
c00170e9:	83 c4 2c             	add    esp,0x2c
c00170ec:	31 c0                	xor    eax,eax
c00170ee:	5b                   	pop    ebx
c00170ef:	5e                   	pop    esi
c00170f0:	5f                   	pop    edi
c00170f1:	5d                   	pop    ebp
c00170f2:	c3                   	ret    
c00170f3:	90                   	nop

c00170f4 <VCache::read(unsigned long long, int, void*)>:
c00170f4:	55                   	push   ebp
c00170f5:	57                   	push   edi
c00170f6:	56                   	push   esi
c00170f7:	53                   	push   ebx
c00170f8:	83 ec 28             	sub    esp,0x28
c00170fb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00170ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017103:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001710b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001710f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017113:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0017117:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001711a:	e8 d9 70 00 00       	call   c001e1f8 <Semaphore::acquire()>
c001711f:	83 c4 10             	add    esp,0x10
c0017122:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017126:	74 0c                	je     c0017134 <VCache::read(unsigned long long, int, void*)+0x40>
c0017128:	83 ec 0c             	sub    esp,0xc
c001712b:	53                   	push   ebx
c001712c:	e8 15 fe ff ff       	call   c0016f46 <VCache::writeWriteBuffer()>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	83 fe 01             	cmp    esi,0x1
c0017137:	0f 85 80 00 00 00    	jne    c00171bd <VCache::read(unsigned long long, int, void*)+0xc9>
c001713d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017140:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017147:	75 74                	jne    c00171bd <VCache::read(unsigned long long, int, void*)+0xc9>
c0017149:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001714c:	89 d1                	mov    ecx,edx
c001714e:	f7 d9                	neg    ecx
c0017150:	89 cf                	mov    edi,ecx
c0017152:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017156:	c1 ff 1f             	sar    edi,0x1f
c0017159:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001715c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017160:	89 ce                	mov    esi,ecx
c0017162:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017166:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001716a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001716e:	89 cf                	mov    edi,ecx
c0017170:	74 0a                	je     c001717c <VCache::read(unsigned long long, int, void*)+0x88>
c0017172:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017175:	75 05                	jne    c001717c <VCache::read(unsigned long long, int, void*)+0x88>
c0017177:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001717a:	74 1c                	je     c0017198 <VCache::read(unsigned long long, int, void*)+0xa4>
c001717c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017180:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0017183:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017186:	83 ec 0c             	sub    esp,0xc
c0017189:	8b 08                	mov    ecx,DWORD PTR [eax]
c001718b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001718e:	52                   	push   edx
c001718f:	57                   	push   edi
c0017190:	56                   	push   esi
c0017191:	50                   	push   eax
c0017192:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017195:	83 c4 20             	add    esp,0x20
c0017198:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001719b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00171a1:	50                   	push   eax
c00171a2:	52                   	push   edx
c00171a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00171a6:	48                   	dec    eax
c00171a7:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00171ab:	0f af c2             	imul   eax,edx
c00171ae:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00171b1:	50                   	push   eax
c00171b2:	55                   	push   ebp
c00171b3:	e8 8c 95 fe ff       	call   c0000744 <memcpy>
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	eb 21                	jmp    c00171de <VCache::read(unsigned long long, int, void*)+0xea>
c00171bd:	83 ec 0c             	sub    esp,0xc
c00171c0:	53                   	push   ebx
c00171c1:	e8 70 fd ff ff       	call   c0016f36 <VCache::invalidateReadBuffer()>
c00171c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00171cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00171ce:	56                   	push   esi
c00171cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171d7:	50                   	push   eax
c00171d8:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00171db:	83 c4 20             	add    esp,0x20
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00171e4:	e8 bd 75 00 00       	call   c001e7a6 <Semaphore::release()>
c00171e9:	83 c4 2c             	add    esp,0x2c
c00171ec:	31 c0                	xor    eax,eax
c00171ee:	5b                   	pop    ebx
c00171ef:	5e                   	pop    esi
c00171f0:	5f                   	pop    edi
c00171f1:	5d                   	pop    ebp
c00171f2:	c3                   	ret    
c00171f3:	90                   	nop

c00171f4 <Video::putrect(int, int, int, int, unsigned int)>:
c00171f4:	55                   	push   ebp
c00171f5:	57                   	push   edi
c00171f6:	56                   	push   esi
c00171f7:	53                   	push   ebx
c00171f8:	83 ec 1c             	sub    esp,0x1c
c00171fb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00171ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017203:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017207:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001720b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001720f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017213:	01 df                	add    edi,ebx
c0017215:	39 fb                	cmp    ebx,edi
c0017217:	7d 1f                	jge    c0017238 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017219:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001721d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017221:	7d 12                	jge    c0017235 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017223:	8b 16                	mov    edx,DWORD PTR [esi]
c0017225:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017229:	53                   	push   ebx
c001722a:	55                   	push   ebp
c001722b:	45                   	inc    ebp
c001722c:	56                   	push   esi
c001722d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	eb e8                	jmp    c001721d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017235:	43                   	inc    ebx
c0017236:	eb dd                	jmp    c0017215 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017238:	83 c4 1c             	add    esp,0x1c
c001723b:	5b                   	pop    ebx
c001723c:	5e                   	pop    esi
c001723d:	5f                   	pop    edi
c001723e:	5d                   	pop    ebp
c001723f:	c3                   	ret    

c0017240 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017240:	55                   	push   ebp
c0017241:	57                   	push   edi
c0017242:	31 ff                	xor    edi,edi
c0017244:	56                   	push   esi
c0017245:	53                   	push   ebx
c0017246:	83 ec 1c             	sub    esp,0x1c
c0017249:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001724d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017251:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017258:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001725d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017261:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017265:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017269:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001726c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017270:	01 f9                	add    ecx,edi
c0017272:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017276:	7d 2f                	jge    c00172a7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017278:	31 f6                	xor    esi,esi
c001727a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001727e:	01 f2                	add    edx,esi
c0017280:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017284:	7d 1a                	jge    c00172a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017286:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017289:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001728c:	46                   	inc    esi
c001728d:	51                   	push   ecx
c001728e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017292:	52                   	push   edx
c0017293:	55                   	push   ebp
c0017294:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001729e:	eb da                	jmp    c001727a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00172a0:	47                   	inc    edi
c00172a1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00172a5:	eb c5                	jmp    c001726c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00172a7:	83 c4 1c             	add    esp,0x1c
c00172aa:	5b                   	pop    ebx
c00172ab:	5e                   	pop    esi
c00172ac:	5f                   	pop    edi
c00172ad:	5d                   	pop    ebp
c00172ae:	c3                   	ret    
c00172af:	90                   	nop

c00172b0 <Video::blit(unsigned int*, int, int, int, int)>:
c00172b0:	55                   	push   ebp
c00172b1:	57                   	push   edi
c00172b2:	56                   	push   esi
c00172b3:	53                   	push   ebx
c00172b4:	83 ec 1c             	sub    esp,0x1c
c00172b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172bf:	85 c0                	test   eax,eax
c00172c1:	79 02                	jns    c00172c5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00172c3:	31 c0                	xor    eax,eax
c00172c5:	c1 e0 02             	shl    eax,0x2
c00172c8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172d0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172d4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00172d8:	39 d8                	cmp    eax,ebx
c00172da:	7e 49                	jle    c0017325 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172dc:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00172e2:	7c 41                	jl     c0017325 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00172e4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00172e8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172ec:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00172f0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00172f4:	39 f9                	cmp    ecx,edi
c00172f6:	7e 22                	jle    c001731a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00172f8:	83 c5 04             	add    ebp,0x4
c00172fb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017301:	7c 14                	jl     c0017317 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017303:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017305:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017308:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001730c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017310:	56                   	push   esi
c0017311:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	47                   	inc    edi
c0017318:	eb d2                	jmp    c00172ec <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001731a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001731e:	43                   	inc    ebx
c001731f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017323:	eb ab                	jmp    c00172d0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017325:	83 c4 1c             	add    esp,0x1c
c0017328:	5b                   	pop    ebx
c0017329:	5e                   	pop    esi
c001732a:	5f                   	pop    edi
c001732b:	5d                   	pop    ebp
c001732c:	c3                   	ret    
c001732d:	90                   	nop

c001732e <Video::clearScreen(unsigned int)>:
c001732e:	57                   	push   edi
c001732f:	56                   	push   esi
c0017330:	53                   	push   ebx
c0017331:	31 db                	xor    ebx,ebx
c0017333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017337:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001733d:	7e 1f                	jle    c001735e <Video::clearScreen(unsigned int)+0x30>
c001733f:	31 ff                	xor    edi,edi
c0017341:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017347:	7e 12                	jle    c001735b <Video::clearScreen(unsigned int)+0x2d>
c0017349:	8b 06                	mov    eax,DWORD PTR [esi]
c001734b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001734f:	53                   	push   ebx
c0017350:	57                   	push   edi
c0017351:	47                   	inc    edi
c0017352:	56                   	push   esi
c0017353:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017356:	83 c4 10             	add    esp,0x10
c0017359:	eb e6                	jmp    c0017341 <Video::clearScreen(unsigned int)+0x13>
c001735b:	43                   	inc    ebx
c001735c:	eb d9                	jmp    c0017337 <Video::clearScreen(unsigned int)+0x9>
c001735e:	5b                   	pop    ebx
c001735f:	5e                   	pop    esi
c0017360:	5f                   	pop    edi
c0017361:	c3                   	ret    

c0017362 <Video::putpixel(int, int, unsigned int)>:
c0017362:	c7 44 24 04 ac b1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b1ac
c001736a:	e9 0e 31 00 00       	jmp    c001a47d <Krnl::panic(char const*)>
c001736f:	90                   	nop

c0017370 <Video::Video(char const*)>:
c0017370:	83 ec 0c             	sub    esp,0xc
c0017373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017377:	83 ec 08             	sub    esp,0x8
c001737a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001737e:	50                   	push   eax
c001737f:	e8 66 d0 ff ff       	call   c00143ea <Device::Device(char const*)>
c0017384:	83 c4 10             	add    esp,0x10
c0017387:	ba 30 b2 02 c0       	mov    edx,0xc002b230
c001738c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017390:	89 10                	mov    DWORD PTR [eax],edx
c0017392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017396:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00173a0:	90                   	nop
c00173a1:	83 c4 0c             	add    esp,0xc
c00173a4:	c3                   	ret    
c00173a5:	90                   	nop

c00173a6 <Video::~Video()>:
c00173a6:	83 ec 0c             	sub    esp,0xc
c00173a9:	ba 30 b2 02 c0       	mov    edx,0xc002b230
c00173ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173b2:	89 10                	mov    DWORD PTR [eax],edx
c00173b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00173b8:	83 ec 0c             	sub    esp,0xc
c00173bb:	50                   	push   eax
c00173bc:	e8 0b cd ff ff       	call   c00140cc <Device::~Device()>
c00173c1:	83 c4 10             	add    esp,0x10
c00173c4:	90                   	nop
c00173c5:	83 c4 0c             	add    esp,0xc
c00173c8:	c3                   	ret    
c00173c9:	90                   	nop

c00173ca <Video::~Video()>:
c00173ca:	83 ec 0c             	sub    esp,0xc
c00173cd:	83 ec 0c             	sub    esp,0xc
c00173d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173d4:	e8 cd ff ff ff       	call   c00173a6 <Video::~Video()>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	83 ec 08             	sub    esp,0x8
c00173df:	68 64 01 00 00       	push   0x164
c00173e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173e8:	e8 07 b9 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00173ed:	83 c4 10             	add    esp,0x10
c00173f0:	83 c4 0c             	add    esp,0xc
c00173f3:	c3                   	ret    

c00173f4 <Video::isMonochrome()>:
c00173f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173f8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <Video::getWidth()>:
c0017400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017404:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001740a:	c3                   	ret    
c001740b:	90                   	nop

c001740c <Video::getHeight()>:
c001740c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017410:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017416:	c3                   	ret    
c0017417:	90                   	nop

c0017418 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017418:	55                   	push   ebp
c0017419:	57                   	push   edi
c001741a:	56                   	push   esi
c001741b:	53                   	push   ebx
c001741c:	83 ec 2c             	sub    esp,0x2c
c001741f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017423:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017427:	83 f8 01             	cmp    eax,0x1
c001742a:	19 c9                	sbb    ecx,ecx
c001742c:	31 db                	xor    ebx,ebx
c001742e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017432:	89 cd                	mov    ebp,ecx
c0017434:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001743c:	f7 d5                	not    ebp
c001743e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017444:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017448:	01 d8                	add    eax,ebx
c001744a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001744e:	56                   	push   esi
c001744f:	e8 b8 ff ff ff       	call   c001740c <Video::getHeight()>
c0017454:	59                   	pop    ecx
c0017455:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017459:	7e 70                	jle    c00174cb <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001745b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001745f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017463:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017466:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001746a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001746e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017475:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017479:	89 f8                	mov    eax,edi
c001747b:	83 c0 20             	add    eax,0x20
c001747e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017482:	56                   	push   esi
c0017483:	e8 78 ff ff ff       	call   c0017400 <Video::getWidth()>
c0017488:	5a                   	pop    edx
c0017489:	39 c7                	cmp    edi,eax
c001748b:	7d 34                	jge    c00174c1 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001748d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017492:	74 05                	je     c0017499 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017494:	8b 06                	mov    eax,DWORD PTR [esi]
c0017496:	55                   	push   ebp
c0017497:	eb 0d                	jmp    c00174a6 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017499:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001749e:	74 12                	je     c00174b2 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00174a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00174a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174aa:	57                   	push   edi
c00174ab:	56                   	push   esi
c00174ac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00174b6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00174ba:	47                   	inc    edi
c00174bb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00174bf:	75 c1                	jne    c0017482 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00174c1:	43                   	inc    ebx
c00174c2:	83 fb 20             	cmp    ebx,0x20
c00174c5:	0f 85 79 ff ff ff    	jne    c0017444 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00174cb:	83 c4 2c             	add    esp,0x2c
c00174ce:	5b                   	pop    ebx
c00174cf:	5e                   	pop    esi
c00174d0:	5f                   	pop    edi
c00174d1:	5d                   	pop    ebp
c00174d2:	c3                   	ret    
c00174d3:	90                   	nop

c00174d4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00174d4:	55                   	push   ebp
c00174d5:	57                   	push   edi
c00174d6:	56                   	push   esi
c00174d7:	53                   	push   ebx
c00174d8:	83 ec 28             	sub    esp,0x28
c00174db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00174df:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00174e3:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00174e7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00174eb:	c1 e7 08             	shl    edi,0x8
c00174ee:	01 c7                	add    edi,eax
c00174f0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00174f4:	c1 e0 08             	shl    eax,0x8
c00174f7:	01 d0                	add    eax,edx
c00174f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017501:	0f af c7             	imul   eax,edi
c0017504:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001750b:	50                   	push   eax
c001750c:	e8 2f 83 ff ff       	call   c000f840 <malloc>
c0017511:	83 c4 10             	add    esp,0x10
c0017514:	89 c5                	mov    ebp,eax
c0017516:	85 c0                	test   eax,eax
c0017518:	75 15                	jne    c001752f <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001751a:	83 ec 0c             	sub    esp,0xc
c001751d:	68 cd b1 02 c0       	push   0xc002b1cd
c0017522:	e8 ad b8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	e9 1c 01 00 00       	jmp    c001764b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001752f:	be 12 00 00 00       	mov    esi,0x12
c0017534:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017538:	74 11                	je     c001754b <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001753a:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001753e:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017542:	c1 fe 03             	sar    esi,0x3
c0017545:	0f af f0             	imul   esi,eax
c0017548:	83 c6 12             	add    esi,0x12
c001754b:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001754f:	74 04                	je     c0017555 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017551:	85 ff                	test   edi,edi
c0017553:	75 12                	jne    c0017567 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017555:	83 ec 0c             	sub    esp,0xc
c0017558:	68 e4 b1 02 c0       	push   0xc002b1e4
c001755d:	e8 72 b8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017562:	e9 ce 00 00 00       	jmp    c0017635 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017567:	52                   	push   edx
c0017568:	52                   	push   edx
c0017569:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c001756d:	50                   	push   eax
c001756e:	68 f9 b1 02 c0       	push   0xc002b1f9
c0017573:	e8 5c b8 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017578:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001757c:	83 c4 10             	add    esp,0x10
c001757f:	80 fa 02             	cmp    dl,0x2
c0017582:	0f 85 98 00 00 00    	jne    c0017620 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017588:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001758d:	75 10                	jne    c001759f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001758f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017593:	75 0a                	jne    c001759f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017595:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017598:	83 e8 18             	sub    eax,0x18
c001759b:	a8 f7                	test   al,0xf7
c001759d:	74 0a                	je     c00175a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001759f:	83 ec 0c             	sub    esp,0xc
c00175a2:	68 06 b2 02 c0       	push   0xc002b206
c00175a7:	eb 7f                	jmp    c0017628 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00175a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175b1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00175b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00175bd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175c5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00175c9:	75 0c                	jne    c00175d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00175cb:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00175d0:	c1 e0 18             	shl    eax,0x18
c00175d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00175d7:	41                   	inc    ecx
c00175d8:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00175dd:	c1 e2 10             	shl    edx,0x10
c00175e0:	89 d0                	mov    eax,edx
c00175e2:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00175e7:	c1 e2 08             	shl    edx,0x8
c00175ea:	09 c2                	or     edx,eax
c00175ec:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00175f0:	09 c2                	or     edx,eax
c00175f2:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00175f6:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00175fa:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00175fe:	c1 f8 03             	sar    eax,0x3
c0017601:	01 c6                	add    esi,eax
c0017603:	89 c8                	mov    eax,ecx
c0017605:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017609:	39 c7                	cmp    edi,eax
c001760b:	7f b0                	jg     c00175bd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001760d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017611:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017615:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017618:	7e 22                	jle    c001763c <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001761a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001761e:	eb 99                	jmp    c00175b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017620:	50                   	push   eax
c0017621:	50                   	push   eax
c0017622:	52                   	push   edx
c0017623:	68 14 b2 02 c0       	push   0xc002b214
c0017628:	e8 a7 b7 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001762d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017630:	e8 1b 82 ff ff       	call   c000f850 <free>
c0017635:	83 c4 10             	add    esp,0x10
c0017638:	31 ed                	xor    ebp,ebp
c001763a:	eb 0f                	jmp    c001764b <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001763c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017643:	89 38                	mov    DWORD PTR [eax],edi
c0017645:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017649:	89 08                	mov    DWORD PTR [eax],ecx
c001764b:	83 c4 1c             	add    esp,0x1c
c001764e:	89 e8                	mov    eax,ebp
c0017650:	5b                   	pop    ebx
c0017651:	5e                   	pop    esi
c0017652:	5f                   	pop    edi
c0017653:	5d                   	pop    ebp
c0017654:	c3                   	ret    
c0017655:	90                   	nop

c0017656 <Video::putTGA(int, int, unsigned char*, int)>:
c0017656:	55                   	push   ebp
c0017657:	57                   	push   edi
c0017658:	56                   	push   esi
c0017659:	53                   	push   ebx
c001765a:	83 ec 28             	sub    esp,0x28
c001765d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017661:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017665:	50                   	push   eax
c0017666:	8d 44 24 18          	lea    eax,[esp+0x18]
c001766a:	50                   	push   eax
c001766b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001766f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017673:	56                   	push   esi
c0017674:	e8 5b fe ff ff       	call   c00174d4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017679:	83 c4 20             	add    esp,0x20
c001767c:	85 c0                	test   eax,eax
c001767e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017682:	74 35                	je     c00176b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017684:	89 c7                	mov    edi,eax
c0017686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001768a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001768e:	39 d8                	cmp    eax,ebx
c0017690:	7e 27                	jle    c00176b9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017692:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017696:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001769a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001769e:	39 e8                	cmp    eax,ebp
c00176a0:	7e 14                	jle    c00176b6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00176a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00176a4:	83 c7 04             	add    edi,0x4
c00176a7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00176aa:	53                   	push   ebx
c00176ab:	55                   	push   ebp
c00176ac:	45                   	inc    ebp
c00176ad:	56                   	push   esi
c00176ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	eb e0                	jmp    c0017696 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00176b6:	43                   	inc    ebx
c00176b7:	eb cd                	jmp    c0017686 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00176b9:	83 c4 1c             	add    esp,0x1c
c00176bc:	5b                   	pop    ebx
c00176bd:	5e                   	pop    esi
c00176be:	5f                   	pop    edi
c00176bf:	5d                   	pop    ebp
c00176c0:	c3                   	ret    
c00176c1:	90                   	nop

c00176c2 <ACPI::close(int, int, void*)>:
c00176c2:	83 ec 1c             	sub    esp,0x1c
c00176c5:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00176cd:	74 0a                	je     c00176d9 <ACPI::close(int, int, void*)+0x17>
c00176cf:	b8 00 00 00 00       	mov    eax,0x0
c00176d4:	e9 9a 00 00 00       	jmp    c0017773 <ACPI::close(int, int, void*)+0xb1>
c00176d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00176de:	75 37                	jne    c0017717 <ACPI::close(int, int, void*)+0x55>
c00176e0:	83 ec 0c             	sub    esp,0xc
c00176e3:	68 70 b2 02 c0       	push   0xc002b270
c00176e8:	e8 e7 b6 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00176ed:	83 c4 10             	add    esp,0x10
c00176f0:	a1 48 09 03 c0       	mov    eax,ds:0xc0030948
c00176f5:	85 c0                	test   eax,eax
c00176f7:	74 07                	je     c0017700 <ACPI::close(int, int, void*)+0x3e>
c00176f9:	a1 48 09 03 c0       	mov    eax,ds:0xc0030948
c00176fe:	ff d0                	call   eax
c0017700:	83 ec 0c             	sub    esp,0xc
c0017703:	68 94 b3 02 c0       	push   0xc002b394
c0017708:	e8 70 2d 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001770d:	83 c4 10             	add    esp,0x10
c0017710:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017715:	eb 5c                	jmp    c0017773 <ACPI::close(int, int, void*)+0xb1>
c0017717:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001771c:	75 50                	jne    c001776e <ACPI::close(int, int, void*)+0xac>
c001771e:	a1 44 09 03 c0       	mov    eax,ds:0xc0030944
c0017723:	85 c0                	test   eax,eax
c0017725:	74 07                	je     c001772e <ACPI::close(int, int, void*)+0x6c>
c0017727:	a1 44 09 03 c0       	mov    eax,ds:0xc0030944
c001772c:	ff d0                	call   eax
c001772e:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017733:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017738:	83 e0 02             	and    eax,0x2
c001773b:	74 1c                	je     c0017759 <ACPI::close(int, int, void*)+0x97>
c001773d:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017744:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017748:	89 c2                	mov    edx,eax
c001774a:	ec                   	in     al,dx
c001774b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001774f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017753:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017757:	eb da                	jmp    c0017733 <ACPI::close(int, int, void*)+0x71>
c0017759:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017760:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017765:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017769:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001776d:	ee                   	out    dx,al
c001776e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017773:	83 c4 1c             	add    esp,0x1c
c0017776:	c3                   	ret    

c0017777 <findRSDP()>:
c0017777:	83 ec 1c             	sub    esp,0x1c
c001777a:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001777f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017785:	83 e0 04             	and    eax,0x4
c0017788:	84 c0                	test   al,al
c001778a:	75 07                	jne    c0017793 <findRSDP()+0x1c>
c001778c:	b8 00 00 00 00       	mov    eax,0x0
c0017791:	eb 6a                	jmp    c00177fd <findRSDP()+0x86>
c0017793:	a1 d4 e2 02 c0       	mov    eax,ds:0xc002e2d4
c0017798:	3d ff 07 00 00       	cmp    eax,0x7ff
c001779d:	7f 1b                	jg     c00177ba <findRSDP()+0x43>
c001779f:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00177a4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00177aa:	83 e2 fb             	and    edx,0xfffffffb
c00177ad:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00177b3:	b8 00 00 00 00       	mov    eax,0x0
c00177b8:	eb 43                	jmp    c00177fd <findRSDP()+0x86>
c00177ba:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00177c2:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00177ca:	77 2c                	ja     c00177f8 <findRSDP()+0x81>
c00177cc:	83 ec 04             	sub    esp,0x4
c00177cf:	6a 08                	push   0x8
c00177d1:	68 7d b2 02 c0       	push   0xc002b27d
c00177d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177da:	e8 61 8e fe ff       	call   c0000640 <memcmp>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	85 c0                	test   eax,eax
c00177e4:	0f 94 c0             	sete   al
c00177e7:	84 c0                	test   al,al
c00177e9:	74 06                	je     c00177f1 <findRSDP()+0x7a>
c00177eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177ef:	eb 0c                	jmp    c00177fd <findRSDP()+0x86>
c00177f1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00177f6:	eb ca                	jmp    c00177c2 <findRSDP()+0x4b>
c00177f8:	b8 00 00 00 00       	mov    eax,0x0
c00177fd:	83 c4 1c             	add    esp,0x1c
c0017800:	c3                   	ret    

c0017801 <loadACPITables(unsigned char*)>:
c0017801:	56                   	push   esi
c0017802:	53                   	push   ebx
c0017803:	83 ec 44             	sub    esp,0x44
c0017806:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001780b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017811:	83 e0 04             	and    eax,0x4
c0017814:	84 c0                	test   al,al
c0017816:	0f 84 05 02 00 00    	je     c0017a21 <loadACPITables(unsigned char*)+0x220>
c001781c:	a0 60 0b 03 c0       	mov    al,ds:0xc0030b60
c0017821:	84 c0                	test   al,al
c0017823:	74 75                	je     c001789a <loadACPITables(unsigned char*)+0x99>
c0017825:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017829:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001782d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017831:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017834:	83 e8 24             	sub    eax,0x24
c0017837:	c1 e8 03             	shr    eax,0x3
c001783a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001783e:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017846:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001784a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001784e:	0f 8d b2 00 00 00    	jge    c0017906 <loadACPITables(unsigned char*)+0x105>
c0017854:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017858:	83 c0 24             	add    eax,0x24
c001785b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001785f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017863:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017867:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001786b:	c1 e0 03             	shl    eax,0x3
c001786e:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017872:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017876:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017879:	8b 00                	mov    eax,DWORD PTR [eax]
c001787b:	89 c1                	mov    ecx,eax
c001787d:	a1 4c 09 03 c0       	mov    eax,ds:0xc003094c
c0017882:	8d 50 01             	lea    edx,[eax+0x1]
c0017885:	89 15 4c 09 03 c0    	mov    DWORD PTR ds:0xc003094c,edx
c001788b:	89 ca                	mov    edx,ecx
c001788d:	89 14 c5 64 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf69c],edx
c0017894:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017898:	eb ac                	jmp    c0017846 <loadACPITables(unsigned char*)+0x45>
c001789a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001789e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178a9:	83 e8 24             	sub    eax,0x24
c00178ac:	c1 e8 02             	shr    eax,0x2
c00178af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178b3:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00178bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178bf:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00178c3:	7d 41                	jge    c0017906 <loadACPITables(unsigned char*)+0x105>
c00178c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00178c9:	83 c0 24             	add    eax,0x24
c00178cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00178d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178dc:	c1 e0 02             	shl    eax,0x2
c00178df:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00178e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178e7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00178e9:	a1 4c 09 03 c0       	mov    eax,ds:0xc003094c
c00178ee:	8d 50 01             	lea    edx,[eax+0x1]
c00178f1:	89 15 4c 09 03 c0    	mov    DWORD PTR ds:0xc003094c,edx
c00178f7:	89 ca                	mov    edx,ecx
c00178f9:	89 14 c5 64 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf69c],edx
c0017900:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017904:	eb b5                	jmp    c00178bb <loadACPITables(unsigned char*)+0xba>
c0017906:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001790e:	a1 4c 09 03 c0       	mov    eax,ds:0xc003094c
c0017913:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017917:	0f 8d 05 01 00 00    	jge    c0017a22 <loadACPITables(unsigned char*)+0x221>
c001791d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017921:	8b 04 c5 64 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf69c]
c0017928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001792c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017930:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017938:	25 ff 0f 00 00       	and    eax,0xfff
c001793d:	89 c6                	mov    esi,eax
c001793f:	e8 da a4 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0017944:	89 c3                	mov    ebx,eax
c0017946:	83 ec 0c             	sub    esp,0xc
c0017949:	6a 01                	push   0x1
c001794b:	e8 27 a2 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017950:	83 c4 10             	add    esp,0x10
c0017953:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017957:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001795d:	83 ec 0c             	sub    esp,0xc
c0017960:	6a 01                	push   0x1
c0017962:	6a 01                	push   0x1
c0017964:	50                   	push   eax
c0017965:	52                   	push   edx
c0017966:	53                   	push   ebx
c0017967:	e8 c8 ab ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001796c:	83 c4 20             	add    esp,0x20
c001796f:	09 f0                	or     eax,esi
c0017971:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017975:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017979:	c1 e0 03             	shl    eax,0x3
c001797c:	05 60 09 03 c0       	add    eax,0xc0030960
c0017981:	83 ec 04             	sub    esp,0x4
c0017984:	6a 04                	push   0x4
c0017986:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001798a:	50                   	push   eax
c001798b:	e8 b4 8d fe ff       	call   c0000744 <memcpy>
c0017990:	83 c4 10             	add    esp,0x10
c0017993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017997:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001799a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001799e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179a2:	05 00 10 00 00       	add    eax,0x1000
c00179a7:	c1 e8 0c             	shr    eax,0xc
c00179aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00179b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179b9:	25 ff 0f 00 00       	and    eax,0xfff
c00179be:	89 c6                	mov    esi,eax
c00179c0:	e8 59 a4 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c00179c5:	89 c3                	mov    ebx,eax
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00179ce:	e8 a4 a1 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179da:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	6a 01                	push   0x1
c00179e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179e9:	50                   	push   eax
c00179ea:	52                   	push   edx
c00179eb:	53                   	push   ebx
c00179ec:	e8 43 ab ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00179f1:	83 c4 20             	add    esp,0x20
c00179f4:	09 f0                	or     eax,esi
c00179f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00179fa:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00179fd:	83 ec 0c             	sub    esp,0xc
c0017a00:	50                   	push   eax
c0017a01:	e8 d3 a4 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c0017a06:	83 c4 10             	add    esp,0x10
c0017a09:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017a11:	89 14 c5 64 09 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf69c],edx
c0017a18:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017a1c:	e9 ed fe ff ff       	jmp    c001790e <loadACPITables(unsigned char*)+0x10d>
c0017a21:	90                   	nop
c0017a22:	83 c4 44             	add    esp,0x44
c0017a25:	5b                   	pop    ebx
c0017a26:	5e                   	pop    esi
c0017a27:	c3                   	ret    

c0017a28 <findRSDT(unsigned char*)>:
c0017a28:	56                   	push   esi
c0017a29:	53                   	push   ebx
c0017a2a:	83 ec 44             	sub    esp,0x44
c0017a2d:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0017a32:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a38:	83 e0 04             	and    eax,0x4
c0017a3b:	84 c0                	test   al,al
c0017a3d:	75 0a                	jne    c0017a49 <findRSDT(unsigned char*)+0x21>
c0017a3f:	b8 00 00 00 00       	mov    eax,0x0
c0017a44:	e9 f7 00 00 00       	jmp    c0017b40 <findRSDT(unsigned char*)+0x118>
c0017a49:	83 ec 04             	sub    esp,0x4
c0017a4c:	6a 24                	push   0x24
c0017a4e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017a52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a56:	50                   	push   eax
c0017a57:	e8 e8 8c fe ff       	call   c0000744 <memcpy>
c0017a5c:	83 c4 10             	add    esp,0x10
c0017a5f:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017a63:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017a67:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a6f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a73:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a77:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a87:	25 ff 0f 00 00       	and    eax,0xfff
c0017a8c:	89 c6                	mov    esi,eax
c0017a8e:	e8 8b a3 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0017a93:	89 c3                	mov    ebx,eax
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	6a 02                	push   0x2
c0017a9a:	e8 d8 a0 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017a9f:	83 c4 10             	add    esp,0x10
c0017aa2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017aa6:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aac:	83 ec 0c             	sub    esp,0xc
c0017aaf:	6a 01                	push   0x1
c0017ab1:	6a 02                	push   0x2
c0017ab3:	50                   	push   eax
c0017ab4:	52                   	push   edx
c0017ab5:	53                   	push   ebx
c0017ab6:	e8 79 aa ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017abb:	83 c4 20             	add    esp,0x20
c0017abe:	09 f0                	or     eax,esi
c0017ac0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ac4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac8:	25 ff 0f 00 00       	and    eax,0xfff
c0017acd:	89 c6                	mov    esi,eax
c0017acf:	e8 4a a3 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0017ad4:	89 c3                	mov    ebx,eax
c0017ad6:	83 ec 0c             	sub    esp,0xc
c0017ad9:	6a 02                	push   0x2
c0017adb:	e8 97 a0 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0017ae0:	83 c4 10             	add    esp,0x10
c0017ae3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ae7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017aed:	83 ec 0c             	sub    esp,0xc
c0017af0:	6a 01                	push   0x1
c0017af2:	6a 02                	push   0x2
c0017af4:	50                   	push   eax
c0017af5:	52                   	push   edx
c0017af6:	53                   	push   ebx
c0017af7:	e8 38 aa ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017afc:	83 c4 20             	add    esp,0x20
c0017aff:	09 f0                	or     eax,esi
c0017b01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b05:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017b0a:	75 11                	jne    c0017b1d <findRSDT(unsigned char*)+0xf5>
c0017b0c:	c6 05 60 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b60,0x0
c0017b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b17:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b1b:	eb 1f                	jmp    c0017b3c <findRSDT(unsigned char*)+0x114>
c0017b1d:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017b22:	75 11                	jne    c0017b35 <findRSDT(unsigned char*)+0x10d>
c0017b24:	c6 05 60 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b60,0x1
c0017b2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b2f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017b33:	eb 07                	jmp    c0017b3c <findRSDT(unsigned char*)+0x114>
c0017b35:	b8 00 00 00 00       	mov    eax,0x0
c0017b3a:	eb 04                	jmp    c0017b40 <findRSDT(unsigned char*)+0x118>
c0017b3c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b40:	83 c4 44             	add    esp,0x44
c0017b43:	5b                   	pop    ebx
c0017b44:	5e                   	pop    esi
c0017b45:	c3                   	ret    

c0017b46 <findDataTable(unsigned char*, char*)>:
c0017b46:	83 ec 1c             	sub    esp,0x1c
c0017b49:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0017b4e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b54:	83 e0 04             	and    eax,0x4
c0017b57:	84 c0                	test   al,al
c0017b59:	75 07                	jne    c0017b62 <findDataTable(unsigned char*, char*)+0x1c>
c0017b5b:	b8 00 00 00 00       	mov    eax,0x0
c0017b60:	eb 7c                	jmp    c0017bde <findDataTable(unsigned char*, char*)+0x98>
c0017b62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017b6a:	a1 4c 09 03 c0       	mov    eax,ds:0xc003094c
c0017b6f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017b73:	7d 3a                	jge    c0017baf <findDataTable(unsigned char*, char*)+0x69>
c0017b75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b79:	c1 e0 03             	shl    eax,0x3
c0017b7c:	05 60 09 03 c0       	add    eax,0xc0030960
c0017b81:	83 ec 04             	sub    esp,0x4
c0017b84:	6a 04                	push   0x4
c0017b86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b8a:	50                   	push   eax
c0017b8b:	e8 b0 8a fe ff       	call   c0000640 <memcmp>
c0017b90:	83 c4 10             	add    esp,0x10
c0017b93:	85 c0                	test   eax,eax
c0017b95:	0f 94 c0             	sete   al
c0017b98:	84 c0                	test   al,al
c0017b9a:	74 0d                	je     c0017ba9 <findDataTable(unsigned char*, char*)+0x63>
c0017b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ba0:	8b 04 c5 64 09 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf69c]
c0017ba7:	eb 35                	jmp    c0017bde <findDataTable(unsigned char*, char*)+0x98>
c0017ba9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017bad:	eb bb                	jmp    c0017b6a <findDataTable(unsigned char*, char*)+0x24>
c0017baf:	a0 60 0b 03 c0       	mov    al,ds:0xc0030b60
c0017bb4:	84 c0                	test   al,al
c0017bb6:	74 07                	je     c0017bbf <findDataTable(unsigned char*, char*)+0x79>
c0017bb8:	b8 58 00 00 00       	mov    eax,0x58
c0017bbd:	eb 05                	jmp    c0017bc4 <findDataTable(unsigned char*, char*)+0x7e>
c0017bbf:	b8 52 00 00 00       	mov    eax,0x52
c0017bc4:	83 ec 04             	sub    esp,0x4
c0017bc7:	50                   	push   eax
c0017bc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bcc:	68 b8 b3 02 c0       	push   0xc002b3b8
c0017bd1:	e8 fe b1 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0017bd6:	83 c4 10             	add    esp,0x10
c0017bd9:	b8 00 00 00 00       	mov    eax,0x0
c0017bde:	83 c4 1c             	add    esp,0x1c
c0017be1:	c3                   	ret    

c0017be2 <scanMADT()>:
c0017be2:	53                   	push   ebx
c0017be3:	83 ec 38             	sub    esp,0x38
c0017be6:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0017beb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017bf1:	83 e0 04             	and    eax,0x4
c0017bf4:	84 c0                	test   al,al
c0017bf6:	0f 84 63 04 00 00    	je     c001805f <scanMADT()+0x47d>
c0017bfc:	e8 76 fb ff ff       	call   c0017777 <findRSDP()>
c0017c01:	a3 6c 0b 03 c0       	mov    ds:0xc0030b6c,eax
c0017c06:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c0017c0b:	85 c0                	test   eax,eax
c0017c0d:	75 19                	jne    c0017c28 <scanMADT()+0x46>
c0017c0f:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0017c14:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c1a:	83 e2 fb             	and    edx,0xfffffffb
c0017c1d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c23:	e9 3b 04 00 00       	jmp    c0018063 <scanMADT()+0x481>
c0017c28:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c0017c2d:	83 ec 0c             	sub    esp,0xc
c0017c30:	50                   	push   eax
c0017c31:	e8 f2 fd ff ff       	call   c0017a28 <findRSDT(unsigned char*)>
c0017c36:	83 c4 10             	add    esp,0x10
c0017c39:	a3 68 0b 03 c0       	mov    ds:0xc0030b68,eax
c0017c3e:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c0017c43:	85 c0                	test   eax,eax
c0017c45:	75 19                	jne    c0017c60 <scanMADT()+0x7e>
c0017c47:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0017c4c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c52:	83 e2 fb             	and    edx,0xfffffffb
c0017c55:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017c5b:	e9 03 04 00 00       	jmp    c0018063 <scanMADT()+0x481>
c0017c60:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c0017c65:	83 ec 0c             	sub    esp,0xc
c0017c68:	50                   	push   eax
c0017c69:	e8 93 fb ff ff       	call   c0017801 <loadACPITables(unsigned char*)>
c0017c6e:	83 c4 10             	add    esp,0x10
c0017c71:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c0017c76:	83 ec 08             	sub    esp,0x8
c0017c79:	68 86 b2 02 c0       	push   0xc002b286
c0017c7e:	50                   	push   eax
c0017c7f:	e8 c2 fe ff ff       	call   c0017b46 <findDataTable(unsigned char*, char*)>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017c8b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017c90:	75 19                	jne    c0017cab <scanMADT()+0xc9>
c0017c92:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0017c97:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017c9d:	83 e2 fe             	and    edx,0xfffffffe
c0017ca0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ca6:	e9 b8 03 00 00       	jmp    c0018063 <scanMADT()+0x481>
c0017cab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017cb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cba:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017cbe:	0f 87 9f 03 00 00    	ja     c0018063 <scanMADT()+0x481>
c0017cc4:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ccc:	0f 87 91 03 00 00    	ja     c0018063 <scanMADT()+0x481>
c0017cd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cd6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017cda:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cde:	8d 50 01             	lea    edx,[eax+0x1]
c0017ce1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ce5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ced:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017cf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf5:	8d 50 01             	lea    edx,[eax+0x1]
c0017cf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cfc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d00:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d04:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017d08:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017d0d:	0f 86 4f 03 00 00    	jbe    c0018062 <scanMADT()+0x480>
c0017d13:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017d18:	75 57                	jne    c0017d71 <scanMADT()+0x18f>
c0017d1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d1e:	8d 50 01             	lea    edx,[eax+0x1]
c0017d21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d25:	8a 15 60 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d60
c0017d2b:	0f b6 d2             	movzx  edx,dl
c0017d2e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d32:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d36:	88 82 a0 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf260],al
c0017d3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d40:	8d 50 01             	lea    edx,[eax+0x1]
c0017d43:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d47:	8a 15 60 0d 03 c0    	mov    dl,BYTE PTR ds:0xc0030d60
c0017d4d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d50:	88 0d 60 0d 03 c0    	mov    BYTE PTR ds:0xc0030d60,cl
c0017d56:	0f b6 d2             	movzx  edx,dl
c0017d59:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d5d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d61:	88 82 80 0d 03 c0    	mov    BYTE PTR [edx-0x3ffcf280],al
c0017d67:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d6c:	e9 da 02 00 00       	jmp    c001804b <scanMADT()+0x469>
c0017d71:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017d76:	0f 85 14 01 00 00    	jne    c0017e90 <scanMADT()+0x2ae>
c0017d7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d80:	8d 50 01             	lea    edx,[eax+0x1]
c0017d83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d87:	8a 15 20 0c 03 c0    	mov    dl,BYTE PTR ds:0xc0030c20
c0017d8d:	0f b6 d2             	movzx  edx,dl
c0017d90:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017d94:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017d98:	88 82 40 0c 03 c0    	mov    BYTE PTR [edx-0x3ffcf3c0],al
c0017d9e:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017da2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017da6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017daa:	01 d0                	add    eax,edx
c0017dac:	83 c0 2c             	add    eax,0x2c
c0017daf:	8a 00                	mov    al,BYTE PTR [eax]
c0017db1:	0f b6 d0             	movzx  edx,al
c0017db4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017db8:	8d 48 01             	lea    ecx,[eax+0x1]
c0017dbb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dbf:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017dc3:	0f b6 c0             	movzx  eax,al
c0017dc6:	c1 e0 08             	shl    eax,0x8
c0017dc9:	89 d1                	mov    ecx,edx
c0017dcb:	09 c1                	or     ecx,eax
c0017dcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd1:	8d 50 02             	lea    edx,[eax+0x2]
c0017dd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dd8:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ddc:	0f b6 c0             	movzx  eax,al
c0017ddf:	c1 e0 10             	shl    eax,0x10
c0017de2:	09 c1                	or     ecx,eax
c0017de4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017de8:	8d 50 03             	lea    edx,[eax+0x3]
c0017deb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017def:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017df3:	0f b6 c0             	movzx  eax,al
c0017df6:	c1 e0 18             	shl    eax,0x18
c0017df9:	09 c1                	or     ecx,eax
c0017dfb:	89 ca                	mov    edx,ecx
c0017dfd:	a0 20 0c 03 c0       	mov    al,ds:0xc0030c20
c0017e02:	0f b6 c0             	movzx  eax,al
c0017e05:	89 14 85 60 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3a0],edx
c0017e0c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017e15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e19:	01 d0                	add    eax,edx
c0017e1b:	83 c0 2c             	add    eax,0x2c
c0017e1e:	8a 00                	mov    al,BYTE PTR [eax]
c0017e20:	0f b6 d0             	movzx  edx,al
c0017e23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e27:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e2e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017e32:	0f b6 c0             	movzx  eax,al
c0017e35:	c1 e0 08             	shl    eax,0x8
c0017e38:	89 d1                	mov    ecx,edx
c0017e3a:	09 c1                	or     ecx,eax
c0017e3c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e40:	8d 50 02             	lea    edx,[eax+0x2]
c0017e43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e47:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e4b:	0f b6 c0             	movzx  eax,al
c0017e4e:	c1 e0 10             	shl    eax,0x10
c0017e51:	09 c1                	or     ecx,eax
c0017e53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e57:	8d 50 03             	lea    edx,[eax+0x3]
c0017e5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e5e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017e62:	0f b6 c0             	movzx  eax,al
c0017e65:	c1 e0 18             	shl    eax,0x18
c0017e68:	09 c1                	or     ecx,eax
c0017e6a:	89 ca                	mov    edx,ecx
c0017e6c:	a0 20 0c 03 c0       	mov    al,ds:0xc0030c20
c0017e71:	0f b6 c0             	movzx  eax,al
c0017e74:	89 14 85 e0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf320],edx
c0017e7b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017e80:	a0 20 0c 03 c0       	mov    al,ds:0xc0030c20
c0017e85:	40                   	inc    eax
c0017e86:	a2 20 0c 03 c0       	mov    ds:0xc0030c20,al
c0017e8b:	e9 bb 01 00 00       	jmp    c001804b <scanMADT()+0x469>
c0017e90:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017e95:	0f 85 e9 00 00 00    	jne    c0017f84 <scanMADT()+0x3a2>
c0017e9b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017e9f:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ea6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eaa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017eae:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017eb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017eb6:	8d 50 01             	lea    edx,[eax+0x1]
c0017eb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ebd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ec1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017ec5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017ec9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ed1:	01 d0                	add    eax,edx
c0017ed3:	83 c0 2c             	add    eax,0x2c
c0017ed6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ed8:	0f b6 d0             	movzx  edx,al
c0017edb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017edf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ee2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ee6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017eea:	0f b6 c0             	movzx  eax,al
c0017eed:	c1 e0 08             	shl    eax,0x8
c0017ef0:	89 d1                	mov    ecx,edx
c0017ef2:	09 c1                	or     ecx,eax
c0017ef4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ef8:	8d 50 02             	lea    edx,[eax+0x2]
c0017efb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eff:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f03:	0f b6 c0             	movzx  eax,al
c0017f06:	c1 e0 10             	shl    eax,0x10
c0017f09:	09 c1                	or     ecx,eax
c0017f0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f0f:	8d 50 03             	lea    edx,[eax+0x3]
c0017f12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f16:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017f1a:	0f b6 c0             	movzx  eax,al
c0017f1d:	c1 e0 18             	shl    eax,0x18
c0017f20:	09 c8                	or     eax,ecx
c0017f22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f26:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f2b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f33:	01 d0                	add    eax,edx
c0017f35:	83 c0 2c             	add    eax,0x2c
c0017f38:	8a 00                	mov    al,BYTE PTR [eax]
c0017f3a:	0f b6 c0             	movzx  eax,al
c0017f3d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f41:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f44:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f48:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017f4c:	0f b6 d2             	movzx  edx,dl
c0017f4f:	c1 e2 08             	shl    edx,0x8
c0017f52:	09 d0                	or     eax,edx
c0017f54:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017f59:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017f5e:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017f63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f67:	88 90 e0 d4 02 c0    	mov    BYTE PTR [eax-0x3ffd2b20],dl
c0017f6d:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017f72:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017f77:	66 89 84 12 00 0c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf400],ax
c0017f7f:	e9 c7 00 00 00       	jmp    c001804b <scanMADT()+0x469>
c0017f84:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017f89:	0f 85 b0 00 00 00    	jne    c001803f <scanMADT()+0x45d>
c0017f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f93:	8d 50 01             	lea    edx,[eax+0x1]
c0017f96:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f9a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f9e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fa2:	0f b6 c0             	movzx  eax,al
c0017fa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fa9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb1:	01 d0                	add    eax,edx
c0017fb3:	83 c0 2c             	add    eax,0x2c
c0017fb6:	8a 00                	mov    al,BYTE PTR [eax]
c0017fb8:	0f b6 d0             	movzx  edx,al
c0017fbb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fc2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fca:	0f b6 c0             	movzx  eax,al
c0017fcd:	c1 e0 08             	shl    eax,0x8
c0017fd0:	09 d0                	or     eax,edx
c0017fd2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fd6:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017fdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdf:	8d 50 01             	lea    edx,[eax+0x1]
c0017fe2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fe6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fee:	0f b6 c0             	movzx  eax,al
c0017ff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ff9:	c1 e0 08             	shl    eax,0x8
c0017ffc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018000:	89 c1                	mov    ecx,eax
c0018002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018006:	c1 e0 18             	shl    eax,0x18
c0018009:	89 c3                	mov    ebx,eax
c001800b:	a1 70 0b 03 c0       	mov    eax,ds:0xc0030b70
c0018010:	8d 50 01             	lea    edx,[eax+0x1]
c0018013:	89 15 70 0b 03 c0    	mov    DWORD PTR ds:0xc0030b70,edx
c0018019:	09 d9                	or     ecx,ebx
c001801b:	89 ca                	mov    edx,ecx
c001801d:	89 14 85 80 0b 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf480],edx
c0018024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018028:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001802c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018030:	68 e8 b3 02 c0       	push   0xc002b3e8
c0018035:	e8 9a ad ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001803a:	83 c4 10             	add    esp,0x10
c001803d:	eb 0c                	jmp    c001804b <scanMADT()+0x469>
c001803f:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018044:	75 05                	jne    c001804b <scanMADT()+0x469>
c0018046:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001804b:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018050:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018054:	01 d0                	add    eax,edx
c0018056:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001805a:	e9 54 fc ff ff       	jmp    c0017cb3 <scanMADT()+0xd1>
c001805f:	90                   	nop
c0018060:	eb 01                	jmp    c0018063 <scanMADT()+0x481>
c0018062:	90                   	nop
c0018063:	83 c4 38             	add    esp,0x38
c0018066:	5b                   	pop    ebx
c0018067:	c3                   	ret    

c0018068 <ACPI::ACPI()>:
c0018068:	83 ec 0c             	sub    esp,0xc
c001806b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001806f:	83 ec 08             	sub    esp,0x8
c0018072:	68 8b b2 02 c0       	push   0xc002b28b
c0018077:	50                   	push   eax
c0018078:	e8 6d c3 ff ff       	call   c00143ea <Device::Device(char const*)>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0018085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018089:	89 10                	mov    DWORD PTR [eax],edx
c001808b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001808f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00180a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00180b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b6:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00180bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c1:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00180c8:	e8 15 fb ff ff       	call   c0017be2 <scanMADT()>
c00180cd:	90                   	nop
c00180ce:	83 c4 0c             	add    esp,0xc
c00180d1:	c3                   	ret    

c00180d2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00180d2:	83 ec 2c             	sub    esp,0x2c
c00180d5:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00180d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00180dd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180e1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00180e5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00180ea:	88 d0                	mov    al,dl
c00180ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00180f0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00180f5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00180fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018101:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018107:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001810b:	0f 8d 97 00 00 00    	jge    c00181a8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018111:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018115:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018119:	83 c2 2a             	add    edx,0x2a
c001811c:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018120:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018125:	75 78                	jne    c001819f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018127:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001812b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001812f:	83 c2 2a             	add    edx,0x2a
c0018132:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018136:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001813a:	75 63                	jne    c001819f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001813c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018141:	74 3a                	je     c001817d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018143:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001814b:	83 c2 2a             	add    edx,0x2a
c001814e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018156:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018159:	39 c2                	cmp    edx,eax
c001815b:	74 10                	je     c001816d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001815d:	83 ec 0c             	sub    esp,0xc
c0018160:	68 24 b4 02 c0       	push   0xc002b424
c0018165:	e8 13 23 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001816a:	83 c4 10             	add    esp,0x10
c001816d:	83 ec 0c             	sub    esp,0xc
c0018170:	68 90 b2 02 c0       	push   0xc002b290
c0018175:	e8 03 23 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001817a:	83 c4 10             	add    esp,0x10
c001817d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018181:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018185:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018189:	83 c2 2a             	add    edx,0x2a
c001818c:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018190:	8b 02                	mov    eax,DWORD PTR [edx]
c0018192:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0018195:	89 01                	mov    DWORD PTR [ecx],eax
c0018197:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001819a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001819f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00181a3:	e9 55 ff ff ff       	jmp    c00180fd <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00181a8:	90                   	nop
c00181a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181ad:	83 c4 2c             	add    esp,0x2c
c00181b0:	c2 04 00             	ret    0x4
c00181b3:	90                   	nop

c00181b4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00181b4:	83 ec 1c             	sub    esp,0x1c
c00181b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181bb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00181bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00181c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00181c8:	88 c8                	mov    al,cl
c00181ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00181ce:	88 d0                	mov    al,dl
c00181d0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00181d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00181de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00181e5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00181e9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00181ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f1:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00181f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181fb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00181fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018202:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018211:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018215:	8d 48 01             	lea    ecx,[eax+0x1]
c0018218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001821c:	83 c2 2a             	add    edx,0x2a
c001821f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018227:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001822d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018231:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018234:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018238:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001823c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018240:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018246:	8d 50 01             	lea    edx,[eax+0x1]
c0018249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001824d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018257:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001825d:	3d 00 02 00 00       	cmp    eax,0x200
c0018262:	75 10                	jne    c0018274 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018264:	83 ec 0c             	sub    esp,0xc
c0018267:	68 9f b2 02 c0       	push   0xc002b29f
c001826c:	e8 0c 22 00 00       	call   c001a47d <Krnl::panic(char const*)>
c0018271:	83 c4 10             	add    esp,0x10
c0018274:	90                   	nop
c0018275:	83 c4 1c             	add    esp,0x1c
c0018278:	c3                   	ret    
c0018279:	90                   	nop

c001827a <ACPI::setScreenBrightnessLevel(void*, int)>:
c001827a:	b8 00 00 00 00       	mov    eax,0x0
c001827f:	c3                   	ret    

c0018280 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018280:	83 ec 1c             	sub    esp,0x1c
c0018283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018287:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001828a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001828e:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0018293:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018298:	83 ec 08             	sub    esp,0x8
c001829b:	52                   	push   edx
c001829c:	50                   	push   eax
c001829d:	e8 b6 6b ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00182a2:	83 c4 10             	add    esp,0x10
c00182a5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00182a9:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00182ae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00182b3:	83 ec 04             	sub    esp,0x4
c00182b6:	6a 01                	push   0x1
c00182b8:	52                   	push   edx
c00182b9:	50                   	push   eax
c00182ba:	e8 af 6c ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	90                   	nop
c00182c3:	83 c4 1c             	add    esp,0x1c
c00182c6:	c3                   	ret    
c00182c7:	90                   	nop

c00182c8 <ACPI::open(int, int, void*)>:
c00182c8:	53                   	push   ebx
c00182c9:	83 ec 28             	sub    esp,0x28
c00182cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d0:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182db:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182e2:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c00182e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00182ed:	83 e0 04             	and    eax,0x4
c00182f0:	84 c0                	test   al,al
c00182f2:	74 47                	je     c001833b <ACPI::open(int, int, void*)+0x73>
c00182f4:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c00182f9:	83 ec 08             	sub    esp,0x8
c00182fc:	68 bc b2 02 c0       	push   0xc002b2bc
c0018301:	50                   	push   eax
c0018302:	e8 3f f8 ff ff       	call   c0017b46 <findDataTable(unsigned char*, char*)>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001830e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018313:	74 26                	je     c001833b <ACPI::open(int, int, void*)+0x73>
c0018315:	83 ec 0c             	sub    esp,0xc
c0018318:	68 c1 b2 02 c0       	push   0xc002b2c1
c001831d:	e8 b2 aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018322:	83 c4 10             	add    esp,0x10
c0018325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018329:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018330:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018334:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001833b:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018343:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018347:	8a 00                	mov    al,BYTE PTR [eax]
c0018349:	3c 01                	cmp    al,0x1
c001834b:	75 28                	jne    c0018375 <ACPI::open(int, int, void*)+0xad>
c001834d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018351:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001835c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018363:	83 ec 0c             	sub    esp,0xc
c0018366:	68 d2 b2 02 c0       	push   0xc002b2d2
c001836b:	e8 64 aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018370:	83 c4 10             	add    esp,0x10
c0018373:	eb 25                	jmp    c001839a <ACPI::open(int, int, void*)+0xd2>
c0018375:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018379:	8a 00                	mov    al,BYTE PTR [eax]
c001837b:	3c 02                	cmp    al,0x2
c001837d:	75 1b                	jne    c001839a <ACPI::open(int, int, void*)+0xd2>
c001837f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018383:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001838a:	83 ec 0c             	sub    esp,0xc
c001838d:	68 da b2 02 c0       	push   0xc002b2da
c0018392:	e8 3d aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001839e:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00183a4:	83 f0 01             	xor    eax,0x1
c00183a7:	84 c0                	test   al,al
c00183a9:	74 6a                	je     c0018415 <ACPI::open(int, int, void*)+0x14d>
c00183ab:	83 ec 0c             	sub    esp,0xc
c00183ae:	68 e2 b2 02 c0       	push   0xc002b2e2
c00183b3:	e8 1c aa ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	e8 90 7d fe ff       	call   c0000150 <manualPCIProbe>
c00183c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00183c4:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00183c9:	75 28                	jne    c00183f3 <ACPI::open(int, int, void*)+0x12b>
c00183cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183cf:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00183d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183da:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00183e1:	83 ec 0c             	sub    esp,0xc
c00183e4:	68 f0 b2 02 c0       	push   0xc002b2f0
c00183e9:	e8 e6 a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00183ee:	83 c4 10             	add    esp,0x10
c00183f1:	eb 22                	jmp    c0018415 <ACPI::open(int, int, void*)+0x14d>
c00183f3:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c00183f8:	75 1b                	jne    c0018415 <ACPI::open(int, int, void*)+0x14d>
c00183fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183fe:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018405:	83 ec 0c             	sub    esp,0xc
c0018408:	68 fa b2 02 c0       	push   0xc002b2fa
c001840d:	e8 c2 a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018412:	83 c4 10             	add    esp,0x10
c0018415:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018419:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001841f:	84 c0                	test   al,al
c0018421:	74 13                	je     c0018436 <ACPI::open(int, int, void*)+0x16e>
c0018423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018427:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001842d:	83 f0 01             	xor    eax,0x1
c0018430:	0f b6 c0             	movzx  eax,al
c0018433:	40                   	inc    eax
c0018434:	eb 05                	jmp    c001843b <ACPI::open(int, int, void*)+0x173>
c0018436:	b8 00 00 00 00       	mov    eax,0x0
c001843b:	83 ec 08             	sub    esp,0x8
c001843e:	50                   	push   eax
c001843f:	68 04 b3 02 c0       	push   0xc002b304
c0018444:	e8 8b a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018449:	83 c4 10             	add    esp,0x10
c001844c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018450:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018456:	84 c0                	test   al,al
c0018458:	74 67                	je     c00184c1 <ACPI::open(int, int, void*)+0x1f9>
c001845a:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018462:	83 ec 0c             	sub    esp,0xc
c0018465:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018469:	e8 d2 73 ff ff       	call   c000f840 <malloc>
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	89 c3                	mov    ebx,eax
c0018473:	83 ec 0c             	sub    esp,0xc
c0018476:	53                   	push   ebx
c0018477:	e8 2c a3 00 00       	call   c00227a8 <PCI::PCI()>
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018483:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018487:	83 ec 08             	sub    esp,0x8
c001848a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001848e:	50                   	push   eax
c001848f:	e8 66 bd ff ff       	call   c00141fa <Device::addChild(Device*)>
c0018494:	83 c4 10             	add    esp,0x10
c0018497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849b:	8b 00                	mov    eax,DWORD PTR [eax]
c001849d:	83 c0 08             	add    eax,0x8
c00184a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a2:	6a 00                	push   0x0
c00184a4:	6a 00                	push   0x0
c00184a6:	6a 00                	push   0x0
c00184a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184ac:	ff d0                	call   eax
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	83 ec 0c             	sub    esp,0xc
c00184b4:	68 0d b3 02 c0       	push   0xc002b30d
c00184b9:	e8 16 a9 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00184be:	83 c4 10             	add    esp,0x10
c00184c1:	e8 ef 98 ff ff       	call   c0011db5 <Virt::swappingSetup()>
c00184c6:	83 ec 0c             	sub    esp,0xc
c00184c9:	68 18 b3 02 c0       	push   0xc002b318
c00184ce:	e8 80 46 00 00       	call   c001cb53 <Thr::loadKernelSymbolTable(char const*)>
c00184d3:	83 c4 10             	add    esp,0x10
c00184d6:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c00184dc:	83 ec 08             	sub    esp,0x8
c00184df:	6a 01                	push   0x1
c00184e1:	68 36 b3 02 c0       	push   0xc002b336
c00184e6:	e8 c5 50 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c00184eb:	83 c4 10             	add    esp,0x10
c00184ee:	83 ec 08             	sub    esp,0x8
c00184f1:	53                   	push   ebx
c00184f2:	50                   	push   eax
c00184f3:	e8 07 53 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c00184f8:	83 c4 10             	add    esp,0x10
c00184fb:	8b 1d 88 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e288
c0018501:	83 ec 08             	sub    esp,0x8
c0018504:	6a 01                	push   0x1
c0018506:	68 53 b3 02 c0       	push   0xc002b353
c001850b:	e8 a0 50 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c0018510:	83 c4 10             	add    esp,0x10
c0018513:	83 ec 08             	sub    esp,0x8
c0018516:	53                   	push   ebx
c0018517:	50                   	push   eax
c0018518:	e8 e2 52 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c001851d:	83 c4 10             	add    esp,0x10
c0018520:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0018525:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001852b:	83 e0 04             	and    eax,0x4
c001852e:	84 c0                	test   al,al
c0018530:	0f 84 d2 00 00 00    	je     c0018608 <ACPI::open(int, int, void*)+0x340>
c0018536:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001853d:	83 ec 0c             	sub    esp,0xc
c0018540:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018544:	e8 f7 72 ff ff       	call   c000f840 <malloc>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	89 c3                	mov    ebx,eax
c001854e:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c0018553:	83 ec 04             	sub    esp,0x4
c0018556:	50                   	push   eax
c0018557:	68 70 b3 02 c0       	push   0xc002b370
c001855c:	53                   	push   ebx
c001855d:	e8 ca ad ff ff       	call   c001332c <File::File(char const*, Process*)>
c0018562:	83 c4 10             	add    esp,0x10
c0018565:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018569:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001856e:	74 17                	je     c0018587 <ACPI::open(int, int, void*)+0x2bf>
c0018570:	83 ec 0c             	sub    esp,0xc
c0018573:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018577:	e8 82 b0 ff ff       	call   c00135fe <File::exists()>
c001857c:	83 c4 10             	add    esp,0x10
c001857f:	84 c0                	test   al,al
c0018581:	74 04                	je     c0018587 <ACPI::open(int, int, void*)+0x2bf>
c0018583:	b0 01                	mov    al,0x1
c0018585:	eb 02                	jmp    c0018589 <ACPI::open(int, int, void*)+0x2c1>
c0018587:	b0 00                	mov    al,0x0
c0018589:	84 c0                	test   al,al
c001858b:	74 22                	je     c00185af <ACPI::open(int, int, void*)+0x2e7>
c001858d:	83 ec 08             	sub    esp,0x8
c0018590:	6a 01                	push   0x1
c0018592:	68 70 b3 02 c0       	push   0xc002b370
c0018597:	e8 14 50 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c001859c:	83 c4 10             	add    esp,0x10
c001859f:	83 ec 08             	sub    esp,0x8
c00185a2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00185a6:	50                   	push   eax
c00185a7:	e8 53 52 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c00185ac:	83 c4 10             	add    esp,0x10
c00185af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185b4:	74 1e                	je     c00185d4 <ACPI::open(int, int, void*)+0x30c>
c00185b6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00185bb:	74 17                	je     c00185d4 <ACPI::open(int, int, void*)+0x30c>
c00185bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c3:	83 c0 08             	add    eax,0x8
c00185c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c8:	83 ec 0c             	sub    esp,0xc
c00185cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00185cf:	ff d0                	call   eax
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c00185d9:	83 ec 08             	sub    esp,0x8
c00185dc:	68 8d b3 02 c0       	push   0xc002b38d
c00185e1:	50                   	push   eax
c00185e2:	e8 5f f5 ff ff       	call   c0017b46 <findDataTable(unsigned char*, char*)>
c00185e7:	83 c4 10             	add    esp,0x10
c00185ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185ee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00185f3:	74 13                	je     c0018608 <ACPI::open(int, int, void*)+0x340>
c00185f5:	83 ec 08             	sub    esp,0x8
c00185f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00185fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018600:	e8 7b fc ff ff       	call   c0018280 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018605:	83 c4 10             	add    esp,0x10
c0018608:	b8 00 00 00 00       	mov    eax,0x0
c001860d:	83 c4 28             	add    esp,0x28
c0018610:	5b                   	pop    ebx
c0018611:	c3                   	ret    

c0018612 <ACPI::sleep()>:
c0018612:	83 ec 0c             	sub    esp,0xc
c0018615:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c001861a:	85 c0                	test   eax,eax
c001861c:	74 07                	je     c0018625 <ACPI::sleep()+0x13>
c001861e:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c0018623:	ff d0                	call   eax
c0018625:	90                   	nop
c0018626:	83 c4 0c             	add    esp,0xc
c0018629:	c3                   	ret    

c001862a <CPU::close(int, int, void*)>:
c001862a:	31 c0                	xor    eax,eax
c001862c:	c3                   	ret    
c001862d:	90                   	nop

c001862e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001862e:	55                   	push   ebp
c001862f:	57                   	push   edi
c0018630:	56                   	push   esi
c0018631:	53                   	push   ebx
c0018632:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018636:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001863a:	89 ce                	mov    esi,ecx
c001863c:	89 d5                	mov    ebp,edx
c001863e:	80 f9 04             	cmp    cl,0x4
c0018641:	75 28                	jne    c001866b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018643:	8d 42 f9             	lea    eax,[edx-0x7]
c0018646:	3c 03                	cmp    al,0x3
c0018648:	0f 86 63 01 00 00    	jbe    c00187b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001864e:	80 fa 03             	cmp    dl,0x3
c0018651:	0f 84 5a 01 00 00    	je     c00187b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018657:	8d 7a f2             	lea    edi,[edx-0xe]
c001865a:	b8 b0 d6 02 c0       	mov    eax,0xc002d6b0
c001865f:	89 fb                	mov    ebx,edi
c0018661:	80 fb 01             	cmp    bl,0x1
c0018664:	77 4e                	ja     c00186b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018666:	e9 52 01 00 00       	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001866b:	80 f9 05             	cmp    cl,0x5
c001866e:	75 4d                	jne    c00186bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018670:	b8 c0 d6 02 c0       	mov    eax,0xc002d6c0
c0018675:	80 fa 03             	cmp    dl,0x3
c0018678:	0f 86 3f 01 00 00    	jbe    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001867e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018681:	b8 d0 d6 02 c0       	mov    eax,0xc002d6d0
c0018686:	89 fb                	mov    ebx,edi
c0018688:	80 fb 01             	cmp    bl,0x1
c001868b:	0f 86 2c 01 00 00    	jbe    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018691:	b8 e0 d6 02 c0       	mov    eax,0xc002d6e0
c0018696:	80 fa 08             	cmp    dl,0x8
c0018699:	0f 84 1e 01 00 00    	je     c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001869f:	89 d7                	mov    edi,edx
c00186a1:	b8 f0 d6 02 c0       	mov    eax,0xc002d6f0
c00186a6:	83 e7 fb             	and    edi,0xfffffffb
c00186a9:	89 fb                	mov    ebx,edi
c00186ab:	80 fb 09             	cmp    bl,0x9
c00186ae:	0f 84 09 01 00 00    	je     c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186b4:	31 c0                	xor    eax,eax
c00186b6:	89 eb                	mov    ebx,ebp
c00186b8:	0f b6 fb             	movzx  edi,bl
c00186bb:	eb 30                	jmp    c00186ed <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00186bd:	31 c0                	xor    eax,eax
c00186bf:	80 f9 06             	cmp    cl,0x6
c00186c2:	75 f2                	jne    c00186b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186c4:	80 fa 0a             	cmp    dl,0xa
c00186c7:	77 ed                	ja     c00186b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186c9:	bf de 05 00 00       	mov    edi,0x5de
c00186ce:	0f a3 d7             	bt     edi,edx
c00186d1:	73 e3                	jae    c00186b6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00186d3:	b8 00 d7 02 c0       	mov    eax,0xc002d700
c00186d8:	e9 e0 00 00 00       	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186dd:	39 c7                	cmp    edi,eax
c00186df:	0f 84 d3 00 00 00    	je     c00187b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186e5:	40                   	inc    eax
c00186e6:	3d d0 00 00 00       	cmp    eax,0xd0
c00186eb:	74 09                	je     c00186f6 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00186ed:	89 f3                	mov    ebx,esi
c00186ef:	80 fb 0f             	cmp    bl,0xf
c00186f2:	75 f1                	jne    c00186e5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00186f4:	eb e7                	jmp    c00186dd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00186f6:	80 f9 10             	cmp    cl,0x10
c00186f9:	75 14                	jne    c001870f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00186fb:	8d 42 fc             	lea    eax,[edx-0x4]
c00186fe:	83 e0 fb             	and    eax,0xfffffffb
c0018701:	3c 02                	cmp    al,0x2
c0018703:	76 34                	jbe    c0018739 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018705:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c001870a:	80 fa 02             	cmp    dl,0x2
c001870d:	eb 24                	jmp    c0018733 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001870f:	80 f9 11             	cmp    cl,0x11
c0018712:	75 13                	jne    c0018727 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018714:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018719:	80 fa 03             	cmp    dl,0x3
c001871c:	0f 85 9b 00 00 00    	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018722:	e9 91 00 00 00       	jmp    c00187b8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018727:	80 f9 12             	cmp    cl,0x12
c001872a:	75 14                	jne    c0018740 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001872c:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018731:	fe ca                	dec    dl
c0018733:	0f 85 84 00 00 00    	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018739:	b8 20 d7 02 c0       	mov    eax,0xc002d720
c001873e:	eb 7d                	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018740:	80 f9 14             	cmp    cl,0x14
c0018743:	75 12                	jne    c0018757 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018745:	4a                   	dec    edx
c0018746:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c001874b:	80 fa 01             	cmp    dl,0x1
c001874e:	77 6d                	ja     c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018750:	b8 30 d7 02 c0       	mov    eax,0xc002d730
c0018755:	eb 66                	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018757:	80 f9 15             	cmp    cl,0x15
c001875a:	75 31                	jne    c001878d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001875c:	b8 40 d7 02 c0       	mov    eax,0xc002d740
c0018761:	80 fa 01             	cmp    dl,0x1
c0018764:	74 57                	je     c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018766:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c001876b:	80 fa 13             	cmp    dl,0x13
c001876e:	76 0c                	jbe    c001877c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018770:	80 fa 30             	cmp    dl,0x30
c0018773:	75 48                	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018775:	b8 60 d7 02 c0       	mov    eax,0xc002d760
c001877a:	eb 41                	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001877c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018781:	0f a3 d1             	bt     ecx,edx
c0018784:	73 37                	jae    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018786:	b8 50 d7 02 c0       	mov    eax,0xc002d750
c001878b:	eb 30                	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001878d:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018792:	80 f9 16             	cmp    cl,0x16
c0018795:	75 26                	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018797:	b8 70 d7 02 c0       	mov    eax,0xc002d770
c001879c:	84 d2                	test   dl,dl
c001879e:	74 1d                	je     c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187a0:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c00187a5:	80 fa 30             	cmp    dl,0x30
c00187a8:	75 13                	jne    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187aa:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c00187af:	eb 0c                	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b1:	b8 a0 d6 02 c0       	mov    eax,0xc002d6a0
c00187b6:	eb 05                	jmp    c00187bd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00187b8:	b8 10 d7 02 c0       	mov    eax,0xc002d710
c00187bd:	5b                   	pop    ebx
c00187be:	5e                   	pop    esi
c00187bf:	5f                   	pop    edi
c00187c0:	5d                   	pop    ebp
c00187c1:	c3                   	ret    

c00187c2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00187c2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00187ca:	80 f9 04             	cmp    cl,0x4
c00187cd:	75 6b                	jne    c001883a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00187cf:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c00187d4:	80 fa 01             	cmp    dl,0x1
c00187d7:	0f 86 92 02 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187dd:	b8 10 d5 02 c0       	mov    eax,0xc002d510
c00187e2:	80 fa 02             	cmp    dl,0x2
c00187e5:	0f 84 84 02 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187eb:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c00187f0:	80 fa 03             	cmp    dl,0x3
c00187f3:	0f 84 76 02 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f9:	b8 30 d5 02 c0       	mov    eax,0xc002d530
c00187fe:	80 fa 04             	cmp    dl,0x4
c0018801:	0f 84 68 02 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018807:	b8 40 d5 02 c0       	mov    eax,0xc002d540
c001880c:	80 fa 05             	cmp    dl,0x5
c001880f:	0f 84 5a 02 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018815:	b8 20 d5 02 c0       	mov    eax,0xc002d520
c001881a:	80 fa 07             	cmp    dl,0x7
c001881d:	0f 84 4c 02 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018823:	83 ea 08             	sub    edx,0x8
c0018826:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c001882b:	80 fa 01             	cmp    dl,0x1
c001882e:	0f 87 3b 02 00 00    	ja     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018834:	b8 50 d5 02 c0       	mov    eax,0xc002d550
c0018839:	c3                   	ret    
c001883a:	80 f9 05             	cmp    cl,0x5
c001883d:	75 45                	jne    c0018884 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c001883f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018842:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0018847:	80 f9 02             	cmp    cl,0x2
c001884a:	0f 86 1f 02 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018850:	80 fa 04             	cmp    dl,0x4
c0018853:	0f 84 f3 01 00 00    	je     c0018a4c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018859:	80 fa 07             	cmp    dl,0x7
c001885c:	0f 84 0d 02 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018862:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c0018867:	80 fa 08             	cmp    dl,0x8
c001886a:	0f 84 ff 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018870:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018875:	80 fa 09             	cmp    dl,0x9
c0018878:	0f 85 f1 01 00 00    	jne    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887e:	b8 80 d5 02 c0       	mov    eax,0xc002d580
c0018883:	c3                   	ret    
c0018884:	80 f9 06             	cmp    cl,0x6
c0018887:	0f 85 85 01 00 00    	jne    c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001888d:	b8 90 d5 02 c0       	mov    eax,0xc002d590
c0018892:	80 fa 01             	cmp    dl,0x1
c0018895:	0f 84 d4 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001889b:	8d 42 fb             	lea    eax,[edx-0x5]
c001889e:	3c 01                	cmp    al,0x1
c00188a0:	0f 86 ac 01 00 00    	jbe    c0018a52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188a6:	80 fa 03             	cmp    dl,0x3
c00188a9:	0f 84 a3 01 00 00    	je     c0018a52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00188af:	8d 4a f9             	lea    ecx,[edx-0x7]
c00188b2:	b8 b0 d5 02 c0       	mov    eax,0xc002d5b0
c00188b7:	80 f9 01             	cmp    cl,0x1
c00188ba:	0f 86 af 01 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c0:	80 fa 09             	cmp    dl,0x9
c00188c3:	0f 84 8f 01 00 00    	je     c0018a58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00188c9:	8d 4a f6             	lea    ecx,[edx-0xa]
c00188cc:	80 f9 01             	cmp    cl,0x1
c00188cf:	0f 86 9a 01 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d5:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c00188da:	80 fa 0d             	cmp    dl,0xd
c00188dd:	0f 84 8c 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e3:	b8 d0 d5 02 c0       	mov    eax,0xc002d5d0
c00188e8:	80 fa 0e             	cmp    dl,0xe
c00188eb:	0f 84 7e 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f1:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c00188f6:	80 fa 0f             	cmp    dl,0xf
c00188f9:	0f 84 70 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ff:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018904:	80 fa 15             	cmp    dl,0x15
c0018907:	0f 84 62 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018910:	b8 e0 d5 02 c0       	mov    eax,0xc002d5e0
c0018915:	80 f9 01             	cmp    cl,0x1
c0018918:	0f 86 51 01 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891e:	80 fa 1a             	cmp    dl,0x1a
c0018921:	0f 84 37 01 00 00    	je     c0018a5e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018927:	80 fa 1c             	cmp    dl,0x1c
c001892a:	0f 84 34 01 00 00    	je     c0018a64 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018930:	80 fa 1d             	cmp    dl,0x1d
c0018933:	0f 84 36 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018939:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c001893e:	80 fa 25             	cmp    dl,0x25
c0018941:	0f 84 28 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018947:	8d 4a da             	lea    ecx,[edx-0x26]
c001894a:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c001894f:	80 f9 01             	cmp    cl,0x1
c0018952:	0f 86 17 01 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018958:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c001895d:	80 fa 2a             	cmp    dl,0x2a
c0018960:	0f 84 09 01 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018966:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c001896b:	80 fa 2c             	cmp    dl,0x2c
c001896e:	0f 84 fb 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018974:	b8 20 d6 02 c0       	mov    eax,0xc002d620
c0018979:	80 fa 2d             	cmp    dl,0x2d
c001897c:	0f 84 ed 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018982:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018987:	80 fa 2e             	cmp    dl,0x2e
c001898a:	0f 84 df 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018990:	b8 10 d6 02 c0       	mov    eax,0xc002d610
c0018995:	80 fa 2f             	cmp    dl,0x2f
c0018998:	0f 84 d1 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001899e:	8d 4a cb             	lea    ecx,[edx-0x35]
c00189a1:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c00189a6:	80 f9 01             	cmp    cl,0x1
c00189a9:	0f 86 c0 00 00 00    	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189af:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c00189b4:	80 fa 37             	cmp    dl,0x37
c00189b7:	0f 84 b2 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189bd:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00189c2:	80 fa 3a             	cmp    dl,0x3a
c00189c5:	0f 84 a4 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189cb:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c00189d0:	80 fa 3c             	cmp    dl,0x3c
c00189d3:	0f 84 96 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d9:	b8 60 d6 02 c0       	mov    eax,0xc002d660
c00189de:	80 fa 3d             	cmp    dl,0x3d
c00189e1:	0f 84 88 00 00 00    	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189e7:	b8 40 d6 02 c0       	mov    eax,0xc002d640
c00189ec:	80 fa 3e             	cmp    dl,0x3e
c00189ef:	74 7e                	je     c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189f1:	8d 42 bb             	lea    eax,[edx-0x45]
c00189f4:	3c 01                	cmp    al,0x1
c00189f6:	76 72                	jbe    c0018a6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189f8:	80 fa 3f             	cmp    dl,0x3f
c00189fb:	74 6d                	je     c0018a6a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00189fd:	80 fa 4a             	cmp    dl,0x4a
c0018a00:	74 0a                	je     c0018a0c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018a02:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018a07:	80 fa 4d             	cmp    dl,0x4d
c0018a0a:	75 63                	jne    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0c:	b8 30 d6 02 c0       	mov    eax,0xc002d630
c0018a11:	c3                   	ret    
c0018a12:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018a17:	80 f9 0b             	cmp    cl,0xb
c0018a1a:	75 0a                	jne    c0018a26 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018a1c:	fe ca                	dec    dl
c0018a1e:	75 4f                	jne    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a20:	b8 70 d6 02 c0       	mov    eax,0xc002d670
c0018a25:	c3                   	ret    
c0018a26:	80 f9 0f             	cmp    cl,0xf
c0018a29:	75 44                	jne    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2b:	b8 80 d6 02 c0       	mov    eax,0xc002d680
c0018a30:	80 fa 02             	cmp    dl,0x2
c0018a33:	76 3a                	jbe    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	8d 42 fd             	lea    eax,[edx-0x3]
c0018a38:	3c 01                	cmp    al,0x1
c0018a3a:	76 0a                	jbe    c0018a46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018a3c:	b8 72 b7 02 c0       	mov    eax,0xc002b772
c0018a41:	80 fa 06             	cmp    dl,0x6
c0018a44:	75 29                	jne    c0018a6f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a46:	b8 90 d6 02 c0       	mov    eax,0xc002d690
c0018a4b:	c3                   	ret    
c0018a4c:	b8 70 d5 02 c0       	mov    eax,0xc002d570
c0018a51:	c3                   	ret    
c0018a52:	b8 a0 d5 02 c0       	mov    eax,0xc002d5a0
c0018a57:	c3                   	ret    
c0018a58:	b8 c0 d5 02 c0       	mov    eax,0xc002d5c0
c0018a5d:	c3                   	ret    
c0018a5e:	b8 f0 d5 02 c0       	mov    eax,0xc002d5f0
c0018a63:	c3                   	ret    
c0018a64:	b8 00 d6 02 c0       	mov    eax,0xc002d600
c0018a69:	c3                   	ret    
c0018a6a:	b8 50 d6 02 c0       	mov    eax,0xc002d650
c0018a6f:	c3                   	ret    

c0018a70 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018a70:	60                   	pusha  
c0018a71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a7d:	9c                   	pushf  
c0018a7e:	fa                   	cli    
c0018a7f:	0f 09                	wbinvd 
c0018a81:	0f 30                	wrmsr  
c0018a83:	9d                   	popf   
c0018a84:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a88:	89 02                	mov    DWORD PTR [edx],eax
c0018a8a:	61                   	popa   
c0018a8b:	c3                   	ret    

c0018a8c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a8c:	60                   	pusha  
c0018a8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a91:	9c                   	pushf  
c0018a92:	fa                   	cli    
c0018a93:	0f 09                	wbinvd 
c0018a95:	31 c0                	xor    eax,eax
c0018a97:	31 d2                	xor    edx,edx
c0018a99:	0f 32                	rdmsr  
c0018a9b:	9d                   	popf   
c0018a9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018aa0:	89 02                	mov    DWORD PTR [edx],eax
c0018aa2:	61                   	popa   
c0018aa3:	c3                   	ret    

c0018aa4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018aa4:	56                   	push   esi
c0018aa5:	53                   	push   ebx
c0018aa6:	83 ec 10             	sub    esp,0x10
c0018aa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aad:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ab2:	75 5d                	jne    c0018b11 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ab4:	83 f8 08             	cmp    eax,0x8
c0018ab7:	75 09                	jne    c0018ac2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ab9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018abe:	7e 13                	jle    c0018ad3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ac0:	eb 30                	jmp    c0018af2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ac2:	83 f8 06             	cmp    eax,0x6
c0018ac5:	7c 4a                	jl     c0018b11 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ac7:	83 f8 07             	cmp    eax,0x7
c0018aca:	7e 07                	jle    c0018ad3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018acc:	83 f8 09             	cmp    eax,0x9
c0018acf:	74 21                	je     c0018af2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ad1:	eb 3e                	jmp    c0018b11 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ad3:	89 e6                	mov    esi,esp
c0018ad5:	8b 1d c8 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e2c8
c0018adb:	56                   	push   esi
c0018adc:	c1 eb 15             	shr    ebx,0x15
c0018adf:	68 82 00 00 c0       	push   0xc0000082
c0018ae4:	83 e3 7e             	and    ebx,0x7e
c0018ae7:	e8 a0 ff ff ff       	call   c0018a8c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018aec:	56                   	push   esi
c0018aed:	6a 00                	push   0x0
c0018aef:	53                   	push   ebx
c0018af0:	eb 12                	jmp    c0018b04 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018af2:	89 e3                	mov    ebx,esp
c0018af4:	53                   	push   ebx
c0018af5:	68 82 00 00 c0       	push   0xc0000082
c0018afa:	e8 8d ff ff ff       	call   c0018a8c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018aff:	53                   	push   ebx
c0018b00:	6a 00                	push   0x0
c0018b02:	6a 00                	push   0x0
c0018b04:	68 82 00 00 c0       	push   0xc0000082
c0018b09:	e8 62 ff ff ff       	call   c0018a70 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018b0e:	83 c4 18             	add    esp,0x18
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	5b                   	pop    ebx
c0018b15:	5e                   	pop    esi
c0018b16:	c3                   	ret    
c0018b17:	90                   	nop

c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018b18:	55                   	push   ebp
c0018b19:	57                   	push   edi
c0018b1a:	56                   	push   esi
c0018b1b:	53                   	push   ebx
c0018b1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b20:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018b24:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018b28:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018b2c:	39 05 a0 d7 02 c0    	cmp    DWORD PTR ds:0xc002d7a0,eax
c0018b32:	75 23                	jne    c0018b57 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018b34:	a1 cc 0d 03 c0       	mov    eax,ds:0xc0030dcc
c0018b39:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018b3d:	89 06                	mov    DWORD PTR [esi],eax
c0018b3f:	a1 c8 0d 03 c0       	mov    eax,ds:0xc0030dc8
c0018b44:	89 07                	mov    DWORD PTR [edi],eax
c0018b46:	a1 c4 0d 03 c0       	mov    eax,ds:0xc0030dc4
c0018b4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018b4e:	a1 c0 0d 03 c0       	mov    eax,ds:0xc0030dc0
c0018b53:	89 02                	mov    DWORD PTR [edx],eax
c0018b55:	eb 3f                	jmp    c0018b96 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018b57:	31 c9                	xor    ecx,ecx
c0018b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b5d:	0f a2                	cpuid  
c0018b5f:	89 06                	mov    DWORD PTR [esi],eax
c0018b61:	89 1f                	mov    DWORD PTR [edi],ebx
c0018b63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b67:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018b6a:	89 10                	mov    DWORD PTR [eax],edx
c0018b6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018b70:	a3 a0 d7 02 c0       	mov    ds:0xc002d7a0,eax
c0018b75:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b77:	a3 cc 0d 03 c0       	mov    ds:0xc0030dcc,eax
c0018b7c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b7e:	a3 c8 0d 03 c0       	mov    ds:0xc0030dc8,eax
c0018b83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b86:	a3 c4 0d 03 c0       	mov    ds:0xc0030dc4,eax
c0018b8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b91:	a3 c0 0d 03 c0       	mov    ds:0xc0030dc0,eax
c0018b96:	5b                   	pop    ebx
c0018b97:	5e                   	pop    esi
c0018b98:	5f                   	pop    edi
c0018b99:	5d                   	pop    ebp
c0018b9a:	c3                   	ret    
c0018b9b:	90                   	nop

c0018b9c <CPU::cpuidCheckEDX(unsigned int)>:
c0018b9c:	83 ec 10             	sub    esp,0x10
c0018b9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba3:	50                   	push   eax
c0018ba4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ba8:	50                   	push   eax
c0018ba9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bad:	50                   	push   eax
c0018bae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb2:	50                   	push   eax
c0018bb3:	6a 01                	push   0x1
c0018bb5:	e8 5e ff ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bbe:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018bc2:	0f 95 c0             	setne  al
c0018bc5:	83 c4 24             	add    esp,0x24
c0018bc8:	c3                   	ret    
c0018bc9:	90                   	nop

c0018bca <CPU::cpuidCheckECX(unsigned int)>:
c0018bca:	83 ec 10             	sub    esp,0x10
c0018bcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd1:	50                   	push   eax
c0018bd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bd6:	50                   	push   eax
c0018bd7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bdb:	50                   	push   eax
c0018bdc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018be0:	50                   	push   eax
c0018be1:	6a 01                	push   0x1
c0018be3:	e8 30 ff ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018be8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bec:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bf0:	0f 95 c0             	setne  al
c0018bf3:	83 c4 24             	add    esp,0x24
c0018bf6:	c3                   	ret    
c0018bf7:	90                   	nop

c0018bf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018bf8:	83 ec 10             	sub    esp,0x10
c0018bfb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bff:	50                   	push   eax
c0018c00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c04:	50                   	push   eax
c0018c05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c09:	50                   	push   eax
c0018c0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c0e:	50                   	push   eax
c0018c0f:	6a 07                	push   0x7
c0018c11:	e8 02 ff ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c1a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018c1e:	0f 95 c0             	setne  al
c0018c21:	83 c4 24             	add    esp,0x24
c0018c24:	c3                   	ret    
c0018c25:	90                   	nop

c0018c26 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018c26:	83 ec 10             	sub    esp,0x10
c0018c29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c2d:	50                   	push   eax
c0018c2e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c32:	50                   	push   eax
c0018c33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c37:	50                   	push   eax
c0018c38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018c3c:	50                   	push   eax
c0018c3d:	6a 07                	push   0x7
c0018c3f:	e8 d4 fe ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018c48:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018c4c:	0f 95 c0             	setne  al
c0018c4f:	83 c4 24             	add    esp,0x24
c0018c52:	c3                   	ret    
c0018c53:	90                   	nop

c0018c54 <CPU::CPU()>:
c0018c54:	83 ec 0c             	sub    esp,0xc
c0018c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c5b:	83 ec 08             	sub    esp,0x8
c0018c5e:	68 72 b7 02 c0       	push   0xc002b772
c0018c63:	50                   	push   eax
c0018c64:	e8 81 b7 ff ff       	call   c00143ea <Device::Device(char const*)>
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	ba 4c b8 02 c0       	mov    edx,0xc002b84c
c0018c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c75:	89 10                	mov    DWORD PTR [eax],edx
c0018c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c7b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c89:	05 78 01 00 00       	add    eax,0x178
c0018c8e:	83 ec 0c             	sub    esp,0xc
c0018c91:	50                   	push   eax
c0018c92:	e8 c1 63 ff ff       	call   c000f058 <GDT::GDT()>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c9e:	05 7c 09 00 00       	add    eax,0x97c
c0018ca3:	83 ec 0c             	sub    esp,0xc
c0018ca6:	50                   	push   eax
c0018ca7:	e8 0e 66 ff ff       	call   c000f2ba <IDT::IDT()>
c0018cac:	83 c4 10             	add    esp,0x10
c0018caf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cb3:	05 7c 11 00 00       	add    eax,0x117c
c0018cb8:	83 ec 0c             	sub    esp,0xc
c0018cbb:	50                   	push   eax
c0018cbc:	e8 e7 87 ff ff       	call   c00114a8 <TSS::TSS()>
c0018cc1:	83 c4 10             	add    esp,0x10
c0018cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cd3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018cdd:	90                   	nop
c0018cde:	83 c4 0c             	add    esp,0xc
c0018ce1:	c3                   	ret    

c0018ce2 <CPU::displayFeatures()>:
c0018ce2:	53                   	push   ebx
c0018ce3:	83 ec 10             	sub    esp,0x10
c0018ce6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018cea:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018cf0:	68 80 b4 02 c0       	push   0xc002b480
c0018cf5:	e8 da a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018cfa:	59                   	pop    ecx
c0018cfb:	58                   	pop    eax
c0018cfc:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018d02:	50                   	push   eax
c0018d03:	68 91 b4 02 c0       	push   0xc002b491
c0018d08:	e8 c7 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d0d:	58                   	pop    eax
c0018d0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d14:	5a                   	pop    edx
c0018d15:	c1 e8 0e             	shr    eax,0xe
c0018d18:	0f b6 c0             	movzx  eax,al
c0018d1b:	50                   	push   eax
c0018d1c:	68 a2 b4 02 c0       	push   0xc002b4a2
c0018d21:	e8 ae a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d26:	59                   	pop    ecx
c0018d27:	58                   	pop    eax
c0018d28:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018d2e:	66 c1 e8 06          	shr    ax,0x6
c0018d32:	0f b6 c0             	movzx  eax,al
c0018d35:	50                   	push   eax
c0018d36:	68 b3 b4 02 c0       	push   0xc002b4b3
c0018d3b:	e8 94 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d40:	c7 04 24 60 b9 02 c0 	mov    DWORD PTR [esp],0xc002b960
c0018d47:	e8 88 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d4c:	83 c4 10             	add    esp,0x10
c0018d4f:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d54:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018d5b:	74 05                	je     c0018d62 <CPU::displayFeatures()+0x80>
c0018d5d:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d62:	52                   	push   edx
c0018d63:	52                   	push   edx
c0018d64:	50                   	push   eax
c0018d65:	68 c4 b4 02 c0       	push   0xc002b4c4
c0018d6a:	e8 65 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d6f:	83 c4 10             	add    esp,0x10
c0018d72:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d77:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d7e:	78 05                	js     c0018d85 <CPU::displayFeatures()+0xa3>
c0018d80:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018d85:	51                   	push   ecx
c0018d86:	51                   	push   ecx
c0018d87:	50                   	push   eax
c0018d88:	68 db b4 02 c0       	push   0xc002b4db
c0018d8d:	e8 42 a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018d92:	83 c4 10             	add    esp,0x10
c0018d95:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018d9a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018da1:	75 05                	jne    c0018da8 <CPU::displayFeatures()+0xc6>
c0018da3:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018da8:	52                   	push   edx
c0018da9:	52                   	push   edx
c0018daa:	50                   	push   eax
c0018dab:	68 f2 b4 02 c0       	push   0xc002b4f2
c0018db0:	e8 1f a0 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018db5:	83 c4 10             	add    esp,0x10
c0018db8:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018dbd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018dc4:	75 05                	jne    c0018dcb <CPU::displayFeatures()+0xe9>
c0018dc6:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018dcb:	51                   	push   ecx
c0018dcc:	51                   	push   ecx
c0018dcd:	50                   	push   eax
c0018dce:	68 09 b5 02 c0       	push   0xc002b509
c0018dd3:	e8 fc 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018dd8:	83 c4 10             	add    esp,0x10
c0018ddb:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018de0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018de7:	75 05                	jne    c0018dee <CPU::displayFeatures()+0x10c>
c0018de9:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018dee:	52                   	push   edx
c0018def:	52                   	push   edx
c0018df0:	50                   	push   eax
c0018df1:	68 20 b5 02 c0       	push   0xc002b520
c0018df6:	e8 d9 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018dfb:	83 c4 10             	add    esp,0x10
c0018dfe:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e03:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018e0a:	75 05                	jne    c0018e11 <CPU::displayFeatures()+0x12f>
c0018e0c:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e11:	51                   	push   ecx
c0018e12:	51                   	push   ecx
c0018e13:	50                   	push   eax
c0018e14:	68 37 b5 02 c0       	push   0xc002b537
c0018e19:	e8 b6 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e1e:	83 c4 10             	add    esp,0x10
c0018e21:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e26:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018e2d:	75 05                	jne    c0018e34 <CPU::displayFeatures()+0x152>
c0018e2f:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e34:	52                   	push   edx
c0018e35:	52                   	push   edx
c0018e36:	50                   	push   eax
c0018e37:	68 4e b5 02 c0       	push   0xc002b54e
c0018e3c:	e8 93 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e41:	83 c4 10             	add    esp,0x10
c0018e44:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e49:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018e50:	75 05                	jne    c0018e57 <CPU::displayFeatures()+0x175>
c0018e52:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e57:	51                   	push   ecx
c0018e58:	51                   	push   ecx
c0018e59:	50                   	push   eax
c0018e5a:	68 65 b5 02 c0       	push   0xc002b565
c0018e5f:	e8 70 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e64:	83 c4 10             	add    esp,0x10
c0018e67:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e6c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018e73:	75 05                	jne    c0018e7a <CPU::displayFeatures()+0x198>
c0018e75:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e7a:	52                   	push   edx
c0018e7b:	52                   	push   edx
c0018e7c:	50                   	push   eax
c0018e7d:	68 7c b5 02 c0       	push   0xc002b57c
c0018e82:	e8 4d 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018e8f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018e96:	75 05                	jne    c0018e9d <CPU::displayFeatures()+0x1bb>
c0018e98:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018e9d:	51                   	push   ecx
c0018e9e:	51                   	push   ecx
c0018e9f:	50                   	push   eax
c0018ea0:	68 93 b5 02 c0       	push   0xc002b593
c0018ea5:	e8 2a 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018eaa:	83 c4 10             	add    esp,0x10
c0018ead:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018eb2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018eb9:	75 05                	jne    c0018ec0 <CPU::displayFeatures()+0x1de>
c0018ebb:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018ec0:	52                   	push   edx
c0018ec1:	52                   	push   edx
c0018ec2:	50                   	push   eax
c0018ec3:	68 aa b5 02 c0       	push   0xc002b5aa
c0018ec8:	e8 07 9f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018ed5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018edc:	75 05                	jne    c0018ee3 <CPU::displayFeatures()+0x201>
c0018ede:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018ee3:	51                   	push   ecx
c0018ee4:	51                   	push   ecx
c0018ee5:	50                   	push   eax
c0018ee6:	68 c1 b5 02 c0       	push   0xc002b5c1
c0018eeb:	e8 e4 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018ef0:	83 c4 10             	add    esp,0x10
c0018ef3:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018ef8:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018eff:	75 05                	jne    c0018f06 <CPU::displayFeatures()+0x224>
c0018f01:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f06:	52                   	push   edx
c0018f07:	52                   	push   edx
c0018f08:	50                   	push   eax
c0018f09:	68 d8 b5 02 c0       	push   0xc002b5d8
c0018f0e:	e8 c1 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f13:	83 c4 10             	add    esp,0x10
c0018f16:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018f1b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018f22:	78 05                	js     c0018f29 <CPU::displayFeatures()+0x247>
c0018f24:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f29:	51                   	push   ecx
c0018f2a:	51                   	push   ecx
c0018f2b:	50                   	push   eax
c0018f2c:	68 ef b5 02 c0       	push   0xc002b5ef
c0018f31:	e8 9e 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f36:	83 c4 10             	add    esp,0x10
c0018f39:	b8 d2 9e 02 c0       	mov    eax,0xc0029ed2
c0018f3e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018f45:	75 05                	jne    c0018f4c <CPU::displayFeatures()+0x26a>
c0018f47:	b8 d6 9e 02 c0       	mov    eax,0xc0029ed6
c0018f4c:	52                   	push   edx
c0018f4d:	52                   	push   edx
c0018f4e:	50                   	push   eax
c0018f4f:	68 06 b6 02 c0       	push   0xc002b606
c0018f54:	e8 7b 9e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0018f59:	83 c4 18             	add    esp,0x18
c0018f5c:	5b                   	pop    ebx
c0018f5d:	c3                   	ret    

c0018f5e <CPU::detectFeatures()>:
c0018f5e:	55                   	push   ebp
c0018f5f:	57                   	push   edi
c0018f60:	56                   	push   esi
c0018f61:	53                   	push   ebx
c0018f62:	83 ec 50             	sub    esp,0x50
c0018f65:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018f69:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018f73:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f7a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018f80:	6a 0d                	push   0xd
c0018f82:	6a 00                	push   0x0
c0018f84:	57                   	push   edi
c0018f85:	e8 ee 77 fe ff       	call   c0000778 <memset>
c0018f8a:	83 c4 10             	add    esp,0x10
c0018f8d:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0018f92:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018f99:	0f 84 20 09 00 00    	je     c00198bf <CPU::detectFeatures()+0x961>
c0018f9f:	83 ec 0c             	sub    esp,0xc
c0018fa2:	6a 10                	push   0x10
c0018fa4:	e8 f3 fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c0018fa9:	83 e0 01             	and    eax,0x1
c0018fac:	8d 14 00             	lea    edx,[eax+eax*1]
c0018faf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fb5:	83 e0 fd             	and    eax,0xfffffffd
c0018fb8:	09 d0                	or     eax,edx
c0018fba:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fc0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018fc7:	e8 d0 fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c0018fcc:	83 e0 01             	and    eax,0x1
c0018fcf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018fd6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fdc:	83 e0 fb             	and    eax,0xfffffffb
c0018fdf:	09 d0                	or     eax,edx
c0018fe1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fe7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fee:	e8 a9 fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c0018ff3:	83 e0 01             	and    eax,0x1
c0018ff6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018ffd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019003:	83 e0 f7             	and    eax,0xfffffff7
c0019006:	09 d0                	or     eax,edx
c0019008:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001900e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019015:	e8 82 fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c001901a:	83 e0 01             	and    eax,0x1
c001901d:	c1 e0 04             	shl    eax,0x4
c0019020:	88 c2                	mov    dl,al
c0019022:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019028:	83 e0 ef             	and    eax,0xffffffef
c001902b:	09 d0                	or     eax,edx
c001902d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019033:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001903a:	e8 5d fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c001903f:	83 e0 01             	and    eax,0x1
c0019042:	c1 e0 05             	shl    eax,0x5
c0019045:	88 c2                	mov    dl,al
c0019047:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001904d:	83 e0 df             	and    eax,0xffffffdf
c0019050:	09 d0                	or     eax,edx
c0019052:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019058:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001905f:	e8 38 fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c0019064:	83 e0 01             	and    eax,0x1
c0019067:	8d 14 00             	lea    edx,[eax+eax*1]
c001906a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019070:	83 e0 fd             	and    eax,0xfffffffd
c0019073:	09 d0                	or     eax,edx
c0019075:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001907b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019082:	e8 15 fb ff ff       	call   c0018b9c <CPU::cpuidCheckEDX(unsigned int)>
c0019087:	83 e0 01             	and    eax,0x1
c001908a:	c1 e0 06             	shl    eax,0x6
c001908d:	88 c2                	mov    dl,al
c001908f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019095:	83 e0 bf             	and    eax,0xffffffbf
c0019098:	09 d0                	or     eax,edx
c001909a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190a0:	58                   	pop    eax
c00190a1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00190a5:	56                   	push   esi
c00190a6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00190aa:	55                   	push   ebp
c00190ab:	8d 44 24 28          	lea    eax,[esp+0x28]
c00190af:	50                   	push   eax
c00190b0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00190b4:	52                   	push   edx
c00190b5:	6a 00                	push   0x0
c00190b7:	e8 5c fa ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190bc:	83 c4 1c             	add    esp,0x1c
c00190bf:	6a 04                	push   0x4
c00190c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00190c5:	50                   	push   eax
c00190c6:	57                   	push   edi
c00190c7:	e8 78 76 fe ff       	call   c0000744 <memcpy>
c00190cc:	83 c4 0c             	add    esp,0xc
c00190cf:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00190d5:	6a 04                	push   0x4
c00190d7:	56                   	push   esi
c00190d8:	50                   	push   eax
c00190d9:	e8 66 76 fe ff       	call   c0000744 <memcpy>
c00190de:	83 c4 0c             	add    esp,0xc
c00190e1:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00190e7:	6a 04                	push   0x4
c00190e9:	55                   	push   ebp
c00190ea:	50                   	push   eax
c00190eb:	e8 54 76 fe ff       	call   c0000744 <memcpy>
c00190f0:	58                   	pop    eax
c00190f1:	5a                   	pop    edx
c00190f2:	68 1d b6 02 c0       	push   0xc002b61d
c00190f7:	57                   	push   edi
c00190f8:	e8 c3 77 fe ff       	call   c00008c0 <strcmp>
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	85 c0                	test   eax,eax
c0019102:	75 0f                	jne    c0019113 <CPU::detectFeatures()+0x1b5>
c0019104:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001910e:	e9 22 02 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c0019113:	50                   	push   eax
c0019114:	50                   	push   eax
c0019115:	68 2a b6 02 c0       	push   0xc002b62a
c001911a:	57                   	push   edi
c001911b:	e8 a0 77 fe ff       	call   c00008c0 <strcmp>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	85 c0                	test   eax,eax
c0019125:	74 dd                	je     c0019104 <CPU::detectFeatures()+0x1a6>
c0019127:	51                   	push   ecx
c0019128:	51                   	push   ecx
c0019129:	68 37 b6 02 c0       	push   0xc002b637
c001912e:	57                   	push   edi
c001912f:	e8 8c 77 fe ff       	call   c00008c0 <strcmp>
c0019134:	83 c4 10             	add    esp,0x10
c0019137:	85 c0                	test   eax,eax
c0019139:	74 2a                	je     c0019165 <CPU::detectFeatures()+0x207>
c001913b:	52                   	push   edx
c001913c:	52                   	push   edx
c001913d:	68 44 b6 02 c0       	push   0xc002b644
c0019142:	57                   	push   edi
c0019143:	e8 78 77 fe ff       	call   c00008c0 <strcmp>
c0019148:	83 c4 10             	add    esp,0x10
c001914b:	85 c0                	test   eax,eax
c001914d:	74 16                	je     c0019165 <CPU::detectFeatures()+0x207>
c001914f:	50                   	push   eax
c0019150:	50                   	push   eax
c0019151:	68 51 b6 02 c0       	push   0xc002b651
c0019156:	57                   	push   edi
c0019157:	e8 64 77 fe ff       	call   c00008c0 <strcmp>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	85 c0                	test   eax,eax
c0019161:	74 48                	je     c00191ab <CPU::detectFeatures()+0x24d>
c0019163:	eb 0f                	jmp    c0019174 <CPU::detectFeatures()+0x216>
c0019165:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001916f:	e9 c1 01 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c0019174:	50                   	push   eax
c0019175:	50                   	push   eax
c0019176:	68 5e b6 02 c0       	push   0xc002b65e
c001917b:	57                   	push   edi
c001917c:	e8 3f 77 fe ff       	call   c00008c0 <strcmp>
c0019181:	83 c4 10             	add    esp,0x10
c0019184:	85 c0                	test   eax,eax
c0019186:	74 23                	je     c00191ab <CPU::detectFeatures()+0x24d>
c0019188:	50                   	push   eax
c0019189:	50                   	push   eax
c001918a:	68 6b b6 02 c0       	push   0xc002b66b
c001918f:	57                   	push   edi
c0019190:	e8 2b 77 fe ff       	call   c00008c0 <strcmp>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	85 c0                	test   eax,eax
c001919a:	75 1e                	jne    c00191ba <CPU::detectFeatures()+0x25c>
c001919c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00191a6:	e9 8a 01 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c00191ab:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00191b5:	e9 7b 01 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c00191ba:	50                   	push   eax
c00191bb:	50                   	push   eax
c00191bc:	68 78 b6 02 c0       	push   0xc002b678
c00191c1:	57                   	push   edi
c00191c2:	e8 f9 76 fe ff       	call   c00008c0 <strcmp>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	85 c0                	test   eax,eax
c00191cc:	75 0f                	jne    c00191dd <CPU::detectFeatures()+0x27f>
c00191ce:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00191d8:	e9 58 01 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c00191dd:	50                   	push   eax
c00191de:	50                   	push   eax
c00191df:	68 37 b6 02 c0       	push   0xc002b637
c00191e4:	57                   	push   edi
c00191e5:	e8 d6 76 fe ff       	call   c00008c0 <strcmp>
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	85 c0                	test   eax,eax
c00191ef:	75 0f                	jne    c0019200 <CPU::detectFeatures()+0x2a2>
c00191f1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00191fb:	e9 35 01 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c0019200:	50                   	push   eax
c0019201:	50                   	push   eax
c0019202:	68 85 b6 02 c0       	push   0xc002b685
c0019207:	57                   	push   edi
c0019208:	e8 b3 76 fe ff       	call   c00008c0 <strcmp>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	85 c0                	test   eax,eax
c0019212:	75 0f                	jne    c0019223 <CPU::detectFeatures()+0x2c5>
c0019214:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001921e:	e9 12 01 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c0019223:	51                   	push   ecx
c0019224:	51                   	push   ecx
c0019225:	68 92 b6 02 c0       	push   0xc002b692
c001922a:	57                   	push   edi
c001922b:	e8 90 76 fe ff       	call   c00008c0 <strcmp>
c0019230:	83 c4 10             	add    esp,0x10
c0019233:	85 c0                	test   eax,eax
c0019235:	75 0f                	jne    c0019246 <CPU::detectFeatures()+0x2e8>
c0019237:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019241:	e9 ef 00 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c0019246:	52                   	push   edx
c0019247:	52                   	push   edx
c0019248:	68 9f b6 02 c0       	push   0xc002b69f
c001924d:	57                   	push   edi
c001924e:	e8 6d 76 fe ff       	call   c00008c0 <strcmp>
c0019253:	83 c4 10             	add    esp,0x10
c0019256:	85 c0                	test   eax,eax
c0019258:	75 0f                	jne    c0019269 <CPU::detectFeatures()+0x30b>
c001925a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019264:	e9 cc 00 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c0019269:	50                   	push   eax
c001926a:	50                   	push   eax
c001926b:	68 ac b6 02 c0       	push   0xc002b6ac
c0019270:	57                   	push   edi
c0019271:	e8 4a 76 fe ff       	call   c00008c0 <strcmp>
c0019276:	83 c4 10             	add    esp,0x10
c0019279:	85 c0                	test   eax,eax
c001927b:	75 0f                	jne    c001928c <CPU::detectFeatures()+0x32e>
c001927d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019287:	e9 a9 00 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c001928c:	50                   	push   eax
c001928d:	50                   	push   eax
c001928e:	68 b9 b6 02 c0       	push   0xc002b6b9
c0019293:	57                   	push   edi
c0019294:	e8 27 76 fe ff       	call   c00008c0 <strcmp>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	85 c0                	test   eax,eax
c001929e:	75 0f                	jne    c00192af <CPU::detectFeatures()+0x351>
c00192a0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00192aa:	e9 86 00 00 00       	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c00192af:	50                   	push   eax
c00192b0:	50                   	push   eax
c00192b1:	68 c6 b6 02 c0       	push   0xc002b6c6
c00192b6:	57                   	push   edi
c00192b7:	e8 04 76 fe ff       	call   c00008c0 <strcmp>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	85 c0                	test   eax,eax
c00192c1:	75 0c                	jne    c00192cf <CPU::detectFeatures()+0x371>
c00192c3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00192cd:	eb 66                	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c00192cf:	50                   	push   eax
c00192d0:	50                   	push   eax
c00192d1:	68 d3 b6 02 c0       	push   0xc002b6d3
c00192d6:	57                   	push   edi
c00192d7:	e8 e4 75 fe ff       	call   c00008c0 <strcmp>
c00192dc:	83 c4 10             	add    esp,0x10
c00192df:	85 c0                	test   eax,eax
c00192e1:	75 0c                	jne    c00192ef <CPU::detectFeatures()+0x391>
c00192e3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00192ed:	eb 46                	jmp    c0019335 <CPU::detectFeatures()+0x3d7>
c00192ef:	50                   	push   eax
c00192f0:	50                   	push   eax
c00192f1:	68 e0 b6 02 c0       	push   0xc002b6e0
c00192f6:	57                   	push   edi
c00192f7:	e8 c4 75 fe ff       	call   c00008c0 <strcmp>
c00192fc:	83 c4 10             	add    esp,0x10
c00192ff:	85 c0                	test   eax,eax
c0019301:	74 e0                	je     c00192e3 <CPU::detectFeatures()+0x385>
c0019303:	50                   	push   eax
c0019304:	50                   	push   eax
c0019305:	68 ed b6 02 c0       	push   0xc002b6ed
c001930a:	57                   	push   edi
c001930b:	e8 b0 75 fe ff       	call   c00008c0 <strcmp>
c0019310:	83 c4 10             	add    esp,0x10
c0019313:	85 c0                	test   eax,eax
c0019315:	74 cc                	je     c00192e3 <CPU::detectFeatures()+0x385>
c0019317:	51                   	push   ecx
c0019318:	51                   	push   ecx
c0019319:	68 fa b6 02 c0       	push   0xc002b6fa
c001931e:	57                   	push   edi
c001931f:	e8 9c 75 fe ff       	call   c00008c0 <strcmp>
c0019324:	83 c4 10             	add    esp,0x10
c0019327:	85 c0                	test   eax,eax
c0019329:	74 b8                	je     c00192e3 <CPU::detectFeatures()+0x385>
c001932b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019335:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001933a:	0f 86 be 00 00 00    	jbe    c00193fe <CPU::detectFeatures()+0x4a0>
c0019340:	83 ec 0c             	sub    esp,0xc
c0019343:	68 80 00 00 00       	push   0x80
c0019348:	e8 ab f8 ff ff       	call   c0018bf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001934d:	83 e0 01             	and    eax,0x1
c0019350:	c1 e0 06             	shl    eax,0x6
c0019353:	88 c2                	mov    dl,al
c0019355:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001935b:	83 e0 bf             	and    eax,0xffffffbf
c001935e:	09 d0                	or     eax,edx
c0019360:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019366:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001936d:	e8 86 f8 ff ff       	call   c0018bf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019372:	83 e0 01             	and    eax,0x1
c0019375:	c1 e0 04             	shl    eax,0x4
c0019378:	88 c2                	mov    dl,al
c001937a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019380:	83 e0 ef             	and    eax,0xffffffef
c0019383:	09 d0                	or     eax,edx
c0019385:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001938b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019392:	e8 61 f8 ff ff       	call   c0018bf8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019397:	c1 e0 07             	shl    eax,0x7
c001939a:	88 c2                	mov    dl,al
c001939c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193a2:	83 e0 7f             	and    eax,0x7f
c00193a5:	09 d0                	or     eax,edx
c00193a7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193ad:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00193b4:	e8 6d f8 ff ff       	call   c0018c26 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193b9:	83 e0 01             	and    eax,0x1
c00193bc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00193c3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00193c9:	83 e0 f7             	and    eax,0xfffffff7
c00193cc:	09 d0                	or     eax,edx
c00193ce:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00193d4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00193db:	e8 46 f8 ff ff       	call   c0018c26 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00193e0:	83 c4 10             	add    esp,0x10
c00193e3:	83 e0 01             	and    eax,0x1
c00193e6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193ed:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00193f3:	83 e0 fb             	and    eax,0xfffffffb
c00193f6:	09 d0                	or     eax,edx
c00193f8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00193fe:	83 ec 0c             	sub    esp,0xc
c0019401:	56                   	push   esi
c0019402:	55                   	push   ebp
c0019403:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019407:	57                   	push   edi
c0019408:	8d 44 24 28          	lea    eax,[esp+0x28]
c001940c:	50                   	push   eax
c001940d:	6a 01                	push   0x1
c001940f:	e8 04 f7 ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019414:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019418:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001941e:	88 ca                	mov    dl,cl
c0019420:	83 e0 f0             	and    eax,0xfffffff0
c0019423:	83 e2 0f             	and    edx,0xf
c0019426:	09 d0                	or     eax,edx
c0019428:	88 ca                	mov    dl,cl
c001942a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019430:	c0 ea 04             	shr    dl,0x4
c0019433:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019437:	0f b6 c2             	movzx  eax,dl
c001943a:	83 c4 20             	add    esp,0x20
c001943d:	c1 e0 06             	shl    eax,0x6
c0019440:	89 c5                	mov    ebp,eax
c0019442:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019448:	66 25 3f c0          	and    ax,0xc03f
c001944c:	09 e8                	or     eax,ebp
c001944e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019455:	89 c8                	mov    eax,ecx
c0019457:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001945d:	c1 e8 08             	shr    eax,0x8
c0019460:	83 e2 3f             	and    edx,0x3f
c0019463:	83 e0 0f             	and    eax,0xf
c0019466:	89 c5                	mov    ebp,eax
c0019468:	c1 e5 06             	shl    ebp,0x6
c001946b:	09 d5                	or     ebp,edx
c001946d:	89 ea                	mov    edx,ebp
c001946f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019475:	88 c2                	mov    dl,al
c0019477:	c0 ea 02             	shr    dl,0x2
c001947a:	89 d5                	mov    ebp,edx
c001947c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0019482:	83 e2 c0             	and    edx,0xffffffc0
c0019485:	09 d5                	or     ebp,edx
c0019487:	89 ea                	mov    edx,ebp
c0019489:	89 cd                	mov    ebp,ecx
c001948b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019491:	c1 ed 0c             	shr    ebp,0xc
c0019494:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001949a:	83 e5 03             	and    ebp,0x3
c001949d:	83 e2 cf             	and    edx,0xffffffcf
c00194a0:	c1 e5 04             	shl    ebp,0x4
c00194a3:	09 d5                	or     ebp,edx
c00194a5:	3c 06                	cmp    al,0x6
c00194a7:	89 ea                	mov    edx,ebp
c00194a9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00194af:	74 04                	je     c00194b5 <CPU::detectFeatures()+0x557>
c00194b1:	3c 0f                	cmp    al,0xf
c00194b3:	75 5c                	jne    c0019511 <CPU::detectFeatures()+0x5b3>
c00194b5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00194b9:	89 cd                	mov    ebp,ecx
c00194bb:	c1 ed 10             	shr    ebp,0x10
c00194be:	c1 e5 04             	shl    ebp,0x4
c00194c1:	09 ea                	or     edx,ebp
c00194c3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00194c9:	0f b6 d2             	movzx  edx,dl
c00194cc:	66 81 e5 3f c0       	and    bp,0xc03f
c00194d1:	c1 e2 06             	shl    edx,0x6
c00194d4:	09 ea                	or     edx,ebp
c00194d6:	3c 0f                	cmp    al,0xf
c00194d8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00194df:	75 30                	jne    c0019511 <CPU::detectFeatures()+0x5b3>
c00194e1:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00194e7:	c1 e9 14             	shr    ecx,0x14
c00194ea:	83 e0 3f             	and    eax,0x3f
c00194ed:	83 c1 0f             	add    ecx,0xf
c00194f0:	88 ca                	mov    dl,cl
c00194f2:	c0 e9 02             	shr    cl,0x2
c00194f5:	c1 e2 06             	shl    edx,0x6
c00194f8:	09 d0                	or     eax,edx
c00194fa:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019500:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019506:	83 e0 c0             	and    eax,0xffffffc0
c0019509:	09 c1                	or     ecx,eax
c001950b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019511:	83 ec 0c             	sub    esp,0xc
c0019514:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001951b:	56                   	push   esi
c001951c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019520:	50                   	push   eax
c0019521:	57                   	push   edi
c0019522:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019526:	55                   	push   ebp
c0019527:	68 00 00 00 80       	push   0x80000000
c001952c:	e8 e7 f5 ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019531:	83 c4 20             	add    esp,0x20
c0019534:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001953c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019540:	76 1e                	jbe    c0019560 <CPU::detectFeatures()+0x602>
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	56                   	push   esi
c0019546:	50                   	push   eax
c0019547:	57                   	push   edi
c0019548:	55                   	push   ebp
c0019549:	68 01 00 00 80       	push   0x80000001
c001954e:	e8 c5 f5 ff ff       	call   c0018b18 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019553:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001955d:	83 c4 20             	add    esp,0x20
c0019560:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019566:	83 f8 01             	cmp    eax,0x1
c0019569:	75 6f                	jne    c00195da <CPU::detectFeatures()+0x67c>
c001956b:	51                   	push   ecx
c001956c:	51                   	push   ecx
c001956d:	68 06 b7 02 c0       	push   0xc002b706
c0019572:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019576:	56                   	push   esi
c0019577:	e8 b8 72 fe ff       	call   c0000834 <strcpy>
c001957c:	5f                   	pop    edi
c001957d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019583:	5d                   	pop    ebp
c0019584:	66 c1 e8 06          	shr    ax,0x6
c0019588:	0f b6 c0             	movzx  eax,al
c001958b:	50                   	push   eax
c001958c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019592:	c1 e8 0e             	shr    eax,0xe
c0019595:	0f b6 c0             	movzx  eax,al
c0019598:	50                   	push   eax
c0019599:	e8 24 f2 ff ff       	call   c00187c2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001959e:	5a                   	pop    edx
c001959f:	59                   	pop    ecx
c00195a0:	50                   	push   eax
c00195a1:	56                   	push   esi
c00195a2:	e8 cd 73 fe ff       	call   c0000974 <strcat>
c00195a7:	5f                   	pop    edi
c00195a8:	5d                   	pop    ebp
c00195a9:	56                   	push   esi
c00195aa:	53                   	push   ebx
c00195ab:	e8 2c ae ff ff       	call   c00143dc <Device::setName(char const*)>
c00195b0:	58                   	pop    eax
c00195b1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195b7:	5a                   	pop    edx
c00195b8:	68 0d b7 02 c0       	push   0xc002b70d
c00195bd:	50                   	push   eax
c00195be:	e8 fd 72 fe ff       	call   c00008c0 <strcmp>
c00195c3:	83 c4 10             	add    esp,0x10
c00195c6:	85 c0                	test   eax,eax
c00195c8:	0f 85 71 03 00 00    	jne    c001993f <CPU::detectFeatures()+0x9e1>
c00195ce:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00195d5:	e9 65 03 00 00       	jmp    c001993f <CPU::detectFeatures()+0x9e1>
c00195da:	83 f8 02             	cmp    eax,0x2
c00195dd:	0f 85 b5 00 00 00    	jne    c0019698 <CPU::detectFeatures()+0x73a>
c00195e3:	57                   	push   edi
c00195e4:	57                   	push   edi
c00195e5:	68 1f b7 02 c0       	push   0xc002b71f
c00195ea:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00195ee:	56                   	push   esi
c00195ef:	e8 40 72 fe ff       	call   c0000834 <strcpy>
c00195f4:	5d                   	pop    ebp
c00195f5:	58                   	pop    eax
c00195f6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195fc:	66 c1 e8 06          	shr    ax,0x6
c0019600:	0f b6 c0             	movzx  eax,al
c0019603:	50                   	push   eax
c0019604:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001960a:	c1 e8 0e             	shr    eax,0xe
c001960d:	0f b6 c0             	movzx  eax,al
c0019610:	50                   	push   eax
c0019611:	e8 18 f0 ff ff       	call   c001862e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019616:	5a                   	pop    edx
c0019617:	59                   	pop    ecx
c0019618:	50                   	push   eax
c0019619:	56                   	push   esi
c001961a:	e8 55 73 fe ff       	call   c0000974 <strcat>
c001961f:	5f                   	pop    edi
c0019620:	5d                   	pop    ebp
c0019621:	56                   	push   esi
c0019622:	53                   	push   ebx
c0019623:	e8 b4 ad ff ff       	call   c00143dc <Device::setName(char const*)>
c0019628:	58                   	pop    eax
c0019629:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001962f:	5a                   	pop    edx
c0019630:	68 24 b7 02 c0       	push   0xc002b724
c0019635:	50                   	push   eax
c0019636:	e8 85 72 fe ff       	call   c00008c0 <strcmp>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	85 c0                	test   eax,eax
c0019640:	75 20                	jne    c0019662 <CPU::detectFeatures()+0x704>
c0019642:	8b 15 88 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e288
c0019648:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001964e:	a8 01                	test   al,0x1
c0019650:	74 10                	je     c0019662 <CPU::detectFeatures()+0x704>
c0019652:	83 e0 fe             	and    eax,0xfffffffe
c0019655:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001965b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019662:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019668:	c1 e8 0e             	shr    eax,0xe
c001966b:	3c 05                	cmp    al,0x5
c001966d:	0f 85 cc 02 00 00    	jne    c001993f <CPU::detectFeatures()+0x9e1>
c0019673:	56                   	push   esi
c0019674:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001967a:	83 e0 0f             	and    eax,0xf
c001967d:	50                   	push   eax
c001967e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019684:	66 c1 e8 06          	shr    ax,0x6
c0019688:	0f b6 c0             	movzx  eax,al
c001968b:	50                   	push   eax
c001968c:	6a 05                	push   0x5
c001968e:	e8 11 f4 ff ff       	call   c0018aa4 <CPU::AMD_K6_writeback(int, int, int)>
c0019693:	e9 1f 02 00 00       	jmp    c00198b7 <CPU::detectFeatures()+0x959>
c0019698:	8d 50 fd             	lea    edx,[eax-0x3]
c001969b:	83 fa 01             	cmp    edx,0x1
c001969e:	76 09                	jbe    c00196a9 <CPU::detectFeatures()+0x74b>
c00196a0:	83 f8 06             	cmp    eax,0x6
c00196a3:	0f 85 91 01 00 00    	jne    c001983a <CPU::detectFeatures()+0x8dc>
c00196a9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196af:	c1 ea 0e             	shr    edx,0xe
c00196b2:	80 fa 05             	cmp    dl,0x5
c00196b5:	75 7b                	jne    c0019732 <CPU::detectFeatures()+0x7d4>
c00196b7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196bd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00196c2:	66 81 fa 00 01       	cmp    dx,0x100
c00196c7:	75 0c                	jne    c00196d5 <CPU::detectFeatures()+0x777>
c00196c9:	51                   	push   ecx
c00196ca:	51                   	push   ecx
c00196cb:	68 2b b7 02 c0       	push   0xc002b72b
c00196d0:	e9 dc 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c00196d5:	66 81 fa 00 02       	cmp    dx,0x200
c00196da:	75 0c                	jne    c00196e8 <CPU::detectFeatures()+0x78a>
c00196dc:	52                   	push   edx
c00196dd:	52                   	push   edx
c00196de:	68 3e b7 02 c0       	push   0xc002b73e
c00196e3:	e9 c9 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c00196e8:	66 81 fa 40 02       	cmp    dx,0x240
c00196ed:	75 0c                	jne    c00196fb <CPU::detectFeatures()+0x79d>
c00196ef:	50                   	push   eax
c00196f0:	50                   	push   eax
c00196f1:	68 50 b7 02 c0       	push   0xc002b750
c00196f6:	e9 b6 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c00196fb:	83 f8 06             	cmp    eax,0x6
c00196fe:	75 0c                	jne    c001970c <CPU::detectFeatures()+0x7ae>
c0019700:	50                   	push   eax
c0019701:	50                   	push   eax
c0019702:	68 62 b7 02 c0       	push   0xc002b762
c0019707:	e9 a5 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c001970c:	83 f8 04             	cmp    eax,0x4
c001970f:	75 0c                	jne    c001971d <CPU::detectFeatures()+0x7bf>
c0019711:	50                   	push   eax
c0019712:	50                   	push   eax
c0019713:	68 6e b7 02 c0       	push   0xc002b76e
c0019718:	e9 94 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c001971d:	83 f8 03             	cmp    eax,0x3
c0019720:	0f 85 19 02 00 00    	jne    c001993f <CPU::detectFeatures()+0x9e1>
c0019726:	50                   	push   eax
c0019727:	50                   	push   eax
c0019728:	68 76 b7 02 c0       	push   0xc002b776
c001972d:	e9 7f 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019732:	80 fa 06             	cmp    dl,0x6
c0019735:	0f 85 db 00 00 00    	jne    c0019816 <CPU::detectFeatures()+0x8b8>
c001973b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019741:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019746:	66 81 fa 80 01       	cmp    dx,0x180
c001974b:	75 0c                	jne    c0019759 <CPU::detectFeatures()+0x7fb>
c001974d:	50                   	push   eax
c001974e:	50                   	push   eax
c001974f:	68 81 b7 02 c0       	push   0xc002b781
c0019754:	e9 58 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019759:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001975f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019764:	75 0c                	jne    c0019772 <CPU::detectFeatures()+0x814>
c0019766:	50                   	push   eax
c0019767:	50                   	push   eax
c0019768:	68 91 b7 02 c0       	push   0xc002b791
c001976d:	e9 3f 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019772:	66 81 fa 40 02       	cmp    dx,0x240
c0019777:	75 0c                	jne    c0019785 <CPU::detectFeatures()+0x827>
c0019779:	55                   	push   ebp
c001977a:	55                   	push   ebp
c001977b:	68 98 b7 02 c0       	push   0xc002b798
c0019780:	e9 2c 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019785:	66 81 fa 80 02       	cmp    dx,0x280
c001978a:	75 0c                	jne    c0019798 <CPU::detectFeatures()+0x83a>
c001978c:	57                   	push   edi
c001978d:	57                   	push   edi
c001978e:	68 a1 b7 02 c0       	push   0xc002b7a1
c0019793:	e9 19 01 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019798:	66 81 fa 40 03       	cmp    dx,0x340
c001979d:	74 ed                	je     c001978c <CPU::detectFeatures()+0x82e>
c001979f:	66 81 fa c0 03       	cmp    dx,0x3c0
c00197a4:	75 0c                	jne    c00197b2 <CPU::detectFeatures()+0x854>
c00197a6:	56                   	push   esi
c00197a7:	56                   	push   esi
c00197a8:	68 a8 b7 02 c0       	push   0xc002b7a8
c00197ad:	e9 ff 00 00 00       	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c00197b2:	83 f8 06             	cmp    eax,0x6
c00197b5:	0f 84 45 ff ff ff    	je     c0019700 <CPU::detectFeatures()+0x7a2>
c00197bb:	83 f8 04             	cmp    eax,0x4
c00197be:	0f 84 4d ff ff ff    	je     c0019711 <CPU::detectFeatures()+0x7b3>
c00197c4:	83 f8 03             	cmp    eax,0x3
c00197c7:	0f 85 72 01 00 00    	jne    c001993f <CPU::detectFeatures()+0x9e1>
c00197cd:	51                   	push   ecx
c00197ce:	51                   	push   ecx
c00197cf:	68 b1 b7 02 c0       	push   0xc002b7b1
c00197d4:	53                   	push   ebx
c00197d5:	e8 02 ac ff ff       	call   c00143dc <Device::setName(char const*)>
c00197da:	b1 c1                	mov    cl,0xc1
c00197dc:	88 c8                	mov    al,cl
c00197de:	e6 22                	out    0x22,al
c00197e0:	e4 23                	in     al,0x23
c00197e2:	88 c2                	mov    dl,al
c00197e4:	88 c8                	mov    al,cl
c00197e6:	e6 22                	out    0x22,al
c00197e8:	88 d0                	mov    al,dl
c00197ea:	83 c8 10             	or     eax,0x10
c00197ed:	e6 23                	out    0x23,al
c00197ef:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00197f6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00197f9:	89 d0                	mov    eax,edx
c00197fb:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019801:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019805:	40                   	inc    eax
c0019806:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001980c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019811:	e9 a1 00 00 00       	jmp    c00198b7 <CPU::detectFeatures()+0x959>
c0019816:	83 f8 06             	cmp    eax,0x6
c0019819:	0f 84 e1 fe ff ff    	je     c0019700 <CPU::detectFeatures()+0x7a2>
c001981f:	83 f8 04             	cmp    eax,0x4
c0019822:	0f 84 e9 fe ff ff    	je     c0019711 <CPU::detectFeatures()+0x7b3>
c0019828:	83 f8 03             	cmp    eax,0x3
c001982b:	0f 85 0e 01 00 00    	jne    c001993f <CPU::detectFeatures()+0x9e1>
c0019831:	52                   	push   edx
c0019832:	52                   	push   edx
c0019833:	68 bc b7 02 c0       	push   0xc002b7bc
c0019838:	eb 77                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c001983a:	83 f8 07             	cmp    eax,0x7
c001983d:	75 09                	jne    c0019848 <CPU::detectFeatures()+0x8ea>
c001983f:	50                   	push   eax
c0019840:	50                   	push   eax
c0019841:	68 c6 b7 02 c0       	push   0xc002b7c6
c0019846:	eb 69                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019848:	83 f8 0a             	cmp    eax,0xa
c001984b:	75 09                	jne    c0019856 <CPU::detectFeatures()+0x8f8>
c001984d:	50                   	push   eax
c001984e:	50                   	push   eax
c001984f:	68 d1 b7 02 c0       	push   0xc002b7d1
c0019854:	eb 5b                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019856:	83 f8 0b             	cmp    eax,0xb
c0019859:	75 09                	jne    c0019864 <CPU::detectFeatures()+0x906>
c001985b:	50                   	push   eax
c001985c:	50                   	push   eax
c001985d:	68 d9 b7 02 c0       	push   0xc002b7d9
c0019862:	eb 4d                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019864:	83 f8 08             	cmp    eax,0x8
c0019867:	75 09                	jne    c0019872 <CPU::detectFeatures()+0x914>
c0019869:	50                   	push   eax
c001986a:	50                   	push   eax
c001986b:	68 e2 b7 02 c0       	push   0xc002b7e2
c0019870:	eb 3f                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019872:	83 f8 09             	cmp    eax,0x9
c0019875:	75 09                	jne    c0019880 <CPU::detectFeatures()+0x922>
c0019877:	50                   	push   eax
c0019878:	50                   	push   eax
c0019879:	68 ea b7 02 c0       	push   0xc002b7ea
c001987e:	eb 31                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c0019880:	83 f8 05             	cmp    eax,0x5
c0019883:	75 09                	jne    c001988e <CPU::detectFeatures()+0x930>
c0019885:	50                   	push   eax
c0019886:	50                   	push   eax
c0019887:	68 f2 b7 02 c0       	push   0xc002b7f2
c001988c:	eb 23                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c001988e:	83 f8 0c             	cmp    eax,0xc
c0019891:	75 09                	jne    c001989c <CPU::detectFeatures()+0x93e>
c0019893:	55                   	push   ebp
c0019894:	55                   	push   ebp
c0019895:	68 00 b8 02 c0       	push   0xc002b800
c001989a:	eb 15                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c001989c:	83 f8 0d             	cmp    eax,0xd
c001989f:	75 09                	jne    c00198aa <CPU::detectFeatures()+0x94c>
c00198a1:	57                   	push   edi
c00198a2:	57                   	push   edi
c00198a3:	68 0b b8 02 c0       	push   0xc002b80b
c00198a8:	eb 07                	jmp    c00198b1 <CPU::detectFeatures()+0x953>
c00198aa:	56                   	push   esi
c00198ab:	56                   	push   esi
c00198ac:	68 1f b8 02 c0       	push   0xc002b81f
c00198b1:	53                   	push   ebx
c00198b2:	e8 25 ab ff ff       	call   c00143dc <Device::setName(char const*)>
c00198b7:	83 c4 10             	add    esp,0x10
c00198ba:	e9 80 00 00 00       	jmp    c001993f <CPU::detectFeatures()+0x9e1>
c00198bf:	51                   	push   ecx
c00198c0:	51                   	push   ecx
c00198c1:	68 6b b6 02 c0       	push   0xc002b66b
c00198c6:	57                   	push   edi
c00198c7:	e8 68 6f fe ff       	call   c0000834 <strcpy>
c00198cc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00198d6:	e8 d3 69 fe ff       	call   c00002ae <is486>
c00198db:	83 c4 10             	add    esp,0x10
c00198de:	85 c0                	test   eax,eax
c00198e0:	74 2b                	je     c001990d <CPU::detectFeatures()+0x9af>
c00198e2:	52                   	push   edx
c00198e3:	52                   	push   edx
c00198e4:	68 2b b8 02 c0       	push   0xc002b82b
c00198e9:	53                   	push   ebx
c00198ea:	e8 ed aa ff ff       	call   c00143dc <Device::setName(char const*)>
c00198ef:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00198f6:	0f 20 c0             	mov    eax,cr0
c00198f9:	83 e0 14             	and    eax,0x14
c00198fc:	83 c4 10             	add    esp,0x10
c00198ff:	83 f8 04             	cmp    eax,0x4
c0019902:	75 1f                	jne    c0019923 <CPU::detectFeatures()+0x9c5>
c0019904:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001990b:	eb 32                	jmp    c001993f <CPU::detectFeatures()+0x9e1>
c001990d:	50                   	push   eax
c001990e:	50                   	push   eax
c001990f:	68 36 b8 02 c0       	push   0xc002b836
c0019914:	53                   	push   ebx
c0019915:	e8 c2 aa ff ff       	call   c00143dc <Device::setName(char const*)>
c001991a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019921:	eb d3                	jmp    c00198f6 <CPU::detectFeatures()+0x998>
c0019923:	e8 61 69 fe ff       	call   c0000289 <hasLegacyFPU>
c0019928:	83 e0 01             	and    eax,0x1
c001992b:	8d 14 00             	lea    edx,[eax+eax*1]
c001992e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019934:	83 e0 fd             	and    eax,0xfffffffd
c0019937:	09 d0                	or     eax,edx
c0019939:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001993f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019946:	83 c4 4c             	add    esp,0x4c
c0019949:	5b                   	pop    ebx
c001994a:	5e                   	pop    esi
c001994b:	5f                   	pop    edi
c001994c:	5d                   	pop    ebp
c001994d:	c3                   	ret    

c001994e <CPU::setupSMEP()>:
c001994e:	0f 20 e0             	mov    eax,cr4
c0019951:	0d 00 00 10 00       	or     eax,0x100000
c0019956:	0f 22 e0             	mov    cr4,eax
c0019959:	c3                   	ret    

c001995a <CPU::setupUMIP()>:
c001995a:	0f 20 e0             	mov    eax,cr4
c001995d:	80 cc 08             	or     ah,0x8
c0019960:	0f 22 e0             	mov    cr4,eax
c0019963:	c3                   	ret    

c0019964 <CPU::setupTSC()>:
c0019964:	0f 20 e0             	mov    eax,cr4
c0019967:	83 c8 04             	or     eax,0x4
c001996a:	0f 22 e0             	mov    cr4,eax
c001996d:	c3                   	ret    

c001996e <CPU::setupLargePages()>:
c001996e:	0f 20 e0             	mov    eax,cr4
c0019971:	83 c8 10             	or     eax,0x10
c0019974:	0f 22 e0             	mov    cr4,eax
c0019977:	c3                   	ret    

c0019978 <CPU::setupPAT()>:
c0019978:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001997d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019984:	74 2c                	je     c00199b2 <CPU::setupPAT()+0x3a>
c0019986:	53                   	push   ebx
c0019987:	83 ec 10             	sub    esp,0x10
c001998a:	68 77 02 00 00       	push   0x277
c001998f:	50                   	push   eax
c0019990:	e8 53 54 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019995:	83 e2 f8             	and    edx,0xfffffff8
c0019998:	83 ca 01             	or     edx,0x1
c001999b:	52                   	push   edx
c001999c:	50                   	push   eax
c001999d:	68 77 02 00 00       	push   0x277
c00199a2:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c00199a8:	e8 67 54 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c00199ad:	83 c4 28             	add    esp,0x28
c00199b0:	5b                   	pop    ebx
c00199b1:	c3                   	ret    
c00199b2:	c3                   	ret    
c00199b3:	90                   	nop

c00199b4 <CPU::setupMTRR()>:
c00199b4:	c3                   	ret    
c00199b5:	90                   	nop

c00199b6 <CPU::setupGlobalPages()>:
c00199b6:	0f 20 e0             	mov    eax,cr4
c00199b9:	0c 80                	or     al,0x80
c00199bb:	0f 22 e0             	mov    cr4,eax
c00199be:	c3                   	ret    
c00199bf:	90                   	nop

c00199c0 <CPU::allowUsermodeDataAccess()>:
c00199c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199c4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199cb:	74 03                	je     c00199d0 <CPU::allowUsermodeDataAccess()+0x10>
c00199cd:	0f 01 cb             	stac   
c00199d0:	c3                   	ret    
c00199d1:	90                   	nop

c00199d2 <CPU::prohibitUsermodeDataAccess()>:
c00199d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199d6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00199dd:	74 03                	je     c00199e2 <CPU::prohibitUsermodeDataAccess()+0x10>
c00199df:	0f 01 ca             	clac   
c00199e2:	c3                   	ret    
c00199e3:	90                   	nop

c00199e4 <CPU::setupSMAP()>:
c00199e4:	0f 20 e0             	mov    eax,cr4
c00199e7:	0d 00 00 20 00       	or     eax,0x200000
c00199ec:	0f 22 e0             	mov    cr4,eax
c00199ef:	eb e1                	jmp    c00199d2 <CPU::prohibitUsermodeDataAccess()>
c00199f1:	90                   	nop

c00199f2 <CPU::setupFeatures()>:
c00199f2:	83 ec 0c             	sub    esp,0xc
c00199f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00199f9:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019a00:	74 07                	je     c0019a09 <CPU::setupFeatures()+0x17>
c0019a02:	52                   	push   edx
c0019a03:	e8 46 ff ff ff       	call   c001994e <CPU::setupSMEP()>
c0019a08:	58                   	pop    eax
c0019a09:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019a10:	74 07                	je     c0019a19 <CPU::setupFeatures()+0x27>
c0019a12:	52                   	push   edx
c0019a13:	e8 cc ff ff ff       	call   c00199e4 <CPU::setupSMAP()>
c0019a18:	58                   	pop    eax
c0019a19:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019a20:	74 07                	je     c0019a29 <CPU::setupFeatures()+0x37>
c0019a22:	52                   	push   edx
c0019a23:	e8 32 ff ff ff       	call   c001995a <CPU::setupUMIP()>
c0019a28:	58                   	pop    eax
c0019a29:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019a30:	74 07                	je     c0019a39 <CPU::setupFeatures()+0x47>
c0019a32:	52                   	push   edx
c0019a33:	e8 2c ff ff ff       	call   c0019964 <CPU::setupTSC()>
c0019a38:	58                   	pop    eax
c0019a39:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019a40:	74 07                	je     c0019a49 <CPU::setupFeatures()+0x57>
c0019a42:	52                   	push   edx
c0019a43:	e8 26 ff ff ff       	call   c001996e <CPU::setupLargePages()>
c0019a48:	59                   	pop    ecx
c0019a49:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019a50:	74 07                	je     c0019a59 <CPU::setupFeatures()+0x67>
c0019a52:	52                   	push   edx
c0019a53:	e8 5e ff ff ff       	call   c00199b6 <CPU::setupGlobalPages()>
c0019a58:	58                   	pop    eax
c0019a59:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019a60:	74 0c                	je     c0019a6e <CPU::setupFeatures()+0x7c>
c0019a62:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019a66:	83 c4 0c             	add    esp,0xc
c0019a69:	e9 0a ff ff ff       	jmp    c0019978 <CPU::setupPAT()>
c0019a6e:	83 c4 0c             	add    esp,0xc
c0019a71:	c3                   	ret    

c0019a72 <CPU::open(int, int, void*)>:
c0019a72:	57                   	push   edi
c0019a73:	56                   	push   esi
c0019a74:	53                   	push   ebx
c0019a75:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a79:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a7d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a83:	83 ec 0c             	sub    esp,0xc
c0019a86:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019a8c:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019a92:	50                   	push   eax
c0019a93:	e8 3c 56 ff ff       	call   c000f0d4 <GDT::setup()>
c0019a98:	83 c4 0c             	add    esp,0xc
c0019a9b:	6a 00                	push   0x0
c0019a9d:	68 ef be ad de       	push   0xdeadbeef
c0019aa2:	57                   	push   edi
c0019aa3:	e8 40 7a ff ff       	call   c00114e8 <TSS::setup(unsigned long, unsigned long)>
c0019aa8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019aab:	e8 18 7a ff ff       	call   c00114c8 <TSS::flush()>
c0019ab0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ab6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ab9:	e8 72 58 ff ff       	call   c000f330 <IDT::setup()>
c0019abe:	b8 00 04 00 00       	mov    eax,0x400
c0019ac3:	0f 23 f8             	mov    db7,eax
c0019ac6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ad0:	e8 08 64 ff ff       	call   c000fedd <Phys::allocatePage()>
c0019ad5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019adb:	89 30                	mov    DWORD PTR [eax],esi
c0019add:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ae3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019ae6:	58                   	pop    eax
c0019ae7:	5a                   	pop    edx
c0019ae8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019aee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019af2:	e8 21 8a ff ff       	call   c0012518 <VAS::setCPUSpecific(unsigned long)>
c0019af7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019afa:	e8 5f f4 ff ff       	call   c0018f5e <CPU::detectFeatures()>
c0019aff:	e8 b1 bc ff ff       	call   c00157b5 <setupInterruptController()>
c0019b04:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019b0a:	a1 a0 e2 02 c0       	mov    eax,ds:0xc002e2a0
c0019b0f:	83 e0 10             	and    eax,0x10
c0019b12:	83 f8 01             	cmp    eax,0x1
c0019b15:	19 c0                	sbb    eax,eax
c0019b17:	83 e0 46             	and    eax,0x46
c0019b1a:	83 c0 1e             	add    eax,0x1e
c0019b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b20:	e8 b7 d1 ff ff       	call   c0016cdc <setupTimer(int)>
c0019b25:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019b2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b2e:	e8 bf fe ff ff       	call   c00199f2 <CPU::setupFeatures()>
c0019b33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b36:	e8 a7 f1 ff ff       	call   c0018ce2 <CPU::displayFeatures()>
c0019b3b:	83 c4 10             	add    esp,0x10
c0019b3e:	31 c0                	xor    eax,eax
c0019b40:	5b                   	pop    ebx
c0019b41:	5e                   	pop    esi
c0019b42:	5f                   	pop    edi
c0019b43:	c3                   	ret    

c0019b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019b44:	57                   	push   edi
c0019b45:	56                   	push   esi
c0019b46:	53                   	push   ebx
c0019b47:	51                   	push   ecx
c0019b48:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019b4c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019b4f:	0f 02 c0             	lar    eax,ax
c0019b52:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019b55:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b59:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019b5c:	88 ca                	mov    dl,cl
c0019b5e:	c0 ea 06             	shr    dl,0x6
c0019b61:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019b65:	89 ca                	mov    edx,ecx
c0019b67:	66 c1 ea 03          	shr    dx,0x3
c0019b6b:	83 e2 07             	and    edx,0x7
c0019b6e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b73:	88 17                	mov    BYTE PTR [edi],dl
c0019b75:	0f 84 a6 01 00 00    	je     c0019d21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b7b:	83 e1 07             	and    ecx,0x7
c0019b7e:	80 f9 04             	cmp    cl,0x4
c0019b81:	0f 84 98 00 00 00    	je     c0019c1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b87:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b8c:	0f 95 c0             	setne  al
c0019b8f:	80 f9 05             	cmp    cl,0x5
c0019b92:	0f 95 c2             	setne  dl
c0019b95:	08 c2                	or     dl,al
c0019b97:	74 79                	je     c0019c12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b99:	84 c9                	test   cl,cl
c0019b9b:	75 05                	jne    c0019ba2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b9d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ba0:	eb 3c                	jmp    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ba2:	80 f9 01             	cmp    cl,0x1
c0019ba5:	75 05                	jne    c0019bac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019ba7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019baa:	eb 32                	jmp    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bac:	80 f9 02             	cmp    cl,0x2
c0019baf:	75 05                	jne    c0019bb6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019bb1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019bb4:	eb 28                	jmp    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bb6:	31 c0                	xor    eax,eax
c0019bb8:	80 f9 03             	cmp    cl,0x3
c0019bbb:	75 05                	jne    c0019bc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019bbd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019bc0:	eb 1c                	jmp    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bc2:	80 f9 05             	cmp    cl,0x5
c0019bc5:	75 05                	jne    c0019bcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019bc7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019bca:	eb 12                	jmp    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bcc:	80 f9 06             	cmp    cl,0x6
c0019bcf:	75 05                	jne    c0019bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019bd1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019bd4:	eb 08                	jmp    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bd6:	80 f9 07             	cmp    cl,0x7
c0019bd9:	75 03                	jne    c0019bde <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019bdb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019bde:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019be3:	75 10                	jne    c0019bf5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019be5:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019be9:	b9 03 00 00 00       	mov    ecx,0x3
c0019bee:	01 d0                	add    eax,edx
c0019bf0:	e9 37 01 00 00       	jmp    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019bf5:	b9 02 00 00 00       	mov    ecx,0x2
c0019bfa:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019bff:	0f 85 27 01 00 00    	jne    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c05:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019c08:	b9 06 00 00 00       	mov    ecx,0x6
c0019c0d:	e9 1a 01 00 00       	jmp    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c12:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019c15:	b9 06 00 00 00       	mov    ecx,0x6
c0019c1a:	e9 0f 01 00 00       	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c1f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019c22:	88 ca                	mov    dl,cl
c0019c24:	c0 ea 06             	shr    dl,0x6
c0019c27:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019c2b:	89 ca                	mov    edx,ecx
c0019c2d:	66 c1 ea 03          	shr    dx,0x3
c0019c31:	83 e2 07             	and    edx,0x7
c0019c34:	80 e1 07             	and    cl,0x7
c0019c37:	75 05                	jne    c0019c3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019c39:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019c3c:	eb 4c                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c3e:	80 f9 01             	cmp    cl,0x1
c0019c41:	75 05                	jne    c0019c48 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019c43:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019c46:	eb 42                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c48:	80 f9 02             	cmp    cl,0x2
c0019c4b:	75 05                	jne    c0019c52 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019c4d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019c50:	eb 38                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c52:	80 f9 03             	cmp    cl,0x3
c0019c55:	75 05                	jne    c0019c5c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019c57:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019c5a:	eb 2e                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c5c:	80 f9 04             	cmp    cl,0x4
c0019c5f:	75 12                	jne    c0019c73 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019c61:	f6 c4 60             	test   ah,0x60
c0019c64:	75 08                	jne    c0019c6e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019c66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019c69:	8d 78 14             	lea    edi,[eax+0x14]
c0019c6c:	eb 1c                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c6e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019c71:	eb 17                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c73:	80 f9 05             	cmp    cl,0x5
c0019c76:	75 05                	jne    c0019c7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c78:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c7b:	eb 0d                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c7d:	80 f9 06             	cmp    cl,0x6
c0019c80:	75 05                	jne    c0019c87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c82:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c85:	eb 03                	jmp    c0019c8a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c87:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c8a:	84 d2                	test   dl,dl
c0019c8c:	75 05                	jne    c0019c93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c8e:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c91:	eb 3c                	jmp    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c93:	80 fa 01             	cmp    dl,0x1
c0019c96:	75 05                	jne    c0019c9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c98:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c9b:	eb 32                	jmp    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c9d:	80 fa 02             	cmp    dl,0x2
c0019ca0:	75 05                	jne    c0019ca7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ca2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ca5:	eb 28                	jmp    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ca7:	80 fa 03             	cmp    dl,0x3
c0019caa:	75 05                	jne    c0019cb1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019cac:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019caf:	eb 1e                	jmp    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cb1:	31 c0                	xor    eax,eax
c0019cb3:	80 fa 04             	cmp    dl,0x4
c0019cb6:	74 17                	je     c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cb8:	80 fa 05             	cmp    dl,0x5
c0019cbb:	75 05                	jne    c0019cc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019cbd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019cc0:	eb 0d                	jmp    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019cc2:	80 fa 06             	cmp    dl,0x6
c0019cc5:	75 05                	jne    c0019ccc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019cc7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019cca:	eb 03                	jmp    c0019ccf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ccc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ccf:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019cd4:	0f 94 c2             	sete   dl
c0019cd7:	80 f9 05             	cmp    cl,0x5
c0019cda:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019cde:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019ce3:	d3 e0                	shl    eax,cl
c0019ce5:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019ce9:	74 0a                	je     c0019cf5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019ceb:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019cee:	b9 07 00 00 00       	mov    ecx,0x7
c0019cf3:	eb 37                	jmp    c0019d2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019cf5:	01 f8                	add    eax,edi
c0019cf7:	b9 03 00 00 00       	mov    ecx,0x3
c0019cfc:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019d01:	74 2b                	je     c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d03:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019d08:	75 0d                	jne    c0019d17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019d0a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019d0e:	01 c8                	add    eax,ecx
c0019d10:	b9 04 00 00 00       	mov    ecx,0x4
c0019d15:	eb 17                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d17:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019d1a:	b9 07 00 00 00       	mov    ecx,0x7
c0019d1f:	eb 0d                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d21:	b9 02 00 00 00       	mov    ecx,0x2
c0019d26:	b2 01                	mov    dl,0x1
c0019d28:	31 c0                	xor    eax,eax
c0019d2a:	eb 02                	jmp    c0019d2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019d2c:	31 d2                	xor    edx,edx
c0019d2e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d32:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019d34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d38:	88 11                	mov    BYTE PTR [ecx],dl
c0019d3a:	5a                   	pop    edx
c0019d3b:	5b                   	pop    ebx
c0019d3c:	5e                   	pop    esi
c0019d3d:	5f                   	pop    edi
c0019d3e:	c3                   	ret    

c0019d3f <Krnl::smpEntry()>:
c0019d3f:	eb fe                	jmp    c0019d3f <Krnl::smpEntry()>

c0019d41 <Krnl::startCPU(int)>:
c0019d41:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0019d46:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d4d:	0f 84 36 01 00 00    	je     c0019e89 <Krnl::startCPU(int)+0x148>
c0019d53:	53                   	push   ebx
c0019d54:	83 ec 08             	sub    esp,0x8
c0019d57:	e8 1b 3f 00 00       	call   c001dc77 <lockScheduler()>
c0019d5c:	52                   	push   edx
c0019d5d:	52                   	push   edx
c0019d5e:	6a 1b                	push   0x1b
c0019d60:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c0019d66:	e8 7d 50 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019d6b:	59                   	pop    ecx
c0019d6c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019d71:	89 c3                	mov    ebx,eax
c0019d73:	58                   	pop    eax
c0019d74:	53                   	push   ebx
c0019d75:	68 70 b8 02 c0       	push   0xc002b870
c0019d7a:	e8 55 90 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0019d7f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d8d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d97:	c1 e0 18             	shl    eax,0x18
c0019d9a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019da0:	83 c4 10             	add    esp,0x10
c0019da3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019da9:	09 c2                	or     edx,eax
c0019dab:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019db1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019db7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019dbd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019dc3:	80 cd c5             	or     ch,0xc5
c0019dc6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dcc:	f3 90                	pause  
c0019dce:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dd0:	0f ba e1 0c          	bt     ecx,0xc
c0019dd4:	72 f6                	jb     c0019dcc <Krnl::startCPU(int)+0x8b>
c0019dd6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ddc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019de2:	09 c1                	or     ecx,eax
c0019de4:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019dea:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019df0:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019df6:	80 cd 85             	or     ch,0x85
c0019df9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dff:	f3 90                	pause  
c0019e01:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e03:	0f ba e1 0c          	bt     ecx,0xc
c0019e07:	72 f6                	jb     c0019dff <Krnl::startCPU(int)+0xbe>
c0019e09:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e13:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e19:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e1f:	09 c1                	or     ecx,eax
c0019e21:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019e27:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019e2d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019e33:	81 c9 02 06 00 00    	or     ecx,0x602
c0019e39:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019e3f:	f3 90                	pause  
c0019e41:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019e43:	0f ba e1 0c          	bt     ecx,0xc
c0019e47:	72 f6                	jb     c0019e3f <Krnl::startCPU(int)+0xfe>
c0019e49:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019e53:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019e59:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019e5f:	09 c8                	or     eax,ecx
c0019e61:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019e67:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019e6d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e72:	0d 02 06 00 00       	or     eax,0x602
c0019e77:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e7d:	f3 90                	pause  
c0019e7f:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e81:	0f ba e0 0c          	bt     eax,0xc
c0019e85:	72 f6                	jb     c0019e7d <Krnl::startCPU(int)+0x13c>
c0019e87:	eb fe                	jmp    c0019e87 <Krnl::startCPU(int)+0x146>
c0019e89:	c3                   	ret    

c0019e8a <Krnl::startCPUs()>:
c0019e8a:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0019e8f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e95:	88 c2                	mov    dl,al
c0019e97:	83 e2 0a             	and    edx,0xa
c0019e9a:	80 fa 0a             	cmp    dl,0xa
c0019e9d:	75 09                	jne    c0019ea8 <Krnl::startCPUs()+0x1e>
c0019e9f:	a8 01                	test   al,0x1
c0019ea1:	74 05                	je     c0019ea8 <Krnl::startCPUs()+0x1e>
c0019ea3:	e9 f3 62 fe ff       	jmp    c000019b <prepareTramp>
c0019ea8:	c3                   	ret    
c0019ea9:	90                   	nop

c0019eaa <EnvVarContainer::getEnv(char const*)>:
c0019eaa:	57                   	push   edi
c0019eab:	56                   	push   esi
c0019eac:	53                   	push   ebx
c0019ead:	31 db                	xor    ebx,ebx
c0019eaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019eb3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019eb5:	7e 2b                	jle    c0019ee2 <EnvVarContainer::getEnv(char const*)+0x38>
c0019eb7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019ebe:	50                   	push   eax
c0019ebf:	50                   	push   eax
c0019ec0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ec3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019ec6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019eca:	e8 f1 69 fe ff       	call   c00008c0 <strcmp>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	85 c0                	test   eax,eax
c0019ed4:	75 09                	jne    c0019edf <EnvVarContainer::getEnv(char const*)+0x35>
c0019ed6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019ed9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019edd:	eb 05                	jmp    c0019ee4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019edf:	43                   	inc    ebx
c0019ee0:	eb d1                	jmp    c0019eb3 <EnvVarContainer::getEnv(char const*)+0x9>
c0019ee2:	31 c0                	xor    eax,eax
c0019ee4:	5b                   	pop    ebx
c0019ee5:	5e                   	pop    esi
c0019ee6:	5f                   	pop    edi
c0019ee7:	c3                   	ret    

c0019ee8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019ee8:	57                   	push   edi
c0019ee9:	56                   	push   esi
c0019eea:	53                   	push   ebx
c0019eeb:	83 ec 1c             	sub    esp,0x1c
c0019eee:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019ef2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019ef6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019efa:	57                   	push   edi
c0019efb:	e8 94 68 fe ff       	call   c0000794 <strlen>
c0019f00:	40                   	inc    eax
c0019f01:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f04:	e8 37 59 ff ff       	call   c000f840 <malloc>
c0019f09:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f10:	e8 7f 68 fe ff       	call   c0000794 <strlen>
c0019f15:	40                   	inc    eax
c0019f16:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f19:	e8 22 59 ff ff       	call   c000f840 <malloc>
c0019f1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f25:	e8 6a 68 fe ff       	call   c0000794 <strlen>
c0019f2a:	83 c4 0c             	add    esp,0xc
c0019f2d:	40                   	inc    eax
c0019f2e:	50                   	push   eax
c0019f2f:	6a 00                	push   0x0
c0019f31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f35:	e8 3e 68 fe ff       	call   c0000778 <memset>
c0019f3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f3d:	e8 52 68 fe ff       	call   c0000794 <strlen>
c0019f42:	83 c4 0c             	add    esp,0xc
c0019f45:	40                   	inc    eax
c0019f46:	50                   	push   eax
c0019f47:	57                   	push   edi
c0019f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019f4c:	e8 f3 67 fe ff       	call   c0000744 <memcpy>
c0019f51:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f54:	e8 3b 68 fe ff       	call   c0000794 <strlen>
c0019f59:	83 c4 0c             	add    esp,0xc
c0019f5c:	40                   	inc    eax
c0019f5d:	50                   	push   eax
c0019f5e:	6a 00                	push   0x0
c0019f60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f64:	e8 0f 68 fe ff       	call   c0000778 <memset>
c0019f69:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f6c:	e8 23 68 fe ff       	call   c0000794 <strlen>
c0019f71:	83 c4 0c             	add    esp,0xc
c0019f74:	40                   	inc    eax
c0019f75:	50                   	push   eax
c0019f76:	56                   	push   esi
c0019f77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f7b:	e8 c4 67 fe ff       	call   c0000744 <memcpy>
c0019f80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f82:	40                   	inc    eax
c0019f83:	89 03                	mov    DWORD PTR [ebx],eax
c0019f85:	c1 e0 03             	shl    eax,0x3
c0019f88:	5a                   	pop    edx
c0019f89:	59                   	pop    ecx
c0019f8a:	50                   	push   eax
c0019f8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019f8e:	e8 99 58 ff ff       	call   c000f82c <realloc>
c0019f93:	83 c4 0c             	add    esp,0xc
c0019f96:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f99:	6a 08                	push   0x8
c0019f9b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019f9f:	52                   	push   edx
c0019fa0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fa2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019fa6:	50                   	push   eax
c0019fa7:	e8 98 67 fe ff       	call   c0000744 <memcpy>
c0019fac:	83 c4 20             	add    esp,0x20
c0019faf:	5b                   	pop    ebx
c0019fb0:	5e                   	pop    esi
c0019fb1:	5f                   	pop    edi
c0019fb2:	c3                   	ret    
c0019fb3:	90                   	nop

c0019fb4 <EnvVarContainer::deleteEnv(char const*)>:
c0019fb4:	c3                   	ret    
c0019fb5:	90                   	nop

c0019fb6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019fb6:	55                   	push   ebp
c0019fb7:	57                   	push   edi
c0019fb8:	56                   	push   esi
c0019fb9:	53                   	push   ebx
c0019fba:	81 ec 38 01 00 00    	sub    esp,0x138
c0019fc0:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019fc7:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019fce:	68 14 01 00 00       	push   0x114
c0019fd3:	e8 68 58 ff ff       	call   c000f840 <malloc>
c0019fd8:	83 c4 0c             	add    esp,0xc
c0019fdb:	89 c7                	mov    edi,eax
c0019fdd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019fe0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019fe7:	50                   	push   eax
c0019fe8:	e8 3f 93 ff ff       	call   c001332c <File::File(char const*, Process*)>
c0019fed:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ff0:	e8 09 96 ff ff       	call   c00135fe <File::exists()>
c0019ff5:	83 c4 10             	add    esp,0x10
c0019ff8:	84 c0                	test   al,al
c0019ffa:	75 31                	jne    c001a02d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019ffc:	51                   	push   ecx
c0019ffd:	51                   	push   ecx
c0019ffe:	6a 12                	push   0x12
c001a000:	57                   	push   edi
c001a001:	e8 8a 93 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001a006:	8b 07                	mov    eax,DWORD PTR [edi]
c001a008:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a00b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a00e:	e8 81 67 fe ff       	call   c0000794 <strlen>
c001a013:	5a                   	pop    edx
c001a014:	31 d2                	xor    edx,edx
c001a016:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a01a:	51                   	push   ecx
c001a01b:	55                   	push   ebp
c001a01c:	52                   	push   edx
c001a01d:	50                   	push   eax
c001a01e:	57                   	push   edi
c001a01f:	ff d3                	call   ebx
c001a021:	83 c4 14             	add    esp,0x14
c001a024:	57                   	push   edi
c001a025:	e8 c4 93 ff ff       	call   c00133ee <File::close()>
c001a02a:	83 c4 10             	add    esp,0x10
c001a02d:	31 db                	xor    ebx,ebx
c001a02f:	50                   	push   eax
c001a030:	31 ed                	xor    ebp,ebp
c001a032:	68 00 01 00 00       	push   0x100
c001a037:	6a 00                	push   0x0
c001a039:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a03d:	50                   	push   eax
c001a03e:	e8 35 67 fe ff       	call   c0000778 <memset>
c001a043:	58                   	pop    eax
c001a044:	5a                   	pop    edx
c001a045:	6a 01                	push   0x1
c001a047:	57                   	push   edi
c001a048:	e8 43 93 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001a04d:	83 c4 10             	add    esp,0x10
c001a050:	83 ec 0c             	sub    esp,0xc
c001a053:	8b 07                	mov    eax,DWORD PTR [edi]
c001a055:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a059:	51                   	push   ecx
c001a05a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a05e:	52                   	push   edx
c001a05f:	6a 00                	push   0x0
c001a061:	6a 01                	push   0x1
c001a063:	57                   	push   edi
c001a064:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a067:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a06b:	83 c4 20             	add    esp,0x20
c001a06e:	3c 0d                	cmp    al,0xd
c001a070:	0f 84 12 01 00 00    	je     c001a188 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a076:	85 db                	test   ebx,ebx
c001a078:	0f 84 fd 00 00 00    	je     c001a17b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a07e:	3c 0a                	cmp    al,0xa
c001a080:	74 13                	je     c001a095 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a082:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a087:	74 0c                	je     c001a095 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a089:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a08f:	0f 8e e6 00 00 00    	jle    c001a17b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a095:	83 ec 0c             	sub    esp,0xc
c001a098:	8d 53 01             	lea    edx,[ebx+0x1]
c001a09b:	29 dd                	sub    ebp,ebx
c001a09d:	52                   	push   edx
c001a09e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a0a2:	e8 99 57 ff ff       	call   c000f840 <malloc>
c001a0a7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a0aa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a0ae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a0b1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a0b5:	e8 86 57 ff ff       	call   c000f840 <malloc>
c001a0ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a0be:	83 c4 0c             	add    esp,0xc
c001a0c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a0c5:	52                   	push   edx
c001a0c6:	6a 00                	push   0x0
c001a0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0cc:	e8 a7 66 fe ff       	call   c0000778 <memset>
c001a0d1:	83 c4 0c             	add    esp,0xc
c001a0d4:	53                   	push   ebx
c001a0d5:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0d9:	55                   	push   ebp
c001a0da:	01 eb                	add    ebx,ebp
c001a0dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0e0:	e8 5f 66 fe ff       	call   c0000744 <memcpy>
c001a0e5:	83 c4 0c             	add    esp,0xc
c001a0e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a0ec:	51                   	push   ecx
c001a0ed:	6a 00                	push   0x0
c001a0ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a0f3:	e8 80 66 fe ff       	call   c0000778 <memset>
c001a0f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0fb:	e8 94 66 fe ff       	call   c0000794 <strlen>
c001a100:	83 c4 0c             	add    esp,0xc
c001a103:	50                   	push   eax
c001a104:	53                   	push   ebx
c001a105:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a109:	e8 36 66 fe ff       	call   c0000744 <memcpy>
c001a10e:	5b                   	pop    ebx
c001a10f:	58                   	pop    eax
c001a110:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a114:	68 81 b8 02 c0       	push   0xc002b881
c001a119:	e8 b6 8c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a11e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a120:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a123:	40                   	inc    eax
c001a124:	83 c4 10             	add    esp,0x10
c001a127:	89 06                	mov    DWORD PTR [esi],eax
c001a129:	85 d2                	test   edx,edx
c001a12b:	75 0c                	jne    c001a139 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a12d:	83 ec 0c             	sub    esp,0xc
c001a130:	6a 08                	push   0x8
c001a132:	e8 09 57 ff ff       	call   c000f840 <malloc>
c001a137:	eb 0c                	jmp    c001a145 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a139:	c1 e0 03             	shl    eax,0x3
c001a13c:	51                   	push   ecx
c001a13d:	51                   	push   ecx
c001a13e:	50                   	push   eax
c001a13f:	52                   	push   edx
c001a140:	e8 e7 56 ff ff       	call   c000f82c <realloc>
c001a145:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a148:	83 c4 10             	add    esp,0x10
c001a14b:	31 db                	xor    ebx,ebx
c001a14d:	52                   	push   edx
c001a14e:	6a 08                	push   0x8
c001a150:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a154:	50                   	push   eax
c001a155:	8b 16                	mov    edx,DWORD PTR [esi]
c001a157:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a15a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a15e:	50                   	push   eax
c001a15f:	e8 e0 65 fe ff       	call   c0000744 <memcpy>
c001a164:	83 c4 0c             	add    esp,0xc
c001a167:	68 00 01 00 00       	push   0x100
c001a16c:	6a 00                	push   0x0
c001a16e:	55                   	push   ebp
c001a16f:	31 ed                	xor    ebp,ebp
c001a171:	e8 02 66 fe ff       	call   c0000778 <memset>
c001a176:	83 c4 10             	add    esp,0x10
c001a179:	eb 0d                	jmp    c001a188 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a17b:	3c 3d                	cmp    al,0x3d
c001a17d:	74 07                	je     c001a186 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a17f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a183:	45                   	inc    ebp
c001a184:	eb 02                	jmp    c001a188 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a186:	89 eb                	mov    ebx,ebp
c001a188:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a18d:	0f 85 bd fe ff ff    	jne    c001a050 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a193:	50                   	push   eax
c001a194:	50                   	push   eax
c001a195:	ff 36                	push   DWORD PTR [esi]
c001a197:	68 8f b8 02 c0       	push   0xc002b88f
c001a19c:	e8 33 8c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a1a1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a1a7:	5b                   	pop    ebx
c001a1a8:	5e                   	pop    esi
c001a1a9:	5f                   	pop    edi
c001a1aa:	5d                   	pop    ebp
c001a1ab:	c3                   	ret    

c001a1ac <EnvVarContainer::__loadSystem()>:
c001a1ac:	83 ec 10             	sub    esp,0x10
c001a1af:	68 c0 d7 02 c0       	push   0xc002d7c0
c001a1b4:	68 ba b8 02 c0       	push   0xc002b8ba
c001a1b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a1bd:	e8 f4 fd ff ff       	call   c0019fb6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a1c2:	83 c4 1c             	add    esp,0x1c
c001a1c5:	c3                   	ret    

c001a1c6 <EnvVarContainer::__loadUser()>:
c001a1c6:	c3                   	ret    
c001a1c7:	90                   	nop

c001a1c8 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a1da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a1dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a1e8:	90                   	nop
c001a1e9:	c3                   	ret    

c001a1ea <EnvVarContainer::~EnvVarContainer()>:
c001a1ea:	83 ec 0c             	sub    esp,0xc
c001a1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a1f4:	85 c0                	test   eax,eax
c001a1f6:	74 1d                	je     c001a215 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1fe:	85 c0                	test   eax,eax
c001a200:	74 13                	je     c001a215 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a206:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a209:	83 ec 0c             	sub    esp,0xc
c001a20c:	50                   	push   eax
c001a20d:	e8 3e 56 ff ff       	call   c000f850 <free>
c001a212:	83 c4 10             	add    esp,0x10
c001a215:	90                   	nop
c001a216:	83 c4 0c             	add    esp,0xc
c001a219:	c3                   	ret    

c001a21a <Krnl::getEnv(Process*, char const*)>:
c001a21a:	53                   	push   ebx
c001a21b:	83 ec 08             	sub    esp,0x8
c001a21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a222:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a226:	39 05 f4 17 03 c0    	cmp    DWORD PTR ds:0xc00317f4,eax
c001a22c:	74 04                	je     c001a232 <Krnl::getEnv(Process*, char const*)+0x18>
c001a22e:	85 c0                	test   eax,eax
c001a230:	75 0b                	jne    c001a23d <Krnl::getEnv(Process*, char const*)+0x23>
c001a232:	a1 d4 0d 03 c0       	mov    eax,ds:0xc0030dd4
c001a237:	85 c0                	test   eax,eax
c001a239:	75 19                	jne    c001a254 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a23b:	eb 27                	jmp    c001a264 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a23d:	52                   	push   edx
c001a23e:	52                   	push   edx
c001a23f:	53                   	push   ebx
c001a240:	ff b0 3a 1b 00 00    	push   DWORD PTR [eax+0x1b3a]
c001a246:	e8 5f fc ff ff       	call   c0019eaa <EnvVarContainer::getEnv(char const*)>
c001a24b:	83 c4 10             	add    esp,0x10
c001a24e:	85 c0                	test   eax,eax
c001a250:	75 28                	jne    c001a27a <Krnl::getEnv(Process*, char const*)+0x60>
c001a252:	eb de                	jmp    c001a232 <Krnl::getEnv(Process*, char const*)+0x18>
c001a254:	52                   	push   edx
c001a255:	52                   	push   edx
c001a256:	53                   	push   ebx
c001a257:	50                   	push   eax
c001a258:	e8 4d fc ff ff       	call   c0019eaa <EnvVarContainer::getEnv(char const*)>
c001a25d:	83 c4 10             	add    esp,0x10
c001a260:	85 c0                	test   eax,eax
c001a262:	75 16                	jne    c001a27a <Krnl::getEnv(Process*, char const*)+0x60>
c001a264:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a268:	a1 d8 0d 03 c0       	mov    eax,ds:0xc0030dd8
c001a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a271:	83 c4 08             	add    esp,0x8
c001a274:	5b                   	pop    ebx
c001a275:	e9 30 fc ff ff       	jmp    c0019eaa <EnvVarContainer::getEnv(char const*)>
c001a27a:	83 c4 08             	add    esp,0x8
c001a27d:	5b                   	pop    ebx
c001a27e:	c3                   	ret    

c001a27f <Krnl::setEnvSystem(char const*, char const*)>:
c001a27f:	83 ec 10             	sub    esp,0x10
c001a282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a286:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a28a:	ff 35 d8 0d 03 c0    	push   DWORD PTR ds:0xc0030dd8
c001a290:	e8 53 fc ff ff       	call   c0019ee8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a295:	83 c4 1c             	add    esp,0x1c
c001a298:	c3                   	ret    

c001a299 <Krnl::setEnvUser(char const*, char const*)>:
c001a299:	a1 d4 0d 03 c0       	mov    eax,ds:0xc0030dd4
c001a29e:	85 c0                	test   eax,eax
c001a2a0:	74 15                	je     c001a2b7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a2a2:	83 ec 10             	sub    esp,0x10
c001a2a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2ad:	50                   	push   eax
c001a2ae:	e8 35 fc ff ff       	call   c0019ee8 <EnvVarContainer::setEnv(char const*, char const*)>
c001a2b3:	83 c4 1c             	add    esp,0x1c
c001a2b6:	c3                   	ret    
c001a2b7:	c3                   	ret    

c001a2b8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a2b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2bc:	8b 80 3a 1b 00 00    	mov    eax,DWORD PTR [eax+0x1b3a]
c001a2c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a2c6:	e9 1d fc ff ff       	jmp    c0019ee8 <EnvVarContainer::setEnv(char const*, char const*)>

c001a2cb <Krnl::deleteEnvSystem(char const*)>:
c001a2cb:	c3                   	ret    

c001a2cc <Krnl::deleteEnvUser(char const*)>:
c001a2cc:	c3                   	ret    

c001a2cd <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a2cd:	c3                   	ret    

c001a2ce <Krnl::newProcessEnv(Process*)>:
c001a2ce:	83 ec 28             	sub    esp,0x28
c001a2d1:	6a 0c                	push   0xc
c001a2d3:	e8 68 55 ff ff       	call   c000f840 <malloc>
c001a2d8:	5a                   	pop    edx
c001a2d9:	59                   	pop    ecx
c001a2da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a2de:	50                   	push   eax
c001a2df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2e3:	e8 e0 fe ff ff       	call   c001a1c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2ec:	83 c4 2c             	add    esp,0x2c
c001a2ef:	c3                   	ret    

c001a2f0 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a2f0:	56                   	push   esi
c001a2f1:	53                   	push   ebx
c001a2f2:	83 ec 10             	sub    esp,0x10
c001a2f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a2f9:	8b b0 3a 1b 00 00    	mov    esi,DWORD PTR [eax+0x1b3a]
c001a2ff:	6a 0c                	push   0xc
c001a301:	e8 3a 55 ff ff       	call   c000f840 <malloc>
c001a306:	89 c3                	mov    ebx,eax
c001a308:	58                   	pop    eax
c001a309:	5a                   	pop    edx
c001a30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a30e:	53                   	push   ebx
c001a30f:	e8 b4 fe ff ff       	call   c001a1c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a314:	8b 06                	mov    eax,DWORD PTR [esi]
c001a316:	89 03                	mov    DWORD PTR [ebx],eax
c001a318:	c1 e0 03             	shl    eax,0x3
c001a31b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a31e:	e8 1d 55 ff ff       	call   c000f840 <malloc>
c001a323:	83 c4 0c             	add    esp,0xc
c001a326:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a329:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a32b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a332:	52                   	push   edx
c001a333:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a336:	50                   	push   eax
c001a337:	e8 08 64 fe ff       	call   c0000744 <memcpy>
c001a33c:	89 d8                	mov    eax,ebx
c001a33e:	83 c4 14             	add    esp,0x14
c001a341:	5b                   	pop    ebx
c001a342:	5e                   	pop    esi
c001a343:	c3                   	ret    

c001a344 <Krnl::loadSystemEnv()>:
c001a344:	53                   	push   ebx
c001a345:	83 ec 14             	sub    esp,0x14
c001a348:	6a 0c                	push   0xc
c001a34a:	e8 f1 54 ff ff       	call   c000f840 <malloc>
c001a34f:	89 c3                	mov    ebx,eax
c001a351:	58                   	pop    eax
c001a352:	5a                   	pop    edx
c001a353:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c001a359:	53                   	push   ebx
c001a35a:	e8 69 fe ff ff       	call   c001a1c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a35f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a362:	89 1d d8 0d 03 c0    	mov    DWORD PTR ds:0xc0030dd8,ebx
c001a368:	e8 3f fe ff ff       	call   c001a1ac <EnvVarContainer::__loadSystem()>
c001a36d:	83 c4 18             	add    esp,0x18
c001a370:	5b                   	pop    ebx
c001a371:	c3                   	ret    

c001a372 <Krnl::loadUserEnv()>:
c001a372:	53                   	push   ebx
c001a373:	83 ec 14             	sub    esp,0x14
c001a376:	6a 0c                	push   0xc
c001a378:	e8 c3 54 ff ff       	call   c000f840 <malloc>
c001a37d:	89 c3                	mov    ebx,eax
c001a37f:	58                   	pop    eax
c001a380:	5a                   	pop    edx
c001a381:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c001a387:	53                   	push   ebx
c001a388:	e8 3b fe ff ff       	call   c001a1c8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a38d:	89 1d d4 0d 03 c0    	mov    DWORD PTR ds:0xc0030dd4,ebx
c001a393:	83 c4 18             	add    esp,0x18
c001a396:	5b                   	pop    ebx
c001a397:	c3                   	ret    

c001a398 <Krnl::flushEnv()>:
c001a398:	c3                   	ret    

c001a399 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a399:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a39d:	8b 15 d4 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030dd4
c001a3a3:	8b 88 3a 1b 00 00    	mov    ecx,DWORD PTR [eax+0x1b3a]
c001a3a9:	a1 d8 0d 03 c0       	mov    eax,ds:0xc0030dd8
c001a3ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3b0:	03 01                	add    eax,DWORD PTR [ecx]
c001a3b2:	85 d2                	test   edx,edx
c001a3b4:	74 02                	je     c001a3b8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a3b6:	03 02                	add    eax,DWORD PTR [edx]
c001a3b8:	c3                   	ret    

c001a3b9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a3b9:	57                   	push   edi
c001a3ba:	8b 0d d4 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030dd4
c001a3c0:	56                   	push   esi
c001a3c1:	85 c9                	test   ecx,ecx
c001a3c3:	53                   	push   ebx
c001a3c4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a3c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a3cc:	8b 97 3a 1b 00 00    	mov    edx,DWORD PTR [edi+0x1b3a]
c001a3d2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a3d6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3d8:	75 47                	jne    c001a421 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a3da:	39 c3                	cmp    ebx,eax
c001a3dc:	7c 47                	jl     c001a425 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a3de:	8b 15 d8 0d 03 c0    	mov    edx,DWORD PTR ds:0xc0030dd8
c001a3e4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a3e6:	01 c1                	add    ecx,eax
c001a3e8:	39 d9                	cmp    ecx,ebx
c001a3ea:	7e 6c                	jle    c001a458 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a3ec:	51                   	push   ecx
c001a3ed:	89 d9                	mov    ecx,ebx
c001a3ef:	29 c1                	sub    ecx,eax
c001a3f1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3f4:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a3f8:	53                   	push   ebx
c001a3f9:	68 dc b8 02 c0       	push   0xc002b8dc
c001a3fe:	e8 d1 89 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a403:	8b 87 3a 1b 00 00    	mov    eax,DWORD PTR [edi+0x1b3a]
c001a409:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a40b:	a1 d8 0d 03 c0       	mov    eax,ds:0xc0030dd8
c001a410:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a413:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a417:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a41a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a41d:	89 06                	mov    DWORD PTR [esi],eax
c001a41f:	eb 51                	jmp    c001a472 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a421:	39 c3                	cmp    ebx,eax
c001a423:	7d 05                	jge    c001a42a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a425:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a428:	eb 20                	jmp    c001a44a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a42a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a42c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a42f:	39 da                	cmp    edx,ebx
c001a431:	7e 04                	jle    c001a437 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a433:	29 c3                	sub    ebx,eax
c001a435:	eb 10                	jmp    c001a447 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a437:	8b 0d d8 0d 03 c0    	mov    ecx,DWORD PTR ds:0xc0030dd8
c001a43d:	03 11                	add    edx,DWORD PTR [ecx]
c001a43f:	39 da                	cmp    edx,ebx
c001a441:	7e 15                	jle    c001a458 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a443:	29 c3                	sub    ebx,eax
c001a445:	29 fb                	sub    ebx,edi
c001a447:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a44a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a44e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a451:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a454:	89 06                	mov    DWORD PTR [esi],eax
c001a456:	eb 1d                	jmp    c001a475 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a458:	83 ec 0c             	sub    esp,0xc
c001a45b:	68 f0 b8 02 c0       	push   0xc002b8f0
c001a460:	e8 18 00 00 00       	call   c001a47d <Krnl::panic(char const*)>
c001a465:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a46b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a472:	83 c4 10             	add    esp,0x10
c001a475:	89 f0                	mov    eax,esi
c001a477:	5b                   	pop    ebx
c001a478:	5e                   	pop    esi
c001a479:	5f                   	pop    edi
c001a47a:	c2 04 00             	ret    0x4

c001a47d <Krnl::panic(char const*)>:
c001a47d:	55                   	push   ebp
c001a47e:	89 e5                	mov    ebp,esp
c001a480:	53                   	push   ebx
c001a481:	83 ec 0c             	sub    esp,0xc
c001a484:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a487:	fa                   	cli    
c001a488:	c6 05 e4 0d 03 c0 01 	mov    BYTE PTR ds:0xc0030de4,0x1
c001a48f:	53                   	push   ebx
c001a490:	c6 05 c4 d1 02 c0 00 	mov    BYTE PTR ds:0xc002d1c4,0x0
c001a497:	68 0a b9 02 c0       	push   0xc002b90a
c001a49c:	e8 33 89 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a4a1:	58                   	pop    eax
c001a4a2:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a4a7:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4ad:	e8 77 68 ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c001a4b2:	83 c4 0c             	add    esp,0xc
c001a4b5:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a4ba:	6a 01                	push   0x1
c001a4bc:	6a 0f                	push   0xf
c001a4be:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4c4:	e8 91 62 ff ff       	call   c001075a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a4c9:	58                   	pop    eax
c001a4ca:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a4cf:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4d5:	e8 f0 6a ff ff       	call   c0010fca <VgaText::clearScreen()>
c001a4da:	58                   	pop    eax
c001a4db:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a4e0:	5a                   	pop    edx
c001a4e1:	68 23 b9 02 c0       	push   0xc002b923
c001a4e6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a4ec:	e8 57 6c ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a4f1:	59                   	pop    ecx
c001a4f2:	58                   	pop    eax
c001a4f3:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a4f8:	68 c8 b9 02 c0       	push   0xc002b9c8
c001a4fd:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a503:	e8 40 6c ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a508:	58                   	pop    eax
c001a509:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a50e:	5a                   	pop    edx
c001a50f:	68 3f b9 02 c0       	push   0xc002b93f
c001a514:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a51a:	e8 29 6c ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a51f:	59                   	pop    ecx
c001a520:	58                   	pop    eax
c001a521:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a526:	53                   	push   ebx
c001a527:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a52d:	e8 16 6c ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a532:	58                   	pop    eax
c001a533:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a538:	5a                   	pop    edx
c001a539:	68 5f b9 02 c0       	push   0xc002b95f
c001a53e:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a544:	e8 ff 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a549:	a1 e0 0d 03 c0       	mov    eax,ds:0xc0030de0
c001a54e:	83 c4 10             	add    esp,0x10
c001a551:	85 c0                	test   eax,eax
c001a553:	74 02                	je     c001a557 <Krnl::panic(char const*)+0xda>
c001a555:	ff d0                	call   eax
c001a557:	83 ec 0c             	sub    esp,0xc
c001a55a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a55d:	e8 fd 2f 00 00       	call   c001d55f <Thr::getDriverNameFromAddress(unsigned long)>
c001a562:	83 c4 10             	add    esp,0x10
c001a565:	89 c3                	mov    ebx,eax
c001a567:	85 c0                	test   eax,eax
c001a569:	0f 84 50 02 00 00    	je     c001a7bf <Krnl::panic(char const*)+0x342>
c001a56f:	83 ec 08             	sub    esp,0x8
c001a572:	8b 15 f4 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317f4
c001a578:	68 04 ba 02 c0       	push   0xc002ba04
c001a57d:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a583:	e8 c0 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a588:	58                   	pop    eax
c001a589:	5a                   	pop    edx
c001a58a:	8b 15 f4 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317f4
c001a590:	68 3f b9 02 c0       	push   0xc002b93f
c001a595:	ff b2 26 19 00 00    	push   DWORD PTR [edx+0x1926]
c001a59b:	e8 a8 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5a0:	59                   	pop    ecx
c001a5a1:	58                   	pop    eax
c001a5a2:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a5a7:	53                   	push   ebx
c001a5a8:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5ae:	e8 95 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5b3:	83 c4 10             	add    esp,0x10
c001a5b6:	83 ec 08             	sub    esp,0x8
c001a5b9:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a5be:	68 5e b9 02 c0       	push   0xc002b95e
c001a5c3:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5c9:	e8 7a 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5ce:	58                   	pop    eax
c001a5cf:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a5d4:	5a                   	pop    edx
c001a5d5:	68 5c ba 02 c0       	push   0xc002ba5c
c001a5da:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5e0:	e8 63 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5e5:	59                   	pop    ecx
c001a5e6:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a5eb:	5b                   	pop    ebx
c001a5ec:	68 9c ba 02 c0       	push   0xc002ba9c
c001a5f1:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a5f7:	e8 4c 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a5fc:	58                   	pop    eax
c001a5fd:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a602:	5a                   	pop    edx
c001a603:	68 4a b9 02 c0       	push   0xc002b94a
c001a608:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a60e:	e8 35 6b ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a613:	59                   	pop    ecx
c001a614:	5b                   	pop    ebx
c001a615:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a618:	68 62 b9 02 c0       	push   0xc002b962
c001a61d:	e8 b2 87 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a622:	58                   	pop    eax
c001a623:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a626:	5a                   	pop    edx
c001a627:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a62a:	68 6b b9 02 c0       	push   0xc002b96b
c001a62f:	e8 a0 87 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a634:	59                   	pop    ecx
c001a635:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a638:	5b                   	pop    ebx
c001a639:	8b 00                	mov    eax,DWORD PTR [eax]
c001a63b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a63e:	68 74 b9 02 c0       	push   0xc002b974
c001a643:	e8 8c 87 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001a648:	58                   	pop    eax
c001a649:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a64e:	5a                   	pop    edx
c001a64f:	68 e0 ba 02 c0       	push   0xc002bae0
c001a654:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a65a:	e8 e9 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a65f:	59                   	pop    ecx
c001a660:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a665:	5b                   	pop    ebx
c001a666:	68 7d b9 02 c0       	push   0xc002b97d
c001a66b:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a671:	e8 d2 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a676:	0f 20 c0             	mov    eax,cr0
c001a679:	5a                   	pop    edx
c001a67a:	59                   	pop    ecx
c001a67b:	50                   	push   eax
c001a67c:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a681:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a687:	e8 e2 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a68c:	5b                   	pop    ebx
c001a68d:	58                   	pop    eax
c001a68e:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a693:	68 87 b9 02 c0       	push   0xc002b987
c001a698:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a69e:	e8 a5 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a6a3:	0f 20 d0             	mov    eax,cr2
c001a6a6:	5a                   	pop    edx
c001a6a7:	59                   	pop    ecx
c001a6a8:	50                   	push   eax
c001a6a9:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a6ae:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6b4:	e8 b5 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a6b9:	5b                   	pop    ebx
c001a6ba:	58                   	pop    eax
c001a6bb:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a6c0:	68 91 b9 02 c0       	push   0xc002b991
c001a6c5:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6cb:	e8 78 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a6d0:	0f 20 d8             	mov    eax,cr3
c001a6d3:	5a                   	pop    edx
c001a6d4:	59                   	pop    ecx
c001a6d5:	50                   	push   eax
c001a6d6:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a6db:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6e1:	e8 88 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a6e6:	5b                   	pop    ebx
c001a6e7:	58                   	pop    eax
c001a6e8:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a6ed:	68 a4 b9 02 c0       	push   0xc002b9a4
c001a6f2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a6f8:	e8 4b 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a6fd:	0f 20 e0             	mov    eax,cr4
c001a700:	5a                   	pop    edx
c001a701:	59                   	pop    ecx
c001a702:	50                   	push   eax
c001a703:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a708:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a70e:	e8 5b 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a713:	5b                   	pop    ebx
c001a714:	58                   	pop    eax
c001a715:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a71a:	68 ae b9 02 c0       	push   0xc002b9ae
c001a71f:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a725:	e8 1e 6a ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a72a:	5a                   	pop    edx
c001a72b:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a730:	59                   	pop    ecx
c001a731:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a737:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a73a:	50                   	push   eax
c001a73b:	e8 2e 6a ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a740:	5b                   	pop    ebx
c001a741:	58                   	pop    eax
c001a742:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a747:	68 c5 b9 02 c0       	push   0xc002b9c5
c001a74c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a752:	e8 f1 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a757:	5a                   	pop    edx
c001a758:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a75d:	59                   	pop    ecx
c001a75e:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a764:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a767:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a76a:	50                   	push   eax
c001a76b:	e8 fe 69 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a770:	5b                   	pop    ebx
c001a771:	58                   	pop    eax
c001a772:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a777:	68 c5 b9 02 c0       	push   0xc002b9c5
c001a77c:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a782:	e8 c1 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a787:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a78c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a78f:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001a795:	8b 12                	mov    edx,DWORD PTR [edx]
c001a797:	59                   	pop    ecx
c001a798:	5b                   	pop    ebx
c001a799:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a79c:	50                   	push   eax
c001a79d:	e8 cc 69 ff ff       	call   c001116e <VgaText::putx(unsigned int)>
c001a7a2:	83 c4 10             	add    esp,0x10
c001a7a5:	b2 fe                	mov    dl,0xfe
c001a7a7:	e4 60                	in     al,0x60
c001a7a9:	3c 1c                	cmp    al,0x1c
c001a7ab:	74 04                	je     c001a7b1 <Krnl::panic(char const*)+0x334>
c001a7ad:	3c 5a                	cmp    al,0x5a
c001a7af:	75 f6                	jne    c001a7a7 <Krnl::panic(char const*)+0x32a>
c001a7b1:	e4 64                	in     al,0x64
c001a7b3:	a8 02                	test   al,0x2
c001a7b5:	75 fa                	jne    c001a7b1 <Krnl::panic(char const*)+0x334>
c001a7b7:	88 d0                	mov    al,dl
c001a7b9:	e6 64                	out    0x64,al
c001a7bb:	fa                   	cli    
c001a7bc:	f4                   	hlt    
c001a7bd:	eb e8                	jmp    c001a7a7 <Krnl::panic(char const*)+0x32a>
c001a7bf:	50                   	push   eax
c001a7c0:	50                   	push   eax
c001a7c1:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a7c6:	68 30 ba 02 c0       	push   0xc002ba30
c001a7cb:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7d1:	e8 72 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a7d6:	58                   	pop    eax
c001a7d7:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a7dc:	5a                   	pop    edx
c001a7dd:	68 3f b9 02 c0       	push   0xc002b93f
c001a7e2:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a7e8:	e8 5b 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a7ed:	59                   	pop    ecx
c001a7ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7f3:	5b                   	pop    ebx
c001a7f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7f7:	83 c0 0c             	add    eax,0xc
c001a7fa:	50                   	push   eax
c001a7fb:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001a800:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001a806:	e8 3d 69 ff ff       	call   c0011148 <VgaText::puts(char const*)>
c001a80b:	83 c4 10             	add    esp,0x10
c001a80e:	e9 a3 fd ff ff       	jmp    c001a5b6 <Krnl::panic(char const*)+0x139>

c001a813 <Net::switchEndian16(unsigned short)>:
c001a813:	83 ec 04             	sub    esp,0x4
c001a816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a81a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a81e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a822:	c1 f8 08             	sar    eax,0x8
c001a825:	89 c2                	mov    edx,eax
c001a827:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a82b:	c1 e0 08             	shl    eax,0x8
c001a82e:	09 d0                	or     eax,edx
c001a830:	83 c4 04             	add    esp,0x4
c001a833:	c3                   	ret    

c001a834 <Net::switchEndian32(unsigned int)>:
c001a834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a838:	c1 e8 18             	shr    eax,0x18
c001a83b:	89 c2                	mov    edx,eax
c001a83d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a841:	c1 e0 08             	shl    eax,0x8
c001a844:	25 00 00 ff 00       	and    eax,0xff0000
c001a849:	09 c2                	or     edx,eax
c001a84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a84f:	c1 e8 08             	shr    eax,0x8
c001a852:	25 00 ff 00 00       	and    eax,0xff00
c001a857:	09 c2                	or     edx,eax
c001a859:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a85d:	c1 e0 18             	shl    eax,0x18
c001a860:	09 d0                	or     eax,edx
c001a862:	c3                   	ret    

c001a863 <Net::crc32Calc(unsigned char*, int)>:
c001a863:	83 ec 10             	sub    esp,0x10
c001a866:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a86b:	75 07                	jne    c001a874 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a86d:	b8 00 00 00 00       	mov    eax,0x0
c001a872:	eb 7c                	jmp    c001a8f0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a874:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a879:	7f 07                	jg     c001a882 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a87b:	b8 00 00 00 00       	mov    eax,0x0
c001a880:	eb 6e                	jmp    c001a8f0 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a882:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a88a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a896:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a89a:	7d 4e                	jge    c001a8ea <Net::crc32Calc(unsigned char*, int)+0x87>
c001a89c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8a4:	01 d0                	add    eax,edx
c001a8a6:	8a 00                	mov    al,BYTE PTR [eax]
c001a8a8:	0f b6 c0             	movzx  eax,al
c001a8ab:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a8af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8b7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a8bc:	7f 26                	jg     c001a8e4 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c2:	83 e0 01             	and    eax,0x1
c001a8c5:	74 0d                	je     c001a8d4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a8c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8cb:	d1 e8                	shr    eax,1
c001a8cd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a8d2:	eb 06                	jmp    c001a8da <Net::crc32Calc(unsigned char*, int)+0x77>
c001a8d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d8:	d1 e8                	shr    eax,1
c001a8da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a8de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a8e2:	eb d3                	jmp    c001a8b7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a8e4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a8e8:	eb a8                	jmp    c001a892 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a8ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8ee:	f7 d0                	not    eax
c001a8f0:	83 c4 10             	add    esp,0x10
c001a8f3:	c3                   	ret    

c001a8f4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a8f4:	83 ec 1c             	sub    esp,0x1c
c001a8f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a907:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a90c:	7f 14                	jg     c001a922 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a90e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a912:	8d 50 01             	lea    edx,[eax+0x1]
c001a915:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a919:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a91c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a920:	eb e5                	jmp    c001a907 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a922:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a926:	8d 50 01             	lea    edx,[eax+0x1]
c001a929:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a92d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a930:	83 ec 04             	sub    esp,0x4
c001a933:	6a 06                	push   0x6
c001a935:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a939:	50                   	push   eax
c001a93a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a93e:	e8 01 5e fe ff       	call   c0000744 <memcpy>
c001a943:	83 c4 10             	add    esp,0x10
c001a946:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a94b:	83 ec 04             	sub    esp,0x4
c001a94e:	6a 06                	push   0x6
c001a950:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a954:	50                   	push   eax
c001a955:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a959:	e8 e6 5d fe ff       	call   c0000744 <memcpy>
c001a95e:	83 c4 10             	add    esp,0x10
c001a961:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a966:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a96a:	0f b7 c0             	movzx  eax,ax
c001a96d:	c1 f8 08             	sar    eax,0x8
c001a970:	89 c1                	mov    ecx,eax
c001a972:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a976:	8d 50 01             	lea    edx,[eax+0x1]
c001a979:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a97d:	88 ca                	mov    dl,cl
c001a97f:	88 10                	mov    BYTE PTR [eax],dl
c001a981:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a985:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a989:	8d 48 01             	lea    ecx,[eax+0x1]
c001a98c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a990:	88 10                	mov    BYTE PTR [eax],dl
c001a992:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a99a:	83 ec 04             	sub    esp,0x4
c001a99d:	52                   	push   edx
c001a99e:	50                   	push   eax
c001a99f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a9a3:	e8 9c 5d fe ff       	call   c0000744 <memcpy>
c001a9a8:	83 c4 10             	add    esp,0x10
c001a9ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a9af:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a9b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9b7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a9bb:	83 ec 08             	sub    esp,0x8
c001a9be:	50                   	push   eax
c001a9bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a9c3:	e8 9b fe ff ff       	call   c001a863 <Net::crc32Calc(unsigned char*, int)>
c001a9c8:	83 c4 10             	add    esp,0x10
c001a9cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a9cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9d3:	c1 e8 18             	shr    eax,0x18
c001a9d6:	89 c1                	mov    ecx,eax
c001a9d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9dc:	8d 50 01             	lea    edx,[eax+0x1]
c001a9df:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9e3:	88 ca                	mov    dl,cl
c001a9e5:	88 10                	mov    BYTE PTR [eax],dl
c001a9e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9eb:	c1 e8 10             	shr    eax,0x10
c001a9ee:	89 c1                	mov    ecx,eax
c001a9f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a9f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a9f7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a9fb:	88 ca                	mov    dl,cl
c001a9fd:	88 10                	mov    BYTE PTR [eax],dl
c001a9ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa03:	c1 e8 08             	shr    eax,0x8
c001aa06:	89 c1                	mov    ecx,eax
c001aa08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa0c:	8d 50 01             	lea    edx,[eax+0x1]
c001aa0f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa13:	88 ca                	mov    dl,cl
c001aa15:	88 10                	mov    BYTE PTR [eax],dl
c001aa17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aa1b:	8d 50 01             	lea    edx,[eax+0x1]
c001aa1e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001aa22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa26:	88 10                	mov    BYTE PTR [eax],dl
c001aa28:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa2c:	83 c4 1c             	add    esp,0x1c
c001aa2f:	c3                   	ret    

c001aa30 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa30:	83 ec 2c             	sub    esp,0x2c
c001aa33:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa3b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001aa40:	83 ec 04             	sub    esp,0x4
c001aa43:	6a 06                	push   0x6
c001aa45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa49:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa4d:	83 c0 0e             	add    eax,0xe
c001aa50:	50                   	push   eax
c001aa51:	e8 ee 5c fe ff       	call   c0000744 <memcpy>
c001aa56:	83 c4 10             	add    esp,0x10
c001aa59:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa5e:	83 ec 04             	sub    esp,0x4
c001aa61:	6a 06                	push   0x6
c001aa63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aa67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aa6b:	83 c0 08             	add    eax,0x8
c001aa6e:	50                   	push   eax
c001aa6f:	e8 d0 5c fe ff       	call   c0000744 <memcpy>
c001aa74:	83 c4 10             	add    esp,0x10
c001aa77:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001aa7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa80:	8d 50 01             	lea    edx,[eax+0x1]
c001aa83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa87:	8a 00                	mov    al,BYTE PTR [eax]
c001aa89:	0f b6 c0             	movzx  eax,al
c001aa8c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aa91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aa95:	8d 50 01             	lea    edx,[eax+0x1]
c001aa98:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aa9c:	8a 00                	mov    al,BYTE PTR [eax]
c001aa9e:	0f b6 c0             	movzx  eax,al
c001aaa1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aaa6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aaab:	c1 e0 08             	shl    eax,0x8
c001aaae:	89 c2                	mov    edx,eax
c001aab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aab4:	09 d0                	or     eax,edx
c001aab6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aaba:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aabe:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aac3:	75 3a                	jne    c001aaff <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aac5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aac9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aacc:	66 3d dc 05          	cmp    ax,0x5dc
c001aad0:	77 10                	ja     c001aae2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aad2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aad6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aad9:	0f b7 c0             	movzx  eax,ax
c001aadc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aae0:	eb 1d                	jmp    c001aaff <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	68 08 bb 02 c0       	push   0xc002bb08
c001aaea:	e8 e5 82 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001aaef:	83 c4 10             	add    esp,0x10
c001aaf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aaf6:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aafa:	e9 c0 00 00 00       	jmp    c001abbf <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001aaff:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ab03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ab07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab09:	83 ec 04             	sub    esp,0x4
c001ab0c:	52                   	push   edx
c001ab0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab11:	50                   	push   eax
c001ab12:	e8 2d 5c fe ff       	call   c0000744 <memcpy>
c001ab17:	83 c4 10             	add    esp,0x10
c001ab1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ab22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab26:	8d 50 01             	lea    edx,[eax+0x1]
c001ab29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab2d:	8a 00                	mov    al,BYTE PTR [eax]
c001ab2f:	0f b6 c0             	movzx  eax,al
c001ab32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab3a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab41:	8a 00                	mov    al,BYTE PTR [eax]
c001ab43:	0f b6 c0             	movzx  eax,al
c001ab46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab4a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab4e:	8d 50 01             	lea    edx,[eax+0x1]
c001ab51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab55:	8a 00                	mov    al,BYTE PTR [eax]
c001ab57:	0f b6 c0             	movzx  eax,al
c001ab5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab62:	8d 50 01             	lea    edx,[eax+0x1]
c001ab65:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab69:	8a 00                	mov    al,BYTE PTR [eax]
c001ab6b:	0f b6 c0             	movzx  eax,al
c001ab6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab76:	c1 e0 18             	shl    eax,0x18
c001ab79:	89 c2                	mov    edx,eax
c001ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab7f:	c1 e0 10             	shl    eax,0x10
c001ab82:	09 c2                	or     edx,eax
c001ab84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab88:	c1 e0 08             	shl    eax,0x8
c001ab8b:	09 d0                	or     eax,edx
c001ab8d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ab91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab99:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001ab9d:	83 e8 04             	sub    eax,0x4
c001aba0:	83 ec 08             	sub    esp,0x8
c001aba3:	50                   	push   eax
c001aba4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001aba8:	e8 b6 fc ff ff       	call   c001a863 <Net::crc32Calc(unsigned char*, int)>
c001abad:	83 c4 10             	add    esp,0x10
c001abb0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001abb4:	0f 94 c2             	sete   dl
c001abb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abbb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001abbe:	90                   	nop
c001abbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001abc3:	83 c4 2c             	add    esp,0x2c
c001abc6:	c2 04 00             	ret    0x4

c001abc9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001abc9:	55                   	push   ebp
c001abca:	57                   	push   edi
c001abcb:	56                   	push   esi
c001abcc:	53                   	push   ebx
c001abcd:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abd3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001abda:	8a 1e                	mov    bl,BYTE PTR [esi]
c001abdc:	8d 6e 01             	lea    ebp,[esi+0x1]
c001abdf:	80 fb 40             	cmp    bl,0x40
c001abe2:	75 1b                	jne    c001abff <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001abe4:	8a 16                	mov    dl,BYTE PTR [esi]
c001abe6:	84 d2                	test   dl,dl
c001abe8:	0f 84 f1 00 00 00    	je     c001acdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abee:	8d 46 01             	lea    eax,[esi+0x1]
c001abf1:	80 fa 3a             	cmp    dl,0x3a
c001abf4:	74 04                	je     c001abfa <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001abf6:	89 c6                	mov    esi,eax
c001abf8:	eb ea                	jmp    c001abe4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001abfa:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001abfd:	89 c6                	mov    esi,eax
c001abff:	50                   	push   eax
c001ac00:	6a 40                	push   0x40
c001ac02:	6a 00                	push   0x0
c001ac04:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac08:	50                   	push   eax
c001ac09:	e8 6a 5b fe ff       	call   c0000778 <memset>
c001ac0e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac15:	31 c0                	xor    eax,eax
c001ac17:	83 c4 10             	add    esp,0x10
c001ac1a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac1c:	84 c9                	test   cl,cl
c001ac1e:	0f 84 bb 00 00 00    	je     c001acdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac24:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac29:	0f 8f b0 00 00 00    	jg     c001acdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac2f:	80 f9 0a             	cmp    cl,0xa
c001ac32:	0f 85 98 00 00 00    	jne    c001acd0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac38:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac3d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac41:	a8 df                	test   al,0xdf
c001ac43:	0f 94 c1             	sete   cl
c001ac46:	3c 23                	cmp    al,0x23
c001ac48:	0f 94 c2             	sete   dl
c001ac4b:	08 d1                	or     cl,dl
c001ac4d:	75 4a                	jne    c001ac99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac4f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac52:	80 fa 01             	cmp    dl,0x1
c001ac55:	76 42                	jbe    c001ac99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac57:	3c 5b                	cmp    al,0x5b
c001ac59:	75 42                	jne    c001ac9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac5b:	80 fb 40             	cmp    bl,0x40
c001ac5e:	75 39                	jne    c001ac99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac60:	83 ec 0c             	sub    esp,0xc
c001ac63:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac67:	52                   	push   edx
c001ac68:	e8 27 5b fe ff       	call   c0000794 <strlen>
c001ac6d:	83 c4 10             	add    esp,0x10
c001ac70:	83 f8 3f             	cmp    eax,0x3f
c001ac73:	77 6a                	ja     c001acdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac75:	50                   	push   eax
c001ac76:	50                   	push   eax
c001ac77:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac7b:	52                   	push   edx
c001ac7c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac80:	52                   	push   edx
c001ac81:	e8 ae 5b fe ff       	call   c0000834 <strcpy>
c001ac86:	58                   	pop    eax
c001ac87:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac8b:	52                   	push   edx
c001ac8c:	e8 03 5b fe ff       	call   c0000794 <strlen>
c001ac91:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac96:	83 c4 10             	add    esp,0x10
c001ac99:	31 d2                	xor    edx,edx
c001ac9b:	eb 3a                	jmp    c001acd7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac9d:	80 fb 40             	cmp    bl,0x40
c001aca0:	74 06                	je     c001aca8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aca2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aca6:	eb 20                	jmp    c001acc8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aca8:	50                   	push   eax
c001aca9:	50                   	push   eax
c001acaa:	55                   	push   ebp
c001acab:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acaf:	50                   	push   eax
c001acb0:	e8 0b 5c fe ff       	call   c00008c0 <strcmp>
c001acb5:	83 c4 10             	add    esp,0x10
c001acb8:	85 c0                	test   eax,eax
c001acba:	75 dd                	jne    c001ac99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acbc:	eb e4                	jmp    c001aca2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001acbe:	8d 50 01             	lea    edx,[eax+0x1]
c001acc1:	80 f9 3d             	cmp    cl,0x3d
c001acc4:	74 1d                	je     c001ace3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001acc6:	89 d0                	mov    eax,edx
c001acc8:	8a 08                	mov    cl,BYTE PTR [eax]
c001acca:	84 c9                	test   cl,cl
c001accc:	75 f0                	jne    c001acbe <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001acce:	eb 0f                	jmp    c001acdf <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acd0:	8d 50 01             	lea    edx,[eax+0x1]
c001acd3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001acd7:	47                   	inc    edi
c001acd8:	89 d0                	mov    eax,edx
c001acda:	e9 3b ff ff ff       	jmp    c001ac1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001acdf:	31 c0                	xor    eax,eax
c001ace1:	eb 33                	jmp    c001ad16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ace3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ace7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001acea:	50                   	push   eax
c001aceb:	50                   	push   eax
c001acec:	8d 44 24 60          	lea    eax,[esp+0x60]
c001acf0:	50                   	push   eax
c001acf1:	56                   	push   esi
c001acf2:	e8 c9 5b fe ff       	call   c00008c0 <strcmp>
c001acf7:	83 c4 10             	add    esp,0x10
c001acfa:	85 c0                	test   eax,eax
c001acfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad00:	75 97                	jne    c001ac99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad02:	51                   	push   ecx
c001ad03:	51                   	push   ecx
c001ad04:	52                   	push   edx
c001ad05:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad0c:	e8 23 5b fe ff       	call   c0000834 <strcpy>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	b0 01                	mov    al,0x1
c001ad16:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad1c:	5b                   	pop    ebx
c001ad1d:	5e                   	pop    esi
c001ad1e:	5f                   	pop    edi
c001ad1f:	5d                   	pop    ebp
c001ad20:	c3                   	ret    

c001ad21 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad21:	57                   	push   edi
c001ad22:	56                   	push   esi
c001ad23:	53                   	push   ebx
c001ad24:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad2a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad31:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad38:	53                   	push   ebx
c001ad39:	e8 56 5a fe ff       	call   c0000794 <strlen>
c001ad3e:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad41:	89 c7                	mov    edi,eax
c001ad43:	e8 4c 5a fe ff       	call   c0000794 <strlen>
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad4f:	3d ff 00 00 00       	cmp    eax,0xff
c001ad54:	0f 87 d3 00 00 00    	ja     c001ae2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad5a:	57                   	push   edi
c001ad5b:	57                   	push   edi
c001ad5c:	56                   	push   esi
c001ad5d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad61:	56                   	push   esi
c001ad62:	e8 cd 5a fe ff       	call   c0000834 <strcpy>
c001ad67:	58                   	pop    eax
c001ad68:	5a                   	pop    edx
c001ad69:	68 68 c0 02 c0       	push   0xc002c068
c001ad6e:	56                   	push   esi
c001ad6f:	e8 00 5c fe ff       	call   c0000974 <strcat>
c001ad74:	59                   	pop    ecx
c001ad75:	5f                   	pop    edi
c001ad76:	53                   	push   ebx
c001ad77:	56                   	push   esi
c001ad78:	e8 f7 5b fe ff       	call   c0000974 <strcat>
c001ad7d:	58                   	pop    eax
c001ad7e:	5a                   	pop    edx
c001ad7f:	68 54 bb 02 c0       	push   0xc002bb54
c001ad84:	56                   	push   esi
c001ad85:	e8 ea 5b fe ff       	call   c0000974 <strcat>
c001ad8a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad91:	e8 aa 4a ff ff       	call   c000f840 <malloc>
c001ad96:	83 c4 0c             	add    esp,0xc
c001ad99:	89 c3                	mov    ebx,eax
c001ad9b:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c001ada1:	56                   	push   esi
c001ada2:	50                   	push   eax
c001ada3:	e8 84 85 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001ada8:	83 c4 10             	add    esp,0x10
c001adab:	85 db                	test   ebx,ebx
c001adad:	74 7e                	je     c001ae2d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adaf:	51                   	push   ecx
c001adb0:	51                   	push   ecx
c001adb1:	6a 01                	push   0x1
c001adb3:	53                   	push   ebx
c001adb4:	e8 d7 85 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001adb9:	83 c4 10             	add    esp,0x10
c001adbc:	85 c0                	test   eax,eax
c001adbe:	74 08                	je     c001adc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001adc0:	83 ec 0c             	sub    esp,0xc
c001adc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adc5:	53                   	push   ebx
c001adc6:	eb 5f                	jmp    c001ae27 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001adc8:	52                   	push   edx
c001adc9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001adcd:	50                   	push   eax
c001adce:	8d 44 24 20          	lea    eax,[esp+0x20]
c001add2:	50                   	push   eax
c001add3:	53                   	push   ebx
c001add4:	e8 63 88 ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001add9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001addd:	83 c4 10             	add    esp,0x10
c001ade0:	89 c1                	mov    ecx,eax
c001ade2:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ade6:	74 31                	je     c001ae19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ade8:	83 ec 0c             	sub    esp,0xc
c001adeb:	50                   	push   eax
c001adec:	e8 4f 4a ff ff       	call   c000f840 <malloc>
c001adf1:	89 c6                	mov    esi,eax
c001adf3:	58                   	pop    eax
c001adf4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adf6:	8d 54 24 20          	lea    edx,[esp+0x20]
c001adfa:	52                   	push   edx
c001adfb:	56                   	push   esi
c001adfc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae04:	53                   	push   ebx
c001ae05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae08:	83 c4 20             	add    esp,0x20
c001ae0b:	85 c0                	test   eax,eax
c001ae0d:	75 0a                	jne    c001ae19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae13:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae17:	74 18                	je     c001ae31 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae19:	83 ec 0c             	sub    esp,0xc
c001ae1c:	53                   	push   ebx
c001ae1d:	e8 cc 85 ff ff       	call   c00133ee <File::close()>
c001ae22:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae2a:	83 c4 10             	add    esp,0x10
c001ae2d:	31 c0                	xor    eax,eax
c001ae2f:	eb 3b                	jmp    c001ae6c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae31:	83 ec 0c             	sub    esp,0xc
c001ae34:	53                   	push   ebx
c001ae35:	e8 b4 85 ff ff       	call   c00133ee <File::close()>
c001ae3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae42:	83 c4 0c             	add    esp,0xc
c001ae45:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae4c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae53:	56                   	push   esi
c001ae54:	e8 70 fd ff ff       	call   c001abc9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae59:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae5c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae60:	e8 eb 49 ff ff       	call   c000f850 <free>
c001ae65:	83 c4 10             	add    esp,0x10
c001ae68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae6c:	81 c4 20 01 00 00    	add    esp,0x120
c001ae72:	5b                   	pop    ebx
c001ae73:	5e                   	pop    esi
c001ae74:	5f                   	pop    edi
c001ae75:	c3                   	ret    

c001ae76 <Reg::getLine(char*, char*, char*)>:
c001ae76:	57                   	push   edi
c001ae77:	56                   	push   esi
c001ae78:	53                   	push   ebx
c001ae79:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae7d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae81:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae85:	57                   	push   edi
c001ae86:	56                   	push   esi
c001ae87:	53                   	push   ebx
c001ae88:	68 59 bb 02 c0       	push   0xc002bb59
c001ae8d:	e8 8f fe ff ff       	call   c001ad21 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	84 c0                	test   al,al
c001ae97:	75 10                	jne    c001aea9 <Reg::getLine(char*, char*, char*)+0x33>
c001ae99:	57                   	push   edi
c001ae9a:	56                   	push   esi
c001ae9b:	53                   	push   ebx
c001ae9c:	68 7e bb 02 c0       	push   0xc002bb7e
c001aea1:	e8 7b fe ff ff       	call   c001ad21 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	5b                   	pop    ebx
c001aeaa:	5e                   	pop    esi
c001aeab:	5f                   	pop    edi
c001aeac:	c3                   	ret    

c001aead <Reg::readInt(char*, char*, int*)>:
c001aead:	55                   	push   ebp
c001aeae:	57                   	push   edi
c001aeaf:	56                   	push   esi
c001aeb0:	53                   	push   ebx
c001aeb1:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aeb7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aebb:	57                   	push   edi
c001aebc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aec3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aeca:	e8 a7 ff ff ff       	call   c001ae76 <Reg::getLine(char*, char*, char*)>
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	84 c0                	test   al,al
c001aed4:	0f 84 b3 00 00 00    	je     c001af8d <Reg::readInt(char*, char*, int*)+0xe0>
c001aeda:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aede:	80 fa 2b             	cmp    dl,0x2b
c001aee1:	74 0c                	je     c001aeef <Reg::readInt(char*, char*, int*)+0x42>
c001aee3:	80 fa 2d             	cmp    dl,0x2d
c001aee6:	75 0e                	jne    c001aef6 <Reg::readInt(char*, char*, int*)+0x49>
c001aee8:	ba 01 00 00 00       	mov    edx,0x1
c001aeed:	eb 0b                	jmp    c001aefa <Reg::readInt(char*, char*, int*)+0x4d>
c001aeef:	ba 01 00 00 00       	mov    edx,0x1
c001aef4:	eb 02                	jmp    c001aef8 <Reg::readInt(char*, char*, int*)+0x4b>
c001aef6:	31 d2                	xor    edx,edx
c001aef8:	31 c0                	xor    eax,eax
c001aefa:	be 0a 00 00 00       	mov    esi,0xa
c001aeff:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af04:	75 20                	jne    c001af26 <Reg::readInt(char*, char*, int*)+0x79>
c001af06:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af0a:	80 f9 78             	cmp    cl,0x78
c001af0d:	75 0a                	jne    c001af19 <Reg::readInt(char*, char*, int*)+0x6c>
c001af0f:	83 c2 02             	add    edx,0x2
c001af12:	be 10 00 00 00       	mov    esi,0x10
c001af17:	eb 0d                	jmp    c001af26 <Reg::readInt(char*, char*, int*)+0x79>
c001af19:	80 f9 62             	cmp    cl,0x62
c001af1c:	75 08                	jne    c001af26 <Reg::readInt(char*, char*, int*)+0x79>
c001af1e:	83 c2 02             	add    edx,0x2
c001af21:	be 02 00 00 00       	mov    esi,0x2
c001af26:	01 d7                	add    edi,edx
c001af28:	31 d2                	xor    edx,edx
c001af2a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af2c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af30:	80 fb 0d             	cmp    bl,0xd
c001af33:	0f 94 c3             	sete   bl
c001af36:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af3b:	0f 94 c1             	sete   cl
c001af3e:	08 cb                	or     bl,cl
c001af40:	75 3a                	jne    c001af7c <Reg::readInt(char*, char*, int*)+0xcf>
c001af42:	0f af d6             	imul   edx,esi
c001af45:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af4a:	83 fe 10             	cmp    esi,0x10
c001af4d:	75 26                	jne    c001af75 <Reg::readInt(char*, char*, int*)+0xc8>
c001af4f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af53:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af56:	89 e9                	mov    ecx,ebp
c001af58:	80 f9 05             	cmp    cl,0x5
c001af5b:	77 06                	ja     c001af63 <Reg::readInt(char*, char*, int*)+0xb6>
c001af5d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af61:	eb 16                	jmp    c001af79 <Reg::readInt(char*, char*, int*)+0xcc>
c001af63:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af67:	83 e9 61             	sub    ecx,0x61
c001af6a:	80 f9 05             	cmp    cl,0x5
c001af6d:	77 06                	ja     c001af75 <Reg::readInt(char*, char*, int*)+0xc8>
c001af6f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af73:	eb 04                	jmp    c001af79 <Reg::readInt(char*, char*, int*)+0xcc>
c001af75:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af79:	47                   	inc    edi
c001af7a:	eb ae                	jmp    c001af2a <Reg::readInt(char*, char*, int*)+0x7d>
c001af7c:	84 c0                	test   al,al
c001af7e:	74 02                	je     c001af82 <Reg::readInt(char*, char*, int*)+0xd5>
c001af80:	f7 da                	neg    edx
c001af82:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af89:	89 10                	mov    DWORD PTR [eax],edx
c001af8b:	88 d8                	mov    al,bl
c001af8d:	81 c4 ec 00 00 00    	add    esp,0xec
c001af93:	5b                   	pop    ebx
c001af94:	5e                   	pop    esi
c001af95:	5f                   	pop    edi
c001af96:	5d                   	pop    ebp
c001af97:	c3                   	ret    

c001af98 <Reg::readString(char*, char*, char*, int)>:
c001af98:	57                   	push   edi
c001af99:	56                   	push   esi
c001af9a:	53                   	push   ebx
c001af9b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001afa1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001afa8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001afac:	57                   	push   edi
c001afad:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afb4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afbb:	e8 b6 fe ff ff       	call   c001ae76 <Reg::getLine(char*, char*, char*)>
c001afc0:	83 c4 10             	add    esp,0x10
c001afc3:	89 c6                	mov    esi,eax
c001afc5:	84 c0                	test   al,al
c001afc7:	74 44                	je     c001b00d <Reg::readString(char*, char*, char*, int)+0x75>
c001afc9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001afd0:	31 c0                	xor    eax,eax
c001afd2:	4a                   	dec    edx
c001afd3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001afd6:	84 c9                	test   cl,cl
c001afd8:	74 0f                	je     c001afe9 <Reg::readString(char*, char*, char*, int)+0x51>
c001afda:	39 c2                	cmp    edx,eax
c001afdc:	7e 0b                	jle    c001afe9 <Reg::readString(char*, char*, char*, int)+0x51>
c001afde:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001afe1:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001afe6:	40                   	inc    eax
c001afe7:	eb ea                	jmp    c001afd3 <Reg::readString(char*, char*, char*, int)+0x3b>
c001afe9:	83 ec 0c             	sub    esp,0xc
c001afec:	53                   	push   ebx
c001afed:	e8 a2 57 fe ff       	call   c0000794 <strlen>
c001aff2:	83 c4 10             	add    esp,0x10
c001aff5:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001affa:	75 11                	jne    c001b00d <Reg::readString(char*, char*, char*, int)+0x75>
c001affc:	83 ec 0c             	sub    esp,0xc
c001afff:	53                   	push   ebx
c001b000:	e8 8f 57 fe ff       	call   c0000794 <strlen>
c001b005:	83 c4 10             	add    esp,0x10
c001b008:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b00d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b013:	89 f0                	mov    eax,esi
c001b015:	5b                   	pop    ebx
c001b016:	5e                   	pop    esi
c001b017:	5f                   	pop    edi
c001b018:	c3                   	ret    

c001b019 <Reg::readBool(char*, char*, bool*)>:
c001b019:	83 ec 20             	sub    esp,0x20
c001b01c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b020:	50                   	push   eax
c001b021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b025:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b029:	e8 7f fe ff ff       	call   c001aead <Reg::readInt(char*, char*, int*)>
c001b02e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b033:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b037:	0f 95 02             	setne  BYTE PTR [edx]
c001b03a:	83 c4 2c             	add    esp,0x2c
c001b03d:	c3                   	ret    

c001b03e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b03e:	53                   	push   ebx
c001b03f:	83 ec 1c             	sub    esp,0x1c
c001b042:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b046:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b04a:	50                   	push   eax
c001b04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b053:	e8 c1 ff ff ff       	call   c001b019 <Reg::readBool(char*, char*, bool*)>
c001b058:	83 c4 10             	add    esp,0x10
c001b05b:	84 c0                	test   al,al
c001b05d:	74 04                	je     c001b063 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b05f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b063:	88 d8                	mov    al,bl
c001b065:	83 c4 18             	add    esp,0x18
c001b068:	5b                   	pop    ebx
c001b069:	c3                   	ret    

c001b06a <Reg::readIntWithDefault(char*, char*, int)>:
c001b06a:	53                   	push   ebx
c001b06b:	83 ec 1c             	sub    esp,0x1c
c001b06e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b072:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b076:	50                   	push   eax
c001b077:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b07b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b07f:	e8 29 fe ff ff       	call   c001aead <Reg::readInt(char*, char*, int*)>
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	84 c0                	test   al,al
c001b089:	74 04                	je     c001b08f <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b08b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b08f:	89 d8                	mov    eax,ebx
c001b091:	83 c4 18             	add    esp,0x18
c001b094:	5b                   	pop    ebx
c001b095:	c3                   	ret    

c001b096 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b096:	57                   	push   edi
c001b097:	56                   	push   esi
c001b098:	53                   	push   ebx
c001b099:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b09d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0a1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b0a5:	56                   	push   esi
c001b0a6:	53                   	push   ebx
c001b0a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0af:	e8 e4 fe ff ff       	call   c001af98 <Reg::readString(char*, char*, char*, int)>
c001b0b4:	83 c4 10             	add    esp,0x10
c001b0b7:	84 c0                	test   al,al
c001b0b9:	75 1b                	jne    c001b0d6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b0bb:	50                   	push   eax
c001b0bc:	56                   	push   esi
c001b0bd:	4e                   	dec    esi
c001b0be:	6a 00                	push   0x0
c001b0c0:	53                   	push   ebx
c001b0c1:	e8 b2 56 fe ff       	call   c0000778 <memset>
c001b0c6:	83 c4 0c             	add    esp,0xc
c001b0c9:	56                   	push   esi
c001b0ca:	57                   	push   edi
c001b0cb:	53                   	push   ebx
c001b0cc:	89 fb                	mov    ebx,edi
c001b0ce:	e8 71 56 fe ff       	call   c0000744 <memcpy>
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	89 d8                	mov    eax,ebx
c001b0d8:	5b                   	pop    ebx
c001b0d9:	5e                   	pop    esi
c001b0da:	5f                   	pop    edi
c001b0db:	c3                   	ret    

c001b0dc <Sys::eject(regs*)>:
c001b0dc:	83 ec 0c             	sub    esp,0xc
c001b0df:	83 ca ff             	or     edx,0xffffffff
c001b0e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0e6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b0e9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0ee:	83 e9 41             	sub    ecx,0x41
c001b0f1:	83 f9 19             	cmp    ecx,0x19
c001b0f4:	77 18                	ja     c001b10e <Sys::eject(regs*)+0x32>
c001b0f6:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c001b0fd:	85 c9                	test   ecx,ecx
c001b0ff:	74 0d                	je     c001b10e <Sys::eject(regs*)+0x32>
c001b101:	83 ec 0c             	sub    esp,0xc
c001b104:	51                   	push   ecx
c001b105:	e8 74 b4 ff ff       	call   c001657e <LogicalDisk::eject()>
c001b10a:	83 c4 10             	add    esp,0x10
c001b10d:	99                   	cdq    
c001b10e:	83 c4 0c             	add    esp,0xc
c001b111:	c3                   	ret    

c001b112 <Sys::exit(regs*)>:
c001b112:	83 ec 18             	sub    esp,0x18
c001b115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b119:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b11c:	e8 99 35 00 00       	call   c001e6ba <terminateTask(int)>
c001b121:	83 c8 ff             	or     eax,0xffffffff
c001b124:	83 c4 1c             	add    esp,0x1c
c001b127:	89 c2                	mov    edx,eax
c001b129:	c3                   	ret    

c001b12a <Sys::getCwd(regs*)>:
c001b12a:	83 ec 10             	sub    esp,0x10
c001b12d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b131:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b134:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b137:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b13c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b13f:	e8 ea 7f ff ff       	call   c001312e <Fs::getcwd(Process*, char*, int)>
c001b144:	83 c4 1c             	add    esp,0x1c
c001b147:	99                   	cdq    
c001b148:	c3                   	ret    

c001b149 <Sys::getPID(regs*)>:
c001b149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b14e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b151:	8b 00                	mov    eax,DWORD PTR [eax]
c001b153:	99                   	cdq    
c001b154:	c3                   	ret    

c001b155 <Sys::getRAMData(regs*)>:
c001b155:	8b 0d d4 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e2d4
c001b15b:	6b 05 d0 e2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e2d0,0x64
c001b162:	99                   	cdq    
c001b163:	f7 f9                	idiv   ecx
c001b165:	c1 e0 18             	shl    eax,0x18
c001b168:	09 c8                	or     eax,ecx
c001b16a:	99                   	cdq    
c001b16b:	c3                   	ret    

c001b16c <Sys::loadDLL(regs*)>:
c001b16c:	56                   	push   esi
c001b16d:	53                   	push   ebx
c001b16e:	31 d2                	xor    edx,edx
c001b170:	51                   	push   ecx
c001b171:	b8 01 00 00 00       	mov    eax,0x1
c001b176:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b17a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b17e:	0f 84 8c 00 00 00    	je     c001b210 <Sys::loadDLL(regs*)+0xa4>
c001b184:	83 ec 0c             	sub    esp,0xc
c001b187:	68 14 01 00 00       	push   0x114
c001b18c:	e8 af 46 ff ff       	call   c000f840 <malloc>
c001b191:	83 c4 0c             	add    esp,0xc
c001b194:	89 c3                	mov    ebx,eax
c001b196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b19b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b19e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1a1:	53                   	push   ebx
c001b1a2:	e8 85 81 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001b1a7:	83 c4 10             	add    esp,0x10
c001b1aa:	31 d2                	xor    edx,edx
c001b1ac:	b8 02 00 00 00       	mov    eax,0x2
c001b1b1:	85 db                	test   ebx,ebx
c001b1b3:	74 5b                	je     c001b210 <Sys::loadDLL(regs*)+0xa4>
c001b1b5:	83 ec 0c             	sub    esp,0xc
c001b1b8:	53                   	push   ebx
c001b1b9:	e8 40 84 ff ff       	call   c00135fe <File::exists()>
c001b1be:	83 c4 10             	add    esp,0x10
c001b1c1:	84 c0                	test   al,al
c001b1c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1c5:	75 11                	jne    c001b1d8 <Sys::loadDLL(regs*)+0x6c>
c001b1c7:	83 ec 0c             	sub    esp,0xc
c001b1ca:	53                   	push   ebx
c001b1cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1ce:	83 c4 10             	add    esp,0x10
c001b1d1:	b8 03 00 00 00       	mov    eax,0x3
c001b1d6:	eb 36                	jmp    c001b20e <Sys::loadDLL(regs*)+0xa2>
c001b1d8:	83 ec 0c             	sub    esp,0xc
c001b1db:	53                   	push   ebx
c001b1dc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b1df:	58                   	pop    eax
c001b1e0:	5a                   	pop    edx
c001b1e1:	6a 00                	push   0x0
c001b1e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b1e6:	e8 c5 23 00 00       	call   c001d5b0 <Thr::loadDLL(char const*, bool)>
c001b1eb:	83 c4 10             	add    esp,0x10
c001b1ee:	89 c1                	mov    ecx,eax
c001b1f0:	31 d2                	xor    edx,edx
c001b1f2:	b8 04 00 00 00       	mov    eax,0x4
c001b1f7:	85 c9                	test   ecx,ecx
c001b1f9:	74 15                	je     c001b210 <Sys::loadDLL(regs*)+0xa4>
c001b1fb:	53                   	push   ebx
c001b1fc:	53                   	push   ebx
c001b1fd:	ff 35 88 e2 02 c0    	push   DWORD PTR ds:0xc002e288
c001b203:	51                   	push   ecx
c001b204:	e8 f6 25 00 00       	call   c001d7ff <Thr::executeDLL(unsigned long, void*)>
c001b209:	83 c4 10             	add    esp,0x10
c001b20c:	31 c0                	xor    eax,eax
c001b20e:	31 d2                	xor    edx,edx
c001b210:	59                   	pop    ecx
c001b211:	5b                   	pop    ebx
c001b212:	5e                   	pop    esi
c001b213:	c3                   	ret    

c001b214 <Sys::read(regs*)>:
c001b214:	57                   	push   edi
c001b215:	56                   	push   esi
c001b216:	53                   	push   ebx
c001b217:	83 ec 10             	sub    esp,0x10
c001b21a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b21e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b221:	83 f8 02             	cmp    eax,0x2
c001b224:	77 10                	ja     c001b236 <Sys::read(regs*)+0x22>
c001b226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b22b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b22e:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b234:	eb 0e                	jmp    c001b244 <Sys::read(regs*)+0x30>
c001b236:	83 ec 0c             	sub    esp,0xc
c001b239:	50                   	push   eax
c001b23a:	e8 e2 67 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b23f:	83 c4 10             	add    esp,0x10
c001b242:	89 c1                	mov    ecx,eax
c001b244:	83 c8 ff             	or     eax,0xffffffff
c001b247:	85 c9                	test   ecx,ecx
c001b249:	89 c2                	mov    edx,eax
c001b24b:	74 28                	je     c001b275 <Sys::read(regs*)+0x61>
c001b24d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b255:	31 ff                	xor    edi,edi
c001b257:	83 ec 0c             	sub    esp,0xc
c001b25a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b25c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b260:	52                   	push   edx
c001b261:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b264:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b267:	57                   	push   edi
c001b268:	56                   	push   esi
c001b269:	51                   	push   ecx
c001b26a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b26d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b271:	83 c4 20             	add    esp,0x20
c001b274:	99                   	cdq    
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	5b                   	pop    ebx
c001b279:	5e                   	pop    esi
c001b27a:	5f                   	pop    edi
c001b27b:	c3                   	ret    

c001b27c <Sys::sbrk(regs*)>:
c001b27c:	56                   	push   esi
c001b27d:	53                   	push   ebx
c001b27e:	50                   	push   eax
c001b27f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b284:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b288:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b28b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b28e:	8b 88 32 19 00 00    	mov    ecx,DWORD PTR [eax+0x1932]
c001b294:	85 db                	test   ebx,ebx
c001b296:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b299:	74 02                	je     c001b29d <Sys::sbrk(regs*)+0x21>
c001b29b:	79 06                	jns    c001b2a3 <Sys::sbrk(regs*)+0x27>
c001b29d:	89 f0                	mov    eax,esi
c001b29f:	31 d2                	xor    edx,edx
c001b2a1:	eb 2a                	jmp    c001b2cd <Sys::sbrk(regs*)+0x51>
c001b2a3:	83 c8 ff             	or     eax,0xffffffff
c001b2a6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b2ac:	89 c2                	mov    edx,eax
c001b2ae:	77 1d                	ja     c001b2cd <Sys::sbrk(regs*)+0x51>
c001b2b0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b2b6:	50                   	push   eax
c001b2b7:	c1 ea 0c             	shr    edx,0xc
c001b2ba:	68 07 0c 00 00       	push   0xc07
c001b2bf:	52                   	push   edx
c001b2c0:	51                   	push   ecx
c001b2c1:	e8 7a 70 ff ff       	call   c0012340 <VAS::allocatePages(int, int)>
c001b2c6:	89 f0                	mov    eax,esi
c001b2c8:	31 d2                	xor    edx,edx
c001b2ca:	83 c4 10             	add    esp,0x10
c001b2cd:	59                   	pop    ecx
c001b2ce:	5b                   	pop    ebx
c001b2cf:	5e                   	pop    esi
c001b2d0:	c3                   	ret    

c001b2d1 <Sys::setCwd(regs*)>:
c001b2d1:	83 ec 14             	sub    esp,0x14
c001b2d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b2db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2e0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2e3:	e8 b5 83 ff ff       	call   c001369d <Fs::setcwd(Process*, char*)>
c001b2e8:	83 c4 1c             	add    esp,0x1c
c001b2eb:	99                   	cdq    
c001b2ec:	c3                   	ret    

c001b2ed <Sys::setTime(regs*)>:
c001b2ed:	55                   	push   ebp
c001b2ee:	31 d2                	xor    edx,edx
c001b2f0:	57                   	push   edi
c001b2f1:	bf 18 00 00 00       	mov    edi,0x18
c001b2f6:	56                   	push   esi
c001b2f7:	53                   	push   ebx
c001b2f8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b2fd:	83 ec 30             	sub    esp,0x30
c001b300:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b304:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b307:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b30a:	f7 f3                	div    ebx
c001b30c:	89 d6                	mov    esi,edx
c001b30e:	31 d2                	xor    edx,edx
c001b310:	f7 f3                	div    ebx
c001b312:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b315:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b319:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b31e:	31 d2                	xor    edx,edx
c001b320:	f7 f3                	div    ebx
c001b322:	31 d2                	xor    edx,edx
c001b324:	bb 0c 00 00 00       	mov    ebx,0xc
c001b329:	f7 f7                	div    edi
c001b32b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b32e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b332:	0f b7 cd             	movzx  ecx,bp
c001b335:	56                   	push   esi
c001b336:	89 c7                	mov    edi,eax
c001b338:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b33c:	c1 e6 10             	shl    esi,0x10
c001b33f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b343:	83 e7 1f             	and    edi,0x1f
c001b346:	51                   	push   ecx
c001b347:	47                   	inc    edi
c001b348:	c1 e8 05             	shr    eax,0x5
c001b34b:	31 d2                	xor    edx,edx
c001b34d:	f7 f3                	div    ebx
c001b34f:	31 db                	xor    ebx,ebx
c001b351:	52                   	push   edx
c001b352:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b356:	57                   	push   edi
c001b357:	68 99 bb 02 c0       	push   0xc002bb99
c001b35c:	e8 73 7a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b361:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b365:	89 f8                	mov    eax,edi
c001b367:	31 c9                	xor    ecx,ecx
c001b369:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b36d:	88 c1                	mov    cl,al
c001b36f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b375:	88 d5                	mov    ch,dl
c001b377:	c1 e0 10             	shl    eax,0x10
c001b37a:	0f b7 d1             	movzx  edx,cx
c001b37d:	09 c2                	or     edx,eax
c001b37f:	89 d8                	mov    eax,ebx
c001b381:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b386:	09 f0                	or     eax,esi
c001b388:	89 c3                	mov    ebx,eax
c001b38a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b38e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b392:	83 c4 18             	add    esp,0x18
c001b395:	53                   	push   ebx
c001b396:	52                   	push   edx
c001b397:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b39b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b39f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3a3:	e8 0f 8a ff ff       	call   c0013db7 <datetimeToSeconds(datetime_t)>
c001b3a8:	83 c4 0c             	add    esp,0xc
c001b3ab:	52                   	push   edx
c001b3ac:	50                   	push   eax
c001b3ad:	56                   	push   esi
c001b3ae:	e8 8b 8b ff ff       	call   c0013f3e <secondsToDatetime(unsigned long long)>
c001b3b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b3b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b3bb:	51                   	push   ecx
c001b3bc:	89 d6                	mov    esi,edx
c001b3be:	51                   	push   ecx
c001b3bf:	c1 ee 10             	shr    esi,0x10
c001b3c2:	89 f3                	mov    ebx,esi
c001b3c4:	0f b6 f3             	movzx  esi,bl
c001b3c7:	56                   	push   esi
c001b3c8:	0f b6 f6             	movzx  esi,dh
c001b3cb:	0f b6 d2             	movzx  edx,dl
c001b3ce:	56                   	push   esi
c001b3cf:	52                   	push   edx
c001b3d0:	89 c2                	mov    edx,eax
c001b3d2:	c1 ea 10             	shr    edx,0x10
c001b3d5:	52                   	push   edx
c001b3d6:	0f b6 d4             	movzx  edx,ah
c001b3d9:	0f b6 c0             	movzx  eax,al
c001b3dc:	52                   	push   edx
c001b3dd:	50                   	push   eax
c001b3de:	68 b5 bb 02 c0       	push   0xc002bbb5
c001b3e3:	e8 ec 79 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b3e8:	83 c4 2c             	add    esp,0x2c
c001b3eb:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001b3f0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b3f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b3f8:	53                   	push   ebx
c001b3f9:	51                   	push   ecx
c001b3fa:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b400:	e8 d9 8a ff ff       	call   c0013ede <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b405:	83 f0 01             	xor    eax,0x1
c001b408:	31 d2                	xor    edx,edx
c001b40a:	0f b6 c0             	movzx  eax,al
c001b40d:	83 c4 3c             	add    esp,0x3c
c001b410:	5b                   	pop    ebx
c001b411:	5e                   	pop    esi
c001b412:	5f                   	pop    edi
c001b413:	5d                   	pop    ebp
c001b414:	c3                   	ret    

c001b415 <Sys::timezone(regs*)>:
c001b415:	53                   	push   ebx
c001b416:	83 ec 08             	sub    esp,0x8
c001b419:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b41d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b421:	75 17                	jne    c001b43a <Sys::timezone(regs*)+0x25>
c001b423:	83 ec 0c             	sub    esp,0xc
c001b426:	68 d1 bb 02 c0       	push   0xc002bbd1
c001b42b:	e8 a4 79 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b430:	83 c8 ff             	or     eax,0xffffffff
c001b433:	83 c4 10             	add    esp,0x10
c001b436:	89 c2                	mov    edx,eax
c001b438:	eb 20                	jmp    c001b45a <Sys::timezone(regs*)+0x45>
c001b43a:	83 ec 0c             	sub    esp,0xc
c001b43d:	68 09 bc 02 c0       	push   0xc002bc09
c001b442:	e8 8d 79 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b447:	58                   	pop    eax
c001b448:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b44b:	e8 f0 87 ff ff       	call   c0013c40 <User::loadClockSettings(int)>
c001b450:	83 c4 10             	add    esp,0x10
c001b453:	b8 01 00 00 00       	mov    eax,0x1
c001b458:	31 d2                	xor    edx,edx
c001b45a:	83 c4 08             	add    esp,0x8
c001b45d:	5b                   	pop    ebx
c001b45e:	c3                   	ret    

c001b45f <Sys::write(regs*)>:
c001b45f:	57                   	push   edi
c001b460:	56                   	push   esi
c001b461:	53                   	push   ebx
c001b462:	83 ec 10             	sub    esp,0x10
c001b465:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b469:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b46c:	83 f8 02             	cmp    eax,0x2
c001b46f:	77 10                	ja     c001b481 <Sys::write(regs*)+0x22>
c001b471:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b476:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b479:	8b 88 26 19 00 00    	mov    ecx,DWORD PTR [eax+0x1926]
c001b47f:	eb 0e                	jmp    c001b48f <Sys::write(regs*)+0x30>
c001b481:	83 ec 0c             	sub    esp,0xc
c001b484:	50                   	push   eax
c001b485:	e8 97 65 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b48a:	83 c4 10             	add    esp,0x10
c001b48d:	89 c1                	mov    ecx,eax
c001b48f:	83 c8 ff             	or     eax,0xffffffff
c001b492:	85 c9                	test   ecx,ecx
c001b494:	89 c2                	mov    edx,eax
c001b496:	74 28                	je     c001b4c0 <Sys::write(regs*)+0x61>
c001b498:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4a0:	31 ff                	xor    edi,edi
c001b4a2:	83 ec 0c             	sub    esp,0xc
c001b4a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4ab:	52                   	push   edx
c001b4ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4af:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4b2:	57                   	push   edi
c001b4b3:	56                   	push   esi
c001b4b4:	51                   	push   ecx
c001b4b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4bc:	83 c4 20             	add    esp,0x20
c001b4bf:	99                   	cdq    
c001b4c0:	83 c4 10             	add    esp,0x10
c001b4c3:	5b                   	pop    ebx
c001b4c4:	5e                   	pop    esi
c001b4c5:	5f                   	pop    edi
c001b4c6:	c3                   	ret    

c001b4c7 <Sys::wsbe(regs*)>:
c001b4c7:	57                   	push   edi
c001b4c8:	b9 0b 00 00 00       	mov    ecx,0xb
c001b4cd:	56                   	push   esi
c001b4ce:	be 48 bc 02 c0       	mov    esi,0xc002bc48
c001b4d3:	53                   	push   ebx
c001b4d4:	83 ec 30             	sub    esp,0x30
c001b4d7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b4db:	fc                   	cld    
c001b4dc:	83 ec 0c             	sub    esp,0xc
c001b4df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4e1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b4e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ed:	8b b0 26 19 00 00    	mov    esi,DWORD PTR [eax+0x1926]
c001b4f3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4f5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b4f8:	57                   	push   edi
c001b4f9:	e8 96 52 fe ff       	call   c0000794 <strlen>
c001b4fe:	5a                   	pop    edx
c001b4ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b503:	52                   	push   edx
c001b504:	31 d2                	xor    edx,edx
c001b506:	57                   	push   edi
c001b507:	52                   	push   edx
c001b508:	50                   	push   eax
c001b509:	56                   	push   esi
c001b50a:	ff d3                	call   ebx
c001b50c:	83 c4 14             	add    esp,0x14
c001b50f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b513:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b516:	e8 9f 31 00 00       	call   c001e6ba <terminateTask(int)>
c001b51b:	83 c4 40             	add    esp,0x40
c001b51e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b523:	5b                   	pop    ebx
c001b524:	31 d2                	xor    edx,edx
c001b526:	5e                   	pop    esi
c001b527:	5f                   	pop    edi
c001b528:	c3                   	ret    

c001b529 <Sys::yield(regs*)>:
c001b529:	57                   	push   edi
c001b52a:	56                   	push   esi
c001b52b:	53                   	push   ebx
c001b52c:	e8 46 27 00 00       	call   c001dc77 <lockScheduler()>
c001b531:	e8 7c 2a 00 00       	call   c001dfb2 <schedule()>
c001b536:	e8 3e 27 00 00       	call   c001dc79 <unlockScheduler()>
c001b53b:	8b 35 10 e9 02 c0    	mov    esi,DWORD PTR ds:0xc002e910
c001b541:	8b 3d 14 e9 02 c0    	mov    edi,DWORD PTR ds:0xc002e914
c001b547:	89 f0                	mov    eax,esi
c001b549:	89 fb                	mov    ebx,edi
c001b54b:	89 f1                	mov    ecx,esi
c001b54d:	c1 e0 07             	shl    eax,0x7
c001b550:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b554:	25 80 30 0f 00       	and    eax,0xf3080
c001b559:	c1 eb 17             	shr    ebx,0x17
c001b55c:	31 c8                	xor    eax,ecx
c001b55e:	89 da                	mov    edx,ebx
c001b560:	5b                   	pop    ebx
c001b561:	5e                   	pop    esi
c001b562:	5f                   	pop    edi
c001b563:	c3                   	ret    

c001b564 <sysCallSeekDir(regs*)>:
c001b564:	31 c0                	xor    eax,eax
c001b566:	31 d2                	xor    edx,edx
c001b568:	c3                   	ret    

c001b569 <sysCallTellDir(regs*)>:
c001b569:	31 c0                	xor    eax,eax
c001b56b:	31 d2                	xor    edx,edx
c001b56d:	c3                   	ret    

c001b56e <sysCallVerify(regs*)>:
c001b56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b572:	31 d2                	xor    edx,edx
c001b574:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b577:	c3                   	ret    

c001b578 <sysFormatDisk(regs*)>:
c001b578:	56                   	push   esi
c001b579:	53                   	push   ebx
c001b57a:	53                   	push   ebx
c001b57b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b57f:	8b 1d 10 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e410
c001b585:	eb 25                	jmp    c001b5ac <sysFormatDisk(regs*)+0x34>
c001b587:	83 ec 0c             	sub    esp,0xc
c001b58a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b58d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b58f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b592:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b595:	50                   	push   eax
c001b596:	ff 34 85 a0 e8 02 c0 	push   DWORD PTR [eax*4-0x3ffd1760]
c001b59d:	53                   	push   ebx
c001b59e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b5a1:	83 c4 20             	add    esp,0x20
c001b5a4:	83 f8 08             	cmp    eax,0x8
c001b5a7:	75 12                	jne    c001b5bb <sysFormatDisk(regs*)+0x43>
c001b5a9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b5ac:	85 db                	test   ebx,ebx
c001b5ae:	75 d7                	jne    c001b587 <sysFormatDisk(regs*)+0xf>
c001b5b0:	59                   	pop    ecx
c001b5b1:	b8 03 00 00 00       	mov    eax,0x3
c001b5b6:	31 d2                	xor    edx,edx
c001b5b8:	5b                   	pop    ebx
c001b5b9:	5e                   	pop    esi
c001b5ba:	c3                   	ret    
c001b5bb:	85 c0                	test   eax,eax
c001b5bd:	74 1b                	je     c001b5da <sysFormatDisk(regs*)+0x62>
c001b5bf:	83 f8 09             	cmp    eax,0x9
c001b5c2:	74 0b                	je     c001b5cf <sysFormatDisk(regs*)+0x57>
c001b5c4:	59                   	pop    ecx
c001b5c5:	b8 02 00 00 00       	mov    eax,0x2
c001b5ca:	31 d2                	xor    edx,edx
c001b5cc:	5b                   	pop    ebx
c001b5cd:	5e                   	pop    esi
c001b5ce:	c3                   	ret    
c001b5cf:	59                   	pop    ecx
c001b5d0:	b8 01 00 00 00       	mov    eax,0x1
c001b5d5:	31 d2                	xor    edx,edx
c001b5d7:	5b                   	pop    ebx
c001b5d8:	5e                   	pop    esi
c001b5d9:	c3                   	ret    
c001b5da:	59                   	pop    ecx
c001b5db:	31 c0                	xor    eax,eax
c001b5dd:	31 d2                	xor    edx,edx
c001b5df:	5b                   	pop    ebx
c001b5e0:	5e                   	pop    esi
c001b5e1:	c3                   	ret    

c001b5e2 <sysSetDiskVolumeLabel(regs*)>:
c001b5e2:	56                   	push   esi
c001b5e3:	53                   	push   ebx
c001b5e4:	53                   	push   ebx
c001b5e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b5e9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b5ec:	83 f8 19             	cmp    eax,0x19
c001b5ef:	77 29                	ja     c001b61a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5f1:	8b 0c 85 a0 e8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1760]
c001b5f8:	85 c9                	test   ecx,ecx
c001b5fa:	74 1e                	je     c001b61a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b5fc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b5ff:	85 d2                	test   edx,edx
c001b601:	74 17                	je     c001b61a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b603:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b609:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b60b:	52                   	push   edx
c001b60c:	50                   	push   eax
c001b60d:	51                   	push   ecx
c001b60e:	53                   	push   ebx
c001b60f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b612:	83 c4 10             	add    esp,0x10
c001b615:	99                   	cdq    
c001b616:	59                   	pop    ecx
c001b617:	5b                   	pop    ebx
c001b618:	5e                   	pop    esi
c001b619:	c3                   	ret    
c001b61a:	59                   	pop    ecx
c001b61b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b620:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b625:	5b                   	pop    ebx
c001b626:	5e                   	pop    esi
c001b627:	c3                   	ret    

c001b628 <sysGetDiskVolumeLabel(regs*)>:
c001b628:	57                   	push   edi
c001b629:	56                   	push   esi
c001b62a:	53                   	push   ebx
c001b62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b632:	83 fa 19             	cmp    edx,0x19
c001b635:	77 34                	ja     c001b66b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b637:	8b 0c 95 a0 e8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd1760]
c001b63e:	85 c9                	test   ecx,ecx
c001b640:	74 29                	je     c001b66b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b642:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b645:	85 db                	test   ebx,ebx
c001b647:	74 22                	je     c001b66b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b649:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b64c:	85 c0                	test   eax,eax
c001b64e:	74 1b                	je     c001b66b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b650:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b656:	83 ec 0c             	sub    esp,0xc
c001b659:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b65b:	50                   	push   eax
c001b65c:	53                   	push   ebx
c001b65d:	52                   	push   edx
c001b65e:	51                   	push   ecx
c001b65f:	56                   	push   esi
c001b660:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b663:	83 c4 20             	add    esp,0x20
c001b666:	99                   	cdq    
c001b667:	5b                   	pop    ebx
c001b668:	5e                   	pop    esi
c001b669:	5f                   	pop    edi
c001b66a:	c3                   	ret    
c001b66b:	5b                   	pop    ebx
c001b66c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b671:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b676:	5e                   	pop    esi
c001b677:	5f                   	pop    edi
c001b678:	c3                   	ret    

c001b679 <sysShutdown(regs*)>:
c001b679:	83 ec 0c             	sub    esp,0xc
c001b67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b680:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b683:	85 c0                	test   eax,eax
c001b685:	74 18                	je     c001b69f <sysShutdown(regs*)+0x26>
c001b687:	83 f8 01             	cmp    eax,0x1
c001b68a:	74 38                	je     c001b6c4 <sysShutdown(regs*)+0x4b>
c001b68c:	83 f8 02             	cmp    eax,0x2
c001b68f:	74 24                	je     c001b6b5 <sysShutdown(regs*)+0x3c>
c001b691:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b696:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b69b:	83 c4 0c             	add    esp,0xc
c001b69e:	c3                   	ret    
c001b69f:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001b6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6a6:	6a 00                	push   0x0
c001b6a8:	6a 00                	push   0x0
c001b6aa:	6a 00                	push   0x0
c001b6ac:	50                   	push   eax
c001b6ad:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6b0:	83 c4 10             	add    esp,0x10
c001b6b3:	eb dc                	jmp    c001b691 <sysShutdown(regs*)+0x18>
c001b6b5:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001b6ba:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6bc:	6a 00                	push   0x0
c001b6be:	6a 00                	push   0x0
c001b6c0:	6a 01                	push   0x1
c001b6c2:	eb e8                	jmp    c001b6ac <sysShutdown(regs*)+0x33>
c001b6c4:	a1 40 09 03 c0       	mov    eax,ds:0xc0030940
c001b6c9:	85 c0                	test   eax,eax
c001b6cb:	74 02                	je     c001b6cf <sysShutdown(regs*)+0x56>
c001b6cd:	ff d0                	call   eax
c001b6cf:	31 c0                	xor    eax,eax
c001b6d1:	31 d2                	xor    edx,edx
c001b6d3:	83 c4 0c             	add    esp,0xc
c001b6d6:	c3                   	ret    

c001b6d7 <sysCallRealpath(regs*)>:
c001b6d7:	83 ec 0c             	sub    esp,0xc
c001b6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6de:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b6e1:	85 d2                	test   edx,edx
c001b6e3:	74 07                	je     c001b6ec <sysCallRealpath(regs*)+0x15>
c001b6e5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b6e8:	85 c0                	test   eax,eax
c001b6ea:	75 0b                	jne    c001b6f7 <sysCallRealpath(regs*)+0x20>
c001b6ec:	b8 01 00 00 00       	mov    eax,0x1
c001b6f1:	31 d2                	xor    edx,edx
c001b6f3:	83 c4 0c             	add    esp,0xc
c001b6f6:	c3                   	ret    
c001b6f7:	51                   	push   ecx
c001b6f8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b6fe:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b701:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b707:	51                   	push   ecx
c001b708:	52                   	push   edx
c001b709:	50                   	push   eax
c001b70a:	e8 73 7a ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b70f:	83 c4 10             	add    esp,0x10
c001b712:	31 c0                	xor    eax,eax
c001b714:	31 d2                	xor    edx,edx
c001b716:	83 c4 0c             	add    esp,0xc
c001b719:	c3                   	ret    

c001b71a <sysCallGetArgc(regs*)>:
c001b71a:	83 ec 14             	sub    esp,0x14
c001b71d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b722:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b725:	ff b0 36 19 00 00    	push   DWORD PTR [eax+0x1936]
c001b72b:	68 74 bc 02 c0       	push   0xc002bc74
c001b730:	e8 9f 76 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b735:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b73a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b73d:	8b 80 36 19 00 00    	mov    eax,DWORD PTR [eax+0x1936]
c001b743:	83 c4 1c             	add    esp,0x1c
c001b746:	99                   	cdq    
c001b747:	c3                   	ret    

c001b748 <sysCallReadDir(regs*)>:
c001b748:	53                   	push   ebx
c001b749:	83 ec 18             	sub    esp,0x18
c001b74c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b750:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b753:	83 f8 02             	cmp    eax,0x2
c001b756:	76 53                	jbe    c001b7ab <sysCallReadDir(regs*)+0x63>
c001b758:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b75b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b761:	77 4f                	ja     c001b7b2 <sysCallReadDir(regs*)+0x6a>
c001b763:	83 ec 0c             	sub    esp,0xc
c001b766:	50                   	push   eax
c001b767:	e8 b5 62 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b76c:	83 c4 10             	add    esp,0x10
c001b76f:	85 c0                	test   eax,eax
c001b771:	74 50                	je     c001b7c3 <sysCallReadDir(regs*)+0x7b>
c001b773:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b77b:	83 ec 0c             	sub    esp,0xc
c001b77e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b780:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b784:	51                   	push   ecx
c001b785:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b788:	6a 00                	push   0x0
c001b78a:	68 10 01 00 00       	push   0x110
c001b78f:	50                   	push   eax
c001b790:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b793:	83 c4 20             	add    esp,0x20
c001b796:	85 c0                	test   eax,eax
c001b798:	74 38                	je     c001b7d2 <sysCallReadDir(regs*)+0x8a>
c001b79a:	83 f8 07             	cmp    eax,0x7
c001b79d:	74 0c                	je     c001b7ab <sysCallReadDir(regs*)+0x63>
c001b79f:	b8 02 00 00 00       	mov    eax,0x2
c001b7a4:	31 d2                	xor    edx,edx
c001b7a6:	83 c4 18             	add    esp,0x18
c001b7a9:	5b                   	pop    ebx
c001b7aa:	c3                   	ret    
c001b7ab:	b8 01 00 00 00       	mov    eax,0x1
c001b7b0:	eb f2                	jmp    c001b7a4 <sysCallReadDir(regs*)+0x5c>
c001b7b2:	83 ec 08             	sub    esp,0x8
c001b7b5:	52                   	push   edx
c001b7b6:	68 8c bd 02 c0       	push   0xc002bd8c
c001b7bb:	e8 14 76 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b7c0:	83 c4 10             	add    esp,0x10
c001b7c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b7c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b7cd:	83 c4 18             	add    esp,0x18
c001b7d0:	5b                   	pop    ebx
c001b7d1:	c3                   	ret    
c001b7d2:	31 c0                	xor    eax,eax
c001b7d4:	eb ce                	jmp    c001b7a4 <sysCallReadDir(regs*)+0x5c>

c001b7d6 <sysCallIsATTY(regs*)>:
c001b7d6:	83 ec 0c             	sub    esp,0xc
c001b7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7e0:	83 f8 02             	cmp    eax,0x2
c001b7e3:	76 07                	jbe    c001b7ec <sysCallIsATTY(regs*)+0x16>
c001b7e5:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b7ea:	75 26                	jne    c001b812 <sysCallIsATTY(regs*)+0x3c>
c001b7ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7f1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7f4:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001b7fa:	85 c0                	test   eax,eax
c001b7fc:	74 24                	je     c001b822 <sysCallIsATTY(regs*)+0x4c>
c001b7fe:	83 ec 0c             	sub    esp,0xc
c001b801:	8b 10                	mov    edx,DWORD PTR [eax]
c001b803:	50                   	push   eax
c001b804:	ff 12                	call   DWORD PTR [edx]
c001b806:	31 d2                	xor    edx,edx
c001b808:	0f b6 c0             	movzx  eax,al
c001b80b:	83 c4 10             	add    esp,0x10
c001b80e:	83 c4 0c             	add    esp,0xc
c001b811:	c3                   	ret    
c001b812:	83 ec 0c             	sub    esp,0xc
c001b815:	50                   	push   eax
c001b816:	e8 06 62 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b81b:	83 c4 10             	add    esp,0x10
c001b81e:	85 c0                	test   eax,eax
c001b820:	75 dc                	jne    c001b7fe <sysCallIsATTY(regs*)+0x28>
c001b822:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b827:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b82c:	83 c4 0c             	add    esp,0xc
c001b82f:	c3                   	ret    

c001b830 <sysCallSeek(regs*)>:
c001b830:	53                   	push   ebx
c001b831:	83 ec 08             	sub    esp,0x8
c001b834:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b838:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b83b:	83 f8 02             	cmp    eax,0x2
c001b83e:	76 4a                	jbe    c001b88a <sysCallSeek(regs*)+0x5a>
c001b840:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b845:	77 32                	ja     c001b879 <sysCallSeek(regs*)+0x49>
c001b847:	83 ec 0c             	sub    esp,0xc
c001b84a:	50                   	push   eax
c001b84b:	e8 d1 61 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b850:	83 c4 0c             	add    esp,0xc
c001b853:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b856:	31 db                	xor    ebx,ebx
c001b858:	53                   	push   ebx
c001b859:	51                   	push   ecx
c001b85a:	50                   	push   eax
c001b85b:	e8 ee 7b ff ff       	call   c001344e <File::seek(unsigned long long)>
c001b860:	83 c4 10             	add    esp,0x10
c001b863:	85 c0                	test   eax,eax
c001b865:	0f 95 c0             	setne  al
c001b868:	31 d2                	xor    edx,edx
c001b86a:	0f b6 c0             	movzx  eax,al
c001b86d:	f7 d8                	neg    eax
c001b86f:	83 d2 00             	adc    edx,0x0
c001b872:	83 c4 08             	add    esp,0x8
c001b875:	f7 da                	neg    edx
c001b877:	5b                   	pop    ebx
c001b878:	c3                   	ret    
c001b879:	83 ec 08             	sub    esp,0x8
c001b87c:	50                   	push   eax
c001b87d:	68 7f bc 02 c0       	push   0xc002bc7f
c001b882:	e8 4d 75 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b887:	83 c4 10             	add    esp,0x10
c001b88a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b88f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b894:	83 c4 08             	add    esp,0x8
c001b897:	5b                   	pop    ebx
c001b898:	c3                   	ret    

c001b899 <sysCallTell(regs*)>:
c001b899:	53                   	push   ebx
c001b89a:	83 ec 08             	sub    esp,0x8
c001b89d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8a1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8a4:	83 f8 02             	cmp    eax,0x2
c001b8a7:	76 5e                	jbe    c001b907 <sysCallTell(regs*)+0x6e>
c001b8a9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8ae:	77 2d                	ja     c001b8dd <sysCallTell(regs*)+0x44>
c001b8b0:	83 ec 0c             	sub    esp,0xc
c001b8b3:	50                   	push   eax
c001b8b4:	e8 68 61 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b8b9:	5a                   	pop    edx
c001b8ba:	59                   	pop    ecx
c001b8bb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b8be:	50                   	push   eax
c001b8bf:	e8 e0 7b ff ff       	call   c00134a4 <File::tell(unsigned long long*)>
c001b8c4:	83 c4 10             	add    esp,0x10
c001b8c7:	85 c0                	test   eax,eax
c001b8c9:	0f 95 c0             	setne  al
c001b8cc:	31 d2                	xor    edx,edx
c001b8ce:	0f b6 c0             	movzx  eax,al
c001b8d1:	f7 d8                	neg    eax
c001b8d3:	83 d2 00             	adc    edx,0x0
c001b8d6:	83 c4 08             	add    esp,0x8
c001b8d9:	f7 da                	neg    edx
c001b8db:	5b                   	pop    ebx
c001b8dc:	c3                   	ret    
c001b8dd:	83 ec 08             	sub    esp,0x8
c001b8e0:	50                   	push   eax
c001b8e1:	68 99 bc 02 c0       	push   0xc002bc99
c001b8e6:	e8 e9 74 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b8eb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b8f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b8fe:	31 d2                	xor    edx,edx
c001b900:	31 c0                	xor    eax,eax
c001b902:	83 c4 08             	add    esp,0x8
c001b905:	5b                   	pop    ebx
c001b906:	c3                   	ret    
c001b907:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b90c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b911:	83 c4 08             	add    esp,0x8
c001b914:	5b                   	pop    ebx
c001b915:	c3                   	ret    

c001b916 <sysCallSize(regs*)>:
c001b916:	53                   	push   ebx
c001b917:	83 ec 18             	sub    esp,0x18
c001b91a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b91e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b921:	83 f8 02             	cmp    eax,0x2
c001b924:	76 64                	jbe    c001b98a <sysCallSize(regs*)+0x74>
c001b926:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b92b:	77 33                	ja     c001b960 <sysCallSize(regs*)+0x4a>
c001b92d:	83 ec 0c             	sub    esp,0xc
c001b930:	50                   	push   eax
c001b931:	e8 eb 60 ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001b936:	83 c4 0c             	add    esp,0xc
c001b939:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b93d:	52                   	push   edx
c001b93e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b941:	50                   	push   eax
c001b942:	e8 f5 7c ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	85 c0                	test   eax,eax
c001b94c:	0f 95 c0             	setne  al
c001b94f:	31 d2                	xor    edx,edx
c001b951:	0f b6 c0             	movzx  eax,al
c001b954:	f7 d8                	neg    eax
c001b956:	83 d2 00             	adc    edx,0x0
c001b959:	83 c4 18             	add    esp,0x18
c001b95c:	f7 da                	neg    edx
c001b95e:	5b                   	pop    ebx
c001b95f:	c3                   	ret    
c001b960:	83 ec 08             	sub    esp,0x8
c001b963:	50                   	push   eax
c001b964:	68 b3 bc 02 c0       	push   0xc002bcb3
c001b969:	e8 66 74 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001b96e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b971:	83 c4 10             	add    esp,0x10
c001b974:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b97a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b981:	31 d2                	xor    edx,edx
c001b983:	31 c0                	xor    eax,eax
c001b985:	83 c4 18             	add    esp,0x18
c001b988:	5b                   	pop    ebx
c001b989:	c3                   	ret    
c001b98a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b98f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b994:	83 c4 18             	add    esp,0x18
c001b997:	5b                   	pop    ebx
c001b998:	c3                   	ret    

c001b999 <sysCallSizeFromFilename(regs*)>:
c001b999:	57                   	push   edi
c001b99a:	56                   	push   esi
c001b99b:	53                   	push   ebx
c001b99c:	83 ec 20             	sub    esp,0x20
c001b99f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b9a3:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b9a6:	83 fb 02             	cmp    ebx,0x2
c001b9a9:	0f 86 99 00 00 00    	jbe    c001ba48 <sysCallSizeFromFilename(regs*)+0xaf>
c001b9af:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b9b5:	77 65                	ja     c001ba1c <sysCallSizeFromFilename(regs*)+0x83>
c001b9b7:	83 ec 0c             	sub    esp,0xc
c001b9ba:	68 14 01 00 00       	push   0x114
c001b9bf:	e8 7c 3e ff ff       	call   c000f840 <malloc>
c001b9c4:	83 c4 0c             	add    esp,0xc
c001b9c7:	89 c6                	mov    esi,eax
c001b9c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9d1:	53                   	push   ebx
c001b9d2:	56                   	push   esi
c001b9d3:	e8 54 79 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001b9d8:	83 c4 0c             	add    esp,0xc
c001b9db:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b9df:	50                   	push   eax
c001b9e0:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b9e3:	56                   	push   esi
c001b9e4:	e8 53 7c ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001b9e9:	83 c4 10             	add    esp,0x10
c001b9ec:	85 f6                	test   esi,esi
c001b9ee:	74 14                	je     c001ba04 <sysCallSizeFromFilename(regs*)+0x6b>
c001b9f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9f4:	8b 16                	mov    edx,DWORD PTR [esi]
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	56                   	push   esi
c001b9fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba04:	85 c0                	test   eax,eax
c001ba06:	0f 95 c0             	setne  al
c001ba09:	31 d2                	xor    edx,edx
c001ba0b:	0f b6 c0             	movzx  eax,al
c001ba0e:	f7 d8                	neg    eax
c001ba10:	83 d2 00             	adc    edx,0x0
c001ba13:	83 c4 20             	add    esp,0x20
c001ba16:	f7 da                	neg    edx
c001ba18:	5b                   	pop    ebx
c001ba19:	5e                   	pop    esi
c001ba1a:	5f                   	pop    edi
c001ba1b:	c3                   	ret    
c001ba1c:	83 ec 08             	sub    esp,0x8
c001ba1f:	53                   	push   ebx
c001ba20:	68 b3 bc 02 c0       	push   0xc002bcb3
c001ba25:	e8 aa 73 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ba2a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001ba2d:	83 c4 10             	add    esp,0x10
c001ba30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba3d:	31 d2                	xor    edx,edx
c001ba3f:	83 c4 20             	add    esp,0x20
c001ba42:	31 c0                	xor    eax,eax
c001ba44:	5b                   	pop    ebx
c001ba45:	5e                   	pop    esi
c001ba46:	5f                   	pop    edi
c001ba47:	c3                   	ret    
c001ba48:	83 c4 20             	add    esp,0x20
c001ba4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba50:	5b                   	pop    ebx
c001ba51:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba56:	5e                   	pop    esi
c001ba57:	5f                   	pop    edi
c001ba58:	c3                   	ret    

c001ba59 <sysCallClose(regs*)>:
c001ba59:	53                   	push   ebx
c001ba5a:	83 ec 08             	sub    esp,0x8
c001ba5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba61:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba64:	83 f8 02             	cmp    eax,0x2
c001ba67:	76 50                	jbe    c001bab9 <sysCallClose(regs*)+0x60>
c001ba69:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba6e:	74 58                	je     c001bac8 <sysCallClose(regs*)+0x6f>
c001ba70:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba75:	74 60                	je     c001bad7 <sysCallClose(regs*)+0x7e>
c001ba77:	77 2f                	ja     c001baa8 <sysCallClose(regs*)+0x4f>
c001ba79:	83 ec 0c             	sub    esp,0xc
c001ba7c:	50                   	push   eax
c001ba7d:	e8 9f 5f ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001ba82:	89 c3                	mov    ebx,eax
c001ba84:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba87:	e8 62 79 ff ff       	call   c00133ee <File::close()>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	85 db                	test   ebx,ebx
c001ba91:	74 0c                	je     c001ba9f <sysCallClose(regs*)+0x46>
c001ba93:	83 ec 0c             	sub    esp,0xc
c001ba96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ba98:	53                   	push   ebx
c001ba99:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ba9c:	83 c4 10             	add    esp,0x10
c001ba9f:	31 c0                	xor    eax,eax
c001baa1:	31 d2                	xor    edx,edx
c001baa3:	83 c4 08             	add    esp,0x8
c001baa6:	5b                   	pop    ebx
c001baa7:	c3                   	ret    
c001baa8:	83 ec 08             	sub    esp,0x8
c001baab:	50                   	push   eax
c001baac:	68 b0 bd 02 c0       	push   0xc002bdb0
c001bab1:	e8 1e 73 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001babe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bac3:	83 c4 08             	add    esp,0x8
c001bac6:	5b                   	pop    ebx
c001bac7:	c3                   	ret    
c001bac8:	83 ec 0c             	sub    esp,0xc
c001bacb:	68 ce bc 02 c0       	push   0xc002bcce
c001bad0:	e8 ff 72 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bad5:	eb c5                	jmp    c001ba9c <sysCallClose(regs*)+0x43>
c001bad7:	83 ec 0c             	sub    esp,0xc
c001bada:	68 dc bc 02 c0       	push   0xc002bcdc
c001badf:	eb ef                	jmp    c001bad0 <sysCallClose(regs*)+0x77>

c001bae1 <sysCallOpenDir(regs*)>:
c001bae1:	56                   	push   esi
c001bae2:	53                   	push   ebx
c001bae3:	53                   	push   ebx
c001bae4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bae8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001baeb:	85 f6                	test   esi,esi
c001baed:	74 59                	je     c001bb48 <sysCallOpenDir(regs*)+0x67>
c001baef:	83 ec 0c             	sub    esp,0xc
c001baf2:	68 14 01 00 00       	push   0x114
c001baf7:	e8 44 3d ff ff       	call   c000f840 <malloc>
c001bafc:	83 c4 0c             	add    esp,0xc
c001baff:	89 c6                	mov    esi,eax
c001bb01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb06:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb09:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb0c:	56                   	push   esi
c001bb0d:	e8 c6 7c ff ff       	call   c00137d8 <Directory::Directory(char const*, Process*)>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	85 f6                	test   esi,esi
c001bb17:	74 2f                	je     c001bb48 <sysCallOpenDir(regs*)+0x67>
c001bb19:	83 ec 0c             	sub    esp,0xc
c001bb1c:	56                   	push   esi
c001bb1d:	e8 1a 7d ff ff       	call   c001383c <Directory::open()>
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	85 c0                	test   eax,eax
c001bb27:	75 1f                	jne    c001bb48 <sysCallOpenDir(regs*)+0x67>
c001bb29:	83 ec 0c             	sub    esp,0xc
c001bb2c:	56                   	push   esi
c001bb2d:	e8 fa 5b ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001bb32:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bb35:	83 c4 10             	add    esp,0x10
c001bb38:	89 02                	mov    DWORD PTR [edx],eax
c001bb3a:	c1 f8 1f             	sar    eax,0x1f
c001bb3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bb40:	31 c0                	xor    eax,eax
c001bb42:	59                   	pop    ecx
c001bb43:	31 d2                	xor    edx,edx
c001bb45:	5b                   	pop    ebx
c001bb46:	5e                   	pop    esi
c001bb47:	c3                   	ret    
c001bb48:	59                   	pop    ecx
c001bb49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb53:	5b                   	pop    ebx
c001bb54:	5e                   	pop    esi
c001bb55:	c3                   	ret    

c001bb56 <sysCallCloseDir(regs*)>:
c001bb56:	53                   	push   ebx
c001bb57:	83 ec 08             	sub    esp,0x8
c001bb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb61:	83 f8 02             	cmp    eax,0x2
c001bb64:	76 47                	jbe    c001bbad <sysCallCloseDir(regs*)+0x57>
c001bb66:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb6b:	77 2f                	ja     c001bb9c <sysCallCloseDir(regs*)+0x46>
c001bb6d:	83 ec 0c             	sub    esp,0xc
c001bb70:	50                   	push   eax
c001bb71:	e8 ab 5e ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001bb76:	89 c3                	mov    ebx,eax
c001bb78:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb7b:	e8 18 7d ff ff       	call   c0013898 <Directory::close()>
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	85 db                	test   ebx,ebx
c001bb85:	74 0c                	je     c001bb93 <sysCallCloseDir(regs*)+0x3d>
c001bb87:	83 ec 0c             	sub    esp,0xc
c001bb8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb8c:	53                   	push   ebx
c001bb8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	31 c0                	xor    eax,eax
c001bb95:	31 d2                	xor    edx,edx
c001bb97:	83 c4 08             	add    esp,0x8
c001bb9a:	5b                   	pop    ebx
c001bb9b:	c3                   	ret    
c001bb9c:	83 ec 08             	sub    esp,0x8
c001bb9f:	50                   	push   eax
c001bba0:	68 d8 bd 02 c0       	push   0xc002bdd8
c001bba5:	e8 2a 72 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bbaa:	83 c4 10             	add    esp,0x10
c001bbad:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb7:	83 c4 08             	add    esp,0x8
c001bbba:	5b                   	pop    ebx
c001bbbb:	c3                   	ret    

c001bbbc <sysCallMakeDir(regs*)>:
c001bbbc:	56                   	push   esi
c001bbbd:	53                   	push   ebx
c001bbbe:	83 ec 10             	sub    esp,0x10
c001bbc1:	68 14 01 00 00       	push   0x114
c001bbc6:	e8 75 3c ff ff       	call   c000f840 <malloc>
c001bbcb:	83 c4 0c             	add    esp,0xc
c001bbce:	89 c3                	mov    ebx,eax
c001bbd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbdc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbdf:	53                   	push   ebx
c001bbe0:	e8 f3 7b ff ff       	call   c00137d8 <Directory::Directory(char const*, Process*)>
c001bbe5:	83 c4 10             	add    esp,0x10
c001bbe8:	85 db                	test   ebx,ebx
c001bbea:	74 32                	je     c001bc1e <sysCallMakeDir(regs*)+0x62>
c001bbec:	83 ec 0c             	sub    esp,0xc
c001bbef:	53                   	push   ebx
c001bbf0:	e8 27 7e ff ff       	call   c0013a1c <Directory::create()>
c001bbf5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbf8:	89 c6                	mov    esi,eax
c001bbfa:	e8 99 7c ff ff       	call   c0013898 <Directory::close()>
c001bbff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	31 c0                	xor    eax,eax
c001bc0c:	59                   	pop    ecx
c001bc0d:	85 f6                	test   esi,esi
c001bc0f:	5b                   	pop    ebx
c001bc10:	0f 95 c0             	setne  al
c001bc13:	5e                   	pop    esi
c001bc14:	31 d2                	xor    edx,edx
c001bc16:	f7 d8                	neg    eax
c001bc18:	83 d2 00             	adc    edx,0x0
c001bc1b:	f7 da                	neg    edx
c001bc1d:	c3                   	ret    
c001bc1e:	59                   	pop    ecx
c001bc1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc24:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc29:	5b                   	pop    ebx
c001bc2a:	5e                   	pop    esi
c001bc2b:	c3                   	ret    

c001bc2c <sysCallWait(regs*)>:
c001bc2c:	83 ec 10             	sub    esp,0x10
c001bc2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc33:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bc36:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc39:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bc3c:	e8 ec 24 00 00       	call   c001e12d <waitTask(int, int*, int)>
c001bc41:	83 c4 1c             	add    esp,0x1c
c001bc44:	99                   	cdq    
c001bc45:	c3                   	ret    

c001bc46 <sysCallNotImpl(regs*)>:
c001bc46:	83 ec 18             	sub    esp,0x18
c001bc49:	68 ea bc 02 c0       	push   0xc002bcea
c001bc4e:	e8 2a e8 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001bc53:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc58:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc5d:	83 c4 1c             	add    esp,0x1c
c001bc60:	c3                   	ret    

c001bc61 <sysPanic(regs*)>:
c001bc61:	83 ec 18             	sub    esp,0x18
c001bc64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc68:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc6b:	e8 0d e8 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001bc70:	c7 04 24 04 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd04
c001bc77:	e8 01 e8 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001bc7c:	b8 01 00 00 00       	mov    eax,0x1
c001bc81:	31 d2                	xor    edx,edx
c001bc83:	83 c4 1c             	add    esp,0x1c
c001bc86:	c3                   	ret    

c001bc87 <sysCallRmdir(regs*)>:
c001bc87:	56                   	push   esi
c001bc88:	53                   	push   ebx
c001bc89:	83 ec 20             	sub    esp,0x20
c001bc8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bc90:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bc93:	68 14 01 00 00       	push   0x114
c001bc98:	e8 a3 3b ff ff       	call   c000f840 <malloc>
c001bc9d:	83 c4 0c             	add    esp,0xc
c001bca0:	89 c3                	mov    ebx,eax
c001bca2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcaa:	56                   	push   esi
c001bcab:	53                   	push   ebx
c001bcac:	e8 7b 76 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001bcb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcb4:	e8 4f 78 ff ff       	call   c0013508 <File::unlink()>
c001bcb9:	83 c4 10             	add    esp,0x10
c001bcbc:	85 db                	test   ebx,ebx
c001bcbe:	74 14                	je     c001bcd4 <sysCallRmdir(regs*)+0x4d>
c001bcc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcc4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bcc6:	83 ec 0c             	sub    esp,0xc
c001bcc9:	53                   	push   ebx
c001bcca:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bccd:	83 c4 10             	add    esp,0x10
c001bcd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bcd4:	85 c0                	test   eax,eax
c001bcd6:	0f 95 c0             	setne  al
c001bcd9:	31 d2                	xor    edx,edx
c001bcdb:	0f b6 c0             	movzx  eax,al
c001bcde:	f7 d8                	neg    eax
c001bce0:	83 d2 00             	adc    edx,0x0
c001bce3:	83 c4 14             	add    esp,0x14
c001bce6:	f7 da                	neg    edx
c001bce8:	5b                   	pop    ebx
c001bce9:	5e                   	pop    esi
c001bcea:	c3                   	ret    

c001bceb <sysCallUnlink(regs*)>:
c001bceb:	56                   	push   esi
c001bcec:	53                   	push   ebx
c001bced:	83 ec 20             	sub    esp,0x20
c001bcf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bcf4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bcf7:	68 14 01 00 00       	push   0x114
c001bcfc:	e8 3f 3b ff ff       	call   c000f840 <malloc>
c001bd01:	83 c4 0c             	add    esp,0xc
c001bd04:	89 c3                	mov    ebx,eax
c001bd06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	e8 17 76 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001bd15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd18:	e8 eb 77 ff ff       	call   c0013508 <File::unlink()>
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	85 db                	test   ebx,ebx
c001bd22:	74 14                	je     c001bd38 <sysCallUnlink(regs*)+0x4d>
c001bd24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd28:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd2a:	83 ec 0c             	sub    esp,0xc
c001bd2d:	53                   	push   ebx
c001bd2e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd38:	85 c0                	test   eax,eax
c001bd3a:	0f 95 c0             	setne  al
c001bd3d:	31 d2                	xor    edx,edx
c001bd3f:	0f b6 c0             	movzx  eax,al
c001bd42:	f7 d8                	neg    eax
c001bd44:	83 d2 00             	adc    edx,0x0
c001bd47:	83 c4 14             	add    esp,0x14
c001bd4a:	f7 da                	neg    edx
c001bd4c:	5b                   	pop    ebx
c001bd4d:	5e                   	pop    esi
c001bd4e:	c3                   	ret    

c001bd4f <sysCallGetArgv(regs*)>:
c001bd4f:	83 ec 0c             	sub    esp,0xc
c001bd52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bd56:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bd59:	85 c0                	test   eax,eax
c001bd5b:	78 2b                	js     c001bd88 <sysCallGetArgv(regs*)+0x39>
c001bd5d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd63:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bd66:	3b 81 36 19 00 00    	cmp    eax,DWORD PTR [ecx+0x1936]
c001bd6c:	7d 1a                	jge    c001bd88 <sysCallGetArgv(regs*)+0x39>
c001bd6e:	8b 84 81 3a 19 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x193a]
c001bd75:	85 c0                	test   eax,eax
c001bd77:	74 17                	je     c001bd90 <sysCallGetArgv(regs*)+0x41>
c001bd79:	83 ec 08             	sub    esp,0x8
c001bd7c:	50                   	push   eax
c001bd7d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bd80:	e8 af 4a fe ff       	call   c0000834 <strcpy>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	31 c0                	xor    eax,eax
c001bd8a:	31 d2                	xor    edx,edx
c001bd8c:	83 c4 0c             	add    esp,0xc
c001bd8f:	c3                   	ret    
c001bd90:	b8 01 00 00 00       	mov    eax,0x1
c001bd95:	31 d2                	xor    edx,edx
c001bd97:	83 c4 0c             	add    esp,0xc
c001bd9a:	c3                   	ret    

c001bd9b <sysCallTTYName(regs*)>:
c001bd9b:	56                   	push   esi
c001bd9c:	53                   	push   ebx
c001bd9d:	53                   	push   ebx
c001bd9e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bda2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bda5:	85 c0                	test   eax,eax
c001bda7:	74 5f                	je     c001be08 <sysCallTTYName(regs*)+0x6d>
c001bda9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bdac:	83 f8 02             	cmp    eax,0x2
c001bdaf:	77 3e                	ja     c001bdef <sysCallTTYName(regs*)+0x54>
c001bdb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdb9:	8b 98 26 19 00 00    	mov    ebx,DWORD PTR [eax+0x1926]
c001bdbf:	85 db                	test   ebx,ebx
c001bdc1:	74 45                	je     c001be08 <sysCallTTYName(regs*)+0x6d>
c001bdc3:	83 ec 0c             	sub    esp,0xc
c001bdc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc8:	53                   	push   ebx
c001bdc9:	ff 10                	call   DWORD PTR [eax]
c001bdcb:	83 c4 10             	add    esp,0x10
c001bdce:	84 c0                	test   al,al
c001bdd0:	74 41                	je     c001be13 <sysCallTTYName(regs*)+0x78>
c001bdd2:	83 ec 08             	sub    esp,0x8
c001bdd5:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bddb:	53                   	push   ebx
c001bddc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bddf:	e8 50 4a fe ff       	call   c0000834 <strcpy>
c001bde4:	83 c4 10             	add    esp,0x10
c001bde7:	31 c0                	xor    eax,eax
c001bde9:	59                   	pop    ecx
c001bdea:	31 d2                	xor    edx,edx
c001bdec:	5b                   	pop    ebx
c001bded:	5e                   	pop    esi
c001bdee:	c3                   	ret    
c001bdef:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bdf4:	74 bb                	je     c001bdb1 <sysCallTTYName(regs*)+0x16>
c001bdf6:	83 ec 0c             	sub    esp,0xc
c001bdf9:	50                   	push   eax
c001bdfa:	e8 22 5c ff ff       	call   c0011a21 <getFromFileDescriptor(int)>
c001bdff:	83 c4 10             	add    esp,0x10
c001be02:	89 c3                	mov    ebx,eax
c001be04:	85 db                	test   ebx,ebx
c001be06:	75 bb                	jne    c001bdc3 <sysCallTTYName(regs*)+0x28>
c001be08:	59                   	pop    ecx
c001be09:	b8 01 00 00 00       	mov    eax,0x1
c001be0e:	31 d2                	xor    edx,edx
c001be10:	5b                   	pop    ebx
c001be11:	5e                   	pop    esi
c001be12:	c3                   	ret    
c001be13:	59                   	pop    ecx
c001be14:	b8 02 00 00 00       	mov    eax,0x2
c001be19:	31 d2                	xor    edx,edx
c001be1b:	5b                   	pop    ebx
c001be1c:	5e                   	pop    esi
c001be1d:	c3                   	ret    

c001be1e <sysCallUSleep(regs*)>:
c001be1e:	83 ec 14             	sub    esp,0x14
c001be21:	b8 e8 03 00 00       	mov    eax,0x3e8
c001be26:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be2a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001be31:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001be34:	01 ca                	add    edx,ecx
c001be36:	52                   	push   edx
c001be37:	50                   	push   eax
c001be38:	e8 89 23 00 00       	call   c001e1c6 <nanoSleep(unsigned long long)>
c001be3d:	31 c0                	xor    eax,eax
c001be3f:	31 d2                	xor    edx,edx
c001be41:	83 c4 1c             	add    esp,0x1c
c001be44:	c3                   	ret    

c001be45 <sysCallSpawn(regs*)>:
c001be45:	56                   	push   esi
c001be46:	53                   	push   ebx
c001be47:	53                   	push   ebx
c001be48:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be4c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001be4f:	85 f6                	test   esi,esi
c001be51:	75 08                	jne    c001be5b <sysCallSpawn(regs*)+0x16>
c001be53:	59                   	pop    ecx
c001be54:	31 c0                	xor    eax,eax
c001be56:	31 d2                	xor    edx,edx
c001be58:	5b                   	pop    ebx
c001be59:	5e                   	pop    esi
c001be5a:	c3                   	ret    
c001be5b:	83 ec 0c             	sub    esp,0xc
c001be5e:	68 3f 1b 00 00       	push   0x1b3f
c001be63:	e8 d8 39 ff ff       	call   c000f840 <malloc>
c001be68:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be6b:	89 c6                	mov    esi,eax
c001be6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be72:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be78:	56                   	push   esi
c001be79:	e8 44 1a 00 00       	call   c001d8c2 <Process::Process(char const*, Process*, char**)>
c001be7e:	83 c4 20             	add    esp,0x20
c001be81:	80 be 3e 1b 00 00 00 	cmp    BYTE PTR [esi+0x1b3e],0x0
c001be88:	75 c9                	jne    c001be53 <sysCallSpawn(regs*)+0xe>
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	56                   	push   esi
c001be8e:	e8 f9 1f 00 00       	call   c001de8c <Process::createUserThread()>
c001be93:	8b 06                	mov    eax,DWORD PTR [esi]
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	99                   	cdq    
c001be99:	59                   	pop    ecx
c001be9a:	5b                   	pop    ebx
c001be9b:	5e                   	pop    esi
c001be9c:	c3                   	ret    

c001be9d <sysCallGetEnv(regs*)>:
c001be9d:	55                   	push   ebp
c001be9e:	57                   	push   edi
c001be9f:	56                   	push   esi
c001bea0:	53                   	push   ebx
c001bea1:	83 ec 28             	sub    esp,0x28
c001bea4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bea8:	68 13 bd 02 c0       	push   0xc002bd13
c001bead:	e8 22 6f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001beb2:	5f                   	pop    edi
c001beb3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001beb6:	5d                   	pop    ebp
c001beb7:	53                   	push   ebx
c001beb8:	68 59 c0 02 c0       	push   0xc002c059
c001bebd:	e8 12 6f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bec2:	58                   	pop    eax
c001bec3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bec6:	5a                   	pop    edx
c001bec7:	57                   	push   edi
c001bec8:	68 1c bd 02 c0       	push   0xc002bd1c
c001becd:	e8 02 6f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bed2:	59                   	pop    ecx
c001bed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bed8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bedb:	e8 b9 e4 ff ff       	call   c001a399 <Krnl::getProcessTotalEnvCount(Process*)>
c001bee0:	5a                   	pop    edx
c001bee1:	89 c5                	mov    ebp,eax
c001bee3:	59                   	pop    ecx
c001bee4:	50                   	push   eax
c001bee5:	68 26 bd 02 c0       	push   0xc002bd26
c001beea:	e8 e5 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001beef:	83 c4 10             	add    esp,0x10
c001bef2:	39 ef                	cmp    edi,ebp
c001bef4:	7c 15                	jl     c001bf0b <sysCallGetEnv(regs*)+0x6e>
c001bef6:	85 db                	test   ebx,ebx
c001bef8:	75 0c                	jne    c001bf06 <sysCallGetEnv(regs*)+0x69>
c001befa:	83 c4 1c             	add    esp,0x1c
c001befd:	31 c0                	xor    eax,eax
c001beff:	5b                   	pop    ebx
c001bf00:	31 d2                	xor    edx,edx
c001bf02:	5e                   	pop    esi
c001bf03:	5f                   	pop    edi
c001bf04:	5d                   	pop    ebp
c001bf05:	c3                   	ret    
c001bf06:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bf09:	eb ef                	jmp    c001befa <sysCallGetEnv(regs*)+0x5d>
c001bf0b:	83 ec 0c             	sub    esp,0xc
c001bf0e:	68 32 bd 02 c0       	push   0xc002bd32
c001bf13:	e8 bc 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf18:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf1c:	83 c4 0c             	add    esp,0xc
c001bf1f:	57                   	push   edi
c001bf20:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf26:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bf29:	50                   	push   eax
c001bf2a:	e8 8a e4 ff ff       	call   c001a3b9 <Krnl::getProcessEnvPair(Process*, int)>
c001bf2f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bf33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bf37:	68 d8 c0 02 c0       	push   0xc002c0d8
c001bf3c:	e8 93 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf41:	83 c4 10             	add    esp,0x10
c001bf44:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bf47:	85 f6                	test   esi,esi
c001bf49:	75 47                	jne    c001bf92 <sysCallGetEnv(regs*)+0xf5>
c001bf4b:	83 ec 0c             	sub    esp,0xc
c001bf4e:	55                   	push   ebp
c001bf4f:	e8 40 48 fe ff       	call   c0000794 <strlen>
c001bf54:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf57:	89 c3                	mov    ebx,eax
c001bf59:	e8 36 48 fe ff       	call   c0000794 <strlen>
c001bf5e:	5a                   	pop    edx
c001bf5f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf63:	59                   	pop    ecx
c001bf64:	50                   	push   eax
c001bf65:	68 35 bd 02 c0       	push   0xc002bd35
c001bf6a:	e8 65 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf6f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bf72:	e8 1d 48 fe ff       	call   c0000794 <strlen>
c001bf77:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf7a:	89 c3                	mov    ebx,eax
c001bf7c:	e8 13 48 fe ff       	call   c0000794 <strlen>
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bf88:	83 c4 1c             	add    esp,0x1c
c001bf8b:	31 d2                	xor    edx,edx
c001bf8d:	5b                   	pop    ebx
c001bf8e:	5e                   	pop    esi
c001bf8f:	5f                   	pop    edi
c001bf90:	5d                   	pop    ebp
c001bf91:	c3                   	ret    
c001bf92:	83 ec 0c             	sub    esp,0xc
c001bf95:	68 f2 c0 02 c0       	push   0xc002c0f2
c001bf9a:	e8 35 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bf9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bfa2:	58                   	pop    eax
c001bfa3:	5a                   	pop    edx
c001bfa4:	55                   	push   ebp
c001bfa5:	53                   	push   ebx
c001bfa6:	e8 89 48 fe ff       	call   c0000834 <strcpy>
c001bfab:	59                   	pop    ecx
c001bfac:	5e                   	pop    esi
c001bfad:	68 3f bd 02 c0       	push   0xc002bd3f
c001bfb2:	53                   	push   ebx
c001bfb3:	e8 bc 49 fe ff       	call   c0000974 <strcat>
c001bfb8:	5d                   	pop    ebp
c001bfb9:	58                   	pop    eax
c001bfba:	57                   	push   edi
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 b3 49 fe ff       	call   c0000974 <strcat>
c001bfc1:	c7 04 24 0c c1 02 c0 	mov    DWORD PTR [esp],0xc002c10c
c001bfc8:	e8 07 6e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001bfcd:	83 c4 10             	add    esp,0x10
c001bfd0:	e9 25 ff ff ff       	jmp    c001befa <sysCallGetEnv(regs*)+0x5d>

c001bfd5 <sysAppSettings(regs*)>:
c001bfd5:	53                   	push   ebx
c001bfd6:	83 ec 08             	sub    esp,0x8
c001bfd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfdd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bfe0:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bfe6:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bfeb:	66 3d c0 09          	cmp    ax,0x9c0
c001bfef:	75 2f                	jne    c001c020 <sysAppSettings(regs*)+0x4b>
c001bff1:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bff7:	83 e0 1f             	and    eax,0x1f
c001bffa:	3c 01                	cmp    al,0x1
c001bffc:	74 2e                	je     c001c02c <sysAppSettings(regs*)+0x57>
c001bffe:	3c 07                	cmp    al,0x7
c001c000:	0f 84 bd 00 00 00    	je     c001c0c3 <sysAppSettings(regs*)+0xee>
c001c006:	84 c0                	test   al,al
c001c008:	0f 84 dc 00 00 00    	je     c001c0ea <sysAppSettings(regs*)+0x115>
c001c00e:	3c 08                	cmp    al,0x8
c001c010:	74 6d                	je     c001c07f <sysAppSettings(regs*)+0xaa>
c001c012:	0f b6 c0             	movzx  eax,al
c001c015:	83 c4 08             	add    esp,0x8
c001c018:	05 e8 03 00 00       	add    eax,0x3e8
c001c01d:	5b                   	pop    ebx
c001c01e:	99                   	cdq    
c001c01f:	c3                   	ret    
c001c020:	b8 01 00 00 00       	mov    eax,0x1
c001c025:	31 d2                	xor    edx,edx
c001c027:	83 c4 08             	add    esp,0x8
c001c02a:	5b                   	pop    ebx
c001c02b:	c3                   	ret    
c001c02c:	51                   	push   ecx
c001c02d:	68 00 01 00 00       	push   0x100
c001c032:	6a 00                	push   0x0
c001c034:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c039:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c03c:	83 c0 0c             	add    eax,0xc
c001c03f:	50                   	push   eax
c001c040:	e8 33 47 fe ff       	call   c0000778 <memset>
c001c045:	83 c4 0c             	add    esp,0xc
c001c048:	68 ff 00 00 00       	push   0xff
c001c04d:	53                   	push   ebx
c001c04e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c053:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c056:	83 c0 0c             	add    eax,0xc
c001c059:	50                   	push   eax
c001c05a:	e8 e5 46 fe ff       	call   c0000744 <memcpy>
c001c05f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c064:	5b                   	pop    ebx
c001c065:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c068:	5a                   	pop    edx
c001c069:	8d 50 0c             	lea    edx,[eax+0xc]
c001c06c:	52                   	push   edx
c001c06d:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c073:	e8 24 4b ff ff       	call   c0010b9c <VgaText::setTitle(char*)>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	31 c0                	xor    eax,eax
c001c07d:	eb a6                	jmp    c001c025 <sysAppSettings(regs*)+0x50>
c001c07f:	83 ec 08             	sub    esp,0x8
c001c082:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c088:	83 e0 0f             	and    eax,0xf
c001c08b:	50                   	push   eax
c001c08c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c091:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c094:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c09a:	e8 ed 4a ff ff       	call   c0010b8c <VgaText::setTitleColour(VgaColour)>
c001c09f:	58                   	pop    eax
c001c0a0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c0a6:	5a                   	pop    edx
c001c0a7:	c1 e8 04             	shr    eax,0x4
c001c0aa:	83 e0 0f             	and    eax,0xf
c001c0ad:	50                   	push   eax
c001c0ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0b6:	ff b0 26 19 00 00    	push   DWORD PTR [eax+0x1926]
c001c0bc:	e8 bb 4a ff ff       	call   c0010b7c <VgaText::setTitleTextColour(VgaColour)>
c001c0c1:	eb b5                	jmp    c001c078 <sysAppSettings(regs*)+0xa3>
c001c0c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0cb:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001c0d1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c0d7:	c0 e8 06             	shr    al,0x6
c001c0da:	83 e0 01             	and    eax,0x1
c001c0dd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c0e3:	31 c0                	xor    eax,eax
c001c0e5:	e9 3b ff ff ff       	jmp    c001c025 <sysAppSettings(regs*)+0x50>
c001c0ea:	b8 02 00 00 00       	mov    eax,0x2
c001c0ef:	e9 31 ff ff ff       	jmp    c001c025 <sysAppSettings(regs*)+0x50>

c001c0f4 <sysSetFatAttrib(regs*)>:
c001c0f4:	57                   	push   edi
c001c0f5:	56                   	push   esi
c001c0f6:	53                   	push   ebx
c001c0f7:	83 ec 1c             	sub    esp,0x1c
c001c0fa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c0fe:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c101:	68 14 01 00 00       	push   0x114
c001c106:	e8 35 37 ff ff       	call   c000f840 <malloc>
c001c10b:	83 c4 0c             	add    esp,0xc
c001c10e:	89 c3                	mov    ebx,eax
c001c110:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c115:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c118:	57                   	push   edi
c001c119:	53                   	push   ebx
c001c11a:	e8 0d 72 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001c11f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c122:	83 c4 0c             	add    esp,0xc
c001c125:	0f b6 d4             	movzx  edx,ah
c001c128:	0f b6 c0             	movzx  eax,al
c001c12b:	52                   	push   edx
c001c12c:	50                   	push   eax
c001c12d:	53                   	push   ebx
c001c12e:	e8 6f 74 ff ff       	call   c00135a2 <File::chfatattr(unsigned char, unsigned char)>
c001c133:	83 c4 10             	add    esp,0x10
c001c136:	85 db                	test   ebx,ebx
c001c138:	74 14                	je     c001c14e <sysSetFatAttrib(regs*)+0x5a>
c001c13a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c13e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c140:	83 ec 0c             	sub    esp,0xc
c001c143:	53                   	push   ebx
c001c144:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c147:	83 c4 10             	add    esp,0x10
c001c14a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c14e:	85 c0                	test   eax,eax
c001c150:	0f 95 c0             	setne  al
c001c153:	31 d2                	xor    edx,edx
c001c155:	0f b6 c0             	movzx  eax,al
c001c158:	f7 d8                	neg    eax
c001c15a:	83 d2 00             	adc    edx,0x0
c001c15d:	83 c4 10             	add    esp,0x10
c001c160:	f7 da                	neg    edx
c001c162:	5b                   	pop    ebx
c001c163:	5e                   	pop    esi
c001c164:	5f                   	pop    edi
c001c165:	c3                   	ret    

c001c166 <sysPipe(regs*)>:
c001c166:	57                   	push   edi
c001c167:	56                   	push   esi
c001c168:	53                   	push   ebx
c001c169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c16d:	83 ec 0c             	sub    esp,0xc
c001c170:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c173:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c176:	6a 20                	push   0x20
c001c178:	e8 c3 36 ff ff       	call   c000f840 <malloc>
c001c17d:	89 c3                	mov    ebx,eax
c001c17f:	58                   	pop    eax
c001c180:	5a                   	pop    edx
c001c181:	68 00 50 00 00       	push   0x5000
c001c186:	53                   	push   ebx
c001c187:	e8 40 43 ff ff       	call   c00104cc <Pipe::Pipe(int)>
c001c18c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c18f:	e8 98 55 ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001c194:	89 07                	mov    DWORD PTR [edi],eax
c001c196:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c199:	e8 8e 55 ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	89 06                	mov    DWORD PTR [esi],eax
c001c1a3:	31 d2                	xor    edx,edx
c001c1a5:	5b                   	pop    ebx
c001c1a6:	31 c0                	xor    eax,eax
c001c1a8:	5e                   	pop    esi
c001c1a9:	5f                   	pop    edi
c001c1aa:	c3                   	ret    

c001c1ab <sysGetUnixTime(regs*)>:
c001c1ab:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001c1b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c1b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1ba:	e9 57 7b ff ff       	jmp    c0013d16 <Clock::timeInSecondsLocal()>

c001c1bf <string_ends_with(char const*, char const*)>:
c001c1bf:	57                   	push   edi
c001c1c0:	56                   	push   esi
c001c1c1:	53                   	push   ebx
c001c1c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c1ca:	83 ec 0c             	sub    esp,0xc
c001c1cd:	53                   	push   ebx
c001c1ce:	e8 c1 45 fe ff       	call   c0000794 <strlen>
c001c1d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1d6:	89 c6                	mov    esi,eax
c001c1d8:	e8 b7 45 fe ff       	call   c0000794 <strlen>
c001c1dd:	83 c4 10             	add    esp,0x10
c001c1e0:	39 c6                	cmp    esi,eax
c001c1e2:	7d 06                	jge    c001c1ea <string_ends_with(char const*, char const*)+0x2b>
c001c1e4:	5b                   	pop    ebx
c001c1e5:	31 c0                	xor    eax,eax
c001c1e7:	5e                   	pop    esi
c001c1e8:	5f                   	pop    edi
c001c1e9:	c3                   	ret    
c001c1ea:	83 ec 08             	sub    esp,0x8
c001c1ed:	29 c6                	sub    esi,eax
c001c1ef:	57                   	push   edi
c001c1f0:	01 f3                	add    ebx,esi
c001c1f2:	53                   	push   ebx
c001c1f3:	e8 c8 46 fe ff       	call   c00008c0 <strcmp>
c001c1f8:	83 c4 10             	add    esp,0x10
c001c1fb:	85 c0                	test   eax,eax
c001c1fd:	5b                   	pop    ebx
c001c1fe:	0f 94 c0             	sete   al
c001c201:	5e                   	pop    esi
c001c202:	0f b6 c0             	movzx  eax,al
c001c205:	5f                   	pop    edi
c001c206:	c3                   	ret    

c001c207 <sysCallOpen(regs*)>:
c001c207:	56                   	push   esi
c001c208:	53                   	push   ebx
c001c209:	81 ec 04 01 00 00    	sub    esp,0x104
c001c20f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c216:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c219:	85 c9                	test   ecx,ecx
c001c21b:	0f 84 b3 00 00 00    	je     c001c2d4 <sysCallOpen(regs*)+0xcd>
c001c221:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c224:	85 c0                	test   eax,eax
c001c226:	0f 84 a8 00 00 00    	je     c001c2d4 <sysCallOpen(regs*)+0xcd>
c001c22c:	52                   	push   edx
c001c22d:	68 41 bd 02 c0       	push   0xc002bd41
c001c232:	50                   	push   eax
c001c233:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c237:	56                   	push   esi
c001c238:	e8 45 6f ff ff       	call   c0013182 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c23d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c240:	e8 4f 45 fe ff       	call   c0000794 <strlen>
c001c245:	83 c4 10             	add    esp,0x10
c001c248:	48                   	dec    eax
c001c249:	74 1d                	je     c001c268 <sysCallOpen(regs*)+0x61>
c001c24b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c24e:	eb 0f                	jmp    c001c25f <sysCallOpen(regs*)+0x58>
c001c250:	80 fa 3a             	cmp    dl,0x3a
c001c253:	74 0f                	je     c001c264 <sysCallOpen(regs*)+0x5d>
c001c255:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c259:	48                   	dec    eax
c001c25a:	74 0c                	je     c001c268 <sysCallOpen(regs*)+0x61>
c001c25c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c25f:	80 fa 2e             	cmp    dl,0x2e
c001c262:	75 ec                	jne    c001c250 <sysCallOpen(regs*)+0x49>
c001c264:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c268:	83 ec 08             	sub    esp,0x8
c001c26b:	68 45 bd 02 c0       	push   0xc002bd45
c001c270:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c273:	e8 47 ff ff ff       	call   c001c1bf <string_ends_with(char const*, char const*)>
c001c278:	83 c4 10             	add    esp,0x10
c001c27b:	85 c0                	test   eax,eax
c001c27d:	75 17                	jne    c001c296 <sysCallOpen(regs*)+0x8f>
c001c27f:	83 ec 08             	sub    esp,0x8
c001c282:	68 66 bd 02 c0       	push   0xc002bd66
c001c287:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c28a:	e8 30 ff ff ff       	call   c001c1bf <string_ends_with(char const*, char const*)>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	85 c0                	test   eax,eax
c001c294:	74 51                	je     c001c2e7 <sysCallOpen(regs*)+0xe0>
c001c296:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c299:	83 ec 08             	sub    esp,0x8
c001c29c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c2a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2a9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c2ac:	ff 30                	push   DWORD PTR [eax]
c001c2ae:	68 4a bd 02 c0       	push   0xc002bd4a
c001c2b3:	e8 1c 6b ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c2b8:	c7 04 24 59 bd 02 c0 	mov    DWORD PTR [esp],0xc002bd59
c001c2bf:	e8 10 6b ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c2c4:	83 c4 10             	add    esp,0x10
c001c2c7:	81 c4 04 01 00 00    	add    esp,0x104
c001c2cd:	31 c0                	xor    eax,eax
c001c2cf:	31 d2                	xor    edx,edx
c001c2d1:	5b                   	pop    ebx
c001c2d2:	5e                   	pop    esi
c001c2d3:	c3                   	ret    
c001c2d4:	81 c4 04 01 00 00    	add    esp,0x104
c001c2da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2df:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2e4:	5b                   	pop    ebx
c001c2e5:	5e                   	pop    esi
c001c2e6:	c3                   	ret    
c001c2e7:	83 ec 08             	sub    esp,0x8
c001c2ea:	68 46 bd 02 c0       	push   0xc002bd46
c001c2ef:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c2f2:	e8 c9 45 fe ff       	call   c00008c0 <strcmp>
c001c2f7:	83 c4 10             	add    esp,0x10
c001c2fa:	85 c0                	test   eax,eax
c001c2fc:	74 98                	je     c001c296 <sysCallOpen(regs*)+0x8f>
c001c2fe:	83 ec 08             	sub    esp,0x8
c001c301:	68 45 bd 02 c0       	push   0xc002bd45
c001c306:	56                   	push   esi
c001c307:	e8 b3 fe ff ff       	call   c001c1bf <string_ends_with(char const*, char const*)>
c001c30c:	83 c4 10             	add    esp,0x10
c001c30f:	85 c0                	test   eax,eax
c001c311:	75 83                	jne    c001c296 <sysCallOpen(regs*)+0x8f>
c001c313:	83 ec 08             	sub    esp,0x8
c001c316:	68 6b bd 02 c0       	push   0xc002bd6b
c001c31b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c31e:	e8 9c fe ff ff       	call   c001c1bf <string_ends_with(char const*, char const*)>
c001c323:	83 c4 10             	add    esp,0x10
c001c326:	85 c0                	test   eax,eax
c001c328:	0f 85 d9 00 00 00    	jne    c001c407 <sysCallOpen(regs*)+0x200>
c001c32e:	83 ec 08             	sub    esp,0x8
c001c331:	68 70 bd 02 c0       	push   0xc002bd70
c001c336:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c339:	e8 81 fe ff ff       	call   c001c1bf <string_ends_with(char const*, char const*)>
c001c33e:	83 c4 10             	add    esp,0x10
c001c341:	85 c0                	test   eax,eax
c001c343:	0f 85 be 00 00 00    	jne    c001c407 <sysCallOpen(regs*)+0x200>
c001c349:	83 ec 08             	sub    esp,0x8
c001c34c:	68 6c bd 02 c0       	push   0xc002bd6c
c001c351:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c354:	e8 67 45 fe ff       	call   c00008c0 <strcmp>
c001c359:	83 c4 10             	add    esp,0x10
c001c35c:	85 c0                	test   eax,eax
c001c35e:	0f 84 a3 00 00 00    	je     c001c407 <sysCallOpen(regs*)+0x200>
c001c364:	83 ec 08             	sub    esp,0x8
c001c367:	68 6b bd 02 c0       	push   0xc002bd6b
c001c36c:	56                   	push   esi
c001c36d:	e8 4d fe ff ff       	call   c001c1bf <string_ends_with(char const*, char const*)>
c001c372:	83 c4 10             	add    esp,0x10
c001c375:	85 c0                	test   eax,eax
c001c377:	0f 85 8a 00 00 00    	jne    c001c407 <sysCallOpen(regs*)+0x200>
c001c37d:	83 ec 0c             	sub    esp,0xc
c001c380:	68 14 01 00 00       	push   0x114
c001c385:	e8 b6 34 ff ff       	call   c000f840 <malloc>
c001c38a:	83 c4 0c             	add    esp,0xc
c001c38d:	89 c6                	mov    esi,eax
c001c38f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c394:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c397:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c39a:	56                   	push   esi
c001c39b:	e8 8c 6f ff ff       	call   c001332c <File::File(char const*, Process*)>
c001c3a0:	83 c4 10             	add    esp,0x10
c001c3a3:	85 f6                	test   esi,esi
c001c3a5:	0f 84 29 ff ff ff    	je     c001c2d4 <sysCallOpen(regs*)+0xcd>
c001c3ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c3ae:	0f b6 c2             	movzx  eax,dl
c001c3b1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c3b4:	89 d0                	mov    eax,edx
c001c3b6:	83 e0 01             	and    eax,0x1
c001c3b9:	f6 c2 02             	test   dl,0x2
c001c3bc:	74 03                	je     c001c3c1 <sysCallOpen(regs*)+0x1ba>
c001c3be:	83 c8 02             	or     eax,0x2
c001c3c1:	f6 c2 04             	test   dl,0x4
c001c3c4:	74 03                	je     c001c3c9 <sysCallOpen(regs*)+0x1c2>
c001c3c6:	83 c8 04             	or     eax,0x4
c001c3c9:	f6 c2 08             	test   dl,0x8
c001c3cc:	74 03                	je     c001c3d1 <sysCallOpen(regs*)+0x1ca>
c001c3ce:	83 c8 0a             	or     eax,0xa
c001c3d1:	83 e2 10             	and    edx,0x10
c001c3d4:	74 03                	je     c001c3d9 <sysCallOpen(regs*)+0x1d2>
c001c3d6:	83 c8 12             	or     eax,0x12
c001c3d9:	83 ec 08             	sub    esp,0x8
c001c3dc:	50                   	push   eax
c001c3dd:	56                   	push   esi
c001c3de:	e8 ad 6f ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	85 c0                	test   eax,eax
c001c3e8:	0f 85 e6 fe ff ff    	jne    c001c2d4 <sysCallOpen(regs*)+0xcd>
c001c3ee:	83 ec 0c             	sub    esp,0xc
c001c3f1:	56                   	push   esi
c001c3f2:	e8 35 53 ff ff       	call   c001172c <UnixFile::getFileDescriptor()>
c001c3f7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c3fa:	89 02                	mov    DWORD PTR [edx],eax
c001c3fc:	c1 f8 1f             	sar    eax,0x1f
c001c3ff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c402:	e9 bd fe ff ff       	jmp    c001c2c4 <sysCallOpen(regs*)+0xbd>
c001c407:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c40a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c410:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c417:	e9 ab fe ff ff       	jmp    c001c2c7 <sysCallOpen(regs*)+0xc0>

c001c41c <Sys::loadSyscalls()>:
c001c41c:	c7 05 00 0e 03 c0 29 b5 01 c0 	mov    DWORD PTR ds:0xc0030e00,0xc001b529
c001c426:	c7 05 04 0e 03 c0 12 b1 01 c0 	mov    DWORD PTR ds:0xc0030e04,0xc001b112
c001c430:	c7 05 08 0e 03 c0 7c b2 01 c0 	mov    DWORD PTR ds:0xc0030e08,0xc001b27c
c001c43a:	c7 05 0c 0e 03 c0 5f b4 01 c0 	mov    DWORD PTR ds:0xc0030e0c,0xc001b45f
c001c444:	c7 05 10 0e 03 c0 14 b2 01 c0 	mov    DWORD PTR ds:0xc0030e10,0xc001b214
c001c44e:	c7 05 14 0e 03 c0 49 b1 01 c0 	mov    DWORD PTR ds:0xc0030e14,0xc001b149
c001c458:	c7 05 18 0e 03 c0 2a b1 01 c0 	mov    DWORD PTR ds:0xc0030e18,0xc001b12a
c001c462:	c7 05 1c 0e 03 c0 d1 b2 01 c0 	mov    DWORD PTR ds:0xc0030e1c,0xc001b2d1
c001c46c:	c7 05 24 0e 03 c0 59 ba 01 c0 	mov    DWORD PTR ds:0xc0030e24,0xc001ba59
c001c476:	c7 05 20 0e 03 c0 07 c2 01 c0 	mov    DWORD PTR ds:0xc0030e20,0xc001c207
c001c480:	c7 05 28 0e 03 c0 e1 ba 01 c0 	mov    DWORD PTR ds:0xc0030e28,0xc001bae1
c001c48a:	c7 05 2c 0e 03 c0 48 b7 01 c0 	mov    DWORD PTR ds:0xc0030e2c,0xc001b748
c001c494:	c7 05 30 0e 03 c0 64 b5 01 c0 	mov    DWORD PTR ds:0xc0030e30,0xc001b564
c001c49e:	c7 05 34 0e 03 c0 69 b5 01 c0 	mov    DWORD PTR ds:0xc0030e34,0xc001b569
c001c4a8:	c7 05 38 0e 03 c0 bc bb 01 c0 	mov    DWORD PTR ds:0xc0030e38,0xc001bbbc
c001c4b2:	c7 05 3c 0e 03 c0 56 bb 01 c0 	mov    DWORD PTR ds:0xc0030e3c,0xc001bb56
c001c4bc:	c7 05 40 0e 03 c0 30 b8 01 c0 	mov    DWORD PTR ds:0xc0030e40,0xc001b830
c001c4c6:	c7 05 44 0e 03 c0 99 b8 01 c0 	mov    DWORD PTR ds:0xc0030e44,0xc001b899
c001c4d0:	c7 05 48 0e 03 c0 16 b9 01 c0 	mov    DWORD PTR ds:0xc0030e48,0xc001b916
c001c4da:	c7 05 4c 0e 03 c0 6e b5 01 c0 	mov    DWORD PTR ds:0xc0030e4c,0xc001b56e
c001c4e4:	c7 05 50 0e 03 c0 2c bc 01 c0 	mov    DWORD PTR ds:0xc0030e50,0xc001bc2c
c001c4ee:	c7 05 54 0e 03 c0 46 bc 01 c0 	mov    DWORD PTR ds:0xc0030e54,0xc001bc46
c001c4f8:	c7 05 58 0e 03 c0 46 bc 01 c0 	mov    DWORD PTR ds:0xc0030e58,0xc001bc46
c001c502:	c7 05 5c 0e 03 c0 87 bc 01 c0 	mov    DWORD PTR ds:0xc0030e5c,0xc001bc87
c001c50c:	c7 05 60 0e 03 c0 eb bc 01 c0 	mov    DWORD PTR ds:0xc0030e60,0xc001bceb
c001c516:	c7 05 64 0e 03 c0 1a b7 01 c0 	mov    DWORD PTR ds:0xc0030e64,0xc001b71a
c001c520:	c7 05 68 0e 03 c0 4f bd 01 c0 	mov    DWORD PTR ds:0xc0030e68,0xc001bd4f
c001c52a:	c7 05 6c 0e 03 c0 d7 b6 01 c0 	mov    DWORD PTR ds:0xc0030e6c,0xc001b6d7
c001c534:	c7 05 70 0e 03 c0 9b bd 01 c0 	mov    DWORD PTR ds:0xc0030e70,0xc001bd9b
c001c53e:	c7 05 74 0e 03 c0 d6 b7 01 c0 	mov    DWORD PTR ds:0xc0030e74,0xc001b7d6
c001c548:	c7 05 78 0e 03 c0 1e be 01 c0 	mov    DWORD PTR ds:0xc0030e78,0xc001be1e
c001c552:	c7 05 7c 0e 03 c0 99 b9 01 c0 	mov    DWORD PTR ds:0xc0030e7c,0xc001b999
c001c55c:	c7 05 80 0e 03 c0 45 be 01 c0 	mov    DWORD PTR ds:0xc0030e80,0xc001be45
c001c566:	c7 05 84 0e 03 c0 9d be 01 c0 	mov    DWORD PTR ds:0xc0030e84,0xc001be9d
c001c570:	c7 05 88 0e 03 c0 d5 bf 01 c0 	mov    DWORD PTR ds:0xc0030e88,0xc001bfd5
c001c57a:	c7 05 8c 0e 03 c0 78 b5 01 c0 	mov    DWORD PTR ds:0xc0030e8c,0xc001b578
c001c584:	c7 05 90 0e 03 c0 e2 b5 01 c0 	mov    DWORD PTR ds:0xc0030e90,0xc001b5e2
c001c58e:	c7 05 94 0e 03 c0 28 b6 01 c0 	mov    DWORD PTR ds:0xc0030e94,0xc001b628
c001c598:	c7 05 98 0e 03 c0 f4 c0 01 c0 	mov    DWORD PTR ds:0xc0030e98,0xc001c0f4
c001c5a2:	c7 05 9c 0e 03 c0 61 bc 01 c0 	mov    DWORD PTR ds:0xc0030e9c,0xc001bc61
c001c5ac:	c7 05 a0 0e 03 c0 79 b6 01 c0 	mov    DWORD PTR ds:0xc0030ea0,0xc001b679
c001c5b6:	c7 05 a4 0e 03 c0 66 c1 01 c0 	mov    DWORD PTR ds:0xc0030ea4,0xc001c166
c001c5c0:	c7 05 a8 0e 03 c0 ab c1 01 c0 	mov    DWORD PTR ds:0xc0030ea8,0xc001c1ab
c001c5ca:	c7 05 ac 0e 03 c0 6c b1 01 c0 	mov    DWORD PTR ds:0xc0030eac,0xc001b16c
c001c5d4:	c7 05 b0 0e 03 c0 ed b2 01 c0 	mov    DWORD PTR ds:0xc0030eb0,0xc001b2ed
c001c5de:	c7 05 b4 0e 03 c0 15 b4 01 c0 	mov    DWORD PTR ds:0xc0030eb4,0xc001b415
c001c5e8:	c7 05 b8 0e 03 c0 dc b0 01 c0 	mov    DWORD PTR ds:0xc0030eb8,0xc001b0dc
c001c5f2:	c7 05 bc 0e 03 c0 c7 b4 01 c0 	mov    DWORD PTR ds:0xc0030ebc,0xc001b4c7
c001c5fc:	c7 05 c0 0e 03 c0 55 b1 01 c0 	mov    DWORD PTR ds:0xc0030ec0,0xc001b155
c001c606:	c3                   	ret    

c001c607 <Sys::systemCall(regs*, void*)>:
c001c607:	53                   	push   ebx
c001c608:	83 ec 08             	sub    esp,0x8
c001c60b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c60f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c612:	83 f8 7f             	cmp    eax,0x7f
c001c615:	77 16                	ja     c001c62d <Sys::systemCall(regs*, void*)+0x26>
c001c617:	8b 14 85 00 0e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf200]
c001c61e:	85 d2                	test   edx,edx
c001c620:	74 0b                	je     c001c62d <Sys::systemCall(regs*, void*)+0x26>
c001c622:	83 ec 0c             	sub    esp,0xc
c001c625:	53                   	push   ebx
c001c626:	ff d2                	call   edx
c001c628:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c62b:	eb 0d                	jmp    c001c63a <Sys::systemCall(regs*, void*)+0x33>
c001c62d:	52                   	push   edx
c001c62e:	52                   	push   edx
c001c62f:	50                   	push   eax
c001c630:	68 75 bd 02 c0       	push   0xc002bd75
c001c635:	e8 9a 67 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c63a:	83 c4 10             	add    esp,0x10
c001c63d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c642:	31 d2                	xor    edx,edx
c001c644:	83 c4 08             	add    esp,0x8
c001c647:	5b                   	pop    ebx
c001c648:	c3                   	ret    

c001c649 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c649:	55                   	push   ebp
c001c64a:	57                   	push   edi
c001c64b:	56                   	push   esi
c001c64c:	53                   	push   ebx
c001c64d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c653:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c65a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c661:	85 c0                	test   eax,eax
c001c663:	0f 95 c1             	setne  cl
c001c666:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c66e:	0f 94 c2             	sete   dl
c001c671:	84 d1                	test   cl,dl
c001c673:	74 23                	je     c001c698 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c675:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c67b:	74 1b                	je     c001c698 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c67d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c683:	89 da                	mov    edx,ebx
c001c685:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c68b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c691:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c698:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c69f:	05 ff 0f 00 00       	add    eax,0xfff
c001c6a4:	83 ec 0c             	sub    esp,0xc
c001c6a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6ab:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c6b1:	c1 e8 0c             	shr    eax,0xc
c001c6b4:	89 ef                	mov    edi,ebp
c001c6b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c6ba:	c1 ef 0c             	shr    edi,0xc
c001c6bd:	6a 01                	push   0x1
c001c6bf:	e8 b3 54 ff ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c001c6c4:	89 c6                	mov    esi,eax
c001c6c6:	58                   	pop    eax
c001c6c7:	5a                   	pop    edx
c001c6c8:	57                   	push   edi
c001c6c9:	68 fb bd 02 c0       	push   0xc002bdfb
c001c6ce:	e8 01 67 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c6d3:	59                   	pop    ecx
c001c6d4:	58                   	pop    eax
c001c6d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c6d9:	68 0d be 02 c0       	push   0xc002be0d
c001c6de:	e8 f1 66 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c6e3:	83 c4 10             	add    esp,0x10
c001c6e6:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c6ec:	0f 86 24 01 00 00    	jbe    c001c816 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c6f2:	c1 e7 0c             	shl    edi,0xc
c001c6f5:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c6f8:	89 df                	mov    edi,ebx
c001c6fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6fe:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c705:	01 dd                	add    ebp,ebx
c001c707:	29 fd                	sub    ebp,edi
c001c709:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c70d:	0f 84 01 01 00 00    	je     c001c814 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c713:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c719:	76 05                	jbe    c001c720 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c71b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c720:	83 ec 0c             	sub    esp,0xc
c001c723:	31 d2                	xor    edx,edx
c001c725:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c72c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c72e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c732:	50                   	push   eax
c001c733:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c737:	50                   	push   eax
c001c738:	52                   	push   edx
c001c739:	55                   	push   ebp
c001c73a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c741:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c744:	83 c4 20             	add    esp,0x20
c001c747:	85 c0                	test   eax,eax
c001c749:	74 0a                	je     c001c755 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c74b:	53                   	push   ebx
c001c74c:	53                   	push   ebx
c001c74d:	50                   	push   eax
c001c74e:	68 1f be 02 c0       	push   0xc002be1f
c001c753:	eb 0f                	jmp    c001c764 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c755:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c759:	74 20                	je     c001c77b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c75b:	51                   	push   ecx
c001c75c:	51                   	push   ecx
c001c75d:	6a 00                	push   0x0
c001c75f:	68 4a be 02 c0       	push   0xc002be4a
c001c764:	e8 6b 66 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001c769:	89 34 24             	mov    DWORD PTR [esp],esi
c001c76c:	e8 68 57 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	31 c0                	xor    eax,eax
c001c776:	e9 55 01 00 00       	jmp    c001c8d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c77b:	e8 f7 14 00 00       	call   c001dc77 <lockScheduler()>
c001c780:	e8 58 37 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c785:	6a 07                	push   0x7
c001c787:	89 c5                	mov    ebp,eax
c001c789:	56                   	push   esi
c001c78a:	50                   	push   eax
c001c78b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c790:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c793:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c799:	e8 a2 5a ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c79e:	83 c4 0c             	add    esp,0xc
c001c7a1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c7a8:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7ae:	6a 00                	push   0x0
c001c7b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7b8:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7be:	e8 e7 58 ff ff       	call   c00120aa <VAS::mapOtherVASIn(bool, VAS*)>
c001c7c3:	58                   	pop    eax
c001c7c4:	5a                   	pop    edx
c001c7c5:	68 07 0c 00 00       	push   0xc07
c001c7ca:	57                   	push   edi
c001c7cb:	81 c7 00 10 00 00    	add    edi,0x1000
c001c7d1:	55                   	push   ebp
c001c7d2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c7d9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7df:	6a 00                	push   0x0
c001c7e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7e9:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c7ef:	e8 06 5e ff ff       	call   c00125fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c7f4:	83 c4 1c             	add    esp,0x1c
c001c7f7:	68 00 10 00 00       	push   0x1000
c001c7fc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c800:	50                   	push   eax
c001c801:	56                   	push   esi
c001c802:	e8 3d 3f fe ff       	call   c0000744 <memcpy>
c001c807:	e8 6d 14 00 00       	call   c001dc79 <unlockScheduler()>
c001c80c:	83 c4 10             	add    esp,0x10
c001c80f:	e9 ea fe ff ff       	jmp    c001c6fe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c814:	89 fb                	mov    ebx,edi
c001c816:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c81e:	0f 86 9e 00 00 00    	jbe    c001c8c2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c824:	e8 4e 14 00 00       	call   c001dc77 <lockScheduler()>
c001c829:	51                   	push   ecx
c001c82a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c831:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c837:	6a 00                	push   0x0
c001c839:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c83e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c841:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c847:	e8 5e 58 ff ff       	call   c00120aa <VAS::mapOtherVASIn(bool, VAS*)>
c001c84c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c850:	c1 e7 0c             	shl    edi,0xc
c001c853:	01 df                	add    edi,ebx
c001c855:	83 c4 10             	add    esp,0x10
c001c858:	39 fb                	cmp    ebx,edi
c001c85a:	74 61                	je     c001c8bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c85c:	e8 7c 36 ff ff       	call   c000fedd <Phys::allocatePage()>
c001c861:	6a 07                	push   0x7
c001c863:	89 c5                	mov    ebp,eax
c001c865:	56                   	push   esi
c001c866:	50                   	push   eax
c001c867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c86c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c86f:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c875:	e8 c6 59 ff ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c87a:	58                   	pop    eax
c001c87b:	5a                   	pop    edx
c001c87c:	68 07 0c 00 00       	push   0xc07
c001c881:	53                   	push   ebx
c001c882:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c888:	55                   	push   ebp
c001c889:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c890:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c896:	6a 00                	push   0x0
c001c898:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c89d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8a0:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001c8a6:	e8 4f 5d ff ff       	call   c00125fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8ab:	83 c4 1c             	add    esp,0x1c
c001c8ae:	68 00 10 00 00       	push   0x1000
c001c8b3:	6a 00                	push   0x0
c001c8b5:	56                   	push   esi
c001c8b6:	e8 bd 3e fe ff       	call   c0000778 <memset>
c001c8bb:	eb 98                	jmp    c001c855 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c8bd:	e8 b7 13 00 00       	call   c001dc79 <unlockScheduler()>
c001c8c2:	83 ec 0c             	sub    esp,0xc
c001c8c5:	56                   	push   esi
c001c8c6:	e8 0e 56 ff ff       	call   c0011ed9 <Virt::freeKernelVirtualPages(unsigned long)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	b0 01                	mov    al,0x1
c001c8d0:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c8d6:	5b                   	pop    ebx
c001c8d7:	5e                   	pop    esi
c001c8d8:	5f                   	pop    edi
c001c8d9:	5d                   	pop    ebp
c001c8da:	c3                   	ret    

c001c8db <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c8db:	55                   	push   ebp
c001c8dc:	57                   	push   edi
c001c8dd:	56                   	push   esi
c001c8de:	53                   	push   ebx
c001c8df:	83 ec 48             	sub    esp,0x48
c001c8e2:	68 14 01 00 00       	push   0x114
c001c8e7:	e8 54 2f ff ff       	call   c000f840 <malloc>
c001c8ec:	83 c4 0c             	add    esp,0xc
c001c8ef:	89 c6                	mov    esi,eax
c001c8f1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c8f5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c8f9:	50                   	push   eax
c001c8fa:	e8 2d 6a ff ff       	call   c001332c <File::File(char const*, Process*)>
c001c8ff:	58                   	pop    eax
c001c900:	5a                   	pop    edx
c001c901:	6a 01                	push   0x1
c001c903:	56                   	push   esi
c001c904:	e8 87 6a ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001c909:	83 c4 10             	add    esp,0x10
c001c90c:	85 c0                	test   eax,eax
c001c90e:	0f 85 47 01 00 00    	jne    c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c914:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c91c:	83 ec 0c             	sub    esp,0xc
c001c91f:	6a 34                	push   0x34
c001c921:	e8 1a 2f ff ff       	call   c000f840 <malloc>
c001c926:	89 c3                	mov    ebx,eax
c001c928:	58                   	pop    eax
c001c929:	8b 06                	mov    eax,DWORD PTR [esi]
c001c92b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c92f:	57                   	push   edi
c001c930:	53                   	push   ebx
c001c931:	6a 00                	push   0x0
c001c933:	6a 34                	push   0x34
c001c935:	56                   	push   esi
c001c936:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c939:	83 c4 20             	add    esp,0x20
c001c93c:	85 c0                	test   eax,eax
c001c93e:	0f 85 17 01 00 00    	jne    c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c944:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c94a:	0f 85 0b 01 00 00    	jne    c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c950:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c953:	85 c0                	test   eax,eax
c001c955:	0f 84 00 01 00 00    	je     c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c95b:	31 d2                	xor    edx,edx
c001c95d:	55                   	push   ebp
c001c95e:	52                   	push   edx
c001c95f:	50                   	push   eax
c001c960:	56                   	push   esi
c001c961:	e8 e8 6a ff ff       	call   c001344e <File::seek(unsigned long long)>
c001c966:	83 c4 10             	add    esp,0x10
c001c969:	85 c0                	test   eax,eax
c001c96b:	0f 85 ea 00 00 00    	jne    c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c971:	83 ec 0c             	sub    esp,0xc
c001c974:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c977:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c97b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c97f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c983:	0f af c2             	imul   eax,edx
c001c986:	50                   	push   eax
c001c987:	e8 b4 2e ff ff       	call   c000f840 <malloc>
c001c98c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c98e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c992:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c995:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c999:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c99d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c9a1:	0f af c2             	imul   eax,edx
c001c9a4:	99                   	cdq    
c001c9a5:	52                   	push   edx
c001c9a6:	50                   	push   eax
c001c9a7:	56                   	push   esi
c001c9a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9ab:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c9ae:	83 c4 20             	add    esp,0x20
c001c9b1:	85 c0                	test   eax,eax
c001c9b3:	0f 84 a2 00 00 00    	je     c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9b9:	31 d2                	xor    edx,edx
c001c9bb:	51                   	push   ecx
c001c9bc:	52                   	push   edx
c001c9bd:	50                   	push   eax
c001c9be:	56                   	push   esi
c001c9bf:	e8 8a 6a ff ff       	call   c001344e <File::seek(unsigned long long)>
c001c9c4:	83 c4 10             	add    esp,0x10
c001c9c7:	85 c0                	test   eax,eax
c001c9c9:	0f 85 8c 00 00 00    	jne    c001ca5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9cf:	83 ec 0c             	sub    esp,0xc
c001c9d2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9d6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9da:	31 ed                	xor    ebp,ebp
c001c9dc:	0f af c2             	imul   eax,edx
c001c9df:	50                   	push   eax
c001c9e0:	e8 5b 2e ff ff       	call   c000f840 <malloc>
c001c9e5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c9e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c9eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9f2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c9f6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c9fa:	0f af c2             	imul   eax,edx
c001c9fd:	99                   	cdq    
c001c9fe:	52                   	push   edx
c001c9ff:	50                   	push   eax
c001ca00:	56                   	push   esi
c001ca01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca04:	83 c4 20             	add    esp,0x20
c001ca07:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ca0f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ca13:	0f 86 80 00 00 00    	jbe    c001ca99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001ca19:	0f b7 fd             	movzx  edi,bp
c001ca1c:	c1 e7 05             	shl    edi,0x5
c001ca1f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001ca23:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001ca26:	75 6b                	jne    c001ca93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca28:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001ca2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ca2f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ca32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca36:	52                   	push   edx
c001ca37:	31 d2                	xor    edx,edx
c001ca39:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001ca3c:	52                   	push   edx
c001ca3d:	50                   	push   eax
c001ca3e:	56                   	push   esi
c001ca3f:	e8 0a 6a ff ff       	call   c001344e <File::seek(unsigned long long)>
c001ca44:	83 c4 10             	add    esp,0x10
c001ca47:	85 c0                	test   eax,eax
c001ca49:	74 17                	je     c001ca62 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001ca4b:	83 ec 0c             	sub    esp,0xc
c001ca4e:	68 76 be 02 c0       	push   0xc002be76
c001ca53:	e8 7c 63 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ca58:	83 c4 10             	add    esp,0x10
c001ca5b:	31 c0                	xor    eax,eax
c001ca5d:	e9 87 00 00 00       	jmp    c001cae9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ca62:	83 ec 0c             	sub    esp,0xc
c001ca65:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ca68:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ca6b:	50                   	push   eax
c001ca6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ca70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca74:	56                   	push   esi
c001ca75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ca79:	e8 cb fb ff ff       	call   c001c649 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ca7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca82:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ca86:	83 c4 20             	add    esp,0x20
c001ca89:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ca8d:	73 04                	jae    c001ca93 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ca8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ca93:	45                   	inc    ebp
c001ca94:	e9 76 ff ff ff       	jmp    c001ca0f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ca99:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ca9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001caa1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caa5:	89 91 2e 19 00 00    	mov    DWORD PTR [ecx+0x192e],edx
c001caab:	83 ec 0c             	sub    esp,0xc
c001caae:	8b 91 32 19 00 00    	mov    edx,DWORD PTR [ecx+0x1932]
c001cab4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cab9:	05 00 10 00 00       	add    eax,0x1000
c001cabe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cac1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cac5:	e8 86 2d ff ff       	call   c000f850 <free>
c001caca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cacd:	e8 7e 2d ff ff       	call   c000f850 <free>
c001cad2:	58                   	pop    eax
c001cad3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cad7:	e8 74 2d ff ff       	call   c000f850 <free>
c001cadc:	89 34 24             	mov    DWORD PTR [esp],esi
c001cadf:	e8 0a 69 ff ff       	call   c00133ee <File::close()>
c001cae4:	83 c4 10             	add    esp,0x10
c001cae7:	b0 01                	mov    al,0x1
c001cae9:	83 c4 3c             	add    esp,0x3c
c001caec:	5b                   	pop    ebx
c001caed:	5e                   	pop    esi
c001caee:	5f                   	pop    edi
c001caef:	5d                   	pop    ebp
c001caf0:	c3                   	ret    

c001caf1 <Thr::runtimeReferenceHelper()>:
c001caf1:	83 ec 18             	sub    esp,0x18
c001caf4:	68 7e be 02 c0       	push   0xc002be7e
c001caf9:	e8 d6 62 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001cafe:	fa                   	cli    
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	eb fe                	jmp    c001cb02 <Thr::runtimeReferenceHelper()+0x11>

c001cb04 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cb04:	57                   	push   edi
c001cb05:	56                   	push   esi
c001cb06:	53                   	push   ebx
c001cb07:	31 db                	xor    ebx,ebx
c001cb09:	39 1d a0 17 03 c0    	cmp    DWORD PTR ds:0xc00317a0,ebx
c001cb0f:	7e 3c                	jle    c001cb4d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cb11:	8b 34 9d 20 17 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce8e0]
c001cb18:	31 ff                	xor    edi,edi
c001cb1a:	39 3c 9d 20 16 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce9e0],edi
c001cb21:	7e 27                	jle    c001cb4a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cb23:	50                   	push   eax
c001cb24:	50                   	push   eax
c001cb25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb29:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb2b:	03 04 9d a0 16 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce960]
c001cb32:	50                   	push   eax
c001cb33:	e8 88 3d fe ff       	call   c00008c0 <strcmp>
c001cb38:	83 c4 10             	add    esp,0x10
c001cb3b:	85 c0                	test   eax,eax
c001cb3d:	75 05                	jne    c001cb44 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cb3f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cb42:	eb 0b                	jmp    c001cb4f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cb44:	83 c6 10             	add    esi,0x10
c001cb47:	47                   	inc    edi
c001cb48:	eb d0                	jmp    c001cb1a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cb4a:	43                   	inc    ebx
c001cb4b:	eb bc                	jmp    c001cb09 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cb4d:	31 c0                	xor    eax,eax
c001cb4f:	5b                   	pop    ebx
c001cb50:	5e                   	pop    esi
c001cb51:	5f                   	pop    edi
c001cb52:	c3                   	ret    

c001cb53 <Thr::loadKernelSymbolTable(char const*)>:
c001cb53:	55                   	push   ebp
c001cb54:	57                   	push   edi
c001cb55:	56                   	push   esi
c001cb56:	53                   	push   ebx
c001cb57:	83 ec 68             	sub    esp,0x68
c001cb5a:	8b 35 f4 17 03 c0    	mov    esi,DWORD PTR ds:0xc00317f4
c001cb60:	68 14 01 00 00       	push   0x114
c001cb65:	e8 d6 2c ff ff       	call   c000f840 <malloc>
c001cb6a:	83 c4 0c             	add    esp,0xc
c001cb6d:	89 c3                	mov    ebx,eax
c001cb6f:	56                   	push   esi
c001cb70:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cb74:	50                   	push   eax
c001cb75:	e8 b2 67 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001cb7a:	5e                   	pop    esi
c001cb7b:	5f                   	pop    edi
c001cb7c:	6a 01                	push   0x1
c001cb7e:	53                   	push   ebx
c001cb7f:	e8 0c 68 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001cb84:	83 c4 10             	add    esp,0x10
c001cb87:	85 c0                	test   eax,eax
c001cb89:	74 0a                	je     c001cb95 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cb8b:	83 ec 0c             	sub    esp,0xc
c001cb8e:	68 a0 be 02 c0       	push   0xc002bea0
c001cb93:	eb 34                	jmp    c001cbc9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cb95:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cb9d:	83 ec 0c             	sub    esp,0xc
c001cba0:	6a 34                	push   0x34
c001cba2:	e8 99 2c ff ff       	call   c000f840 <malloc>
c001cba7:	59                   	pop    ecx
c001cba8:	89 c7                	mov    edi,eax
c001cbaa:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cbae:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cbb0:	56                   	push   esi
c001cbb1:	57                   	push   edi
c001cbb2:	6a 00                	push   0x0
c001cbb4:	6a 34                	push   0x34
c001cbb6:	53                   	push   ebx
c001cbb7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cbba:	83 c4 20             	add    esp,0x20
c001cbbd:	85 c0                	test   eax,eax
c001cbbf:	74 17                	je     c001cbd8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cbc1:	83 ec 0c             	sub    esp,0xc
c001cbc4:	68 b7 be 02 c0       	push   0xc002beb7
c001cbc9:	e8 af d8 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001cbce:	83 c4 10             	add    esp,0x10
c001cbd1:	31 c0                	xor    eax,eax
c001cbd3:	e9 31 02 00 00       	jmp    c001ce09 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cbd8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cbde:	75 e1                	jne    c001cbc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbe0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cbe3:	85 c0                	test   eax,eax
c001cbe5:	74 da                	je     c001cbc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbe7:	52                   	push   edx
c001cbe8:	31 d2                	xor    edx,edx
c001cbea:	52                   	push   edx
c001cbeb:	50                   	push   eax
c001cbec:	53                   	push   ebx
c001cbed:	e8 5c 68 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cbf2:	83 c4 10             	add    esp,0x10
c001cbf5:	85 c0                	test   eax,eax
c001cbf7:	75 c8                	jne    c001cbc1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cbf9:	83 ec 0c             	sub    esp,0xc
c001cbfc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc00:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc04:	31 ed                	xor    ebp,ebp
c001cc06:	0f af c2             	imul   eax,edx
c001cc09:	50                   	push   eax
c001cc0a:	e8 31 2c ff ff       	call   c000f840 <malloc>
c001cc0f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cc11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc15:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc24:	0f af c2             	imul   eax,edx
c001cc27:	99                   	cdq    
c001cc28:	52                   	push   edx
c001cc29:	50                   	push   eax
c001cc2a:	53                   	push   ebx
c001cc2b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc2e:	83 c4 20             	add    esp,0x20
c001cc31:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc39:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cc41:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cc49:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc51:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cc55:	0f 86 aa 00 00 00    	jbe    c001cd05 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cc5b:	0f b7 f5             	movzx  esi,bp
c001cc5e:	6b f6 28             	imul   esi,esi,0x28
c001cc61:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc65:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc6c:	50                   	push   eax
c001cc6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cc71:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cc75:	8b 16                	mov    edx,DWORD PTR [esi]
c001cc77:	6b c0 28             	imul   eax,eax,0x28
c001cc7a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cc7e:	89 d0                	mov    eax,edx
c001cc80:	31 d2                	xor    edx,edx
c001cc82:	52                   	push   edx
c001cc83:	50                   	push   eax
c001cc84:	53                   	push   ebx
c001cc85:	e8 c4 67 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cc8a:	83 c4 0c             	add    esp,0xc
c001cc8d:	6a 20                	push   0x20
c001cc8f:	6a 00                	push   0x0
c001cc91:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cc95:	52                   	push   edx
c001cc96:	e8 dd 3a fe ff       	call   c0000778 <memset>
c001cc9b:	58                   	pop    eax
c001cc9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc9e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cca2:	51                   	push   ecx
c001cca3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cca7:	52                   	push   edx
c001cca8:	6a 00                	push   0x0
c001ccaa:	6a 1f                	push   0x1f
c001ccac:	53                   	push   ebx
c001ccad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccb0:	83 c4 18             	add    esp,0x18
c001ccb3:	68 ce be 02 c0       	push   0xc002bece
c001ccb8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ccbc:	52                   	push   edx
c001ccbd:	e8 fe 3b fe ff       	call   c00008c0 <strcmp>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	85 c0                	test   eax,eax
c001ccc7:	75 0f                	jne    c001ccd8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ccc9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cccc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccd4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccd8:	50                   	push   eax
c001ccd9:	50                   	push   eax
c001ccda:	68 d6 be 02 c0       	push   0xc002bed6
c001ccdf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cce3:	50                   	push   eax
c001cce4:	e8 d7 3b fe ff       	call   c00008c0 <strcmp>
c001cce9:	83 c4 10             	add    esp,0x10
c001ccec:	85 c0                	test   eax,eax
c001ccee:	75 0f                	jne    c001ccff <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ccf0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ccf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ccf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ccfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ccff:	45                   	inc    ebp
c001cd00:	e9 4c ff ff ff       	jmp    c001cc51 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cd05:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cd0a:	75 10                	jne    c001cd1c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	68 de be 02 c0       	push   0xc002bede
c001cd14:	e8 64 d7 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001cd19:	83 c4 10             	add    esp,0x10
c001cd1c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cd21:	75 10                	jne    c001cd33 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cd23:	83 ec 0c             	sub    esp,0xc
c001cd26:	68 de be 02 c0       	push   0xc002bede
c001cd2b:	e8 4d d7 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001cd30:	83 c4 10             	add    esp,0x10
c001cd33:	31 d2                	xor    edx,edx
c001cd35:	50                   	push   eax
c001cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd3a:	52                   	push   edx
c001cd3b:	50                   	push   eax
c001cd3c:	53                   	push   ebx
c001cd3d:	e8 0c 67 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cd42:	5a                   	pop    edx
c001cd43:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cd47:	e8 f4 2a ff ff       	call   c000f840 <malloc>
c001cd4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cd54:	31 c9                	xor    ecx,ecx
c001cd56:	5e                   	pop    esi
c001cd57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd59:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cd5d:	55                   	push   ebp
c001cd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd62:	51                   	push   ecx
c001cd63:	52                   	push   edx
c001cd64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cd68:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cd6c:	53                   	push   ebx
c001cd6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd70:	83 c4 14             	add    esp,0x14
c001cd73:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd77:	e8 c4 2a ff ff       	call   c000f840 <malloc>
c001cd7c:	89 c6                	mov    esi,eax
c001cd7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd80:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd83:	56                   	push   esi
c001cd84:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cd8c:	51                   	push   ecx
c001cd8d:	52                   	push   edx
c001cd8e:	53                   	push   ebx
c001cd8f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd96:	8b 15 a0 17 03 c0    	mov    edx,DWORD PTR ds:0xc00317a0
c001cd9c:	83 c4 1c             	add    esp,0x1c
c001cd9f:	c1 e8 04             	shr    eax,0x4
c001cda2:	89 04 95 20 16 03 c0 	mov    DWORD PTR [edx*4-0x3ffce9e0],eax
c001cda9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cdad:	31 d2                	xor    edx,edx
c001cdaf:	52                   	push   edx
c001cdb0:	50                   	push   eax
c001cdb1:	53                   	push   ebx
c001cdb2:	e8 97 66 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cdb7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cdb9:	31 d2                	xor    edx,edx
c001cdbb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdbe:	56                   	push   esi
c001cdbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cdc3:	52                   	push   edx
c001cdc4:	50                   	push   eax
c001cdc5:	53                   	push   ebx
c001cdc6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cdc9:	83 c4 14             	add    esp,0x14
c001cdcc:	53                   	push   ebx
c001cdcd:	e8 1c 66 ff ff       	call   c00133ee <File::close()>
c001cdd2:	5d                   	pop    ebp
c001cdd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdd7:	e8 74 2a ff ff       	call   c000f850 <free>
c001cddc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cddf:	e8 6c 2a ff ff       	call   c000f850 <free>
c001cde4:	a1 a0 17 03 c0       	mov    eax,ds:0xc00317a0
c001cde9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cded:	8d 50 01             	lea    edx,[eax+0x1]
c001cdf0:	89 0c 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],ecx
c001cdf7:	89 34 85 a0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce960],esi
c001cdfe:	89 15 a0 17 03 c0    	mov    DWORD PTR ds:0xc00317a0,edx
c001ce04:	83 c4 10             	add    esp,0x10
c001ce07:	b0 01                	mov    al,0x1
c001ce09:	83 c4 5c             	add    esp,0x5c
c001ce0c:	5b                   	pop    ebx
c001ce0d:	5e                   	pop    esi
c001ce0e:	5f                   	pop    edi
c001ce0f:	5d                   	pop    ebp
c001ce10:	c3                   	ret    

c001ce11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ce11:	55                   	push   ebp
c001ce12:	57                   	push   edi
c001ce13:	56                   	push   esi
c001ce14:	53                   	push   ebx
c001ce15:	81 ec 68 03 00 00    	sub    esp,0x368
c001ce1b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ce22:	8b 1d f4 17 03 c0    	mov    ebx,DWORD PTR ds:0xc00317f4
c001ce28:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001ce2c:	68 14 01 00 00       	push   0x114
c001ce31:	e8 0a 2a ff ff       	call   c000f840 <malloc>
c001ce36:	83 c4 0c             	add    esp,0xc
c001ce39:	89 c5                	mov    ebp,eax
c001ce3b:	53                   	push   ebx
c001ce3c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ce43:	50                   	push   eax
c001ce44:	e8 e3 64 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001ce49:	5e                   	pop    esi
c001ce4a:	5f                   	pop    edi
c001ce4b:	6a 01                	push   0x1
c001ce4d:	55                   	push   ebp
c001ce4e:	e8 3d 65 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001ce53:	83 c4 10             	add    esp,0x10
c001ce56:	85 c0                	test   eax,eax
c001ce58:	0f 85 8d 06 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce5e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	6a 34                	push   0x34
c001ce6b:	e8 d0 29 ff ff       	call   c000f840 <malloc>
c001ce70:	5b                   	pop    ebx
c001ce71:	89 c7                	mov    edi,eax
c001ce73:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ce77:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce7a:	53                   	push   ebx
c001ce7b:	57                   	push   edi
c001ce7c:	6a 00                	push   0x0
c001ce7e:	6a 34                	push   0x34
c001ce80:	55                   	push   ebp
c001ce81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce84:	83 c4 20             	add    esp,0x20
c001ce87:	85 c0                	test   eax,eax
c001ce89:	0f 85 5c 06 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce8f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce95:	0f 85 50 06 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ce9b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce9e:	85 c0                	test   eax,eax
c001cea0:	0f 84 45 06 00 00    	je     c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cea6:	31 d2                	xor    edx,edx
c001cea8:	51                   	push   ecx
c001cea9:	52                   	push   edx
c001ceaa:	50                   	push   eax
c001ceab:	55                   	push   ebp
c001ceac:	e8 9d 65 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	85 c0                	test   eax,eax
c001ceb6:	0f 85 2f 06 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cec2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cec6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ceca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cece:	0f af c2             	imul   eax,edx
c001ced1:	50                   	push   eax
c001ced2:	e8 69 29 ff ff       	call   c000f840 <malloc>
c001ced7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ceda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cede:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cee1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cee5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cee9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ceed:	0f af c2             	imul   eax,edx
c001cef0:	99                   	cdq    
c001cef1:	52                   	push   edx
c001cef2:	50                   	push   eax
c001cef3:	55                   	push   ebp
c001cef4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cef7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cefa:	83 c4 20             	add    esp,0x20
c001cefd:	85 c0                	test   eax,eax
c001ceff:	0f 84 e6 05 00 00    	je     c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf05:	52                   	push   edx
c001cf06:	31 d2                	xor    edx,edx
c001cf08:	52                   	push   edx
c001cf09:	50                   	push   eax
c001cf0a:	55                   	push   ebp
c001cf0b:	e8 3e 65 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cf10:	83 c4 10             	add    esp,0x10
c001cf13:	85 c0                	test   eax,eax
c001cf15:	0f 85 d0 05 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf1b:	83 ec 0c             	sub    esp,0xc
c001cf1e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf22:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf26:	31 f6                	xor    esi,esi
c001cf28:	0f af c2             	imul   eax,edx
c001cf2b:	50                   	push   eax
c001cf2c:	e8 0f 29 ff ff       	call   c000f840 <malloc>
c001cf31:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf3f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cf43:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cf47:	0f af c2             	imul   eax,edx
c001cf4a:	99                   	cdq    
c001cf4b:	52                   	push   edx
c001cf4c:	50                   	push   eax
c001cf4d:	55                   	push   ebp
c001cf4e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf51:	83 c4 20             	add    esp,0x20
c001cf54:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cf58:	0f 86 8a 00 00 00    	jbe    c001cfe8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cf5e:	0f b7 de             	movzx  ebx,si
c001cf61:	c1 e3 05             	shl    ebx,0x5
c001cf64:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cf68:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cf6b:	75 75                	jne    c001cfe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cf6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf70:	31 d2                	xor    edx,edx
c001cf72:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf76:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cf79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf7d:	50                   	push   eax
c001cf7e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cf81:	52                   	push   edx
c001cf82:	50                   	push   eax
c001cf83:	55                   	push   ebp
c001cf84:	e8 c5 64 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001cf89:	83 c4 10             	add    esp,0x10
c001cf8c:	85 c0                	test   eax,eax
c001cf8e:	0f 85 57 05 00 00    	jne    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cf94:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cf9b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf9e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cfa2:	31 d2                	xor    edx,edx
c001cfa4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cfa8:	83 ec 0c             	sub    esp,0xc
c001cfab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cfaf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cfb6:	50                   	push   eax
c001cfb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfbf:	52                   	push   edx
c001cfc0:	50                   	push   eax
c001cfc1:	55                   	push   ebp
c001cfc2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfc5:	83 c4 1c             	add    esp,0x1c
c001cfc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cfcb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cfce:	50                   	push   eax
c001cfcf:	6a 00                	push   0x0
c001cfd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cfd9:	50                   	push   eax
c001cfda:	e8 99 37 fe ff       	call   c0000778 <memset>
c001cfdf:	83 c4 10             	add    esp,0x10
c001cfe2:	46                   	inc    esi
c001cfe3:	e9 6c ff ff ff       	jmp    c001cf54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cfe8:	53                   	push   ebx
c001cfe9:	31 db                	xor    ebx,ebx
c001cfeb:	68 00 01 00 00       	push   0x100
c001cff0:	6a 00                	push   0x0
c001cff2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cff6:	50                   	push   eax
c001cff7:	e8 7c 37 fe ff       	call   c0000778 <memset>
c001cffc:	83 c4 0c             	add    esp,0xc
c001cfff:	68 00 01 00 00       	push   0x100
c001d004:	6a 00                	push   0x0
c001d006:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d00d:	50                   	push   eax
c001d00e:	e8 65 37 fe ff       	call   c0000778 <memset>
c001d013:	83 c4 10             	add    esp,0x10
c001d016:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d01e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d026:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d02e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d036:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d03e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d042:	0f 86 30 01 00 00    	jbe    c001d178 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d048:	0f b7 f3             	movzx  esi,bx
c001d04b:	6b f6 28             	imul   esi,esi,0x28
c001d04e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d052:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d055:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d059:	52                   	push   edx
c001d05a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d05e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d062:	8b 06                	mov    eax,DWORD PTR [esi]
c001d064:	6b d2 28             	imul   edx,edx,0x28
c001d067:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d06b:	31 d2                	xor    edx,edx
c001d06d:	52                   	push   edx
c001d06e:	50                   	push   eax
c001d06f:	55                   	push   ebp
c001d070:	e8 d9 63 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d075:	83 c4 0c             	add    esp,0xc
c001d078:	6a 20                	push   0x20
c001d07a:	6a 00                	push   0x0
c001d07c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d083:	51                   	push   ecx
c001d084:	e8 ef 36 fe ff       	call   c0000778 <memset>
c001d089:	59                   	pop    ecx
c001d08a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d08d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d091:	52                   	push   edx
c001d092:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d099:	51                   	push   ecx
c001d09a:	6a 00                	push   0x0
c001d09c:	6a 1f                	push   0x1f
c001d09e:	55                   	push   ebp
c001d09f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0a2:	83 c4 1c             	add    esp,0x1c
c001d0a5:	6a 09                	push   0x9
c001d0a7:	68 f8 be 02 c0       	push   0xc002bef8
c001d0ac:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d0b3:	51                   	push   ecx
c001d0b4:	e8 87 35 fe ff       	call   c0000640 <memcmp>
c001d0b9:	83 c4 10             	add    esp,0x10
c001d0bc:	85 c0                	test   eax,eax
c001d0be:	75 21                	jne    c001d0e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0c8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d0cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d0d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d0d3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d0da:	89 d0                	mov    eax,edx
c001d0dc:	40                   	inc    eax
c001d0dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0e1:	50                   	push   eax
c001d0e2:	6a 09                	push   0x9
c001d0e4:	68 02 bf 02 c0       	push   0xc002bf02
c001d0e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0f0:	50                   	push   eax
c001d0f1:	e8 4a 35 fe ff       	call   c0000640 <memcmp>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	85 c0                	test   eax,eax
c001d0fb:	75 21                	jne    c001d11e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d0fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d101:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d105:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d109:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d10d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d110:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d117:	89 d0                	mov    eax,edx
c001d119:	40                   	inc    eax
c001d11a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d11e:	50                   	push   eax
c001d11f:	50                   	push   eax
c001d120:	68 ce be 02 c0       	push   0xc002bece
c001d125:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d12c:	50                   	push   eax
c001d12d:	e8 8e 37 fe ff       	call   c00008c0 <strcmp>
c001d132:	83 c4 10             	add    esp,0x10
c001d135:	85 c0                	test   eax,eax
c001d137:	75 0f                	jne    c001d148 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d139:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d13c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d140:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d144:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d148:	50                   	push   eax
c001d149:	50                   	push   eax
c001d14a:	68 d6 be 02 c0       	push   0xc002bed6
c001d14f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d156:	50                   	push   eax
c001d157:	e8 64 37 fe ff       	call   c00008c0 <strcmp>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	85 c0                	test   eax,eax
c001d161:	75 0f                	jne    c001d172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d163:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d166:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d16a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d16e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d172:	43                   	inc    ebx
c001d173:	e9 c6 fe ff ff       	jmp    c001d03e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d178:	31 d2                	xor    edx,edx
c001d17a:	50                   	push   eax
c001d17b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d17f:	52                   	push   edx
c001d180:	50                   	push   eax
c001d181:	55                   	push   ebp
c001d182:	e8 c7 62 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d187:	58                   	pop    eax
c001d188:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d18c:	e8 af 26 ff ff       	call   c000f840 <malloc>
c001d191:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d194:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d198:	31 d2                	xor    edx,edx
c001d19a:	58                   	pop    eax
c001d19b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d19f:	53                   	push   ebx
c001d1a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d1a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1a8:	52                   	push   edx
c001d1a9:	50                   	push   eax
c001d1aa:	55                   	push   ebp
c001d1ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1ae:	83 c4 14             	add    esp,0x14
c001d1b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d1b5:	e8 86 26 ff ff       	call   c000f840 <malloc>
c001d1ba:	31 d2                	xor    edx,edx
c001d1bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d1c0:	83 c4 0c             	add    esp,0xc
c001d1c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d1c7:	52                   	push   edx
c001d1c8:	50                   	push   eax
c001d1c9:	55                   	push   ebp
c001d1ca:	e8 7f 62 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d1cf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1d2:	31 d2                	xor    edx,edx
c001d1d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d1db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1df:	52                   	push   edx
c001d1e0:	50                   	push   eax
c001d1e1:	55                   	push   ebp
c001d1e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1e5:	83 c4 20             	add    esp,0x20
c001d1e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d1f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d1f4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d1f8:	0f 84 f1 02 00 00    	je     c001d4ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d1fe:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d205:	31 d2                	xor    edx,edx
c001d207:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d20b:	c1 e8 03             	shr    eax,0x3
c001d20e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d212:	51                   	push   ecx
c001d213:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d217:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d21b:	52                   	push   edx
c001d21c:	50                   	push   eax
c001d21d:	55                   	push   ebp
c001d21e:	e8 2b 62 ff ff       	call   c001344e <File::seek(unsigned long long)>
c001d223:	5b                   	pop    ebx
c001d224:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d228:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d22f:	e8 0c 26 ff ff       	call   c000f840 <malloc>
c001d234:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d237:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d23b:	31 d2                	xor    edx,edx
c001d23d:	5e                   	pop    esi
c001d23e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d242:	50                   	push   eax
c001d243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d247:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d24b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d252:	52                   	push   edx
c001d253:	50                   	push   eax
c001d254:	55                   	push   ebp
c001d255:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d258:	83 c4 20             	add    esp,0x20
c001d25b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d263:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d267:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d26b:	0f 8d 62 02 00 00    	jge    c001d4d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d271:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d279:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d27e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d281:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d285:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d289:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d28d:	89 d8                	mov    eax,ebx
c001d28f:	c1 e8 08             	shr    eax,0x8
c001d292:	89 c6                	mov    esi,eax
c001d294:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d298:	c1 e6 04             	shl    esi,0x4
c001d29b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d29f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d2a2:	85 d2                	test   edx,edx
c001d2a4:	0f 85 bf 00 00 00    	jne    c001d369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2aa:	83 ec 0c             	sub    esp,0xc
c001d2ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2b1:	03 06                	add    eax,DWORD PTR [esi]
c001d2b3:	50                   	push   eax
c001d2b4:	e8 4b f8 ff ff       	call   c001cb04 <Thr::getAddressOfKernelSymbol(char const*)>
c001d2b9:	83 c4 10             	add    esp,0x10
c001d2bc:	89 c2                	mov    edx,eax
c001d2be:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d2c3:	85 c0                	test   eax,eax
c001d2c5:	0f 85 9e 00 00 00    	jne    c001d369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2cb:	83 ec 0c             	sub    esp,0xc
c001d2ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d2d2:	03 06                	add    eax,DWORD PTR [esi]
c001d2d4:	50                   	push   eax
c001d2d5:	e8 1b 12 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d2da:	83 c4 10             	add    esp,0x10
c001d2dd:	89 c2                	mov    edx,eax
c001d2df:	85 c0                	test   eax,eax
c001d2e1:	0f 85 82 00 00 00    	jne    c001d369 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d2e7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d2eb:	50                   	push   eax
c001d2ec:	50                   	push   eax
c001d2ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2f1:	03 06                	add    eax,DWORD PTR [esi]
c001d2f3:	50                   	push   eax
c001d2f4:	68 0c bf 02 c0       	push   0xc002bf0c
c001d2f9:	e8 d6 5a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d2fe:	58                   	pop    eax
c001d2ff:	5a                   	pop    edx
c001d300:	68 26 bf 02 c0       	push   0xc002bf26
c001d305:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d30c:	50                   	push   eax
c001d30d:	e8 22 35 fe ff       	call   c0000834 <strcpy>
c001d312:	59                   	pop    ecx
c001d313:	58                   	pop    eax
c001d314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d318:	03 06                	add    eax,DWORD PTR [esi]
c001d31a:	50                   	push   eax
c001d31b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d322:	50                   	push   eax
c001d323:	e8 4c 36 fe ff       	call   c0000974 <strcat>
c001d328:	58                   	pop    eax
c001d329:	5a                   	pop    edx
c001d32a:	68 bc bf 02 c0       	push   0xc002bfbc
c001d32f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d336:	50                   	push   eax
c001d337:	e8 38 36 fe ff       	call   c0000974 <strcat>
c001d33c:	83 c4 10             	add    esp,0x10
c001d33f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d344:	0f 84 43 01 00 00    	je     c001d48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d34a:	83 ec 0c             	sub    esp,0xc
c001d34d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d354:	50                   	push   eax
c001d355:	e8 23 d1 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d35a:	83 c4 10             	add    esp,0x10
c001d35d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d361:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d365:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d369:	80 fb 01             	cmp    bl,0x1
c001d36c:	75 7d                	jne    c001d3eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d36e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d375:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d379:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d37d:	01 ce                	add    esi,ecx
c001d37f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d385:	0f 94 c0             	sete   al
c001d388:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d38e:	0f 94 c3             	sete   bl
c001d391:	09 c3                	or     ebx,eax
c001d393:	8b 06                	mov    eax,DWORD PTR [esi]
c001d395:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d39a:	74 36                	je     c001d3d2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d39c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d39f:	84 db                	test   bl,bl
c001d3a1:	75 0a                	jne    c001d3ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d3a3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3a7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3ab:	76 37                	jbe    c001d3e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3ad:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d3b1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3b6:	0f 84 d1 00 00 00    	je     c001d48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d3bc:	83 ec 0c             	sub    esp,0xc
c001d3bf:	68 3d bf 02 c0       	push   0xc002bf3d
c001d3c4:	e8 b4 d0 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d3c9:	83 c4 10             	add    esp,0x10
c001d3cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d3d0:	eb 12                	jmp    c001d3e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3d2:	01 c1                	add    ecx,eax
c001d3d4:	84 db                	test   bl,bl
c001d3d6:	75 0c                	jne    c001d3e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3dc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d3e0:	77 02                	ja     c001d3e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d3e2:	01 d1                	add    ecx,edx
c001d3e4:	89 0e                	mov    DWORD PTR [esi],ecx
c001d3e6:	e9 df 00 00 00       	jmp    c001d4ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d3eb:	80 fb 02             	cmp    bl,0x2
c001d3ee:	75 71                	jne    c001d461 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d3f0:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d3f7:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d3fb:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d3ff:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d405:	74 15                	je     c001d41c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d407:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d40d:	74 0d                	je     c001d41c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d40f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d413:	83 e8 04             	sub    eax,0x4
c001d416:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d41a:	76 1f                	jbe    c001d43b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d41c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d420:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d425:	74 66                	je     c001d48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d427:	83 ec 0c             	sub    esp,0xc
c001d42a:	68 59 bf 02 c0       	push   0xc002bf59
c001d42f:	e8 49 d0 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d434:	83 c4 10             	add    esp,0x10
c001d437:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d43b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d43d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d442:	74 13                	je     c001d457 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d444:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d448:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d44f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d453:	01 c8                	add    eax,ecx
c001d455:	eb 04                	jmp    c001d45b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d457:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d45b:	01 c2                	add    edx,eax
c001d45d:	89 16                	mov    DWORD PTR [esi],edx
c001d45f:	eb 69                	jmp    c001d4ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d461:	0f b6 db             	movzx  ebx,bl
c001d464:	50                   	push   eax
c001d465:	50                   	push   eax
c001d466:	53                   	push   ebx
c001d467:	68 75 bf 02 c0       	push   0xc002bf75
c001d46c:	e8 63 59 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d471:	83 c4 10             	add    esp,0x10
c001d474:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d479:	74 12                	je     c001d48d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d47b:	83 ec 0c             	sub    esp,0xc
c001d47e:	68 80 bf 02 c0       	push   0xc002bf80
c001d483:	e8 f5 cf ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d488:	83 c4 10             	add    esp,0x10
c001d48b:	eb 3d                	jmp    c001d4ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d48d:	83 ec 0c             	sub    esp,0xc
c001d490:	55                   	push   ebp
c001d491:	e8 58 5f ff ff       	call   c00133ee <File::close()>
c001d496:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d499:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d49c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d49f:	59                   	pop    ecx
c001d4a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4a4:	e8 a7 23 ff ff       	call   c000f850 <free>
c001d4a9:	5b                   	pop    ebx
c001d4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4ae:	e8 9d 23 ff ff       	call   c000f850 <free>
c001d4b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4b6:	e8 95 23 ff ff       	call   c000f850 <free>
c001d4bb:	5e                   	pop    esi
c001d4bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4c0:	e8 8b 23 ff ff       	call   c000f850 <free>
c001d4c5:	83 c4 10             	add    esp,0x10
c001d4c8:	eb 21                	jmp    c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d4ca:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d4ce:	e9 90 fd ff ff       	jmp    c001d263 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d4d3:	83 ec 0c             	sub    esp,0xc
c001d4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4da:	e8 71 23 ff ff       	call   c000f850 <free>
c001d4df:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d4e3:	83 c4 10             	add    esp,0x10
c001d4e6:	e9 05 fd ff ff       	jmp    c001d1f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d4eb:	31 c0                	xor    eax,eax
c001d4ed:	eb 33                	jmp    c001d522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d4ef:	83 ec 0c             	sub    esp,0xc
c001d4f2:	55                   	push   ebp
c001d4f3:	e8 f6 5e ff ff       	call   c00133ee <File::close()>
c001d4f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d4fb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d501:	58                   	pop    eax
c001d502:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d506:	e8 45 23 ff ff       	call   c000f850 <free>
c001d50b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d50e:	e8 3d 23 ff ff       	call   c000f850 <free>
c001d513:	5a                   	pop    edx
c001d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d518:	e8 33 23 ff ff       	call   c000f850 <free>
c001d51d:	83 c4 10             	add    esp,0x10
c001d520:	b0 01                	mov    al,0x1
c001d522:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d528:	5b                   	pop    ebx
c001d529:	5e                   	pop    esi
c001d52a:	5f                   	pop    edi
c001d52b:	5d                   	pop    ebp
c001d52c:	c3                   	ret    

c001d52d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d52d:	56                   	push   esi
c001d52e:	31 d2                	xor    edx,edx
c001d530:	53                   	push   ebx
c001d531:	8b 1d 00 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031000
c001d537:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d53b:	39 d3                	cmp    ebx,edx
c001d53d:	7e 1b                	jle    c001d55a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d53f:	8b 04 95 20 12 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcede0]
c001d546:	39 c8                	cmp    eax,ecx
c001d548:	77 0d                	ja     c001d557 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d54a:	8b 34 95 20 10 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcefe0]
c001d551:	01 c6                	add    esi,eax
c001d553:	39 ce                	cmp    esi,ecx
c001d555:	77 05                	ja     c001d55c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d557:	42                   	inc    edx
c001d558:	eb e1                	jmp    c001d53b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d55a:	31 c0                	xor    eax,eax
c001d55c:	5b                   	pop    ebx
c001d55d:	5e                   	pop    esi
c001d55e:	c3                   	ret    

c001d55f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d55f:	53                   	push   ebx
c001d560:	31 c0                	xor    eax,eax
c001d562:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d566:	8b 1d 00 10 03 c0    	mov    ebx,DWORD PTR ds:0xc0031000
c001d56c:	39 c3                	cmp    ebx,eax
c001d56e:	7e 22                	jle    c001d592 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d570:	8b 14 85 20 12 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcede0]
c001d577:	39 ca                	cmp    edx,ecx
c001d579:	77 14                	ja     c001d58f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d57b:	03 14 85 20 10 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcefe0]
c001d582:	39 ca                	cmp    edx,ecx
c001d584:	76 09                	jbe    c001d58f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d586:	8b 04 85 20 14 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcebe0]
c001d58d:	eb 05                	jmp    c001d594 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d58f:	40                   	inc    eax
c001d590:	eb da                	jmp    c001d56c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d592:	31 c0                	xor    eax,eax
c001d594:	5b                   	pop    ebx
c001d595:	c3                   	ret    

c001d596 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d596:	53                   	push   ebx
c001d597:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d59b:	53                   	push   ebx
c001d59c:	e8 8c ff ff ff       	call   c001d52d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d5a1:	5a                   	pop    edx
c001d5a2:	31 d2                	xor    edx,edx
c001d5a4:	85 c0                	test   eax,eax
c001d5a6:	74 04                	je     c001d5ac <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d5a8:	89 da                	mov    edx,ebx
c001d5aa:	29 c2                	sub    edx,eax
c001d5ac:	89 d0                	mov    eax,edx
c001d5ae:	5b                   	pop    ebx
c001d5af:	c3                   	ret    

c001d5b0 <Thr::loadDLL(char const*, bool)>:
c001d5b0:	55                   	push   ebp
c001d5b1:	57                   	push   edi
c001d5b2:	56                   	push   esi
c001d5b3:	53                   	push   ebx
c001d5b4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d5ba:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d5c1:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d5c8:	56                   	push   esi
c001d5c9:	68 98 bf 02 c0       	push   0xc002bf98
c001d5ce:	e8 01 58 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d5d3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d5da:	e8 61 22 ff ff       	call   c000f840 <malloc>
c001d5df:	83 c4 0c             	add    esp,0xc
c001d5e2:	89 c3                	mov    ebx,eax
c001d5e4:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c001d5ea:	56                   	push   esi
c001d5eb:	50                   	push   eax
c001d5ec:	e8 3b 5d ff ff       	call   c001332c <File::File(char const*, Process*)>
c001d5f1:	83 c4 10             	add    esp,0x10
c001d5f4:	85 db                	test   ebx,ebx
c001d5f6:	75 3c                	jne    c001d634 <Thr::loadDLL(char const*, bool)+0x84>
c001d5f8:	89 e8                	mov    eax,ebp
c001d5fa:	84 c0                	test   al,al
c001d5fc:	0f 84 f0 01 00 00    	je     c001d7f2 <Thr::loadDLL(char const*, bool)+0x242>
c001d602:	50                   	push   eax
c001d603:	50                   	push   eax
c001d604:	68 a9 bf 02 c0       	push   0xc002bfa9
c001d609:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d60d:	57                   	push   edi
c001d60e:	e8 21 32 fe ff       	call   c0000834 <strcpy>
c001d613:	58                   	pop    eax
c001d614:	5a                   	pop    edx
c001d615:	56                   	push   esi
c001d616:	57                   	push   edi
c001d617:	e8 58 33 fe ff       	call   c0000974 <strcat>
c001d61c:	59                   	pop    ecx
c001d61d:	58                   	pop    eax
c001d61e:	68 bc bf 02 c0       	push   0xc002bfbc
c001d623:	57                   	push   edi
c001d624:	e8 4b 33 fe ff       	call   c0000974 <strcat>
c001d629:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d62c:	e8 4c ce ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d631:	83 c4 10             	add    esp,0x10
c001d634:	50                   	push   eax
c001d635:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d639:	50                   	push   eax
c001d63a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d63e:	50                   	push   eax
c001d63f:	53                   	push   ebx
c001d640:	e8 f7 5f ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001d645:	83 c4 10             	add    esp,0x10
c001d648:	85 db                	test   ebx,ebx
c001d64a:	74 0c                	je     c001d658 <Thr::loadDLL(char const*, bool)+0xa8>
c001d64c:	83 ec 0c             	sub    esp,0xc
c001d64f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d651:	53                   	push   ebx
c001d652:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d655:	83 c4 10             	add    esp,0x10
c001d658:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d65d:	75 0a                	jne    c001d669 <Thr::loadDLL(char const*, bool)+0xb9>
c001d65f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d663:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d667:	75 3c                	jne    c001d6a5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d669:	89 e8                	mov    eax,ebp
c001d66b:	84 c0                	test   al,al
c001d66d:	0f 84 67 01 00 00    	je     c001d7da <Thr::loadDLL(char const*, bool)+0x22a>
c001d673:	50                   	push   eax
c001d674:	50                   	push   eax
c001d675:	68 a9 bf 02 c0       	push   0xc002bfa9
c001d67a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d67e:	53                   	push   ebx
c001d67f:	e8 b0 31 fe ff       	call   c0000834 <strcpy>
c001d684:	58                   	pop    eax
c001d685:	5a                   	pop    edx
c001d686:	56                   	push   esi
c001d687:	53                   	push   ebx
c001d688:	e8 e7 32 fe ff       	call   c0000974 <strcat>
c001d68d:	59                   	pop    ecx
c001d68e:	5f                   	pop    edi
c001d68f:	68 bc bf 02 c0       	push   0xc002bfbc
c001d694:	53                   	push   ebx
c001d695:	e8 da 32 fe ff       	call   c0000974 <strcat>
c001d69a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d69d:	e8 db cd ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d6a2:	83 c4 10             	add    esp,0x10
c001d6a5:	e8 74 47 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c001d6aa:	51                   	push   ecx
c001d6ab:	68 03 08 00 00       	push   0x803
c001d6b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d6b4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d6b8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d6be:	83 d3 00             	adc    ebx,0x0
c001d6c1:	89 ca                	mov    edx,ecx
c001d6c3:	89 d1                	mov    ecx,edx
c001d6c5:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d6c9:	51                   	push   ecx
c001d6ca:	50                   	push   eax
c001d6cb:	e8 70 4c ff ff       	call   c0012340 <VAS::allocatePages(int, int)>
c001d6d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d6d4:	89 c3                	mov    ebx,eax
c001d6d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6da:	05 ff 0f 00 00       	add    eax,0xfff
c001d6df:	83 d2 00             	adc    edx,0x0
c001d6e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d6e6:	c1 ea 0c             	shr    edx,0xc
c001d6e9:	52                   	push   edx
c001d6ea:	50                   	push   eax
c001d6eb:	53                   	push   ebx
c001d6ec:	68 be bf 02 c0       	push   0xc002bfbe
c001d6f1:	e8 de 56 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d6f6:	83 c4 14             	add    esp,0x14
c001d6f9:	56                   	push   esi
c001d6fa:	e8 95 30 fe ff       	call   c0000794 <strlen>
c001d6ff:	8b 3d 00 10 03 c0    	mov    edi,DWORD PTR ds:0xc0031000
c001d705:	40                   	inc    eax
c001d706:	89 04 24             	mov    DWORD PTR [esp],eax
c001d709:	e8 32 21 ff ff       	call   c000f840 <malloc>
c001d70e:	89 04 bd 20 14 03 c0 	mov    DWORD PTR [edi*4-0x3ffcebe0],eax
c001d715:	5f                   	pop    edi
c001d716:	58                   	pop    eax
c001d717:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001d71c:	56                   	push   esi
c001d71d:	ff 34 85 20 14 03 c0 	push   DWORD PTR [eax*4-0x3ffcebe0]
c001d724:	e8 0b 31 fe ff       	call   c0000834 <strcpy>
c001d729:	a1 00 10 03 c0       	mov    eax,ds:0xc0031000
c001d72e:	8d 50 01             	lea    edx,[eax+0x1]
c001d731:	89 1c 85 20 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffcede0],ebx
c001d738:	89 15 00 10 03 c0    	mov    DWORD PTR ds:0xc0031000,edx
c001d73e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d742:	83 c4 0c             	add    esp,0xc
c001d745:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c001d74c:	6a 01                	push   0x1
c001d74e:	53                   	push   ebx
c001d74f:	56                   	push   esi
c001d750:	e8 bc f6 ff ff       	call   c001ce11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d755:	83 c4 10             	add    esp,0x10
c001d758:	89 c7                	mov    edi,eax
c001d75a:	84 c0                	test   al,al
c001d75c:	0f 85 8c 00 00 00    	jne    c001d7ee <Thr::loadDLL(char const*, bool)+0x23e>
c001d762:	89 e8                	mov    eax,ebp
c001d764:	84 c0                	test   al,al
c001d766:	74 76                	je     c001d7de <Thr::loadDLL(char const*, bool)+0x22e>
c001d768:	83 ec 0c             	sub    esp,0xc
c001d76b:	68 e2 bf 02 c0       	push   0xc002bfe2
c001d770:	e8 08 cd ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d775:	83 c4 10             	add    esp,0x10
c001d778:	eb 64                	jmp    c001d7de <Thr::loadDLL(char const*, bool)+0x22e>
c001d77a:	e8 9f 46 ff ff       	call   c0011e1e <Virt::getAKernelVAS()>
c001d77f:	89 f5                	mov    ebp,esi
c001d781:	c1 e5 0c             	shl    ebp,0xc
c001d784:	52                   	push   edx
c001d785:	01 dd                	add    ebp,ebx
c001d787:	52                   	push   edx
c001d788:	55                   	push   ebp
c001d789:	50                   	push   eax
c001d78a:	e8 2b 47 ff ff       	call   c0011eba <VAS::getPageTableEntry(unsigned long)>
c001d78f:	83 c4 10             	add    esp,0x10
c001d792:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d795:	75 0c                	jne    c001d7a3 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d797:	83 ec 0c             	sub    esp,0xc
c001d79a:	55                   	push   ebp
c001d79b:	e8 b3 26 ff ff       	call   c000fe53 <Phys::freePage(unsigned long)>
c001d7a0:	83 c4 10             	add    esp,0x10
c001d7a3:	46                   	inc    esi
c001d7a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d7ac:	05 ff 0f 00 00       	add    eax,0xfff
c001d7b1:	83 d2 00             	adc    edx,0x0
c001d7b4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7b8:	c1 ea 0c             	shr    edx,0xc
c001d7bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d7bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d7c3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d7c7:	ba 00 00 00 00       	mov    edx,0x0
c001d7cc:	89 d0                	mov    eax,edx
c001d7ce:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d7d2:	72 a6                	jb     c001d77a <Thr::loadDLL(char const*, bool)+0x1ca>
c001d7d4:	89 f8                	mov    eax,edi
c001d7d6:	84 c0                	test   al,al
c001d7d8:	75 18                	jne    c001d7f2 <Thr::loadDLL(char const*, bool)+0x242>
c001d7da:	31 db                	xor    ebx,ebx
c001d7dc:	eb 14                	jmp    c001d7f2 <Thr::loadDLL(char const*, bool)+0x242>
c001d7de:	83 ec 0c             	sub    esp,0xc
c001d7e1:	68 01 c0 02 c0       	push   0xc002c001
c001d7e6:	e8 92 cc ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d7eb:	83 c4 10             	add    esp,0x10
c001d7ee:	31 f6                	xor    esi,esi
c001d7f0:	eb b2                	jmp    c001d7a4 <Thr::loadDLL(char const*, bool)+0x1f4>
c001d7f2:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d7f8:	89 d8                	mov    eax,ebx
c001d7fa:	5b                   	pop    ebx
c001d7fb:	5e                   	pop    esi
c001d7fc:	5f                   	pop    edi
c001d7fd:	5d                   	pop    ebp
c001d7fe:	c3                   	ret    

c001d7ff <Thr::executeDLL(unsigned long, void*)>:
c001d7ff:	56                   	push   esi
c001d800:	53                   	push   ebx
c001d801:	52                   	push   edx
c001d802:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d806:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d80a:	85 db                	test   ebx,ebx
c001d80c:	75 10                	jne    c001d81e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d80e:	83 ec 0c             	sub    esp,0xc
c001d811:	68 1d c0 02 c0       	push   0xc002c01d
c001d816:	e8 62 cc ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001d81b:	83 c4 10             	add    esp,0x10
c001d81e:	50                   	push   eax
c001d81f:	50                   	push   eax
c001d820:	53                   	push   ebx
c001d821:	68 47 c0 02 c0       	push   0xc002c047
c001d826:	e8 a9 55 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001d82b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d82f:	89 d8                	mov    eax,ebx
c001d831:	83 c4 14             	add    esp,0x14
c001d834:	5b                   	pop    ebx
c001d835:	5e                   	pop    esi
c001d836:	ff e0                	jmp    eax

c001d838 <changeTSS>:
c001d838:	83 ec 14             	sub    esp,0x14
c001d83b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d840:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d843:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d848:	c1 e2 15             	shl    edx,0x15
c001d84b:	29 d0                	sub    eax,edx
c001d84d:	50                   	push   eax
c001d84e:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001d853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d859:	05 7c 11 00 00       	add    eax,0x117c
c001d85e:	50                   	push   eax
c001d85f:	e8 52 3c ff ff       	call   c00114b6 <TSS::setESP(unsigned long)>
c001d864:	83 c4 1c             	add    esp,0x1c
c001d867:	c3                   	ret    

c001d868 <Process::addArgs(char**)>:
c001d868:	57                   	push   edi
c001d869:	56                   	push   esi
c001d86a:	53                   	push   ebx
c001d86b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d86f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d873:	c7 86 36 19 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1936],0x0
c001d87d:	85 ff                	test   edi,edi
c001d87f:	74 3d                	je     c001d8be <Process::addArgs(char**)+0x56>
c001d881:	8b 07                	mov    eax,DWORD PTR [edi]
c001d883:	85 c0                	test   eax,eax
c001d885:	74 37                	je     c001d8be <Process::addArgs(char**)+0x56>
c001d887:	31 db                	xor    ebx,ebx
c001d889:	83 ec 0c             	sub    esp,0xc
c001d88c:	50                   	push   eax
c001d88d:	e8 02 2f fe ff       	call   c0000794 <strlen>
c001d892:	40                   	inc    eax
c001d893:	89 04 24             	mov    DWORD PTR [esp],eax
c001d896:	e8 a5 1f ff ff       	call   c000f840 <malloc>
c001d89b:	89 84 9e 3a 19 00 00 	mov    DWORD PTR [esi+ebx*4+0x193a],eax
c001d8a2:	5a                   	pop    edx
c001d8a3:	59                   	pop    ecx
c001d8a4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d8a7:	43                   	inc    ebx
c001d8a8:	50                   	push   eax
c001d8a9:	e8 86 2f fe ff       	call   c0000834 <strcpy>
c001d8ae:	ff 86 36 19 00 00    	inc    DWORD PTR [esi+0x1936]
c001d8b4:	83 c4 10             	add    esp,0x10
c001d8b7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d8ba:	85 c0                	test   eax,eax
c001d8bc:	75 cb                	jne    c001d889 <Process::addArgs(char**)+0x21>
c001d8be:	5b                   	pop    ebx
c001d8bf:	5e                   	pop    esi
c001d8c0:	5f                   	pop    edi
c001d8c1:	c3                   	ret    

c001d8c2 <Process::Process(char const*, Process*, char**)>:
c001d8c2:	56                   	push   esi
c001d8c3:	53                   	push   ebx
c001d8c4:	83 ec 14             	sub    esp,0x14
c001d8c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8cb:	05 0c 02 00 00       	add    eax,0x20c
c001d8d0:	bb 07 00 00 00       	mov    ebx,0x7
c001d8d5:	89 c6                	mov    esi,eax
c001d8d7:	85 db                	test   ebx,ebx
c001d8d9:	78 15                	js     c001d8f0 <Process::Process(char const*, Process*, char**)+0x2e>
c001d8db:	83 ec 0c             	sub    esp,0xc
c001d8de:	56                   	push   esi
c001d8df:	e8 4e b2 00 00       	call   c0028b32 <ThreadControlBlock::ThreadControlBlock()>
c001d8e4:	83 c4 10             	add    esp,0x10
c001d8e7:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001d8ed:	4b                   	dec    ebx
c001d8ee:	eb e7                	jmp    c001d8d7 <Process::Process(char const*, Process*, char**)+0x15>
c001d8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8f4:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001d8fb:	83 ec 0c             	sub    esp,0xc
c001d8fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d902:	e8 c7 c9 ff ff       	call   c001a2ce <Krnl::newProcessEnv(Process*)>
c001d907:	83 c4 10             	add    esp,0x10
c001d90a:	89 c2                	mov    edx,eax
c001d90c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d910:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001d916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d91a:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001d923:	a1 10 d8 02 c0       	mov    eax,ds:0xc002d810
c001d928:	8d 50 01             	lea    edx,[eax+0x1]
c001d92b:	89 15 10 d8 02 c0    	mov    DWORD PTR ds:0xc002d810,edx
c001d931:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d935:	89 02                	mov    DWORD PTR [edx],eax
c001d937:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d93f:	83 ec 0c             	sub    esp,0xc
c001d942:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d946:	e8 f5 1e ff ff       	call   c000f840 <malloc>
c001d94b:	83 c4 10             	add    esp,0x10
c001d94e:	89 c3                	mov    ebx,eax
c001d950:	83 ec 08             	sub    esp,0x8
c001d953:	6a 00                	push   0x0
c001d955:	53                   	push   ebx
c001d956:	e8 8d 4d ff ff       	call   c00126e8 <VAS::VAS(bool)>
c001d95b:	83 c4 10             	add    esp,0x10
c001d95e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d962:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001d968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d96c:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001d976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d97a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d97e:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001d984:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d988:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d98e:	85 c0                	test   eax,eax
c001d990:	74 42                	je     c001d9d4 <Process::Process(char const*, Process*, char**)+0x112>
c001d992:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d996:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d99c:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001d9a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9a6:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001d9ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9b0:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001d9b6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d9bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9c0:	05 0c 01 00 00       	add    eax,0x10c
c001d9c5:	83 ec 08             	sub    esp,0x8
c001d9c8:	52                   	push   edx
c001d9c9:	50                   	push   eax
c001d9ca:	e8 65 2e fe ff       	call   c0000834 <strcpy>
c001d9cf:	83 c4 10             	add    esp,0x10
c001d9d2:	eb 63                	jmp    c001da37 <Process::Process(char const*, Process*, char**)+0x175>
c001d9d4:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d9dc:	83 ec 0c             	sub    esp,0xc
c001d9df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d9e3:	e8 58 1e ff ff       	call   c000f840 <malloc>
c001d9e8:	83 c4 10             	add    esp,0x10
c001d9eb:	89 c3                	mov    ebx,eax
c001d9ed:	83 ec 08             	sub    esp,0x8
c001d9f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d9f4:	53                   	push   ebx
c001d9f5:	e8 ba 37 ff ff       	call   c00111b4 <VgaText::VgaText(char const*)>
c001d9fa:	83 c4 10             	add    esp,0x10
c001d9fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da01:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001da07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da0b:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	50                   	push   eax
c001da15:	e8 8d 2b ff ff       	call   c00105a7 <addToTerminalCycle(VgaText*)>
c001da1a:	83 c4 10             	add    esp,0x10
c001da1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da21:	05 0c 01 00 00       	add    eax,0x10c
c001da26:	83 ec 08             	sub    esp,0x8
c001da29:	68 66 c0 02 c0       	push   0xc002c066
c001da2e:	50                   	push   eax
c001da2f:	e8 00 2e fe ff       	call   c0000834 <strcpy>
c001da34:	83 c4 10             	add    esp,0x10
c001da37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da3b:	83 c0 0c             	add    eax,0xc
c001da3e:	83 ec 08             	sub    esp,0x8
c001da41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da45:	50                   	push   eax
c001da46:	e8 e9 2d fe ff       	call   c0000834 <strcpy>
c001da4b:	83 c4 10             	add    esp,0x10
c001da4e:	83 ec 08             	sub    esp,0x8
c001da51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001da55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da59:	e8 0a fe ff ff       	call   c001d868 <Process::addArgs(char**)>
c001da5e:	83 c4 10             	add    esp,0x10
c001da61:	83 ec 08             	sub    esp,0x8
c001da64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da6c:	e8 6a ee ff ff       	call   c001c8db <Thr::loadProgramIntoMemory(Process*, char const*)>
c001da71:	83 c4 10             	add    esp,0x10
c001da74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da78:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001da7c:	83 f0 01             	xor    eax,0x1
c001da7f:	88 c2                	mov    dl,al
c001da81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da85:	88 90 3e 1b 00 00    	mov    BYTE PTR [eax+0x1b3e],dl
c001da8b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da90:	83 ec 08             	sub    esp,0x8
c001da93:	50                   	push   eax
c001da94:	68 64 c1 02 c0       	push   0xc002c164
c001da99:	e8 36 53 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001da9e:	83 c4 10             	add    esp,0x10
c001daa1:	90                   	nop
c001daa2:	83 c4 14             	add    esp,0x14
c001daa5:	5b                   	pop    ebx
c001daa6:	5e                   	pop    esi
c001daa7:	c3                   	ret    

c001daa8 <Process::Process(bool, char const*, Process*, char**)>:
c001daa8:	56                   	push   esi
c001daa9:	53                   	push   ebx
c001daaa:	83 ec 24             	sub    esp,0x24
c001daad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dab1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dab5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dab9:	05 0c 02 00 00       	add    eax,0x20c
c001dabe:	bb 07 00 00 00       	mov    ebx,0x7
c001dac3:	89 c6                	mov    esi,eax
c001dac5:	85 db                	test   ebx,ebx
c001dac7:	78 15                	js     c001dade <Process::Process(bool, char const*, Process*, char**)+0x36>
c001dac9:	83 ec 0c             	sub    esp,0xc
c001dacc:	56                   	push   esi
c001dacd:	e8 60 b0 00 00       	call   c0028b32 <ThreadControlBlock::ThreadControlBlock()>
c001dad2:	83 c4 10             	add    esp,0x10
c001dad5:	81 c6 e3 02 00 00    	add    esi,0x2e3
c001dadb:	4b                   	dec    ebx
c001dadc:	eb e7                	jmp    c001dac5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dade:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dae2:	c6 80 3e 1b 00 00 00 	mov    BYTE PTR [eax+0x1b3e],0x0
c001dae9:	83 ec 0c             	sub    esp,0xc
c001daec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001daf0:	e8 d9 c7 ff ff       	call   c001a2ce <Krnl::newProcessEnv(Process*)>
c001daf5:	83 c4 10             	add    esp,0x10
c001daf8:	89 c2                	mov    edx,eax
c001dafa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dafe:	89 90 3a 1b 00 00    	mov    DWORD PTR [eax+0x1b3a],edx
c001db04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db08:	66 c7 80 24 19 00 00 00 00 	mov    WORD PTR [eax+0x1924],0x0
c001db11:	a1 10 d8 02 c0       	mov    eax,ds:0xc002d810
c001db16:	8d 50 01             	lea    edx,[eax+0x1]
c001db19:	89 15 10 d8 02 c0    	mov    DWORD PTR ds:0xc002d810,edx
c001db1f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db23:	89 02                	mov    DWORD PTR [edx],eax
c001db25:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001db2d:	83 ec 0c             	sub    esp,0xc
c001db30:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001db34:	e8 07 1d ff ff       	call   c000f840 <malloc>
c001db39:	83 c4 10             	add    esp,0x10
c001db3c:	89 c3                	mov    ebx,eax
c001db3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001db43:	83 ec 08             	sub    esp,0x8
c001db46:	50                   	push   eax
c001db47:	53                   	push   ebx
c001db48:	e8 9b 4b ff ff       	call   c00126e8 <VAS::VAS(bool)>
c001db4d:	83 c4 10             	add    esp,0x10
c001db50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db54:	89 98 32 19 00 00    	mov    DWORD PTR [eax+0x1932],ebx
c001db5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db5e:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001db68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db6c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db70:	89 90 2a 19 00 00    	mov    DWORD PTR [eax+0x192a],edx
c001db76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db7a:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db80:	85 c0                	test   eax,eax
c001db82:	74 42                	je     c001dbc6 <Process::Process(bool, char const*, Process*, char**)+0x11e>
c001db84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db88:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001db8e:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001db94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001db98:	89 90 26 19 00 00    	mov    DWORD PTR [eax+0x1926],edx
c001db9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dba2:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001dba8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbb2:	05 0c 01 00 00       	add    eax,0x10c
c001dbb7:	83 ec 08             	sub    esp,0x8
c001dbba:	52                   	push   edx
c001dbbb:	50                   	push   eax
c001dbbc:	e8 73 2c fe ff       	call   c0000834 <strcpy>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	eb 63                	jmp    c001dc29 <Process::Process(bool, char const*, Process*, char**)+0x181>
c001dbc6:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dbd5:	e8 66 1c ff ff       	call   c000f840 <malloc>
c001dbda:	83 c4 10             	add    esp,0x10
c001dbdd:	89 c3                	mov    ebx,eax
c001dbdf:	83 ec 08             	sub    esp,0x8
c001dbe2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dbe6:	53                   	push   ebx
c001dbe7:	e8 c8 35 ff ff       	call   c00111b4 <VgaText::VgaText(char const*)>
c001dbec:	83 c4 10             	add    esp,0x10
c001dbef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbf3:	89 98 26 19 00 00    	mov    DWORD PTR [eax+0x1926],ebx
c001dbf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dbfd:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001dc03:	83 ec 0c             	sub    esp,0xc
c001dc06:	50                   	push   eax
c001dc07:	e8 9b 29 ff ff       	call   c00105a7 <addToTerminalCycle(VgaText*)>
c001dc0c:	83 c4 10             	add    esp,0x10
c001dc0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc13:	05 0c 01 00 00       	add    eax,0x10c
c001dc18:	83 ec 08             	sub    esp,0x8
c001dc1b:	68 66 c0 02 c0       	push   0xc002c066
c001dc20:	50                   	push   eax
c001dc21:	e8 0e 2c fe ff       	call   c0000834 <strcpy>
c001dc26:	83 c4 10             	add    esp,0x10
c001dc29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc2d:	83 c0 0c             	add    eax,0xc
c001dc30:	83 ec 08             	sub    esp,0x8
c001dc33:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dc37:	50                   	push   eax
c001dc38:	e8 f7 2b fe ff       	call   c0000834 <strcpy>
c001dc3d:	83 c4 10             	add    esp,0x10
c001dc40:	83 ec 08             	sub    esp,0x8
c001dc43:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dc47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc4b:	e8 18 fc ff ff       	call   c001d868 <Process::addArgs(char**)>
c001dc50:	83 c4 10             	add    esp,0x10
c001dc53:	90                   	nop
c001dc54:	83 c4 24             	add    esp,0x24
c001dc57:	5b                   	pop    ebx
c001dc58:	5e                   	pop    esi
c001dc59:	c3                   	ret    

c001dc5a <disableIRQs()>:
c001dc5a:	fa                   	cli    
c001dc5b:	ff 05 cc 17 03 c0    	inc    DWORD PTR ds:0xc00317cc
c001dc61:	c3                   	ret    

c001dc62 <getIRQNestingLevel()>:
c001dc62:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c001dc67:	c3                   	ret    

c001dc68 <enableIRQs()>:
c001dc68:	a1 cc 17 03 c0       	mov    eax,ds:0xc00317cc
c001dc6d:	48                   	dec    eax
c001dc6e:	a3 cc 17 03 c0       	mov    ds:0xc00317cc,eax
c001dc73:	75 01                	jne    c001dc76 <enableIRQs()+0xe>
c001dc75:	fb                   	sti    
c001dc76:	c3                   	ret    

c001dc77 <lockScheduler()>:
c001dc77:	eb e1                	jmp    c001dc5a <disableIRQs()>

c001dc79 <unlockScheduler()>:
c001dc79:	eb ed                	jmp    c001dc68 <enableIRQs()>

c001dc7b <userModeEntryPoint(void*)>:
c001dc7b:	83 ec 0c             	sub    esp,0xc
c001dc7e:	e8 f6 ff ff ff       	call   c001dc79 <unlockScheduler()>
c001dc83:	fb                   	sti    
c001dc84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dc89:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dc8c:	8b 80 2e 19 00 00    	mov    eax,DWORD PTR [eax+0x192e]
c001dc92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dc96:	83 c4 0c             	add    esp,0xc
c001dc99:	e9 8c 26 fe ff       	jmp    c000032a <goToUsermode>

c001dc9e <lockStuff()>:
c001dc9e:	e8 b7 ff ff ff       	call   c001dc5a <disableIRQs()>
c001dca3:	ff 05 c8 17 03 c0    	inc    DWORD PTR ds:0xc00317c8
c001dca9:	c3                   	ret    

c001dcaa <taskStartupFunction>:
c001dcaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcaf:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dcb2:	c3                   	ret    

c001dcb3 <updateTimeUsed()>:
c001dcb3:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c001dcb8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dcbe:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dcc5:	74 50                	je     c001dd17 <updateTimeUsed()+0x64>
c001dcc7:	57                   	push   edi
c001dcc8:	56                   	push   esi
c001dcc9:	53                   	push   ebx
c001dcca:	0f 31                	rdtsc  
c001dccc:	89 c1                	mov    ecx,eax
c001dcce:	a3 08 18 03 c0       	mov    ds:0xc0031808,eax
c001dcd3:	2b 0d f8 17 03 c0    	sub    ecx,DWORD PTR ds:0xc00317f8
c001dcd9:	89 d3                	mov    ebx,edx
c001dcdb:	89 0d 00 18 03 c0    	mov    DWORD PTR ds:0xc0031800,ecx
c001dce1:	1b 1d fc 17 03 c0    	sbb    ebx,DWORD PTR ds:0xc00317fc
c001dce7:	a3 f8 17 03 c0       	mov    ds:0xc00317f8,eax
c001dcec:	89 1d 04 18 03 c0    	mov    DWORD PTR ds:0xc0031804,ebx
c001dcf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dcf7:	89 15 0c 18 03 c0    	mov    DWORD PTR ds:0xc003180c,edx
c001dcfd:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001dd00:	89 15 fc 17 03 c0    	mov    DWORD PTR ds:0xc00317fc,edx
c001dd06:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001dd09:	01 f1                	add    ecx,esi
c001dd0b:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001dd0e:	11 fb                	adc    ebx,edi
c001dd10:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001dd13:	5b                   	pop    ebx
c001dd14:	5e                   	pop    esi
c001dd15:	5f                   	pop    edi
c001dd16:	c3                   	ret    
c001dd17:	c3                   	ret    

c001dd18 <switchToThread(ThreadControlBlock*)>:
c001dd18:	53                   	push   ebx
c001dd19:	83 ec 08             	sub    esp,0x8
c001dd1c:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c001dd21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dd25:	85 c0                	test   eax,eax
c001dd27:	75 30                	jne    c001dd59 <switchToThread(ThreadControlBlock*)+0x41>
c001dd29:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dd2c:	3c ff                	cmp    al,0xff
c001dd2e:	74 25                	je     c001dd55 <switchToThread(ThreadControlBlock*)+0x3d>
c001dd30:	0f b6 d0             	movzx  edx,al
c001dd33:	b8 84 03 00 00       	mov    eax,0x384
c001dd38:	29 d0                	sub    eax,edx
c001dd3a:	c1 e0 10             	shl    eax,0x10
c001dd3d:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dd40:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dd43:	e8 6b ff ff ff       	call   c001dcb3 <updateTimeUsed()>
c001dd48:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dd4c:	83 c4 08             	add    esp,0x8
c001dd4f:	5b                   	pop    ebx
c001dd50:	e9 0d 26 fe ff       	jmp    c0000362 <switchToThreadASM>
c001dd55:	31 c0                	xor    eax,eax
c001dd57:	eb e7                	jmp    c001dd40 <switchToThread(ThreadControlBlock*)+0x28>
c001dd59:	c7 05 c4 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00317c4,0x1
c001dd63:	83 c4 08             	add    esp,0x8
c001dd66:	5b                   	pop    ebx
c001dd67:	c3                   	ret    

c001dd68 <Semaphore::Semaphore(int)>:
c001dd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd70:	89 10                	mov    DWORD PTR [eax],edx
c001dd72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd76:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dd7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd93:	90                   	nop
c001dd94:	c3                   	ret    
c001dd95:	90                   	nop

c001dd96 <Mutex::Mutex()>:
c001dd96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd9a:	6a 01                	push   0x1
c001dd9c:	50                   	push   eax
c001dd9d:	e8 c6 ff ff ff       	call   c001dd68 <Semaphore::Semaphore(int)>
c001dda2:	83 c4 08             	add    esp,0x8
c001dda5:	90                   	nop
c001dda6:	c3                   	ret    
c001dda7:	90                   	nop

c001dda8 <Process::createThread(void (*)(void*), void*, int)>:
c001dda8:	55                   	push   ebp
c001dda9:	31 c9                	xor    ecx,ecx
c001ddab:	57                   	push   edi
c001ddac:	56                   	push   esi
c001ddad:	53                   	push   ebx
c001ddae:	83 ec 1c             	sub    esp,0x1c
c001ddb1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ddb5:	66 8b b3 24 19 00 00 	mov    si,WORD PTR [ebx+0x1924]
c001ddbc:	89 f2                	mov    edx,esi
c001ddbe:	0f b7 c2             	movzx  eax,dx
c001ddc1:	83 e2 01             	and    edx,0x1
c001ddc4:	74 14                	je     c001ddda <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ddc6:	d1 f8                	sar    eax,1
c001ddc8:	41                   	inc    ecx
c001ddc9:	89 c2                	mov    edx,eax
c001ddcb:	83 f9 10             	cmp    ecx,0x10
c001ddce:	75 ee                	jne    c001ddbe <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ddd0:	83 c4 1c             	add    esp,0x1c
c001ddd3:	31 c0                	xor    eax,eax
c001ddd5:	5b                   	pop    ebx
c001ddd6:	5e                   	pop    esi
c001ddd7:	5f                   	pop    edi
c001ddd8:	5d                   	pop    ebp
c001ddd9:	c3                   	ret    
c001ddda:	83 ec 08             	sub    esp,0x8
c001dddd:	b8 01 00 00 00       	mov    eax,0x1
c001dde2:	d3 e0                	shl    eax,cl
c001dde4:	09 c6                	or     esi,eax
c001dde6:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001ddec:	66 89 b3 24 19 00 00 	mov    WORD PTR [ebx+0x1924],si
c001ddf3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ddf6:	8d 04 89             	lea    eax,[ecx+ecx*4]
c001ddf9:	8d 04 c1             	lea    eax,[ecx+eax*8]
c001ddfc:	8d 34 c0             	lea    esi,[eax+eax*8]
c001ddff:	01 f6                	add    esi,esi
c001de01:	01 ce                	add    esi,ecx
c001de03:	8d 04 33             	lea    eax,[ebx+esi*1]
c001de06:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001de0c:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001de12:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de16:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001de1c:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001de22:	89 ca                	mov    edx,ecx
c001de24:	f7 da                	neg    edx
c001de26:	c1 e2 15             	shl    edx,0x15
c001de29:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001de2f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001de35:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de39:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001de43:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001de49:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de4d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001de53:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001de5d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001de67:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001de6e:	50                   	push   eax
c001de6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de73:	68 e8 17 03 c0       	push   0xc00317e8
c001de78:	e8 43 ab 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001de7d:	83 c4 10             	add    esp,0x10
c001de80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de84:	83 c4 1c             	add    esp,0x1c
c001de87:	5b                   	pop    ebx
c001de88:	5e                   	pop    esi
c001de89:	5f                   	pop    edi
c001de8a:	5d                   	pop    ebp
c001de8b:	c3                   	ret    

c001de8c <Process::createUserThread()>:
c001de8c:	83 ec 0c             	sub    esp,0xc
c001de8f:	68 80 00 00 00       	push   0x80
c001de94:	6a 00                	push   0x0
c001de96:	68 7b dc 01 c0       	push   0xc001dc7b
c001de9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001de9f:	e8 04 ff ff ff       	call   c001dda8 <Process::createThread(void (*)(void*), void*, int)>
c001dea4:	83 c4 1c             	add    esp,0x1c
c001dea7:	c3                   	ret    

c001dea8 <setupMultitasking(void (*)())>:
c001dea8:	56                   	push   esi
c001dea9:	53                   	push   ebx
c001deaa:	53                   	push   ebx
c001deab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001deaf:	eb 10                	jmp    c001dec1 <setupMultitasking(void (*)())+0x19>
c001deb1:	83 ec 0c             	sub    esp,0xc
c001deb4:	68 e8 17 03 c0       	push   0xc00317e8
c001deb9:	e8 54 aa 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001debe:	83 c4 10             	add    esp,0x10
c001dec1:	83 ec 0c             	sub    esp,0xc
c001dec4:	68 e8 17 03 c0       	push   0xc00317e8
c001dec9:	e8 28 aa 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dece:	83 c4 10             	add    esp,0x10
c001ded1:	84 c0                	test   al,al
c001ded3:	74 dc                	je     c001deb1 <setupMultitasking(void (*)())+0x9>
c001ded5:	83 ec 0c             	sub    esp,0xc
c001ded8:	68 3f 1b 00 00       	push   0x1b3f
c001dedd:	e8 5e 19 ff ff       	call   c000f840 <malloc>
c001dee2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dee9:	89 c3                	mov    ebx,eax
c001deeb:	6a 00                	push   0x0
c001deed:	68 6a c0 02 c0       	push   0xc002c06a
c001def2:	6a 01                	push   0x1
c001def4:	50                   	push   eax
c001def5:	e8 ae fb ff ff       	call   c001daa8 <Process::Process(bool, char const*, Process*, char**)>
c001defa:	83 c4 18             	add    esp,0x18
c001defd:	89 1d f4 17 03 c0    	mov    DWORD PTR ds:0xc00317f4,ebx
c001df03:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df09:	68 8c c1 02 c0       	push   0xc002c18c
c001df0e:	e8 c1 4e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001df13:	58                   	pop    eax
c001df14:	ff b3 26 19 00 00    	push   DWORD PTR [ebx+0x1926]
c001df1a:	e8 0a 2e ff ff       	call   c0010d29 <setActiveTerminal(VgaText*)>
c001df1f:	66 83 8b 24 19 00 00 01 	or     WORD PTR [ebx+0x1924],0x1
c001df27:	8b 83 32 19 00 00    	mov    eax,DWORD PTR [ebx+0x1932]
c001df2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001df30:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001df3a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001df40:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001df46:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001df50:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001df5a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001df64:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001df6a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001df70:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001df7a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001df80:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001df8a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001df90:	5a                   	pop    edx
c001df91:	59                   	pop    ecx
c001df92:	68 66 c0 02 c0       	push   0xc002c066
c001df97:	50                   	push   eax
c001df98:	e8 97 28 fe ff       	call   c0000834 <strcpy>
c001df9d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dfa4:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dfa8:	83 c4 14             	add    esp,0x14
c001dfab:	5b                   	pop    ebx
c001dfac:	5e                   	pop    esi
c001dfad:	e9 a2 23 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dfb2 <schedule()>:
c001dfb2:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c001dfb7:	85 c0                	test   eax,eax
c001dfb9:	74 0b                	je     c001dfc6 <schedule()+0x14>
c001dfbb:	c7 05 c4 17 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00317c4,0x1
c001dfc5:	c3                   	ret    
c001dfc6:	53                   	push   ebx
c001dfc7:	83 ec 14             	sub    esp,0x14
c001dfca:	68 e8 17 03 c0       	push   0xc00317e8
c001dfcf:	e8 22 a9 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfd4:	83 c4 10             	add    esp,0x10
c001dfd7:	84 c0                	test   al,al
c001dfd9:	75 38                	jne    c001e013 <schedule()+0x61>
c001dfdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dfe0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dfe3:	4a                   	dec    edx
c001dfe4:	74 32                	je     c001e018 <schedule()+0x66>
c001dfe6:	83 ec 0c             	sub    esp,0xc
c001dfe9:	68 e8 17 03 c0       	push   0xc00317e8
c001dfee:	e8 fb a8 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dff3:	c7 04 24 e8 17 03 c0 	mov    DWORD PTR [esp],0xc00317e8
c001dffa:	89 c3                	mov    ebx,eax
c001dffc:	e8 11 a9 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e001:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e008:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e00b:	e8 08 fd ff ff       	call   c001dd18 <switchToThread(ThreadControlBlock*)>
c001e010:	83 c4 10             	add    esp,0x10
c001e013:	83 c4 08             	add    esp,0x8
c001e016:	5b                   	pop    ebx
c001e017:	c3                   	ret    
c001e018:	83 ec 08             	sub    esp,0x8
c001e01b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e022:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e028:	68 e8 17 03 c0       	push   0xc00317e8
c001e02d:	e8 8e a9 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e032:	83 c4 10             	add    esp,0x10
c001e035:	eb af                	jmp    c001dfe6 <schedule()+0x34>

c001e037 <unlockStuff()>:
c001e037:	a1 c8 17 03 c0       	mov    eax,ds:0xc00317c8
c001e03c:	48                   	dec    eax
c001e03d:	a3 c8 17 03 c0       	mov    ds:0xc00317c8,eax
c001e042:	75 09                	jne    c001e04d <unlockStuff()+0x16>
c001e044:	a1 c4 17 03 c0       	mov    eax,ds:0xc00317c4
c001e049:	85 c0                	test   eax,eax
c001e04b:	75 05                	jne    c001e052 <unlockStuff()+0x1b>
c001e04d:	e9 16 fc ff ff       	jmp    c001dc68 <enableIRQs()>
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	c7 05 c4 17 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00317c4,0x0
c001e05f:	e8 4e ff ff ff       	call   c001dfb2 <schedule()>
c001e064:	83 c4 0c             	add    esp,0xc
c001e067:	e9 fc fb ff ff       	jmp    c001dc68 <enableIRQs()>

c001e06c <Semaphore::tryAcquire()>:
c001e06c:	83 ec 0c             	sub    esp,0xc
c001e06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e073:	e8 26 fc ff ff       	call   c001dc9e <lockStuff()>
c001e078:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e07b:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e07d:	7c 0b                	jl     c001e08a <Semaphore::tryAcquire()+0x1e>
c001e07f:	e8 b3 ff ff ff       	call   c001e037 <unlockStuff()>
c001e084:	31 c0                	xor    eax,eax
c001e086:	83 c4 0c             	add    esp,0xc
c001e089:	c3                   	ret    
c001e08a:	42                   	inc    edx
c001e08b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e08e:	e8 a4 ff ff ff       	call   c001e037 <unlockStuff()>
c001e093:	b0 01                	mov    al,0x1
c001e095:	83 c4 0c             	add    esp,0xc
c001e098:	c3                   	ret    
c001e099:	90                   	nop

c001e09a <Semaphore::assertLocked(char const*)>:
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e0a5:	e8 f4 fb ff ff       	call   c001dc9e <lockStuff()>
c001e0aa:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e0ac:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e0af:	7c 05                	jl     c001e0b6 <Semaphore::assertLocked(char const*)+0x1c>
c001e0b1:	83 c4 0c             	add    esp,0xc
c001e0b4:	eb 81                	jmp    c001e037 <unlockStuff()>
c001e0b6:	83 ec 0c             	sub    esp,0xc
c001e0b9:	52                   	push   edx
c001e0ba:	e8 be c3 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001e0bf:	83 c4 10             	add    esp,0x10
c001e0c2:	83 c4 0c             	add    esp,0xc
c001e0c5:	e9 6d ff ff ff       	jmp    c001e037 <unlockStuff()>

c001e0ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e0ca:	83 ec 0c             	sub    esp,0xc
c001e0cd:	e8 90 fb ff ff       	call   c001dc62 <getIRQNestingLevel()>
c001e0d2:	83 ec 08             	sub    esp,0x8
c001e0d5:	50                   	push   eax
c001e0d6:	68 c0 c1 02 c0       	push   0xc002c1c0
c001e0db:	e8 f4 4c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e0e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e0ec:	e8 c1 fe ff ff       	call   c001dfb2 <schedule()>
c001e0f1:	e8 83 fb ff ff       	call   c001dc79 <unlockScheduler()>
c001e0f6:	e8 67 fb ff ff       	call   c001dc62 <getIRQNestingLevel()>
c001e0fb:	5a                   	pop    edx
c001e0fc:	59                   	pop    ecx
c001e0fd:	50                   	push   eax
c001e0fe:	68 f4 c1 02 c0       	push   0xc002c1f4
c001e103:	e8 cc 4c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e108:	83 c4 1c             	add    esp,0x1c
c001e10b:	c3                   	ret    

c001e10c <blockTask(TaskState)>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e113:	e8 5f fb ff ff       	call   c001dc77 <lockScheduler()>
c001e118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e11d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e120:	e8 8d fe ff ff       	call   c001dfb2 <schedule()>
c001e125:	83 c4 0c             	add    esp,0xc
c001e128:	e9 4c fb ff ff       	jmp    c001dc79 <unlockScheduler()>

c001e12d <waitTask(int, int*, int)>:
c001e12d:	83 ec 18             	sub    esp,0x18
c001e130:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e135:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e139:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e13c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e140:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e145:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e148:	6a 07                	push   0x7
c001e14a:	e8 bd ff ff ff       	call   c001e10c <blockTask(TaskState)>
c001e14f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e154:	83 c4 10             	add    esp,0x10
c001e157:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e15a:	85 d2                	test   edx,edx
c001e15c:	74 0a                	je     c001e168 <waitTask(int, int*, int)+0x3b>
c001e15e:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e161:	89 02                	mov    DWORD PTR [edx],eax
c001e163:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e168:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e16b:	83 c4 0c             	add    esp,0xc
c001e16e:	c3                   	ret    

c001e16f <nanoSleepUntil(unsigned long long)>:
c001e16f:	83 ec 0c             	sub    esp,0xc
c001e172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e176:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e17a:	3b 05 10 e9 02 c0    	cmp    eax,DWORD PTR ds:0xc002e910
c001e180:	89 d1                	mov    ecx,edx
c001e182:	1b 0d 14 e9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e914
c001e188:	73 04                	jae    c001e18e <nanoSleepUntil(unsigned long long)+0x1f>
c001e18a:	83 c4 0c             	add    esp,0xc
c001e18d:	c3                   	ret    
c001e18e:	e8 0b fb ff ff       	call   c001dc9e <lockStuff()>
c001e193:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e199:	83 ec 08             	sub    esp,0x8
c001e19c:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e19f:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e1a2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e1a8:	68 dc 17 03 c0       	push   0xc00317dc
c001e1ad:	e8 0e a8 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e1b2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e1b9:	e8 4e ff ff ff       	call   c001e10c <blockTask(TaskState)>
c001e1be:	83 c4 1c             	add    esp,0x1c
c001e1c1:	e9 71 fe ff ff       	jmp    c001e037 <unlockStuff()>

c001e1c6 <nanoSleep(unsigned long long)>:
c001e1c6:	a1 10 e9 02 c0       	mov    eax,ds:0xc002e910
c001e1cb:	8b 15 14 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e914
c001e1d1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e1d5:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e1d9:	eb 94                	jmp    c001e16f <nanoSleepUntil(unsigned long long)>

c001e1db <sleep(unsigned long long)>:
c001e1db:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e1e3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e1e8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e1ec:	01 ca                	add    edx,ecx
c001e1ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e1f2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e1f6:	eb ce                	jmp    c001e1c6 <nanoSleep(unsigned long long)>

c001e1f8 <Semaphore::acquire()>:
c001e1f8:	83 ec 0c             	sub    esp,0xc
c001e1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ff:	e8 9a fa ff ff       	call   c001dc9e <lockStuff()>
c001e204:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e207:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e209:	7d 0c                	jge    c001e217 <Semaphore::acquire()+0x1f>
c001e20b:	42                   	inc    edx
c001e20c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e20f:	83 c4 0c             	add    esp,0xc
c001e212:	e9 20 fe ff ff       	jmp    c001e037 <unlockStuff()>
c001e217:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e21d:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e224:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e227:	85 d2                	test   edx,edx
c001e229:	74 2a                	je     c001e255 <Semaphore::acquire()+0x5d>
c001e22b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e22e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e234:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e237:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e23d:	83 ec 0c             	sub    esp,0xc
c001e240:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e243:	6a 05                	push   0x5
c001e245:	e8 c2 fe ff ff       	call   c001e10c <blockTask(TaskState)>
c001e24a:	83 c4 10             	add    esp,0x10
c001e24d:	83 c4 0c             	add    esp,0xc
c001e250:	e9 e2 fd ff ff       	jmp    c001e037 <unlockStuff()>
c001e255:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e25b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e25e:	eb d7                	jmp    c001e237 <Semaphore::acquire()+0x3f>

c001e260 <taskReturned>:
c001e260:	83 ec 18             	sub    esp,0x18
c001e263:	68 28 c2 02 c0       	push   0xc002c228
c001e268:	e8 10 c2 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001e26d:	83 c4 10             	add    esp,0x10
c001e270:	83 ec 0c             	sub    esp,0xc
c001e273:	6a 02                	push   0x2
c001e275:	e8 92 fe ff ff       	call   c001e10c <blockTask(TaskState)>
c001e27a:	e8 f8 f9 ff ff       	call   c001dc77 <lockScheduler()>
c001e27f:	e8 2e fd ff ff       	call   c001dfb2 <schedule()>
c001e284:	e8 f0 f9 ff ff       	call   c001dc79 <unlockScheduler()>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	eb e2                	jmp    c001e270 <taskReturned+0x10>

c001e28e <unblockTask(ThreadControlBlock*)>:
c001e28e:	53                   	push   ebx
c001e28f:	83 ec 08             	sub    esp,0x8
c001e292:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e296:	e8 dc f9 ff ff       	call   c001dc77 <lockScheduler()>
c001e29b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e29e:	85 c0                	test   eax,eax
c001e2a0:	74 5c                	je     c001e2fe <unblockTask(ThreadControlBlock*)+0x70>
c001e2a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e2a5:	48                   	dec    eax
c001e2a6:	74 31                	je     c001e2d9 <unblockTask(ThreadControlBlock*)+0x4b>
c001e2a8:	83 ec 0c             	sub    esp,0xc
c001e2ab:	68 e8 17 03 c0       	push   0xc00317e8
c001e2b0:	e8 39 a6 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e2b5:	83 c4 10             	add    esp,0x10
c001e2b8:	85 c0                	test   eax,eax
c001e2ba:	75 17                	jne    c001e2d3 <unblockTask(ThreadControlBlock*)+0x45>
c001e2bc:	eb 65                	jmp    c001e323 <unblockTask(ThreadControlBlock*)+0x95>
c001e2be:	83 ec 08             	sub    esp,0x8
c001e2c1:	50                   	push   eax
c001e2c2:	68 e8 17 03 c0       	push   0xc00317e8
c001e2c7:	e8 fc a8 00 00       	call   c0028bc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e2cc:	83 c4 10             	add    esp,0x10
c001e2cf:	85 c0                	test   eax,eax
c001e2d1:	74 50                	je     c001e323 <unblockTask(ThreadControlBlock*)+0x95>
c001e2d3:	39 c3                	cmp    ebx,eax
c001e2d5:	75 e7                	jne    c001e2be <unblockTask(ThreadControlBlock*)+0x30>
c001e2d7:	eb 1c                	jmp    c001e2f5 <unblockTask(ThreadControlBlock*)+0x67>
c001e2d9:	83 ec 0c             	sub    esp,0xc
c001e2dc:	68 18 c3 02 c0       	push   0xc002c318
c001e2e1:	e8 ee 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e2e6:	c7 04 24 a4 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2a4
c001e2ed:	e8 e2 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	83 c4 08             	add    esp,0x8
c001e2f8:	5b                   	pop    ebx
c001e2f9:	e9 7b f9 ff ff       	jmp    c001dc79 <unlockScheduler()>
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	68 5c c2 02 c0       	push   0xc002c25c
c001e306:	e8 c9 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e30b:	c7 04 24 a4 c2 02 c0 	mov    DWORD PTR [esp],0xc002c2a4
c001e312:	e8 bd 4a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e317:	83 c4 10             	add    esp,0x10
c001e31a:	83 c4 08             	add    esp,0x8
c001e31d:	5b                   	pop    ebx
c001e31e:	e9 56 f9 ff ff       	jmp    c001dc79 <unlockScheduler()>
c001e323:	83 ec 08             	sub    esp,0x8
c001e326:	53                   	push   ebx
c001e327:	68 e8 17 03 c0       	push   0xc00317e8
c001e32c:	e8 8f a6 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e331:	83 c4 10             	add    esp,0x10
c001e334:	83 c4 08             	add    esp,0x8
c001e337:	5b                   	pop    ebx
c001e338:	e9 3c f9 ff ff       	jmp    c001dc79 <unlockScheduler()>

c001e33d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e33d:	55                   	push   ebp
c001e33e:	57                   	push   edi
c001e33f:	56                   	push   esi
c001e340:	53                   	push   ebx
c001e341:	83 ec 1c             	sub    esp,0x1c
c001e344:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e348:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e34b:	8b b8 36 19 00 00    	mov    edi,DWORD PTR [eax+0x1936]
c001e351:	85 ff                	test   edi,edi
c001e353:	7e 20                	jle    c001e375 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e355:	31 f6                	xor    esi,esi
c001e357:	83 ec 0c             	sub    esp,0xc
c001e35a:	ff b4 b0 3a 19 00 00 	push   DWORD PTR [eax+esi*4+0x193a]
c001e361:	46                   	inc    esi
c001e362:	e8 e9 14 ff ff       	call   c000f850 <free>
c001e367:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e36a:	83 c4 10             	add    esp,0x10
c001e36d:	39 b0 36 19 00 00    	cmp    DWORD PTR [eax+0x1936],esi
c001e373:	7f e2                	jg     c001e357 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e375:	c7 80 36 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1936],0x0
c001e37f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e384:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e387:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e38a:	d3 c0                	rol    eax,cl
c001e38c:	66 21 82 24 19 00 00 	and    WORD PTR [edx+0x1924],ax
c001e393:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e396:	89 f7                	mov    edi,esi
c001e398:	66 83 be 24 19 00 00 00 	cmp    WORD PTR [esi+0x1924],0x0
c001e3a0:	0f 85 75 01 00 00    	jne    c001e51b <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001e3a6:	8b ae 3a 1b 00 00    	mov    ebp,DWORD PTR [esi+0x1b3a]
c001e3ac:	85 ed                	test   ebp,ebp
c001e3ae:	74 1b                	je     c001e3cb <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e3b0:	83 ec 0c             	sub    esp,0xc
c001e3b3:	55                   	push   ebp
c001e3b4:	e8 31 be ff ff       	call   c001a1ea <EnvVarContainer::~EnvVarContainer()>
c001e3b9:	59                   	pop    ecx
c001e3ba:	5e                   	pop    esi
c001e3bb:	6a 0c                	push   0xc
c001e3bd:	55                   	push   ebp
c001e3be:	e8 31 49 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001e3c3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	89 f7                	mov    edi,esi
c001e3cb:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3d1:	85 c0                	test   eax,eax
c001e3d3:	0f 84 ab 00 00 00    	je     c001e484 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3d9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e3dc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e3e0:	31 c9                	xor    ecx,ecx
c001e3e2:	eb 10                	jmp    c001e3f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e3e4:	41                   	inc    ecx
c001e3e5:	83 f9 10             	cmp    ecx,0x10
c001e3e8:	0f 84 96 00 00 00    	je     c001e484 <cleanupTerminatedTask(ThreadControlBlock*)+0x147>
c001e3ee:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e3f4:	0f b7 90 24 19 00 00 	movzx  edx,WORD PTR [eax+0x1924]
c001e3fb:	d3 fa                	sar    edx,cl
c001e3fd:	83 e2 01             	and    edx,0x1
c001e400:	74 e2                	je     c001e3e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e402:	8d 14 89             	lea    edx,[ecx+ecx*4]
c001e405:	8d 14 d1             	lea    edx,[ecx+edx*8]
c001e408:	8d 14 d2             	lea    edx,[edx+edx*8]
c001e40b:	01 d2                	add    edx,edx
c001e40d:	01 ca                	add    edx,ecx
c001e40f:	01 d0                	add    eax,edx
c001e411:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e417:	83 fd 07             	cmp    ebp,0x7
c001e41a:	75 c8                	jne    c001e3e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e41c:	05 40 02 00 00       	add    eax,0x240
c001e421:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e424:	83 fd ff             	cmp    ebp,0xffffffff
c001e427:	0f 8c 08 01 00 00    	jl     c001e535 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c001e42d:	0f 84 b9 01 00 00    	je     c001e5ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2af>
c001e433:	85 ed                	test   ebp,ebp
c001e435:	0f 84 a0 01 00 00    	je     c001e5db <cleanupTerminatedTask(ThreadControlBlock*)+0x29e>
c001e43b:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e43d:	75 a5                	jne    c001e3e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e43f:	8b 86 2a 19 00 00    	mov    eax,DWORD PTR [esi+0x192a]
c001e445:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e449:	01 d0                	add    eax,edx
c001e44b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e44f:	83 ec 0c             	sub    esp,0xc
c001e452:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e458:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e45b:	8b 80 2a 19 00 00    	mov    eax,DWORD PTR [eax+0x192a]
c001e461:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e468:	50                   	push   eax
c001e469:	e8 20 fe ff ff       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c001e46e:	83 c4 10             	add    esp,0x10
c001e471:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e474:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e478:	89 f7                	mov    edi,esi
c001e47a:	41                   	inc    ecx
c001e47b:	83 f9 10             	cmp    ecx,0x10
c001e47e:	0f 85 6a ff ff ff    	jne    c001e3ee <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e484:	8b 86 26 19 00 00    	mov    eax,DWORD PTR [esi+0x1926]
c001e48a:	85 c0                	test   eax,eax
c001e48c:	74 5d                	je     c001e4eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e48e:	8b 96 2a 19 00 00    	mov    edx,DWORD PTR [esi+0x192a]
c001e494:	3b 82 26 19 00 00    	cmp    eax,DWORD PTR [edx+0x1926]
c001e49a:	74 4f                	je     c001e4eb <cleanupTerminatedTask(ThreadControlBlock*)+0x1ae>
c001e49c:	83 ec 0c             	sub    esp,0xc
c001e49f:	68 e8 17 03 c0       	push   0xc00317e8
c001e4a4:	e8 45 a4 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4a9:	c7 04 24 e8 17 03 c0 	mov    DWORD PTR [esp],0xc00317e8
c001e4b0:	89 c7                	mov    edi,eax
c001e4b2:	e8 3f a4 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	84 c0                	test   al,al
c001e4bc:	0f 84 e4 00 00 00    	je     c001e5a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x269>
c001e4c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4c5:	8b 90 26 19 00 00    	mov    edx,DWORD PTR [eax+0x1926]
c001e4cb:	85 d2                	test   edx,edx
c001e4cd:	74 0f                	je     c001e4de <cleanupTerminatedTask(ThreadControlBlock*)+0x1a1>
c001e4cf:	83 ec 0c             	sub    esp,0xc
c001e4d2:	8b 02                	mov    eax,DWORD PTR [edx]
c001e4d4:	52                   	push   edx
c001e4d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e4d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4db:	83 c4 10             	add    esp,0x10
c001e4de:	c7 80 26 19 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1926],0x0
c001e4e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e4eb:	8b 9f 32 19 00 00    	mov    ebx,DWORD PTR [edi+0x1932]
c001e4f1:	85 db                	test   ebx,ebx
c001e4f3:	74 16                	je     c001e50b <cleanupTerminatedTask(ThreadControlBlock*)+0x1ce>
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	53                   	push   ebx
c001e4f9:	e8 d6 3b ff ff       	call   c00120d4 <VAS::~VAS()>
c001e4fe:	58                   	pop    eax
c001e4ff:	5a                   	pop    edx
c001e500:	6a 14                	push   0x14
c001e502:	53                   	push   ebx
c001e503:	e8 ec 47 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	83 ec 0c             	sub    esp,0xc
c001e50e:	68 71 c0 02 c0       	push   0xc002c071
c001e513:	e8 bc 48 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e518:	83 c4 10             	add    esp,0x10
c001e51b:	83 ec 08             	sub    esp,0x8
c001e51e:	68 3f 1b 00 00       	push   0x1b3f
c001e523:	68 7f c0 02 c0       	push   0xc002c07f
c001e528:	e8 a7 48 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e52d:	83 c4 2c             	add    esp,0x2c
c001e530:	5b                   	pop    ebx
c001e531:	5e                   	pop    esi
c001e532:	5f                   	pop    edi
c001e533:	5d                   	pop    ebp
c001e534:	c3                   	ret    
c001e535:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e539:	83 ec 0c             	sub    esp,0xc
c001e53c:	68 5c c3 02 c0       	push   0xc002c35c
c001e541:	e8 37 bf ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001e546:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e549:	83 c4 10             	add    esp,0x10
c001e54c:	89 f7                	mov    edi,esi
c001e54e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e552:	e9 8d fe ff ff       	jmp    c001e3e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e557:	8b 80 26 19 00 00    	mov    eax,DWORD PTR [eax+0x1926]
c001e55d:	39 82 26 19 00 00    	cmp    DWORD PTR [edx+0x1926],eax
c001e563:	75 1c                	jne    c001e581 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e565:	83 ec 0c             	sub    esp,0xc
c001e568:	68 c4 c3 02 c0       	push   0xc002c3c4
c001e56d:	e8 62 48 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e572:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e579:	e8 8e fb ff ff       	call   c001e10c <blockTask(TaskState)>
c001e57e:	83 c4 10             	add    esp,0x10
c001e581:	83 ec 08             	sub    esp,0x8
c001e584:	56                   	push   esi
c001e585:	68 e8 17 03 c0       	push   0xc00317e8
c001e58a:	e8 31 a4 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e58f:	c7 04 24 e8 17 03 c0 	mov    DWORD PTR [esp],0xc00317e8
c001e596:	e8 53 a3 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e59b:	83 c4 10             	add    esp,0x10
c001e59e:	39 f8                	cmp    eax,edi
c001e5a0:	0f 84 1c ff ff ff    	je     c001e4c2 <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c001e5a6:	83 ec 0c             	sub    esp,0xc
c001e5a9:	68 e8 17 03 c0       	push   0xc00317e8
c001e5ae:	e8 3b a3 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5b3:	c7 04 24 e8 17 03 c0 	mov    DWORD PTR [esp],0xc00317e8
c001e5ba:	89 c6                	mov    esi,eax
c001e5bc:	e8 51 a3 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5c1:	83 c4 10             	add    esp,0x10
c001e5c4:	39 f3                	cmp    ebx,esi
c001e5c6:	74 b9                	je     c001e581 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5c8:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e5cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5ce:	39 82 2a 19 00 00    	cmp    DWORD PTR [edx+0x192a],eax
c001e5d4:	75 ab                	jne    c001e581 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001e5d6:	e9 7c ff ff ff       	jmp    c001e557 <cleanupTerminatedTask(ThreadControlBlock*)+0x21a>
c001e5db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5df:	83 ec 0c             	sub    esp,0xc
c001e5e2:	68 90 c3 02 c0       	push   0xc002c390
c001e5e7:	e9 55 ff ff ff       	jmp    c001e541 <cleanupTerminatedTask(ThreadControlBlock*)+0x204>
c001e5ec:	8b 36                	mov    esi,DWORD PTR [esi]
c001e5ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5f2:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e5f5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5f8:	8b b8 2a 19 00 00    	mov    edi,DWORD PTR [eax+0x192a]
c001e5fe:	01 d7                	add    edi,edx
c001e600:	89 f8                	mov    eax,edi
c001e602:	e9 44 fe ff ff       	jmp    c001e44b <cleanupTerminatedTask(ThreadControlBlock*)+0x10e>

c001e607 <cleanerTaskFunction(void*)>:
c001e607:	53                   	push   ebx
c001e608:	83 ec 08             	sub    esp,0x8
c001e60b:	e8 69 f6 ff ff       	call   c001dc79 <unlockScheduler()>
c001e610:	e8 62 f6 ff ff       	call   c001dc77 <lockScheduler()>
c001e615:	80 3d ac 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317ac,0x0
c001e61c:	0f 85 8e 00 00 00    	jne    c001e6b0 <cleanerTaskFunction(void*)+0xa9>
c001e622:	83 ec 0c             	sub    esp,0xc
c001e625:	6a 02                	push   0x2
c001e627:	e8 9e fa ff ff       	call   c001e0ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e62c:	83 c4 10             	add    esp,0x10
c001e62f:	c6 05 ac 17 03 c0 00 	mov    BYTE PTR ds:0xc00317ac,0x0
c001e636:	e8 63 f6 ff ff       	call   c001dc9e <lockStuff()>
c001e63b:	e8 37 f6 ff ff       	call   c001dc77 <lockScheduler()>
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	68 d0 17 03 c0       	push   0xc00317d0
c001e648:	e8 a9 a2 00 00       	call   c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e64d:	83 c4 10             	add    esp,0x10
c001e650:	84 c0                	test   al,al
c001e652:	75 40                	jne    c001e694 <cleanerTaskFunction(void*)+0x8d>
c001e654:	83 ec 0c             	sub    esp,0xc
c001e657:	68 d0 17 03 c0       	push   0xc00317d0
c001e65c:	e8 8d a2 00 00       	call   c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e661:	c7 04 24 d0 17 03 c0 	mov    DWORD PTR [esp],0xc00317d0
c001e668:	89 c3                	mov    ebx,eax
c001e66a:	e8 a3 a2 00 00       	call   c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e66f:	c7 04 24 95 c0 02 c0 	mov    DWORD PTR [esp],0xc002c095
c001e676:	e8 59 47 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e67b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e67e:	e8 ba fc ff ff       	call   c001e33d <cleanupTerminatedTask(ThreadControlBlock*)>
c001e683:	c7 04 24 ae c0 02 c0 	mov    DWORD PTR [esp],0xc002c0ae
c001e68a:	e8 45 47 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e68f:	83 c4 10             	add    esp,0x10
c001e692:	eb ac                	jmp    c001e640 <cleanerTaskFunction(void*)+0x39>
c001e694:	e8 e0 f5 ff ff       	call   c001dc79 <unlockScheduler()>
c001e699:	e8 99 f9 ff ff       	call   c001e037 <unlockStuff()>
c001e69e:	e8 d4 f5 ff ff       	call   c001dc77 <lockScheduler()>
c001e6a3:	80 3d ac 17 03 c0 00 	cmp    BYTE PTR ds:0xc00317ac,0x0
c001e6aa:	0f 84 72 ff ff ff    	je     c001e622 <cleanerTaskFunction(void*)+0x1b>
c001e6b0:	e8 c4 f5 ff ff       	call   c001dc79 <unlockScheduler()>
c001e6b5:	e9 75 ff ff ff       	jmp    c001e62f <cleanerTaskFunction(void*)+0x28>

c001e6ba <terminateTask(int)>:
c001e6ba:	83 ec 14             	sub    esp,0x14
c001e6bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e6c5:	83 c0 0c             	add    eax,0xc
c001e6c8:	50                   	push   eax
c001e6c9:	68 ec c3 02 c0       	push   0xc002c3ec
c001e6ce:	e8 01 47 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e6d3:	e8 c6 f5 ff ff       	call   c001dc9e <lockStuff()>
c001e6d8:	e8 9a f5 ff ff       	call   c001dc77 <lockScheduler()>
c001e6dd:	c7 04 24 c1 c0 02 c0 	mov    DWORD PTR [esp],0xc002c0c1
c001e6e4:	e8 eb 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e6e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f2:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e6f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6fa:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e6fd:	5a                   	pop    edx
c001e6fe:	59                   	pop    ecx
c001e6ff:	50                   	push   eax
c001e700:	68 d0 17 03 c0       	push   0xc00317d0
c001e705:	e8 b6 a2 00 00       	call   c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e70a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e70f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e716:	c7 04 24 db c0 02 c0 	mov    DWORD PTR [esp],0xc002c0db
c001e71d:	e8 b2 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e722:	83 c4 10             	add    esp,0x10
c001e725:	a1 a8 17 03 c0       	mov    eax,ds:0xc00317a8
c001e72a:	85 c0                	test   eax,eax
c001e72c:	74 5a                	je     c001e788 <terminateTask(int)+0xce>
c001e72e:	83 ec 0c             	sub    esp,0xc
c001e731:	68 f5 c0 02 c0       	push   0xc002c0f5
c001e736:	e8 99 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e73b:	58                   	pop    eax
c001e73c:	c6 05 ac 17 03 c0 01 	mov    BYTE PTR ds:0xc00317ac,0x1
c001e743:	ff 35 a8 17 03 c0    	push   DWORD PTR ds:0xc00317a8
c001e749:	e8 40 fb ff ff       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c001e74e:	c7 04 24 0f c1 02 c0 	mov    DWORD PTR [esp],0xc002c10f
c001e755:	e8 7a 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e75a:	83 c4 10             	add    esp,0x10
c001e75d:	e8 17 f5 ff ff       	call   c001dc79 <unlockScheduler()>
c001e762:	e8 d0 f8 ff ff       	call   c001e037 <unlockStuff()>
c001e767:	83 ec 0c             	sub    esp,0xc
c001e76a:	68 47 c1 02 c0       	push   0xc002c147
c001e76f:	e8 60 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e774:	83 c4 10             	add    esp,0x10
c001e777:	e8 fb f4 ff ff       	call   c001dc77 <lockScheduler()>
c001e77c:	e8 31 f8 ff ff       	call   c001dfb2 <schedule()>
c001e781:	e8 f3 f4 ff ff       	call   c001dc79 <unlockScheduler()>
c001e786:	eb ef                	jmp    c001e777 <terminateTask(int)+0xbd>
c001e788:	83 ec 0c             	sub    esp,0xc
c001e78b:	68 29 c1 02 c0       	push   0xc002c129
c001e790:	e8 3f 46 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e795:	83 c4 10             	add    esp,0x10
c001e798:	eb c3                	jmp    c001e75d <terminateTask(int)+0xa3>

c001e79a <Thr::terminateFromIRQ(int)>:
c001e79a:	83 ec 18             	sub    esp,0x18
c001e79d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7a1:	e8 14 ff ff ff       	call   c001e6ba <terminateTask(int)>

c001e7a6 <Semaphore::release()>:
c001e7a6:	83 ec 0c             	sub    esp,0xc
c001e7a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ad:	e8 ec f4 ff ff       	call   c001dc9e <lockStuff()>
c001e7b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e7b5:	85 d2                	test   edx,edx
c001e7b7:	74 1a                	je     c001e7d3 <Semaphore::release()+0x2d>
c001e7b9:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e7bc:	83 ec 0c             	sub    esp,0xc
c001e7bf:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e7c2:	52                   	push   edx
c001e7c3:	e8 c6 fa ff ff       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c001e7c8:	83 c4 10             	add    esp,0x10
c001e7cb:	83 c4 0c             	add    esp,0xc
c001e7ce:	e9 64 f8 ff ff       	jmp    c001e037 <unlockStuff()>
c001e7d3:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e7d6:	83 c4 0c             	add    esp,0xc
c001e7d9:	e9 59 f8 ff ff       	jmp    c001e037 <unlockStuff()>

c001e7de <__static_initialization_and_destruction_0(int, int)>:
c001e7de:	83 ec 0c             	sub    esp,0xc
c001e7e1:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7e6:	0f 85 88 00 00 00    	jne    c001e874 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7ec:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e7f4:	75 7e                	jne    c001e874 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e7f6:	83 ec 0c             	sub    esp,0xc
c001e7f9:	68 e8 17 03 c0       	push   0xc00317e8
c001e7fe:	e8 6d a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	83 ec 04             	sub    esp,0x4
c001e809:	68 a4 d1 02 c0       	push   0xc002d1a4
c001e80e:	68 e8 17 03 c0       	push   0xc00317e8
c001e813:	68 30 8b 02 c0       	push   0xc0028b30
c001e818:	e8 51 44 ff ff       	call   c0012c6e <__cxa_atexit>
c001e81d:	83 c4 10             	add    esp,0x10
c001e820:	83 ec 0c             	sub    esp,0xc
c001e823:	68 dc 17 03 c0       	push   0xc00317dc
c001e828:	e8 43 a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e82d:	83 c4 10             	add    esp,0x10
c001e830:	83 ec 04             	sub    esp,0x4
c001e833:	68 a4 d1 02 c0       	push   0xc002d1a4
c001e838:	68 dc 17 03 c0       	push   0xc00317dc
c001e83d:	68 30 8b 02 c0       	push   0xc0028b30
c001e842:	e8 27 44 ff ff       	call   c0012c6e <__cxa_atexit>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	83 ec 0c             	sub    esp,0xc
c001e84d:	68 d0 17 03 c0       	push   0xc00317d0
c001e852:	e8 19 a3 00 00       	call   c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e857:	83 c4 10             	add    esp,0x10
c001e85a:	83 ec 04             	sub    esp,0x4
c001e85d:	68 a4 d1 02 c0       	push   0xc002d1a4
c001e862:	68 d0 17 03 c0       	push   0xc00317d0
c001e867:	68 30 8b 02 c0       	push   0xc0028b30
c001e86c:	e8 fd 43 ff ff       	call   c0012c6e <__cxa_atexit>
c001e871:	83 c4 10             	add    esp,0x10
c001e874:	90                   	nop
c001e875:	83 c4 0c             	add    esp,0xc
c001e878:	c3                   	ret    

c001e879 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e879:	83 ec 0c             	sub    esp,0xc
c001e87c:	83 ec 08             	sub    esp,0x8
c001e87f:	68 ff ff 00 00       	push   0xffff
c001e884:	6a 01                	push   0x1
c001e886:	e8 53 ff ff ff       	call   c001e7de <__static_initialization_and_destruction_0(int, int)>
c001e88b:	83 c4 10             	add    esp,0x10
c001e88e:	83 c4 0c             	add    esp,0xc
c001e891:	c3                   	ret    

c001e892 <Vm::inbv(unsigned short)>:
c001e892:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e896:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e89b:	75 06                	jne    c001e8a3 <Vm::inbv(unsigned short)+0x11>
c001e89d:	a0 2c 18 03 c0       	mov    al,ds:0xc003182c
c001e8a2:	c3                   	ret    
c001e8a3:	ec                   	in     al,dx
c001e8a4:	c3                   	ret    

c001e8a5 <Vm::outbv(unsigned short, unsigned char)>:
c001e8a5:	53                   	push   ebx
c001e8a6:	83 ec 08             	sub    esp,0x8
c001e8a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8ad:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e8b1:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e8b6:	75 38                	jne    c001e8f0 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e8b8:	0f b6 c3             	movzx  eax,bl
c001e8bb:	51                   	push   ecx
c001e8bc:	51                   	push   ecx
c001e8bd:	50                   	push   eax
c001e8be:	68 0b c4 02 c0       	push   0xc002c40b
c001e8c3:	e8 0c 45 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001e8c8:	8b 15 2c 18 03 c0    	mov    edx,DWORD PTR ds:0xc003182c
c001e8ce:	83 c4 10             	add    esp,0x10
c001e8d1:	8d 42 01             	lea    eax,[edx+0x1]
c001e8d4:	88 9a 40 18 03 c0    	mov    BYTE PTR [edx-0x3ffce7c0],bl
c001e8da:	a3 2c 18 03 c0       	mov    ds:0xc003182c,eax
c001e8df:	83 f8 20             	cmp    eax,0x20
c001e8e2:	75 0f                	jne    c001e8f3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8e4:	c7 05 2c 18 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003182c,0x1f
c001e8ee:	eb 03                	jmp    c001e8f3 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e8f0:	88 d8                	mov    al,bl
c001e8f2:	ee                   	out    dx,al
c001e8f3:	83 c4 08             	add    esp,0x8
c001e8f6:	5b                   	pop    ebx
c001e8f7:	c3                   	ret    

c001e8f8 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e8f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e8fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e902:	c1 e0 04             	shl    eax,0x4
c001e905:	01 d0                	add    eax,edx
c001e907:	c3                   	ret    

c001e908 <Vm::getSegment(unsigned int)>:
c001e908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e90c:	c1 e8 10             	shr    eax,0x10
c001e90f:	c3                   	ret    

c001e910 <Vm::getOffset(unsigned int)>:
c001e910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e914:	c3                   	ret    

c001e915 <Vm::mainloop2()>:
c001e915:	83 ec 0c             	sub    esp,0xc
c001e918:	e8 5a f3 ff ff       	call   c001dc77 <lockScheduler()>
c001e91d:	83 ec 0c             	sub    esp,0xc
c001e920:	c6 05 25 18 03 c0 01 	mov    BYTE PTR ds:0xc0031825,0x1
c001e927:	6a 02                	push   0x2
c001e929:	e8 9c f7 ff ff       	call   c001e0ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e92e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e933:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e937:	52                   	push   edx
c001e938:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e93c:	52                   	push   edx
c001e93d:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e941:	52                   	push   edx
c001e942:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e946:	50                   	push   eax
c001e947:	e8 ae 19 fe ff       	call   c00002fa <goToVM86>
c001e94c:	83 c4 2c             	add    esp,0x2c
c001e94f:	c3                   	ret    

c001e950 <Vm::mainVm8086Loop(void*)>:
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	e8 21 f3 ff ff       	call   c001dc79 <unlockScheduler()>
c001e958:	83 c4 0c             	add    esp,0xc
c001e95b:	eb b8                	jmp    c001e915 <Vm::mainloop2()>

c001e95d <Vm::mainloop3(unsigned long)>:
c001e95d:	53                   	push   ebx
c001e95e:	83 ec 08             	sub    esp,0x8
c001e961:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e965:	e8 0d f3 ff ff       	call   c001dc77 <lockScheduler()>
c001e96a:	83 ec 0c             	sub    esp,0xc
c001e96d:	89 1d 20 18 03 c0    	mov    DWORD PTR ds:0xc0031820,ebx
c001e973:	6a 02                	push   0x2
c001e975:	c6 05 24 18 03 c0 01 	mov    BYTE PTR ds:0xc0031824,0x1
c001e97c:	e8 49 f7 ff ff       	call   c001e0ca <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e981:	83 c4 18             	add    esp,0x18
c001e984:	5b                   	pop    ebx
c001e985:	eb 8e                	jmp    c001e915 <Vm::mainloop2()>

c001e987 <Vm::initialise8086()>:
c001e987:	83 ec 0c             	sub    esp,0xc
c001e98a:	68 80 00 00 00       	push   0x80
c001e98f:	6a 00                	push   0x0
c001e991:	68 50 e9 01 c0       	push   0xc001e950
c001e996:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c001e99c:	e8 07 f4 ff ff       	call   c001dda8 <Process::createThread(void (*)(void*), void*, int)>
c001e9a1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e9a8:	a3 28 18 03 c0       	mov    ds:0xc0031828,eax
c001e9ad:	68 00 01 00 00       	push   0x100
c001e9b2:	a1 f4 17 03 c0       	mov    eax,ds:0xc00317f4
c001e9b7:	6a 00                	push   0x0
c001e9b9:	6a 00                	push   0x0
c001e9bb:	ff b0 32 19 00 00    	push   DWORD PTR [eax+0x1932]
c001e9c1:	e8 6e 3b ff ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e9c6:	83 c4 2c             	add    esp,0x2c
c001e9c9:	c3                   	ret    

c001e9ca <Vm::finish8086()>:
c001e9ca:	53                   	push   ebx
c001e9cb:	83 ec 08             	sub    esp,0x8
c001e9ce:	e8 a4 f2 ff ff       	call   c001dc77 <lockScheduler()>
c001e9d3:	80 3d 24 18 03 c0 00 	cmp    BYTE PTR ds:0xc0031824,0x0
c001e9da:	75 0c                	jne    c001e9e8 <Vm::finish8086()+0x1e>
c001e9dc:	e8 d1 f5 ff ff       	call   c001dfb2 <schedule()>
c001e9e1:	e8 93 f2 ff ff       	call   c001dc79 <unlockScheduler()>
c001e9e6:	eb e6                	jmp    c001e9ce <Vm::finish8086()+0x4>
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	8b 1d 20 18 03 c0    	mov    ebx,DWORD PTR ds:0xc0031820
c001e9f1:	ff 35 28 18 03 c0    	push   DWORD PTR ds:0xc0031828
c001e9f7:	c6 05 24 18 03 c0 00 	mov    BYTE PTR ds:0xc0031824,0x0
c001e9fe:	e8 8b f8 ff ff       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c001ea03:	e8 71 f2 ff ff       	call   c001dc79 <unlockScheduler()>
c001ea08:	89 d8                	mov    eax,ebx
c001ea0a:	83 c4 18             	add    esp,0x18
c001ea0d:	5b                   	pop    ebx
c001ea0e:	c3                   	ret    

c001ea0f <Vm::getOutput8086(unsigned char*)>:
c001ea0f:	83 ec 10             	sub    esp,0x10
c001ea12:	ff 35 2c 18 03 c0    	push   DWORD PTR ds:0xc003182c
c001ea18:	68 40 18 03 c0       	push   0xc0031840
c001ea1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea21:	e8 1e 1d fe ff       	call   c0000744 <memcpy>
c001ea26:	a1 2c 18 03 c0       	mov    eax,ds:0xc003182c
c001ea2b:	c7 05 2c 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003182c,0x0
c001ea35:	83 c4 1c             	add    esp,0x1c
c001ea38:	c3                   	ret    

c001ea39 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ea39:	55                   	push   ebp
c001ea3a:	57                   	push   edi
c001ea3b:	56                   	push   esi
c001ea3c:	53                   	push   ebx
c001ea3d:	83 ec 2c             	sub    esp,0x2c
c001ea40:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ea44:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ea48:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ea4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ea50:	e8 22 f2 ff ff       	call   c001dc77 <lockScheduler()>
c001ea55:	a0 25 18 03 c0       	mov    al,ds:0xc0031825
c001ea5a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ea5e:	84 c0                	test   al,al
c001ea60:	75 0c                	jne    c001ea6e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ea62:	e8 4b f5 ff ff       	call   c001dfb2 <schedule()>
c001ea67:	e8 0d f2 ff ff       	call   c001dc79 <unlockScheduler()>
c001ea6c:	eb e2                	jmp    c001ea50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ea6e:	a1 28 18 03 c0       	mov    eax,ds:0xc0031828
c001ea73:	c7 05 2c 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003182c,0x0
c001ea7d:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ea81:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001ea85:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ea89:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ea8d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ea91:	50                   	push   eax
c001ea92:	6a 20                	push   0x20
c001ea94:	6a 00                	push   0x0
c001ea96:	68 40 18 03 c0       	push   0xc0031840
c001ea9b:	e8 d8 1c fe ff       	call   c0000778 <memset>
c001eaa0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001eaa7:	e8 94 0d ff ff       	call   c000f840 <malloc>
c001eaac:	83 c4 0c             	add    esp,0xc
c001eaaf:	89 c7                	mov    edi,eax
c001eab1:	ff 35 f4 17 03 c0    	push   DWORD PTR ds:0xc00317f4
c001eab7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001eabb:	50                   	push   eax
c001eabc:	e8 6b 48 ff ff       	call   c001332c <File::File(char const*, Process*)>
c001eac1:	83 c4 10             	add    esp,0x10
c001eac4:	85 ff                	test   edi,edi
c001eac6:	75 0a                	jne    c001ead2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001eac8:	83 ec 0c             	sub    esp,0xc
c001eacb:	68 27 c4 02 c0       	push   0xc002c427
c001ead0:	eb 27                	jmp    c001eaf9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ead2:	50                   	push   eax
c001ead3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ead7:	50                   	push   eax
c001ead8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eadc:	50                   	push   eax
c001eadd:	57                   	push   edi
c001eade:	e8 59 4b ff ff       	call   c001363c <File::stat(unsigned long long*, bool*)>
c001eae3:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001eae8:	83 c4 10             	add    esp,0x10
c001eaeb:	89 e8                	mov    eax,ebp
c001eaed:	84 c0                	test   al,al
c001eaef:	74 19                	je     c001eb0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eaf1:	83 ec 0c             	sub    esp,0xc
c001eaf4:	68 3b c4 02 c0       	push   0xc002c43b
c001eaf9:	e8 7f b9 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001eafe:	31 ed                	xor    ebp,ebp
c001eb00:	e8 74 f1 ff ff       	call   c001dc79 <unlockScheduler()>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	eb 75                	jmp    c001eb7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb0a:	50                   	push   eax
c001eb0b:	50                   	push   eax
c001eb0c:	6a 01                	push   0x1
c001eb0e:	57                   	push   edi
c001eb0f:	e8 7c 48 ff ff       	call   c0013390 <File::open(FileOpenMode)>
c001eb14:	83 c4 10             	add    esp,0x10
c001eb17:	85 c0                	test   eax,eax
c001eb19:	74 17                	je     c001eb32 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001eb1b:	83 ec 0c             	sub    esp,0xc
c001eb1e:	68 54 c4 02 c0       	push   0xc002c454
c001eb23:	e8 55 b9 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001eb28:	e8 4c f1 ff ff       	call   c001dc79 <unlockScheduler()>
c001eb2d:	83 c4 10             	add    esp,0x10
c001eb30:	eb 4d                	jmp    c001eb7f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001eb32:	0f b7 f6             	movzx  esi,si
c001eb35:	50                   	push   eax
c001eb36:	0f b7 db             	movzx  ebx,bx
c001eb39:	50                   	push   eax
c001eb3a:	56                   	push   esi
c001eb3b:	53                   	push   ebx
c001eb3c:	e8 b7 fd ff ff       	call   c001e8f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eb41:	5a                   	pop    edx
c001eb42:	8b 17                	mov    edx,DWORD PTR [edi]
c001eb44:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eb48:	51                   	push   ecx
c001eb49:	50                   	push   eax
c001eb4a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eb52:	57                   	push   edi
c001eb53:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eb56:	83 c4 14             	add    esp,0x14
c001eb59:	57                   	push   edi
c001eb5a:	e8 8f 48 ff ff       	call   c00133ee <File::close()>
c001eb5f:	c6 05 25 18 03 c0 00 	mov    BYTE PTR ds:0xc0031825,0x0
c001eb66:	e8 0e f1 ff ff       	call   c001dc79 <unlockScheduler()>
c001eb6b:	59                   	pop    ecx
c001eb6c:	ff 35 28 18 03 c0    	push   DWORD PTR ds:0xc0031828
c001eb72:	e8 17 f7 ff ff       	call   c001e28e <unblockTask(ThreadControlBlock*)>
c001eb77:	83 c4 10             	add    esp,0x10
c001eb7a:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001eb7f:	83 c4 2c             	add    esp,0x2c
c001eb82:	89 e8                	mov    eax,ebp
c001eb84:	5b                   	pop    ebx
c001eb85:	5e                   	pop    esi
c001eb86:	5f                   	pop    edi
c001eb87:	5d                   	pop    ebp
c001eb88:	c3                   	ret    

c001eb89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eb89:	57                   	push   edi
c001eb8a:	56                   	push   esi
c001eb8b:	53                   	push   ebx
c001eb8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eb94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eb98:	83 e8 06             	sub    eax,0x6
c001eb9b:	0f b7 c0             	movzx  eax,ax
c001eb9e:	50                   	push   eax
c001eb9f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001eba4:	50                   	push   eax
c001eba5:	e8 4e fd ff ff       	call   c001e8f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ebaa:	5a                   	pop    edx
c001ebab:	5e                   	pop    esi
c001ebac:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ebaf:	8d 56 fa             	lea    edx,[esi-0x6]
c001ebb2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ebb8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ebbb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ebbe:	83 c2 02             	add    edx,0x2
c001ebc1:	66 89 10             	mov    WORD PTR [eax],dx
c001ebc4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ebc7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ebcb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ebce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ebd2:	89 d6                	mov    esi,edx
c001ebd4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ebda:	66 81 e6 ff fd       	and    si,0xfdff
c001ebdf:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ebe3:	74 07                	je     c001ebec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ebe5:	89 d6                	mov    esi,edx
c001ebe7:	66 81 ce 00 02       	or     si,0x200
c001ebec:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ebf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ebf5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ebf9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ec01:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ec04:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ec0c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ec0f:	5b                   	pop    ebx
c001ec10:	5e                   	pop    esi
c001ec11:	5f                   	pop    edi
c001ec12:	c3                   	ret    

c001ec13 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ec13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec18:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec1d:	c1 e0 04             	shl    eax,0x4
c001ec20:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ec23:	c3                   	ret    

c001ec24 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ec24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec2e:	c1 e0 04             	shl    eax,0x4
c001ec31:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ec35:	c3                   	ret    

c001ec36 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ec36:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec3b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec40:	c1 e0 04             	shl    eax,0x4
c001ec43:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ec46:	c3                   	ret    

c001ec47 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ec47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec51:	c1 e0 04             	shl    eax,0x4
c001ec54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec58:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ec5b:	c3                   	ret    

c001ec5c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ec5c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec61:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec66:	c1 e0 04             	shl    eax,0x4
c001ec69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec6d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ec71:	c3                   	ret    

c001ec72 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ec72:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec7c:	c1 e0 04             	shl    eax,0x4
c001ec7f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec83:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ec86:	c3                   	ret    

c001ec87 <Vm::faultHandler(regs*)>:
c001ec87:	55                   	push   ebp
c001ec88:	57                   	push   edi
c001ec89:	56                   	push   esi
c001ec8a:	53                   	push   ebx
c001ec8b:	83 ec 1c             	sub    esp,0x1c
c001ec8e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ec92:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ec95:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ec98:	0f b7 c1             	movzx  eax,cx
c001ec9b:	50                   	push   eax
c001ec9c:	0f b7 c3             	movzx  eax,bx
c001ec9f:	c1 e3 04             	shl    ebx,0x4
c001eca2:	50                   	push   eax
c001eca3:	e8 50 fc ff ff       	call   c001e8f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001eca8:	5a                   	pop    edx
c001eca9:	89 c5                	mov    ebp,eax
c001ecab:	5e                   	pop    esi
c001ecac:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ecb0:	50                   	push   eax
c001ecb1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ecb5:	50                   	push   eax
c001ecb6:	e8 3d fc ff ff       	call   c001e8f8 <Vm::realToLinear(unsigned short, unsigned short)>
c001ecbb:	01 cb                	add    ebx,ecx
c001ecbd:	89 c6                	mov    esi,eax
c001ecbf:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ecc3:	50                   	push   eax
c001ecc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ecc8:	50                   	push   eax
c001ecc9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eccd:	50                   	push   eax
c001ecce:	55                   	push   ebp
c001eccf:	53                   	push   ebx
c001ecd0:	b3 06                	mov    bl,0x6
c001ecd2:	68 6d c4 02 c0       	push   0xc002c46d
c001ecd7:	e8 f8 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ecdc:	83 c4 20             	add    esp,0x20
c001ecdf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ece4:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ece9:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eced:	3c 9d                	cmp    al,0x9d
c001ecef:	0f 84 d7 02 00 00    	je     c001efcc <Vm::faultHandler(regs*)+0x345>
c001ecf5:	0f 87 a3 00 00 00    	ja     c001ed9e <Vm::faultHandler(regs*)+0x117>
c001ecfb:	3c 66                	cmp    al,0x66
c001ecfd:	0f 84 15 02 00 00    	je     c001ef18 <Vm::faultHandler(regs*)+0x291>
c001ed03:	77 5f                	ja     c001ed64 <Vm::faultHandler(regs*)+0xdd>
c001ed05:	3c 36                	cmp    al,0x36
c001ed07:	0f 84 f1 01 00 00    	je     c001eefe <Vm::faultHandler(regs*)+0x277>
c001ed0d:	77 28                	ja     c001ed37 <Vm::faultHandler(regs*)+0xb0>
c001ed0f:	3c 26                	cmp    al,0x26
c001ed11:	0f 84 99 01 00 00    	je     c001eeb0 <Vm::faultHandler(regs*)+0x229>
c001ed17:	3c 2e                	cmp    al,0x2e
c001ed19:	0f 85 3b 07 00 00    	jne    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	31 db                	xor    ebx,ebx
c001ed24:	68 82 c4 02 c0       	push   0xc002c482
c001ed29:	e8 a6 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ed2e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed31:	83 c4 10             	add    esp,0x10
c001ed34:	45                   	inc    ebp
c001ed35:	eb b2                	jmp    c001ece9 <Vm::faultHandler(regs*)+0x62>
c001ed37:	3c 64                	cmp    al,0x64
c001ed39:	0f 84 8b 01 00 00    	je     c001eeca <Vm::faultHandler(regs*)+0x243>
c001ed3f:	0f 87 9f 01 00 00    	ja     c001eee4 <Vm::faultHandler(regs*)+0x25d>
c001ed45:	3c 3e                	cmp    al,0x3e
c001ed47:	0f 85 0d 07 00 00    	jne    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ed4d:	83 ec 0c             	sub    esp,0xc
c001ed50:	b3 01                	mov    bl,0x1
c001ed52:	68 86 c4 02 c0       	push   0xc002c486
c001ed57:	e8 78 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ed5c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ed5f:	83 c4 10             	add    esp,0x10
c001ed62:	eb d0                	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001ed64:	3c 6d                	cmp    al,0x6d
c001ed66:	0f 84 af 03 00 00    	je     c001f11b <Vm::faultHandler(regs*)+0x494>
c001ed6c:	77 15                	ja     c001ed83 <Vm::faultHandler(regs*)+0xfc>
c001ed6e:	3c 67                	cmp    al,0x67
c001ed70:	0f 84 bf 01 00 00    	je     c001ef35 <Vm::faultHandler(regs*)+0x2ae>
c001ed76:	3c 6c                	cmp    al,0x6c
c001ed78:	0f 84 3f 03 00 00    	je     c001f0bd <Vm::faultHandler(regs*)+0x436>
c001ed7e:	e9 d7 06 00 00       	jmp    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ed83:	3c 6f                	cmp    al,0x6f
c001ed85:	0f 84 a4 04 00 00    	je     c001f22f <Vm::faultHandler(regs*)+0x5a8>
c001ed8b:	0f 82 11 04 00 00    	jb     c001f1a2 <Vm::faultHandler(regs*)+0x51b>
c001ed91:	3c 9c                	cmp    al,0x9c
c001ed93:	0f 84 ba 01 00 00    	je     c001ef53 <Vm::faultHandler(regs*)+0x2cc>
c001ed99:	e9 bc 06 00 00       	jmp    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ed9e:	3c ec                	cmp    al,0xec
c001eda0:	0f 84 24 06 00 00    	je     c001f3ca <Vm::faultHandler(regs*)+0x743>
c001eda6:	0f 87 93 00 00 00    	ja     c001ee3f <Vm::faultHandler(regs*)+0x1b8>
c001edac:	3c e4                	cmp    al,0xe4
c001edae:	0f 84 5c 05 00 00    	je     c001f310 <Vm::faultHandler(regs*)+0x689>
c001edb4:	77 6a                	ja     c001ee20 <Vm::faultHandler(regs*)+0x199>
c001edb6:	3c cd                	cmp    al,0xcd
c001edb8:	0f 84 7e 02 00 00    	je     c001f03c <Vm::faultHandler(regs*)+0x3b5>
c001edbe:	3c cf                	cmp    al,0xcf
c001edc0:	0f 85 94 06 00 00    	jne    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001edc6:	83 ec 0c             	sub    esp,0xc
c001edc9:	68 ca c4 02 c0       	push   0xc002c4ca
c001edce:	e8 01 40 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001edd3:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001edd6:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001edd9:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eddd:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ede0:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ede4:	0d 00 02 02 00       	or     eax,0x20200
c001ede9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edec:	56                   	push   esi
c001eded:	53                   	push   ebx
c001edee:	52                   	push   edx
c001edef:	68 d0 c4 02 c0       	push   0xc002c4d0
c001edf4:	e8 db 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001edf9:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001edfd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ee03:	66 c1 e8 09          	shr    ax,0x9
c001ee07:	83 e0 01             	and    eax,0x1
c001ee0a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ee0d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ee10:	83 c0 06             	add    eax,0x6
c001ee13:	25 ff ff 00 00       	and    eax,0xffff
c001ee18:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ee1b:	e9 95 02 00 00       	jmp    c001f0b5 <Vm::faultHandler(regs*)+0x42e>
c001ee20:	3c e6                	cmp    al,0xe6
c001ee22:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ee26:	0f 84 4e 05 00 00    	je     c001f37a <Vm::faultHandler(regs*)+0x6f3>
c001ee2c:	0f 82 0a 05 00 00    	jb     c001f33c <Vm::faultHandler(regs*)+0x6b5>
c001ee32:	3c e7                	cmp    al,0xe7
c001ee34:	0f 84 69 05 00 00    	je     c001f3a3 <Vm::faultHandler(regs*)+0x71c>
c001ee3a:	e9 1b 06 00 00       	jmp    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ee3f:	3c ef                	cmp    al,0xef
c001ee41:	0f 84 e6 05 00 00    	je     c001f42d <Vm::faultHandler(regs*)+0x7a6>
c001ee47:	77 37                	ja     c001ee80 <Vm::faultHandler(regs*)+0x1f9>
c001ee49:	3c ed                	cmp    al,0xed
c001ee4b:	0f 84 a3 05 00 00    	je     c001f3f4 <Vm::faultHandler(regs*)+0x76d>
c001ee51:	3c ee                	cmp    al,0xee
c001ee53:	0f 85 01 06 00 00    	jne    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ee59:	52                   	push   edx
c001ee5a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ee5d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ee60:	68 6b c5 02 c0       	push   0xc002c56b
c001ee65:	e8 6a 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ee6a:	59                   	pop    ecx
c001ee6b:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ee6f:	5b                   	pop    ebx
c001ee70:	50                   	push   eax
c001ee71:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee75:	50                   	push   eax
c001ee76:	e8 2a fa ff ff       	call   c001e8a5 <Vm::outbv(unsigned short, unsigned char)>
c001ee7b:	e9 a5 05 00 00       	jmp    c001f425 <Vm::faultHandler(regs*)+0x79e>
c001ee80:	3c fa                	cmp    al,0xfa
c001ee82:	0f 84 f7 01 00 00    	je     c001f07f <Vm::faultHandler(regs*)+0x3f8>
c001ee88:	3c fb                	cmp    al,0xfb
c001ee8a:	0f 84 0a 02 00 00    	je     c001f09a <Vm::faultHandler(regs*)+0x413>
c001ee90:	3c f3                	cmp    al,0xf3
c001ee92:	0f 85 c2 05 00 00    	jne    c001f45a <Vm::faultHandler(regs*)+0x7d3>
c001ee98:	83 ec 0c             	sub    esp,0xc
c001ee9b:	68 a3 c4 02 c0       	push   0xc002c4a3
c001eea0:	e8 2f 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001eea5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eea8:	83 c4 10             	add    esp,0x10
c001eeab:	e9 84 fe ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001eeb0:	83 ec 0c             	sub    esp,0xc
c001eeb3:	b3 02                	mov    bl,0x2
c001eeb5:	68 7e c4 02 c0       	push   0xc002c47e
c001eeba:	e8 15 3f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001eebf:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	e9 6a fe ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001eeca:	83 ec 0c             	sub    esp,0xc
c001eecd:	b3 03                	mov    bl,0x3
c001eecf:	68 8a c4 02 c0       	push   0xc002c48a
c001eed4:	e8 fb 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001eed9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eedc:	83 c4 10             	add    esp,0x10
c001eedf:	e9 50 fe ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	b3 04                	mov    bl,0x4
c001eee9:	68 8e c4 02 c0       	push   0xc002c48e
c001eeee:	e8 e1 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001eef3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eef6:	83 c4 10             	add    esp,0x10
c001eef9:	e9 36 fe ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001eefe:	83 ec 0c             	sub    esp,0xc
c001ef01:	b3 05                	mov    bl,0x5
c001ef03:	68 92 c4 02 c0       	push   0xc002c492
c001ef08:	e8 c7 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef0d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef10:	83 c4 10             	add    esp,0x10
c001ef13:	e9 1c fe ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001ef18:	83 ec 0c             	sub    esp,0xc
c001ef1b:	68 96 c4 02 c0       	push   0xc002c496
c001ef20:	e8 af 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef25:	83 c4 10             	add    esp,0x10
c001ef28:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef2b:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001ef30:	e9 ff fd ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001ef35:	50                   	push   eax
c001ef36:	50                   	push   eax
c001ef37:	6a 01                	push   0x1
c001ef39:	68 9b c4 02 c0       	push   0xc002c49b
c001ef3e:	e8 91 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef43:	83 c4 10             	add    esp,0x10
c001ef46:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef49:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ef4e:	e9 e1 fd ff ff       	jmp    c001ed34 <Vm::faultHandler(regs*)+0xad>
c001ef53:	83 ec 0c             	sub    esp,0xc
c001ef56:	68 a9 c4 02 c0       	push   0xc002c4a9
c001ef5b:	e8 74 3e ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001ef60:	83 c4 10             	add    esp,0x10
c001ef63:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ef66:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ef6b:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ef6e:	74 2f                	je     c001ef9f <Vm::faultHandler(regs*)+0x318>
c001ef70:	83 ea 04             	sub    edx,0x4
c001ef73:	25 ff 0d 00 00       	and    eax,0xdff
c001ef78:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef7e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ef81:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef84:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ef8a:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ef8e:	0f 84 bf 04 00 00    	je     c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001ef94:	80 cc 02             	or     ah,0x2
c001ef97:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ef9a:	e9 b4 04 00 00       	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001ef9f:	83 ea 02             	sub    edx,0x2
c001efa2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001efa8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001efab:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efaf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001efb5:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001efb9:	74 05                	je     c001efc0 <Vm::faultHandler(regs*)+0x339>
c001efbb:	80 cc 02             	or     ah,0x2
c001efbe:	eb 03                	jmp    c001efc3 <Vm::faultHandler(regs*)+0x33c>
c001efc0:	80 e4 fd             	and    ah,0xfd
c001efc3:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001efc7:	e9 87 04 00 00       	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001efcc:	83 ec 0c             	sub    esp,0xc
c001efcf:	68 b0 c4 02 c0       	push   0xc002c4b0
c001efd4:	e8 fb 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001efd9:	83 c4 10             	add    esp,0x10
c001efdc:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001efe1:	74 28                	je     c001f00b <Vm::faultHandler(regs*)+0x384>
c001efe3:	8b 06                	mov    eax,DWORD PTR [esi]
c001efe5:	25 ff 0d 00 00       	and    eax,0xdff
c001efea:	0d 00 02 02 00       	or     eax,0x20200
c001efef:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eff2:	8b 06                	mov    eax,DWORD PTR [esi]
c001eff4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001effa:	c1 e8 09             	shr    eax,0x9
c001effd:	83 e0 01             	and    eax,0x1
c001f000:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f003:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f006:	83 c0 04             	add    eax,0x4
c001f009:	eb 24                	jmp    c001f02f <Vm::faultHandler(regs*)+0x3a8>
c001f00b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f00e:	0d 00 02 02 00       	or     eax,0x20200
c001f013:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f016:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f019:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f01f:	66 c1 e8 09          	shr    ax,0x9
c001f023:	83 e0 01             	and    eax,0x1
c001f026:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f029:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f02c:	83 c0 02             	add    eax,0x2
c001f02f:	25 ff ff 00 00       	and    eax,0xffff
c001f034:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f037:	e9 17 04 00 00       	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001f03c:	53                   	push   ebx
c001f03d:	53                   	push   ebx
c001f03e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f042:	50                   	push   eax
c001f043:	68 b6 c4 02 c0       	push   0xc002c4b6
c001f048:	e8 87 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f04d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f051:	83 c4 10             	add    esp,0x10
c001f054:	3c ee                	cmp    al,0xee
c001f056:	75 10                	jne    c001f068 <Vm::faultHandler(regs*)+0x3e1>
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f05e:	e8 fa f8 ff ff       	call   c001e95d <Vm::mainloop3(unsigned long)>
c001f063:	e9 c0 03 00 00       	jmp    c001f428 <Vm::faultHandler(regs*)+0x7a1>
c001f068:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f06c:	83 ec 0c             	sub    esp,0xc
c001f06f:	53                   	push   ebx
c001f070:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f074:	53                   	push   ebx
c001f075:	55                   	push   ebp
c001f076:	50                   	push   eax
c001f077:	57                   	push   edi
c001f078:	e8 0c fb ff ff       	call   c001eb89 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f07d:	eb 36                	jmp    c001f0b5 <Vm::faultHandler(regs*)+0x42e>
c001f07f:	83 ec 0c             	sub    esp,0xc
c001f082:	68 c0 c4 02 c0       	push   0xc002c4c0
c001f087:	e8 48 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f08c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f091:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f095:	e9 8b 03 00 00       	jmp    c001f425 <Vm::faultHandler(regs*)+0x79e>
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	68 c5 c4 02 c0       	push   0xc002c4c5
c001f0a2:	e8 2d 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f0a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0ac:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f0b0:	e9 70 03 00 00       	jmp    c001f425 <Vm::faultHandler(regs*)+0x79e>
c001f0b5:	83 c4 20             	add    esp,0x20
c001f0b8:	e9 99 03 00 00       	jmp    c001f456 <Vm::faultHandler(regs*)+0x7cf>
c001f0bd:	83 ec 0c             	sub    esp,0xc
c001f0c0:	68 03 c5 02 c0       	push   0xc002c503
c001f0c5:	e8 0a 3d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f0ca:	83 c4 10             	add    esp,0x10
c001f0cd:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f0d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f0d5:	74 0d                	je     c001f0e4 <Vm::faultHandler(regs*)+0x45d>
c001f0d7:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f0de:	0f 87 9e 01 00 00    	ja     c001f282 <Vm::faultHandler(regs*)+0x5fb>
c001f0e4:	83 ec 0c             	sub    esp,0xc
c001f0e7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0eb:	0f b7 db             	movzx  ebx,bx
c001f0ee:	50                   	push   eax
c001f0ef:	e8 9e f7 ff ff       	call   c001e892 <Vm::inbv(unsigned short)>
c001f0f4:	83 c4 0c             	add    esp,0xc
c001f0f7:	0f b6 c0             	movzx  eax,al
c001f0fa:	50                   	push   eax
c001f0fb:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f0ff:	50                   	push   eax
c001f100:	53                   	push   ebx
c001f101:	e8 41 fb ff ff       	call   c001ec47 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f106:	83 c4 10             	add    esp,0x10
c001f109:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f10c:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f110:	74 03                	je     c001f115 <Vm::faultHandler(regs*)+0x48e>
c001f112:	48                   	dec    eax
c001f113:	eb 01                	jmp    c001f116 <Vm::faultHandler(regs*)+0x48f>
c001f115:	40                   	inc    eax
c001f116:	0f b7 c0             	movzx  eax,ax
c001f119:	eb 7f                	jmp    c001f19a <Vm::faultHandler(regs*)+0x513>
c001f11b:	83 ec 0c             	sub    esp,0xc
c001f11e:	68 35 c5 02 c0       	push   0xc002c535
c001f123:	e8 ac 3c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f128:	83 c4 10             	add    esp,0x10
c001f12b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f12e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f133:	74 0d                	je     c001f142 <Vm::faultHandler(regs*)+0x4bb>
c001f135:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f13c:	0f 87 40 01 00 00    	ja     c001f282 <Vm::faultHandler(regs*)+0x5fb>
c001f142:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f145:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f149:	0f b7 db             	movzx  ebx,bx
c001f14c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f151:	74 20                	je     c001f173 <Vm::faultHandler(regs*)+0x4ec>
c001f153:	ed                   	in     eax,dx
c001f154:	51                   	push   ecx
c001f155:	50                   	push   eax
c001f156:	56                   	push   esi
c001f157:	53                   	push   ebx
c001f158:	e8 15 fb ff ff       	call   c001ec72 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f15d:	83 c4 10             	add    esp,0x10
c001f160:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f163:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f167:	74 05                	je     c001f16e <Vm::faultHandler(regs*)+0x4e7>
c001f169:	83 e8 04             	sub    eax,0x4
c001f16c:	eb 27                	jmp    c001f195 <Vm::faultHandler(regs*)+0x50e>
c001f16e:	83 c0 04             	add    eax,0x4
c001f171:	eb 22                	jmp    c001f195 <Vm::faultHandler(regs*)+0x50e>
c001f173:	66 ed                	in     ax,dx
c001f175:	0f b7 c0             	movzx  eax,ax
c001f178:	52                   	push   edx
c001f179:	50                   	push   eax
c001f17a:	56                   	push   esi
c001f17b:	53                   	push   ebx
c001f17c:	e8 db fa ff ff       	call   c001ec5c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f181:	83 c4 10             	add    esp,0x10
c001f184:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f187:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f18b:	74 05                	je     c001f192 <Vm::faultHandler(regs*)+0x50b>
c001f18d:	83 e8 02             	sub    eax,0x2
c001f190:	eb 03                	jmp    c001f195 <Vm::faultHandler(regs*)+0x50e>
c001f192:	83 c0 02             	add    eax,0x2
c001f195:	25 ff ff 00 00       	and    eax,0xffff
c001f19a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f19d:	e9 b1 02 00 00       	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001f1a2:	83 ec 0c             	sub    esp,0xc
c001f1a5:	4b                   	dec    ebx
c001f1a6:	68 3b c5 02 c0       	push   0xc002c53b
c001f1ab:	e8 24 3c ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f1b0:	83 c4 10             	add    esp,0x10
c001f1b3:	80 fb 05             	cmp    bl,0x5
c001f1b6:	77 0a                	ja     c001f1c2 <Vm::faultHandler(regs*)+0x53b>
c001f1b8:	0f b6 db             	movzx  ebx,bl
c001f1bb:	ff 24 9d ac c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a54]
c001f1c2:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f1c6:	eb 1b                	jmp    c001f1e3 <Vm::faultHandler(regs*)+0x55c>
c001f1c8:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f1cc:	eb 15                	jmp    c001f1e3 <Vm::faultHandler(regs*)+0x55c>
c001f1ce:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f1d2:	eb 0f                	jmp    c001f1e3 <Vm::faultHandler(regs*)+0x55c>
c001f1d4:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f1d8:	eb 09                	jmp    c001f1e3 <Vm::faultHandler(regs*)+0x55c>
c001f1da:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f1dd:	eb 04                	jmp    c001f1e3 <Vm::faultHandler(regs*)+0x55c>
c001f1df:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f1e3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f1e8:	74 0d                	je     c001f1f7 <Vm::faultHandler(regs*)+0x570>
c001f1ea:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f1f1:	0f 87 8b 00 00 00    	ja     c001f282 <Vm::faultHandler(regs*)+0x5fb>
c001f1f7:	53                   	push   ebx
c001f1f8:	53                   	push   ebx
c001f1f9:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f1fd:	52                   	push   edx
c001f1fe:	50                   	push   eax
c001f1ff:	e8 0f fa ff ff       	call   c001ec13 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f204:	5e                   	pop    esi
c001f205:	0f b6 c0             	movzx  eax,al
c001f208:	5d                   	pop    ebp
c001f209:	50                   	push   eax
c001f20a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f20e:	50                   	push   eax
c001f20f:	e8 91 f6 ff ff       	call   c001e8a5 <Vm::outbv(unsigned short, unsigned char)>
c001f214:	83 c4 10             	add    esp,0x10
c001f217:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f21a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f21e:	74 03                	je     c001f223 <Vm::faultHandler(regs*)+0x59c>
c001f220:	48                   	dec    eax
c001f221:	eb 01                	jmp    c001f224 <Vm::faultHandler(regs*)+0x59d>
c001f223:	40                   	inc    eax
c001f224:	0f b7 c0             	movzx  eax,ax
c001f227:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f22a:	e9 24 02 00 00       	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001f22f:	83 ec 0c             	sub    esp,0xc
c001f232:	4b                   	dec    ebx
c001f233:	68 3b c5 02 c0       	push   0xc002c53b
c001f238:	e8 97 3b ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	80 fb 05             	cmp    bl,0x5
c001f243:	77 0a                	ja     c001f24f <Vm::faultHandler(regs*)+0x5c8>
c001f245:	0f b6 db             	movzx  ebx,bl
c001f248:	ff 24 9d c4 c5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3a3c]
c001f24f:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f253:	eb 1b                	jmp    c001f270 <Vm::faultHandler(regs*)+0x5e9>
c001f255:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f259:	eb 15                	jmp    c001f270 <Vm::faultHandler(regs*)+0x5e9>
c001f25b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f25f:	eb 0f                	jmp    c001f270 <Vm::faultHandler(regs*)+0x5e9>
c001f261:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f265:	eb 09                	jmp    c001f270 <Vm::faultHandler(regs*)+0x5e9>
c001f267:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f26a:	eb 04                	jmp    c001f270 <Vm::faultHandler(regs*)+0x5e9>
c001f26c:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f270:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f273:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f278:	74 39                	je     c001f2b3 <Vm::faultHandler(regs*)+0x62c>
c001f27a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f280:	76 31                	jbe    c001f2b3 <Vm::faultHandler(regs*)+0x62c>
c001f282:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f286:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f28a:	51                   	push   ecx
c001f28b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f28f:	51                   	push   ecx
c001f290:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f294:	51                   	push   ecx
c001f295:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f299:	51                   	push   ecx
c001f29a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f29e:	52                   	push   edx
c001f29f:	50                   	push   eax
c001f2a0:	50                   	push   eax
c001f2a1:	68 08 c5 02 c0       	push   0xc002c508
c001f2a6:	e8 29 3b ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f2ab:	83 c4 20             	add    esp,0x20
c001f2ae:	e9 fb 01 00 00       	jmp    c001f4ae <Vm::faultHandler(regs*)+0x827>
c001f2b3:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f2b6:	0f b7 d3             	movzx  edx,bx
c001f2b9:	81 e6 00 04 00 00    	and    esi,0x400
c001f2bf:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f2c2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f2c7:	74 1d                	je     c001f2e6 <Vm::faultHandler(regs*)+0x65f>
c001f2c9:	51                   	push   ecx
c001f2ca:	51                   	push   ecx
c001f2cb:	52                   	push   edx
c001f2cc:	50                   	push   eax
c001f2cd:	e8 64 f9 ff ff       	call   c001ec36 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f2d2:	83 c4 10             	add    esp,0x10
c001f2d5:	89 ea                	mov    edx,ebp
c001f2d7:	ef                   	out    dx,eax
c001f2d8:	85 f6                	test   esi,esi
c001f2da:	74 05                	je     c001f2e1 <Vm::faultHandler(regs*)+0x65a>
c001f2dc:	83 eb 04             	sub    ebx,0x4
c001f2df:	eb 21                	jmp    c001f302 <Vm::faultHandler(regs*)+0x67b>
c001f2e1:	83 c3 04             	add    ebx,0x4
c001f2e4:	eb 1c                	jmp    c001f302 <Vm::faultHandler(regs*)+0x67b>
c001f2e6:	51                   	push   ecx
c001f2e7:	51                   	push   ecx
c001f2e8:	52                   	push   edx
c001f2e9:	50                   	push   eax
c001f2ea:	e8 35 f9 ff ff       	call   c001ec24 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f2ef:	83 c4 10             	add    esp,0x10
c001f2f2:	89 ea                	mov    edx,ebp
c001f2f4:	66 ef                	out    dx,ax
c001f2f6:	85 f6                	test   esi,esi
c001f2f8:	74 05                	je     c001f2ff <Vm::faultHandler(regs*)+0x678>
c001f2fa:	83 eb 02             	sub    ebx,0x2
c001f2fd:	eb 03                	jmp    c001f302 <Vm::faultHandler(regs*)+0x67b>
c001f2ff:	83 c3 02             	add    ebx,0x2
c001f302:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f308:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f30b:	e9 43 01 00 00       	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001f310:	53                   	push   ebx
c001f311:	53                   	push   ebx
c001f312:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f316:	50                   	push   eax
c001f317:	68 41 c5 02 c0       	push   0xc002c541
c001f31c:	e8 b3 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f321:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f328:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f32c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f32f:	e8 5e f5 ff ff       	call   c001e892 <Vm::inbv(unsigned short)>
c001f334:	0f b6 c0             	movzx  eax,al
c001f337:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f33a:	eb 5e                	jmp    c001f39a <Vm::faultHandler(regs*)+0x713>
c001f33c:	51                   	push   ecx
c001f33d:	51                   	push   ecx
c001f33e:	53                   	push   ebx
c001f33f:	68 47 c5 02 c0       	push   0xc002c547
c001f344:	e8 8b 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f349:	83 c4 10             	add    esp,0x10
c001f34c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f351:	74 07                	je     c001f35a <Vm::faultHandler(regs*)+0x6d3>
c001f353:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f357:	ed                   	in     eax,dx
c001f358:	eb 14                	jmp    c001f36e <Vm::faultHandler(regs*)+0x6e7>
c001f35a:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f35d:	66 31 db             	xor    bx,bx
c001f360:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f363:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f367:	66 ed                	in     ax,dx
c001f369:	0f b7 c0             	movzx  eax,ax
c001f36c:	09 d8                	or     eax,ebx
c001f36e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f371:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f375:	e9 dc 00 00 00       	jmp    c001f456 <Vm::faultHandler(regs*)+0x7cf>
c001f37a:	50                   	push   eax
c001f37b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f37e:	53                   	push   ebx
c001f37f:	68 4d c5 02 c0       	push   0xc002c54d
c001f384:	e8 4b 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f389:	58                   	pop    eax
c001f38a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f38e:	5a                   	pop    edx
c001f38f:	50                   	push   eax
c001f390:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f394:	50                   	push   eax
c001f395:	e8 0b f5 ff ff       	call   c001e8a5 <Vm::outbv(unsigned short, unsigned char)>
c001f39a:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f39e:	e9 85 00 00 00       	jmp    c001f428 <Vm::faultHandler(regs*)+0x7a1>
c001f3a3:	50                   	push   eax
c001f3a4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f3a7:	53                   	push   ebx
c001f3a8:	68 56 c5 02 c0       	push   0xc002c556
c001f3ad:	e8 22 3a ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f3b2:	83 c4 10             	add    esp,0x10
c001f3b5:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f3b9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f3be:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f3c1:	74 03                	je     c001f3c6 <Vm::faultHandler(regs*)+0x73f>
c001f3c3:	ef                   	out    dx,eax
c001f3c4:	eb ab                	jmp    c001f371 <Vm::faultHandler(regs*)+0x6ea>
c001f3c6:	66 ef                	out    dx,ax
c001f3c8:	eb a7                	jmp    c001f371 <Vm::faultHandler(regs*)+0x6ea>
c001f3ca:	55                   	push   ebp
c001f3cb:	55                   	push   ebp
c001f3cc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3cf:	68 5f c5 02 c0       	push   0xc002c55f
c001f3d4:	e8 fb 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f3d9:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f3e0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f3e4:	89 04 24             	mov    DWORD PTR [esp],eax
c001f3e7:	e8 a6 f4 ff ff       	call   c001e892 <Vm::inbv(unsigned short)>
c001f3ec:	0f b6 c0             	movzx  eax,al
c001f3ef:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f3f2:	eb 31                	jmp    c001f425 <Vm::faultHandler(regs*)+0x79e>
c001f3f4:	56                   	push   esi
c001f3f5:	56                   	push   esi
c001f3f6:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f3f9:	68 65 c5 02 c0       	push   0xc002c565
c001f3fe:	e8 d1 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f403:	83 c4 10             	add    esp,0x10
c001f406:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f409:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f40e:	74 03                	je     c001f413 <Vm::faultHandler(regs*)+0x78c>
c001f410:	ed                   	in     eax,dx
c001f411:	eb 0d                	jmp    c001f420 <Vm::faultHandler(regs*)+0x799>
c001f413:	66 ed                	in     ax,dx
c001f415:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f418:	0f b7 c0             	movzx  eax,ax
c001f41b:	66 31 d2             	xor    dx,dx
c001f41e:	09 d0                	or     eax,edx
c001f420:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f423:	eb 2e                	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001f425:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f428:	83 c4 10             	add    esp,0x10
c001f42b:	eb 29                	jmp    c001f456 <Vm::faultHandler(regs*)+0x7cf>
c001f42d:	50                   	push   eax
c001f42e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f431:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f434:	68 74 c5 02 c0       	push   0xc002c574
c001f439:	e8 96 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f43e:	83 c4 10             	add    esp,0x10
c001f441:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f444:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f449:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f44c:	74 03                	je     c001f451 <Vm::faultHandler(regs*)+0x7ca>
c001f44e:	ef                   	out    dx,eax
c001f44f:	eb 02                	jmp    c001f453 <Vm::faultHandler(regs*)+0x7cc>
c001f451:	66 ef                	out    dx,ax
c001f453:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f456:	b0 01                	mov    al,0x1
c001f458:	eb 56                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x829>
c001f45a:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f45e:	51                   	push   ecx
c001f45f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f463:	51                   	push   ecx
c001f464:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f468:	51                   	push   ecx
c001f469:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f46d:	51                   	push   ecx
c001f46e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f472:	52                   	push   edx
c001f473:	50                   	push   eax
c001f474:	50                   	push   eax
c001f475:	68 7d c5 02 c0       	push   0xc002c57d
c001f47a:	e8 55 39 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c001f47f:	83 c4 20             	add    esp,0x20
c001f482:	83 ec 0c             	sub    esp,0xc
c001f485:	6a 60                	push   0x60
c001f487:	e8 06 f4 ff ff       	call   c001e892 <Vm::inbv(unsigned short)>
c001f48c:	83 c4 10             	add    esp,0x10
c001f48f:	3c 1c                	cmp    al,0x1c
c001f491:	74 04                	je     c001f497 <Vm::faultHandler(regs*)+0x810>
c001f493:	3c 5a                	cmp    al,0x5a
c001f495:	75 eb                	jne    c001f482 <Vm::faultHandler(regs*)+0x7fb>
c001f497:	3c 1c                	cmp    al,0x1c
c001f499:	74 04                	je     c001f49f <Vm::faultHandler(regs*)+0x818>
c001f49b:	3c 5a                	cmp    al,0x5a
c001f49d:	75 0f                	jne    c001f4ae <Vm::faultHandler(regs*)+0x827>
c001f49f:	83 ec 0c             	sub    esp,0xc
c001f4a2:	6a 60                	push   0x60
c001f4a4:	e8 e9 f3 ff ff       	call   c001e892 <Vm::inbv(unsigned short)>
c001f4a9:	83 c4 10             	add    esp,0x10
c001f4ac:	eb e9                	jmp    c001f497 <Vm::faultHandler(regs*)+0x810>
c001f4ae:	31 c0                	xor    eax,eax
c001f4b0:	83 c4 1c             	add    esp,0x1c
c001f4b3:	5b                   	pop    ebx
c001f4b4:	5e                   	pop    esi
c001f4b5:	5f                   	pop    edi
c001f4b6:	5d                   	pop    ebp
c001f4b7:	c3                   	ret    

c001f4b8 <Vm::x87Save(void*)>:
c001f4b8:	83 ec 10             	sub    esp,0x10
c001f4bb:	6a 48                	push   0x48
c001f4bd:	68 60 18 03 c0       	push   0xc0031860
c001f4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4c6:	e8 79 12 fe ff       	call   c0000744 <memcpy>
c001f4cb:	83 c4 1c             	add    esp,0x1c
c001f4ce:	c3                   	ret    

c001f4cf <Vm::x87Load(void*)>:
c001f4cf:	83 ec 10             	sub    esp,0x10
c001f4d2:	6a 48                	push   0x48
c001f4d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f4d8:	68 60 18 03 c0       	push   0xc0031860
c001f4dd:	e8 62 12 fe ff       	call   c0000744 <memcpy>
c001f4e2:	83 c4 1c             	add    esp,0x1c
c001f4e5:	c3                   	ret    

c001f4e6 <Vm::fpuInternalTo32(unsigned long long)>:
c001f4e6:	57                   	push   edi
c001f4e7:	56                   	push   esi
c001f4e8:	53                   	push   ebx
c001f4e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f1:	89 d6                	mov    esi,edx
c001f4f3:	89 d7                	mov    edi,edx
c001f4f5:	89 c1                	mov    ecx,eax
c001f4f7:	c1 ef 14             	shr    edi,0x14
c001f4fa:	89 d3                	mov    ebx,edx
c001f4fc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f502:	31 d2                	xor    edx,edx
c001f504:	89 f8                	mov    eax,edi
c001f506:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f50c:	bf ff 00 00 00       	mov    edi,0xff
c001f511:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f516:	83 d2 ff             	adc    edx,0xffffffff
c001f519:	39 c7                	cmp    edi,eax
c001f51b:	bf 00 00 00 00       	mov    edi,0x0
c001f520:	19 d7                	sbb    edi,edx
c001f522:	72 15                	jb     c001f539 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f524:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f528:	c1 e0 17             	shl    eax,0x17
c001f52b:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f531:	09 f1                	or     ecx,esi
c001f533:	09 c1                	or     ecx,eax
c001f535:	89 cf                	mov    edi,ecx
c001f537:	eb 02                	jmp    c001f53b <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f539:	31 ff                	xor    edi,edi
c001f53b:	89 f8                	mov    eax,edi
c001f53d:	5b                   	pop    ebx
c001f53e:	5e                   	pop    esi
c001f53f:	5f                   	pop    edi
c001f540:	c3                   	ret    

c001f541 <Vm::fpuInternalTo64(unsigned long long)>:
c001f541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f545:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f549:	c3                   	ret    

c001f54a <Vm::fpu32ToInternal(unsigned int)>:
c001f54a:	57                   	push   edi
c001f54b:	31 ff                	xor    edi,edi
c001f54d:	56                   	push   esi
c001f54e:	53                   	push   ebx
c001f54f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f553:	89 cb                	mov    ebx,ecx
c001f555:	89 ce                	mov    esi,ecx
c001f557:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f55d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f563:	c1 e9 17             	shr    ecx,0x17
c001f566:	89 f0                	mov    eax,esi
c001f568:	0f b6 d1             	movzx  edx,cl
c001f56b:	81 c2 80 03 00 00    	add    edx,0x380
c001f571:	89 d1                	mov    ecx,edx
c001f573:	89 fa                	mov    edx,edi
c001f575:	c1 e1 14             	shl    ecx,0x14
c001f578:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f57c:	c1 e0 1d             	shl    eax,0x1d
c001f57f:	89 d7                	mov    edi,edx
c001f581:	89 c6                	mov    esi,eax
c001f583:	89 ca                	mov    edx,ecx
c001f585:	89 f0                	mov    eax,esi
c001f587:	09 fa                	or     edx,edi
c001f589:	09 da                	or     edx,ebx
c001f58b:	5b                   	pop    ebx
c001f58c:	5e                   	pop    esi
c001f58d:	5f                   	pop    edi
c001f58e:	c3                   	ret    

c001f58f <Vm::fpu64ToInternal(unsigned long long)>:
c001f58f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f593:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f597:	c3                   	ret    

c001f598 <Vm::fpuFloatToLong(unsigned long long)>:
c001f598:	57                   	push   edi
c001f599:	31 c0                	xor    eax,eax
c001f59b:	56                   	push   esi
c001f59c:	31 d2                	xor    edx,edx
c001f59e:	53                   	push   ebx
c001f59f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f5a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5a7:	89 d9                	mov    ecx,ebx
c001f5a9:	c1 e9 14             	shr    ecx,0x14
c001f5ac:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f5b2:	89 cf                	mov    edi,ecx
c001f5b4:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f5ba:	78 33                	js     c001f5ef <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5bc:	89 d9                	mov    ecx,ebx
c001f5be:	89 f0                	mov    eax,esi
c001f5c0:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f5c6:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f5cc:	89 ca                	mov    edx,ecx
c001f5ce:	b9 34 00 00 00       	mov    ecx,0x34
c001f5d3:	29 f9                	sub    ecx,edi
c001f5d5:	0f ad d0             	shrd   eax,edx,cl
c001f5d8:	d3 fa                	sar    edx,cl
c001f5da:	f6 c1 20             	test   cl,0x20
c001f5dd:	74 05                	je     c001f5e4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f5df:	89 d0                	mov    eax,edx
c001f5e1:	c1 fa 1f             	sar    edx,0x1f
c001f5e4:	85 db                	test   ebx,ebx
c001f5e6:	79 07                	jns    c001f5ef <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f5e8:	f7 d8                	neg    eax
c001f5ea:	83 d2 00             	adc    edx,0x0
c001f5ed:	f7 da                	neg    edx
c001f5ef:	5b                   	pop    ebx
c001f5f0:	5e                   	pop    esi
c001f5f1:	5f                   	pop    edi
c001f5f2:	c3                   	ret    

c001f5f3 <Vm::fpuULongToFloat(unsigned long long)>:
c001f5f3:	57                   	push   edi
c001f5f4:	31 c9                	xor    ecx,ecx
c001f5f6:	56                   	push   esi
c001f5f7:	53                   	push   ebx
c001f5f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5fc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f600:	0f ba e7 14          	bt     edi,0x14
c001f604:	72 07                	jb     c001f60d <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f606:	01 f6                	add    esi,esi
c001f608:	11 ff                	adc    edi,edi
c001f60a:	41                   	inc    ecx
c001f60b:	eb f3                	jmp    c001f600 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f60d:	89 fa                	mov    edx,edi
c001f60f:	89 f0                	mov    eax,esi
c001f611:	bb 33 04 00 00       	mov    ebx,0x433
c001f616:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f61c:	29 cb                	sub    ebx,ecx
c001f61e:	89 d9                	mov    ecx,ebx
c001f620:	5b                   	pop    ebx
c001f621:	c1 e1 14             	shl    ecx,0x14
c001f624:	5e                   	pop    esi
c001f625:	09 ca                	or     edx,ecx
c001f627:	5f                   	pop    edi
c001f628:	c3                   	ret    

c001f629 <Vm::fpuLongToFloat(long long)>:
c001f629:	56                   	push   esi
c001f62a:	31 c0                	xor    eax,eax
c001f62c:	53                   	push   ebx
c001f62d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f631:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f635:	39 c8                	cmp    eax,ecx
c001f637:	19 d8                	sbb    eax,ebx
c001f639:	7d 04                	jge    c001f63f <Vm::fpuLongToFloat(long long)+0x16>
c001f63b:	31 f6                	xor    esi,esi
c001f63d:	eb 0c                	jmp    c001f64b <Vm::fpuLongToFloat(long long)+0x22>
c001f63f:	f7 d9                	neg    ecx
c001f641:	be 01 00 00 00       	mov    esi,0x1
c001f646:	83 d3 00             	adc    ebx,0x0
c001f649:	f7 db                	neg    ebx
c001f64b:	31 c0                	xor    eax,eax
c001f64d:	0f ba e3 14          	bt     ebx,0x14
c001f651:	72 07                	jb     c001f65a <Vm::fpuLongToFloat(long long)+0x31>
c001f653:	01 c9                	add    ecx,ecx
c001f655:	11 db                	adc    ebx,ebx
c001f657:	40                   	inc    eax
c001f658:	eb f3                	jmp    c001f64d <Vm::fpuLongToFloat(long long)+0x24>
c001f65a:	ba 33 04 00 00       	mov    edx,0x433
c001f65f:	29 c2                	sub    edx,eax
c001f661:	89 c8                	mov    eax,ecx
c001f663:	c1 e2 14             	shl    edx,0x14
c001f666:	89 d9                	mov    ecx,ebx
c001f668:	89 f3                	mov    ebx,esi
c001f66a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f670:	09 ca                	or     edx,ecx
c001f672:	84 db                	test   bl,bl
c001f674:	74 06                	je     c001f67c <Vm::fpuLongToFloat(long long)+0x53>
c001f676:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f67c:	5b                   	pop    ebx
c001f67d:	5e                   	pop    esi
c001f67e:	c3                   	ret    

c001f67f <Vm::fpuGet0()>:
c001f67f:	31 c0                	xor    eax,eax
c001f681:	31 d2                	xor    edx,edx
c001f683:	c3                   	ret    

c001f684 <Vm::fpuGet1()>:
c001f684:	b8 01 00 00 00       	mov    eax,0x1
c001f689:	31 d2                	xor    edx,edx
c001f68b:	c3                   	ret    

c001f68c <Vm::fpuGetPi()>:
c001f68c:	b8 03 00 00 00       	mov    eax,0x3
c001f691:	31 d2                	xor    edx,edx
c001f693:	c3                   	ret    

c001f694 <Vm::fpuGetLog2E()>:
c001f694:	83 ec 18             	sub    esp,0x18
c001f697:	68 dc c5 02 c0       	push   0xc002c5dc
c001f69c:	e8 dc ad ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001f6a1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6a6:	31 d2                	xor    edx,edx
c001f6a8:	83 c4 1c             	add    esp,0x1c
c001f6ab:	c3                   	ret    

c001f6ac <Vm::fpuGetLogE2()>:
c001f6ac:	83 ec 18             	sub    esp,0x18
c001f6af:	68 e8 c5 02 c0       	push   0xc002c5e8
c001f6b4:	e8 c4 ad ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001f6b9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6be:	31 d2                	xor    edx,edx
c001f6c0:	83 c4 1c             	add    esp,0x1c
c001f6c3:	c3                   	ret    

c001f6c4 <Vm::fpuGetLog210()>:
c001f6c4:	83 ec 18             	sub    esp,0x18
c001f6c7:	68 f4 c5 02 c0       	push   0xc002c5f4
c001f6cc:	e8 ac ad ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001f6d1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6d6:	31 d2                	xor    edx,edx
c001f6d8:	83 c4 1c             	add    esp,0x1c
c001f6db:	c3                   	ret    

c001f6dc <Vm::fpuGetLog102()>:
c001f6dc:	83 ec 18             	sub    esp,0x18
c001f6df:	68 01 c6 02 c0       	push   0xc002c601
c001f6e4:	e8 94 ad ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001f6e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f6ee:	31 d2                	xor    edx,edx
c001f6f0:	83 c4 1c             	add    esp,0x1c
c001f6f3:	c3                   	ret    

c001f6f4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f6f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f6f8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f6fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f700:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f704:	0f 92 c0             	setb   al
c001f707:	c3                   	ret    

c001f708 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f708:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f710:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f714:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f718:	09 c2                	or     edx,eax
c001f71a:	0f 94 c0             	sete   al
c001f71d:	c3                   	ret    

c001f71e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f71e:	57                   	push   edi
c001f71f:	56                   	push   esi
c001f720:	53                   	push   ebx
c001f721:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f725:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f729:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f72d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f731:	57                   	push   edi
c001f732:	56                   	push   esi
c001f733:	53                   	push   ebx
c001f734:	51                   	push   ecx
c001f735:	e8 ce ff ff ff       	call   c001f708 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f73a:	83 c4 10             	add    esp,0x10
c001f73d:	88 c2                	mov    dl,al
c001f73f:	31 c0                	xor    eax,eax
c001f741:	84 d2                	test   dl,dl
c001f743:	75 0c                	jne    c001f751 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f745:	57                   	push   edi
c001f746:	56                   	push   esi
c001f747:	53                   	push   ebx
c001f748:	51                   	push   ecx
c001f749:	e8 a6 ff ff ff       	call   c001f6f4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f74e:	83 c4 10             	add    esp,0x10
c001f751:	83 e0 01             	and    eax,0x1
c001f754:	5b                   	pop    ebx
c001f755:	88 c1                	mov    cl,al
c001f757:	83 e2 01             	and    edx,0x1
c001f75a:	a0 61 18 03 c0       	mov    al,ds:0xc0031861
c001f75f:	c1 e2 06             	shl    edx,0x6
c001f762:	83 e0 ba             	and    eax,0xffffffba
c001f765:	5e                   	pop    esi
c001f766:	09 c8                	or     eax,ecx
c001f768:	5f                   	pop    edi
c001f769:	09 d0                	or     eax,edx
c001f76b:	a2 61 18 03 c0       	mov    ds:0xc0031861,al
c001f770:	c3                   	ret    

c001f771 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f775:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f779:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f77d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f781:	c3                   	ret    

c001f782 <Vm::fpuAbs(unsigned long long)>:
c001f782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f78a:	c3                   	ret    

c001f78b <Vm::fpuChs(unsigned long long)>:
c001f78b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f78f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f793:	f7 d8                	neg    eax
c001f795:	83 d2 00             	adc    edx,0x0
c001f798:	f7 da                	neg    edx
c001f79a:	c3                   	ret    

c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f79b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f79f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f7a4:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f7a8:	eb c7                	jmp    c001f771 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f7aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f7aa:	53                   	push   ebx
c001f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f7b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f7b7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7bb:	0f af ca             	imul   ecx,edx
c001f7be:	0f af d8             	imul   ebx,eax
c001f7c1:	f7 e2                	mul    edx
c001f7c3:	01 d9                	add    ecx,ebx
c001f7c5:	5b                   	pop    ebx
c001f7c6:	01 ca                	add    edx,ecx
c001f7c8:	c3                   	ret    

c001f7c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f7c9:	83 ec 0c             	sub    esp,0xc
c001f7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7dc:	e8 9b 70 00 00       	call   c002687c <__udivdi3>
c001f7e1:	83 c4 1c             	add    esp,0x1c
c001f7e4:	c3                   	ret    

c001f7e5 <Vm::fpuSquare(unsigned long long)>:
c001f7e5:	50                   	push   eax
c001f7e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f7ee:	52                   	push   edx
c001f7ef:	50                   	push   eax
c001f7f0:	52                   	push   edx
c001f7f1:	50                   	push   eax
c001f7f2:	e8 b3 ff ff ff       	call   c001f7aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f7f7:	83 c4 14             	add    esp,0x14
c001f7fa:	c3                   	ret    

c001f7fb <Vm::fpuGetReg(int)>:
c001f7fb:	83 ec 0c             	sub    esp,0xc
c001f7fe:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f803:	76 10                	jbe    c001f815 <Vm::fpuGetReg(int)+0x1a>
c001f805:	83 ec 0c             	sub    esp,0xc
c001f808:	68 0e c6 02 c0       	push   0xc002c60e
c001f80d:	e8 6b ac ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001f812:	83 c4 10             	add    esp,0x10
c001f815:	a0 61 18 03 c0       	mov    al,ds:0xc0031861
c001f81a:	b9 08 00 00 00       	mov    ecx,0x8
c001f81f:	c0 e8 03             	shr    al,0x3
c001f822:	83 e0 07             	and    eax,0x7
c001f825:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f829:	99                   	cdq    
c001f82a:	f7 f9                	idiv   ecx
c001f82c:	8b 04 d5 64 18 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce79c]
c001f833:	8b 14 d5 68 18 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce798]
c001f83a:	83 c4 0c             	add    esp,0xc
c001f83d:	c3                   	ret    

c001f83e <Vm::fpuSetReg(int, unsigned long long)>:
c001f83e:	57                   	push   edi
c001f83f:	56                   	push   esi
c001f840:	52                   	push   edx
c001f841:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f845:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f849:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f84e:	76 10                	jbe    c001f860 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f850:	83 ec 0c             	sub    esp,0xc
c001f853:	68 21 c6 02 c0       	push   0xc002c621
c001f858:	e8 20 ac ff ff       	call   c001a47d <Krnl::panic(char const*)>
c001f85d:	83 c4 10             	add    esp,0x10
c001f860:	a0 61 18 03 c0       	mov    al,ds:0xc0031861
c001f865:	b9 08 00 00 00       	mov    ecx,0x8
c001f86a:	c0 e8 03             	shr    al,0x3
c001f86d:	83 e0 07             	and    eax,0x7
c001f870:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f874:	99                   	cdq    
c001f875:	f7 f9                	idiv   ecx
c001f877:	89 34 d5 64 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce79c],esi
c001f87e:	89 3c d5 68 18 03 c0 	mov    DWORD PTR [edx*8-0x3ffce798],edi
c001f885:	58                   	pop    eax
c001f886:	5e                   	pop    esi
c001f887:	5f                   	pop    edi
c001f888:	c3                   	ret    

c001f889 <Vm::fpuPush(unsigned long long)>:
c001f889:	a0 61 18 03 c0       	mov    al,ds:0xc0031861
c001f88e:	c0 e8 03             	shr    al,0x3
c001f891:	83 e0 07             	and    eax,0x7
c001f894:	83 c0 07             	add    eax,0x7
c001f897:	88 c2                	mov    dl,al
c001f899:	83 e0 07             	and    eax,0x7
c001f89c:	83 e2 07             	and    edx,0x7
c001f89f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f8a6:	8a 15 61 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031861
c001f8ac:	83 e2 c7             	and    edx,0xffffffc7
c001f8af:	09 ca                	or     edx,ecx
c001f8b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8b5:	88 15 61 18 03 c0    	mov    BYTE PTR ds:0xc0031861,dl
c001f8bb:	89 0c c5 68 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce798],ecx
c001f8c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8c6:	89 14 c5 64 18 03 c0 	mov    DWORD PTR [eax*8-0x3ffce79c],edx
c001f8cd:	a1 a4 18 03 c0       	mov    eax,ds:0xc00318a4
c001f8d2:	83 f8 08             	cmp    eax,0x8
c001f8d5:	75 08                	jne    c001f8df <Vm::fpuPush(unsigned long long)+0x56>
c001f8d7:	80 0d 60 18 03 c0 40 	or     BYTE PTR ds:0xc0031860,0x40
c001f8de:	c3                   	ret    
c001f8df:	40                   	inc    eax
c001f8e0:	a3 a4 18 03 c0       	mov    ds:0xc00318a4,eax
c001f8e5:	c3                   	ret    

c001f8e6 <Vm::fpuPop()>:
c001f8e6:	8a 0d 61 18 03 c0    	mov    cl,BYTE PTR ds:0xc0031861
c001f8ec:	53                   	push   ebx
c001f8ed:	c0 e9 03             	shr    cl,0x3
c001f8f0:	8a 1d 61 18 03 c0    	mov    bl,BYTE PTR ds:0xc0031861
c001f8f6:	83 e1 07             	and    ecx,0x7
c001f8f9:	83 e3 c7             	and    ebx,0xffffffc7
c001f8fc:	8b 04 cd 64 18 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce79c]
c001f903:	8b 14 cd 68 18 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce798]
c001f90a:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f911:	83 e1 38             	and    ecx,0x38
c001f914:	09 d9                	or     ecx,ebx
c001f916:	88 0d 61 18 03 c0    	mov    BYTE PTR ds:0xc0031861,cl
c001f91c:	8b 0d a4 18 03 c0    	mov    ecx,DWORD PTR ds:0xc00318a4
c001f922:	85 c9                	test   ecx,ecx
c001f924:	74 09                	je     c001f92f <Vm::fpuPop()+0x49>
c001f926:	49                   	dec    ecx
c001f927:	89 0d a4 18 03 c0    	mov    DWORD PTR ds:0xc00318a4,ecx
c001f92d:	eb 07                	jmp    c001f936 <Vm::fpuPop()+0x50>
c001f92f:	80 0d 60 18 03 c0 40 	or     BYTE PTR ds:0xc0031860,0x40
c001f936:	5b                   	pop    ebx
c001f937:	c3                   	ret    

c001f938 <Vm::x87Handler(regs*)>:
c001f938:	55                   	push   ebp
c001f939:	57                   	push   edi
c001f93a:	56                   	push   esi
c001f93b:	53                   	push   ebx
c001f93c:	83 ec 1c             	sub    esp,0x1c
c001f93f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f943:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f948:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f94b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f953:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f957:	50                   	push   eax
c001f958:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f95c:	50                   	push   eax
c001f95d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f961:	50                   	push   eax
c001f962:	53                   	push   ebx
c001f963:	e8 dc a1 ff ff       	call   c0019b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f968:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f96b:	83 c4 10             	add    esp,0x10
c001f96e:	89 c6                	mov    esi,eax
c001f970:	80 fa d9             	cmp    dl,0xd9
c001f973:	0f 85 52 01 00 00    	jne    c001facb <Vm::x87Handler(regs*)+0x193>
c001f979:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f97d:	8d 50 20             	lea    edx,[eax+0x20]
c001f980:	80 fa 0e             	cmp    dl,0xe
c001f983:	0f 87 86 00 00 00    	ja     c001fa0f <Vm::x87Handler(regs*)+0xd7>
c001f989:	0f b6 d2             	movzx  edx,dl
c001f98c:	ff 24 95 34 c6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd39cc]
c001f993:	e8 e7 fc ff ff       	call   c001f67f <Vm::fpuGet0()>
c001f998:	eb 05                	jmp    c001f99f <Vm::x87Handler(regs*)+0x67>
c001f99a:	e8 e5 fc ff ff       	call   c001f684 <Vm::fpuGet1()>
c001f99f:	57                   	push   edi
c001f9a0:	57                   	push   edi
c001f9a1:	52                   	push   edx
c001f9a2:	50                   	push   eax
c001f9a3:	e8 e1 fe ff ff       	call   c001f889 <Vm::fpuPush(unsigned long long)>
c001f9a8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f9ac:	83 c4 10             	add    esp,0x10
c001f9af:	b0 01                	mov    al,0x1
c001f9b1:	e9 e3 09 00 00       	jmp    c0020399 <Vm::x87Handler(regs*)+0xa61>
c001f9b6:	83 ec 0c             	sub    esp,0xc
c001f9b9:	6a 00                	push   0x0
c001f9bb:	e8 3b fe ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001f9c0:	59                   	pop    ecx
c001f9c1:	5e                   	pop    esi
c001f9c2:	52                   	push   edx
c001f9c3:	50                   	push   eax
c001f9c4:	e8 c2 fd ff ff       	call   c001f78b <Vm::fpuChs(unsigned long long)>
c001f9c9:	eb 13                	jmp    c001f9de <Vm::x87Handler(regs*)+0xa6>
c001f9cb:	83 ec 0c             	sub    esp,0xc
c001f9ce:	6a 00                	push   0x0
c001f9d0:	e8 26 fe ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001f9d5:	5f                   	pop    edi
c001f9d6:	5d                   	pop    ebp
c001f9d7:	52                   	push   edx
c001f9d8:	50                   	push   eax
c001f9d9:	e8 a4 fd ff ff       	call   c001f782 <Vm::fpuAbs(unsigned long long)>
c001f9de:	83 c4 0c             	add    esp,0xc
c001f9e1:	52                   	push   edx
c001f9e2:	50                   	push   eax
c001f9e3:	6a 00                	push   0x0
c001f9e5:	e8 54 fe ff ff       	call   c001f83e <Vm::fpuSetReg(int, unsigned long long)>
c001f9ea:	eb bc                	jmp    c001f9a8 <Vm::x87Handler(regs*)+0x70>
c001f9ec:	e8 d3 fc ff ff       	call   c001f6c4 <Vm::fpuGetLog210()>
c001f9f1:	eb ac                	jmp    c001f99f <Vm::x87Handler(regs*)+0x67>
c001f9f3:	e8 9c fc ff ff       	call   c001f694 <Vm::fpuGetLog2E()>
c001f9f8:	eb a5                	jmp    c001f99f <Vm::x87Handler(regs*)+0x67>
c001f9fa:	e8 8d fc ff ff       	call   c001f68c <Vm::fpuGetPi()>
c001f9ff:	eb 9e                	jmp    c001f99f <Vm::x87Handler(regs*)+0x67>
c001fa01:	e8 d6 fc ff ff       	call   c001f6dc <Vm::fpuGetLog102()>
c001fa06:	eb 97                	jmp    c001f99f <Vm::x87Handler(regs*)+0x67>
c001fa08:	e8 9f fc ff ff       	call   c001f6ac <Vm::fpuGetLogE2()>
c001fa0d:	eb 90                	jmp    c001f99f <Vm::x87Handler(regs*)+0x67>
c001fa0f:	8d 50 40             	lea    edx,[eax+0x40]
c001fa12:	80 fa 07             	cmp    dl,0x7
c001fa15:	77 15                	ja     c001fa2c <Vm::x87Handler(regs*)+0xf4>
c001fa17:	83 ec 0c             	sub    esp,0xc
c001fa1a:	2d c0 00 00 00       	sub    eax,0xc0
c001fa1f:	50                   	push   eax
c001fa20:	e8 d6 fd ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fa25:	59                   	pop    ecx
c001fa26:	5e                   	pop    esi
c001fa27:	e9 75 ff ff ff       	jmp    c001f9a1 <Vm::x87Handler(regs*)+0x69>
c001fa2c:	8d 50 38             	lea    edx,[eax+0x38]
c001fa2f:	80 fa 07             	cmp    dl,0x7
c001fa32:	77 3c                	ja     c001fa70 <Vm::x87Handler(regs*)+0x138>
c001fa34:	83 ec 0c             	sub    esp,0xc
c001fa37:	2d c8 00 00 00       	sub    eax,0xc8
c001fa3c:	50                   	push   eax
c001fa3d:	e8 b9 fd ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fa42:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa49:	89 c6                	mov    esi,eax
c001fa4b:	89 d7                	mov    edi,edx
c001fa4d:	e8 a9 fd ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fa52:	83 c4 0c             	add    esp,0xc
c001fa55:	52                   	push   edx
c001fa56:	50                   	push   eax
c001fa57:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa5b:	2d c8 00 00 00       	sub    eax,0xc8
c001fa60:	50                   	push   eax
c001fa61:	e8 d8 fd ff ff       	call   c001f83e <Vm::fpuSetReg(int, unsigned long long)>
c001fa66:	83 c4 0c             	add    esp,0xc
c001fa69:	57                   	push   edi
c001fa6a:	56                   	push   esi
c001fa6b:	e9 73 ff ff ff       	jmp    c001f9e3 <Vm::x87Handler(regs*)+0xab>
c001fa70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa74:	84 d2                	test   dl,dl
c001fa76:	75 0f                	jne    c001fa87 <Vm::x87Handler(regs*)+0x14f>
c001fa78:	83 ec 0c             	sub    esp,0xc
c001fa7b:	ff 36                	push   DWORD PTR [esi]
c001fa7d:	e8 c8 fa ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c001fa82:	e9 bf 00 00 00       	jmp    c001fb46 <Vm::x87Handler(regs*)+0x20e>
c001fa87:	80 fa 03             	cmp    dl,0x3
c001fa8a:	75 13                	jne    c001fa9f <Vm::x87Handler(regs*)+0x167>
c001fa8c:	e8 55 fe ff ff       	call   c001f8e6 <Vm::fpuPop()>
c001fa91:	55                   	push   ebp
c001fa92:	55                   	push   ebp
c001fa93:	52                   	push   edx
c001fa94:	50                   	push   eax
c001fa95:	e8 4c fa ff ff       	call   c001f4e6 <Vm::fpuInternalTo32(unsigned long long)>
c001fa9a:	e9 88 00 00 00       	jmp    c001fb27 <Vm::x87Handler(regs*)+0x1ef>
c001fa9f:	80 fa 05             	cmp    dl,0x5
c001faa2:	75 0e                	jne    c001fab2 <Vm::x87Handler(regs*)+0x17a>
c001faa4:	66 8b 06             	mov    ax,WORD PTR [esi]
c001faa7:	66 a3 62 18 03 c0    	mov    ds:0xc0031862,ax
c001faad:	e9 df 00 00 00       	jmp    c001fb91 <Vm::x87Handler(regs*)+0x259>
c001fab2:	31 c0                	xor    eax,eax
c001fab4:	80 fa 07             	cmp    dl,0x7
c001fab7:	0f 85 dc 08 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c001fabd:	66 a1 62 18 03 c0    	mov    ax,ds:0xc0031862
c001fac3:	66 89 06             	mov    WORD PTR [esi],ax
c001fac6:	e9 c6 00 00 00       	jmp    c001fb91 <Vm::x87Handler(regs*)+0x259>
c001facb:	80 fa d8             	cmp    dl,0xd8
c001face:	0f 84 c9 00 00 00    	je     c001fb9d <Vm::x87Handler(regs*)+0x265>
c001fad4:	80 fa dc             	cmp    dl,0xdc
c001fad7:	0f 84 0d 02 00 00    	je     c001fcea <Vm::x87Handler(regs*)+0x3b2>
c001fadd:	80 fa de             	cmp    dl,0xde
c001fae0:	0f 84 cd 02 00 00    	je     c001fdb3 <Vm::x87Handler(regs*)+0x47b>
c001fae6:	80 fa dd             	cmp    dl,0xdd
c001fae9:	0f 84 5f 04 00 00    	je     c001ff4e <Vm::x87Handler(regs*)+0x616>
c001faef:	80 fa da             	cmp    dl,0xda
c001faf2:	0f 84 24 05 00 00    	je     c002001c <Vm::x87Handler(regs*)+0x6e4>
c001faf8:	80 fa df             	cmp    dl,0xdf
c001fafb:	0f 84 68 05 00 00    	je     c0020069 <Vm::x87Handler(regs*)+0x731>
c001fb01:	31 c0                	xor    eax,eax
c001fb03:	80 fa db             	cmp    dl,0xdb
c001fb06:	0f 85 8d 08 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c001fb0c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb10:	80 fa 03             	cmp    dl,0x3
c001fb13:	0f 85 70 06 00 00    	jne    c0020189 <Vm::x87Handler(regs*)+0x851>
c001fb19:	e8 c8 fd ff ff       	call   c001f8e6 <Vm::fpuPop()>
c001fb1e:	55                   	push   ebp
c001fb1f:	55                   	push   ebp
c001fb20:	52                   	push   edx
c001fb21:	50                   	push   eax
c001fb22:	e8 71 fa ff ff       	call   c001f598 <Vm::fpuFloatToLong(unsigned long long)>
c001fb27:	83 c4 10             	add    esp,0x10
c001fb2a:	89 06                	mov    DWORD PTR [esi],eax
c001fb2c:	eb 63                	jmp    c001fb91 <Vm::x87Handler(regs*)+0x259>
c001fb2e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb32:	84 d2                	test   dl,dl
c001fb34:	0f 85 e6 05 00 00    	jne    c0020120 <Vm::x87Handler(regs*)+0x7e8>
c001fb3a:	57                   	push   edi
c001fb3b:	57                   	push   edi
c001fb3c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb3f:	ff 36                	push   DWORD PTR [esi]
c001fb41:	e8 49 fa ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c001fb46:	5e                   	pop    esi
c001fb47:	5f                   	pop    edi
c001fb48:	52                   	push   edx
c001fb49:	50                   	push   eax
c001fb4a:	e8 3a fd ff ff       	call   c001f889 <Vm::fpuPush(unsigned long long)>
c001fb4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb53:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb56:	e9 51 fe ff ff       	jmp    c001f9ac <Vm::x87Handler(regs*)+0x74>
c001fb5b:	80 fa 03             	cmp    dl,0x3
c001fb5e:	0f 85 d7 06 00 00    	jne    c002023b <Vm::x87Handler(regs*)+0x903>
c001fb64:	57                   	push   edi
c001fb65:	57                   	push   edi
c001fb66:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb69:	ff 36                	push   DWORD PTR [esi]
c001fb6b:	e8 1f fa ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c001fb70:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb77:	89 c6                	mov    esi,eax
c001fb79:	89 d7                	mov    edi,edx
c001fb7b:	e8 7b fc ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fb80:	57                   	push   edi
c001fb81:	56                   	push   esi
c001fb82:	52                   	push   edx
c001fb83:	50                   	push   eax
c001fb84:	e8 95 fb ff ff       	call   c001f71e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fb89:	83 c4 20             	add    esp,0x20
c001fb8c:	e8 55 fd ff ff       	call   c001f8e6 <Vm::fpuPop()>
c001fb91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb95:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fb98:	e9 12 fe ff ff       	jmp    c001f9af <Vm::x87Handler(regs*)+0x77>
c001fb9d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fba1:	8d 50 40             	lea    edx,[eax+0x40]
c001fba4:	80 fa 07             	cmp    dl,0x7
c001fba7:	77 29                	ja     c001fbd2 <Vm::x87Handler(regs*)+0x29a>
c001fba9:	83 ec 0c             	sub    esp,0xc
c001fbac:	2d c0 00 00 00       	sub    eax,0xc0
c001fbb1:	50                   	push   eax
c001fbb2:	e8 44 fc ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fbb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbbe:	89 c6                	mov    esi,eax
c001fbc0:	89 d7                	mov    edi,edx
c001fbc2:	e8 34 fc ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fbc7:	57                   	push   edi
c001fbc8:	56                   	push   esi
c001fbc9:	52                   	push   edx
c001fbca:	50                   	push   eax
c001fbcb:	e8 a1 fb ff ff       	call   c001f771 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fbd0:	eb 2f                	jmp    c001fc01 <Vm::x87Handler(regs*)+0x2c9>
c001fbd2:	8d 50 38             	lea    edx,[eax+0x38]
c001fbd5:	80 fa 07             	cmp    dl,0x7
c001fbd8:	77 2f                	ja     c001fc09 <Vm::x87Handler(regs*)+0x2d1>
c001fbda:	83 ec 0c             	sub    esp,0xc
c001fbdd:	2d c8 00 00 00       	sub    eax,0xc8
c001fbe2:	50                   	push   eax
c001fbe3:	e8 13 fc ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fbe8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbef:	89 c6                	mov    esi,eax
c001fbf1:	89 d7                	mov    edi,edx
c001fbf3:	e8 03 fc ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fbf8:	57                   	push   edi
c001fbf9:	56                   	push   esi
c001fbfa:	52                   	push   edx
c001fbfb:	50                   	push   eax
c001fbfc:	e8 a9 fb ff ff       	call   c001f7aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc01:	83 c4 1c             	add    esp,0x1c
c001fc04:	e9 d8 fd ff ff       	jmp    c001f9e1 <Vm::x87Handler(regs*)+0xa9>
c001fc09:	8d 50 30             	lea    edx,[eax+0x30]
c001fc0c:	80 fa 07             	cmp    dl,0x7
c001fc0f:	77 0d                	ja     c001fc1e <Vm::x87Handler(regs*)+0x2e6>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	2d d0 00 00 00       	sub    eax,0xd0
c001fc19:	e9 99 03 00 00       	jmp    c001ffb7 <Vm::x87Handler(regs*)+0x67f>
c001fc1e:	8d 50 28             	lea    edx,[eax+0x28]
c001fc21:	80 fa 07             	cmp    dl,0x7
c001fc24:	77 0d                	ja     c001fc33 <Vm::x87Handler(regs*)+0x2fb>
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	2d d8 00 00 00       	sub    eax,0xd8
c001fc2e:	e9 c0 03 00 00       	jmp    c001fff3 <Vm::x87Handler(regs*)+0x6bb>
c001fc33:	8d 50 20             	lea    edx,[eax+0x20]
c001fc36:	80 fa 07             	cmp    dl,0x7
c001fc39:	77 1b                	ja     c001fc56 <Vm::x87Handler(regs*)+0x31e>
c001fc3b:	83 ec 0c             	sub    esp,0xc
c001fc3e:	2d e0 00 00 00       	sub    eax,0xe0
c001fc43:	50                   	push   eax
c001fc44:	e8 b2 fb ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fc49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc50:	89 c6                	mov    esi,eax
c001fc52:	89 d7                	mov    edi,edx
c001fc54:	eb 22                	jmp    c001fc78 <Vm::x87Handler(regs*)+0x340>
c001fc56:	8d 50 18             	lea    edx,[eax+0x18]
c001fc59:	80 fa 07             	cmp    dl,0x7
c001fc5c:	77 2d                	ja     c001fc8b <Vm::x87Handler(regs*)+0x353>
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	6a 00                	push   0x0
c001fc63:	e8 93 fb ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fc68:	89 c6                	mov    esi,eax
c001fc6a:	89 d7                	mov    edi,edx
c001fc6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc70:	2d e8 00 00 00       	sub    eax,0xe8
c001fc75:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc78:	e8 7e fb ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fc7d:	57                   	push   edi
c001fc7e:	56                   	push   esi
c001fc7f:	52                   	push   edx
c001fc80:	50                   	push   eax
c001fc81:	e8 15 fb ff ff       	call   c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc86:	e9 76 ff ff ff       	jmp    c001fc01 <Vm::x87Handler(regs*)+0x2c9>
c001fc8b:	8d 50 10             	lea    edx,[eax+0x10]
c001fc8e:	80 fa 07             	cmp    dl,0x7
c001fc91:	77 1b                	ja     c001fcae <Vm::x87Handler(regs*)+0x376>
c001fc93:	83 ec 0c             	sub    esp,0xc
c001fc96:	2d f0 00 00 00       	sub    eax,0xf0
c001fc9b:	50                   	push   eax
c001fc9c:	e8 5a fb ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fca1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fca8:	89 c6                	mov    esi,eax
c001fcaa:	89 d7                	mov    edi,edx
c001fcac:	eb 22                	jmp    c001fcd0 <Vm::x87Handler(regs*)+0x398>
c001fcae:	3c f7                	cmp    al,0xf7
c001fcb0:	0f 86 d1 03 00 00    	jbe    c0020087 <Vm::x87Handler(regs*)+0x74f>
c001fcb6:	83 ec 0c             	sub    esp,0xc
c001fcb9:	6a 00                	push   0x0
c001fcbb:	e8 3b fb ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fcc0:	89 c6                	mov    esi,eax
c001fcc2:	89 d7                	mov    edi,edx
c001fcc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc8:	2d f8 00 00 00       	sub    eax,0xf8
c001fccd:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcd0:	e8 26 fb ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fcd5:	57                   	push   edi
c001fcd6:	56                   	push   esi
c001fcd7:	52                   	push   edx
c001fcd8:	50                   	push   eax
c001fcd9:	e8 eb fa ff ff       	call   c001f7c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcde:	83 c4 1c             	add    esp,0x1c
c001fce1:	52                   	push   edx
c001fce2:	50                   	push   eax
c001fce3:	6a 00                	push   0x0
c001fce5:	e9 51 02 00 00       	jmp    c001ff3b <Vm::x87Handler(regs*)+0x603>
c001fcea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcee:	8d 50 40             	lea    edx,[eax+0x40]
c001fcf1:	80 fa 07             	cmp    dl,0x7
c001fcf4:	77 37                	ja     c001fd2d <Vm::x87Handler(regs*)+0x3f5>
c001fcf6:	83 ec 0c             	sub    esp,0xc
c001fcf9:	2d c0 00 00 00       	sub    eax,0xc0
c001fcfe:	50                   	push   eax
c001fcff:	e8 f7 fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fd04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd0b:	89 c6                	mov    esi,eax
c001fd0d:	89 d7                	mov    edi,edx
c001fd0f:	e8 e7 fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fd14:	57                   	push   edi
c001fd15:	56                   	push   esi
c001fd16:	52                   	push   edx
c001fd17:	50                   	push   eax
c001fd18:	e8 54 fa ff ff       	call   c001f771 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fd1d:	83 c4 1c             	add    esp,0x1c
c001fd20:	52                   	push   edx
c001fd21:	50                   	push   eax
c001fd22:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd26:	2d c0 00 00 00       	sub    eax,0xc0
c001fd2b:	eb 3d                	jmp    c001fd6a <Vm::x87Handler(regs*)+0x432>
c001fd2d:	8d 50 38             	lea    edx,[eax+0x38]
c001fd30:	80 fa 07             	cmp    dl,0x7
c001fd33:	77 3b                	ja     c001fd70 <Vm::x87Handler(regs*)+0x438>
c001fd35:	83 ec 0c             	sub    esp,0xc
c001fd38:	2d c8 00 00 00       	sub    eax,0xc8
c001fd3d:	50                   	push   eax
c001fd3e:	e8 b8 fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fd43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd4a:	89 c6                	mov    esi,eax
c001fd4c:	89 d7                	mov    edi,edx
c001fd4e:	e8 a8 fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fd53:	57                   	push   edi
c001fd54:	56                   	push   esi
c001fd55:	52                   	push   edx
c001fd56:	50                   	push   eax
c001fd57:	e8 4e fa ff ff       	call   c001f7aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd5c:	83 c4 1c             	add    esp,0x1c
c001fd5f:	52                   	push   edx
c001fd60:	50                   	push   eax
c001fd61:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd65:	2d c8 00 00 00       	sub    eax,0xc8
c001fd6a:	50                   	push   eax
c001fd6b:	e9 75 fc ff ff       	jmp    c001f9e5 <Vm::x87Handler(regs*)+0xad>
c001fd70:	83 c0 18             	add    eax,0x18
c001fd73:	3c 07                	cmp    al,0x7
c001fd75:	0f 87 3b 04 00 00    	ja     c00201b6 <Vm::x87Handler(regs*)+0x87e>
c001fd7b:	83 ec 0c             	sub    esp,0xc
c001fd7e:	6a 00                	push   0x0
c001fd80:	e8 76 fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fd85:	89 c6                	mov    esi,eax
c001fd87:	89 d7                	mov    edi,edx
c001fd89:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd8d:	2d e8 00 00 00       	sub    eax,0xe8
c001fd92:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd95:	e8 61 fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fd9a:	57                   	push   edi
c001fd9b:	56                   	push   esi
c001fd9c:	52                   	push   edx
c001fd9d:	50                   	push   eax
c001fd9e:	e8 f8 f9 ff ff       	call   c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fda3:	83 c4 1c             	add    esp,0x1c
c001fda6:	52                   	push   edx
c001fda7:	50                   	push   eax
c001fda8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdac:	2d e8 00 00 00       	sub    eax,0xe8
c001fdb1:	eb b7                	jmp    c001fd6a <Vm::x87Handler(regs*)+0x432>
c001fdb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdb7:	8d 50 40             	lea    edx,[eax+0x40]
c001fdba:	80 fa 07             	cmp    dl,0x7
c001fdbd:	77 3a                	ja     c001fdf9 <Vm::x87Handler(regs*)+0x4c1>
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	2d c0 00 00 00       	sub    eax,0xc0
c001fdc7:	50                   	push   eax
c001fdc8:	e8 2e fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fdcd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdd4:	89 c6                	mov    esi,eax
c001fdd6:	89 d7                	mov    edi,edx
c001fdd8:	e8 1e fa ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fddd:	57                   	push   edi
c001fdde:	56                   	push   esi
c001fddf:	52                   	push   edx
c001fde0:	50                   	push   eax
c001fde1:	e8 8b f9 ff ff       	call   c001f771 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fde6:	83 c4 1c             	add    esp,0x1c
c001fde9:	52                   	push   edx
c001fdea:	50                   	push   eax
c001fdeb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdef:	2d c0 00 00 00       	sub    eax,0xc0
c001fdf4:	e9 9e 01 00 00       	jmp    c001ff97 <Vm::x87Handler(regs*)+0x65f>
c001fdf9:	8d 50 20             	lea    edx,[eax+0x20]
c001fdfc:	80 fa 07             	cmp    dl,0x7
c001fdff:	77 3a                	ja     c001fe3b <Vm::x87Handler(regs*)+0x503>
c001fe01:	83 ec 0c             	sub    esp,0xc
c001fe04:	2d e0 00 00 00       	sub    eax,0xe0
c001fe09:	50                   	push   eax
c001fe0a:	e8 ec f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fe0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe16:	89 c6                	mov    esi,eax
c001fe18:	89 d7                	mov    edi,edx
c001fe1a:	e8 dc f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fe1f:	57                   	push   edi
c001fe20:	56                   	push   esi
c001fe21:	52                   	push   edx
c001fe22:	50                   	push   eax
c001fe23:	e8 73 f9 ff ff       	call   c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe28:	83 c4 1c             	add    esp,0x1c
c001fe2b:	52                   	push   edx
c001fe2c:	50                   	push   eax
c001fe2d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe31:	2d e0 00 00 00       	sub    eax,0xe0
c001fe36:	e9 5c 01 00 00       	jmp    c001ff97 <Vm::x87Handler(regs*)+0x65f>
c001fe3b:	8d 50 18             	lea    edx,[eax+0x18]
c001fe3e:	80 fa 07             	cmp    dl,0x7
c001fe41:	77 3b                	ja     c001fe7e <Vm::x87Handler(regs*)+0x546>
c001fe43:	83 ec 0c             	sub    esp,0xc
c001fe46:	6a 00                	push   0x0
c001fe48:	e8 ae f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fe4d:	89 c6                	mov    esi,eax
c001fe4f:	89 d7                	mov    edi,edx
c001fe51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe55:	2d e8 00 00 00       	sub    eax,0xe8
c001fe5a:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe5d:	e8 99 f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fe62:	57                   	push   edi
c001fe63:	56                   	push   esi
c001fe64:	52                   	push   edx
c001fe65:	50                   	push   eax
c001fe66:	e8 30 f9 ff ff       	call   c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe6b:	83 c4 1c             	add    esp,0x1c
c001fe6e:	52                   	push   edx
c001fe6f:	50                   	push   eax
c001fe70:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe74:	2d e8 00 00 00       	sub    eax,0xe8
c001fe79:	e9 19 01 00 00       	jmp    c001ff97 <Vm::x87Handler(regs*)+0x65f>
c001fe7e:	8d 50 38             	lea    edx,[eax+0x38]
c001fe81:	80 fa 07             	cmp    dl,0x7
c001fe84:	77 37                	ja     c001febd <Vm::x87Handler(regs*)+0x585>
c001fe86:	83 ec 0c             	sub    esp,0xc
c001fe89:	2d c8 00 00 00       	sub    eax,0xc8
c001fe8e:	50                   	push   eax
c001fe8f:	e8 67 f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fe94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe9b:	89 c6                	mov    esi,eax
c001fe9d:	89 d7                	mov    edi,edx
c001fe9f:	e8 57 f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fea4:	57                   	push   edi
c001fea5:	56                   	push   esi
c001fea6:	52                   	push   edx
c001fea7:	50                   	push   eax
c001fea8:	e8 fd f8 ff ff       	call   c001f7aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fead:	83 c4 1c             	add    esp,0x1c
c001feb0:	52                   	push   edx
c001feb1:	50                   	push   eax
c001feb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb6:	2d c8 00 00 00       	sub    eax,0xc8
c001febb:	eb 7d                	jmp    c001ff3a <Vm::x87Handler(regs*)+0x602>
c001febd:	3c f7                	cmp    al,0xf7
c001febf:	76 38                	jbe    c001fef9 <Vm::x87Handler(regs*)+0x5c1>
c001fec1:	83 ec 0c             	sub    esp,0xc
c001fec4:	6a 00                	push   0x0
c001fec6:	e8 30 f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fecb:	89 c6                	mov    esi,eax
c001fecd:	89 d7                	mov    edi,edx
c001fecf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fed3:	2d f8 00 00 00       	sub    eax,0xf8
c001fed8:	89 04 24             	mov    DWORD PTR [esp],eax
c001fedb:	e8 1b f9 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fee0:	57                   	push   edi
c001fee1:	56                   	push   esi
c001fee2:	52                   	push   edx
c001fee3:	50                   	push   eax
c001fee4:	e8 e0 f8 ff ff       	call   c001f7c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fee9:	83 c4 1c             	add    esp,0x1c
c001feec:	52                   	push   edx
c001feed:	50                   	push   eax
c001feee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fef2:	2d f8 00 00 00       	sub    eax,0xf8
c001fef7:	eb 41                	jmp    c001ff3a <Vm::x87Handler(regs*)+0x602>
c001fef9:	8d 50 10             	lea    edx,[eax+0x10]
c001fefc:	80 fa 07             	cmp    dl,0x7
c001feff:	0f 87 5a 01 00 00    	ja     c002005f <Vm::x87Handler(regs*)+0x727>
c001ff05:	83 ec 0c             	sub    esp,0xc
c001ff08:	2d f0 00 00 00       	sub    eax,0xf0
c001ff0d:	50                   	push   eax
c001ff0e:	e8 e8 f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001ff13:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff1a:	89 c6                	mov    esi,eax
c001ff1c:	89 d7                	mov    edi,edx
c001ff1e:	e8 d8 f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001ff23:	57                   	push   edi
c001ff24:	56                   	push   esi
c001ff25:	52                   	push   edx
c001ff26:	50                   	push   eax
c001ff27:	e8 9d f8 ff ff       	call   c001f7c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff2c:	83 c4 1c             	add    esp,0x1c
c001ff2f:	52                   	push   edx
c001ff30:	50                   	push   eax
c001ff31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff35:	2d f0 00 00 00       	sub    eax,0xf0
c001ff3a:	50                   	push   eax
c001ff3b:	e8 fe f8 ff ff       	call   c001f83e <Vm::fpuSetReg(int, unsigned long long)>
c001ff40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ff44:	e8 9d f9 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c001ff49:	e9 5e fa ff ff       	jmp    c001f9ac <Vm::x87Handler(regs*)+0x74>
c001ff4e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff52:	8d 50 30             	lea    edx,[eax+0x30]
c001ff55:	80 fa 07             	cmp    dl,0x7
c001ff58:	77 1d                	ja     c001ff77 <Vm::x87Handler(regs*)+0x63f>
c001ff5a:	83 ec 0c             	sub    esp,0xc
c001ff5d:	6a 00                	push   0x0
c001ff5f:	e8 97 f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001ff64:	83 c4 0c             	add    esp,0xc
c001ff67:	52                   	push   edx
c001ff68:	50                   	push   eax
c001ff69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6d:	2d d0 00 00 00       	sub    eax,0xd0
c001ff72:	e9 f3 fd ff ff       	jmp    c001fd6a <Vm::x87Handler(regs*)+0x432>
c001ff77:	8d 50 28             	lea    edx,[eax+0x28]
c001ff7a:	80 fa 07             	cmp    dl,0x7
c001ff7d:	77 28                	ja     c001ffa7 <Vm::x87Handler(regs*)+0x66f>
c001ff7f:	83 ec 0c             	sub    esp,0xc
c001ff82:	6a 00                	push   0x0
c001ff84:	e8 72 f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001ff89:	83 c4 0c             	add    esp,0xc
c001ff8c:	52                   	push   edx
c001ff8d:	50                   	push   eax
c001ff8e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff92:	2d d8 00 00 00       	sub    eax,0xd8
c001ff97:	50                   	push   eax
c001ff98:	e8 a1 f8 ff ff       	call   c001f83e <Vm::fpuSetReg(int, unsigned long long)>
c001ff9d:	e8 44 f9 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c001ffa2:	e9 01 fa ff ff       	jmp    c001f9a8 <Vm::x87Handler(regs*)+0x70>
c001ffa7:	8d 50 20             	lea    edx,[eax+0x20]
c001ffaa:	80 fa 07             	cmp    dl,0x7
c001ffad:	77 30                	ja     c001ffdf <Vm::x87Handler(regs*)+0x6a7>
c001ffaf:	83 ec 0c             	sub    esp,0xc
c001ffb2:	2d e0 00 00 00       	sub    eax,0xe0
c001ffb7:	50                   	push   eax
c001ffb8:	e8 3e f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001ffbd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc4:	89 c6                	mov    esi,eax
c001ffc6:	89 d7                	mov    edi,edx
c001ffc8:	e8 2e f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001ffcd:	57                   	push   edi
c001ffce:	56                   	push   esi
c001ffcf:	52                   	push   edx
c001ffd0:	50                   	push   eax
c001ffd1:	e8 48 f7 ff ff       	call   c001f71e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ffd6:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ffda:	e9 54 02 00 00       	jmp    c0020233 <Vm::x87Handler(regs*)+0x8fb>
c001ffdf:	8d 50 18             	lea    edx,[eax+0x18]
c001ffe2:	80 fa 07             	cmp    dl,0x7
c001ffe5:	0f 87 43 fb ff ff    	ja     c001fb2e <Vm::x87Handler(regs*)+0x1f6>
c001ffeb:	83 ec 0c             	sub    esp,0xc
c001ffee:	2d e8 00 00 00       	sub    eax,0xe8
c001fff3:	50                   	push   eax
c001fff4:	e8 02 f8 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c001fff9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020000:	89 c6                	mov    esi,eax
c0020002:	89 d7                	mov    edi,edx
c0020004:	e8 f2 f7 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020009:	57                   	push   edi
c002000a:	56                   	push   esi
c002000b:	52                   	push   edx
c002000c:	50                   	push   eax
c002000d:	e8 0c f7 ff ff       	call   c001f71e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020012:	83 c4 20             	add    esp,0x20
c0020015:	e8 cc f8 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c002001a:	eb 62                	jmp    c002007e <Vm::x87Handler(regs*)+0x746>
c002001c:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020020:	0f 85 0f 01 00 00    	jne    c0020135 <Vm::x87Handler(regs*)+0x7fd>
c0020026:	83 ec 0c             	sub    esp,0xc
c0020029:	6a 01                	push   0x1
c002002b:	e8 cb f7 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020030:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020037:	89 c6                	mov    esi,eax
c0020039:	89 d7                	mov    edi,edx
c002003b:	e8 bb f7 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020040:	57                   	push   edi
c0020041:	56                   	push   esi
c0020042:	52                   	push   edx
c0020043:	50                   	push   eax
c0020044:	e8 d5 f6 ff ff       	call   c001f71e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020049:	83 c4 20             	add    esp,0x20
c002004c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020050:	e8 91 f8 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c0020055:	e8 8c f8 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c002005a:	e9 50 f9 ff ff       	jmp    c001f9af <Vm::x87Handler(regs*)+0x77>
c002005f:	3c d9                	cmp    al,0xd9
c0020061:	0f 85 b5 02 00 00    	jne    c002031c <Vm::x87Handler(regs*)+0x9e4>
c0020067:	eb bd                	jmp    c0020026 <Vm::x87Handler(regs*)+0x6ee>
c0020069:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002006d:	0f 85 ea 02 00 00    	jne    c002035d <Vm::x87Handler(regs*)+0xa25>
c0020073:	0f b7 05 60 18 03 c0 	movzx  eax,WORD PTR ds:0xc0031860
c002007a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002007e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020082:	e9 28 f9 ff ff       	jmp    c001f9af <Vm::x87Handler(regs*)+0x77>
c0020087:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002008b:	84 d2                	test   dl,dl
c002008d:	75 0f                	jne    c002009e <Vm::x87Handler(regs*)+0x766>
c002008f:	83 ec 0c             	sub    esp,0xc
c0020092:	ff 36                	push   DWORD PTR [esi]
c0020094:	e8 b1 f4 ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c0020099:	e9 2c 01 00 00       	jmp    c00201ca <Vm::x87Handler(regs*)+0x892>
c002009e:	80 fa 01             	cmp    dl,0x1
c00200a1:	75 0f                	jne    c00200b2 <Vm::x87Handler(regs*)+0x77a>
c00200a3:	83 ec 0c             	sub    esp,0xc
c00200a6:	ff 36                	push   DWORD PTR [esi]
c00200a8:	e8 9d f4 ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c00200ad:	e9 81 02 00 00       	jmp    c0020333 <Vm::x87Handler(regs*)+0x9fb>
c00200b2:	80 fa 04             	cmp    dl,0x4
c00200b5:	75 0f                	jne    c00200c6 <Vm::x87Handler(regs*)+0x78e>
c00200b7:	83 ec 0c             	sub    esp,0xc
c00200ba:	ff 36                	push   DWORD PTR [esi]
c00200bc:	e8 89 f4 ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c00200c1:	e9 86 01 00 00       	jmp    c002024c <Vm::x87Handler(regs*)+0x914>
c00200c6:	80 fa 05             	cmp    dl,0x5
c00200c9:	75 1b                	jne    c00200e6 <Vm::x87Handler(regs*)+0x7ae>
c00200cb:	83 ec 0c             	sub    esp,0xc
c00200ce:	6a 00                	push   0x0
c00200d0:	e8 26 f7 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c00200d5:	89 c7                	mov    edi,eax
c00200d7:	89 d5                	mov    ebp,edx
c00200d9:	58                   	pop    eax
c00200da:	ff 36                	push   DWORD PTR [esi]
c00200dc:	e8 69 f4 ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c00200e1:	e9 a3 01 00 00       	jmp    c0020289 <Vm::x87Handler(regs*)+0x951>
c00200e6:	80 fa 06             	cmp    dl,0x6
c00200e9:	75 0f                	jne    c00200fa <Vm::x87Handler(regs*)+0x7c2>
c00200eb:	83 ec 0c             	sub    esp,0xc
c00200ee:	ff 36                	push   DWORD PTR [esi]
c00200f0:	e8 55 f4 ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c00200f5:	e9 ae 01 00 00       	jmp    c00202a8 <Vm::x87Handler(regs*)+0x970>
c00200fa:	31 c0                	xor    eax,eax
c00200fc:	80 fa 07             	cmp    dl,0x7
c00200ff:	0f 85 94 02 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c0020105:	83 ec 0c             	sub    esp,0xc
c0020108:	6a 00                	push   0x0
c002010a:	e8 ec f6 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c002010f:	89 c7                	mov    edi,eax
c0020111:	89 d5                	mov    ebp,edx
c0020113:	58                   	pop    eax
c0020114:	ff 36                	push   DWORD PTR [esi]
c0020116:	e8 2f f4 ff ff       	call   c001f54a <Vm::fpu32ToInternal(unsigned int)>
c002011b:	e9 cb 01 00 00       	jmp    c00202eb <Vm::x87Handler(regs*)+0x9b3>
c0020120:	80 fa 03             	cmp    dl,0x3
c0020123:	0f 85 d3 01 00 00    	jne    c00202fc <Vm::x87Handler(regs*)+0x9c4>
c0020129:	e8 b8 f7 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c002012e:	51                   	push   ecx
c002012f:	51                   	push   ecx
c0020130:	e9 de 01 00 00       	jmp    c0020313 <Vm::x87Handler(regs*)+0x9db>
c0020135:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020139:	80 fa 01             	cmp    dl,0x1
c002013c:	75 09                	jne    c0020147 <Vm::x87Handler(regs*)+0x80f>
c002013e:	57                   	push   edi
c002013f:	57                   	push   edi
c0020140:	8b 06                	mov    eax,DWORD PTR [esi]
c0020142:	e9 e3 01 00 00       	jmp    c002032a <Vm::x87Handler(regs*)+0x9f2>
c0020147:	80 fa 04             	cmp    dl,0x4
c002014a:	75 12                	jne    c002015e <Vm::x87Handler(regs*)+0x826>
c002014c:	31 d2                	xor    edx,edx
c002014e:	51                   	push   ecx
c002014f:	51                   	push   ecx
c0020150:	8b 06                	mov    eax,DWORD PTR [esi]
c0020152:	52                   	push   edx
c0020153:	50                   	push   eax
c0020154:	e8 d0 f4 ff ff       	call   c001f629 <Vm::fpuLongToFloat(long long)>
c0020159:	e9 ee 00 00 00       	jmp    c002024c <Vm::x87Handler(regs*)+0x914>
c002015e:	31 c0                	xor    eax,eax
c0020160:	80 fa 07             	cmp    dl,0x7
c0020163:	0f 85 30 02 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c0020169:	83 ec 0c             	sub    esp,0xc
c002016c:	6a 00                	push   0x0
c002016e:	e8 88 f6 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020173:	89 c7                	mov    edi,eax
c0020175:	89 d5                	mov    ebp,edx
c0020177:	58                   	pop    eax
c0020178:	8b 06                	mov    eax,DWORD PTR [esi]
c002017a:	5a                   	pop    edx
c002017b:	31 d2                	xor    edx,edx
c002017d:	52                   	push   edx
c002017e:	50                   	push   eax
c002017f:	e8 a5 f4 ff ff       	call   c001f629 <Vm::fpuLongToFloat(long long)>
c0020184:	e9 62 01 00 00       	jmp    c00202eb <Vm::x87Handler(regs*)+0x9b3>
c0020189:	84 d2                	test   dl,dl
c002018b:	75 0d                	jne    c002019a <Vm::x87Handler(regs*)+0x862>
c002018d:	31 d2                	xor    edx,edx
c002018f:	55                   	push   ebp
c0020190:	55                   	push   ebp
c0020191:	8b 06                	mov    eax,DWORD PTR [esi]
c0020193:	52                   	push   edx
c0020194:	50                   	push   eax
c0020195:	e9 d3 01 00 00       	jmp    c002036d <Vm::x87Handler(regs*)+0xa35>
c002019a:	31 c0                	xor    eax,eax
c002019c:	80 fa 02             	cmp    dl,0x2
c002019f:	0f 85 f4 01 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c00201a5:	83 ec 0c             	sub    esp,0xc
c00201a8:	6a 00                	push   0x0
c00201aa:	e8 4c f6 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c00201af:	59                   	pop    ecx
c00201b0:	5f                   	pop    edi
c00201b1:	e9 6a f9 ff ff       	jmp    c001fb20 <Vm::x87Handler(regs*)+0x1e8>
c00201b6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00201ba:	84 d2                	test   dl,dl
c00201bc:	75 2a                	jne    c00201e8 <Vm::x87Handler(regs*)+0x8b0>
c00201be:	50                   	push   eax
c00201bf:	50                   	push   eax
c00201c0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201c3:	ff 36                	push   DWORD PTR [esi]
c00201c5:	e8 c5 f3 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c00201ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201d1:	89 c6                	mov    esi,eax
c00201d3:	89 d7                	mov    edi,edx
c00201d5:	e8 21 f6 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c00201da:	57                   	push   edi
c00201db:	56                   	push   esi
c00201dc:	52                   	push   edx
c00201dd:	50                   	push   eax
c00201de:	e8 8e f5 ff ff       	call   c001f771 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00201e3:	e9 64 01 00 00       	jmp    c002034c <Vm::x87Handler(regs*)+0xa14>
c00201e8:	80 fa 01             	cmp    dl,0x1
c00201eb:	75 11                	jne    c00201fe <Vm::x87Handler(regs*)+0x8c6>
c00201ed:	50                   	push   eax
c00201ee:	50                   	push   eax
c00201ef:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00201f2:	ff 36                	push   DWORD PTR [esi]
c00201f4:	e8 96 f3 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c00201f9:	e9 35 01 00 00       	jmp    c0020333 <Vm::x87Handler(regs*)+0x9fb>
c00201fe:	80 fa 02             	cmp    dl,0x2
c0020201:	0f 85 54 f9 ff ff    	jne    c001fb5b <Vm::x87Handler(regs*)+0x223>
c0020207:	55                   	push   ebp
c0020208:	55                   	push   ebp
c0020209:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002020c:	ff 36                	push   DWORD PTR [esi]
c002020e:	e8 7c f3 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c0020213:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002021a:	89 c6                	mov    esi,eax
c002021c:	89 d7                	mov    edi,edx
c002021e:	e8 d8 f5 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020223:	57                   	push   edi
c0020224:	56                   	push   esi
c0020225:	52                   	push   edx
c0020226:	50                   	push   eax
c0020227:	e8 f2 f4 ff ff       	call   c001f71e <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002022c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020230:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020233:	83 c4 20             	add    esp,0x20
c0020236:	e9 74 f7 ff ff       	jmp    c001f9af <Vm::x87Handler(regs*)+0x77>
c002023b:	80 fa 04             	cmp    dl,0x4
c002023e:	75 2a                	jne    c002026a <Vm::x87Handler(regs*)+0x932>
c0020240:	51                   	push   ecx
c0020241:	51                   	push   ecx
c0020242:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020245:	ff 36                	push   DWORD PTR [esi]
c0020247:	e8 43 f3 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c002024c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020253:	89 c6                	mov    esi,eax
c0020255:	89 d7                	mov    edi,edx
c0020257:	e8 9f f5 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c002025c:	57                   	push   edi
c002025d:	56                   	push   esi
c002025e:	52                   	push   edx
c002025f:	50                   	push   eax
c0020260:	e8 36 f5 ff ff       	call   c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020265:	e9 e2 00 00 00       	jmp    c002034c <Vm::x87Handler(regs*)+0xa14>
c002026a:	80 fa 05             	cmp    dl,0x5
c002026d:	75 28                	jne    c0020297 <Vm::x87Handler(regs*)+0x95f>
c002026f:	83 ec 0c             	sub    esp,0xc
c0020272:	6a 00                	push   0x0
c0020274:	e8 82 f5 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020279:	89 c7                	mov    edi,eax
c002027b:	89 d5                	mov    ebp,edx
c002027d:	58                   	pop    eax
c002027e:	5a                   	pop    edx
c002027f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020282:	ff 36                	push   DWORD PTR [esi]
c0020284:	e8 06 f3 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c0020289:	83 c4 10             	add    esp,0x10
c002028c:	55                   	push   ebp
c002028d:	57                   	push   edi
c002028e:	52                   	push   edx
c002028f:	50                   	push   eax
c0020290:	e8 06 f5 ff ff       	call   c001f79b <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020295:	eb 60                	jmp    c00202f7 <Vm::x87Handler(regs*)+0x9bf>
c0020297:	80 fa 06             	cmp    dl,0x6
c002029a:	75 2a                	jne    c00202c6 <Vm::x87Handler(regs*)+0x98e>
c002029c:	51                   	push   ecx
c002029d:	51                   	push   ecx
c002029e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202a1:	ff 36                	push   DWORD PTR [esi]
c00202a3:	e8 e7 f2 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c00202a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00202af:	89 c6                	mov    esi,eax
c00202b1:	89 d7                	mov    edi,edx
c00202b3:	e8 43 f5 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c00202b8:	57                   	push   edi
c00202b9:	56                   	push   esi
c00202ba:	52                   	push   edx
c00202bb:	50                   	push   eax
c00202bc:	e8 08 f5 ff ff       	call   c001f7c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202c1:	e9 86 00 00 00       	jmp    c002034c <Vm::x87Handler(regs*)+0xa14>
c00202c6:	31 c0                	xor    eax,eax
c00202c8:	80 fa 07             	cmp    dl,0x7
c00202cb:	0f 85 c8 00 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c00202d1:	83 ec 0c             	sub    esp,0xc
c00202d4:	6a 00                	push   0x0
c00202d6:	e8 20 f5 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c00202db:	89 c7                	mov    edi,eax
c00202dd:	89 d5                	mov    ebp,edx
c00202df:	58                   	pop    eax
c00202e0:	5a                   	pop    edx
c00202e1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e4:	ff 36                	push   DWORD PTR [esi]
c00202e6:	e8 a4 f2 ff ff       	call   c001f58f <Vm::fpu64ToInternal(unsigned long long)>
c00202eb:	83 c4 10             	add    esp,0x10
c00202ee:	55                   	push   ebp
c00202ef:	57                   	push   edi
c00202f0:	52                   	push   edx
c00202f1:	50                   	push   eax
c00202f2:	e8 d2 f4 ff ff       	call   c001f7c9 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00202f7:	83 c4 0c             	add    esp,0xc
c00202fa:	eb 53                	jmp    c002034f <Vm::x87Handler(regs*)+0xa17>
c00202fc:	31 c0                	xor    eax,eax
c00202fe:	80 fa 02             	cmp    dl,0x2
c0020301:	0f 85 92 00 00 00    	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c0020307:	83 ec 0c             	sub    esp,0xc
c002030a:	6a 00                	push   0x0
c002030c:	e8 ea f4 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020311:	59                   	pop    ecx
c0020312:	5f                   	pop    edi
c0020313:	52                   	push   edx
c0020314:	50                   	push   eax
c0020315:	e8 27 f2 ff ff       	call   c001f541 <Vm::fpuInternalTo64(unsigned long long)>
c002031a:	eb 70                	jmp    c002038c <Vm::x87Handler(regs*)+0xa54>
c002031c:	31 c0                	xor    eax,eax
c002031e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020323:	75 74                	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c0020325:	50                   	push   eax
c0020326:	50                   	push   eax
c0020327:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002032a:	31 d2                	xor    edx,edx
c002032c:	52                   	push   edx
c002032d:	50                   	push   eax
c002032e:	e8 f6 f2 ff ff       	call   c001f629 <Vm::fpuLongToFloat(long long)>
c0020333:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002033a:	89 c6                	mov    esi,eax
c002033c:	89 d7                	mov    edi,edx
c002033e:	e8 b8 f4 ff ff       	call   c001f7fb <Vm::fpuGetReg(int)>
c0020343:	57                   	push   edi
c0020344:	56                   	push   esi
c0020345:	52                   	push   edx
c0020346:	50                   	push   eax
c0020347:	e8 5e f4 ff ff       	call   c001f7aa <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002034c:	83 c4 1c             	add    esp,0x1c
c002034f:	52                   	push   edx
c0020350:	50                   	push   eax
c0020351:	6a 00                	push   0x0
c0020353:	e8 e6 f4 ff ff       	call   c001f83e <Vm::fpuSetReg(int, unsigned long long)>
c0020358:	e9 f2 f7 ff ff       	jmp    c001fb4f <Vm::x87Handler(regs*)+0x217>
c002035d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020361:	80 fa 05             	cmp    dl,0x5
c0020364:	75 11                	jne    c0020377 <Vm::x87Handler(regs*)+0xa3f>
c0020366:	55                   	push   ebp
c0020367:	55                   	push   ebp
c0020368:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002036b:	ff 36                	push   DWORD PTR [esi]
c002036d:	e8 81 f2 ff ff       	call   c001f5f3 <Vm::fpuULongToFloat(unsigned long long)>
c0020372:	e9 cf f7 ff ff       	jmp    c001fb46 <Vm::x87Handler(regs*)+0x20e>
c0020377:	31 c0                	xor    eax,eax
c0020379:	80 fa 07             	cmp    dl,0x7
c002037c:	75 1b                	jne    c0020399 <Vm::x87Handler(regs*)+0xa61>
c002037e:	e8 63 f5 ff ff       	call   c001f8e6 <Vm::fpuPop()>
c0020383:	51                   	push   ecx
c0020384:	51                   	push   ecx
c0020385:	52                   	push   edx
c0020386:	50                   	push   eax
c0020387:	e8 0c f2 ff ff       	call   c001f598 <Vm::fpuFloatToLong(unsigned long long)>
c002038c:	83 c4 10             	add    esp,0x10
c002038f:	89 06                	mov    DWORD PTR [esi],eax
c0020391:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020394:	e9 f8 f7 ff ff       	jmp    c001fb91 <Vm::x87Handler(regs*)+0x259>
c0020399:	83 c4 1c             	add    esp,0x1c
c002039c:	5b                   	pop    ebx
c002039d:	5e                   	pop    esi
c002039e:	5f                   	pop    edi
c002039f:	5d                   	pop    ebp
c00203a0:	c3                   	ret    

c00203a1 <__static_initialization_and_destruction_0(int, int)>:
c00203a1:	83 ec 0c             	sub    esp,0xc
c00203a4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00203a9:	75 1a                	jne    c00203c5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203ab:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00203b3:	75 10                	jne    c00203c5 <__static_initialization_and_destruction_0(int, int)+0x24>
c00203b5:	83 ec 0c             	sub    esp,0xc
c00203b8:	68 60 18 03 c0       	push   0xc0031860
c00203bd:	e8 0e 88 00 00       	call   c0028bd0 <Vm::_FPUState::_FPUState()>
c00203c2:	83 c4 10             	add    esp,0x10
c00203c5:	90                   	nop
c00203c6:	83 c4 0c             	add    esp,0xc
c00203c9:	c3                   	ret    

c00203ca <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	83 ec 08             	sub    esp,0x8
c00203d0:	68 ff ff 00 00       	push   0xffff
c00203d5:	6a 01                	push   0x1
c00203d7:	e8 c5 ff ff ff       	call   c00203a1 <__static_initialization_and_destruction_0(int, int)>
c00203dc:	83 c4 10             	add    esp,0x10
c00203df:	83 c4 0c             	add    esp,0xc
c00203e2:	c3                   	ret    
c00203e3:	90                   	nop

c00203e4 <FAT::getName()>:
c00203e4:	b8 70 c6 02 c0       	mov    eax,0xc002c670
c00203e9:	c3                   	ret    

c00203ea <FAT::tell(void*, unsigned long long*)>:
c00203ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00203ef:	75 06                	jne    c00203f7 <FAT::tell(void*, unsigned long long*)+0xd>
c00203f1:	b8 04 00 00 00       	mov    eax,0x4
c00203f6:	c3                   	ret    
c00203f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00203fc:	75 06                	jne    c0020404 <FAT::tell(void*, unsigned long long*)+0x1a>
c00203fe:	b8 04 00 00 00       	mov    eax,0x4
c0020403:	c3                   	ret    
c0020404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020408:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c002040b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002040e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020412:	89 01                	mov    DWORD PTR [ecx],eax
c0020414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020417:	b8 00 00 00 00       	mov    eax,0x0
c002041c:	c3                   	ret    
c002041d:	90                   	nop

c002041e <FAT::stat(void*, unsigned long long*)>:
c002041e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020423:	75 06                	jne    c002042b <FAT::stat(void*, unsigned long long*)+0xd>
c0020425:	b8 04 00 00 00       	mov    eax,0x4
c002042a:	c3                   	ret    
c002042b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020430:	75 06                	jne    c0020438 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020432:	b8 04 00 00 00       	mov    eax,0x4
c0020437:	c3                   	ret    
c0020438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002043c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002043f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020442:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020446:	89 01                	mov    DWORD PTR [ecx],eax
c0020448:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002044b:	b8 00 00 00 00       	mov    eax,0x0
c0020450:	c3                   	ret    
c0020451:	90                   	nop

c0020452 <FAT::~FAT()>:
c0020452:	83 ec 0c             	sub    esp,0xc
c0020455:	ba f4 c6 02 c0       	mov    edx,0xc002c6f4
c002045a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045e:	89 10                	mov    DWORD PTR [eax],edx
c0020460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020464:	83 ec 0c             	sub    esp,0xc
c0020467:	50                   	push   eax
c0020468:	e8 8f 2c ff ff       	call   c00130fc <Filesystem::~Filesystem()>
c002046d:	83 c4 10             	add    esp,0x10
c0020470:	90                   	nop
c0020471:	83 c4 0c             	add    esp,0xc
c0020474:	c3                   	ret    
c0020475:	90                   	nop

c0020476 <FAT::~FAT()>:
c0020476:	83 ec 0c             	sub    esp,0xc
c0020479:	83 ec 0c             	sub    esp,0xc
c002047c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020480:	e8 cd ff ff ff       	call   c0020452 <FAT::~FAT()>
c0020485:	83 c4 10             	add    esp,0x10
c0020488:	83 ec 08             	sub    esp,0x8
c002048b:	6a 08                	push   0x8
c002048d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020491:	e8 5e 28 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0020496:	83 c4 10             	add    esp,0x10
c0020499:	83 c4 0c             	add    esp,0xc
c002049c:	c3                   	ret    
c002049d:	90                   	nop

c002049e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002049e:	83 ec 1c             	sub    esp,0x1c
c00204a1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00204a8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00204ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204b1:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00204b8:	83 f8 ff             	cmp    eax,0xffffffff
c00204bb:	75 34                	jne    c00204f1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00204bd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204c1:	88 c2                	mov    dl,al
c00204c3:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c00204c8:	01 d0                	add    eax,edx
c00204ca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00204ce:	8b 15 c0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318c0
c00204d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204d8:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c00204df:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c00204e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00204e8:	89 14 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],edx
c00204ef:	eb 17                	jmp    c0020508 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00204f1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00204f5:	88 c2                	mov    dl,al
c00204f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00204fb:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c0020502:	01 d0                	add    eax,edx
c0020504:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020508:	83 ec 04             	sub    esp,0x4
c002050b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002050f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020513:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020517:	50                   	push   eax
c0020518:	e8 1b 68 fe ff       	call   c0006d38 <f_getlabel>
c002051d:	83 c4 10             	add    esp,0x10
c0020520:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020524:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020529:	75 07                	jne    c0020532 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002052b:	b8 00 00 00 00       	mov    eax,0x0
c0020530:	eb 05                	jmp    c0020537 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020532:	b8 01 00 00 00       	mov    eax,0x1
c0020537:	83 c4 1c             	add    esp,0x1c
c002053a:	c3                   	ret    
c002053b:	90                   	nop

c002053c <FAT::setlabel(LogicalDisk*, int, char*)>:
c002053c:	57                   	push   edi
c002053d:	83 ec 58             	sub    esp,0x58
c0020540:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020548:	8d 54 24 10          	lea    edx,[esp+0x10]
c002054c:	b9 0f 00 00 00       	mov    ecx,0xf
c0020551:	b8 00 00 00 00       	mov    eax,0x0
c0020556:	fc                   	cld    
c0020557:	89 d7                	mov    edi,edx
c0020559:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002055b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002055f:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c0020566:	83 f8 ff             	cmp    eax,0xffffffff
c0020569:	75 34                	jne    c002059f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002056b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002056f:	88 c2                	mov    dl,al
c0020571:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c0020576:	01 d0                	add    eax,edx
c0020578:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002057c:	8b 15 c0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318c0
c0020582:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020586:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c002058d:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c0020592:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020596:	89 14 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],edx
c002059d:	eb 17                	jmp    c00205b6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002059f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205a3:	88 c2                	mov    dl,al
c00205a5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00205a9:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00205b0:	01 d0                	add    eax,edx
c00205b2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00205b6:	83 ec 08             	sub    esp,0x8
c00205b9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00205bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205c1:	50                   	push   eax
c00205c2:	e8 ad 03 fe ff       	call   c0000974 <strcat>
c00205c7:	83 c4 10             	add    esp,0x10
c00205ca:	83 ec 0c             	sub    esp,0xc
c00205cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00205d1:	50                   	push   eax
c00205d2:	e8 4f 69 fe ff       	call   c0006f26 <f_setlabel>
c00205d7:	83 c4 10             	add    esp,0x10
c00205da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00205de:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00205e3:	75 07                	jne    c00205ec <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00205e5:	b8 00 00 00 00       	mov    eax,0x0
c00205ea:	eb 05                	jmp    c00205f1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00205ec:	b8 01 00 00 00       	mov    eax,0x1
c00205f1:	83 c4 58             	add    esp,0x58
c00205f4:	5f                   	pop    edi
c00205f5:	c3                   	ret    

c00205f6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00205f6:	83 ec 2c             	sub    esp,0x2c
c00205f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020601:	83 ec 08             	sub    esp,0x8
c0020604:	68 94 c6 02 c0       	push   0xc002c694
c0020609:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002060d:	e8 ae 02 fe ff       	call   c00008c0 <strcmp>
c0020612:	83 c4 10             	add    esp,0x10
c0020615:	85 c0                	test   eax,eax
c0020617:	0f 94 c0             	sete   al
c002061a:	84 c0                	test   al,al
c002061c:	74 0d                	je     c002062b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002061e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020626:	e9 a6 00 00 00       	jmp    c00206d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002062b:	83 ec 08             	sub    esp,0x8
c002062e:	68 86 c6 02 c0       	push   0xc002c686
c0020633:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020637:	e8 84 02 fe ff       	call   c00008c0 <strcmp>
c002063c:	83 c4 10             	add    esp,0x10
c002063f:	85 c0                	test   eax,eax
c0020641:	0f 94 c0             	sete   al
c0020644:	84 c0                	test   al,al
c0020646:	74 0a                	je     c0020652 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020648:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020650:	eb 7f                	jmp    c00206d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020652:	83 ec 08             	sub    esp,0x8
c0020655:	68 8c c6 02 c0       	push   0xc002c68c
c002065a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002065e:	e8 5d 02 fe ff       	call   c00008c0 <strcmp>
c0020663:	83 c4 10             	add    esp,0x10
c0020666:	85 c0                	test   eax,eax
c0020668:	0f 94 c0             	sete   al
c002066b:	84 c0                	test   al,al
c002066d:	74 0a                	je     c0020679 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002066f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020677:	eb 58                	jmp    c00206d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020679:	83 ec 08             	sub    esp,0x8
c002067c:	68 2c 93 02 c0       	push   0xc002932c
c0020681:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020685:	e8 36 02 fe ff       	call   c00008c0 <strcmp>
c002068a:	83 c4 10             	add    esp,0x10
c002068d:	85 c0                	test   eax,eax
c002068f:	0f 94 c0             	sete   al
c0020692:	84 c0                	test   al,al
c0020694:	74 0a                	je     c00206a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020696:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002069e:	eb 31                	jmp    c00206d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206a0:	83 ec 08             	sub    esp,0x8
c00206a3:	68 92 c6 02 c0       	push   0xc002c692
c00206a8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00206ac:	e8 0f 02 fe ff       	call   c00008c0 <strcmp>
c00206b1:	83 c4 10             	add    esp,0x10
c00206b4:	85 c0                	test   eax,eax
c00206b6:	0f 94 c0             	sete   al
c00206b9:	84 c0                	test   al,al
c00206bb:	74 0a                	je     c00206c7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00206bd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00206c5:	eb 0a                	jmp    c00206d1 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00206c7:	b8 08 00 00 00       	mov    eax,0x8
c00206cc:	e9 04 01 00 00       	jmp    c00207d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00206d1:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00206d8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00206dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206e1:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00206e8:	83 f8 ff             	cmp    eax,0xffffffff
c00206eb:	75 34                	jne    c0020721 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00206ed:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00206f1:	88 c2                	mov    dl,al
c00206f3:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c00206f8:	01 d0                	add    eax,edx
c00206fa:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00206fe:	8b 15 c0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318c0
c0020704:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020708:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c002070f:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c0020714:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020718:	89 14 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],edx
c002071f:	eb 17                	jmp    c0020738 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020721:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020725:	88 c2                	mov    dl,al
c0020727:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002072b:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c0020732:	01 d0                	add    eax,edx
c0020734:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002073c:	88 04 24             	mov    BYTE PTR [esp],al
c002073f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020743:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020747:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002074f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020754:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002075c:	83 ec 0c             	sub    esp,0xc
c002075f:	68 00 20 00 00       	push   0x2000
c0020764:	e8 d7 f0 fe ff       	call   c000f840 <malloc>
c0020769:	83 c4 10             	add    esp,0x10
c002076c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020770:	68 00 20 00 00       	push   0x2000
c0020775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020779:	8d 44 24 08          	lea    eax,[esp+0x8]
c002077d:	50                   	push   eax
c002077e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020782:	50                   	push   eax
c0020783:	e8 e9 6b fe ff       	call   c0007371 <f_mkfs>
c0020788:	83 c4 10             	add    esp,0x10
c002078b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002078f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020794:	75 07                	jne    c002079d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020796:	b8 00 00 00 00       	mov    eax,0x0
c002079b:	eb 38                	jmp    c00207d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002079d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00207a2:	75 17                	jne    c00207bb <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00207a4:	83 ec 0c             	sub    esp,0xc
c00207a7:	68 c4 c6 02 c0       	push   0xc002c6c4
c00207ac:	e8 23 26 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00207b1:	83 c4 10             	add    esp,0x10
c00207b4:	b8 09 00 00 00       	mov    eax,0x9
c00207b9:	eb 1a                	jmp    c00207d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00207bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207bf:	83 ec 08             	sub    esp,0x8
c00207c2:	50                   	push   eax
c00207c3:	68 98 c6 02 c0       	push   0xc002c698
c00207c8:	e8 07 26 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00207cd:	83 c4 10             	add    esp,0x10
c00207d0:	b8 01 00 00 00       	mov    eax,0x1
c00207d5:	83 c4 2c             	add    esp,0x2c
c00207d8:	c3                   	ret    
c00207d9:	90                   	nop

c00207da <FAT::tryMount(LogicalDisk*, int)>:
c00207da:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00207e0:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c00207e5:	83 f8 14             	cmp    eax,0x14
c00207e8:	75 17                	jne    c0020801 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00207ea:	83 ec 0c             	sub    esp,0xc
c00207ed:	68 aa c6 02 c0       	push   0xc002c6aa
c00207f2:	e8 86 9c ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00207f7:	83 c4 10             	add    esp,0x10
c00207fa:	b0 00                	mov    al,0x0
c00207fc:	e9 d7 01 00 00       	jmp    c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020801:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020808:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002080e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020814:	3d 00 02 00 00       	cmp    eax,0x200
c0020819:	74 07                	je     c0020822 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002081b:	b0 00                	mov    al,0x0
c002081d:	e9 b6 01 00 00       	jmp    c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020822:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c002082a:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020831:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c0020838:	83 f8 ff             	cmp    eax,0xffffffff
c002083b:	74 07                	je     c0020844 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c002083d:	b0 01                	mov    al,0x1
c002083f:	e9 94 01 00 00       	jmp    c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020844:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c002084e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020856:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c002085d:	88 c2                	mov    dl,al
c002085f:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c0020864:	01 d0                	add    eax,edx
c0020866:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002086d:	8b 15 c0 18 03 c0    	mov    edx,DWORD PTR ds:0xc00318c0
c0020873:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002087a:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c0020881:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c0020886:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002088d:	89 14 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],edx
c0020894:	83 ec 0c             	sub    esp,0xc
c0020897:	68 54 02 00 00       	push   0x254
c002089c:	e8 9f ef fe ff       	call   c000f840 <malloc>
c00208a1:	83 c4 10             	add    esp,0x10
c00208a4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00208ab:	83 ec 04             	sub    esp,0x4
c00208ae:	6a 00                	push   0x0
c00208b0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00208b7:	50                   	push   eax
c00208b8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208bf:	e8 6b 46 fe ff       	call   c0004f2f <f_mount>
c00208c4:	83 c4 10             	add    esp,0x10
c00208c7:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00208ce:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00208d6:	74 19                	je     c00208f1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00208d8:	83 ec 0c             	sub    esp,0xc
c00208db:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00208e2:	e8 79 ef fe ff       	call   c000f860 <rfree>
c00208e7:	83 c4 10             	add    esp,0x10
c00208ea:	b0 00                	mov    al,0x0
c00208ec:	e9 e7 00 00 00       	jmp    c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00208f1:	83 ec 04             	sub    esp,0x4
c00208f4:	68 00 01 00 00       	push   0x100
c00208f9:	6a 00                	push   0x0
c00208fb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020902:	50                   	push   eax
c0020903:	e8 70 fe fd ff       	call   c0000778 <memset>
c0020908:	83 c4 10             	add    esp,0x10
c002090b:	83 ec 08             	sub    esp,0x8
c002090e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020915:	50                   	push   eax
c0020916:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002091d:	50                   	push   eax
c002091e:	e8 51 00 fe ff       	call   c0000974 <strcat>
c0020923:	83 c4 10             	add    esp,0x10
c0020926:	83 ec 08             	sub    esp,0x8
c0020929:	68 b8 c6 02 c0       	push   0xc002c6b8
c002092e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020935:	50                   	push   eax
c0020936:	e8 39 00 fe ff       	call   c0000974 <strcat>
c002093b:	83 c4 10             	add    esp,0x10
c002093e:	83 ec 04             	sub    esp,0x4
c0020941:	6a 01                	push   0x1
c0020943:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c002094a:	50                   	push   eax
c002094b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002094f:	50                   	push   eax
c0020950:	e8 3c 46 fe ff       	call   c0004f91 <f_open>
c0020955:	83 c4 10             	add    esp,0x10
c0020958:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002095f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020966:	85 c0                	test   eax,eax
c0020968:	74 0a                	je     c0020974 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002096a:	78 2d                	js     c0020999 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002096c:	83 e8 04             	sub    eax,0x4
c002096f:	83 f8 01             	cmp    eax,0x1
c0020972:	77 25                	ja     c0020999 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020974:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002097c:	83 ec 0c             	sub    esp,0xc
c002097f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020983:	50                   	push   eax
c0020984:	e8 5a 51 fe ff       	call   c0005ae3 <f_close>
c0020989:	83 c4 10             	add    esp,0x10
c002098c:	90                   	nop
c002098d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020995:	74 3a                	je     c00209d1 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020997:	eb 2d                	jmp    c00209c6 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020999:	83 ec 0c             	sub    esp,0xc
c002099c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00209a3:	e8 b8 ee fe ff       	call   c000f860 <rfree>
c00209a8:	83 c4 10             	add    esp,0x10
c00209ab:	83 ec 04             	sub    esp,0x4
c00209ae:	6a 00                	push   0x0
c00209b0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00209b7:	50                   	push   eax
c00209b8:	6a 00                	push   0x0
c00209ba:	e8 70 45 fe ff       	call   c0004f2f <f_mount>
c00209bf:	83 c4 10             	add    esp,0x10
c00209c2:	b0 00                	mov    al,0x0
c00209c4:	eb 12                	jmp    c00209d8 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209c6:	a1 c0 18 03 c0       	mov    eax,ds:0xc00318c0
c00209cb:	40                   	inc    eax
c00209cc:	a3 c0 18 03 c0       	mov    ds:0xc00318c0,eax
c00209d1:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00209d8:	81 c4 6c 03 00 00    	add    esp,0x36c
c00209de:	c3                   	ret    
c00209df:	90                   	nop

c00209e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00209e0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00209e6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00209ee:	74 0a                	je     c00209fa <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00209f0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00209f8:	75 0a                	jne    c0020a04 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00209fa:	b8 04 00 00 00       	mov    eax,0x4
c00209ff:	e9 db 00 00 00       	jmp    c0020adf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020a04:	83 ec 08             	sub    esp,0x8
c0020a07:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a0e:	50                   	push   eax
c0020a0f:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020a16:	e8 d2 56 fe ff       	call   c00060ed <f_readdir>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020a25:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020a2b:	83 ec 0c             	sub    esp,0xc
c0020a2e:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020a35:	83 c0 1a             	add    eax,0x1a
c0020a38:	50                   	push   eax
c0020a39:	e8 56 fd fd ff       	call   c0000794 <strlen>
c0020a3e:	83 c4 10             	add    esp,0x10
c0020a41:	ba 00 00 00 00       	mov    edx,0x0
c0020a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020a4e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020a55:	0f b6 c0             	movzx  eax,al
c0020a58:	83 e0 10             	and    eax,0x10
c0020a5b:	74 07                	je     c0020a64 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020a5d:	b8 02 00 00 00       	mov    eax,0x2
c0020a62:	eb 05                	jmp    c0020a69 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020a64:	b8 01 00 00 00       	mov    eax,0x1
c0020a69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a6d:	83 ec 08             	sub    esp,0x8
c0020a70:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020a77:	83 c0 1a             	add    eax,0x1a
c0020a7a:	50                   	push   eax
c0020a7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020a7f:	83 c0 10             	add    eax,0x10
c0020a82:	50                   	push   eax
c0020a83:	e8 ac fd fd ff       	call   c0000834 <strcpy>
c0020a88:	83 c4 10             	add    esp,0x10
c0020a8b:	83 ec 04             	sub    esp,0x4
c0020a8e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020a95:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a99:	50                   	push   eax
c0020a9a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020aa1:	e8 9e fc fd ff       	call   c0000744 <memcpy>
c0020aa6:	83 c4 10             	add    esp,0x10
c0020aa9:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ab0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ab6:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020abd:	84 c0                	test   al,al
c0020abf:	75 07                	jne    c0020ac8 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020ac1:	b8 07 00 00 00       	mov    eax,0x7
c0020ac6:	eb 17                	jmp    c0020adf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ac8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020acf:	85 c0                	test   eax,eax
c0020ad1:	75 07                	jne    c0020ada <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020ad3:	b8 00 00 00 00       	mov    eax,0x0
c0020ad8:	eb 05                	jmp    c0020adf <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ada:	b8 01 00 00 00       	mov    eax,0x1
c0020adf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020ae5:	c3                   	ret    

c0020ae6 <FAT::read(void*, unsigned long, void*, int*)>:
c0020ae6:	83 ec 1c             	sub    esp,0x1c
c0020ae9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020aee:	74 07                	je     c0020af7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020af0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020af5:	75 07                	jne    c0020afe <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020af7:	b8 04 00 00 00       	mov    eax,0x4
c0020afc:	eb 3d                	jmp    c0020b3b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020afe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b02:	50                   	push   eax
c0020b03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b0b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b0f:	e8 b9 48 fe ff       	call   c00053cd <f_read>
c0020b14:	83 c4 10             	add    esp,0x10
c0020b17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b1f:	89 c2                	mov    edx,eax
c0020b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b25:	89 10                	mov    DWORD PTR [eax],edx
c0020b27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b2b:	85 c0                	test   eax,eax
c0020b2d:	75 07                	jne    c0020b36 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020b2f:	b8 00 00 00 00       	mov    eax,0x0
c0020b34:	eb 05                	jmp    c0020b3b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020b36:	b8 01 00 00 00       	mov    eax,0x1
c0020b3b:	83 c4 1c             	add    esp,0x1c
c0020b3e:	c3                   	ret    
c0020b3f:	90                   	nop

c0020b40 <FAT::write(void*, unsigned long, void*, int*)>:
c0020b40:	83 ec 1c             	sub    esp,0x1c
c0020b43:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020b48:	74 07                	je     c0020b51 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020b4a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020b4f:	75 07                	jne    c0020b58 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020b51:	b8 04 00 00 00       	mov    eax,0x4
c0020b56:	eb 3d                	jmp    c0020b95 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b5c:	50                   	push   eax
c0020b5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020b61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020b65:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020b69:	e8 df 4a fe ff       	call   c000564d <f_write>
c0020b6e:	83 c4 10             	add    esp,0x10
c0020b71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020b75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b79:	89 c2                	mov    edx,eax
c0020b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020b7f:	89 10                	mov    DWORD PTR [eax],edx
c0020b81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b85:	85 c0                	test   eax,eax
c0020b87:	75 07                	jne    c0020b90 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020b89:	b8 00 00 00 00       	mov    eax,0x0
c0020b8e:	eb 05                	jmp    c0020b95 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020b90:	b8 01 00 00 00       	mov    eax,0x1
c0020b95:	83 c4 1c             	add    esp,0x1c
c0020b98:	c3                   	ret    
c0020b99:	90                   	nop

c0020b9a <FAT::close(void*)>:
c0020b9a:	83 ec 1c             	sub    esp,0x1c
c0020b9d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ba2:	75 07                	jne    c0020bab <FAT::close(void*)+0x11>
c0020ba4:	b8 04 00 00 00       	mov    eax,0x4
c0020ba9:	eb 36                	jmp    c0020be1 <FAT::close(void*)+0x47>
c0020bab:	83 ec 0c             	sub    esp,0xc
c0020bae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bb2:	e8 2c 4f fe ff       	call   c0005ae3 <f_close>
c0020bb7:	83 c4 10             	add    esp,0x10
c0020bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020bbe:	83 ec 0c             	sub    esp,0xc
c0020bc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bc5:	e8 86 ec fe ff       	call   c000f850 <free>
c0020bca:	83 c4 10             	add    esp,0x10
c0020bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bd1:	85 c0                	test   eax,eax
c0020bd3:	75 07                	jne    c0020bdc <FAT::close(void*)+0x42>
c0020bd5:	b8 00 00 00 00       	mov    eax,0x0
c0020bda:	eb 05                	jmp    c0020be1 <FAT::close(void*)+0x47>
c0020bdc:	b8 01 00 00 00       	mov    eax,0x1
c0020be1:	83 c4 1c             	add    esp,0x1c
c0020be4:	c3                   	ret    
c0020be5:	90                   	nop

c0020be6 <FAT::closeDir(void*)>:
c0020be6:	83 ec 1c             	sub    esp,0x1c
c0020be9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020bee:	75 07                	jne    c0020bf7 <FAT::closeDir(void*)+0x11>
c0020bf0:	b8 04 00 00 00       	mov    eax,0x4
c0020bf5:	eb 36                	jmp    c0020c2d <FAT::closeDir(void*)+0x47>
c0020bf7:	83 ec 0c             	sub    esp,0xc
c0020bfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020bfe:	e8 c8 54 fe ff       	call   c00060cb <f_closedir>
c0020c03:	83 c4 10             	add    esp,0x10
c0020c06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c0a:	83 ec 0c             	sub    esp,0xc
c0020c0d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020c11:	e8 3a ec fe ff       	call   c000f850 <free>
c0020c16:	83 c4 10             	add    esp,0x10
c0020c19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c1d:	85 c0                	test   eax,eax
c0020c1f:	75 07                	jne    c0020c28 <FAT::closeDir(void*)+0x42>
c0020c21:	b8 00 00 00 00       	mov    eax,0x0
c0020c26:	eb 05                	jmp    c0020c2d <FAT::closeDir(void*)+0x47>
c0020c28:	b8 01 00 00 00       	mov    eax,0x1
c0020c2d:	83 c4 1c             	add    esp,0x1c
c0020c30:	c3                   	ret    
c0020c31:	90                   	nop

c0020c32 <FAT::seek(void*, unsigned long long)>:
c0020c32:	83 ec 2c             	sub    esp,0x2c
c0020c35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020c39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020c41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c45:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020c4a:	75 07                	jne    c0020c53 <FAT::seek(void*, unsigned long long)+0x21>
c0020c4c:	b8 04 00 00 00       	mov    eax,0x4
c0020c51:	eb 2f                	jmp    c0020c82 <FAT::seek(void*, unsigned long long)+0x50>
c0020c53:	83 ec 04             	sub    esp,0x4
c0020c56:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020c5e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020c62:	e8 ab 4e fe ff       	call   c0005b12 <f_lseek>
c0020c67:	83 c4 10             	add    esp,0x10
c0020c6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c72:	85 c0                	test   eax,eax
c0020c74:	75 07                	jne    c0020c7d <FAT::seek(void*, unsigned long long)+0x4b>
c0020c76:	b8 00 00 00 00       	mov    eax,0x0
c0020c7b:	eb 05                	jmp    c0020c82 <FAT::seek(void*, unsigned long long)+0x50>
c0020c7d:	b8 01 00 00 00       	mov    eax,0x1
c0020c82:	83 c4 2c             	add    esp,0x2c
c0020c85:	c3                   	ret    

c0020c86 <fatWrapperReadDisk>:
c0020c86:	83 ec 1c             	sub    esp,0x1c
c0020c89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020c8d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020c91:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c95:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020c9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ca0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ca5:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0020cac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cb0:	83 ec 0c             	sub    esp,0xc
c0020cb3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cb7:	52                   	push   edx
c0020cb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020cc0:	50                   	push   eax
c0020cc1:	e8 22 59 ff ff       	call   c00165e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020cc6:	83 c4 20             	add    esp,0x20
c0020cc9:	83 c4 1c             	add    esp,0x1c
c0020ccc:	c3                   	ret    

c0020ccd <fatWrapperWriteDisk>:
c0020ccd:	83 ec 1c             	sub    esp,0x1c
c0020cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020cd8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cdc:	89 04 24             	mov    DWORD PTR [esp],eax
c0020cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ce3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ce7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020cec:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0020cf3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020cf7:	83 ec 0c             	sub    esp,0xc
c0020cfa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cfe:	52                   	push   edx
c0020cff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020d07:	50                   	push   eax
c0020d08:	e8 47 59 ff ff       	call   c0016654 <LogicalDisk::write(unsigned long long, int, void*)>
c0020d0d:	83 c4 20             	add    esp,0x20
c0020d10:	83 c4 1c             	add    esp,0x1c
c0020d13:	c3                   	ret    

c0020d14 <fatWrapperIoctl>:
c0020d14:	53                   	push   ebx
c0020d15:	83 ec 28             	sub    esp,0x28
c0020d18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020d1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020d20:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020d24:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020d28:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020d2d:	75 31                	jne    c0020d60 <fatWrapperIoctl+0x4c>
c0020d2f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d33:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d37:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d3c:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0020d43:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020d53:	66 89 02             	mov    WORD PTR [edx],ax
c0020d56:	b8 00 00 00 00       	mov    eax,0x0
c0020d5b:	e9 b2 00 00 00       	jmp    c0020e12 <fatWrapperIoctl+0xfe>
c0020d60:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020d65:	75 6a                	jne    c0020dd1 <fatWrapperIoctl+0xbd>
c0020d67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020d6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d6f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d74:	8b 04 85 a0 e8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1760]
c0020d7b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020d81:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020d87:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020d8d:	89 c8                	mov    eax,ecx
c0020d8f:	89 da                	mov    edx,ebx
c0020d91:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020d95:	c1 e0 0a             	shl    eax,0xa
c0020d98:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020d9d:	8b 0c 8d a0 e8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd1760]
c0020da4:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020daa:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020db0:	89 cb                	mov    ebx,ecx
c0020db2:	c1 fb 1f             	sar    ebx,0x1f
c0020db5:	53                   	push   ebx
c0020db6:	51                   	push   ecx
c0020db7:	52                   	push   edx
c0020db8:	50                   	push   eax
c0020db9:	e8 be 5a 00 00       	call   c002687c <__udivdi3>
c0020dbe:	83 c4 10             	add    esp,0x10
c0020dc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020dc5:	89 01                	mov    DWORD PTR [ecx],eax
c0020dc7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dca:	b8 00 00 00 00       	mov    eax,0x0
c0020dcf:	eb 41                	jmp    c0020e12 <fatWrapperIoctl+0xfe>
c0020dd1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020dd6:	75 07                	jne    c0020ddf <fatWrapperIoctl+0xcb>
c0020dd8:	b8 00 00 00 00       	mov    eax,0x0
c0020ddd:	eb 33                	jmp    c0020e12 <fatWrapperIoctl+0xfe>
c0020ddf:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020de4:	75 19                	jne    c0020dff <fatWrapperIoctl+0xeb>
c0020de6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020dea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020dee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020df2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020df8:	b8 00 00 00 00       	mov    eax,0x0
c0020dfd:	eb 13                	jmp    c0020e12 <fatWrapperIoctl+0xfe>
c0020dff:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020e04:	75 07                	jne    c0020e0d <fatWrapperIoctl+0xf9>
c0020e06:	b8 00 00 00 00       	mov    eax,0x0
c0020e0b:	eb 05                	jmp    c0020e12 <fatWrapperIoctl+0xfe>
c0020e0d:	b8 04 00 00 00       	mov    eax,0x4
c0020e12:	83 c4 28             	add    esp,0x28
c0020e15:	5b                   	pop    ebx
c0020e16:	c3                   	ret    
c0020e17:	90                   	nop

c0020e18 <FAT::FAT()>:
c0020e18:	83 ec 1c             	sub    esp,0x1c
c0020e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e1f:	83 ec 0c             	sub    esp,0xc
c0020e22:	50                   	push   eax
c0020e23:	e8 b0 22 ff ff       	call   c00130d8 <Filesystem::Filesystem()>
c0020e28:	83 c4 10             	add    esp,0x10
c0020e2b:	ba f4 c6 02 c0       	mov    edx,0xc002c6f4
c0020e30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e34:	89 10                	mov    DWORD PTR [eax],edx
c0020e36:	c7 05 c0 18 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00318c0,0x0
c0020e40:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020e48:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020e4d:	7f 15                	jg     c0020e64 <FAT::FAT()+0x4c>
c0020e4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e53:	c7 04 85 e0 18 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce720],0xffffffff
c0020e5e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020e62:	eb e4                	jmp    c0020e48 <FAT::FAT()+0x30>
c0020e64:	90                   	nop
c0020e65:	83 c4 1c             	add    esp,0x1c
c0020e68:	c3                   	ret    
c0020e69:	90                   	nop

c0020e6a <FAT::fixFilepath(char*)>:
c0020e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e6e:	8a 00                	mov    al,BYTE PTR [eax]
c0020e70:	3c 40                	cmp    al,0x40
c0020e72:	7e 2c                	jle    c0020ea0 <FAT::fixFilepath(char*)+0x36>
c0020e74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e78:	8a 00                	mov    al,BYTE PTR [eax]
c0020e7a:	83 e8 41             	sub    eax,0x41
c0020e7d:	88 c2                	mov    dl,al
c0020e7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e83:	88 10                	mov    BYTE PTR [eax],dl
c0020e85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e89:	8a 00                	mov    al,BYTE PTR [eax]
c0020e8b:	0f be c0             	movsx  eax,al
c0020e8e:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c0020e95:	83 c0 30             	add    eax,0x30
c0020e98:	88 c2                	mov    dl,al
c0020e9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e9e:	88 10                	mov    BYTE PTR [eax],dl
c0020ea0:	90                   	nop
c0020ea1:	c3                   	ret    

c0020ea2 <FAT::open(char const*, void**, FileOpenMode)>:
c0020ea2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ea8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020eb0:	74 0a                	je     c0020ebc <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020eb2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020eba:	75 0a                	jne    c0020ec6 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020ebc:	b8 04 00 00 00       	mov    eax,0x4
c0020ec1:	e9 fd 00 00 00       	jmp    c0020fc3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ec6:	83 ec 08             	sub    esp,0x8
c0020ec9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ed0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ed4:	50                   	push   eax
c0020ed5:	e8 5a f9 fd ff       	call   c0000834 <strcpy>
c0020eda:	83 c4 10             	add    esp,0x10
c0020edd:	83 ec 08             	sub    esp,0x8
c0020ee0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020ee4:	50                   	push   eax
c0020ee5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020eec:	e8 79 ff ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c0020ef1:	83 c4 10             	add    esp,0x10
c0020ef4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020efc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f03:	83 e0 01             	and    eax,0x1
c0020f06:	74 08                	je     c0020f10 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020f08:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020f10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f17:	83 e0 04             	and    eax,0x4
c0020f1a:	74 10                	je     c0020f2c <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020f1c:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020f24:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f33:	83 e0 02             	and    eax,0x2
c0020f36:	74 08                	je     c0020f40 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020f38:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020f40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f47:	83 e0 08             	and    eax,0x8
c0020f4a:	74 08                	je     c0020f54 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020f4c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020f54:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020f5b:	83 e0 10             	and    eax,0x10
c0020f5e:	74 08                	je     c0020f68 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020f60:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020f68:	83 ec 0c             	sub    esp,0xc
c0020f6b:	68 50 02 00 00       	push   0x250
c0020f70:	e8 cb e8 fe ff       	call   c000f840 <malloc>
c0020f75:	83 c4 10             	add    esp,0x10
c0020f78:	89 c2                	mov    edx,eax
c0020f7a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f81:	89 10                	mov    DWORD PTR [eax],edx
c0020f83:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020f8b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020f92:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f94:	83 ec 04             	sub    esp,0x4
c0020f97:	52                   	push   edx
c0020f98:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f9c:	52                   	push   edx
c0020f9d:	50                   	push   eax
c0020f9e:	e8 ee 3f fe ff       	call   c0004f91 <f_open>
c0020fa3:	83 c4 10             	add    esp,0x10
c0020fa6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020fad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020fb5:	74 07                	je     c0020fbe <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020fb7:	b8 01 00 00 00       	mov    eax,0x1
c0020fbc:	eb 05                	jmp    c0020fc3 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020fbe:	b8 00 00 00 00       	mov    eax,0x0
c0020fc3:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020fc9:	c3                   	ret    

c0020fca <FAT::openDir(char const*, void**)>:
c0020fca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020fd0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020fd8:	74 0a                	je     c0020fe4 <FAT::openDir(char const*, void**)+0x1a>
c0020fda:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020fe2:	75 07                	jne    c0020feb <FAT::openDir(char const*, void**)+0x21>
c0020fe4:	b8 04 00 00 00       	mov    eax,0x4
c0020fe9:	eb 7d                	jmp    c0021068 <FAT::openDir(char const*, void**)+0x9e>
c0020feb:	83 ec 08             	sub    esp,0x8
c0020fee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ff5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020ff9:	50                   	push   eax
c0020ffa:	e8 35 f8 fd ff       	call   c0000834 <strcpy>
c0020fff:	83 c4 10             	add    esp,0x10
c0021002:	83 ec 08             	sub    esp,0x8
c0021005:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021009:	50                   	push   eax
c002100a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021011:	e8 54 fe ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c0021016:	83 c4 10             	add    esp,0x10
c0021019:	83 ec 0c             	sub    esp,0xc
c002101c:	6a 4c                	push   0x4c
c002101e:	e8 1d e8 fe ff       	call   c000f840 <malloc>
c0021023:	83 c4 10             	add    esp,0x10
c0021026:	89 c2                	mov    edx,eax
c0021028:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002102f:	89 10                	mov    DWORD PTR [eax],edx
c0021031:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021038:	8b 00                	mov    eax,DWORD PTR [eax]
c002103a:	83 ec 08             	sub    esp,0x8
c002103d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021041:	52                   	push   edx
c0021042:	50                   	push   eax
c0021043:	e8 81 4f fe ff       	call   c0005fc9 <f_opendir>
c0021048:	83 c4 10             	add    esp,0x10
c002104b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021052:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002105a:	74 07                	je     c0021063 <FAT::openDir(char const*, void**)+0x99>
c002105c:	b8 01 00 00 00       	mov    eax,0x1
c0021061:	eb 05                	jmp    c0021068 <FAT::openDir(char const*, void**)+0x9e>
c0021063:	b8 00 00 00 00       	mov    eax,0x0
c0021068:	81 c4 1c 01 00 00    	add    esp,0x11c
c002106e:	c3                   	ret    
c002106f:	90                   	nop

c0021070 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021070:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021076:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002107e:	75 0a                	jne    c002108a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021080:	b8 04 00 00 00       	mov    eax,0x4
c0021085:	e9 c9 00 00 00       	jmp    c0021153 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002108a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021092:	75 0a                	jne    c002109e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021094:	b8 04 00 00 00       	mov    eax,0x4
c0021099:	e9 b5 00 00 00       	jmp    c0021153 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002109e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00210a6:	75 0a                	jne    c00210b2 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00210a8:	b8 04 00 00 00       	mov    eax,0x4
c00210ad:	e9 a1 00 00 00       	jmp    c0021153 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00210b2:	83 ec 08             	sub    esp,0x8
c00210b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210bc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210c3:	50                   	push   eax
c00210c4:	e8 6b f7 fd ff       	call   c0000834 <strcpy>
c00210c9:	83 c4 10             	add    esp,0x10
c00210cc:	83 ec 08             	sub    esp,0x8
c00210cf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00210d6:	50                   	push   eax
c00210d7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00210de:	e8 87 fd ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c00210e3:	83 c4 10             	add    esp,0x10
c00210e6:	83 ec 08             	sub    esp,0x8
c00210e9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00210ed:	50                   	push   eax
c00210ee:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00210f5:	50                   	push   eax
c00210f6:	e8 8d 50 fe ff       	call   c0006188 <f_stat>
c00210fb:	83 c4 10             	add    esp,0x10
c00210fe:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021105:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002110c:	85 c0                	test   eax,eax
c002110e:	74 07                	je     c0021117 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021110:	83 f8 04             	cmp    eax,0x4
c0021113:	74 32                	je     c0021147 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021115:	eb 37                	jmp    c002114e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021117:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002111b:	0f b6 c0             	movzx  eax,al
c002111e:	83 e0 10             	and    eax,0x10
c0021121:	0f 95 c2             	setne  dl
c0021124:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002112b:	88 10                	mov    BYTE PTR [eax],dl
c002112d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021130:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021134:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002113b:	89 01                	mov    DWORD PTR [ecx],eax
c002113d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021140:	b8 00 00 00 00       	mov    eax,0x0
c0021145:	eb 0c                	jmp    c0021153 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021147:	b8 02 00 00 00       	mov    eax,0x2
c002114c:	eb 05                	jmp    c0021153 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002114e:	b8 01 00 00 00       	mov    eax,0x1
c0021153:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021159:	c3                   	ret    

c002115a <FAT::unlink(char const*)>:
c002115a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021160:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021168:	75 07                	jne    c0021171 <FAT::unlink(char const*)+0x17>
c002116a:	b8 04 00 00 00       	mov    eax,0x4
c002116f:	eb 5c                	jmp    c00211cd <FAT::unlink(char const*)+0x73>
c0021171:	83 ec 08             	sub    esp,0x8
c0021174:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002117b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002117f:	50                   	push   eax
c0021180:	e8 af f6 fd ff       	call   c0000834 <strcpy>
c0021185:	83 c4 10             	add    esp,0x10
c0021188:	83 ec 08             	sub    esp,0x8
c002118b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002118f:	50                   	push   eax
c0021190:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021197:	e8 ce fc ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c002119c:	83 c4 10             	add    esp,0x10
c002119f:	83 ec 0c             	sub    esp,0xc
c00211a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211a6:	50                   	push   eax
c00211a7:	e8 2e 53 fe ff       	call   c00064da <f_unlink>
c00211ac:	83 c4 10             	add    esp,0x10
c00211af:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211b6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211bd:	85 c0                	test   eax,eax
c00211bf:	75 07                	jne    c00211c8 <FAT::unlink(char const*)+0x6e>
c00211c1:	b8 00 00 00 00       	mov    eax,0x0
c00211c6:	eb 05                	jmp    c00211cd <FAT::unlink(char const*)+0x73>
c00211c8:	b8 01 00 00 00       	mov    eax,0x1
c00211cd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211d3:	c3                   	ret    

c00211d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00211d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00211da:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00211e1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00211e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00211ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00211f0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00211f8:	75 0a                	jne    c0021204 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00211fa:	b8 04 00 00 00       	mov    eax,0x4
c00211ff:	e9 1c 01 00 00       	jmp    c0021320 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021204:	83 ec 08             	sub    esp,0x8
c0021207:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002120e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021212:	50                   	push   eax
c0021213:	e8 1c f6 fd ff       	call   c0000834 <strcpy>
c0021218:	83 c4 10             	add    esp,0x10
c002121b:	83 ec 08             	sub    esp,0x8
c002121e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021222:	50                   	push   eax
c0021223:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002122a:	e8 3b fc ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c002122f:	83 c4 10             	add    esp,0x10
c0021232:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c002123a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021242:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021247:	83 e0 01             	and    eax,0x1
c002124a:	74 08                	je     c0021254 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002124c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021254:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021259:	83 e0 02             	and    eax,0x2
c002125c:	74 08                	je     c0021266 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002125e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021266:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002126b:	83 e0 04             	and    eax,0x4
c002126e:	74 08                	je     c0021278 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021270:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021278:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002127d:	83 e0 08             	and    eax,0x8
c0021280:	74 08                	je     c002128a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021282:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002128a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002128f:	83 e0 01             	and    eax,0x1
c0021292:	74 08                	je     c002129c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021294:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002129c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212a1:	83 e0 02             	and    eax,0x2
c00212a4:	74 08                	je     c00212ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00212a6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00212ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212b3:	83 e0 04             	and    eax,0x4
c00212b6:	74 08                	je     c00212c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00212b8:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00212c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00212c5:	83 e0 08             	and    eax,0x8
c00212c8:	74 08                	je     c00212d2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00212ca:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00212d2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00212d9:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00212e0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00212e8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00212f0:	83 ec 04             	sub    esp,0x4
c00212f3:	52                   	push   edx
c00212f4:	50                   	push   eax
c00212f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00212f9:	50                   	push   eax
c00212fa:	e8 7d 58 fe ff       	call   c0006b7c <f_chmod>
c00212ff:	83 c4 10             	add    esp,0x10
c0021302:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021309:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021310:	85 c0                	test   eax,eax
c0021312:	75 07                	jne    c002131b <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021314:	b8 00 00 00 00       	mov    eax,0x0
c0021319:	eb 05                	jmp    c0021320 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002131b:	b8 01 00 00 00       	mov    eax,0x1
c0021320:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021326:	c3                   	ret    
c0021327:	90                   	nop

c0021328 <FAT::rename(char const*, char const*)>:
c0021328:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002132e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021336:	74 0a                	je     c0021342 <FAT::rename(char const*, char const*)+0x1a>
c0021338:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021340:	75 0a                	jne    c002134c <FAT::rename(char const*, char const*)+0x24>
c0021342:	b8 04 00 00 00       	mov    eax,0x4
c0021347:	e9 98 00 00 00       	jmp    c00213e4 <FAT::rename(char const*, char const*)+0xbc>
c002134c:	83 ec 08             	sub    esp,0x8
c002134f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021356:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002135d:	50                   	push   eax
c002135e:	e8 d1 f4 fd ff       	call   c0000834 <strcpy>
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	83 ec 08             	sub    esp,0x8
c0021369:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021370:	50                   	push   eax
c0021371:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021378:	e8 ed fa ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c002137d:	83 c4 10             	add    esp,0x10
c0021380:	83 ec 08             	sub    esp,0x8
c0021383:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002138a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002138e:	50                   	push   eax
c002138f:	e8 a0 f4 fd ff       	call   c0000834 <strcpy>
c0021394:	83 c4 10             	add    esp,0x10
c0021397:	83 ec 08             	sub    esp,0x8
c002139a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002139e:	50                   	push   eax
c002139f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00213a6:	e8 bf fa ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c00213ab:	83 c4 10             	add    esp,0x10
c00213ae:	83 ec 08             	sub    esp,0x8
c00213b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213b5:	50                   	push   eax
c00213b6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00213bd:	50                   	push   eax
c00213be:	e8 c6 54 fe ff       	call   c0006889 <f_rename>
c00213c3:	83 c4 10             	add    esp,0x10
c00213c6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00213cd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00213d4:	85 c0                	test   eax,eax
c00213d6:	75 07                	jne    c00213df <FAT::rename(char const*, char const*)+0xb7>
c00213d8:	b8 00 00 00 00       	mov    eax,0x0
c00213dd:	eb 05                	jmp    c00213e4 <FAT::rename(char const*, char const*)+0xbc>
c00213df:	b8 01 00 00 00       	mov    eax,0x1
c00213e4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00213ea:	c3                   	ret    
c00213eb:	90                   	nop

c00213ec <FAT::mkdir(char const*)>:
c00213ec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00213f2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00213fa:	75 07                	jne    c0021403 <FAT::mkdir(char const*)+0x17>
c00213fc:	b8 04 00 00 00       	mov    eax,0x4
c0021401:	eb 5c                	jmp    c002145f <FAT::mkdir(char const*)+0x73>
c0021403:	83 ec 08             	sub    esp,0x8
c0021406:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002140d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021411:	50                   	push   eax
c0021412:	e8 1d f4 fd ff       	call   c0000834 <strcpy>
c0021417:	83 c4 10             	add    esp,0x10
c002141a:	83 ec 08             	sub    esp,0x8
c002141d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021421:	50                   	push   eax
c0021422:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021429:	e8 3c fa ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c002142e:	83 c4 10             	add    esp,0x10
c0021431:	83 ec 0c             	sub    esp,0xc
c0021434:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021438:	50                   	push   eax
c0021439:	e8 1f 52 fe ff       	call   c000665d <f_mkdir>
c002143e:	83 c4 10             	add    esp,0x10
c0021441:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021448:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002144f:	85 c0                	test   eax,eax
c0021451:	75 07                	jne    c002145a <FAT::mkdir(char const*)+0x6e>
c0021453:	b8 00 00 00 00       	mov    eax,0x0
c0021458:	eb 05                	jmp    c002145f <FAT::mkdir(char const*)+0x73>
c002145a:	b8 01 00 00 00       	mov    eax,0x1
c002145f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021465:	c3                   	ret    

c0021466 <FAT::exists(char const*)>:
c0021466:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002146c:	83 ec 08             	sub    esp,0x8
c002146f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021476:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002147a:	50                   	push   eax
c002147b:	e8 b4 f3 fd ff       	call   c0000834 <strcpy>
c0021480:	83 c4 10             	add    esp,0x10
c0021483:	83 ec 08             	sub    esp,0x8
c0021486:	8d 44 24 08          	lea    eax,[esp+0x8]
c002148a:	50                   	push   eax
c002148b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021492:	e8 d3 f9 ff ff       	call   c0020e6a <FAT::fixFilepath(char*)>
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	83 ec 08             	sub    esp,0x8
c002149d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00214a4:	50                   	push   eax
c00214a5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00214a9:	50                   	push   eax
c00214aa:	e8 d9 4c fe ff       	call   c0006188 <f_stat>
c00214af:	83 c4 10             	add    esp,0x10
c00214b2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00214b9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00214c0:	85 c0                	test   eax,eax
c00214c2:	75 04                	jne    c00214c8 <FAT::exists(char const*)+0x62>
c00214c4:	b0 01                	mov    al,0x1
c00214c6:	eb 02                	jmp    c00214ca <FAT::exists(char const*)+0x64>
c00214c8:	b0 00                	mov    al,0x0
c00214ca:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214d0:	c3                   	ret    
c00214d1:	90                   	nop

c00214d2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00214d2:	b8 08 00 00 00       	mov    eax,0x8
c00214d7:	c3                   	ret    

c00214d8 <ISO9660::seek(void*, unsigned long long)>:
c00214d8:	53                   	push   ebx
c00214d9:	b8 04 00 00 00       	mov    eax,0x4
c00214de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00214e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00214ea:	85 d2                	test   edx,edx
c00214ec:	74 17                	je     c0021505 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214ee:	89 c8                	mov    eax,ecx
c00214f0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00214f3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00214f6:	b8 01 00 00 00       	mov    eax,0x1
c00214fb:	73 08                	jae    c0021505 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00214fd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021500:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021503:	31 c0                	xor    eax,eax
c0021505:	5b                   	pop    ebx
c0021506:	c3                   	ret    
c0021507:	90                   	nop

c0021508 <ISO9660::tell(void*, unsigned long long*)>:
c0021508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002150c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021510:	85 d2                	test   edx,edx
c0021512:	74 12                	je     c0021526 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021514:	85 c0                	test   eax,eax
c0021516:	74 0e                	je     c0021526 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021518:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002151b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002151e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021521:	89 10                	mov    DWORD PTR [eax],edx
c0021523:	31 c0                	xor    eax,eax
c0021525:	c3                   	ret    
c0021526:	b8 04 00 00 00       	mov    eax,0x4
c002152b:	c3                   	ret    

c002152c <ISO9660::getName()>:
c002152c:	b8 50 c7 02 c0       	mov    eax,0xc002c750
c0021531:	c3                   	ret    

c0021532 <ISO9660::stat(void*, unsigned long long*)>:
c0021532:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021536:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002153a:	85 d2                	test   edx,edx
c002153c:	74 12                	je     c0021550 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002153e:	85 c0                	test   eax,eax
c0021540:	74 0e                	je     c0021550 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021542:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021545:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021548:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002154b:	89 10                	mov    DWORD PTR [eax],edx
c002154d:	31 c0                	xor    eax,eax
c002154f:	c3                   	ret    
c0021550:	b8 04 00 00 00       	mov    eax,0x4
c0021555:	c3                   	ret    

c0021556 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021556:	b8 01 00 00 00       	mov    eax,0x1
c002155b:	c3                   	ret    

c002155c <ISO9660::unlink(char const*)>:
c002155c:	b8 01 00 00 00       	mov    eax,0x1
c0021561:	c3                   	ret    

c0021562 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021562:	b8 01 00 00 00       	mov    eax,0x1
c0021567:	c3                   	ret    

c0021568 <ISO9660::rename(char const*, char const*)>:
c0021568:	b8 01 00 00 00       	mov    eax,0x1
c002156d:	c3                   	ret    

c002156e <ISO9660::mkdir(char const*)>:
c002156e:	b8 01 00 00 00       	mov    eax,0x1
c0021573:	c3                   	ret    

c0021574 <ISO9660::close(void*)>:
c0021574:	83 ec 0c             	sub    esp,0xc
c0021577:	b8 04 00 00 00       	mov    eax,0x4
c002157c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021580:	85 d2                	test   edx,edx
c0021582:	74 0e                	je     c0021592 <ISO9660::close(void*)+0x1e>
c0021584:	83 ec 0c             	sub    esp,0xc
c0021587:	52                   	push   edx
c0021588:	e8 c3 e2 fe ff       	call   c000f850 <free>
c002158d:	83 c4 10             	add    esp,0x10
c0021590:	31 c0                	xor    eax,eax
c0021592:	83 c4 0c             	add    esp,0xc
c0021595:	c3                   	ret    

c0021596 <ISO9660::closeDir(void*)>:
c0021596:	83 ec 0c             	sub    esp,0xc
c0021599:	b8 04 00 00 00       	mov    eax,0x4
c002159e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00215a2:	85 d2                	test   edx,edx
c00215a4:	74 0e                	je     c00215b4 <ISO9660::closeDir(void*)+0x1e>
c00215a6:	83 ec 0c             	sub    esp,0xc
c00215a9:	52                   	push   edx
c00215aa:	e8 a1 e2 fe ff       	call   c000f850 <free>
c00215af:	83 c4 10             	add    esp,0x10
c00215b2:	31 c0                	xor    eax,eax
c00215b4:	83 c4 0c             	add    esp,0xc
c00215b7:	c3                   	ret    

c00215b8 <ISO9660::~ISO9660()>:
c00215b8:	83 ec 0c             	sub    esp,0xc
c00215bb:	ba b4 c7 02 c0       	mov    edx,0xc002c7b4
c00215c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c4:	89 10                	mov    DWORD PTR [eax],edx
c00215c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215ca:	83 ec 0c             	sub    esp,0xc
c00215cd:	50                   	push   eax
c00215ce:	e8 29 1b ff ff       	call   c00130fc <Filesystem::~Filesystem()>
c00215d3:	83 c4 10             	add    esp,0x10
c00215d6:	90                   	nop
c00215d7:	83 c4 0c             	add    esp,0xc
c00215da:	c3                   	ret    
c00215db:	90                   	nop

c00215dc <ISO9660::~ISO9660()>:
c00215dc:	83 ec 0c             	sub    esp,0xc
c00215df:	83 ec 0c             	sub    esp,0xc
c00215e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215e6:	e8 cd ff ff ff       	call   c00215b8 <ISO9660::~ISO9660()>
c00215eb:	83 c4 10             	add    esp,0x10
c00215ee:	83 ec 08             	sub    esp,0x8
c00215f1:	6a 08                	push   0x8
c00215f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215f7:	e8 f8 16 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00215fc:	83 c4 10             	add    esp,0x10
c00215ff:	83 c4 0c             	add    esp,0xc
c0021602:	c3                   	ret    

c0021603 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021603:	55                   	push   ebp
c0021604:	31 c9                	xor    ecx,ecx
c0021606:	57                   	push   edi
c0021607:	56                   	push   esi
c0021608:	53                   	push   ebx
c0021609:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002160d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021611:	89 eb                	mov    ebx,ebp
c0021613:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021617:	39 ce                	cmp    esi,ecx
c0021619:	7e 17                	jle    c0021632 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002161b:	31 d2                	xor    edx,edx
c002161d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021621:	7d 13                	jge    c0021636 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021623:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021627:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002162a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002162d:	75 0d                	jne    c002163c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002162f:	42                   	inc    edx
c0021630:	eb eb                	jmp    c002161d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021632:	31 c0                	xor    eax,eax
c0021634:	eb 0a                	jmp    c0021640 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021636:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002163a:	eb 04                	jmp    c0021640 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002163c:	41                   	inc    ecx
c002163d:	43                   	inc    ebx
c002163e:	eb d7                	jmp    c0021617 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021640:	5b                   	pop    ebx
c0021641:	5e                   	pop    esi
c0021642:	5f                   	pop    edi
c0021643:	5d                   	pop    ebp
c0021644:	c3                   	ret    

c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021645:	56                   	push   esi
c0021646:	53                   	push   ebx
c0021647:	52                   	push   edx
c0021648:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002164c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021650:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021654:	39 0d c0 19 03 c0    	cmp    DWORD PTR ds:0xc00319c0,ecx
c002165a:	75 08                	jne    c0021664 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002165c:	38 05 14 d8 02 c0    	cmp    BYTE PTR ds:0xc002d814,al
c0021662:	74 2b                	je     c002168f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021664:	83 ec 0c             	sub    esp,0xc
c0021667:	a2 14 d8 02 c0       	mov    ds:0xc002d814,al
c002166c:	68 e0 19 03 c0       	push   0xc00319e0
c0021671:	0f be c0             	movsx  eax,al
c0021674:	6a 01                	push   0x1
c0021676:	89 0d c0 19 03 c0    	mov    DWORD PTR ds:0xc00319c0,ecx
c002167c:	31 db                	xor    ebx,ebx
c002167e:	53                   	push   ebx
c002167f:	51                   	push   ecx
c0021680:	ff 34 85 9c e7 02 c0 	push   DWORD PTR [eax*4-0x3ffd1864]
c0021687:	e8 5c 4f ff ff       	call   c00165e8 <LogicalDisk::read(unsigned long long, int, void*)>
c002168c:	83 c4 20             	add    esp,0x20
c002168f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021697:	c7 44 24 14 e0 19 03 c0 	mov    DWORD PTR [esp+0x14],0xc00319e0
c002169f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00216a3:	58                   	pop    eax
c00216a4:	5b                   	pop    ebx
c00216a5:	5e                   	pop    esi
c00216a6:	e9 99 f0 fd ff       	jmp    c0000744 <memcpy>
c00216ab:	90                   	nop

c00216ac <ISO9660::tryMount(LogicalDisk*, int)>:
c00216ac:	81 ec 10 08 00 00    	sub    esp,0x810
c00216b2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00216b9:	83 c0 41             	add    eax,0x41
c00216bc:	0f be c0             	movsx  eax,al
c00216bf:	50                   	push   eax
c00216c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216c4:	50                   	push   eax
c00216c5:	6a 10                	push   0x10
c00216c7:	e8 79 ff ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216cc:	83 c4 10             	add    esp,0x10
c00216cf:	31 c0                	xor    eax,eax
c00216d1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00216d6:	75 1d                	jne    c00216f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216d8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00216dd:	75 16                	jne    c00216f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216df:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00216e4:	75 0f                	jne    c00216f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216e6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00216eb:	75 08                	jne    c00216f5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00216ed:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00216f2:	0f 94 c0             	sete   al
c00216f5:	81 c4 0c 08 00 00    	add    esp,0x80c
c00216fb:	c3                   	ret    

c00216fc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00216fc:	55                   	push   ebp
c00216fd:	57                   	push   edi
c00216fe:	56                   	push   esi
c00216ff:	53                   	push   ebx
c0021700:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021706:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002170d:	85 ed                	test   ebp,ebp
c002170f:	0f 84 d6 01 00 00    	je     c00218eb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021715:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002171d:	0f 84 c8 01 00 00    	je     c00218eb <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021723:	b8 01 00 00 00       	mov    eax,0x1
c0021728:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002172c:	0f 85 be 01 00 00    	jne    c00218f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021732:	31 d2                	xor    edx,edx
c0021734:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002173b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002173e:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021745:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021748:	89 04 24             	mov    DWORD PTR [esp],eax
c002174b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002174f:	01 f0                	add    eax,esi
c0021751:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021754:	11 fa                	adc    edx,edi
c0021756:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002175a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002175e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021762:	19 d1                	sbb    ecx,edx
c0021764:	72 0a                	jb     c0021770 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021766:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002176a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002176e:	eb 13                	jmp    c0021783 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021778:	29 f0                	sub    eax,esi
c002177a:	19 fa                	sbb    edx,edi
c002177c:	89 04 24             	mov    DWORD PTR [esp],eax
c002177f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021783:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021786:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021789:	0f a4 c2 0b          	shld   edx,eax,0xb
c002178d:	51                   	push   ecx
c002178e:	c1 e0 0b             	shl    eax,0xb
c0021791:	01 c6                	add    esi,eax
c0021793:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021797:	11 d7                	adc    edi,edx
c0021799:	50                   	push   eax
c002179a:	89 fa                	mov    edx,edi
c002179c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00217a0:	89 f0                	mov    eax,esi
c00217a2:	53                   	push   ebx
c00217a3:	0f ac d0 0b          	shrd   eax,edx,0xb
c00217a7:	50                   	push   eax
c00217a8:	e8 98 fe ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00217ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217b1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00217b4:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00217b8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00217be:	83 c4 10             	add    esp,0x10
c00217c1:	b8 00 08 00 00       	mov    eax,0x800
c00217c6:	29 d0                	sub    eax,edx
c00217c8:	39 c1                	cmp    ecx,eax
c00217ca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00217ce:	83 d9 00             	sbb    ecx,0x0
c00217d1:	7d 1c                	jge    c00217ef <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00217d3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00217d8:	75 12                	jne    c00217ec <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00217da:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00217e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217e7:	e9 fb 00 00 00       	jmp    c00218e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00217ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00217ef:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00217f2:	31 d2                	xor    edx,edx
c00217f4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00217f8:	39 c2                	cmp    edx,eax
c00217fa:	7d 14                	jge    c0021810 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00217fc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021803:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021807:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002180a:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002180d:	42                   	inc    edx
c002180e:	eb e8                	jmp    c00217f8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021810:	89 c3                	mov    ebx,eax
c0021812:	85 c0                	test   eax,eax
c0021814:	79 02                	jns    c0021818 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021816:	31 db                	xor    ebx,ebx
c0021818:	99                   	cdq    
c0021819:	01 c3                	add    ebx,eax
c002181b:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021822:	01 c6                	add    esi,eax
c0021824:	11 d7                	adc    edi,edx
c0021826:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002182a:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002182e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021831:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021835:	29 c6                	sub    esi,eax
c0021837:	19 d7                	sbb    edi,edx
c0021839:	89 34 24             	mov    DWORD PTR [esp],esi
c002183c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021840:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021845:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021848:	b8 00 00 00 00       	mov    eax,0x0
c002184d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021851:	7d 3e                	jge    c0021891 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021853:	52                   	push   edx
c0021854:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021858:	50                   	push   eax
c0021859:	53                   	push   ebx
c002185a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002185e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021862:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021866:	50                   	push   eax
c0021867:	e8 d9 fd ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002186c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021874:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021879:	81 c3 00 08 00 00    	add    ebx,0x800
c002187f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021887:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002188c:	83 c4 10             	add    esp,0x10
c002188f:	eb af                	jmp    c0021840 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021891:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021895:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021898:	74 32                	je     c00218cc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c002189a:	50                   	push   eax
c002189b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002189f:	50                   	push   eax
c00218a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218a4:	50                   	push   eax
c00218a5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00218a9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218ad:	0f ac fe 0b          	shrd   esi,edi,0xb
c00218b1:	56                   	push   esi
c00218b2:	e8 8e fd ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218b7:	83 c4 0c             	add    esp,0xc
c00218ba:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00218be:	8d 44 24 28          	lea    eax,[esp+0x28]
c00218c2:	50                   	push   eax
c00218c3:	53                   	push   ebx
c00218c4:	e8 7b ee fd ff       	call   c0000744 <memcpy>
c00218c9:	83 c4 10             	add    esp,0x10
c00218cc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00218d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00218d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218db:	89 38                	mov    DWORD PTR [eax],edi
c00218dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218e1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00218e4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00218e7:	31 c0                	xor    eax,eax
c00218e9:	eb 05                	jmp    c00218f0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00218eb:	b8 04 00 00 00       	mov    eax,0x4
c00218f0:	81 c4 2c 08 00 00    	add    esp,0x82c
c00218f6:	5b                   	pop    ebx
c00218f7:	5e                   	pop    esi
c00218f8:	5f                   	pop    edi
c00218f9:	5d                   	pop    ebp
c00218fa:	c3                   	ret    
c00218fb:	90                   	nop

c00218fc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00218fc:	55                   	push   ebp
c00218fd:	57                   	push   edi
c00218fe:	56                   	push   esi
c00218ff:	53                   	push   ebx
c0021900:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021906:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002190d:	85 f6                	test   esi,esi
c002190f:	0f 84 64 02 00 00    	je     c0021b79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021915:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002191d:	0f 84 56 02 00 00    	je     c0021b79 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021923:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021926:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021929:	75 0a                	jne    c0021935 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002192b:	b8 07 00 00 00       	mov    eax,0x7
c0021930:	e9 49 02 00 00       	jmp    c0021b7e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021935:	50                   	push   eax
c0021936:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002193a:	50                   	push   eax
c002193b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021942:	53                   	push   ebx
c0021943:	8b 06                	mov    eax,DWORD PTR [esi]
c0021945:	c1 e0 0b             	shl    eax,0xb
c0021948:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c002194b:	c1 e8 0b             	shr    eax,0xb
c002194e:	50                   	push   eax
c002194f:	e8 f1 fc ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021954:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	89 c1                	mov    ecx,eax
c002195c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c002195f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021965:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021968:	84 db                	test   bl,bl
c002196a:	0f 85 90 00 00 00    	jne    c0021a00 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021970:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021976:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002197c:	29 c7                	sub    edi,eax
c002197e:	89 fb                	mov    ebx,edi
c0021980:	c1 fb 1f             	sar    ebx,0x1f
c0021983:	01 f8                	add    eax,edi
c0021985:	11 da                	adc    edx,ebx
c0021987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002198b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002198f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021992:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021995:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021998:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c002199b:	89 04 24             	mov    DWORD PTR [esp],eax
c002199e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00219a2:	89 d8                	mov    eax,ebx
c00219a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00219a7:	ba 00 00 00 00       	mov    edx,0x0
c00219ac:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00219b0:	b8 00 00 00 00       	mov    eax,0x0
c00219b5:	73 0b                	jae    c00219c2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00219b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219be:	29 f8                	sub    eax,edi
c00219c0:	19 da                	sbb    edx,ebx
c00219c2:	89 d3                	mov    ebx,edx
c00219c4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00219c7:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00219ca:	09 c3                	or     ebx,eax
c00219cc:	0f 84 59 ff ff ff    	je     c002192b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00219d2:	55                   	push   ebp
c00219d3:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00219d7:	50                   	push   eax
c00219d8:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00219df:	53                   	push   ebx
c00219e0:	8b 06                	mov    eax,DWORD PTR [esi]
c00219e2:	c1 e0 0b             	shl    eax,0xb
c00219e5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00219e9:	c1 e8 0b             	shr    eax,0xb
c00219ec:	50                   	push   eax
c00219ed:	e8 53 fc ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219f2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00219f5:	83 c4 10             	add    esp,0x10
c00219f8:	25 ff 07 00 00       	and    eax,0x7ff
c00219fd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021a00:	57                   	push   edi
c0021a01:	6a 28                	push   0x28
c0021a03:	6a 00                	push   0x0
c0021a05:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a09:	50                   	push   eax
c0021a0a:	e8 69 ed fd ff       	call   c0000778 <memset>
c0021a0f:	31 d2                	xor    edx,edx
c0021a11:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021a14:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021a1a:	89 f8                	mov    eax,edi
c0021a1c:	83 c0 21             	add    eax,0x21
c0021a1f:	83 d2 00             	adc    edx,0x0
c0021a22:	89 c7                	mov    edi,eax
c0021a24:	89 d5                	mov    ebp,edx
c0021a26:	83 c4 10             	add    esp,0x10
c0021a29:	31 c9                	xor    ecx,ecx
c0021a2b:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021a32:	83 f9 28             	cmp    ecx,0x28
c0021a35:	88 04 24             	mov    BYTE PTR [esp],al
c0021a38:	0f 94 c2             	sete   dl
c0021a3b:	88 d0                	mov    al,dl
c0021a3d:	ba ff 07 00 00       	mov    edx,0x7ff
c0021a42:	39 fa                	cmp    edx,edi
c0021a44:	ba 00 00 00 00       	mov    edx,0x0
c0021a49:	19 ea                	sbb    edx,ebp
c0021a4b:	0f 92 c2             	setb   dl
c0021a4e:	09 c2                	or     edx,eax
c0021a50:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021a54:	0f 94 c0             	sete   al
c0021a57:	08 d0                	or     al,dl
c0021a59:	75 16                	jne    c0021a71 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a5b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021a5f:	74 10                	je     c0021a71 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021a61:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021a64:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021a68:	41                   	inc    ecx
c0021a69:	83 c7 01             	add    edi,0x1
c0021a6c:	83 d5 00             	adc    ebp,0x0
c0021a6f:	eb ba                	jmp    c0021a2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021a71:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021a78:	83 ec 0c             	sub    esp,0xc
c0021a7b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021a7f:	57                   	push   edi
c0021a80:	e8 0f ed fd ff       	call   c0000794 <strlen>
c0021a85:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021a8d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021a91:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021a98:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021a9b:	5a                   	pop    edx
c0021a9c:	25 ff 07 00 00       	and    eax,0x7ff
c0021aa1:	01 c8                	add    eax,ecx
c0021aa3:	59                   	pop    ecx
c0021aa4:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021aaa:	83 e0 02             	and    eax,0x2
c0021aad:	3c 01                	cmp    al,0x1
c0021aaf:	19 c0                	sbb    eax,eax
c0021ab1:	83 c0 02             	add    eax,0x2
c0021ab4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ab8:	57                   	push   edi
c0021ab9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021abd:	50                   	push   eax
c0021abe:	e8 71 ed fd ff       	call   c0000834 <strcpy>
c0021ac3:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ac7:	83 c4 10             	add    esp,0x10
c0021aca:	84 c0                	test   al,al
c0021acc:	75 21                	jne    c0021aef <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021ace:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021ad6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ade:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ae6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021aed:	eb 28                	jmp    c0021b17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021aef:	fe c8                	dec    al
c0021af1:	75 24                	jne    c0021b17 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021af3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021afb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021b03:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021b0b:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021b12:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021b17:	0f b6 fb             	movzx  edi,bl
c0021b1a:	31 db                	xor    ebx,ebx
c0021b1c:	50                   	push   eax
c0021b1d:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021b24:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021b28:	50                   	push   eax
c0021b29:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021b30:	e8 0f ec fd ff       	call   c0000744 <memcpy>
c0021b35:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021b3c:	89 f9                	mov    ecx,edi
c0021b3e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021b44:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021b47:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b4a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021b4d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b50:	83 c4 10             	add    esp,0x10
c0021b53:	39 c7                	cmp    edi,eax
c0021b55:	89 df                	mov    edi,ebx
c0021b57:	19 d7                	sbb    edi,edx
c0021b59:	72 10                	jb     c0021b6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021b5b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021b62:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021b69:	eb 0a                	jmp    c0021b75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021b6b:	29 c8                	sub    eax,ecx
c0021b6d:	19 da                	sbb    edx,ebx
c0021b6f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021b72:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021b75:	31 c0                	xor    eax,eax
c0021b77:	eb 05                	jmp    c0021b7e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b79:	b8 04 00 00 00       	mov    eax,0x4
c0021b7e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021b84:	5b                   	pop    ebx
c0021b85:	5e                   	pop    esi
c0021b86:	5f                   	pop    edi
c0021b87:	5d                   	pop    ebp
c0021b88:	c3                   	ret    

c0021b89 <readRoot(unsigned int*, unsigned int*, char)>:
c0021b89:	81 ec 40 08 00 00    	sub    esp,0x840
c0021b8f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021b97:	50                   	push   eax
c0021b98:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021b9c:	50                   	push   eax
c0021b9d:	6a 10                	push   0x10
c0021b9f:	e8 a1 fa ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ba4:	83 c4 0c             	add    esp,0xc
c0021ba7:	6a 22                	push   0x22
c0021ba9:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021bb0:	50                   	push   eax
c0021bb1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021bb5:	50                   	push   eax
c0021bb6:	e8 89 eb fd ff       	call   c0000744 <memcpy>
c0021bbb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bc2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bc6:	89 10                	mov    DWORD PTR [eax],edx
c0021bc8:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021bcf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021bd3:	89 10                	mov    DWORD PTR [eax],edx
c0021bd5:	b0 01                	mov    al,0x1
c0021bd7:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021bdd:	c3                   	ret    

c0021bde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021bde:	55                   	push   ebp
c0021bdf:	57                   	push   edi
c0021be0:	56                   	push   esi
c0021be1:	53                   	push   ebx
c0021be2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021be8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021bef:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021bf6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021bfa:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021bfe:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021c02:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021c06:	75 03                	jne    c0021c0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c08:	83 c3 02             	add    ebx,0x2
c0021c0b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021c0e:	75 03                	jne    c0021c13 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021c10:	43                   	inc    ebx
c0021c11:	eb f8                	jmp    c0021c0b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021c13:	51                   	push   ecx
c0021c14:	68 00 01 00 00       	push   0x100
c0021c19:	6a 00                	push   0x0
c0021c1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c1f:	50                   	push   eax
c0021c20:	e8 53 eb fd ff       	call   c0000778 <memset>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	31 d2                	xor    edx,edx
c0021c2a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021c2d:	84 c0                	test   al,al
c0021c2f:	74 21                	je     c0021c52 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021c31:	3c 2f                	cmp    al,0x2f
c0021c33:	75 0b                	jne    c0021c40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021c35:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021c39:	bd 01 00 00 00       	mov    ebp,0x1
c0021c3e:	eb 14                	jmp    c0021c54 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021c40:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021c43:	80 f9 19             	cmp    cl,0x19
c0021c46:	77 03                	ja     c0021c4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021c48:	83 e8 20             	sub    eax,0x20
c0021c4b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021c4f:	42                   	inc    edx
c0021c50:	eb d8                	jmp    c0021c2a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021c52:	31 ed                	xor    ebp,ebp
c0021c54:	83 ec 0c             	sub    esp,0xc
c0021c57:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021c5e:	e8 dd db fe ff       	call   c000f840 <malloc>
c0021c63:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021c6a:	89 c6                	mov    esi,eax
c0021c6c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021c72:	c1 ef 0b             	shr    edi,0xb
c0021c75:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021c7c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021c80:	83 c4 10             	add    esp,0x10
c0021c83:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021c88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021c8c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021c93:	74 28                	je     c0021cbd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021c95:	52                   	push   edx
c0021c96:	57                   	push   edi
c0021c97:	50                   	push   eax
c0021c98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021c9c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021ca3:	e8 9d f9 ff ff       	call   c0021645 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cac:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021cb3:	05 00 08 00 00       	add    eax,0x800
c0021cb8:	83 c4 10             	add    esp,0x10
c0021cbb:	eb cb                	jmp    c0021c88 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021cbd:	83 ec 0c             	sub    esp,0xc
c0021cc0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021cc4:	57                   	push   edi
c0021cc5:	e8 ca ea fd ff       	call   c0000794 <strlen>
c0021cca:	50                   	push   eax
c0021ccb:	57                   	push   edi
c0021ccc:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021cd3:	56                   	push   esi
c0021cd4:	e8 2a f9 ff ff       	call   c0021603 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021cd9:	83 c4 20             	add    esp,0x20
c0021cdc:	85 c0                	test   eax,eax
c0021cde:	75 13                	jne    c0021cf3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	56                   	push   esi
c0021ce4:	e8 67 db fe ff       	call   c000f850 <free>
c0021ce9:	83 c4 10             	add    esp,0x10
c0021cec:	31 c0                	xor    eax,eax
c0021cee:	e9 b3 00 00 00       	jmp    c0021da6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021cf3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021cf7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021cfb:	c1 e7 08             	shl    edi,0x8
c0021cfe:	c1 e2 10             	shl    edx,0x10
c0021d01:	09 d7                	or     edi,edx
c0021d03:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021d07:	09 d7                	or     edi,edx
c0021d09:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021d0d:	c1 e2 18             	shl    edx,0x18
c0021d10:	09 d7                	or     edi,edx
c0021d12:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021d16:	89 d1                	mov    ecx,edx
c0021d18:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021d1c:	c1 e1 08             	shl    ecx,0x8
c0021d1f:	c1 e2 10             	shl    edx,0x10
c0021d22:	09 ca                	or     edx,ecx
c0021d24:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021d28:	09 ca                	or     edx,ecx
c0021d2a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021d2e:	c1 e1 18             	shl    ecx,0x18
c0021d31:	09 ca                	or     edx,ecx
c0021d33:	89 e9                	mov    ecx,ebp
c0021d35:	84 c9                	test   cl,cl
c0021d37:	74 3c                	je     c0021d75 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021d39:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021d3d:	83 ec 0c             	sub    esp,0xc
c0021d40:	56                   	push   esi
c0021d41:	e8 0a db fe ff       	call   c000f850 <free>
c0021d46:	83 c4 0c             	add    esp,0xc
c0021d49:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d50:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021d55:	50                   	push   eax
c0021d56:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d5d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021d64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021d68:	52                   	push   edx
c0021d69:	57                   	push   edi
c0021d6a:	53                   	push   ebx
c0021d6b:	e8 6e fe ff ff       	call   c0021bde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021d70:	83 c4 20             	add    esp,0x20
c0021d73:	eb 31                	jmp    c0021da6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021d75:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021d78:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021d7f:	d0 e8                	shr    al,1
c0021d81:	89 3b                	mov    DWORD PTR [ebx],edi
c0021d83:	83 e0 01             	and    eax,0x1
c0021d86:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021d8d:	83 ec 0c             	sub    esp,0xc
c0021d90:	89 13                	mov    DWORD PTR [ebx],edx
c0021d92:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021d99:	89 03                	mov    DWORD PTR [ebx],eax
c0021d9b:	56                   	push   esi
c0021d9c:	e8 af da fe ff       	call   c000f850 <free>
c0021da1:	83 c4 10             	add    esp,0x10
c0021da4:	b0 01                	mov    al,0x1
c0021da6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021dac:	5b                   	pop    ebx
c0021dad:	5e                   	pop    esi
c0021dae:	5f                   	pop    edi
c0021daf:	5d                   	pop    ebp
c0021db0:	c3                   	ret    

c0021db1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021db1:	55                   	push   ebp
c0021db2:	57                   	push   edi
c0021db3:	56                   	push   esi
c0021db4:	53                   	push   ebx
c0021db5:	83 ec 20             	sub    esp,0x20
c0021db8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021dbc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021dc0:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021dc4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021dcc:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021dd4:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021dd9:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ddf:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021de5:	57                   	push   edi
c0021de6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021dea:	50                   	push   eax
c0021deb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021def:	50                   	push   eax
c0021df0:	e8 94 fd ff ff       	call   c0021b89 <readRoot(unsigned int*, unsigned int*, char)>
c0021df5:	5a                   	pop    edx
c0021df6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021dfa:	e8 95 e9 fd ff       	call   c0000794 <strlen>
c0021dff:	83 c4 10             	add    esp,0x10
c0021e02:	83 f8 03             	cmp    eax,0x3
c0021e05:	77 17                	ja     c0021e1e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e0b:	89 03                	mov    DWORD PTR [ebx],eax
c0021e0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021e11:	89 06                	mov    DWORD PTR [esi],eax
c0021e13:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021e1a:	b0 01                	mov    al,0x1
c0021e1c:	eb 19                	jmp    c0021e37 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021e1e:	50                   	push   eax
c0021e1f:	55                   	push   ebp
c0021e20:	57                   	push   edi
c0021e21:	56                   	push   esi
c0021e22:	53                   	push   ebx
c0021e23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e27:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e2f:	e8 aa fd ff ff       	call   c0021bde <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021e34:	83 c4 20             	add    esp,0x20
c0021e37:	83 c4 1c             	add    esp,0x1c
c0021e3a:	5b                   	pop    ebx
c0021e3b:	5e                   	pop    esi
c0021e3c:	5f                   	pop    edi
c0021e3d:	5d                   	pop    ebp
c0021e3e:	c3                   	ret    
c0021e3f:	90                   	nop

c0021e40 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021e40:	57                   	push   edi
c0021e41:	56                   	push   esi
c0021e42:	53                   	push   ebx
c0021e43:	83 ec 10             	sub    esp,0x10
c0021e46:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021e4a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021e4e:	85 ff                	test   edi,edi
c0021e50:	0f 84 9d 00 00 00    	je     c0021ef3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e56:	85 f6                	test   esi,esi
c0021e58:	0f 84 95 00 00 00    	je     c0021ef3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021e5e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021e63:	74 17                	je     c0021e7c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021e65:	83 ec 0c             	sub    esp,0xc
c0021e68:	68 6b c7 02 c0       	push   0xc002c76b
c0021e6d:	e8 62 0f ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0021e72:	83 c4 10             	add    esp,0x10
c0021e75:	b8 03 00 00 00       	mov    eax,0x3
c0021e7a:	eb 7c                	jmp    c0021ef8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021e7c:	83 ec 0c             	sub    esp,0xc
c0021e7f:	6a 1c                	push   0x1c
c0021e81:	e8 ba d9 fe ff       	call   c000f840 <malloc>
c0021e86:	89 07                	mov    DWORD PTR [edi],eax
c0021e88:	89 c3                	mov    ebx,eax
c0021e8a:	58                   	pop    eax
c0021e8b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e8f:	50                   	push   eax
c0021e90:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021e93:	50                   	push   eax
c0021e94:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e98:	50                   	push   eax
c0021e99:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e9d:	50                   	push   eax
c0021e9e:	56                   	push   esi
c0021e9f:	e8 0d ff ff ff       	call   c0021db1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ea4:	83 c4 20             	add    esp,0x20
c0021ea7:	84 c0                	test   al,al
c0021ea9:	74 07                	je     c0021eb2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021eab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021eb0:	74 0b                	je     c0021ebd <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021eb2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021eb6:	b8 01 00 00 00       	mov    eax,0x1
c0021ebb:	eb 3b                	jmp    c0021ef8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ebd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ec1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021ec5:	89 03                	mov    DWORD PTR [ebx],eax
c0021ec7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021ece:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ed2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021ed9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ee0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021ee3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021eea:	8a 06                	mov    al,BYTE PTR [esi]
c0021eec:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021eef:	31 c0                	xor    eax,eax
c0021ef1:	eb 05                	jmp    c0021ef8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021ef3:	b8 04 00 00 00       	mov    eax,0x4
c0021ef8:	83 c4 10             	add    esp,0x10
c0021efb:	5b                   	pop    ebx
c0021efc:	5e                   	pop    esi
c0021efd:	5f                   	pop    edi
c0021efe:	c3                   	ret    
c0021eff:	90                   	nop

c0021f00 <ISO9660::exists(char const*)>:
c0021f00:	83 ec 28             	sub    esp,0x28
c0021f03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f07:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021f0b:	52                   	push   edx
c0021f0c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021f0f:	52                   	push   edx
c0021f10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f14:	52                   	push   edx
c0021f15:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021f19:	52                   	push   edx
c0021f1a:	50                   	push   eax
c0021f1b:	e8 91 fe ff ff       	call   c0021db1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f20:	83 c4 3c             	add    esp,0x3c
c0021f23:	c3                   	ret    

c0021f24 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021f24:	56                   	push   esi
c0021f25:	53                   	push   ebx
c0021f26:	83 ec 14             	sub    esp,0x14
c0021f29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021f2d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021f31:	85 db                	test   ebx,ebx
c0021f33:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021f37:	0f 94 c2             	sete   dl
c0021f3a:	85 f6                	test   esi,esi
c0021f3c:	0f 94 c0             	sete   al
c0021f3f:	08 c2                	or     dl,al
c0021f41:	75 68                	jne    c0021fab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f43:	85 c9                	test   ecx,ecx
c0021f45:	74 64                	je     c0021fab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021f47:	83 ec 0c             	sub    esp,0xc
c0021f4a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021f4d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021f57:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f5e:	50                   	push   eax
c0021f5f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021f62:	50                   	push   eax
c0021f63:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f67:	50                   	push   eax
c0021f68:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f6c:	50                   	push   eax
c0021f6d:	51                   	push   ecx
c0021f6e:	e8 3e fe ff ff       	call   c0021db1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021f73:	83 c4 20             	add    esp,0x20
c0021f76:	ba 01 00 00 00       	mov    edx,0x1
c0021f7b:	84 c0                	test   al,al
c0021f7d:	74 31                	je     c0021fb0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021f8a:	89 03                	mov    DWORD PTR [ebx],eax
c0021f8c:	ba 00 00 00 00       	mov    edx,0x0
c0021f91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f95:	85 c0                	test   eax,eax
c0021f97:	0f 95 06             	setne  BYTE PTR [esi]
c0021f9a:	74 14                	je     c0021fb0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021f9c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021fa2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021fa9:	eb 05                	jmp    c0021fb0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021fab:	ba 04 00 00 00       	mov    edx,0x4
c0021fb0:	83 c4 14             	add    esp,0x14
c0021fb3:	89 d0                	mov    eax,edx
c0021fb5:	5b                   	pop    ebx
c0021fb6:	5e                   	pop    esi
c0021fb7:	c3                   	ret    

c0021fb8 <ISO9660::openDir(char const*, void**)>:
c0021fb8:	57                   	push   edi
c0021fb9:	56                   	push   esi
c0021fba:	53                   	push   ebx
c0021fbb:	83 ec 10             	sub    esp,0x10
c0021fbe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021fc2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021fc6:	85 ff                	test   edi,edi
c0021fc8:	0f 84 95 00 00 00    	je     c0022063 <ISO9660::openDir(char const*, void**)+0xab>
c0021fce:	85 f6                	test   esi,esi
c0021fd0:	0f 84 8d 00 00 00    	je     c0022063 <ISO9660::openDir(char const*, void**)+0xab>
c0021fd6:	83 ec 0c             	sub    esp,0xc
c0021fd9:	6a 1c                	push   0x1c
c0021fdb:	e8 60 d8 fe ff       	call   c000f840 <malloc>
c0021fe0:	89 07                	mov    DWORD PTR [edi],eax
c0021fe2:	89 c3                	mov    ebx,eax
c0021fe4:	59                   	pop    ecx
c0021fe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021fe9:	50                   	push   eax
c0021fea:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021fed:	50                   	push   eax
c0021fee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff2:	50                   	push   eax
c0021ff3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ff7:	50                   	push   eax
c0021ff8:	56                   	push   esi
c0021ff9:	e8 b3 fd ff ff       	call   c0021db1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ffe:	83 c4 20             	add    esp,0x20
c0022001:	84 c0                	test   al,al
c0022003:	74 07                	je     c002200c <ISO9660::openDir(char const*, void**)+0x54>
c0022005:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002200a:	75 21                	jne    c002202d <ISO9660::openDir(char const*, void**)+0x75>
c002200c:	0f b6 c0             	movzx  eax,al
c002200f:	52                   	push   edx
c0022010:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022014:	50                   	push   eax
c0022015:	68 91 c7 02 c0       	push   0xc002c791
c002201a:	e8 b5 0d ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002201f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022023:	83 c4 10             	add    esp,0x10
c0022026:	b8 01 00 00 00       	mov    eax,0x1
c002202b:	eb 3b                	jmp    c0022068 <ISO9660::openDir(char const*, void**)+0xb0>
c002202d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022031:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022035:	89 03                	mov    DWORD PTR [ebx],eax
c0022037:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002203e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022042:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022049:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022050:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022053:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002205a:	8a 06                	mov    al,BYTE PTR [esi]
c002205c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002205f:	31 c0                	xor    eax,eax
c0022061:	eb 05                	jmp    c0022068 <ISO9660::openDir(char const*, void**)+0xb0>
c0022063:	b8 04 00 00 00       	mov    eax,0x4
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	5b                   	pop    ebx
c002206c:	5e                   	pop    esi
c002206d:	5f                   	pop    edi
c002206e:	c3                   	ret    
c002206f:	90                   	nop

c0022070 <ISO9660::ISO9660()>:
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022077:	83 ec 0c             	sub    esp,0xc
c002207a:	50                   	push   eax
c002207b:	e8 58 10 ff ff       	call   c00130d8 <Filesystem::Filesystem()>
c0022080:	83 c4 10             	add    esp,0x10
c0022083:	ba b4 c7 02 c0       	mov    edx,0xc002c7b4
c0022088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208c:	89 10                	mov    DWORD PTR [eax],edx
c002208e:	90                   	nop
c002208f:	83 c4 0c             	add    esp,0xc
c0022092:	c3                   	ret    
c0022093:	90                   	nop

c0022094 <SoundChannel::~SoundChannel()>:
c0022094:	83 ec 0c             	sub    esp,0xc
c0022097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002209b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002209e:	83 ec 0c             	sub    esp,0xc
c00220a1:	50                   	push   eax
c00220a2:	e8 a9 d7 fe ff       	call   c000f850 <free>
c00220a7:	83 c4 10             	add    esp,0x10
c00220aa:	90                   	nop
c00220ab:	83 c4 0c             	add    esp,0xc
c00220ae:	c3                   	ret    
c00220af:	90                   	nop

c00220b0 <SoundChannel::setSpeed(float)>:
c00220b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00220b8:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00220bb:	c3                   	ret    

c00220bc <SoundChannel::getSpeed()>:
c00220bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00220c3:	c3                   	ret    

c00220c4 <SoundChannel::setVolume(int)>:
c00220c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c8:	83 f8 64             	cmp    eax,0x64
c00220cb:	7e 05                	jle    c00220d2 <SoundChannel::setVolume(int)+0xe>
c00220cd:	b8 64 00 00 00       	mov    eax,0x64
c00220d2:	85 c0                	test   eax,eax
c00220d4:	79 02                	jns    c00220d8 <SoundChannel::setVolume(int)+0x14>
c00220d6:	31 c0                	xor    eax,eax
c00220d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00220dc:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00220df:	c3                   	ret    

c00220e0 <SoundChannel::getVolume()>:
c00220e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220e4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00220e7:	c3                   	ret    

c00220e8 <SoundChannel::pause()>:
c00220e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220ec:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00220f0:	c3                   	ret    
c00220f1:	90                   	nop

c00220f2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00220f2:	83 ec 1c             	sub    esp,0x1c
c00220f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00220f9:	e8 ea ff ff ff       	call   c00220e8 <SoundChannel::pause()>
c00220fe:	83 c4 04             	add    esp,0x4
c0022101:	6a 50                	push   0x50
c0022103:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022107:	e8 b8 ff ff ff       	call   c00220c4 <SoundChannel::setVolume(int)>
c002210c:	83 c4 08             	add    esp,0x8
c002210f:	a1 2c c8 02 c0       	mov    eax,ds:0xc002c82c
c0022114:	50                   	push   eax
c0022115:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022119:	e8 92 ff ff ff       	call   c00220b0 <SoundChannel::setSpeed(float)>
c002211e:	83 c4 08             	add    esp,0x8
c0022121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022125:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022129:	89 10                	mov    DWORD PTR [eax],edx
c002212b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002212f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022133:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002213a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002213e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022141:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022146:	75 23                	jne    c002216b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002214c:	8b 10                	mov    edx,DWORD PTR [eax]
c002214e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022152:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022155:	0f af c2             	imul   eax,edx
c0022158:	85 c0                	test   eax,eax
c002215a:	79 03                	jns    c002215f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002215c:	83 c0 03             	add    eax,0x3
c002215f:	c1 f8 02             	sar    eax,0x2
c0022162:	05 a0 0f 00 00       	add    eax,0xfa0
c0022167:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002216b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002216f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022173:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022176:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002217a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022181:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022185:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002218c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022190:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022193:	c1 e0 02             	shl    eax,0x2
c0022196:	83 ec 0c             	sub    esp,0xc
c0022199:	50                   	push   eax
c002219a:	e8 a1 d6 fe ff       	call   c000f840 <malloc>
c002219f:	83 c4 10             	add    esp,0x10
c00221a2:	89 c2                	mov    edx,eax
c00221a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00221ab:	83 ec 04             	sub    esp,0x4
c00221ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00221b2:	50                   	push   eax
c00221b3:	6a 01                	push   0x1
c00221b5:	6a 04                	push   0x4
c00221b7:	e8 e3 69 fe ff       	call   c0008b9f <src_new>
c00221bc:	83 c4 10             	add    esp,0x10
c00221bf:	89 c2                	mov    edx,eax
c00221c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00221c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221cc:	85 c0                	test   eax,eax
c00221ce:	74 10                	je     c00221e0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00221d0:	83 ec 0c             	sub    esp,0xc
c00221d3:	68 10 c8 02 c0       	push   0xc002c810
c00221d8:	e8 a0 82 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00221dd:	83 c4 10             	add    esp,0x10
c00221e0:	a0 e0 25 03 c0       	mov    al,ds:0xc00325e0
c00221e5:	83 f0 01             	xor    eax,0x1
c00221e8:	84 c0                	test   al,al
c00221ea:	74 57                	je     c0022243 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00221ec:	a1 30 c8 02 c0       	mov    eax,ds:0xc002c830
c00221f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221fd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022205:	7f 35                	jg     c002223c <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022207:	83 ec 0c             	sub    esp,0xc
c002220a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002220e:	e8 94 4f 00 00       	call   c00271a7 <__floatsisf>
c0022213:	83 c4 10             	add    esp,0x10
c0022216:	8b 15 30 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c830
c002221c:	83 ec 08             	sub    esp,0x8
c002221f:	52                   	push   edx
c0022220:	50                   	push   eax
c0022221:	e8 93 4b 00 00       	call   c0026db9 <__mulsf3>
c0022226:	83 c4 10             	add    esp,0x10
c0022229:	89 c2                	mov    edx,eax
c002222b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002222f:	89 14 85 e0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde20],edx
c0022236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002223a:	eb c1                	jmp    c00221fd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002223c:	c6 05 e0 25 03 c0 01 	mov    BYTE PTR ds:0xc00325e0,0x1
c0022243:	90                   	nop
c0022244:	83 c4 1c             	add    esp,0x1c
c0022247:	c3                   	ret    

c0022248 <SoundChannel::play()>:
c0022248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022250:	c3                   	ret    
c0022251:	90                   	nop

c0022252 <SoundChannel::paused()>:
c0022252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022256:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022259:	c3                   	ret    

c002225a <SoundChannel::getSampleRate()>:
c002225a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002225e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022260:	c3                   	ret    
c0022261:	90                   	nop

c0022262 <SoundChannel::getBits()>:
c0022262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022266:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022269:	c3                   	ret    

c002226a <SoundChannel::getBufferUsed()>:
c002226a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002226e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022271:	c3                   	ret    

c0022272 <SoundChannel::getBufferSize()>:
c0022272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022276:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022279:	c3                   	ret    

c002227a <SoundChannel::unbuffer(float*, int, int)>:
c002227a:	56                   	push   esi
c002227b:	53                   	push   ebx
c002227c:	83 ec 40             	sub    esp,0x40
c002227f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022283:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022286:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002228a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002228d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022291:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022295:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022299:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002229d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00222a5:	e8 fd 4e 00 00       	call   c00271a7 <__floatsisf>
c00222aa:	5a                   	pop    edx
c00222ab:	89 c6                	mov    esi,eax
c00222ad:	ff 33                	push   DWORD PTR [ebx]
c00222af:	e8 f3 4e 00 00       	call   c00271a7 <__floatsisf>
c00222b4:	59                   	pop    ecx
c00222b5:	5a                   	pop    edx
c00222b6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00222b9:	50                   	push   eax
c00222ba:	e8 fa 4a 00 00       	call   c0026db9 <__mulsf3>
c00222bf:	59                   	pop    ecx
c00222c0:	5a                   	pop    edx
c00222c1:	50                   	push   eax
c00222c2:	56                   	push   esi
c00222c3:	e8 b4 4c 00 00       	call   c0026f7c <__divsf3>
c00222c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00222cb:	e8 a7 61 00 00       	call   c0028477 <__extendsfdf2>
c00222d0:	59                   	pop    ecx
c00222d1:	5e                   	pop    esi
c00222d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00222d6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00222da:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00222e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00222e6:	50                   	push   eax
c00222e7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00222ea:	e8 a5 64 fe ff       	call   c0008794 <src_process>
c00222ef:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00222f3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00222f6:	83 c4 0c             	add    esp,0xc
c00222f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00222fc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00222ff:	29 d0                	sub    eax,edx
c0022301:	c1 e0 02             	shl    eax,0x2
c0022304:	50                   	push   eax
c0022305:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022308:	50                   	push   eax
c0022309:	51                   	push   ecx
c002230a:	e8 6d e3 fd ff       	call   c000067c <memmove>
c002230f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022313:	83 c4 44             	add    esp,0x44
c0022316:	5b                   	pop    ebx
c0022317:	5e                   	pop    esi
c0022318:	c3                   	ret    
c0022319:	90                   	nop

c002231a <SoundChannel::buffer8(unsigned char*, int)>:
c002231a:	55                   	push   ebp
c002231b:	57                   	push   edi
c002231c:	56                   	push   esi
c002231d:	53                   	push   ebx
c002231e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022322:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022326:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022329:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002232d:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022330:	74 7a                	je     c00223ac <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022332:	85 ff                	test   edi,edi
c0022334:	7e 76                	jle    c00223ac <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022336:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002233a:	8d 70 01             	lea    esi,[eax+0x1]
c002233d:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022340:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022343:	8b 1c 9d e0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde20]
c002234a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002234d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022350:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022353:	74 5e                	je     c00223b3 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022355:	83 ff 01             	cmp    edi,0x1
c0022358:	74 4b                	je     c00223a5 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002235a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002235e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022361:	8d 70 01             	lea    esi,[eax+0x1]
c0022364:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022367:	8b 1c 9d e0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde20]
c002236e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022371:	b8 02 00 00 00       	mov    eax,0x2
c0022376:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022379:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002237c:	75 23                	jne    c00223a1 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002237e:	eb 27                	jmp    c00223a7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022380:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022385:	8d 71 01             	lea    esi,[ecx+0x1]
c0022388:	40                   	inc    eax
c0022389:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002238c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002238f:	8b 1c 9d e0 21 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcde20]
c0022396:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022399:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002239c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002239f:	74 06                	je     c00223a7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00223a1:	39 c7                	cmp    edi,eax
c00223a3:	75 db                	jne    c0022380 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00223a5:	89 f8                	mov    eax,edi
c00223a7:	5b                   	pop    ebx
c00223a8:	5e                   	pop    esi
c00223a9:	5f                   	pop    edi
c00223aa:	5d                   	pop    ebp
c00223ab:	c3                   	ret    
c00223ac:	5b                   	pop    ebx
c00223ad:	31 c0                	xor    eax,eax
c00223af:	5e                   	pop    esi
c00223b0:	5f                   	pop    edi
c00223b1:	5d                   	pop    ebp
c00223b2:	c3                   	ret    
c00223b3:	b8 01 00 00 00       	mov    eax,0x1
c00223b8:	eb ed                	jmp    c00223a7 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00223ba <SoundDevice::SoundDevice(char const*)>:
c00223ba:	83 ec 1c             	sub    esp,0x1c
c00223bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c1:	83 ec 08             	sub    esp,0x8
c00223c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00223c8:	50                   	push   eax
c00223c9:	e8 1c 20 ff ff       	call   c00143ea <Device::Device(char const*)>
c00223ce:	83 c4 10             	add    esp,0x10
c00223d1:	ba 3c c8 02 c0       	mov    edx,0xc002c83c
c00223d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223da:	89 10                	mov    DWORD PTR [eax],edx
c00223dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00223ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00223f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022400:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022405:	7f 19                	jg     c0022420 <SoundDevice::SoundDevice(char const*)+0x66>
c0022407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002240b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002240f:	83 c2 54             	add    edx,0x54
c0022412:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c002241a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002241e:	eb e0                	jmp    c0022400 <SoundDevice::SoundDevice(char const*)+0x46>
c0022420:	90                   	nop
c0022421:	83 c4 1c             	add    esp,0x1c
c0022424:	c3                   	ret    
c0022425:	90                   	nop

c0022426 <SoundDevice::~SoundDevice()>:
c0022426:	53                   	push   ebx
c0022427:	83 ec 18             	sub    esp,0x18
c002242a:	ba 3c c8 02 c0       	mov    edx,0xc002c83c
c002242f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022433:	89 10                	mov    DWORD PTR [eax],edx
c0022435:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002243d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022442:	7f 46                	jg     c002248a <SoundDevice::~SoundDevice()+0x64>
c0022444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002244c:	83 c2 54             	add    edx,0x54
c002244f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022453:	85 c0                	test   eax,eax
c0022455:	74 2d                	je     c0022484 <SoundDevice::~SoundDevice()+0x5e>
c0022457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002245b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002245f:	83 c2 54             	add    edx,0x54
c0022462:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022466:	85 db                	test   ebx,ebx
c0022468:	74 1a                	je     c0022484 <SoundDevice::~SoundDevice()+0x5e>
c002246a:	83 ec 0c             	sub    esp,0xc
c002246d:	53                   	push   ebx
c002246e:	e8 21 fc ff ff       	call   c0022094 <SoundChannel::~SoundChannel()>
c0022473:	83 c4 10             	add    esp,0x10
c0022476:	83 ec 08             	sub    esp,0x8
c0022479:	6a 2c                	push   0x2c
c002247b:	53                   	push   ebx
c002247c:	e8 73 08 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0022481:	83 c4 10             	add    esp,0x10
c0022484:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022488:	eb b3                	jmp    c002243d <SoundDevice::~SoundDevice()+0x17>
c002248a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002248e:	83 ec 0c             	sub    esp,0xc
c0022491:	50                   	push   eax
c0022492:	e8 35 1c ff ff       	call   c00140cc <Device::~Device()>
c0022497:	83 c4 10             	add    esp,0x10
c002249a:	90                   	nop
c002249b:	83 c4 18             	add    esp,0x18
c002249e:	5b                   	pop    ebx
c002249f:	c3                   	ret    

c00224a0 <SoundDevice::~SoundDevice()>:
c00224a0:	83 ec 0c             	sub    esp,0xc
c00224a3:	83 ec 0c             	sub    esp,0xc
c00224a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224aa:	e8 77 ff ff ff       	call   c0022426 <SoundDevice::~SoundDevice()>
c00224af:	83 c4 10             	add    esp,0x10
c00224b2:	83 ec 08             	sub    esp,0x8
c00224b5:	68 e4 01 00 00       	push   0x1e4
c00224ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224be:	e8 31 08 ff ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00224c3:	83 c4 10             	add    esp,0x10
c00224c6:	83 c4 0c             	add    esp,0xc
c00224c9:	c3                   	ret    

c00224ca <SoundDevice::getFreeChannelNum()>:
c00224ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00224ce:	31 c0                	xor    eax,eax
c00224d0:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00224d8:	74 09                	je     c00224e3 <SoundDevice::getFreeChannelNum()+0x19>
c00224da:	40                   	inc    eax
c00224db:	83 f8 20             	cmp    eax,0x20
c00224de:	75 f0                	jne    c00224d0 <SoundDevice::getFreeChannelNum()+0x6>
c00224e0:	83 c8 ff             	or     eax,0xffffffff
c00224e3:	c3                   	ret    

c00224e4 <SoundDevice::addChannel(SoundChannel*)>:
c00224e4:	56                   	push   esi
c00224e5:	53                   	push   ebx
c00224e6:	51                   	push   ecx
c00224e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00224eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00224ef:	53                   	push   ebx
c00224f0:	e8 d5 ff ff ff       	call   c00224ca <SoundDevice::getFreeChannelNum()>
c00224f5:	5a                   	pop    edx
c00224f6:	83 f8 ff             	cmp    eax,0xffffffff
c00224f9:	74 51                	je     c002254c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224fb:	85 f6                	test   esi,esi
c00224fd:	74 4d                	je     c002254c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00224ff:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022506:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002250d:	75 30                	jne    c002253f <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002250f:	83 ec 0c             	sub    esp,0xc
c0022512:	56                   	push   esi
c0022513:	e8 42 fd ff ff       	call   c002225a <SoundChannel::getSampleRate()>
c0022518:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002251e:	89 34 24             	mov    DWORD PTR [esp],esi
c0022521:	e8 3c fd ff ff       	call   c0022262 <SoundChannel::getBits()>
c0022526:	83 c4 0c             	add    esp,0xc
c0022529:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002252f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022531:	50                   	push   eax
c0022532:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022538:	53                   	push   ebx
c0022539:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002253c:	83 c4 10             	add    esp,0x10
c002253f:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022545:	b8 01 00 00 00       	mov    eax,0x1
c002254a:	eb 03                	jmp    c002254f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002254c:	83 c8 ff             	or     eax,0xffffffff
c002254f:	5a                   	pop    edx
c0022550:	5b                   	pop    ebx
c0022551:	5e                   	pop    esi
c0022552:	c3                   	ret    
c0022553:	90                   	nop

c0022554 <SoundDevice::removeChannel(int)>:
c0022554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002255c:	83 fa 1f             	cmp    edx,0x1f
c002255f:	77 23                	ja     c0022584 <SoundDevice::removeChannel(int)+0x30>
c0022561:	8d 14 90             	lea    edx,[eax+edx*4]
c0022564:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002256b:	74 17                	je     c0022584 <SoundDevice::removeChannel(int)+0x30>
c002256d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022577:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002257d:	75 05                	jne    c0022584 <SoundDevice::removeChannel(int)+0x30>
c002257f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022581:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022584:	c3                   	ret    
c0022585:	90                   	nop

c0022586 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022586:	57                   	push   edi
c0022587:	56                   	push   esi
c0022588:	53                   	push   ebx
c0022589:	31 db                	xor    ebx,ebx
c002258b:	83 ec 10             	sub    esp,0x10
c002258e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022592:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022596:	0f 8d cb 00 00 00    	jge    c0022667 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002259c:	83 ec 0c             	sub    esp,0xc
c002259f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225a3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00225a6:	e8 cc 5e 00 00       	call   c0028477 <__extendsfdf2>
c00225ab:	83 c4 10             	add    esp,0x10
c00225ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225b6:	68 00 00 f0 3f       	push   0x3ff00000
c00225bb:	6a 00                	push   0x0
c00225bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225c5:	e8 39 4e 00 00       	call   c0027403 <__adddf3>
c00225ca:	83 c4 10             	add    esp,0x10
c00225cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225d5:	68 00 00 e0 3f       	push   0x3fe00000
c00225da:	6a 00                	push   0x0
c00225dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225e4:	e8 97 54 00 00       	call   c0027a80 <__muldf3>
c00225e9:	83 c4 10             	add    esp,0x10
c00225ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225f0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00225f4:	68 00 00 60 40       	push   0x40600000
c00225f9:	6a 00                	push   0x0
c00225fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022603:	e8 78 54 00 00       	call   c0027a80 <__muldf3>
c0022608:	59                   	pop    ecx
c0022609:	5f                   	pop    edi
c002260a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002260e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022612:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022616:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002261a:	e8 34 5d 00 00       	call   c0028353 <__truncdfsf2>
c002261f:	5a                   	pop    edx
c0022620:	89 c7                	mov    edi,eax
c0022622:	59                   	pop    ecx
c0022623:	68 00 00 fe 42       	push   0x42fe0000
c0022628:	50                   	push   eax
c0022629:	e8 cf 4d 00 00       	call   c00273fd <__gesf2>
c002262e:	83 c4 10             	add    esp,0x10
c0022631:	85 c0                	test   eax,eax
c0022633:	78 06                	js     c002263b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022635:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022639:	eb 26                	jmp    c0022661 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002263b:	50                   	push   eax
c002263c:	50                   	push   eax
c002263d:	6a 00                	push   0x0
c002263f:	57                   	push   edi
c0022640:	e8 bc 4d 00 00       	call   c0027401 <__lesf2>
c0022645:	83 c4 10             	add    esp,0x10
c0022648:	85 c0                	test   eax,eax
c002264a:	7f 06                	jg     c0022652 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002264c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022650:	eb 0f                	jmp    c0022661 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022652:	83 ec 0c             	sub    esp,0xc
c0022655:	57                   	push   edi
c0022656:	e8 b1 5e 00 00       	call   c002850c <lrintf>
c002265b:	83 c4 10             	add    esp,0x10
c002265e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022661:	43                   	inc    ebx
c0022662:	e9 2b ff ff ff       	jmp    c0022592 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022667:	83 c4 10             	add    esp,0x10
c002266a:	5b                   	pop    ebx
c002266b:	5e                   	pop    esi
c002266c:	5f                   	pop    edi
c002266d:	c3                   	ret    

c002266e <SoundDevice::getAudio(int, float*, float*)>:
c002266e:	55                   	push   ebp
c002266f:	57                   	push   edi
c0022670:	56                   	push   esi
c0022671:	53                   	push   ebx
c0022672:	31 db                	xor    ebx,ebx
c0022674:	83 ec 20             	sub    esp,0x20
c0022677:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002267b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002267f:	c1 e0 02             	shl    eax,0x2
c0022682:	50                   	push   eax
c0022683:	6a 00                	push   0x0
c0022685:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022689:	e8 ea e0 fd ff       	call   c0000778 <memset>
c002268e:	83 c4 10             	add    esp,0x10
c0022691:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022695:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002269c:	85 c0                	test   eax,eax
c002269e:	0f 84 d7 00 00 00    	je     c002277b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226a4:	83 ec 0c             	sub    esp,0xc
c00226a7:	50                   	push   eax
c00226a8:	e8 a5 fb ff ff       	call   c0022252 <SoundChannel::paused()>
c00226ad:	83 c4 10             	add    esp,0x10
c00226b0:	84 c0                	test   al,al
c00226b2:	0f 85 c3 00 00 00    	jne    c002277b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226b8:	83 ec 0c             	sub    esp,0xc
c00226bb:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226c2:	e8 19 fa ff ff       	call   c00220e0 <SoundChannel::getVolume()>
c00226c7:	83 c4 10             	add    esp,0x10
c00226ca:	85 c0                	test   eax,eax
c00226cc:	0f 84 a9 00 00 00    	je     c002277b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00226d2:	83 ec 0c             	sub    esp,0xc
c00226d5:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00226dc:	e8 ff f9 ff ff       	call   c00220e0 <SoundChannel::getVolume()>
c00226e1:	83 ec 0c             	sub    esp,0xc
c00226e4:	50                   	push   eax
c00226e5:	e8 bd 4a 00 00       	call   c00271a7 <__floatsisf>
c00226ea:	59                   	pop    ecx
c00226eb:	5d                   	pop    ebp
c00226ec:	31 ed                	xor    ebp,ebp
c00226ee:	68 00 00 c8 42       	push   0x42c80000
c00226f3:	50                   	push   eax
c00226f4:	e8 83 48 00 00       	call   c0026f7c <__divsf3>
c00226f9:	83 c4 10             	add    esp,0x10
c00226fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022700:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022704:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002270a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002270e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022715:	e8 60 fb ff ff       	call   c002227a <SoundChannel::unbuffer(float*, int, int)>
c002271a:	83 c4 20             	add    esp,0x20
c002271d:	89 c1                	mov    ecx,eax
c002271f:	39 cd                	cmp    ebp,ecx
c0022721:	7d 52                	jge    c0022775 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022723:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022727:	50                   	push   eax
c0022728:	50                   	push   eax
c0022729:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002272d:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022730:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022734:	e8 80 46 00 00       	call   c0026db9 <__mulsf3>
c0022739:	5a                   	pop    edx
c002273a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002273e:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022744:	e8 5e 4a 00 00       	call   c00271a7 <__floatsisf>
c0022749:	59                   	pop    ecx
c002274a:	5a                   	pop    edx
c002274b:	50                   	push   eax
c002274c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022750:	e8 27 48 00 00       	call   c0026f7c <__divsf3>
c0022755:	59                   	pop    ecx
c0022756:	5a                   	pop    edx
c0022757:	50                   	push   eax
c0022758:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002275c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002275f:	e8 32 43 00 00       	call   c0026a96 <__addsf3>
c0022764:	83 c4 10             	add    esp,0x10
c0022767:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002276b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002276f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022772:	45                   	inc    ebp
c0022773:	eb aa                	jmp    c002271f <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022775:	39 cf                	cmp    edi,ecx
c0022777:	7e 02                	jle    c002277b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022779:	89 cf                	mov    edi,ecx
c002277b:	43                   	inc    ebx
c002277c:	83 fb 20             	cmp    ebx,0x20
c002277f:	0f 85 10 ff ff ff    	jne    c0022695 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022785:	83 c4 1c             	add    esp,0x1c
c0022788:	89 f8                	mov    eax,edi
c002278a:	5b                   	pop    ebx
c002278b:	5e                   	pop    esi
c002278c:	5f                   	pop    edi
c002278d:	5d                   	pop    ebp
c002278e:	c3                   	ret    
c002278f:	90                   	nop

c0022790 <PCI::open(int, int, void*)>:
c0022790:	83 ec 18             	sub    esp,0x18
c0022793:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022797:	8b 10                	mov    edx,DWORD PTR [eax]
c0022799:	50                   	push   eax
c002279a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002279d:	31 c0                	xor    eax,eax
c002279f:	83 c4 1c             	add    esp,0x1c
c00227a2:	c3                   	ret    
c00227a3:	90                   	nop

c00227a4 <PCI::close(int, int, void*)>:
c00227a4:	31 c0                	xor    eax,eax
c00227a6:	c3                   	ret    
c00227a7:	90                   	nop

c00227a8 <PCI::PCI()>:
c00227a8:	83 ec 0c             	sub    esp,0xc
c00227ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227af:	83 ec 08             	sub    esp,0x8
c00227b2:	68 6c c8 02 c0       	push   0xc002c86c
c00227b7:	50                   	push   eax
c00227b8:	e8 b1 12 ff ff       	call   c0013a6e <Bus::Bus(char const*)>
c00227bd:	83 c4 10             	add    esp,0x10
c00227c0:	ba d8 c8 02 c0       	mov    edx,0xc002c8d8
c00227c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227c9:	89 10                	mov    DWORD PTR [eax],edx
c00227cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227d5:	0f b6 d0             	movzx  edx,al
c00227d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227dc:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00227e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00227ed:	0f b6 d0             	movzx  edx,al
c00227f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227f4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00227f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022803:	8d 50 01             	lea    edx,[eax+0x1]
c0022806:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002280a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022810:	0f b6 d0             	movzx  edx,al
c0022813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022817:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002281b:	83 c9 c0             	or     ecx,0xffffffc0
c002281e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022822:	90                   	nop
c0022823:	83 c4 0c             	add    esp,0xc
c0022826:	c3                   	ret    
c0022827:	90                   	nop

c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022828:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002282c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022831:	89 ca                	mov    edx,ecx
c0022833:	c1 e0 10             	shl    eax,0x10
c0022836:	81 e2 fc 00 00 00    	and    edx,0xfc
c002283c:	09 d0                	or     eax,edx
c002283e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022843:	c1 e2 08             	shl    edx,0x8
c0022846:	09 d0                	or     eax,edx
c0022848:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c002284d:	c1 e2 0b             	shl    edx,0xb
c0022850:	09 d0                	or     eax,edx
c0022852:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022857:	0d 00 00 00 80       	or     eax,0x80000000
c002285c:	ef                   	out    dx,eax
c002285d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022862:	ed                   	in     eax,dx
c0022863:	83 e1 02             	and    ecx,0x2
c0022866:	0f b6 c9             	movzx  ecx,cl
c0022869:	c1 e1 03             	shl    ecx,0x3
c002286c:	d3 e8                	shr    eax,cl
c002286e:	c3                   	ret    
c002286f:	90                   	nop

c0022870 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022870:	6a 00                	push   0x0
c0022872:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022877:	50                   	push   eax
c0022878:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002287d:	50                   	push   eax
c002287e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022883:	50                   	push   eax
c0022884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022888:	e8 9b ff ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002288d:	83 c4 14             	add    esp,0x14
c0022890:	c3                   	ret    
c0022891:	90                   	nop

c0022892 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022892:	6a 0e                	push   0xe
c0022894:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022899:	50                   	push   eax
c002289a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002289f:	50                   	push   eax
c00228a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00228a5:	50                   	push   eax
c00228a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00228aa:	e8 79 ff ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228af:	83 c4 14             	add    esp,0x14
c00228b2:	0f b6 c0             	movzx  eax,al
c00228b5:	c3                   	ret    

c00228b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00228b6:	55                   	push   ebp
c00228b7:	57                   	push   edi
c00228b8:	56                   	push   esi
c00228b9:	53                   	push   ebx
c00228ba:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00228bf:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00228c4:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00228c9:	6a 0a                	push   0xa
c00228cb:	56                   	push   esi
c00228cc:	55                   	push   ebp
c00228cd:	57                   	push   edi
c00228ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00228d2:	e8 51 ff ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228d7:	6a 0a                	push   0xa
c00228d9:	89 c3                	mov    ebx,eax
c00228db:	56                   	push   esi
c00228dc:	0f b6 db             	movzx  ebx,bl
c00228df:	55                   	push   ebp
c00228e0:	57                   	push   edi
c00228e1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228e5:	e8 3e ff ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00228ea:	83 c4 28             	add    esp,0x28
c00228ed:	25 00 ff 00 00       	and    eax,0xff00
c00228f2:	09 d8                	or     eax,ebx
c00228f4:	5b                   	pop    ebx
c00228f5:	5e                   	pop    esi
c00228f6:	5f                   	pop    edi
c00228f7:	5d                   	pop    ebp
c00228f8:	c3                   	ret    
c00228f9:	90                   	nop

c00228fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00228fa:	6a 08                	push   0x8
c00228fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022901:	50                   	push   eax
c0022902:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022907:	50                   	push   eax
c0022908:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002290d:	50                   	push   eax
c002290e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022912:	e8 11 ff ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022917:	83 c4 14             	add    esp,0x14
c002291a:	0f b6 c4             	movzx  eax,ah
c002291d:	c3                   	ret    

c002291e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002291e:	6a 08                	push   0x8
c0022920:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022925:	50                   	push   eax
c0022926:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002292b:	50                   	push   eax
c002292c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022931:	50                   	push   eax
c0022932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022936:	e8 ed fe ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002293b:	83 c4 14             	add    esp,0x14
c002293e:	c3                   	ret    
c002293f:	90                   	nop

c0022940 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022940:	6a 3c                	push   0x3c
c0022942:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022947:	50                   	push   eax
c0022948:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002294d:	50                   	push   eax
c002294e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022953:	50                   	push   eax
c0022954:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022958:	e8 cb fe ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002295d:	83 c4 14             	add    esp,0x14
c0022960:	c3                   	ret    
c0022961:	90                   	nop

c0022962 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022962:	6a 18                	push   0x18
c0022964:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022969:	50                   	push   eax
c002296a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002296f:	50                   	push   eax
c0022970:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022975:	50                   	push   eax
c0022976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002297a:	e8 a9 fe ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002297f:	83 c4 14             	add    esp,0x14
c0022982:	0f b6 c4             	movzx  eax,ah
c0022985:	c3                   	ret    

c0022986 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022986:	55                   	push   ebp
c0022987:	57                   	push   edi
c0022988:	56                   	push   esi
c0022989:	53                   	push   ebx
c002298a:	50                   	push   eax
c002298b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002298f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022994:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022999:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002299e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00229a5:	8d 43 12             	lea    eax,[ebx+0x12]
c00229a8:	83 c3 10             	add    ebx,0x10
c00229ab:	0f b6 c0             	movzx  eax,al
c00229ae:	0f b6 db             	movzx  ebx,bl
c00229b1:	50                   	push   eax
c00229b2:	51                   	push   ecx
c00229b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00229b7:	57                   	push   edi
c00229b8:	55                   	push   ebp
c00229b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00229bd:	e8 66 fe ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229c2:	53                   	push   ebx
c00229c3:	89 c6                	mov    esi,eax
c00229c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00229c9:	c1 e6 10             	shl    esi,0x10
c00229cc:	51                   	push   ecx
c00229cd:	57                   	push   edi
c00229ce:	55                   	push   ebp
c00229cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00229d3:	e8 50 fe ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229d8:	83 c4 2c             	add    esp,0x2c
c00229db:	0f b7 c0             	movzx  eax,ax
c00229de:	5b                   	pop    ebx
c00229df:	09 f0                	or     eax,esi
c00229e1:	5e                   	pop    esi
c00229e2:	5f                   	pop    edi
c00229e3:	5d                   	pop    ebp
c00229e4:	c3                   	ret    
c00229e5:	90                   	nop

c00229e6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00229e6:	53                   	push   ebx
c00229e7:	ba f8 0c 00 00       	mov    edx,0xcf8
c00229ec:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00229f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00229f5:	c1 e1 10             	shl    ecx,0x10
c00229f8:	25 fc 00 00 00       	and    eax,0xfc
c00229fd:	09 c1                	or     ecx,eax
c00229ff:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a04:	c1 e0 08             	shl    eax,0x8
c0022a07:	09 c1                	or     ecx,eax
c0022a09:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022a0e:	c1 e0 0b             	shl    eax,0xb
c0022a11:	09 c1                	or     ecx,eax
c0022a13:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022a19:	89 c8                	mov    eax,ecx
c0022a1b:	ef                   	out    dx,eax
c0022a1c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a21:	ed                   	in     eax,dx
c0022a22:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022a27:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022a2c:	74 0a                	je     c0022a38 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022a2e:	0f b7 d8             	movzx  ebx,ax
c0022a31:	89 d0                	mov    eax,edx
c0022a33:	c1 e0 10             	shl    eax,0x10
c0022a36:	eb 05                	jmp    c0022a3d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022a38:	66 31 c0             	xor    ax,ax
c0022a3b:	89 d3                	mov    ebx,edx
c0022a3d:	09 c3                	or     ebx,eax
c0022a3f:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a44:	89 c8                	mov    eax,ecx
c0022a46:	ef                   	out    dx,eax
c0022a47:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a4c:	89 d8                	mov    eax,ebx
c0022a4e:	ef                   	out    dx,eax
c0022a4f:	5b                   	pop    ebx
c0022a50:	c3                   	ret    
c0022a51:	90                   	nop

c0022a52 <PCI::checkBus(unsigned char)>:
c0022a52:	56                   	push   esi
c0022a53:	53                   	push   ebx
c0022a54:	31 db                	xor    ebx,ebx
c0022a56:	51                   	push   ecx
c0022a57:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022a5c:	52                   	push   edx
c0022a5d:	53                   	push   ebx
c0022a5e:	43                   	inc    ebx
c0022a5f:	56                   	push   esi
c0022a60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a64:	e8 2b 03 00 00       	call   c0022d94 <PCI::checkDevice(unsigned char, unsigned char)>
c0022a69:	83 c4 10             	add    esp,0x10
c0022a6c:	83 fb 20             	cmp    ebx,0x20
c0022a6f:	75 eb                	jne    c0022a5c <PCI::checkBus(unsigned char)+0xa>
c0022a71:	58                   	pop    eax
c0022a72:	5b                   	pop    ebx
c0022a73:	5e                   	pop    esi
c0022a74:	c3                   	ret    
c0022a75:	90                   	nop

c0022a76 <PCI::foundDevice(PCIDeviceInfo)>:
c0022a76:	55                   	push   ebp
c0022a77:	57                   	push   edi
c0022a78:	56                   	push   esi
c0022a79:	53                   	push   ebx
c0022a7a:	83 ec 1c             	sub    esp,0x1c
c0022a7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022a81:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022a87:	0f 84 52 01 00 00    	je     c0022bdf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022a8d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022a91:	66 81 f9 06 04       	cmp    cx,0x406
c0022a96:	75 2c                	jne    c0022ac4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022a98:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022a9d:	50                   	push   eax
c0022a9e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022aa3:	50                   	push   eax
c0022aa4:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022aa9:	50                   	push   eax
c0022aaa:	56                   	push   esi
c0022aab:	e8 b2 fe ff ff       	call   c0022962 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ab0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ab4:	0f b6 c0             	movzx  eax,al
c0022ab7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022abb:	83 c4 2c             	add    esp,0x2c
c0022abe:	5b                   	pop    ebx
c0022abf:	5e                   	pop    esi
c0022ac0:	5f                   	pop    edi
c0022ac1:	5d                   	pop    ebp
c0022ac2:	eb 8e                	jmp    c0022a52 <PCI::checkBus(unsigned char)>
c0022ac4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ac8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022ace:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ad2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022ad6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022ada:	88 d3                	mov    bl,dl
c0022adc:	85 c0                	test   eax,eax
c0022ade:	74 33                	je     c0022b13 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022ae0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022ae3:	85 d2                	test   edx,edx
c0022ae5:	74 28                	je     c0022b0f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ae7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022aed:	31 ef                	xor    edi,ebp
c0022aef:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022af5:	75 18                	jne    c0022b0f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022af7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022afb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b01:	75 0c                	jne    c0022b0f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b03:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b09:	0f 84 d0 00 00 00    	je     c0022bdf <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b11:	eb c9                	jmp    c0022adc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b13:	66 81 f9 01 06       	cmp    cx,0x601
c0022b18:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b1c:	75 19                	jne    c0022b37 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b1e:	83 ec 0c             	sub    esp,0xc
c0022b21:	68 64 01 00 00       	push   0x164
c0022b26:	e8 15 cd fe ff       	call   c000f840 <malloc>
c0022b2b:	89 c5                	mov    ebp,eax
c0022b2d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b30:	e8 95 0f 00 00       	call   c0023aca <SATABus::SATABus()>
c0022b35:	eb 1e                	jmp    c0022b55 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b37:	66 81 f9 01 01       	cmp    cx,0x101
c0022b3c:	75 60                	jne    c0022b9e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b3e:	83 ec 0c             	sub    esp,0xc
c0022b41:	68 70 02 00 00       	push   0x270
c0022b46:	e8 f5 cc fe ff       	call   c000f840 <malloc>
c0022b4b:	89 c5                	mov    ebp,eax
c0022b4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b50:	e8 03 03 00 00       	call   c0022e58 <IDE::IDE()>
c0022b55:	58                   	pop    eax
c0022b56:	5a                   	pop    edx
c0022b57:	55                   	push   ebp
c0022b58:	56                   	push   esi
c0022b59:	e8 9c 16 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0022b5e:	83 ec 1c             	sub    esp,0x1c
c0022b61:	b9 09 00 00 00       	mov    ecx,0x9
c0022b66:	fc                   	cld    
c0022b67:	89 e7                	mov    edi,esp
c0022b69:	89 de                	mov    esi,ebx
c0022b6b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022b6d:	55                   	push   ebp
c0022b6e:	e8 91 15 ff ff       	call   c0014104 <Device::preOpenPCI(PCIDeviceInfo)>
c0022b73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022b76:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022b7a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022b82:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022b8a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022b92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b95:	83 c4 4c             	add    esp,0x4c
c0022b98:	5b                   	pop    ebx
c0022b99:	5e                   	pop    esi
c0022b9a:	5f                   	pop    edi
c0022b9b:	5d                   	pop    ebp
c0022b9c:	ff e0                	jmp    eax
c0022b9e:	83 ec 0c             	sub    esp,0xc
c0022ba1:	68 58 01 00 00       	push   0x158
c0022ba6:	e8 95 cc fe ff       	call   c000f840 <malloc>
c0022bab:	89 c5                	mov    ebp,eax
c0022bad:	58                   	pop    eax
c0022bae:	5a                   	pop    edx
c0022baf:	68 74 c8 02 c0       	push   0xc002c874
c0022bb4:	55                   	push   ebp
c0022bb5:	e8 36 19 ff ff       	call   c00144f0 <DriverlessDevice::DriverlessDevice(char const*)>
c0022bba:	59                   	pop    ecx
c0022bbb:	5f                   	pop    edi
c0022bbc:	55                   	push   ebp
c0022bbd:	56                   	push   esi
c0022bbe:	e8 37 16 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0022bc3:	b9 09 00 00 00       	mov    ecx,0x9
c0022bc8:	fc                   	cld    
c0022bc9:	89 df                	mov    edi,ebx
c0022bcb:	89 de                	mov    esi,ebx
c0022bcd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bcf:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022bd3:	83 c4 2c             	add    esp,0x2c
c0022bd6:	5b                   	pop    ebx
c0022bd7:	5e                   	pop    esi
c0022bd8:	5f                   	pop    edi
c0022bd9:	5d                   	pop    ebp
c0022bda:	e9 25 15 ff ff       	jmp    c0014104 <Device::preOpenPCI(PCIDeviceInfo)>
c0022bdf:	83 c4 1c             	add    esp,0x1c
c0022be2:	5b                   	pop    ebx
c0022be3:	5e                   	pop    esi
c0022be4:	5f                   	pop    edi
c0022be5:	5d                   	pop    ebp
c0022be6:	c3                   	ret    
c0022be7:	90                   	nop

c0022be8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022be8:	55                   	push   ebp
c0022be9:	57                   	push   edi
c0022bea:	56                   	push   esi
c0022beb:	53                   	push   ebx
c0022bec:	83 ec 5c             	sub    esp,0x5c
c0022bef:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022bf7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022bfb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022c00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022c04:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022c08:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022c0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c11:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022c16:	6a 0c                	push   0xc
c0022c18:	55                   	push   ebp
c0022c19:	53                   	push   ebx
c0022c1a:	57                   	push   edi
c0022c1b:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022c22:	e8 01 fc ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c27:	55                   	push   ebp
c0022c28:	53                   	push   ebx
c0022c29:	57                   	push   edi
c0022c2a:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c31:	e8 80 fc ff ff       	call   c00228b6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c36:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022c3b:	83 c4 24             	add    esp,0x24
c0022c3e:	55                   	push   ebp
c0022c3f:	53                   	push   ebx
c0022c40:	57                   	push   edi
c0022c41:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022c45:	e8 f6 fc ff ff       	call   c0022940 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c4a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022c4e:	6a 3c                	push   0x3c
c0022c50:	55                   	push   ebp
c0022c51:	53                   	push   ebx
c0022c52:	57                   	push   edi
c0022c53:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022c5a:	e8 c9 fb ff ff       	call   c0022828 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c5f:	0f b6 c4             	movzx  eax,ah
c0022c62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c66:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c6a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022c6e:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0022c73:	83 c4 24             	add    esp,0x24
c0022c76:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022c7c:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022c83:	74 6c                	je     c0022cf1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c85:	31 f6                	xor    esi,esi
c0022c87:	8b 15 88 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e288
c0022c8d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022c93:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022c99:	7e 56                	jle    c0022cf1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022c9b:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022c9e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ca5:	39 cb                	cmp    ebx,ecx
c0022ca7:	75 45                	jne    c0022cee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ca9:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022cb0:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022cb4:	75 38                	jne    c0022cee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022cb6:	83 ec 0c             	sub    esp,0xc
c0022cb9:	68 8e c8 02 c0       	push   0xc002c88e
c0022cbe:	e8 11 01 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0022cc3:	8b 15 88 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e288
c0022cc9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ccf:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022cd7:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022cdb:	52                   	push   edx
c0022cdc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ce0:	53                   	push   ebx
c0022ce1:	68 b3 c8 02 c0       	push   0xc002c8b3
c0022ce6:	e8 e9 00 ff ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0022ceb:	83 c4 20             	add    esp,0x20
c0022cee:	46                   	inc    esi
c0022cef:	eb 96                	jmp    c0022c87 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022cf1:	31 d2                	xor    edx,edx
c0022cf3:	83 ec 0c             	sub    esp,0xc
c0022cf6:	55                   	push   ebp
c0022cf7:	53                   	push   ebx
c0022cf8:	57                   	push   edi
c0022cf9:	52                   	push   edx
c0022cfa:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022cfe:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d05:	e8 7c fc ff ff       	call   c0022986 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d0a:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022d0e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022d12:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d16:	42                   	inc    edx
c0022d17:	83 c4 20             	add    esp,0x20
c0022d1a:	83 fa 06             	cmp    edx,0x6
c0022d1d:	75 d4                	jne    c0022cf3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022d1f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022d23:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022d27:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022d2b:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022d2f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022d33:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022d37:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022d3c:	86 e0                	xchg   al,ah
c0022d3e:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022d43:	55                   	push   ebp
c0022d44:	53                   	push   ebx
c0022d45:	57                   	push   edi
c0022d46:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022d4a:	e8 ab fb ff ff       	call   c00228fa <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d4f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d53:	55                   	push   ebp
c0022d54:	53                   	push   ebx
c0022d55:	57                   	push   edi
c0022d56:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022d5d:	e8 0e fb ff ff       	call   c0022870 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d62:	83 ec 0c             	sub    esp,0xc
c0022d65:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022d6a:	b9 09 00 00 00       	mov    ecx,0x9
c0022d6f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022d73:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022d77:	fc                   	cld    
c0022d78:	89 e7                	mov    edi,esp
c0022d7a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d7c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022d83:	e8 ee fc ff ff       	call   c0022a76 <PCI::foundDevice(PCIDeviceInfo)>
c0022d88:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022d8e:	5b                   	pop    ebx
c0022d8f:	5e                   	pop    esi
c0022d90:	5f                   	pop    edi
c0022d91:	5d                   	pop    ebp
c0022d92:	c3                   	ret    
c0022d93:	90                   	nop

c0022d94 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022d94:	55                   	push   ebp
c0022d95:	57                   	push   edi
c0022d96:	56                   	push   esi
c0022d97:	53                   	push   ebx
c0022d98:	83 ec 0c             	sub    esp,0xc
c0022d9b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022d9f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022da4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022da9:	6a 00                	push   0x0
c0022dab:	56                   	push   esi
c0022dac:	57                   	push   edi
c0022dad:	55                   	push   ebp
c0022dae:	e8 bd fa ff ff       	call   c0022870 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022db3:	6a 00                	push   0x0
c0022db5:	56                   	push   esi
c0022db6:	57                   	push   edi
c0022db7:	55                   	push   ebp
c0022db8:	e8 2b fe ff ff       	call   c0022be8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022dbd:	83 c4 20             	add    esp,0x20
c0022dc0:	6a 00                	push   0x0
c0022dc2:	56                   	push   esi
c0022dc3:	57                   	push   edi
c0022dc4:	55                   	push   ebp
c0022dc5:	e8 c8 fa ff ff       	call   c0022892 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022dca:	83 c4 10             	add    esp,0x10
c0022dcd:	84 c0                	test   al,al
c0022dcf:	79 27                	jns    c0022df8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022dd1:	bb 01 00 00 00       	mov    ebx,0x1
c0022dd6:	53                   	push   ebx
c0022dd7:	56                   	push   esi
c0022dd8:	57                   	push   edi
c0022dd9:	55                   	push   ebp
c0022dda:	e8 91 fa ff ff       	call   c0022870 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ddf:	83 c4 10             	add    esp,0x10
c0022de2:	66 40                	inc    ax
c0022de4:	74 0c                	je     c0022df2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022de6:	53                   	push   ebx
c0022de7:	56                   	push   esi
c0022de8:	57                   	push   edi
c0022de9:	55                   	push   ebp
c0022dea:	e8 f9 fd ff ff       	call   c0022be8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022def:	83 c4 10             	add    esp,0x10
c0022df2:	43                   	inc    ebx
c0022df3:	83 fb 08             	cmp    ebx,0x8
c0022df6:	75 de                	jne    c0022dd6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022df8:	83 c4 0c             	add    esp,0xc
c0022dfb:	5b                   	pop    ebx
c0022dfc:	5e                   	pop    esi
c0022dfd:	5f                   	pop    edi
c0022dfe:	5d                   	pop    ebp
c0022dff:	c3                   	ret    

c0022e00 <PCI::detect()>:
c0022e00:	56                   	push   esi
c0022e01:	53                   	push   ebx
c0022e02:	53                   	push   ebx
c0022e03:	31 db                	xor    ebx,ebx
c0022e05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e09:	6a 00                	push   0x0
c0022e0b:	6a 00                	push   0x0
c0022e0d:	6a 00                	push   0x0
c0022e0f:	56                   	push   esi
c0022e10:	e8 7d fa ff ff       	call   c0022892 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e15:	83 c4 10             	add    esp,0x10
c0022e18:	a8 80                	test   al,0x80
c0022e1a:	75 21                	jne    c0022e3d <PCI::detect()+0x3d>
c0022e1c:	51                   	push   ecx
c0022e1d:	51                   	push   ecx
c0022e1e:	6a 00                	push   0x0
c0022e20:	56                   	push   esi
c0022e21:	e8 2c fc ff ff       	call   c0022a52 <PCI::checkBus(unsigned char)>
c0022e26:	83 c4 10             	add    esp,0x10
c0022e29:	eb 24                	jmp    c0022e4f <PCI::detect()+0x4f>
c0022e2b:	52                   	push   edx
c0022e2c:	52                   	push   edx
c0022e2d:	53                   	push   ebx
c0022e2e:	43                   	inc    ebx
c0022e2f:	56                   	push   esi
c0022e30:	e8 1d fc ff ff       	call   c0022a52 <PCI::checkBus(unsigned char)>
c0022e35:	83 c4 10             	add    esp,0x10
c0022e38:	83 fb 08             	cmp    ebx,0x8
c0022e3b:	74 12                	je     c0022e4f <PCI::detect()+0x4f>
c0022e3d:	53                   	push   ebx
c0022e3e:	6a 00                	push   0x0
c0022e40:	6a 00                	push   0x0
c0022e42:	56                   	push   esi
c0022e43:	e8 28 fa ff ff       	call   c0022870 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e48:	83 c4 10             	add    esp,0x10
c0022e4b:	66 40                	inc    ax
c0022e4d:	74 dc                	je     c0022e2b <PCI::detect()+0x2b>
c0022e4f:	58                   	pop    eax
c0022e50:	5b                   	pop    ebx
c0022e51:	5e                   	pop    esi
c0022e52:	c3                   	ret    
c0022e53:	90                   	nop

c0022e54 <IDE::close(int, int, void*)>:
c0022e54:	83 c8 ff             	or     eax,0xffffffff
c0022e57:	c3                   	ret    

c0022e58 <IDE::IDE()>:
c0022e58:	83 ec 0c             	sub    esp,0xc
c0022e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e5f:	83 ec 08             	sub    esp,0x8
c0022e62:	68 fc c8 02 c0       	push   0xc002c8fc
c0022e67:	50                   	push   eax
c0022e68:	e8 19 17 ff ff       	call   c0014586 <HardDiskController::HardDiskController(char const*)>
c0022e6d:	83 c4 10             	add    esp,0x10
c0022e70:	ba 3c cb 02 c0       	mov    edx,0xc002cb3c
c0022e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e79:	89 10                	mov    DWORD PTR [eax],edx
c0022e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022e86:	90                   	nop
c0022e87:	83 c4 0c             	add    esp,0xc
c0022e8a:	c3                   	ret    
c0022e8b:	90                   	nop

c0022e8c <IDE::prepareInterrupt(unsigned char)>:
c0022e8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022e91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022e95:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022e9d:	c3                   	ret    

c0022e9e <selectDrive(unsigned char, unsigned char)>:
c0022e9e:	c3                   	ret    
c0022e9f:	90                   	nop

c0022ea0 <IDE::getBase(unsigned char)>:
c0022ea0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ea5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ea9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022eb1:	c3                   	ret    

c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022eb2:	55                   	push   ebp
c0022eb3:	57                   	push   edi
c0022eb4:	56                   	push   esi
c0022eb5:	53                   	push   ebx
c0022eb6:	83 ec 1c             	sub    esp,0x1c
c0022eb9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ebd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022ec1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022ec4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022ec8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022ecc:	80 f9 03             	cmp    cl,0x3
c0022ecf:	77 51                	ja     c0022f22 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022ed1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022ed5:	0f b6 f2             	movzx  esi,dl
c0022ed8:	0f b6 db             	movzx  ebx,bl
c0022edb:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022ede:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022ee2:	83 ca 80             	or     edx,0xffffff80
c0022ee5:	0f b6 d2             	movzx  edx,dl
c0022ee8:	52                   	push   edx
c0022ee9:	6a 0c                	push   0xc
c0022eeb:	56                   	push   esi
c0022eec:	57                   	push   edi
c0022eed:	e8 c0 ff ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ef2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022ef7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022efb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022eff:	ee                   	out    dx,al
c0022f00:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f05:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f09:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f0d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f11:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f19:	83 c4 2c             	add    esp,0x2c
c0022f1c:	5b                   	pop    ebx
c0022f1d:	5e                   	pop    esi
c0022f1e:	5f                   	pop    edi
c0022f1f:	5d                   	pop    ebp
c0022f20:	eb 90                	jmp    c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f22:	80 fb 07             	cmp    bl,0x7
c0022f25:	77 12                	ja     c0022f39 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f27:	0f b6 d2             	movzx  edx,dl
c0022f2a:	0f b6 db             	movzx  ebx,bl
c0022f2d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f35:	89 da                	mov    edx,ebx
c0022f37:	eb 2f                	jmp    c0022f68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f39:	80 fb 0d             	cmp    bl,0xd
c0022f3c:	77 13                	ja     c0022f51 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f3e:	0f b6 d2             	movzx  edx,dl
c0022f41:	0f b6 db             	movzx  ebx,bl
c0022f44:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f4b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022f4f:	eb 17                	jmp    c0022f68 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f51:	80 fb 15             	cmp    bl,0x15
c0022f54:	77 13                	ja     c0022f69 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022f56:	0f b6 d2             	movzx  edx,dl
c0022f59:	0f b6 db             	movzx  ebx,bl
c0022f5c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022f64:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022f68:	ee                   	out    dx,al
c0022f69:	83 c4 1c             	add    esp,0x1c
c0022f6c:	5b                   	pop    ebx
c0022f6d:	5e                   	pop    esi
c0022f6e:	5f                   	pop    edi
c0022f6f:	5d                   	pop    ebp
c0022f70:	c3                   	ret    
c0022f71:	90                   	nop

c0022f72 <IDE::read(unsigned char, unsigned char)>:
c0022f72:	55                   	push   ebp
c0022f73:	57                   	push   edi
c0022f74:	56                   	push   esi
c0022f75:	53                   	push   ebx
c0022f76:	83 ec 1c             	sub    esp,0x1c
c0022f79:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f7d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f81:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022f84:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f88:	3c 03                	cmp    al,0x3
c0022f8a:	77 43                	ja     c0022fcf <IDE::read(unsigned char, unsigned char)+0x5d>
c0022f8c:	0f b6 f2             	movzx  esi,dl
c0022f8f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f92:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022f96:	83 c8 80             	or     eax,0xffffff80
c0022f99:	0f b6 c0             	movzx  eax,al
c0022f9c:	50                   	push   eax
c0022f9d:	6a 0c                	push   0xc
c0022f9f:	56                   	push   esi
c0022fa0:	57                   	push   edi
c0022fa1:	e8 0c ff ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fa6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fab:	0f b6 c3             	movzx  eax,bl
c0022fae:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022fb2:	ec                   	in     al,dx
c0022fb3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022fb7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022fbc:	52                   	push   edx
c0022fbd:	6a 0c                	push   0xc
c0022fbf:	56                   	push   esi
c0022fc0:	57                   	push   edi
c0022fc1:	e8 ec fe ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fc6:	83 c4 20             	add    esp,0x20
c0022fc9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022fcd:	eb 49                	jmp    c0023018 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022fcf:	80 fb 07             	cmp    bl,0x7
c0022fd2:	77 12                	ja     c0022fe6 <IDE::read(unsigned char, unsigned char)+0x74>
c0022fd4:	0f b6 d2             	movzx  edx,dl
c0022fd7:	0f b6 c3             	movzx  eax,bl
c0022fda:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022fe2:	89 c2                	mov    edx,eax
c0022fe4:	eb 31                	jmp    c0023017 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022fe6:	80 fb 0d             	cmp    bl,0xd
c0022fe9:	77 13                	ja     c0022ffe <IDE::read(unsigned char, unsigned char)+0x8c>
c0022feb:	0f b6 d2             	movzx  edx,dl
c0022fee:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022ff5:	0f b6 d3             	movzx  edx,bl
c0022ff8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022ffc:	eb 19                	jmp    c0023017 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ffe:	31 c0                	xor    eax,eax
c0023000:	80 fb 15             	cmp    bl,0x15
c0023003:	77 13                	ja     c0023018 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023005:	0f b6 d2             	movzx  edx,dl
c0023008:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023010:	0f b6 d3             	movzx  edx,bl
c0023013:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023017:	ec                   	in     al,dx
c0023018:	83 c4 1c             	add    esp,0x1c
c002301b:	5b                   	pop    ebx
c002301c:	5e                   	pop    esi
c002301d:	5f                   	pop    edi
c002301e:	5d                   	pop    ebp
c002301f:	c3                   	ret    

c0023020 <IDE::waitInterrupt(unsigned char)>:
c0023020:	55                   	push   ebp
c0023021:	57                   	push   edi
c0023022:	56                   	push   esi
c0023023:	53                   	push   ebx
c0023024:	31 db                	xor    ebx,ebx
c0023026:	83 ec 0c             	sub    esp,0xc
c0023029:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002302d:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023032:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002303a:	89 e8                	mov    eax,ebp
c002303c:	84 c0                	test   al,al
c002303e:	75 34                	jne    c0023074 <IDE::waitInterrupt(unsigned char)+0x54>
c0023040:	52                   	push   edx
c0023041:	6a 0c                	push   0xc
c0023043:	56                   	push   esi
c0023044:	57                   	push   edi
c0023045:	e8 28 ff ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002304a:	83 c4 10             	add    esp,0x10
c002304d:	a8 01                	test   al,0x1
c002304f:	75 2b                	jne    c002307c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023051:	f6 c3 04             	test   bl,0x4
c0023054:	75 16                	jne    c002306c <IDE::waitInterrupt(unsigned char)+0x4c>
c0023056:	83 fb 32             	cmp    ebx,0x32
c0023059:	7e 11                	jle    c002306c <IDE::waitInterrupt(unsigned char)+0x4c>
c002305b:	50                   	push   eax
c002305c:	50                   	push   eax
c002305d:	6a 00                	push   0x0
c002305f:	68 80 96 98 00       	push   0x989680
c0023064:	e8 5d b1 ff ff       	call   c001e1c6 <nanoSleep(unsigned long long)>
c0023069:	83 c4 10             	add    esp,0x10
c002306c:	83 fb 3c             	cmp    ebx,0x3c
c002306f:	74 0b                	je     c002307c <IDE::waitInterrupt(unsigned char)+0x5c>
c0023071:	43                   	inc    ebx
c0023072:	eb be                	jmp    c0023032 <IDE::waitInterrupt(unsigned char)+0x12>
c0023074:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002307c:	83 c4 0c             	add    esp,0xc
c002307f:	89 e8                	mov    eax,ebp
c0023081:	5b                   	pop    ebx
c0023082:	5e                   	pop    esi
c0023083:	5f                   	pop    edi
c0023084:	5d                   	pop    ebp
c0023085:	c3                   	ret    

c0023086 <ideChannel0IRQHandler(regs*, void*)>:
c0023086:	83 ec 10             	sub    esp,0x10
c0023089:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002308d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023094:	6a 07                	push   0x7
c0023096:	6a 00                	push   0x0
c0023098:	50                   	push   eax
c0023099:	e8 d4 fe ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002309e:	83 c4 1c             	add    esp,0x1c
c00230a1:	c3                   	ret    

c00230a2 <ideChannel1IRQHandler(regs*, void*)>:
c00230a2:	83 ec 10             	sub    esp,0x10
c00230a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230a9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00230b0:	6a 07                	push   0x7
c00230b2:	6a 01                	push   0x1
c00230b4:	50                   	push   eax
c00230b5:	e8 b8 fe ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00230ba:	83 c4 1c             	add    esp,0x1c
c00230bd:	c3                   	ret    

c00230be <IDE::enableIRQs(unsigned char, bool)>:
c00230be:	57                   	push   edi
c00230bf:	56                   	push   esi
c00230c0:	be 04 00 00 00       	mov    esi,0x4
c00230c5:	53                   	push   ebx
c00230c6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00230cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00230cf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00230d4:	0f 94 c0             	sete   al
c00230d7:	d1 e0                	shl    eax,1
c00230d9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00230e0:	0f b6 c0             	movzx  eax,al
c00230e3:	50                   	push   eax
c00230e4:	6a 0c                	push   0xc
c00230e6:	57                   	push   edi
c00230e7:	53                   	push   ebx
c00230e8:	e8 c5 fd ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230ed:	83 c4 10             	add    esp,0x10
c00230f0:	50                   	push   eax
c00230f1:	6a 0c                	push   0xc
c00230f3:	57                   	push   edi
c00230f4:	53                   	push   ebx
c00230f5:	e8 78 fe ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00230fa:	83 c4 10             	add    esp,0x10
c00230fd:	4e                   	dec    esi
c00230fe:	75 f0                	jne    c00230f0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023100:	5b                   	pop    ebx
c0023101:	5e                   	pop    esi
c0023102:	5f                   	pop    edi
c0023103:	c3                   	ret    

c0023104 <IDE::open(int, int, void*)>:
c0023104:	55                   	push   ebp
c0023105:	57                   	push   edi
c0023106:	56                   	push   esi
c0023107:	53                   	push   ebx
c0023108:	83 ec 1c             	sub    esp,0x1c
c002310b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002310f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023118:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023121:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023128:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002312f:	0f 85 b0 02 00 00    	jne    c00233e5 <IDE::open(int, int, void*)+0x2e1>
c0023135:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002313b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002313f:	83 e0 7f             	and    eax,0x7f
c0023142:	3c 05                	cmp    al,0x5
c0023144:	74 04                	je     c002314a <IDE::open(int, int, void*)+0x46>
c0023146:	3c 0f                	cmp    al,0xf
c0023148:	75 32                	jne    c002317c <IDE::open(int, int, void*)+0x78>
c002314a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023150:	83 e0 fc             	and    eax,0xfffffffc
c0023153:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002315a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023160:	83 e0 fc             	and    eax,0xfffffffc
c0023163:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002316a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023170:	83 e0 fc             	and    eax,0xfffffffc
c0023173:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002317a:	eb 14                	jmp    c0023190 <IDE::open(int, int, void*)+0x8c>
c002317c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023186:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023190:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023197:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002319e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231a2:	89 c6                	mov    esi,eax
c00231a4:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231a9:	c1 e6 10             	shl    esi,0x10
c00231ac:	89 e8                	mov    eax,ebp
c00231ae:	89 fa                	mov    edx,edi
c00231b0:	c1 e0 0b             	shl    eax,0xb
c00231b3:	09 f0                	or     eax,esi
c00231b5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00231bc:	c1 e6 08             	shl    esi,0x8
c00231bf:	09 c6                	or     esi,eax
c00231c1:	89 f0                	mov    eax,esi
c00231c3:	0d 08 00 00 80       	or     eax,0x80000008
c00231c8:	ef                   	out    dx,eax
c00231c9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00231ce:	89 ca                	mov    edx,ecx
c00231d0:	ed                   	in     eax,dx
c00231d1:	c1 e8 10             	shr    eax,0x10
c00231d4:	3d ff ff 00 00       	cmp    eax,0xffff
c00231d9:	0f 84 f5 00 00 00    	je     c00232d4 <IDE::open(int, int, void*)+0x1d0>
c00231df:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00231e5:	89 fa                	mov    edx,edi
c00231e7:	89 f0                	mov    eax,esi
c00231e9:	ef                   	out    dx,eax
c00231ea:	b0 fe                	mov    al,0xfe
c00231ec:	89 ca                	mov    edx,ecx
c00231ee:	ee                   	out    dx,al
c00231ef:	89 f0                	mov    eax,esi
c00231f1:	89 fa                	mov    edx,edi
c00231f3:	ef                   	out    dx,eax
c00231f4:	89 ca                	mov    edx,ecx
c00231f6:	ed                   	in     eax,dx
c00231f7:	3c fe                	cmp    al,0xfe
c00231f9:	0f 85 a9 00 00 00    	jne    c00232a8 <IDE::open(int, int, void*)+0x1a4>
c00231ff:	8b 15 88 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e288
c0023205:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c002320c:	74 33                	je     c0023241 <IDE::open(int, int, void*)+0x13d>
c002320e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023214:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023218:	40                   	inc    eax
c0023219:	83 ec 0c             	sub    esp,0xc
c002321c:	0f b6 c0             	movzx  eax,al
c002321f:	50                   	push   eax
c0023220:	55                   	push   ebp
c0023221:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023225:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002322b:	51                   	push   ecx
c002322c:	e8 a1 4e ff ff       	call   c00180d2 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023231:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023236:	83 c4 1c             	add    esp,0x1c
c0023239:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002323f:	eb 0a                	jmp    c002324b <IDE::open(int, int, void*)+0x147>
c0023241:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002324b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023252:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023259:	c1 e1 10             	shl    ecx,0x10
c002325c:	c1 e0 08             	shl    eax,0x8
c002325f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023264:	09 c1                	or     ecx,eax
c0023266:	89 fa                	mov    edx,edi
c0023268:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002326f:	c1 e0 0b             	shl    eax,0xb
c0023272:	09 c1                	or     ecx,eax
c0023274:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002327a:	89 c8                	mov    eax,ecx
c002327c:	ef                   	out    dx,eax
c002327d:	be fc 0c 00 00       	mov    esi,0xcfc
c0023282:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023288:	89 f2                	mov    edx,esi
c002328a:	ee                   	out    dx,al
c002328b:	89 c8                	mov    eax,ecx
c002328d:	89 fa                	mov    edx,edi
c002328f:	ef                   	out    dx,eax
c0023290:	89 f2                	mov    edx,esi
c0023292:	ed                   	in     eax,dx
c0023293:	0f b6 c0             	movzx  eax,al
c0023296:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002329c:	74 46                	je     c00232e4 <IDE::open(int, int, void*)+0x1e0>
c002329e:	83 ec 0c             	sub    esp,0xc
c00232a1:	68 14 c9 02 c0       	push   0xc002c914
c00232a6:	eb 34                	jmp    c00232dc <IDE::open(int, int, void*)+0x1d8>
c00232a8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00232b1:	75 17                	jne    c00232ca <IDE::open(int, int, void*)+0x1c6>
c00232b3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00232b8:	74 07                	je     c00232c1 <IDE::open(int, int, void*)+0x1bd>
c00232ba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00232bf:	75 09                	jne    c00232ca <IDE::open(int, int, void*)+0x1c6>
c00232c1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232c8:	eb 1a                	jmp    c00232e4 <IDE::open(int, int, void*)+0x1e0>
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	68 1c c9 02 c0       	push   0xc002c91c
c00232d2:	eb 08                	jmp    c00232dc <IDE::open(int, int, void*)+0x1d8>
c00232d4:	83 ec 0c             	sub    esp,0xc
c00232d7:	68 4d c9 02 c0       	push   0xc002c94d
c00232dc:	e8 9c 71 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00232e1:	83 c4 10             	add    esp,0x10
c00232e4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00232eb:	79 1a                	jns    c0023307 <IDE::open(int, int, void*)+0x203>
c00232ed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00232f3:	83 e0 fc             	and    eax,0xfffffffc
c00232f6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00232fd:	83 c0 08             	add    eax,0x8
c0023300:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023307:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002330d:	89 c2                	mov    edx,eax
c002330f:	83 e2 0f             	and    edx,0xf
c0023312:	66 83 fa 08          	cmp    dx,0x8
c0023316:	75 0a                	jne    c0023322 <IDE::open(int, int, void*)+0x21e>
c0023318:	83 e8 02             	sub    eax,0x2
c002331b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023322:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023328:	89 c2                	mov    edx,eax
c002332a:	83 e2 0f             	and    edx,0xf
c002332d:	66 83 fa 08          	cmp    dx,0x8
c0023331:	75 0a                	jne    c002333d <IDE::open(int, int, void*)+0x239>
c0023333:	83 e8 02             	sub    eax,0x2
c0023336:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002333d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023344:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002334b:	89 d0                	mov    eax,edx
c002334d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023350:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023354:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023358:	8d 4a 01             	lea    ecx,[edx+0x1]
c002335b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023360:	0f b6 c9             	movzx  ecx,cl
c0023363:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002336a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002336d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023371:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023375:	8d 50 02             	lea    edx,[eax+0x2]
c0023378:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002337d:	0f b6 d2             	movzx  edx,dl
c0023380:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023386:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023389:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002338d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023391:	8d 48 03             	lea    ecx,[eax+0x3]
c0023394:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023399:	0f b6 c9             	movzx  ecx,cl
c002339c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00233ad:	8d 50 04             	lea    edx,[eax+0x4]
c00233b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00233b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00233c2:	66 85 f6             	test   si,si
c00233c5:	74 3e                	je     c0023405 <IDE::open(int, int, void*)+0x301>
c00233c7:	0f b6 d2             	movzx  edx,dl
c00233ca:	83 c0 05             	add    eax,0x5
c00233cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00233d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00233de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233e3:	eb 20                	jmp    c0023405 <IDE::open(int, int, void*)+0x301>
c00233e5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233ef:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023400:	e9 02 ff ff ff       	jmp    c0023307 <IDE::open(int, int, void*)+0x203>
c0023405:	52                   	push   edx
c0023406:	52                   	push   edx
c0023407:	6a 00                	push   0x0
c0023409:	53                   	push   ebx
c002340a:	e8 7d fa ff ff       	call   c0022e8c <IDE::prepareInterrupt(unsigned char)>
c002340f:	59                   	pop    ecx
c0023410:	5e                   	pop    esi
c0023411:	6a 01                	push   0x1
c0023413:	53                   	push   ebx
c0023414:	e8 73 fa ff ff       	call   c0022e8c <IDE::prepareInterrupt(unsigned char)>
c0023419:	83 c4 0c             	add    esp,0xc
c002341c:	6a 00                	push   0x0
c002341e:	6a 00                	push   0x0
c0023420:	53                   	push   ebx
c0023421:	e8 98 fc ff ff       	call   c00230be <IDE::enableIRQs(unsigned char, bool)>
c0023426:	83 c4 0c             	add    esp,0xc
c0023429:	6a 00                	push   0x0
c002342b:	6a 01                	push   0x1
c002342d:	53                   	push   ebx
c002342e:	e8 8b fc ff ff       	call   c00230be <IDE::enableIRQs(unsigned char, bool)>
c0023433:	83 c4 10             	add    esp,0x10
c0023436:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002343d:	74 40                	je     c002347f <IDE::open(int, int, void*)+0x37b>
c002343f:	83 ec 0c             	sub    esp,0xc
c0023442:	68 77 c9 02 c0       	push   0xc002c977
c0023447:	e8 88 f9 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002344c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002344f:	6a 01                	push   0x1
c0023451:	68 86 30 02 c0       	push   0xc0023086
c0023456:	6a 0e                	push   0xe
c0023458:	53                   	push   ebx
c0023459:	e8 20 0d ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002345e:	83 c4 14             	add    esp,0x14
c0023461:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023467:	53                   	push   ebx
c0023468:	6a 01                	push   0x1
c002346a:	68 a2 30 02 c0       	push   0xc00230a2
c002346f:	6a 0f                	push   0xf
c0023471:	53                   	push   ebx
c0023472:	e8 07 0d ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023477:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002347d:	eb 4a                	jmp    c00234c9 <IDE::open(int, int, void*)+0x3c5>
c002347f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023489:	50                   	push   eax
c002348a:	6a 0f                	push   0xf
c002348c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023492:	68 93 c9 02 c0       	push   0xc002c993
c0023497:	e8 38 f9 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002349c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002349f:	6a 00                	push   0x0
c00234a1:	68 86 30 02 c0       	push   0xc0023086
c00234a6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234ac:	53                   	push   ebx
c00234ad:	e8 cc 0c ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234b2:	83 c4 14             	add    esp,0x14
c00234b5:	53                   	push   ebx
c00234b6:	6a 00                	push   0x0
c00234b8:	68 a2 30 02 c0       	push   0xc00230a2
c00234bd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00234c3:	53                   	push   ebx
c00234c4:	e8 b5 0c ff ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00234cb:	83 c4 20             	add    esp,0x20
c00234ce:	83 ec 0c             	sub    esp,0xc
c00234d1:	53                   	push   ebx
c00234d2:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00234d5:	83 c4 0c             	add    esp,0xc
c00234d8:	6a 07                	push   0x7
c00234da:	6a 00                	push   0x0
c00234dc:	53                   	push   ebx
c00234dd:	e8 90 fa ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00234e2:	83 c4 0c             	add    esp,0xc
c00234e5:	6a 07                	push   0x7
c00234e7:	6a 01                	push   0x1
c00234e9:	53                   	push   ebx
c00234ea:	e8 83 fa ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00234ef:	83 c4 0c             	add    esp,0xc
c00234f2:	6a 01                	push   0x1
c00234f4:	6a 00                	push   0x0
c00234f6:	53                   	push   ebx
c00234f7:	e8 c2 fb ff ff       	call   c00230be <IDE::enableIRQs(unsigned char, bool)>
c00234fc:	83 c4 0c             	add    esp,0xc
c00234ff:	6a 01                	push   0x1
c0023501:	6a 01                	push   0x1
c0023503:	53                   	push   ebx
c0023504:	e8 b5 fb ff ff       	call   c00230be <IDE::enableIRQs(unsigned char, bool)>
c0023509:	83 c4 2c             	add    esp,0x2c
c002350c:	31 c0                	xor    eax,eax
c002350e:	5b                   	pop    ebx
c002350f:	5e                   	pop    esi
c0023510:	5f                   	pop    edi
c0023511:	5d                   	pop    ebp
c0023512:	c3                   	ret    
c0023513:	90                   	nop

c0023514 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023514:	55                   	push   ebp
c0023515:	57                   	push   edi
c0023516:	56                   	push   esi
c0023517:	53                   	push   ebx
c0023518:	83 ec 1c             	sub    esp,0x1c
c002351b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002351f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023523:	8d 50 f8             	lea    edx,[eax-0x8]
c0023526:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002352a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002352e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023532:	80 fa 03             	cmp    dl,0x3
c0023535:	77 5d                	ja     c0023594 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023537:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002353b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002353f:	0f b6 db             	movzx  ebx,bl
c0023542:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023545:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023549:	83 ca 80             	or     edx,0xffffff80
c002354c:	0f b6 d2             	movzx  edx,dl
c002354f:	52                   	push   edx
c0023550:	6a 0c                	push   0xc
c0023552:	53                   	push   ebx
c0023553:	56                   	push   esi
c0023554:	e8 59 f9 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023559:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002355e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023562:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023566:	0f b6 c0             	movzx  eax,al
c0023569:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002356d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002356f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023574:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023578:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002357c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023580:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023588:	83 c4 2c             	add    esp,0x2c
c002358b:	5b                   	pop    ebx
c002358c:	5e                   	pop    esi
c002358d:	5f                   	pop    edi
c002358e:	5d                   	pop    ebp
c002358f:	e9 1e f9 ff ff       	jmp    c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023594:	3c 07                	cmp    al,0x7
c0023596:	77 10                	ja     c00235a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023598:	0f b6 db             	movzx  ebx,bl
c002359b:	0f b6 d0             	movzx  edx,al
c002359e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235a6:	eb 2d                	jmp    c00235d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235a8:	3c 0d                	cmp    al,0xd
c00235aa:	77 13                	ja     c00235bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235ac:	0f b6 db             	movzx  ebx,bl
c00235af:	0f b6 c0             	movzx  eax,al
c00235b2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00235b9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00235bd:	eb 16                	jmp    c00235d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235bf:	3c 15                	cmp    al,0x15
c00235c1:	77 14                	ja     c00235d7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00235c3:	0f b6 db             	movzx  ebx,bl
c00235c6:	0f b6 c0             	movzx  eax,al
c00235c9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00235d1:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00235d5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235d7:	83 c4 1c             	add    esp,0x1c
c00235da:	5b                   	pop    ebx
c00235db:	5e                   	pop    esi
c00235dc:	5f                   	pop    edi
c00235dd:	5d                   	pop    ebp
c00235de:	c3                   	ret    
c00235df:	90                   	nop

c00235e0 <IDE::detect()>:
c00235e0:	55                   	push   ebp
c00235e1:	57                   	push   edi
c00235e2:	56                   	push   esi
c00235e3:	53                   	push   ebx
c00235e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00235ea:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00235f1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00235f8:	0f 85 be 02 00 00    	jne    c00238bc <IDE::detect()+0x2dc>
c00235fe:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023605:	31 f6                	xor    esi,esi
c0023607:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002360f:	31 ed                	xor    ebp,ebp
c0023611:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023615:	c1 e0 06             	shl    eax,0x6
c0023618:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023620:	89 e8                	mov    eax,ebp
c0023622:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023626:	c1 e0 04             	shl    eax,0x4
c0023629:	83 c8 a0             	or     eax,0xffffffa0
c002362c:	0f b6 c0             	movzx  eax,al
c002362f:	50                   	push   eax
c0023630:	6a 06                	push   0x6
c0023632:	56                   	push   esi
c0023633:	53                   	push   ebx
c0023634:	e8 79 f8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023639:	83 c4 0c             	add    esp,0xc
c002363c:	6a 0c                	push   0xc
c002363e:	56                   	push   esi
c002363f:	53                   	push   ebx
c0023640:	e8 2d f9 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023645:	83 c4 0c             	add    esp,0xc
c0023648:	6a 0c                	push   0xc
c002364a:	56                   	push   esi
c002364b:	53                   	push   ebx
c002364c:	e8 21 f9 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023651:	83 c4 0c             	add    esp,0xc
c0023654:	6a 0c                	push   0xc
c0023656:	56                   	push   esi
c0023657:	53                   	push   ebx
c0023658:	e8 15 f9 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002365d:	83 c4 0c             	add    esp,0xc
c0023660:	6a 0c                	push   0xc
c0023662:	56                   	push   esi
c0023663:	53                   	push   ebx
c0023664:	e8 09 f9 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023669:	68 ec 00 00 00       	push   0xec
c002366e:	6a 07                	push   0x7
c0023670:	56                   	push   esi
c0023671:	53                   	push   ebx
c0023672:	e8 3b f8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023677:	83 c4 1c             	add    esp,0x1c
c002367a:	6a 0c                	push   0xc
c002367c:	56                   	push   esi
c002367d:	53                   	push   ebx
c002367e:	e8 ef f8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023683:	83 c4 0c             	add    esp,0xc
c0023686:	6a 0c                	push   0xc
c0023688:	56                   	push   esi
c0023689:	53                   	push   ebx
c002368a:	e8 e3 f8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002368f:	83 c4 0c             	add    esp,0xc
c0023692:	6a 0c                	push   0xc
c0023694:	56                   	push   esi
c0023695:	53                   	push   ebx
c0023696:	e8 d7 f8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002369b:	83 c4 0c             	add    esp,0xc
c002369e:	6a 0c                	push   0xc
c00236a0:	56                   	push   esi
c00236a1:	53                   	push   ebx
c00236a2:	e8 cb f8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00236a7:	83 c4 0c             	add    esp,0xc
c00236aa:	6a 0c                	push   0xc
c00236ac:	56                   	push   esi
c00236ad:	53                   	push   ebx
c00236ae:	e8 bf f8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00236b3:	83 c4 10             	add    esp,0x10
c00236b6:	84 c0                	test   al,al
c00236b8:	0f 84 8b 01 00 00    	je     c0023849 <IDE::detect()+0x269>
c00236be:	31 ff                	xor    edi,edi
c00236c0:	50                   	push   eax
c00236c1:	6a 0c                	push   0xc
c00236c3:	56                   	push   esi
c00236c4:	53                   	push   ebx
c00236c5:	e8 a8 f8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00236ca:	83 c4 10             	add    esp,0x10
c00236cd:	a8 01                	test   al,0x1
c00236cf:	0f 85 8e 01 00 00    	jne    c0023863 <IDE::detect()+0x283>
c00236d5:	84 c0                	test   al,al
c00236d7:	78 04                	js     c00236dd <IDE::detect()+0xfd>
c00236d9:	a8 08                	test   al,0x8
c00236db:	75 27                	jne    c0023704 <IDE::detect()+0x124>
c00236dd:	47                   	inc    edi
c00236de:	81 ff 17 01 00 00    	cmp    edi,0x117
c00236e4:	7e da                	jle    c00236c0 <IDE::detect()+0xe0>
c00236e6:	50                   	push   eax
c00236e7:	50                   	push   eax
c00236e8:	6a 00                	push   0x0
c00236ea:	68 40 4b 4c 00       	push   0x4c4b40
c00236ef:	e8 d2 aa ff ff       	call   c001e1c6 <nanoSleep(unsigned long long)>
c00236f4:	83 c4 10             	add    esp,0x10
c00236f7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00236fd:	75 c1                	jne    c00236c0 <IDE::detect()+0xe0>
c00236ff:	e9 5f 01 00 00       	jmp    c0023863 <IDE::detect()+0x283>
c0023704:	31 c9                	xor    ecx,ecx
c0023706:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002370a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002370e:	83 ec 0c             	sub    esp,0xc
c0023711:	68 80 00 00 00       	push   0x80
c0023716:	57                   	push   edi
c0023717:	6a 00                	push   0x0
c0023719:	56                   	push   esi
c002371a:	53                   	push   ebx
c002371b:	e8 f4 fd ff ff       	call   c0023514 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023720:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023725:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023729:	89 d1                	mov    ecx,edx
c002372b:	c1 e0 06             	shl    eax,0x6
c002372e:	01 d8                	add    eax,ebx
c0023730:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023737:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002373e:	89 f2                	mov    edx,esi
c0023740:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023746:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002374a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023750:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023754:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002375b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023763:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002376a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023772:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023778:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002377f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023785:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023789:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002378d:	83 c4 20             	add    esp,0x20
c0023790:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023793:	83 c0 02             	add    eax,0x2
c0023796:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002379c:	83 c7 02             	add    edi,0x2
c002379f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237a2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237a8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237ac:	75 e2                	jne    c0023790 <IDE::detect()+0x1b0>
c00237ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237b2:	c1 e0 06             	shl    eax,0x6
c00237b5:	01 d8                	add    eax,ebx
c00237b7:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00237bd:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00237c4:	66 c1 ea 09          	shr    dx,0x9
c00237c8:	83 e2 01             	and    edx,0x1
c00237cb:	84 c9                	test   cl,cl
c00237cd:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00237d3:	75 2f                	jne    c0023804 <IDE::detect()+0x224>
c00237d5:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00237db:	85 c0                	test   eax,eax
c00237dd:	74 66                	je     c0023845 <IDE::detect()+0x265>
c00237df:	50                   	push   eax
c00237e0:	55                   	push   ebp
c00237e1:	56                   	push   esi
c00237e2:	68 af c9 02 c0       	push   0xc002c9af
c00237e7:	e8 e8 f5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00237ec:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00237f3:	e8 48 c0 fe ff       	call   c000f840 <malloc>
c00237f8:	89 c7                	mov    edi,eax
c00237fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00237fd:	e8 78 06 00 00       	call   c0023e7a <ATA::ATA()>
c0023802:	eb 28                	jmp    c002382c <IDE::detect()+0x24c>
c0023804:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002380a:	55                   	push   ebp
c002380b:	56                   	push   esi
c002380c:	68 de c9 02 c0       	push   0xc002c9de
c0023811:	e8 be f5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023816:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002381d:	e8 1e c0 fe ff       	call   c000f840 <malloc>
c0023822:	89 c7                	mov    edi,eax
c0023824:	89 04 24             	mov    DWORD PTR [esp],eax
c0023827:	e8 8e 0c 00 00       	call   c00244ba <ATAPI::ATAPI()>
c002382c:	5a                   	pop    edx
c002382d:	59                   	pop    ecx
c002382e:	57                   	push   edi
c002382f:	53                   	push   ebx
c0023830:	e8 c5 09 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0023835:	8b 07                	mov    eax,DWORD PTR [edi]
c0023837:	53                   	push   ebx
c0023838:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002383c:	6a 00                	push   0x0
c002383e:	57                   	push   edi
c002383f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023842:	83 c4 20             	add    esp,0x20
c0023845:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023849:	4d                   	dec    ebp
c002384a:	74 0a                	je     c0023856 <IDE::detect()+0x276>
c002384c:	bd 01 00 00 00       	mov    ebp,0x1
c0023851:	e9 bb fd ff ff       	jmp    c0023611 <IDE::detect()+0x31>
c0023856:	4e                   	dec    esi
c0023857:	74 63                	je     c00238bc <IDE::detect()+0x2dc>
c0023859:	be 01 00 00 00       	mov    esi,0x1
c002385e:	e9 ac fd ff ff       	jmp    c002360f <IDE::detect()+0x2f>
c0023863:	50                   	push   eax
c0023864:	6a 04                	push   0x4
c0023866:	56                   	push   esi
c0023867:	53                   	push   ebx
c0023868:	e8 05 f7 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002386d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023871:	83 c4 0c             	add    esp,0xc
c0023874:	6a 05                	push   0x5
c0023876:	56                   	push   esi
c0023877:	53                   	push   ebx
c0023878:	e8 f5 f6 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c002387d:	83 c4 10             	add    esp,0x10
c0023880:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023884:	80 fa 14             	cmp    dl,0x14
c0023887:	75 04                	jne    c002388d <IDE::detect()+0x2ad>
c0023889:	3c eb                	cmp    al,0xeb
c002388b:	eb 07                	jmp    c0023894 <IDE::detect()+0x2b4>
c002388d:	3c 96                	cmp    al,0x96
c002388f:	75 b8                	jne    c0023849 <IDE::detect()+0x269>
c0023891:	80 fa 69             	cmp    dl,0x69
c0023894:	75 b3                	jne    c0023849 <IDE::detect()+0x269>
c0023896:	68 a1 00 00 00       	push   0xa1
c002389b:	6a 07                	push   0x7
c002389d:	56                   	push   esi
c002389e:	53                   	push   ebx
c002389f:	e8 0e f6 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238a4:	5f                   	pop    edi
c00238a5:	58                   	pop    eax
c00238a6:	6a 00                	push   0x0
c00238a8:	68 40 42 0f 00       	push   0xf4240
c00238ad:	e8 14 a9 ff ff       	call   c001e1c6 <nanoSleep(unsigned long long)>
c00238b2:	83 c4 10             	add    esp,0x10
c00238b5:	b1 01                	mov    cl,0x1
c00238b7:	e9 4a fe ff ff       	jmp    c0023706 <IDE::detect()+0x126>
c00238bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238c2:	5b                   	pop    ebx
c00238c3:	5e                   	pop    esi
c00238c4:	5f                   	pop    edi
c00238c5:	5d                   	pop    ebp
c00238c6:	c3                   	ret    
c00238c7:	90                   	nop

c00238c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238c8:	55                   	push   ebp
c00238c9:	57                   	push   edi
c00238ca:	56                   	push   esi
c00238cb:	53                   	push   ebx
c00238cc:	83 ec 1c             	sub    esp,0x1c
c00238cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00238db:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00238df:	88 c3                	mov    bl,al
c00238e1:	84 c0                	test   al,al
c00238e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238e7:	0f 84 67 01 00 00    	je     c0023a54 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00238ed:	83 ec 0c             	sub    esp,0xc
c00238f0:	68 0f ca 02 c0       	push   0xc002ca0f
c00238f5:	e8 da f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00238fa:	83 c4 10             	add    esp,0x10
c00238fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023901:	3c 01                	cmp    al,0x1
c0023903:	75 17                	jne    c002391c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023905:	83 ec 0c             	sub    esp,0xc
c0023908:	b3 13                	mov    bl,0x13
c002390a:	68 1b ca 02 c0       	push   0xc002ca1b
c002390f:	e8 c0 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023914:	83 c4 10             	add    esp,0x10
c0023917:	e9 25 01 00 00       	jmp    c0023a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002391c:	3c 02                	cmp    al,0x2
c002391e:	0f 85 ef 00 00 00    	jne    c0023a13 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023924:	d1 e6                	shl    esi,1
c0023926:	09 ee                	or     esi,ebp
c0023928:	52                   	push   edx
c0023929:	89 f0                	mov    eax,esi
c002392b:	6a 01                	push   0x1
c002392d:	0f b6 f0             	movzx  esi,al
c0023930:	c1 e6 06             	shl    esi,0x6
c0023933:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002393b:	50                   	push   eax
c002393c:	57                   	push   edi
c002393d:	e8 30 f6 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023942:	83 c4 10             	add    esp,0x10
c0023945:	89 c6                	mov    esi,eax
c0023947:	a8 01                	test   al,0x1
c0023949:	74 12                	je     c002395d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002394b:	83 ec 0c             	sub    esp,0xc
c002394e:	b3 07                	mov    bl,0x7
c0023950:	68 30 ca 02 c0       	push   0xc002ca30
c0023955:	e8 7a f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002395a:	83 c4 10             	add    esp,0x10
c002395d:	f7 c6 02 00 00 00    	test   esi,0x2
c0023963:	74 12                	je     c0023977 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023965:	83 ec 0c             	sub    esp,0xc
c0023968:	b3 03                	mov    bl,0x3
c002396a:	68 4e ca 02 c0       	push   0xc002ca4e
c002396f:	e8 60 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023974:	83 c4 10             	add    esp,0x10
c0023977:	f7 c6 04 00 00 00    	test   esi,0x4
c002397d:	74 12                	je     c0023991 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c002397f:	83 ec 0c             	sub    esp,0xc
c0023982:	b3 14                	mov    bl,0x14
c0023984:	68 6e ca 02 c0       	push   0xc002ca6e
c0023989:	e8 46 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002398e:	83 c4 10             	add    esp,0x10
c0023991:	f7 c6 08 00 00 00    	test   esi,0x8
c0023997:	74 12                	je     c00239ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023999:	83 ec 0c             	sub    esp,0xc
c002399c:	b3 03                	mov    bl,0x3
c002399e:	68 4e ca 02 c0       	push   0xc002ca4e
c00239a3:	e8 2c f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239a8:	83 c4 10             	add    esp,0x10
c00239ab:	f7 c6 10 00 00 00    	test   esi,0x10
c00239b1:	74 12                	je     c00239c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00239b3:	83 ec 0c             	sub    esp,0xc
c00239b6:	b3 15                	mov    bl,0x15
c00239b8:	68 86 ca 02 c0       	push   0xc002ca86
c00239bd:	e8 12 f4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239c2:	83 c4 10             	add    esp,0x10
c00239c5:	f7 c6 20 00 00 00    	test   esi,0x20
c00239cb:	74 12                	je     c00239df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00239cd:	83 ec 0c             	sub    esp,0xc
c00239d0:	b3 03                	mov    bl,0x3
c00239d2:	68 4e ca 02 c0       	push   0xc002ca4e
c00239d7:	e8 f8 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239dc:	83 c4 10             	add    esp,0x10
c00239df:	f7 c6 40 00 00 00    	test   esi,0x40
c00239e5:	74 12                	je     c00239f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00239e7:	83 ec 0c             	sub    esp,0xc
c00239ea:	b3 16                	mov    bl,0x16
c00239ec:	68 a0 ca 02 c0       	push   0xc002caa0
c00239f1:	e8 de f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00239f6:	83 c4 10             	add    esp,0x10
c00239f9:	89 f0                	mov    eax,esi
c00239fb:	84 c0                	test   al,al
c00239fd:	79 42                	jns    c0023a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00239ff:	83 ec 0c             	sub    esp,0xc
c0023a02:	b3 0d                	mov    bl,0xd
c0023a04:	68 c1 ca 02 c0       	push   0xc002cac1
c0023a09:	e8 c6 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a0e:	83 c4 10             	add    esp,0x10
c0023a11:	eb 2e                	jmp    c0023a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a13:	3c 03                	cmp    al,0x3
c0023a15:	75 14                	jne    c0023a2b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023a17:	83 ec 0c             	sub    esp,0xc
c0023a1a:	b3 17                	mov    bl,0x17
c0023a1c:	68 d5 ca 02 c0       	push   0xc002cad5
c0023a21:	e8 ae f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a26:	83 c4 10             	add    esp,0x10
c0023a29:	eb 16                	jmp    c0023a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a2b:	3c 04                	cmp    al,0x4
c0023a2d:	75 12                	jne    c0023a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023a2f:	83 ec 0c             	sub    esp,0xc
c0023a32:	b3 08                	mov    bl,0x8
c0023a34:	68 eb ca 02 c0       	push   0xc002caeb
c0023a39:	e8 96 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a3e:	83 c4 10             	add    esp,0x10
c0023a41:	50                   	push   eax
c0023a42:	50                   	push   eax
c0023a43:	0f b6 c3             	movzx  eax,bl
c0023a46:	50                   	push   eax
c0023a47:	68 03 cb 02 c0       	push   0xc002cb03
c0023a4c:	e8 83 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023a51:	83 c4 10             	add    esp,0x10
c0023a54:	83 c4 1c             	add    esp,0x1c
c0023a57:	88 d8                	mov    al,bl
c0023a59:	5b                   	pop    ebx
c0023a5a:	5e                   	pop    esi
c0023a5b:	5f                   	pop    edi
c0023a5c:	5d                   	pop    ebp
c0023a5d:	c3                   	ret    

c0023a5e <IDE::polling(unsigned char, unsigned int)>:
c0023a5e:	57                   	push   edi
c0023a5f:	56                   	push   esi
c0023a60:	53                   	push   ebx
c0023a61:	bb 04 00 00 00       	mov    ebx,0x4
c0023a66:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023a6a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023a6f:	52                   	push   edx
c0023a70:	6a 0c                	push   0xc
c0023a72:	56                   	push   esi
c0023a73:	57                   	push   edi
c0023a74:	e8 f9 f4 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023a79:	83 c4 10             	add    esp,0x10
c0023a7c:	4b                   	dec    ebx
c0023a7d:	75 f0                	jne    c0023a6f <IDE::polling(unsigned char, unsigned int)+0x11>
c0023a7f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023a84:	50                   	push   eax
c0023a85:	6a 0c                	push   0xc
c0023a87:	56                   	push   esi
c0023a88:	57                   	push   edi
c0023a89:	e8 e4 f4 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023a8e:	83 c4 10             	add    esp,0x10
c0023a91:	a8 01                	test   al,0x1
c0023a93:	74 12                	je     c0023aa7 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023a95:	83 ec 0c             	sub    esp,0xc
c0023a98:	68 1d cb 02 c0       	push   0xc002cb1d
c0023a9d:	e8 32 f3 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023aa2:	83 c4 10             	add    esp,0x10
c0023aa5:	eb 17                	jmp    c0023abe <IDE::polling(unsigned char, unsigned int)+0x60>
c0023aa7:	a8 20                	test   al,0x20
c0023aa9:	75 0f                	jne    c0023aba <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023aab:	4b                   	dec    ebx
c0023aac:	74 10                	je     c0023abe <IDE::polling(unsigned char, unsigned int)+0x60>
c0023aae:	84 c0                	test   al,al
c0023ab0:	78 d2                	js     c0023a84 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ab2:	a8 08                	test   al,0x8
c0023ab4:	74 ce                	je     c0023a84 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ab6:	31 c0                	xor    eax,eax
c0023ab8:	eb 06                	jmp    c0023ac0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023aba:	b0 01                	mov    al,0x1
c0023abc:	eb 02                	jmp    c0023ac0 <IDE::polling(unsigned char, unsigned int)+0x62>
c0023abe:	b0 02                	mov    al,0x2
c0023ac0:	5b                   	pop    ebx
c0023ac1:	5e                   	pop    esi
c0023ac2:	5f                   	pop    edi
c0023ac3:	c3                   	ret    

c0023ac4 <SATABus::close(int, int, void*)>:
c0023ac4:	31 c0                	xor    eax,eax
c0023ac6:	c3                   	ret    
c0023ac7:	90                   	nop

c0023ac8 <SATABus::detect()>:
c0023ac8:	c3                   	ret    
c0023ac9:	90                   	nop

c0023aca <SATABus::SATABus()>:
c0023aca:	83 ec 0c             	sub    esp,0xc
c0023acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ad1:	83 ec 08             	sub    esp,0x8
c0023ad4:	68 60 cb 02 c0       	push   0xc002cb60
c0023ad9:	50                   	push   eax
c0023ada:	e8 a7 0a ff ff       	call   c0014586 <HardDiskController::HardDiskController(char const*)>
c0023adf:	83 c4 10             	add    esp,0x10
c0023ae2:	ba 1c cc 02 c0       	mov    edx,0xc002cc1c
c0023ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aeb:	89 10                	mov    DWORD PTR [eax],edx
c0023aed:	83 ec 0c             	sub    esp,0xc
c0023af0:	6a 50                	push   0x50
c0023af2:	e8 07 c5 fe ff       	call   c000fffe <Phys::allocateContiguousPages(int)>
c0023af7:	83 c4 10             	add    esp,0x10
c0023afa:	89 c2                	mov    edx,eax
c0023afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b00:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023b06:	83 ec 0c             	sub    esp,0xc
c0023b09:	6a 50                	push   0x50
c0023b0b:	e8 67 e0 fe ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0023b10:	83 c4 10             	add    esp,0x10
c0023b13:	89 c2                	mov    edx,eax
c0023b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b19:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023b1f:	e8 fa e2 fe ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0023b24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b28:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023b2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023b32:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023b38:	83 ec 0c             	sub    esp,0xc
c0023b3b:	6a 03                	push   0x3
c0023b3d:	6a 50                	push   0x50
c0023b3f:	51                   	push   ecx
c0023b40:	52                   	push   edx
c0023b41:	50                   	push   eax
c0023b42:	e8 ed e9 fe ff       	call   c0012534 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023b47:	83 c4 20             	add    esp,0x20
c0023b4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b4e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b58:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023b5e:	83 ec 04             	sub    esp,0x4
c0023b61:	52                   	push   edx
c0023b62:	50                   	push   eax
c0023b63:	68 84 cb 02 c0       	push   0xc002cb84
c0023b68:	e8 67 f2 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023b6d:	83 c4 10             	add    esp,0x10
c0023b70:	90                   	nop
c0023b71:	83 c4 0c             	add    esp,0xc
c0023b74:	c3                   	ret    
c0023b75:	90                   	nop

c0023b76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023b76:	83 ec 0c             	sub    esp,0xc
c0023b79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023b7d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023b80:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023b83:	09 c2                	or     edx,eax
c0023b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b89:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023b8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023b91:	31 c0                	xor    eax,eax
c0023b93:	c1 e9 08             	shr    ecx,0x8
c0023b96:	83 e1 0f             	and    ecx,0xf
c0023b99:	39 c8                	cmp    eax,ecx
c0023b9b:	74 0a                	je     c0023ba7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023b9d:	f6 c2 01             	test   dl,0x1
c0023ba0:	74 18                	je     c0023bba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ba2:	d1 ea                	shr    edx,1
c0023ba4:	40                   	inc    eax
c0023ba5:	eb f2                	jmp    c0023b99 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ba7:	83 ec 0c             	sub    esp,0xc
c0023baa:	68 a8 cb 02 c0       	push   0xc002cba8
c0023baf:	e8 c9 68 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0023bb4:	83 c4 10             	add    esp,0x10
c0023bb7:	83 c8 ff             	or     eax,0xffffffff
c0023bba:	83 c4 0c             	add    esp,0xc
c0023bbd:	c3                   	ret    

c0023bbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023bbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023bc2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023bc5:	89 c2                	mov    edx,eax
c0023bc7:	c1 ea 08             	shr    edx,0x8
c0023bca:	83 e2 0f             	and    edx,0xf
c0023bcd:	fe ca                	dec    dl
c0023bcf:	75 31                	jne    c0023c02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bd1:	83 e0 0f             	and    eax,0xf
c0023bd4:	3c 03                	cmp    al,0x3
c0023bd6:	75 2a                	jne    c0023c02 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023bd8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023bdb:	b8 02 00 00 00       	mov    eax,0x2
c0023be0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023be6:	74 1c                	je     c0023c04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023be8:	b8 04 00 00 00       	mov    eax,0x4
c0023bed:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023bf3:	74 0f                	je     c0023c04 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023bf5:	31 c0                	xor    eax,eax
c0023bf7:	83 fa 03             	cmp    edx,0x3
c0023bfa:	0f 94 c0             	sete   al
c0023bfd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023c01:	c3                   	ret    
c0023c02:	31 c0                	xor    eax,eax
c0023c04:	c3                   	ret    
c0023c05:	90                   	nop

c0023c06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c0d:	0f ba e2 0f          	bt     edx,0xf
c0023c11:	72 f7                	jb     c0023c0a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023c13:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c16:	83 ca 10             	or     edx,0x10
c0023c19:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c1f:	83 ca 01             	or     edx,0x1
c0023c22:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c25:	c3                   	ret    

c0023c26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023c26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023c2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c2d:	83 e2 fe             	and    edx,0xfffffffe
c0023c30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c36:	83 e2 ef             	and    edx,0xffffffef
c0023c39:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023c3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c3f:	0f ba e2 0e          	bt     edx,0xe
c0023c43:	72 f7                	jb     c0023c3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023c48:	0f ba e2 0f          	bt     edx,0xf
c0023c4c:	72 ee                	jb     c0023c3c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023c4e:	c3                   	ret    
c0023c4f:	90                   	nop

c0023c50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023c50:	55                   	push   ebp
c0023c51:	57                   	push   edi
c0023c52:	56                   	push   esi
c0023c53:	53                   	push   ebx
c0023c54:	83 ec 1c             	sub    esp,0x1c
c0023c57:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023c5b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023c5f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023c63:	53                   	push   ebx
c0023c64:	89 fd                	mov    ebp,edi
c0023c66:	56                   	push   esi
c0023c67:	c1 e5 0a             	shl    ebp,0xa
c0023c6a:	e8 b7 ff ff ff       	call   c0023c26 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023c6f:	83 ec 0c             	sub    esp,0xc
c0023c72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023c78:	01 e8                	add    eax,ebp
c0023c7a:	89 03                	mov    DWORD PTR [ebx],eax
c0023c7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023c7e:	68 00 04 00 00       	push   0x400
c0023c83:	6a 00                	push   0x0
c0023c85:	50                   	push   eax
c0023c86:	e8 ed ca fd ff       	call   c0000778 <memset>
c0023c8b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023c91:	89 fa                	mov    edx,edi
c0023c93:	01 e8                	add    eax,ebp
c0023c95:	c1 e7 0d             	shl    edi,0xd
c0023c98:	89 03                	mov    DWORD PTR [ebx],eax
c0023c9a:	c1 e2 08             	shl    edx,0x8
c0023c9d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ca4:	81 c2 00 80 00 00    	add    edx,0x8000
c0023caa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023cae:	89 d0                	mov    eax,edx
c0023cb0:	83 c4 1c             	add    esp,0x1c
c0023cb3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023cb9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023cbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023cbf:	68 00 01 00 00       	push   0x100
c0023cc4:	6a 00                	push   0x0
c0023cc6:	50                   	push   eax
c0023cc7:	e8 ac ca fd ff       	call   c0000778 <memset>
c0023ccc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023cd0:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023cd6:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023cdc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ce0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ce3:	83 c4 10             	add    esp,0x10
c0023ce6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023ced:	31 ff                	xor    edi,edi
c0023cef:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023cf5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023cfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023cff:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023d05:	83 c5 20             	add    ebp,0x20
c0023d08:	01 f8                	add    eax,edi
c0023d0a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d0d:	52                   	push   edx
c0023d0e:	68 00 01 00 00       	push   0x100
c0023d13:	6a 00                	push   0x0
c0023d15:	50                   	push   eax
c0023d16:	e8 5d ca fd ff       	call   c0000778 <memset>
c0023d1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023d1f:	83 c4 10             	add    esp,0x10
c0023d22:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023d28:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023d2f:	01 f8                	add    eax,edi
c0023d31:	81 c7 00 01 00 00    	add    edi,0x100
c0023d37:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023d3a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023d40:	75 b3                	jne    c0023cf5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023d42:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023d46:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023d4a:	83 c4 1c             	add    esp,0x1c
c0023d4d:	5b                   	pop    ebx
c0023d4e:	5e                   	pop    esi
c0023d4f:	5f                   	pop    edi
c0023d50:	5d                   	pop    ebp
c0023d51:	e9 b0 fe ff ff       	jmp    c0023c06 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023d56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023d56:	55                   	push   ebp
c0023d57:	57                   	push   edi
c0023d58:	56                   	push   esi
c0023d59:	53                   	push   ebx
c0023d5a:	31 db                	xor    ebx,ebx
c0023d5c:	83 ec 0c             	sub    esp,0xc
c0023d5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023d63:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023d67:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023d6a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023d70:	0f 84 aa 00 00 00    	je     c0023e20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023d76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023d7a:	89 d8                	mov    eax,ebx
c0023d7c:	c1 e0 07             	shl    eax,0x7
c0023d7f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023d86:	55                   	push   ebp
c0023d87:	56                   	push   esi
c0023d88:	e8 31 fe ff ff       	call   c0023bbe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023d8d:	5a                   	pop    edx
c0023d8e:	83 f8 01             	cmp    eax,0x1
c0023d91:	59                   	pop    ecx
c0023d92:	75 30                	jne    c0023dc4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023d94:	50                   	push   eax
c0023d95:	50                   	push   eax
c0023d96:	53                   	push   ebx
c0023d97:	68 cd cb 02 c0       	push   0xc002cbcd
c0023d9c:	e8 33 f0 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023da1:	83 c4 0c             	add    esp,0xc
c0023da4:	53                   	push   ebx
c0023da5:	55                   	push   ebp
c0023da6:	56                   	push   esi
c0023da7:	e8 a4 fe ff ff       	call   c0023c50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023dac:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023db3:	e8 88 ba fe ff       	call   c000f840 <malloc>
c0023db8:	89 c5                	mov    ebp,eax
c0023dba:	89 04 24             	mov    DWORD PTR [esp],eax
c0023dbd:	e8 60 0d 00 00       	call   c0024b22 <SATA::SATA()>
c0023dc2:	eb 33                	jmp    c0023df7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023dc4:	83 f8 04             	cmp    eax,0x4
c0023dc7:	75 47                	jne    c0023e10 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023dc9:	50                   	push   eax
c0023dca:	50                   	push   eax
c0023dcb:	53                   	push   ebx
c0023dcc:	68 e4 cb 02 c0       	push   0xc002cbe4
c0023dd1:	e8 fe ef fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023dd6:	83 c4 0c             	add    esp,0xc
c0023dd9:	53                   	push   ebx
c0023dda:	55                   	push   ebp
c0023ddb:	56                   	push   esi
c0023ddc:	e8 6f fe ff ff       	call   c0023c50 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023de1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023de8:	e8 53 ba fe ff       	call   c000f840 <malloc>
c0023ded:	89 c5                	mov    ebp,eax
c0023def:	89 04 24             	mov    DWORD PTR [esp],eax
c0023df2:	e8 d7 10 00 00       	call   c0024ece <SATAPI::SATAPI()>
c0023df7:	5a                   	pop    edx
c0023df8:	59                   	pop    ecx
c0023df9:	55                   	push   ebp
c0023dfa:	56                   	push   esi
c0023dfb:	e8 fa 03 ff ff       	call   c00141fa <Device::addChild(Device*)>
c0023e00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023e03:	56                   	push   esi
c0023e04:	6a 00                	push   0x0
c0023e06:	53                   	push   ebx
c0023e07:	55                   	push   ebp
c0023e08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023e0b:	83 c4 20             	add    esp,0x20
c0023e0e:	eb 10                	jmp    c0023e20 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023e10:	50                   	push   eax
c0023e11:	50                   	push   eax
c0023e12:	53                   	push   ebx
c0023e13:	68 fd cb 02 c0       	push   0xc002cbfd
c0023e18:	e8 b7 ef fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0023e1d:	83 c4 10             	add    esp,0x10
c0023e20:	d1 ef                	shr    edi,1
c0023e22:	43                   	inc    ebx
c0023e23:	83 fb 20             	cmp    ebx,0x20
c0023e26:	0f 85 3e ff ff ff    	jne    c0023d6a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023e2c:	83 c4 0c             	add    esp,0xc
c0023e2f:	5b                   	pop    ebx
c0023e30:	5e                   	pop    esi
c0023e31:	5f                   	pop    edi
c0023e32:	5d                   	pop    ebp
c0023e33:	c3                   	ret    

c0023e34 <SATABus::open(int, int, void*)>:
c0023e34:	83 ec 14             	sub    esp,0x14
c0023e37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e3b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023e41:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023e47:	52                   	push   edx
c0023e48:	50                   	push   eax
c0023e49:	e8 08 ff ff ff       	call   c0023d56 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023e4e:	31 c0                	xor    eax,eax
c0023e50:	83 c4 1c             	add    esp,0x1c
c0023e53:	c3                   	ret    

c0023e54 <ATA::close(int, int, void*)>:
c0023e54:	83 ec 0c             	sub    esp,0xc
c0023e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e5b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023e61:	85 c0                	test   eax,eax
c0023e63:	74 0c                	je     c0023e71 <ATA::close(int, int, void*)+0x1d>
c0023e65:	83 ec 0c             	sub    esp,0xc
c0023e68:	8b 10                	mov    edx,DWORD PTR [eax]
c0023e6a:	50                   	push   eax
c0023e6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023e6e:	83 c4 10             	add    esp,0x10
c0023e71:	31 c0                	xor    eax,eax
c0023e73:	83 c4 0c             	add    esp,0xc
c0023e76:	c3                   	ret    
c0023e77:	90                   	nop

c0023e78 <ATA::powerSaving(PowerSavingLevel)>:
c0023e78:	c3                   	ret    
c0023e79:	90                   	nop

c0023e7a <ATA::ATA()>:
c0023e7a:	83 ec 0c             	sub    esp,0xc
c0023e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e81:	83 ec 04             	sub    esp,0x4
c0023e84:	68 00 02 00 00       	push   0x200
c0023e89:	68 e5 cc 02 c0       	push   0xc002cce5
c0023e8e:	50                   	push   eax
c0023e8f:	e8 8a 07 ff ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023e94:	83 c4 10             	add    esp,0x10
c0023e97:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c0023e9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ea0:	89 10                	mov    DWORD PTR [eax],edx
c0023ea2:	90                   	nop
c0023ea3:	83 c4 0c             	add    esp,0xc
c0023ea6:	c3                   	ret    
c0023ea7:	90                   	nop

c0023ea8 <ATA::flush(bool)>:
c0023ea8:	53                   	push   ebx
c0023ea9:	83 ec 08             	sub    esp,0x8
c0023eac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023eb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023eb5:	19 c0                	sbb    eax,eax
c0023eb7:	83 e0 fd             	and    eax,0xfffffffd
c0023eba:	05 ea 00 00 00       	add    eax,0xea
c0023ebf:	50                   	push   eax
c0023ec0:	6a 07                	push   0x7
c0023ec2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ec9:	50                   	push   eax
c0023eca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ed0:	e8 dd ef ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ed5:	83 c4 0c             	add    esp,0xc
c0023ed8:	6a 00                	push   0x0
c0023eda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee1:	50                   	push   eax
c0023ee2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ee8:	e8 71 fb ff ff       	call   c0023a5e <IDE::polling(unsigned char, unsigned int)>
c0023eed:	83 c4 18             	add    esp,0x18
c0023ef0:	5b                   	pop    ebx
c0023ef1:	c3                   	ret    

c0023ef2 <ATA::readyForCommand()>:
c0023ef2:	56                   	push   esi
c0023ef3:	53                   	push   ebx
c0023ef4:	31 db                	xor    ebx,ebx
c0023ef6:	50                   	push   eax
c0023ef7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023efb:	50                   	push   eax
c0023efc:	6a 0c                	push   0xc
c0023efe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023f05:	50                   	push   eax
c0023f06:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023f0c:	e8 61 f0 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0023f11:	83 c4 10             	add    esp,0x10
c0023f14:	a8 88                	test   al,0x88
c0023f16:	74 23                	je     c0023f3b <ATA::readyForCommand()+0x49>
c0023f18:	43                   	inc    ebx
c0023f19:	83 fb 63             	cmp    ebx,0x63
c0023f1c:	7e dd                	jle    c0023efb <ATA::readyForCommand()+0x9>
c0023f1e:	51                   	push   ecx
c0023f1f:	51                   	push   ecx
c0023f20:	6a 00                	push   0x0
c0023f22:	68 40 42 0f 00       	push   0xf4240
c0023f27:	e8 9a a2 ff ff       	call   c001e1c6 <nanoSleep(unsigned long long)>
c0023f2c:	83 c4 10             	add    esp,0x10
c0023f2f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023f35:	75 c4                	jne    c0023efb <ATA::readyForCommand()+0x9>
c0023f37:	31 c0                	xor    eax,eax
c0023f39:	eb 02                	jmp    c0023f3d <ATA::readyForCommand()+0x4b>
c0023f3b:	b0 01                	mov    al,0x1
c0023f3d:	5a                   	pop    edx
c0023f3e:	5b                   	pop    ebx
c0023f3f:	5e                   	pop    esi
c0023f40:	c3                   	ret    
c0023f41:	90                   	nop

c0023f42 <ATA::access(unsigned long long, int, void*, bool)>:
c0023f42:	55                   	push   ebp
c0023f43:	57                   	push   edi
c0023f44:	56                   	push   esi
c0023f45:	53                   	push   ebx
c0023f46:	83 ec 2c             	sub    esp,0x2c
c0023f49:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023f4d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023f51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023f55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f59:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023f5d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023f61:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023f65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023f6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f6f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023f75:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023f79:	c1 e0 06             	shl    eax,0x6
c0023f7c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023f84:	74 5d                	je     c0023fe3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023f86:	89 fa                	mov    edx,edi
c0023f88:	89 f0                	mov    eax,esi
c0023f8a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023f8e:	c1 ea 1c             	shr    edx,0x1c
c0023f91:	89 d1                	mov    ecx,edx
c0023f93:	09 c1                	or     ecx,eax
c0023f95:	74 25                	je     c0023fbc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023f97:	31 ed                	xor    ebp,ebp
c0023f99:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023fa0:	89 fa                	mov    edx,edi
c0023fa2:	89 f0                	mov    eax,esi
c0023fa4:	0f ad d0             	shrd   eax,edx,cl
c0023fa7:	d3 ea                	shr    edx,cl
c0023fa9:	f6 c1 20             	test   cl,0x20
c0023fac:	74 02                	je     c0023fb0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023fae:	89 d0                	mov    eax,edx
c0023fb0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023fb4:	45                   	inc    ebp
c0023fb5:	83 fd 06             	cmp    ebp,0x6
c0023fb8:	75 df                	jne    c0023f99 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023fba:	eb 76                	jmp    c0024032 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023fbc:	89 f0                	mov    eax,esi
c0023fbe:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023fc3:	89 fa                	mov    edx,edi
c0023fc5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023fcc:	0f ac d0 10          	shrd   eax,edx,0x10
c0023fd0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023fd5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023fd9:	c1 ee 18             	shr    esi,0x18
c0023fdc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023fe1:	eb 56                	jmp    c0024039 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023fe3:	6a 00                	push   0x0
c0023fe5:	6a 3f                	push   0x3f
c0023fe7:	57                   	push   edi
c0023fe8:	56                   	push   esi
c0023fe9:	e8 8e 29 00 00       	call   c002697c <__umoddi3>
c0023fee:	83 c4 10             	add    esp,0x10
c0023ff1:	40                   	inc    eax
c0023ff2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ff6:	6a 00                	push   0x0
c0023ff8:	68 f0 03 00 00       	push   0x3f0
c0023ffd:	57                   	push   edi
c0023ffe:	56                   	push   esi
c0023fff:	e8 78 28 00 00       	call   c002687c <__udivdi3>
c0024004:	83 c4 10             	add    esp,0x10
c0024007:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002400c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024013:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024018:	6a 00                	push   0x0
c002401a:	6a 3f                	push   0x3f
c002401c:	57                   	push   edi
c002401d:	56                   	push   esi
c002401e:	e8 59 28 00 00       	call   c002687c <__udivdi3>
c0024023:	83 c4 10             	add    esp,0x10
c0024026:	89 c6                	mov    esi,eax
c0024028:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002402d:	83 e6 0f             	and    esi,0xf
c0024030:	eb 07                	jmp    c0024039 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024032:	31 f6                	xor    esi,esi
c0024034:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024039:	bf 01 00 00 00       	mov    edi,0x1
c002403e:	50                   	push   eax
c002403f:	6a 00                	push   0x0
c0024041:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024048:	50                   	push   eax
c0024049:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002404d:	e8 6c f0 ff ff       	call   c00230be <IDE::enableIRQs(unsigned char, bool)>
c0024052:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024055:	e8 98 fe ff ff       	call   c0023ef2 <ATA::readyForCommand()>
c002405a:	83 c4 10             	add    esp,0x10
c002405d:	84 c0                	test   al,al
c002405f:	0f 84 5a 02 00 00    	je     c00242bf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024065:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002406b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024071:	c1 e0 04             	shl    eax,0x4
c0024074:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002407b:	09 c6                	or     esi,eax
c002407d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024082:	75 05                	jne    c0024089 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024084:	83 ce a0             	or     esi,0xffffffa0
c0024087:	eb 03                	jmp    c002408c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024089:	83 ce e0             	or     esi,0xffffffe0
c002408c:	89 f0                	mov    eax,esi
c002408e:	0f b6 f0             	movzx  esi,al
c0024091:	56                   	push   esi
c0024092:	6a 06                	push   0x6
c0024094:	51                   	push   ecx
c0024095:	52                   	push   edx
c0024096:	e8 17 ee ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002409b:	83 c4 10             	add    esp,0x10
c002409e:	6a 00                	push   0x0
c00240a0:	6a 01                	push   0x1
c00240a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a9:	50                   	push   eax
c00240aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b0:	e8 fd ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b5:	83 c4 10             	add    esp,0x10
c00240b8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00240bd:	75 6e                	jne    c002412d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00240bf:	6a 00                	push   0x0
c00240c1:	6a 08                	push   0x8
c00240c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ca:	50                   	push   eax
c00240cb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d1:	e8 dc ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240d6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00240db:	50                   	push   eax
c00240dc:	6a 09                	push   0x9
c00240de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e5:	50                   	push   eax
c00240e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ec:	e8 c1 ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f1:	83 c4 20             	add    esp,0x20
c00240f4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00240f9:	50                   	push   eax
c00240fa:	6a 0a                	push   0xa
c00240fc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024103:	50                   	push   eax
c0024104:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002410a:	e8 a3 ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002410f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024114:	50                   	push   eax
c0024115:	6a 0b                	push   0xb
c0024117:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002411e:	50                   	push   eax
c002411f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024125:	e8 88 ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002412a:	83 c4 20             	add    esp,0x20
c002412d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024132:	50                   	push   eax
c0024133:	6a 02                	push   0x2
c0024135:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002413c:	50                   	push   eax
c002413d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024143:	e8 6a ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024148:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002414d:	50                   	push   eax
c002414e:	6a 03                	push   0x3
c0024150:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024157:	50                   	push   eax
c0024158:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002415e:	e8 4f ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024163:	83 c4 20             	add    esp,0x20
c0024166:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002416b:	50                   	push   eax
c002416c:	6a 04                	push   0x4
c002416e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024175:	50                   	push   eax
c0024176:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002417c:	e8 31 ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024181:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024186:	50                   	push   eax
c0024187:	6a 05                	push   0x5
c0024189:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024190:	50                   	push   eax
c0024191:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024197:	e8 16 ed ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002419c:	83 c4 20             	add    esp,0x20
c002419f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00241a4:	0f 94 c0             	sete   al
c00241a7:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00241ac:	74 09                	je     c00241b7 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00241ae:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00241b5:	eb 07                	jmp    c00241be <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00241b7:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00241be:	0f b6 c0             	movzx  eax,al
c00241c1:	50                   	push   eax
c00241c2:	6a 07                	push   0x7
c00241c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241cb:	50                   	push   eax
c00241cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241d2:	e8 db ec ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d7:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00241db:	83 c4 10             	add    esp,0x10
c00241de:	85 f6                	test   esi,esi
c00241e0:	0f 84 ba 00 00 00    	je     c00242a0 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00241e6:	50                   	push   eax
c00241e7:	6a 01                	push   0x1
c00241e9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241f0:	50                   	push   eax
c00241f1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241f7:	e8 62 f8 ff ff       	call   c0023a5e <IDE::polling(unsigned char, unsigned int)>
c00241fc:	83 c4 10             	add    esp,0x10
c00241ff:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024205:	84 c0                	test   al,al
c0024207:	74 2c                	je     c0024235 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024209:	0f b6 f8             	movzx  edi,al
c002420c:	0f b6 d2             	movzx  edx,dl
c002420f:	57                   	push   edi
c0024210:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024217:	50                   	push   eax
c0024218:	52                   	push   edx
c0024219:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002421f:	e8 a4 f6 ff ff       	call   c00238c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024224:	c7 04 24 40 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc40
c002422b:	e8 a4 eb fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024230:	e9 87 00 00 00       	jmp    c00242bc <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024235:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002423a:	74 33                	je     c002426f <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002423c:	31 ed                	xor    ebp,ebp
c002423e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024242:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024246:	50                   	push   eax
c0024247:	50                   	push   eax
c0024248:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002424f:	50                   	push   eax
c0024250:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024256:	e8 45 ec ff ff       	call   c0022ea0 <IDE::getBase(unsigned char)>
c002425b:	89 c2                	mov    edx,eax
c002425d:	89 f8                	mov    eax,edi
c002425f:	66 ef                	out    dx,ax
c0024261:	45                   	inc    ebp
c0024262:	83 c4 10             	add    esp,0x10
c0024265:	81 fd 00 01 00 00    	cmp    ebp,0x100
c002426b:	75 d1                	jne    c002423e <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002426d:	eb 23                	jmp    c0024292 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002426f:	0f b6 d2             	movzx  edx,dl
c0024272:	51                   	push   ecx
c0024273:	51                   	push   ecx
c0024274:	52                   	push   edx
c0024275:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002427b:	e8 20 ec ff ff       	call   c0022ea0 <IDE::getBase(unsigned char)>
c0024280:	b9 00 01 00 00       	mov    ecx,0x100
c0024285:	89 c2                	mov    edx,eax
c0024287:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002428b:	fc                   	cld    
c002428c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002428f:	83 c4 10             	add    esp,0x10
c0024292:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002429a:	4e                   	dec    esi
c002429b:	e9 3e ff ff ff       	jmp    c00241de <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00242a0:	31 ff                	xor    edi,edi
c00242a2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00242a7:	74 16                	je     c00242bf <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00242a9:	50                   	push   eax
c00242aa:	50                   	push   eax
c00242ab:	31 c0                	xor    eax,eax
c00242ad:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00242b2:	0f 94 c0             	sete   al
c00242b5:	50                   	push   eax
c00242b6:	53                   	push   ebx
c00242b7:	e8 ec fb ff ff       	call   c0023ea8 <ATA::flush(bool)>
c00242bc:	83 c4 10             	add    esp,0x10
c00242bf:	83 c4 2c             	add    esp,0x2c
c00242c2:	89 f8                	mov    eax,edi
c00242c4:	5b                   	pop    ebx
c00242c5:	5e                   	pop    esi
c00242c6:	5f                   	pop    edi
c00242c7:	5d                   	pop    ebp
c00242c8:	c3                   	ret    
c00242c9:	90                   	nop

c00242ca <ATA::read(unsigned long long, int, void*)>:
c00242ca:	57                   	push   edi
c00242cb:	b8 04 00 00 00       	mov    eax,0x4
c00242d0:	56                   	push   esi
c00242d1:	53                   	push   ebx
c00242d2:	83 ec 10             	sub    esp,0x10
c00242d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00242d9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00242dd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242e0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00242e8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242ee:	77 3b                	ja     c002432b <ATA::read(unsigned long long, int, void*)+0x61>
c00242f0:	b8 06 00 00 00       	mov    eax,0x6
c00242f5:	85 d2                	test   edx,edx
c00242f7:	74 32                	je     c002432b <ATA::read(unsigned long long, int, void*)+0x61>
c00242f9:	50                   	push   eax
c00242fa:	50                   	push   eax
c00242fb:	6a 00                	push   0x0
c00242fd:	52                   	push   edx
c00242fe:	53                   	push   ebx
c00242ff:	57                   	push   edi
c0024300:	56                   	push   esi
c0024301:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024305:	e8 38 fc ff ff       	call   c0023f42 <ATA::access(unsigned long long, int, void*, bool)>
c002430a:	83 c4 20             	add    esp,0x20
c002430d:	85 c0                	test   eax,eax
c002430f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024313:	75 11                	jne    c0024326 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024315:	01 1d e8 25 03 c0    	add    DWORD PTR ds:0xc00325e8,ebx
c002431b:	e8 ac c6 fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024320:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024324:	eb 05                	jmp    c002432b <ATA::read(unsigned long long, int, void*)+0x61>
c0024326:	b8 01 00 00 00       	mov    eax,0x1
c002432b:	83 c4 10             	add    esp,0x10
c002432e:	5b                   	pop    ebx
c002432f:	5e                   	pop    esi
c0024330:	5f                   	pop    edi
c0024331:	c3                   	ret    

c0024332 <ATA::write(unsigned long long, int, void*)>:
c0024332:	57                   	push   edi
c0024333:	b8 04 00 00 00       	mov    eax,0x4
c0024338:	56                   	push   esi
c0024339:	53                   	push   ebx
c002433a:	83 ec 10             	sub    esp,0x10
c002433d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024341:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024345:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024348:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002434c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024350:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024356:	77 3b                	ja     c0024393 <ATA::write(unsigned long long, int, void*)+0x61>
c0024358:	b8 06 00 00 00       	mov    eax,0x6
c002435d:	85 d2                	test   edx,edx
c002435f:	74 32                	je     c0024393 <ATA::write(unsigned long long, int, void*)+0x61>
c0024361:	50                   	push   eax
c0024362:	50                   	push   eax
c0024363:	6a 01                	push   0x1
c0024365:	52                   	push   edx
c0024366:	53                   	push   ebx
c0024367:	57                   	push   edi
c0024368:	56                   	push   esi
c0024369:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002436d:	e8 d0 fb ff ff       	call   c0023f42 <ATA::access(unsigned long long, int, void*, bool)>
c0024372:	83 c4 20             	add    esp,0x20
c0024375:	85 c0                	test   eax,eax
c0024377:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002437b:	75 11                	jne    c002438e <ATA::write(unsigned long long, int, void*)+0x5c>
c002437d:	01 1d e4 25 03 c0    	add    DWORD PTR ds:0xc00325e4,ebx
c0024383:	e8 44 c6 fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002438c:	eb 05                	jmp    c0024393 <ATA::write(unsigned long long, int, void*)+0x61>
c002438e:	b8 01 00 00 00       	mov    eax,0x1
c0024393:	83 c4 10             	add    esp,0x10
c0024396:	5b                   	pop    ebx
c0024397:	5e                   	pop    esi
c0024398:	5f                   	pop    edi
c0024399:	c3                   	ret    

c002439a <ATA::detectCHS()>:
c002439a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002439e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00243a4:	c1 e0 06             	shl    eax,0x6
c00243a7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00243ad:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00243b7:	c7 44 24 04 4b cc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cc4b
c00243bf:	e9 b9 60 ff ff       	jmp    c001a47d <Krnl::panic(char const*)>

c00243c4 <ATA::open(int, int, void*)>:
c00243c4:	53                   	push   ebx
c00243c5:	83 ec 08             	sub    esp,0x8
c00243c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00243cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00243d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243d4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00243da:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00243e0:	c1 e0 06             	shl    eax,0x6
c00243e3:	01 d0                	add    eax,edx
c00243e5:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00243ec:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00243f2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00243f9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024403:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024409:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024410:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024417:	75 0c                	jne    c0024425 <ATA::open(int, int, void*)+0x61>
c0024419:	83 ec 0c             	sub    esp,0xc
c002441c:	53                   	push   ebx
c002441d:	e8 78 ff ff ff       	call   c002439a <ATA::detectCHS()>
c0024422:	83 c4 10             	add    esp,0x10
c0024425:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002442b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024431:	c1 e0 06             	shl    eax,0x6
c0024434:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002443b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024445:	d1 e8                	shr    eax,1
c0024447:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002444d:	6a 04                	push   0x4
c002444f:	6a 0c                	push   0xc
c0024451:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024458:	50                   	push   eax
c0024459:	52                   	push   edx
c002445a:	e8 53 ea ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002445f:	90                   	nop
c0024460:	90                   	nop
c0024461:	6a 00                	push   0x0
c0024463:	6a 0c                	push   0xc
c0024465:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002446c:	50                   	push   eax
c002446d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024473:	e8 3a ea ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024478:	83 c4 14             	add    esp,0x14
c002447b:	53                   	push   ebx
c002447c:	e8 05 02 ff ff       	call   c0014686 <PhysicalDisk::startCache()>
c0024481:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024484:	e8 77 23 ff ff       	call   c0016800 <createPartitionsForDisk(PhysicalDisk*)>
c0024489:	31 c0                	xor    eax,eax
c002448b:	83 c4 18             	add    esp,0x18
c002448e:	5b                   	pop    ebx
c002448f:	c3                   	ret    

c0024490 <ATAPI::write(unsigned long long, int, void*)>:
c0024490:	b8 03 00 00 00       	mov    eax,0x3
c0024495:	c3                   	ret    

c0024496 <ATAPI::close(int, int, void*)>:
c0024496:	83 ec 0c             	sub    esp,0xc
c0024499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002449d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244a3:	85 c0                	test   eax,eax
c00244a5:	74 0c                	je     c00244b3 <ATAPI::close(int, int, void*)+0x1d>
c00244a7:	83 ec 0c             	sub    esp,0xc
c00244aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00244ac:	50                   	push   eax
c00244ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00244b0:	83 c4 10             	add    esp,0x10
c00244b3:	31 c0                	xor    eax,eax
c00244b5:	83 c4 0c             	add    esp,0xc
c00244b8:	c3                   	ret    
c00244b9:	90                   	nop

c00244ba <ATAPI::ATAPI()>:
c00244ba:	83 ec 0c             	sub    esp,0xc
c00244bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244c1:	83 ec 04             	sub    esp,0x4
c00244c4:	68 00 08 00 00       	push   0x800
c00244c9:	68 85 cd 02 c0       	push   0xc002cd85
c00244ce:	50                   	push   eax
c00244cf:	e8 4a 01 ff ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00244d4:	83 c4 10             	add    esp,0x10
c00244d7:	ba a0 cc 02 c0       	mov    edx,0xc002cca0
c00244dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e0:	89 10                	mov    DWORD PTR [eax],edx
c00244e2:	90                   	nop
c00244e3:	83 c4 0c             	add    esp,0xc
c00244e6:	c3                   	ret    
c00244e7:	90                   	nop

c00244e8 <ATAPI::readyForCommand()>:
c00244e8:	56                   	push   esi
c00244e9:	53                   	push   ebx
c00244ea:	31 db                	xor    ebx,ebx
c00244ec:	50                   	push   eax
c00244ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00244f1:	50                   	push   eax
c00244f2:	6a 0c                	push   0xc
c00244f4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00244fb:	50                   	push   eax
c00244fc:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024502:	e8 6b ea ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c0024507:	83 c4 10             	add    esp,0x10
c002450a:	a8 88                	test   al,0x88
c002450c:	74 23                	je     c0024531 <ATAPI::readyForCommand()+0x49>
c002450e:	43                   	inc    ebx
c002450f:	83 fb 63             	cmp    ebx,0x63
c0024512:	7e dd                	jle    c00244f1 <ATAPI::readyForCommand()+0x9>
c0024514:	51                   	push   ecx
c0024515:	51                   	push   ecx
c0024516:	6a 00                	push   0x0
c0024518:	68 40 42 0f 00       	push   0xf4240
c002451d:	e8 a4 9c ff ff       	call   c001e1c6 <nanoSleep(unsigned long long)>
c0024522:	83 c4 10             	add    esp,0x10
c0024525:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002452b:	75 c4                	jne    c00244f1 <ATAPI::readyForCommand()+0x9>
c002452d:	31 c0                	xor    eax,eax
c002452f:	eb 02                	jmp    c0024533 <ATAPI::readyForCommand()+0x4b>
c0024531:	b0 01                	mov    al,0x1
c0024533:	5a                   	pop    edx
c0024534:	5b                   	pop    ebx
c0024535:	5e                   	pop    esi
c0024536:	c3                   	ret    
c0024537:	90                   	nop

c0024538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024538:	55                   	push   ebp
c0024539:	57                   	push   edi
c002453a:	56                   	push   esi
c002453b:	53                   	push   ebx
c002453c:	83 ec 20             	sub    esp,0x20
c002453f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024543:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024547:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002454b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002454f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024553:	6a 01                	push   0x1
c0024555:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002455c:	50                   	push   eax
c002455d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024563:	e8 56 eb ff ff       	call   c00230be <IDE::enableIRQs(unsigned char, bool)>
c0024568:	5e                   	pop    esi
c0024569:	58                   	pop    eax
c002456a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024571:	50                   	push   eax
c0024572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024578:	e8 0f e9 ff ff       	call   c0022e8c <IDE::prepareInterrupt(unsigned char)>
c002457d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024580:	e8 63 ff ff ff       	call   c00244e8 <ATAPI::readyForCommand()>
c0024585:	83 c4 10             	add    esp,0x10
c0024588:	84 c0                	test   al,al
c002458a:	75 0a                	jne    c0024596 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002458c:	bb 01 00 00 00       	mov    ebx,0x1
c0024591:	e9 57 02 00 00       	jmp    c00247ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024596:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002459c:	c1 e0 04             	shl    eax,0x4
c002459f:	0f b6 c0             	movzx  eax,al
c00245a2:	50                   	push   eax
c00245a3:	6a 06                	push   0x6
c00245a5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245ac:	50                   	push   eax
c00245ad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245b3:	e8 fa e8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245b8:	6a 00                	push   0x0
c00245ba:	6a 01                	push   0x1
c00245bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245c3:	50                   	push   eax
c00245c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ca:	e8 e3 e8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245cf:	83 c4 20             	add    esp,0x20
c00245d2:	0f b6 c3             	movzx  eax,bl
c00245d5:	0f b6 df             	movzx  ebx,bh
c00245d8:	50                   	push   eax
c00245d9:	6a 04                	push   0x4
c00245db:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245e2:	50                   	push   eax
c00245e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245e9:	e8 c4 e8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00245ee:	53                   	push   ebx
c00245ef:	6a 05                	push   0x5
c00245f1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00245f8:	50                   	push   eax
c00245f9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245ff:	e8 ae e8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024604:	83 c4 20             	add    esp,0x20
c0024607:	68 a0 00 00 00       	push   0xa0
c002460c:	6a 07                	push   0x7
c002460e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024615:	50                   	push   eax
c0024616:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002461c:	e8 91 e8 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024621:	83 c4 0c             	add    esp,0xc
c0024624:	6a 01                	push   0x1
c0024626:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002462d:	50                   	push   eax
c002462e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024634:	e8 25 f4 ff ff       	call   c0023a5e <IDE::polling(unsigned char, unsigned int)>
c0024639:	83 c4 10             	add    esp,0x10
c002463c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024642:	84 c0                	test   al,al
c0024644:	74 23                	je     c0024669 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024646:	0f b6 d8             	movzx  ebx,al
c0024649:	0f b6 d2             	movzx  edx,dl
c002464c:	53                   	push   ebx
c002464d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024654:	50                   	push   eax
c0024655:	52                   	push   edx
c0024656:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002465c:	e8 67 f2 ff ff       	call   c00238c8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024661:	83 c4 10             	add    esp,0x10
c0024664:	e9 84 01 00 00       	jmp    c00247ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024669:	0f b6 d2             	movzx  edx,dl
c002466c:	53                   	push   ebx
c002466d:	53                   	push   ebx
c002466e:	52                   	push   edx
c002466f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024675:	e8 26 e8 ff ff       	call   c0022ea0 <IDE::getBase(unsigned char)>
c002467a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002467e:	b9 06 00 00 00       	mov    ecx,0x6
c0024683:	89 c2                	mov    edx,eax
c0024685:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024688:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002468c:	83 c4 10             	add    esp,0x10
c002468f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024695:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002469c:	85 db                	test   ebx,ebx
c002469e:	0f 84 ec 00 00 00    	je     c0024790 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00246a4:	51                   	push   ecx
c00246a5:	51                   	push   ecx
c00246a6:	52                   	push   edx
c00246a7:	50                   	push   eax
c00246a8:	e8 73 e9 ff ff       	call   c0023020 <IDE::waitInterrupt(unsigned char)>
c00246ad:	83 c4 10             	add    esp,0x10
c00246b0:	84 c0                	test   al,al
c00246b2:	0f 84 d4 fe ff ff    	je     c002458c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00246b8:	56                   	push   esi
c00246b9:	56                   	push   esi
c00246ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246c1:	50                   	push   eax
c00246c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246c8:	e8 bf e7 ff ff       	call   c0022e8c <IDE::prepareInterrupt(unsigned char)>
c00246cd:	83 c4 0c             	add    esp,0xc
c00246d0:	6a 04                	push   0x4
c00246d2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246d9:	50                   	push   eax
c00246da:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246e0:	e8 8d e8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00246e5:	83 c4 0c             	add    esp,0xc
c00246e8:	89 c6                	mov    esi,eax
c00246ea:	6a 05                	push   0x5
c00246ec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00246f3:	50                   	push   eax
c00246f4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00246fa:	e8 73 e8 ff ff       	call   c0022f72 <IDE::read(unsigned char, unsigned char)>
c00246ff:	89 f1                	mov    ecx,esi
c0024701:	0f b6 c0             	movzx  eax,al
c0024704:	0f b6 f1             	movzx  esi,cl
c0024707:	c1 e0 08             	shl    eax,0x8
c002470a:	09 c6                	or     esi,eax
c002470c:	d1 fe                	sar    esi,1
c002470e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024712:	83 c4 10             	add    esp,0x10
c0024715:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002471a:	74 41                	je     c002475d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002471c:	31 c9                	xor    ecx,ecx
c002471e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024724:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002472b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002472f:	75 0a                	jne    c002473b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0024731:	01 c9                	add    ecx,ecx
c0024733:	01 cd                	add    ebp,ecx
c0024735:	4b                   	dec    ebx
c0024736:	e9 54 ff ff ff       	jmp    c002468f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002473b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0024740:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024744:	51                   	push   ecx
c0024745:	51                   	push   ecx
c0024746:	52                   	push   edx
c0024747:	50                   	push   eax
c0024748:	e8 53 e7 ff ff       	call   c0022ea0 <IDE::getBase(unsigned char)>
c002474d:	89 c2                	mov    edx,eax
c002474f:	89 f0                	mov    eax,esi
c0024751:	66 ef                	out    dx,ax
c0024753:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024757:	83 c4 10             	add    esp,0x10
c002475a:	41                   	inc    ecx
c002475b:	eb c1                	jmp    c002471e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002475d:	31 f6                	xor    esi,esi
c002475f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024765:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002476c:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024770:	75 06                	jne    c0024778 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024772:	01 f6                	add    esi,esi
c0024774:	01 f5                	add    ebp,esi
c0024776:	eb bd                	jmp    c0024735 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024778:	51                   	push   ecx
c0024779:	51                   	push   ecx
c002477a:	52                   	push   edx
c002477b:	50                   	push   eax
c002477c:	e8 1f e7 ff ff       	call   c0022ea0 <IDE::getBase(unsigned char)>
c0024781:	89 c2                	mov    edx,eax
c0024783:	66 ed                	in     ax,dx
c0024785:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002478a:	83 c4 10             	add    esp,0x10
c002478d:	46                   	inc    esi
c002478e:	eb cf                	jmp    c002475f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024790:	51                   	push   ecx
c0024791:	51                   	push   ecx
c0024792:	52                   	push   edx
c0024793:	50                   	push   eax
c0024794:	e8 87 e8 ff ff       	call   c0023020 <IDE::waitInterrupt(unsigned char)>
c0024799:	83 c4 10             	add    esp,0x10
c002479c:	84 c0                	test   al,al
c002479e:	0f 84 e8 fd ff ff    	je     c002458c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00247a4:	bb a0 86 01 00       	mov    ebx,0x186a0
c00247a9:	52                   	push   edx
c00247aa:	52                   	push   edx
c00247ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b2:	50                   	push   eax
c00247b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b9:	e8 ce e6 ff ff       	call   c0022e8c <IDE::prepareInterrupt(unsigned char)>
c00247be:	83 c4 10             	add    esp,0x10
c00247c1:	50                   	push   eax
c00247c2:	50                   	push   eax
c00247c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247ca:	50                   	push   eax
c00247cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d1:	e8 ca e6 ff ff       	call   c0022ea0 <IDE::getBase(unsigned char)>
c00247d6:	8d 50 07             	lea    edx,[eax+0x7]
c00247d9:	ec                   	in     al,dx
c00247da:	83 c4 10             	add    esp,0x10
c00247dd:	a8 88                	test   al,0x88
c00247df:	74 0a                	je     c00247eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00247e1:	4b                   	dec    ebx
c00247e2:	75 dd                	jne    c00247c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00247e4:	bb 02 00 00 00       	mov    ebx,0x2
c00247e9:	eb 02                	jmp    c00247ed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247eb:	31 db                	xor    ebx,ebx
c00247ed:	83 c4 1c             	add    esp,0x1c
c00247f0:	89 d8                	mov    eax,ebx
c00247f2:	5b                   	pop    ebx
c00247f3:	5e                   	pop    esi
c00247f4:	5f                   	pop    edi
c00247f5:	5d                   	pop    ebp
c00247f6:	c3                   	ret    
c00247f7:	90                   	nop

c00247f8 <ATAPI::diskRemoved()>:
c00247f8:	83 ec 18             	sub    esp,0x18
c00247fb:	68 91 cd 02 c0       	push   0xc002cd91
c0024800:	e8 cf e5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024809:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024810:	83 c4 1c             	add    esp,0x1c
c0024813:	c3                   	ret    

c0024814 <ATAPI::eject()>:
c0024814:	57                   	push   edi
c0024815:	b9 03 00 00 00       	mov    ecx,0x3
c002481a:	53                   	push   ebx
c002481b:	83 ec 14             	sub    esp,0x14
c002481e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024822:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024826:	fc                   	cld    
c0024827:	31 c0                	xor    eax,eax
c0024829:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002482b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024830:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024835:	50                   	push   eax
c0024836:	50                   	push   eax
c0024837:	6a 00                	push   0x0
c0024839:	6a 00                	push   0x0
c002483b:	6a 00                	push   0x0
c002483d:	6a 02                	push   0x2
c002483f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024843:	50                   	push   eax
c0024844:	53                   	push   ebx
c0024845:	e8 ee fc ff ff       	call   c0024538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002484a:	83 c4 14             	add    esp,0x14
c002484d:	53                   	push   ebx
c002484e:	e8 a5 ff ff ff       	call   c00247f8 <ATAPI::diskRemoved()>
c0024853:	83 c4 24             	add    esp,0x24
c0024856:	31 c0                	xor    eax,eax
c0024858:	5b                   	pop    ebx
c0024859:	5f                   	pop    edi
c002485a:	c3                   	ret    
c002485b:	90                   	nop

c002485c <ATAPI::diskInserted()>:
c002485c:	53                   	push   ebx
c002485d:	83 ec 14             	sub    esp,0x14
c0024860:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024864:	68 a8 cd 02 c0       	push   0xc002cda8
c0024869:	e8 66 e5 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c002486e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024878:	e8 09 fe fe ff       	call   c0014686 <PhysicalDisk::startCache()>
c002487d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024881:	83 c4 18             	add    esp,0x18
c0024884:	5b                   	pop    ebx
c0024885:	e9 76 1f ff ff       	jmp    c0016800 <createPartitionsForDisk(PhysicalDisk*)>

c002488a <ATAPI::detectMedia()>:
c002488a:	56                   	push   esi
c002488b:	53                   	push   ebx
c002488c:	83 ec 28             	sub    esp,0x28
c002488f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024893:	6a 0c                	push   0xc
c0024895:	6a 00                	push   0x0
c0024897:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002489b:	56                   	push   esi
c002489c:	e8 d7 be fd ff       	call   c0000778 <memset>
c00248a1:	58                   	pop    eax
c00248a2:	5a                   	pop    edx
c00248a3:	6a 00                	push   0x0
c00248a5:	6a 00                	push   0x0
c00248a7:	6a 00                	push   0x0
c00248a9:	6a 00                	push   0x0
c00248ab:	56                   	push   esi
c00248ac:	53                   	push   ebx
c00248ad:	e8 86 fc ff ff       	call   c0024538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248b2:	83 c4 1c             	add    esp,0x1c
c00248b5:	6a 0c                	push   0xc
c00248b7:	6a 00                	push   0x0
c00248b9:	56                   	push   esi
c00248ba:	e8 b9 be fd ff       	call   c0000778 <memset>
c00248bf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00248c4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00248c9:	59                   	pop    ecx
c00248ca:	58                   	pop    eax
c00248cb:	6a 01                	push   0x1
c00248cd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00248d1:	50                   	push   eax
c00248d2:	6a 00                	push   0x0
c00248d4:	6a 12                	push   0x12
c00248d6:	56                   	push   esi
c00248d7:	53                   	push   ebx
c00248d8:	e8 5b fc ff ff       	call   c0024538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248dd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00248e1:	83 c4 20             	add    esp,0x20
c00248e4:	83 e0 7f             	and    eax,0x7f
c00248e7:	3c 70                	cmp    al,0x70
c00248e9:	74 15                	je     c0024900 <ATAPI::detectMedia()+0x76>
c00248eb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00248f2:	75 0c                	jne    c0024900 <ATAPI::detectMedia()+0x76>
c00248f4:	83 ec 0c             	sub    esp,0xc
c00248f7:	53                   	push   ebx
c00248f8:	e8 5f ff ff ff       	call   c002485c <ATAPI::diskInserted()>
c00248fd:	83 c4 10             	add    esp,0x10
c0024900:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024904:	83 e0 0f             	and    eax,0xf
c0024907:	3c 02                	cmp    al,0x2
c0024909:	75 1b                	jne    c0024926 <ATAPI::detectMedia()+0x9c>
c002490b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024910:	75 2d                	jne    c002493f <ATAPI::detectMedia()+0xb5>
c0024912:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024919:	74 24                	je     c002493f <ATAPI::detectMedia()+0xb5>
c002491b:	83 ec 0c             	sub    esp,0xc
c002491e:	53                   	push   ebx
c002491f:	e8 d4 fe ff ff       	call   c00247f8 <ATAPI::diskRemoved()>
c0024924:	eb 16                	jmp    c002493c <ATAPI::detectMedia()+0xb2>
c0024926:	84 c0                	test   al,al
c0024928:	75 15                	jne    c002493f <ATAPI::detectMedia()+0xb5>
c002492a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024931:	75 0c                	jne    c002493f <ATAPI::detectMedia()+0xb5>
c0024933:	83 ec 0c             	sub    esp,0xc
c0024936:	53                   	push   ebx
c0024937:	e8 20 ff ff ff       	call   c002485c <ATAPI::diskInserted()>
c002493c:	83 c4 10             	add    esp,0x10
c002493f:	83 c4 24             	add    esp,0x24
c0024942:	5b                   	pop    ebx
c0024943:	5e                   	pop    esi
c0024944:	c3                   	ret    
c0024945:	90                   	nop

c0024946 <ATAPI::open(int, int, void*)>:
c0024946:	53                   	push   ebx
c0024947:	83 ec 08             	sub    esp,0x8
c002494a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002494e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024956:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002495c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024962:	c1 e0 06             	shl    eax,0x6
c0024965:	01 d0                	add    eax,edx
c0024967:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002496e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024974:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002497b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024985:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002498b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024992:	6a 04                	push   0x4
c0024994:	6a 0c                	push   0xc
c0024996:	51                   	push   ecx
c0024997:	52                   	push   edx
c0024998:	e8 15 e5 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002499d:	90                   	nop
c002499e:	90                   	nop
c002499f:	6a 00                	push   0x0
c00249a1:	6a 0c                	push   0xc
c00249a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249aa:	50                   	push   eax
c00249ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249b1:	e8 fc e4 ff ff       	call   c0022eb2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249b6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00249bd:	83 c4 14             	add    esp,0x14
c00249c0:	53                   	push   ebx
c00249c1:	e8 c4 fe ff ff       	call   c002488a <ATAPI::detectMedia()>
c00249c6:	31 c0                	xor    eax,eax
c00249c8:	83 c4 18             	add    esp,0x18
c00249cb:	5b                   	pop    ebx
c00249cc:	c3                   	ret    
c00249cd:	90                   	nop

c00249ce <ATAPI::read(unsigned long long, int, void*)>:
c00249ce:	55                   	push   ebp
c00249cf:	57                   	push   edi
c00249d0:	56                   	push   esi
c00249d1:	53                   	push   ebx
c00249d2:	83 ec 1c             	sub    esp,0x1c
c00249d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00249e1:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00249e8:	74 41                	je     c0024a2b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00249ea:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00249ee:	b9 03 00 00 00       	mov    ecx,0x3
c00249f3:	fc                   	cld    
c00249f4:	31 c0                	xor    eax,eax
c00249f6:	86 fb                	xchg   bl,bh
c00249f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00249fa:	c1 c3 10             	rol    ebx,0x10
c00249fd:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024a02:	89 e8                	mov    eax,ebp
c0024a04:	86 fb                	xchg   bl,bh
c0024a06:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024a0a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024a0e:	50                   	push   eax
c0024a0f:	50                   	push   eax
c0024a10:	55                   	push   ebp
c0024a11:	c1 e5 0b             	shl    ebp,0xb
c0024a14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024a18:	6a 00                	push   0x0
c0024a1a:	55                   	push   ebp
c0024a1b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a1f:	50                   	push   eax
c0024a20:	56                   	push   esi
c0024a21:	e8 12 fb ff ff       	call   c0024538 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a26:	83 c4 20             	add    esp,0x20
c0024a29:	eb 1a                	jmp    c0024a45 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024a2b:	83 ec 0c             	sub    esp,0xc
c0024a2e:	56                   	push   esi
c0024a2f:	e8 56 fe ff ff       	call   c002488a <ATAPI::detectMedia()>
c0024a34:	83 c4 10             	add    esp,0x10
c0024a37:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024a3e:	75 aa                	jne    c00249ea <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024a40:	b8 02 00 00 00       	mov    eax,0x2
c0024a45:	83 c4 1c             	add    esp,0x1c
c0024a48:	5b                   	pop    ebx
c0024a49:	5e                   	pop    esi
c0024a4a:	5f                   	pop    edi
c0024a4b:	5d                   	pop    ebp
c0024a4c:	c3                   	ret    
c0024a4d:	90                   	nop

c0024a4e <SATA::close(int, int, void*)>:
c0024a4e:	83 ec 0c             	sub    esp,0xc
c0024a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024a55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024a5b:	85 c0                	test   eax,eax
c0024a5d:	74 0c                	je     c0024a6b <SATA::close(int, int, void*)+0x1d>
c0024a5f:	83 ec 0c             	sub    esp,0xc
c0024a62:	8b 10                	mov    edx,DWORD PTR [eax]
c0024a64:	50                   	push   eax
c0024a65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024a68:	83 c4 10             	add    esp,0x10
c0024a6b:	31 c0                	xor    eax,eax
c0024a6d:	83 c4 0c             	add    esp,0xc
c0024a70:	c3                   	ret    
c0024a71:	90                   	nop

c0024a72 <SATA::powerSaving(PowerSavingLevel)>:
c0024a72:	c3                   	ret    
c0024a73:	90                   	nop

c0024a74 <SATA::open(int, int, void*)>:
c0024a74:	56                   	push   esi
c0024a75:	53                   	push   ebx
c0024a76:	50                   	push   eax
c0024a77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a7f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024a89:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024a8f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024a99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024a9d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024aa7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024aad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ab4:	e8 24 b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024ab9:	89 c6                	mov    esi,eax
c0024abb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ac1:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ac7:	e8 11 b4 fe ff       	call   c000fedd <Phys::allocatePage()>
c0024acc:	39 c6                	cmp    esi,eax
c0024ace:	74 10                	je     c0024ae0 <SATA::open(int, int, void*)+0x6c>
c0024ad0:	83 ec 0c             	sub    esp,0xc
c0024ad3:	68 d0 cc 02 c0       	push   0xc002ccd0
c0024ad8:	e8 a0 59 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0024add:	83 c4 10             	add    esp,0x10
c0024ae0:	83 ec 0c             	sub    esp,0xc
c0024ae3:	6a 02                	push   0x2
c0024ae5:	e8 8d d0 fe ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c0024aea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024af0:	e8 29 d3 fe ff       	call   c0011e1e <Virt::getAKernelVAS()>
c0024af5:	6a 03                	push   0x3
c0024af7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024afd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024b03:	50                   	push   eax
c0024b04:	e8 37 d7 fe ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c0024b09:	83 c4 14             	add    esp,0x14
c0024b0c:	53                   	push   ebx
c0024b0d:	e8 74 fb fe ff       	call   c0014686 <PhysicalDisk::startCache()>
c0024b12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b15:	e8 e6 1c ff ff       	call   c0016800 <createPartitionsForDisk(PhysicalDisk*)>
c0024b1a:	83 c4 14             	add    esp,0x14
c0024b1d:	31 c0                	xor    eax,eax
c0024b1f:	5b                   	pop    ebx
c0024b20:	5e                   	pop    esi
c0024b21:	c3                   	ret    

c0024b22 <SATA::SATA()>:
c0024b22:	83 ec 0c             	sub    esp,0xc
c0024b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b29:	83 ec 04             	sub    esp,0x4
c0024b2c:	68 00 02 00 00       	push   0x200
c0024b31:	68 e4 cc 02 c0       	push   0xc002cce4
c0024b36:	50                   	push   eax
c0024b37:	e8 e2 fa fe ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024b3c:	83 c4 10             	add    esp,0x10
c0024b3f:	ba 54 cd 02 c0       	mov    edx,0xc002cd54
c0024b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b48:	89 10                	mov    DWORD PTR [eax],edx
c0024b4a:	90                   	nop
c0024b4b:	83 c4 0c             	add    esp,0xc
c0024b4e:	c3                   	ret    
c0024b4f:	90                   	nop

c0024b50 <SATA::access(unsigned long long, int, void*, bool)>:
c0024b50:	55                   	push   ebp
c0024b51:	57                   	push   edi
c0024b52:	56                   	push   esi
c0024b53:	53                   	push   ebx
c0024b54:	83 ec 2c             	sub    esp,0x2c
c0024b57:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024b5b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024b5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024b63:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024b67:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024b6b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024b70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024b74:	7e 10                	jle    c0024b86 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024b76:	83 ec 0c             	sub    esp,0xc
c0024b79:	68 f4 cc 02 c0       	push   0xc002ccf4
c0024b7e:	e8 fa 58 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0024b83:	83 c4 10             	add    esp,0x10
c0024b86:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024b8c:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024b92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b9c:	89 f0                	mov    eax,esi
c0024b9e:	c1 e0 07             	shl    eax,0x7
c0024ba1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024ba5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024baf:	53                   	push   ebx
c0024bb0:	8d 46 02             	lea    eax,[esi+0x2]
c0024bb3:	53                   	push   ebx
c0024bb4:	c1 e0 07             	shl    eax,0x7
c0024bb7:	bb 01 00 00 00       	mov    ebx,0x1
c0024bbc:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024bc0:	50                   	push   eax
c0024bc1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024bc7:	e8 aa ef ff ff       	call   c0023b76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024bcc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024bd0:	83 c4 10             	add    esp,0x10
c0024bd3:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024bd8:	0f 84 ce 01 00 00    	je     c0024dac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024bde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024be2:	c1 e0 09             	shl    eax,0x9
c0024be5:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024bea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024bee:	74 17                	je     c0024c07 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024bf0:	51                   	push   ecx
c0024bf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024bf5:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024bf9:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024bff:	e8 40 bb fd ff       	call   c0000744 <memcpy>
c0024c04:	83 c4 10             	add    esp,0x10
c0024c07:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c0d:	8d 46 02             	lea    eax,[esi+0x2]
c0024c10:	c1 e0 07             	shl    eax,0x7
c0024c13:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024c17:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c19:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024c1f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024c25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c29:	c1 e1 05             	shl    ecx,0x5
c0024c2c:	01 c8                	add    eax,ecx
c0024c2e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024c32:	8a 18                	mov    bl,BYTE PTR [eax]
c0024c34:	83 e1 01             	and    ecx,0x1
c0024c37:	83 e3 bf             	and    ebx,0xffffffbf
c0024c3a:	c1 e1 06             	shl    ecx,0x6
c0024c3d:	09 d9                	or     ecx,ebx
c0024c3f:	88 08                	mov    BYTE PTR [eax],cl
c0024c41:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024c43:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024c49:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024c4f:	89 08                	mov    DWORD PTR [eax],ecx
c0024c51:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024c57:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024c5d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024c63:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024c66:	52                   	push   edx
c0024c67:	68 90 00 00 00       	push   0x90
c0024c6c:	6a 00                	push   0x0
c0024c6e:	53                   	push   ebx
c0024c6f:	e8 04 bb fd ff       	call   c0000778 <memset>
c0024c74:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024c7a:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024c7e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024c84:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024c88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024c8c:	83 c4 10             	add    esp,0x10
c0024c8f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024c92:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024c98:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024c9e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ca3:	09 c8                	or     eax,ecx
c0024ca5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024cab:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024cae:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024cb5:	66 25 00 7f          	and    ax,0x7f00
c0024cb9:	66 0d 27 80          	or     ax,0x8027
c0024cbd:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024cc2:	66 89 03             	mov    WORD PTR [ebx],ax
c0024cc5:	19 c0                	sbb    eax,eax
c0024cc7:	83 e0 f0             	and    eax,0xfffffff0
c0024cca:	83 c0 35             	add    eax,0x35
c0024ccd:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024cd0:	89 f8                	mov    eax,edi
c0024cd2:	c1 e8 10             	shr    eax,0x10
c0024cd5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024cd8:	89 f8                	mov    eax,edi
c0024cda:	c1 e8 18             	shr    eax,0x18
c0024cdd:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ce0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ce4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ce7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ceb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024cee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024cf2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024cf6:	89 f3                	mov    ebx,esi
c0024cf8:	31 c0                	xor    eax,eax
c0024cfa:	c1 e3 07             	shl    ebx,0x7
c0024cfd:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024d01:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024d07:	80 e1 88             	and    cl,0x88
c0024d0a:	74 0a                	je     c0024d16 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024d0c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d11:	74 0a                	je     c0024d1d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024d13:	40                   	inc    eax
c0024d14:	eb eb                	jmp    c0024d01 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024d16:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d1b:	75 0a                	jne    c0024d27 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024d1d:	83 ec 0c             	sub    esp,0xc
c0024d20:	68 2d cd 02 c0       	push   0xc002cd2d
c0024d25:	eb 56                	jmp    c0024d7d <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024d27:	b8 01 00 00 00       	mov    eax,0x1
c0024d2c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024d30:	c1 e6 07             	shl    esi,0x7
c0024d33:	d3 e0                	shl    eax,cl
c0024d35:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024d39:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024d3f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024d45:	85 c8                	test   eax,ecx
c0024d47:	74 20                	je     c0024d69 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024d49:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024d4f:	0f ba e1 1e          	bt     ecx,0x1e
c0024d53:	73 ea                	jae    c0024d3f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024d55:	83 ec 0c             	sub    esp,0xc
c0024d58:	31 db                	xor    ebx,ebx
c0024d5a:	68 3b cd 02 c0       	push   0xc002cd3b
c0024d5f:	e8 19 57 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0024d64:	83 c4 10             	add    esp,0x10
c0024d67:	eb 43                	jmp    c0024dac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d69:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024d6f:	0f ba e0 1e          	bt     eax,0x1e
c0024d73:	73 17                	jae    c0024d8c <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024d75:	83 ec 0c             	sub    esp,0xc
c0024d78:	68 3b cd 02 c0       	push   0xc002cd3b
c0024d7d:	e8 fb 56 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0024d82:	bb 01 00 00 00       	mov    ebx,0x1
c0024d87:	83 c4 10             	add    esp,0x10
c0024d8a:	eb 20                	jmp    c0024dac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d8c:	31 db                	xor    ebx,ebx
c0024d8e:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024d93:	75 17                	jne    c0024dac <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024d95:	50                   	push   eax
c0024d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d9a:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024da0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024da4:	e8 9b b9 fd ff       	call   c0000744 <memcpy>
c0024da9:	83 c4 10             	add    esp,0x10
c0024dac:	83 c4 2c             	add    esp,0x2c
c0024daf:	89 d8                	mov    eax,ebx
c0024db1:	5b                   	pop    ebx
c0024db2:	5e                   	pop    esi
c0024db3:	5f                   	pop    edi
c0024db4:	5d                   	pop    ebp
c0024db5:	c3                   	ret    

c0024db6 <SATA::read(unsigned long long, int, void*)>:
c0024db6:	57                   	push   edi
c0024db7:	b8 04 00 00 00       	mov    eax,0x4
c0024dbc:	56                   	push   esi
c0024dbd:	53                   	push   ebx
c0024dbe:	83 ec 10             	sub    esp,0x10
c0024dc1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024dc5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024dc9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024dcc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024dd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024dd4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024dda:	77 3b                	ja     c0024e17 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ddc:	b8 06 00 00 00       	mov    eax,0x6
c0024de1:	85 d2                	test   edx,edx
c0024de3:	74 32                	je     c0024e17 <SATA::read(unsigned long long, int, void*)+0x61>
c0024de5:	50                   	push   eax
c0024de6:	50                   	push   eax
c0024de7:	6a 00                	push   0x0
c0024de9:	52                   	push   edx
c0024dea:	53                   	push   ebx
c0024deb:	57                   	push   edi
c0024dec:	56                   	push   esi
c0024ded:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024df1:	e8 5a fd ff ff       	call   c0024b50 <SATA::access(unsigned long long, int, void*, bool)>
c0024df6:	83 c4 20             	add    esp,0x20
c0024df9:	85 c0                	test   eax,eax
c0024dfb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024dff:	75 11                	jne    c0024e12 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024e01:	01 1d e8 25 03 c0    	add    DWORD PTR ds:0xc00325e8,ebx
c0024e07:	e8 c0 bb fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024e0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024e10:	eb 05                	jmp    c0024e17 <SATA::read(unsigned long long, int, void*)+0x61>
c0024e12:	b8 01 00 00 00       	mov    eax,0x1
c0024e17:	83 c4 10             	add    esp,0x10
c0024e1a:	5b                   	pop    ebx
c0024e1b:	5e                   	pop    esi
c0024e1c:	5f                   	pop    edi
c0024e1d:	c3                   	ret    

c0024e1e <SATA::write(unsigned long long, int, void*)>:
c0024e1e:	55                   	push   ebp
c0024e1f:	b8 04 00 00 00       	mov    eax,0x4
c0024e24:	57                   	push   edi
c0024e25:	56                   	push   esi
c0024e26:	53                   	push   ebx
c0024e27:	83 ec 1c             	sub    esp,0x1c
c0024e2a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024e2e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024e32:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024e35:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024e39:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024e3d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024e43:	77 56                	ja     c0024e9b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e45:	b8 06 00 00 00       	mov    eax,0x6
c0024e4a:	85 ff                	test   edi,edi
c0024e4c:	74 4d                	je     c0024e9b <SATA::write(unsigned long long, int, void*)+0x7d>
c0024e4e:	89 ee                	mov    esi,ebp
c0024e50:	c1 e6 09             	shl    esi,0x9
c0024e53:	01 fe                	add    esi,edi
c0024e55:	89 c8                	mov    eax,ecx
c0024e57:	89 da                	mov    edx,ebx
c0024e59:	83 c0 01             	add    eax,0x1
c0024e5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024e60:	83 d2 00             	adc    edx,0x0
c0024e63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024e67:	50                   	push   eax
c0024e68:	50                   	push   eax
c0024e69:	6a 01                	push   0x1
c0024e6b:	57                   	push   edi
c0024e6c:	81 c7 00 02 00 00    	add    edi,0x200
c0024e72:	6a 01                	push   0x1
c0024e74:	53                   	push   ebx
c0024e75:	51                   	push   ecx
c0024e76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024e7a:	e8 d1 fc ff ff       	call   c0024b50 <SATA::access(unsigned long long, int, void*, bool)>
c0024e7f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024e83:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024e87:	83 c4 20             	add    esp,0x20
c0024e8a:	39 f7                	cmp    edi,esi
c0024e8c:	75 c7                	jne    c0024e55 <SATA::write(unsigned long long, int, void*)+0x37>
c0024e8e:	01 2d e4 25 03 c0    	add    DWORD PTR ds:0xc00325e4,ebp
c0024e94:	e8 33 bb fe ff       	call   c00109cc <VgaText::updateDiskUsage()>
c0024e99:	31 c0                	xor    eax,eax
c0024e9b:	83 c4 1c             	add    esp,0x1c
c0024e9e:	5b                   	pop    ebx
c0024e9f:	5e                   	pop    esi
c0024ea0:	5f                   	pop    edi
c0024ea1:	5d                   	pop    ebp
c0024ea2:	c3                   	ret    
c0024ea3:	90                   	nop

c0024ea4 <SATAPI::write(unsigned long long, int, void*)>:
c0024ea4:	b8 03 00 00 00       	mov    eax,0x3
c0024ea9:	c3                   	ret    

c0024eaa <SATAPI::close(int, int, void*)>:
c0024eaa:	83 ec 0c             	sub    esp,0xc
c0024ead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024eb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024eb7:	85 c0                	test   eax,eax
c0024eb9:	74 0c                	je     c0024ec7 <SATAPI::close(int, int, void*)+0x1d>
c0024ebb:	83 ec 0c             	sub    esp,0xc
c0024ebe:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ec0:	50                   	push   eax
c0024ec1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ec4:	83 c4 10             	add    esp,0x10
c0024ec7:	31 c0                	xor    eax,eax
c0024ec9:	83 c4 0c             	add    esp,0xc
c0024ecc:	c3                   	ret    
c0024ecd:	90                   	nop

c0024ece <SATAPI::SATAPI()>:
c0024ece:	83 ec 0c             	sub    esp,0xc
c0024ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ed5:	83 ec 04             	sub    esp,0x4
c0024ed8:	68 00 08 00 00       	push   0x800
c0024edd:	68 84 cd 02 c0       	push   0xc002cd84
c0024ee2:	50                   	push   eax
c0024ee3:	e8 36 f7 fe ff       	call   c001461e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024ee8:	83 c4 10             	add    esp,0x10
c0024eeb:	ba 30 ce 02 c0       	mov    edx,0xc002ce30
c0024ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ef4:	89 10                	mov    DWORD PTR [eax],edx
c0024ef6:	90                   	nop
c0024ef7:	83 c4 0c             	add    esp,0xc
c0024efa:	c3                   	ret    
c0024efb:	90                   	nop

c0024efc <SATAPI::diskRemoved()>:
c0024efc:	83 ec 18             	sub    esp,0x18
c0024eff:	68 90 cd 02 c0       	push   0xc002cd90
c0024f04:	e8 cb de fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024f0d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024f14:	83 c4 1c             	add    esp,0x1c
c0024f17:	c3                   	ret    

c0024f18 <SATAPI::diskInserted()>:
c0024f18:	53                   	push   ebx
c0024f19:	83 ec 14             	sub    esp,0x14
c0024f1c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024f20:	68 a7 cd 02 c0       	push   0xc002cda7
c0024f25:	e8 aa de fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0024f2a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024f31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f34:	e8 4d f7 fe ff       	call   c0014686 <PhysicalDisk::startCache()>
c0024f39:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024f3d:	83 c4 18             	add    esp,0x18
c0024f40:	5b                   	pop    ebx
c0024f41:	e9 ba 18 ff ff       	jmp    c0016800 <createPartitionsForDisk(PhysicalDisk*)>

c0024f46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024f46:	55                   	push   ebp
c0024f47:	57                   	push   edi
c0024f48:	56                   	push   esi
c0024f49:	53                   	push   ebx
c0024f4a:	83 ec 24             	sub    esp,0x24
c0024f4d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024f51:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024f55:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024f5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024f5f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f63:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024f69:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024f6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024f72:	c1 e3 07             	shl    ebx,0x7
c0024f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024f79:	89 f8                	mov    eax,edi
c0024f7b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024f7f:	c1 e0 07             	shl    eax,0x7
c0024f82:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f86:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024f8a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024f94:	53                   	push   ebx
c0024f95:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024f9b:	e8 d6 eb ff ff       	call   c0023b76 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024fa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024fa4:	83 c4 10             	add    esp,0x10
c0024fa7:	b8 01 00 00 00       	mov    eax,0x1
c0024fac:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024fb1:	0f 84 8a 01 00 00    	je     c0025141 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024fb7:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024fbf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024fc5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024fcb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024fcf:	c1 e1 05             	shl    ecx,0x5
c0024fd2:	01 c8                	add    eax,ecx
c0024fd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024fd6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024fdc:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024fe2:	89 08                	mov    DWORD PTR [eax],ecx
c0024fe4:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024fea:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024ff0:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ff6:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ff9:	52                   	push   edx
c0024ffa:	68 90 00 00 00       	push   0x90
c0024fff:	6a 00                	push   0x0
c0025001:	53                   	push   ebx
c0025002:	e8 71 b7 fd ff       	call   c0000778 <memset>
c0025007:	83 c4 0c             	add    esp,0xc
c002500a:	8d 43 40             	lea    eax,[ebx+0x40]
c002500d:	6a 0c                	push   0xc
c002500f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025013:	50                   	push   eax
c0025014:	e8 2b b7 fd ff       	call   c0000744 <memcpy>
c0025019:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002501f:	89 ea                	mov    edx,ebp
c0025021:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025027:	c1 ea 18             	shr    edx,0x18
c002502a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002502e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025031:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025034:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025038:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002503e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025044:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025049:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002504d:	09 c8                	or     eax,ecx
c002504f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025053:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025059:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002505c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025063:	66 25 00 7f          	and    ax,0x7f00
c0025067:	66 0d 27 80          	or     ax,0x8027
c002506b:	66 89 03             	mov    WORD PTR [ebx],ax
c002506e:	89 e8                	mov    eax,ebp
c0025070:	c1 e8 10             	shr    eax,0x10
c0025073:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025076:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c002507a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002507d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025081:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025084:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025088:	83 c4 10             	add    esp,0x10
c002508b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002508f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025093:	31 c0                	xor    eax,eax
c0025095:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002509b:	80 e1 88             	and    cl,0x88
c002509e:	74 0a                	je     c00250aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00250a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250a5:	74 0a                	je     c00250b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00250a7:	40                   	inc    eax
c00250a8:	eb eb                	jmp    c0025095 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00250aa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00250af:	75 0f                	jne    c00250c0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00250b1:	83 ec 0c             	sub    esp,0xc
c00250b4:	68 2d cd 02 c0       	push   0xc002cd2d
c00250b9:	e8 bf 53 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00250be:	eb 3a                	jmp    c00250fa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00250c0:	b8 01 00 00 00       	mov    eax,0x1
c00250c5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00250c9:	c1 e7 07             	shl    edi,0x7
c00250cc:	d3 e0                	shl    eax,cl
c00250ce:	03 3c 24             	add    edi,DWORD PTR [esp]
c00250d1:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00250d7:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00250dd:	85 d0                	test   eax,edx
c00250df:	74 23                	je     c0025104 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00250e1:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00250e7:	0f ba e2 1e          	bt     edx,0x1e
c00250eb:	73 ea                	jae    c00250d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00250ed:	83 ec 0c             	sub    esp,0xc
c00250f0:	68 bf cd 02 c0       	push   0xc002cdbf
c00250f5:	e8 da dc fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00250fa:	83 c4 10             	add    esp,0x10
c00250fd:	b8 01 00 00 00       	mov    eax,0x1
c0025102:	eb 3d                	jmp    c0025141 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025104:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002510a:	0f ba e0 1e          	bt     eax,0x1e
c002510e:	73 0a                	jae    c002511a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025110:	83 ec 0c             	sub    esp,0xc
c0025113:	68 d2 cd 02 c0       	push   0xc002cdd2
c0025118:	eb db                	jmp    c00250f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c002511a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002511f:	74 1e                	je     c002513f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025121:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025126:	74 17                	je     c002513f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025128:	50                   	push   eax
c0025129:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002512d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025133:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025137:	e8 08 b6 fd ff       	call   c0000744 <memcpy>
c002513c:	83 c4 10             	add    esp,0x10
c002513f:	31 c0                	xor    eax,eax
c0025141:	83 c4 1c             	add    esp,0x1c
c0025144:	5b                   	pop    ebx
c0025145:	5e                   	pop    esi
c0025146:	5f                   	pop    edi
c0025147:	5d                   	pop    ebp
c0025148:	c3                   	ret    
c0025149:	90                   	nop

c002514a <SATAPI::eject()>:
c002514a:	57                   	push   edi
c002514b:	b9 03 00 00 00       	mov    ecx,0x3
c0025150:	53                   	push   ebx
c0025151:	83 ec 14             	sub    esp,0x14
c0025154:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025158:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002515c:	fc                   	cld    
c002515d:	31 c0                	xor    eax,eax
c002515f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025161:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025166:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002516b:	50                   	push   eax
c002516c:	6a 00                	push   0x0
c002516e:	6a 00                	push   0x0
c0025170:	6a 00                	push   0x0
c0025172:	6a 00                	push   0x0
c0025174:	6a 02                	push   0x2
c0025176:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002517a:	50                   	push   eax
c002517b:	53                   	push   ebx
c002517c:	e8 c5 fd ff ff       	call   c0024f46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025181:	83 c4 14             	add    esp,0x14
c0025184:	53                   	push   ebx
c0025185:	e8 72 fd ff ff       	call   c0024efc <SATAPI::diskRemoved()>
c002518a:	83 c4 24             	add    esp,0x24
c002518d:	31 c0                	xor    eax,eax
c002518f:	5b                   	pop    ebx
c0025190:	5f                   	pop    edi
c0025191:	c3                   	ret    

c0025192 <SATAPI::detectMedia()>:
c0025192:	56                   	push   esi
c0025193:	53                   	push   ebx
c0025194:	83 ec 28             	sub    esp,0x28
c0025197:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002519b:	6a 0c                	push   0xc
c002519d:	6a 00                	push   0x0
c002519f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251a3:	56                   	push   esi
c00251a4:	e8 cf b5 fd ff       	call   c0000778 <memset>
c00251a9:	83 c4 0c             	add    esp,0xc
c00251ac:	6a 00                	push   0x0
c00251ae:	6a 00                	push   0x0
c00251b0:	6a 00                	push   0x0
c00251b2:	6a 00                	push   0x0
c00251b4:	6a 00                	push   0x0
c00251b6:	56                   	push   esi
c00251b7:	53                   	push   ebx
c00251b8:	e8 89 fd ff ff       	call   c0024f46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251bd:	83 c4 1c             	add    esp,0x1c
c00251c0:	6a 0c                	push   0xc
c00251c2:	6a 00                	push   0x0
c00251c4:	56                   	push   esi
c00251c5:	e8 ae b5 fd ff       	call   c0000778 <memset>
c00251ca:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251cf:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251d4:	83 c4 0c             	add    esp,0xc
c00251d7:	6a 01                	push   0x1
c00251d9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00251dd:	50                   	push   eax
c00251de:	6a 00                	push   0x0
c00251e0:	6a 00                	push   0x0
c00251e2:	6a 12                	push   0x12
c00251e4:	56                   	push   esi
c00251e5:	53                   	push   ebx
c00251e6:	e8 5b fd ff ff       	call   c0024f46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00251eb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00251ef:	83 c4 20             	add    esp,0x20
c00251f2:	83 e0 7f             	and    eax,0x7f
c00251f5:	3c 70                	cmp    al,0x70
c00251f7:	74 15                	je     c002520e <SATAPI::detectMedia()+0x7c>
c00251f9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025200:	75 0c                	jne    c002520e <SATAPI::detectMedia()+0x7c>
c0025202:	83 ec 0c             	sub    esp,0xc
c0025205:	53                   	push   ebx
c0025206:	e8 0d fd ff ff       	call   c0024f18 <SATAPI::diskInserted()>
c002520b:	83 c4 10             	add    esp,0x10
c002520e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025212:	83 e0 0f             	and    eax,0xf
c0025215:	3c 02                	cmp    al,0x2
c0025217:	75 1b                	jne    c0025234 <SATAPI::detectMedia()+0xa2>
c0025219:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002521e:	75 2d                	jne    c002524d <SATAPI::detectMedia()+0xbb>
c0025220:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025227:	74 24                	je     c002524d <SATAPI::detectMedia()+0xbb>
c0025229:	83 ec 0c             	sub    esp,0xc
c002522c:	53                   	push   ebx
c002522d:	e8 ca fc ff ff       	call   c0024efc <SATAPI::diskRemoved()>
c0025232:	eb 16                	jmp    c002524a <SATAPI::detectMedia()+0xb8>
c0025234:	84 c0                	test   al,al
c0025236:	75 15                	jne    c002524d <SATAPI::detectMedia()+0xbb>
c0025238:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002523f:	75 0c                	jne    c002524d <SATAPI::detectMedia()+0xbb>
c0025241:	83 ec 0c             	sub    esp,0xc
c0025244:	53                   	push   ebx
c0025245:	e8 ce fc ff ff       	call   c0024f18 <SATAPI::diskInserted()>
c002524a:	83 c4 10             	add    esp,0x10
c002524d:	83 c4 24             	add    esp,0x24
c0025250:	5b                   	pop    ebx
c0025251:	5e                   	pop    esi
c0025252:	c3                   	ret    
c0025253:	90                   	nop

c0025254 <SATAPI::open(int, int, void*)>:
c0025254:	56                   	push   esi
c0025255:	53                   	push   ebx
c0025256:	50                   	push   eax
c0025257:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002525b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002525f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025269:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002526f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002527d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025287:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002528d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025294:	e8 44 ac fe ff       	call   c000fedd <Phys::allocatePage()>
c0025299:	89 c6                	mov    esi,eax
c002529b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252a1:	81 c6 00 10 00 00    	add    esi,0x1000
c00252a7:	e8 31 ac fe ff       	call   c000fedd <Phys::allocatePage()>
c00252ac:	39 c6                	cmp    esi,eax
c00252ae:	74 10                	je     c00252c0 <SATAPI::open(int, int, void*)+0x6c>
c00252b0:	83 ec 0c             	sub    esp,0xc
c00252b3:	68 e7 cd 02 c0       	push   0xc002cde7
c00252b8:	e8 c0 51 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00252bd:	83 c4 10             	add    esp,0x10
c00252c0:	83 ec 0c             	sub    esp,0xc
c00252c3:	6a 02                	push   0x2
c00252c5:	e8 ad c8 fe ff       	call   c0011b77 <Virt::allocateKernelVirtualPages(int)>
c00252ca:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00252d0:	e8 49 cb fe ff       	call   c0011e1e <Virt::getAKernelVAS()>
c00252d5:	6a 03                	push   0x3
c00252d7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00252dd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00252e3:	50                   	push   eax
c00252e4:	e8 57 cf fe ff       	call   c0012240 <VAS::mapPage(unsigned long, unsigned long, int)>
c00252e9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00252f0:	83 c4 14             	add    esp,0x14
c00252f3:	53                   	push   ebx
c00252f4:	e8 99 fe ff ff       	call   c0025192 <SATAPI::detectMedia()>
c00252f9:	83 c4 14             	add    esp,0x14
c00252fc:	31 c0                	xor    eax,eax
c00252fe:	5b                   	pop    ebx
c00252ff:	5e                   	pop    esi
c0025300:	c3                   	ret    
c0025301:	90                   	nop

c0025302 <SATAPI::read(unsigned long long, int, void*)>:
c0025302:	55                   	push   ebp
c0025303:	57                   	push   edi
c0025304:	56                   	push   esi
c0025305:	53                   	push   ebx
c0025306:	83 ec 1c             	sub    esp,0x1c
c0025309:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002530d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025311:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025315:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002531c:	74 19                	je     c0025337 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002531e:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025323:	7e 2e                	jle    c0025353 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025325:	83 ec 0c             	sub    esp,0xc
c0025328:	68 fd cd 02 c0       	push   0xc002cdfd
c002532d:	e8 4b 51 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0025332:	83 c4 10             	add    esp,0x10
c0025335:	eb 1c                	jmp    c0025353 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025337:	83 ec 0c             	sub    esp,0xc
c002533a:	55                   	push   ebp
c002533b:	e8 52 fe ff ff       	call   c0025192 <SATAPI::detectMedia()>
c0025340:	83 c4 10             	add    esp,0x10
c0025343:	b8 02 00 00 00       	mov    eax,0x2
c0025348:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002534f:	75 cd                	jne    c002531e <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025351:	eb 49                	jmp    c002539c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025353:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025357:	b9 03 00 00 00       	mov    ecx,0x3
c002535c:	fc                   	cld    
c002535d:	31 c0                	xor    eax,eax
c002535f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025361:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025366:	89 d8                	mov    eax,ebx
c0025368:	86 e0                	xchg   al,ah
c002536a:	c1 c0 10             	rol    eax,0x10
c002536d:	86 e0                	xchg   al,ah
c002536f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025373:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025377:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002537b:	50                   	push   eax
c002537c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025380:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025384:	56                   	push   esi
c0025385:	53                   	push   ebx
c0025386:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002538a:	c1 e0 0b             	shl    eax,0xb
c002538d:	50                   	push   eax
c002538e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025392:	50                   	push   eax
c0025393:	55                   	push   ebp
c0025394:	e8 ad fb ff ff       	call   c0024f46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025399:	83 c4 20             	add    esp,0x20
c002539c:	83 c4 1c             	add    esp,0x1c
c002539f:	5b                   	pop    ebx
c00253a0:	5e                   	pop    esi
c00253a1:	5f                   	pop    edi
c00253a2:	5d                   	pop    ebp
c00253a3:	c3                   	ret    

c00253a4 <AVX::open(int, int, void*)>:
c00253a4:	83 ec 0c             	sub    esp,0xc
c00253a7:	e8 3c 11 00 00       	call   c00264e8 <avxInit>
c00253ac:	b8 00 00 00 00       	mov    eax,0x0
c00253b1:	83 c4 0c             	add    esp,0xc
c00253b4:	c3                   	ret    
c00253b5:	90                   	nop

c00253b6 <AVX::close(int, int, void*)>:
c00253b6:	83 ec 0c             	sub    esp,0xc
c00253b9:	e8 2b 11 00 00       	call   c00264e9 <avxClose>
c00253be:	b8 00 00 00 00       	mov    eax,0x0
c00253c3:	83 c4 0c             	add    esp,0xc
c00253c6:	c3                   	ret    
c00253c7:	90                   	nop

c00253c8 <AVX::available()>:
c00253c8:	83 ec 0c             	sub    esp,0xc
c00253cb:	e8 10 11 00 00       	call   c00264e0 <avxDetect>
c00253d0:	85 c0                	test   eax,eax
c00253d2:	0f 95 c0             	setne  al
c00253d5:	83 c4 0c             	add    esp,0xc
c00253d8:	c3                   	ret    
c00253d9:	90                   	nop

c00253da <AVX::save(void*)>:
c00253da:	83 ec 0c             	sub    esp,0xc
c00253dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253e1:	83 ec 0c             	sub    esp,0xc
c00253e4:	50                   	push   eax
c00253e5:	e8 fc 10 00 00       	call   c00264e6 <avxSave>
c00253ea:	83 c4 10             	add    esp,0x10
c00253ed:	90                   	nop
c00253ee:	83 c4 0c             	add    esp,0xc
c00253f1:	c3                   	ret    

c00253f2 <AVX::load(void*)>:
c00253f2:	83 ec 0c             	sub    esp,0xc
c00253f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f9:	83 ec 0c             	sub    esp,0xc
c00253fc:	50                   	push   eax
c00253fd:	e8 e5 10 00 00       	call   c00264e7 <avxLoad>
c0025402:	83 c4 10             	add    esp,0x10
c0025405:	90                   	nop
c0025406:	83 c4 0c             	add    esp,0xc
c0025409:	c3                   	ret    

c002540a <AVX::AVX()>:
c002540a:	83 ec 0c             	sub    esp,0xc
c002540d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025411:	83 ec 08             	sub    esp,0x8
c0025414:	68 60 ce 02 c0       	push   0xc002ce60
c0025419:	50                   	push   eax
c002541a:	e8 dd f2 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c002541f:	83 c4 10             	add    esp,0x10
c0025422:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c0025427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002542b:	89 10                	mov    DWORD PTR [eax],edx
c002542d:	90                   	nop
c002542e:	83 c4 0c             	add    esp,0xc
c0025431:	c3                   	ret    

c0025432 <MMX::available()>:
c0025432:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0025437:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002543d:	83 e0 20             	and    eax,0x20
c0025440:	84 c0                	test   al,al
c0025442:	0f 95 c0             	setne  al
c0025445:	c3                   	ret    

c0025446 <MMX::open(int, int, void*)>:
c0025446:	83 ec 0c             	sub    esp,0xc
c0025449:	e8 1e 11 00 00       	call   c002656c <x87Init>
c002544e:	b8 00 00 00 00       	mov    eax,0x0
c0025453:	83 c4 0c             	add    esp,0xc
c0025456:	c3                   	ret    
c0025457:	90                   	nop

c0025458 <MMX::close(int, int, void*)>:
c0025458:	83 ec 0c             	sub    esp,0xc
c002545b:	e8 26 11 00 00       	call   c0026586 <x87Close>
c0025460:	b8 00 00 00 00       	mov    eax,0x0
c0025465:	83 c4 0c             	add    esp,0xc
c0025468:	c3                   	ret    
c0025469:	90                   	nop

c002546a <MMX::save(void*)>:
c002546a:	83 ec 0c             	sub    esp,0xc
c002546d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025471:	83 ec 0c             	sub    esp,0xc
c0025474:	50                   	push   eax
c0025475:	e8 e7 10 00 00       	call   c0026561 <x87Save>
c002547a:	83 c4 10             	add    esp,0x10
c002547d:	90                   	nop
c002547e:	83 c4 0c             	add    esp,0xc
c0025481:	c3                   	ret    

c0025482 <MMX::load(void*)>:
c0025482:	83 ec 0c             	sub    esp,0xc
c0025485:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025489:	83 ec 0c             	sub    esp,0xc
c002548c:	50                   	push   eax
c002548d:	e8 d5 10 00 00       	call   c0026567 <x87Load>
c0025492:	83 c4 10             	add    esp,0x10
c0025495:	90                   	nop
c0025496:	83 c4 0c             	add    esp,0xc
c0025499:	c3                   	ret    

c002549a <MMX::MMX()>:
c002549a:	83 ec 0c             	sub    esp,0xc
c002549d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a1:	83 ec 08             	sub    esp,0x8
c00254a4:	68 a0 ce 02 c0       	push   0xc002cea0
c00254a9:	50                   	push   eax
c00254aa:	e8 4d f2 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c00254af:	83 c4 10             	add    esp,0x10
c00254b2:	ba b0 ce 02 c0       	mov    edx,0xc002ceb0
c00254b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bb:	89 10                	mov    DWORD PTR [eax],edx
c00254bd:	90                   	nop
c00254be:	83 c4 0c             	add    esp,0xc
c00254c1:	c3                   	ret    

c00254c2 <SSE::open(int, int, void*)>:
c00254c2:	83 ec 0c             	sub    esp,0xc
c00254c5:	e8 5a 10 00 00       	call   c0026524 <sseInit>
c00254ca:	b8 00 00 00 00       	mov    eax,0x0
c00254cf:	83 c4 0c             	add    esp,0xc
c00254d2:	c3                   	ret    
c00254d3:	90                   	nop

c00254d4 <SSE::close(int, int, void*)>:
c00254d4:	83 ec 0c             	sub    esp,0xc
c00254d7:	e8 58 10 00 00       	call   c0026534 <sseClose>
c00254dc:	b8 00 00 00 00       	mov    eax,0x0
c00254e1:	83 c4 0c             	add    esp,0xc
c00254e4:	c3                   	ret    
c00254e5:	90                   	nop

c00254e6 <SSE::available()>:
c00254e6:	83 ec 1c             	sub    esp,0x1c
c00254e9:	e8 12 10 00 00       	call   c0026500 <absolutelyNoChanceInHell>
c00254ee:	85 c0                	test   eax,eax
c00254f0:	0f 95 c0             	setne  al
c00254f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00254f7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00254fb:	83 c4 1c             	add    esp,0x1c
c00254fe:	c3                   	ret    
c00254ff:	90                   	nop

c0025500 <SSE::save(void*)>:
c0025500:	83 ec 0c             	sub    esp,0xc
c0025503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025507:	83 ec 0c             	sub    esp,0xc
c002550a:	50                   	push   eax
c002550b:	e8 08 10 00 00       	call   c0026518 <sseSave>
c0025510:	83 c4 10             	add    esp,0x10
c0025513:	90                   	nop
c0025514:	83 c4 0c             	add    esp,0xc
c0025517:	c3                   	ret    

c0025518 <SSE::load(void*)>:
c0025518:	83 ec 0c             	sub    esp,0xc
c002551b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002551f:	83 ec 0c             	sub    esp,0xc
c0025522:	50                   	push   eax
c0025523:	e8 f6 0f 00 00       	call   c002651e <sseLoad>
c0025528:	83 c4 10             	add    esp,0x10
c002552b:	90                   	nop
c002552c:	83 c4 0c             	add    esp,0xc
c002552f:	c3                   	ret    

c0025530 <SSE::SSE()>:
c0025530:	83 ec 0c             	sub    esp,0xc
c0025533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025537:	83 ec 08             	sub    esp,0x8
c002553a:	68 e0 ce 02 c0       	push   0xc002cee0
c002553f:	50                   	push   eax
c0025540:	e8 b7 f1 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c0025545:	83 c4 10             	add    esp,0x10
c0025548:	ba f0 ce 02 c0       	mov    edx,0xc002cef0
c002554d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025551:	89 10                	mov    DWORD PTR [eax],edx
c0025553:	90                   	nop
c0025554:	83 c4 0c             	add    esp,0xc
c0025557:	c3                   	ret    

c0025558 <x87::open(int, int, void*)>:
c0025558:	83 ec 0c             	sub    esp,0xc
c002555b:	e8 0c 10 00 00       	call   c002656c <x87Init>
c0025560:	b8 00 00 00 00       	mov    eax,0x0
c0025565:	83 c4 0c             	add    esp,0xc
c0025568:	c3                   	ret    
c0025569:	90                   	nop

c002556a <x87::close(int, int, void*)>:
c002556a:	83 ec 0c             	sub    esp,0xc
c002556d:	e8 14 10 00 00       	call   c0026586 <x87Close>
c0025572:	b8 00 00 00 00       	mov    eax,0x0
c0025577:	83 c4 0c             	add    esp,0xc
c002557a:	c3                   	ret    
c002557b:	90                   	nop

c002557c <x87::available()>:
c002557c:	83 ec 0c             	sub    esp,0xc
c002557f:	e8 c2 0f 00 00       	call   c0026546 <x87Detect>
c0025584:	85 c0                	test   eax,eax
c0025586:	0f 95 c0             	setne  al
c0025589:	83 c4 0c             	add    esp,0xc
c002558c:	c3                   	ret    
c002558d:	90                   	nop

c002558e <x87::save(void*)>:
c002558e:	83 ec 0c             	sub    esp,0xc
c0025591:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025595:	83 ec 0c             	sub    esp,0xc
c0025598:	50                   	push   eax
c0025599:	e8 c3 0f 00 00       	call   c0026561 <x87Save>
c002559e:	83 c4 10             	add    esp,0x10
c00255a1:	90                   	nop
c00255a2:	83 c4 0c             	add    esp,0xc
c00255a5:	c3                   	ret    

c00255a6 <x87::load(void*)>:
c00255a6:	83 ec 0c             	sub    esp,0xc
c00255a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255ad:	83 ec 0c             	sub    esp,0xc
c00255b0:	50                   	push   eax
c00255b1:	e8 b1 0f 00 00       	call   c0026567 <x87Load>
c00255b6:	83 c4 10             	add    esp,0x10
c00255b9:	90                   	nop
c00255ba:	83 c4 0c             	add    esp,0xc
c00255bd:	c3                   	ret    

c00255be <x87::x87()>:
c00255be:	83 ec 0c             	sub    esp,0xc
c00255c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c5:	83 ec 08             	sub    esp,0x8
c00255c8:	68 20 cf 02 c0       	push   0xc002cf20
c00255cd:	50                   	push   eax
c00255ce:	e8 29 f1 fe ff       	call   c00146fc <FPU::FPU(char const*)>
c00255d3:	83 c4 10             	add    esp,0x10
c00255d6:	ba 30 cf 02 c0       	mov    edx,0xc002cf30
c00255db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255df:	89 10                	mov    DWORD PTR [eax],edx
c00255e1:	90                   	nop
c00255e2:	83 c4 0c             	add    esp,0xc
c00255e5:	c3                   	ret    

c00255e6 <APIC::disable()>:
c00255e6:	90                   	nop
c00255e7:	c3                   	ret    

c00255e8 <APIC::close(int, int, void*)>:
c00255e8:	55                   	push   ebp
c00255e9:	89 e5                	mov    ebp,esp
c00255eb:	83 ec 08             	sub    esp,0x8
c00255ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00255f3:	83 c0 3c             	add    eax,0x3c
c00255f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00255f8:	83 ec 0c             	sub    esp,0xc
c00255fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255fe:	ff d0                	call   eax
c0025600:	83 c4 10             	add    esp,0x10
c0025603:	b8 00 00 00 00       	mov    eax,0x0
c0025608:	c9                   	leave  
c0025609:	c3                   	ret    

c002560a <IOAPIC::close(int, int, void*)>:
c002560a:	b8 00 00 00 00       	mov    eax,0x0
c002560f:	c3                   	ret    

c0025610 <APIC::io_wait()>:
c0025610:	eb 00                	jmp    c0025612 <APIC::io_wait()+0x2>
c0025612:	eb 00                	jmp    c0025614 <APIC::io_wait()+0x4>
c0025614:	90                   	nop
c0025615:	c3                   	ret    

c0025616 <APIC::getBase()>:
c0025616:	55                   	push   ebp
c0025617:	89 e5                	mov    ebp,esp
c0025619:	83 ec 18             	sub    esp,0x18
c002561c:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0025621:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025627:	83 e0 08             	and    eax,0x8
c002562a:	84 c0                	test   al,al
c002562c:	75 07                	jne    c0025635 <APIC::getBase()+0x1f>
c002562e:	b8 00 00 00 00       	mov    eax,0x0
c0025633:	eb 21                	jmp    c0025656 <APIC::getBase()+0x40>
c0025635:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c002563a:	83 ec 08             	sub    esp,0x8
c002563d:	6a 1b                	push   0x1b
c002563f:	50                   	push   eax
c0025640:	e8 a3 97 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025645:	83 c4 10             	add    esp,0x10
c0025648:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002564b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002564e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025651:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025656:	c9                   	leave  
c0025657:	c3                   	ret    

c0025658 <APIC::eoi(unsigned char)>:
c0025658:	55                   	push   ebp
c0025659:	89 e5                	mov    ebp,esp
c002565b:	83 ec 28             	sub    esp,0x28
c002565e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025661:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002566a:	e8 a7 ff ff ff       	call   c0025616 <APIC::getBase()>
c002566f:	83 c4 10             	add    esp,0x10
c0025672:	05 b0 00 00 00       	add    eax,0xb0
c0025677:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002567a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002567d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025683:	90                   	nop
c0025684:	c9                   	leave  
c0025685:	c3                   	ret    

c0025686 <APIC::open(int, int, void*)>:
c0025686:	55                   	push   ebp
c0025687:	89 e5                	mov    ebp,esp
c0025689:	57                   	push   edi
c002568a:	56                   	push   esi
c002568b:	53                   	push   ebx
c002568c:	83 ec 2c             	sub    esp,0x2c
c002568f:	83 ec 0c             	sub    esp,0xc
c0025692:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025695:	e8 7c ff ff ff       	call   c0025616 <APIC::getBase()>
c002569a:	83 c4 10             	add    esp,0x10
c002569d:	89 c2                	mov    edx,eax
c002569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256a2:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256a8:	0f b6 f8             	movzx  edi,al
c00256ab:	89 d0                	mov    eax,edx
c00256ad:	ba 00 00 00 00       	mov    edx,0x0
c00256b2:	89 c1                	mov    ecx,eax
c00256b4:	80 e5 ff             	and    ch,0xff
c00256b7:	89 cb                	mov    ebx,ecx
c00256b9:	0f b6 f2             	movzx  esi,dl
c00256bc:	89 d8                	mov    eax,ebx
c00256be:	89 f2                	mov    edx,esi
c00256c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256c3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00256c6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00256ca:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256ce:	83 e0 00             	and    eax,0x0
c00256d1:	09 d0                	or     eax,edx
c00256d3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256e0:	8d 50 01             	lea    edx,[eax+0x1]
c00256e3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256e6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256ec:	0f b6 d0             	movzx  edx,al
c00256ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f2:	83 c2 08             	add    edx,0x8
c00256f5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256f9:	0f b6 c9             	movzx  ecx,cl
c00256fc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025702:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025706:	83 ec 0c             	sub    esp,0xc
c0025709:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002570c:	e8 05 ff ff ff       	call   c0025616 <APIC::getBase()>
c0025711:	83 c4 10             	add    esp,0x10
c0025714:	05 f0 00 00 00       	add    eax,0xf0
c0025719:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002571c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002571f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025721:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025724:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002572b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025732:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025735:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025738:	89 10                	mov    DWORD PTR [eax],edx
c002573a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025741:	a1 70 0b 03 c0       	mov    eax,ds:0xc0030b70
c0025746:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025749:	7d 7c                	jge    c00257c7 <APIC::open(int, int, void*)+0x141>
c002574b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002574e:	8b 04 85 80 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf480]
c0025755:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025758:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002575b:	8b 04 85 80 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf480]
c0025762:	c1 e8 08             	shr    eax,0x8
c0025765:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025769:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002576c:	8b 04 85 80 0b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf480]
c0025773:	c1 e8 18             	shr    eax,0x18
c0025776:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025779:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002577d:	75 40                	jne    c00257bf <APIC::open(int, int, void*)+0x139>
c002577f:	83 ec 0c             	sub    esp,0xc
c0025782:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025785:	e8 8c fe ff ff       	call   c0025616 <APIC::getBase()>
c002578a:	83 c4 10             	add    esp,0x10
c002578d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025791:	75 07                	jne    c002579a <APIC::open(int, int, void*)+0x114>
c0025793:	ba 60 03 00 00       	mov    edx,0x360
c0025798:	eb 05                	jmp    c002579f <APIC::open(int, int, void*)+0x119>
c002579a:	ba 50 03 00 00       	mov    edx,0x350
c002579f:	01 d0                	add    eax,edx
c00257a1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00257a4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00257a9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00257ac:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00257b3:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00257b7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00257ba:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00257bd:	89 10                	mov    DWORD PTR [eax],edx
c00257bf:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00257c2:	e9 7a ff ff ff       	jmp    c0025741 <APIC::open(int, int, void*)+0xbb>
c00257c7:	b8 00 00 00 00       	mov    eax,0x0
c00257cc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00257cf:	5b                   	pop    ebx
c00257d0:	5e                   	pop    esi
c00257d1:	5f                   	pop    edi
c00257d2:	5d                   	pop    ebp
c00257d3:	c3                   	ret    

c00257d4 <IOAPIC::IOAPIC()>:
c00257d4:	83 ec 0c             	sub    esp,0xc
c00257d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257db:	83 ec 08             	sub    esp,0x8
c00257de:	68 60 cf 02 c0       	push   0xc002cf60
c00257e3:	50                   	push   eax
c00257e4:	e8 01 ec fe ff       	call   c00143ea <Device::Device(char const*)>
c00257e9:	83 c4 10             	add    esp,0x10
c00257ec:	ba 88 d0 02 c0       	mov    edx,0xc002d088
c00257f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f5:	89 10                	mov    DWORD PTR [eax],edx
c00257f7:	90                   	nop
c00257f8:	83 c4 0c             	add    esp,0xc
c00257fb:	c3                   	ret    

c00257fc <APIC::APIC()>:
c00257fc:	53                   	push   ebx
c00257fd:	83 ec 18             	sub    esp,0x18
c0025800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025804:	83 ec 08             	sub    esp,0x8
c0025807:	68 68 cf 02 c0       	push   0xc002cf68
c002580c:	50                   	push   eax
c002580d:	e8 44 f3 fe ff       	call   c0014b56 <InterruptController::InterruptController(char const*)>
c0025812:	83 c4 10             	add    esp,0x10
c0025815:	ba 40 d0 02 c0       	mov    edx,0xc002d040
c002581a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002581e:	89 10                	mov    DWORD PTR [eax],edx
c0025820:	a0 40 26 03 c0       	mov    al,ds:0xc0032640
c0025825:	83 f0 01             	xor    eax,0x1
c0025828:	84 c0                	test   al,al
c002582a:	0f 84 a1 00 00 00    	je     c00258d1 <APIC::APIC()+0xd5>
c0025830:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025835:	a0 20 0c 03 c0       	mov    al,ds:0xc0030c20
c002583a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002583e:	0f 83 86 00 00 00    	jae    c00258ca <APIC::APIC()+0xce>
c0025844:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002584c:	83 ec 0c             	sub    esp,0xc
c002584f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025853:	e8 e8 9f fe ff       	call   c000f840 <malloc>
c0025858:	83 c4 10             	add    esp,0x10
c002585b:	89 c3                	mov    ebx,eax
c002585d:	83 ec 0c             	sub    esp,0xc
c0025860:	53                   	push   ebx
c0025861:	e8 6e ff ff ff       	call   c00257d4 <IOAPIC::IOAPIC()>
c0025866:	83 c4 10             	add    esp,0x10
c0025869:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002586d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025872:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025876:	89 14 85 20 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9e0],edx
c002587d:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c0025882:	40                   	inc    eax
c0025883:	a3 00 26 03 c0       	mov    ds:0xc0032600,eax
c0025888:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c002588d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025893:	83 ec 08             	sub    esp,0x8
c0025896:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002589a:	50                   	push   eax
c002589b:	e8 5a e9 fe ff       	call   c00141fa <Device::addChild(Device*)>
c00258a0:	83 c4 10             	add    esp,0x10
c00258a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00258a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00258a9:	83 c0 08             	add    eax,0x8
c00258ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00258ae:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00258b3:	6a 00                	push   0x0
c00258b5:	6a 00                	push   0x0
c00258b7:	52                   	push   edx
c00258b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00258bc:	ff d0                	call   eax
c00258be:	83 c4 10             	add    esp,0x10
c00258c1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00258c5:	e9 6b ff ff ff       	jmp    c0025835 <APIC::APIC()+0x39>
c00258ca:	c6 05 40 26 03 c0 01 	mov    BYTE PTR ds:0xc0032640,0x1
c00258d1:	90                   	nop
c00258d2:	83 c4 18             	add    esp,0x18
c00258d5:	5b                   	pop    ebx
c00258d6:	c3                   	ret    
c00258d7:	90                   	nop

c00258d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00258d8:	55                   	push   ebp
c00258d9:	89 e5                	mov    ebp,esp
c00258db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258e4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00258e7:	72 1d                	jb     c0025906 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00258e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258ec:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00258f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00258fb:	01 d0                	add    eax,edx
c00258fd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025900:	73 04                	jae    c0025906 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025902:	b0 01                	mov    al,0x1
c0025904:	eb 02                	jmp    c0025908 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025906:	b0 00                	mov    al,0x0
c0025908:	5d                   	pop    ebp
c0025909:	c3                   	ret    

c002590a <IOAPIC::read(int)>:
c002590a:	55                   	push   ebp
c002590b:	89 e5                	mov    ebp,esp
c002590d:	83 ec 10             	sub    esp,0x10
c0025910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025913:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025919:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002591c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002591f:	0f b6 d0             	movzx  edx,al
c0025922:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025925:	89 10                	mov    DWORD PTR [eax],edx
c0025927:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002592a:	83 c0 10             	add    eax,0x10
c002592d:	8b 00                	mov    eax,DWORD PTR [eax]
c002592f:	c9                   	leave  
c0025930:	c3                   	ret    
c0025931:	90                   	nop

c0025932 <IOAPIC::open(int, int, void*)>:
c0025932:	55                   	push   ebp
c0025933:	89 e5                	mov    ebp,esp
c0025935:	57                   	push   edi
c0025936:	56                   	push   esi
c0025937:	53                   	push   ebx
c0025938:	83 ec 0c             	sub    esp,0xc
c002593b:	83 ec 0c             	sub    esp,0xc
c002593e:	68 93 cf 02 c0       	push   0xc002cf93
c0025943:	e8 8c d4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0025948:	83 c4 10             	add    esp,0x10
c002594b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002594e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025951:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002595a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025960:	8b 14 85 60 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf3a0]
c0025967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002596a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025973:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025979:	8b 14 85 e0 0c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf320]
c0025980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025983:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002598c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025995:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002599b:	0f b6 f8             	movzx  edi,al
c002599e:	89 d0                	mov    eax,edx
c00259a0:	ba 00 00 00 00       	mov    edx,0x0
c00259a5:	89 c1                	mov    ecx,eax
c00259a7:	80 e5 ff             	and    ch,0xff
c00259aa:	89 cb                	mov    ebx,ecx
c00259ac:	0f b6 f2             	movzx  esi,dl
c00259af:	89 d8                	mov    eax,ebx
c00259b1:	89 f2                	mov    edx,esi
c00259b3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259b6:	8d 5f 08             	lea    ebx,[edi+0x8]
c00259b9:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00259bd:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00259c1:	83 e0 00             	and    eax,0x0
c00259c4:	09 d0                	or     eax,edx
c00259c6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00259ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259cd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00259d3:	8d 50 01             	lea    edx,[eax+0x1]
c00259d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00259d9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00259df:	0f b6 d0             	movzx  edx,al
c00259e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259e5:	83 c2 08             	add    edx,0x8
c00259e8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00259ec:	0f b6 c9             	movzx  ecx,cl
c00259ef:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00259f5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00259f9:	83 ec 08             	sub    esp,0x8
c00259fc:	6a 01                	push   0x1
c00259fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a01:	e8 04 ff ff ff       	call   c002590a <IOAPIC::read(int)>
c0025a06:	83 c4 10             	add    esp,0x10
c0025a09:	c1 f8 10             	sar    eax,0x10
c0025a0c:	0f b6 c0             	movzx  eax,al
c0025a0f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a15:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025a1b:	b8 00 00 00 00       	mov    eax,0x0
c0025a20:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a23:	5b                   	pop    ebx
c0025a24:	5e                   	pop    esi
c0025a25:	5f                   	pop    edi
c0025a26:	5d                   	pop    ebp
c0025a27:	c3                   	ret    

c0025a28 <IOAPIC::write(int, int)>:
c0025a28:	55                   	push   ebp
c0025a29:	89 e5                	mov    ebp,esp
c0025a2b:	83 ec 10             	sub    esp,0x10
c0025a2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025a37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025a3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a3d:	0f b6 d0             	movzx  edx,al
c0025a40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a43:	89 10                	mov    DWORD PTR [eax],edx
c0025a45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025a48:	8d 50 10             	lea    edx,[eax+0x10]
c0025a4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a4e:	89 02                	mov    DWORD PTR [edx],eax
c0025a50:	90                   	nop
c0025a51:	c9                   	leave  
c0025a52:	c3                   	ret    
c0025a53:	90                   	nop

c0025a54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025a54:	55                   	push   ebp
c0025a55:	89 e5                	mov    ebp,esp
c0025a57:	53                   	push   ebx
c0025a58:	83 ec 2c             	sub    esp,0x2c
c0025a5b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a5e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025a61:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025a64:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025a67:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025a6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025a6d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025a70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025a73:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025a76:	88 d8                	mov    al,bl
c0025a78:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025a7b:	88 c8                	mov    al,cl
c0025a7d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025a80:	88 d0                	mov    al,dl
c0025a82:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025a85:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a89:	83 c0 08             	add    eax,0x8
c0025a8c:	01 c0                	add    eax,eax
c0025a8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025a91:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025a95:	83 c0 08             	add    eax,0x8
c0025a98:	01 c0                	add    eax,eax
c0025a9a:	40                   	inc    eax
c0025a9b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025a9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025aa1:	50                   	push   eax
c0025aa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025aa5:	e8 60 fe ff ff       	call   c002590a <IOAPIC::read(int)>
c0025aaa:	83 c4 08             	add    esp,0x8
c0025aad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ab0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ab7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025aba:	c1 e0 18             	shl    eax,0x18
c0025abd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025ac0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ac3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ac6:	52                   	push   edx
c0025ac7:	50                   	push   eax
c0025ac8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025acb:	e8 58 ff ff ff       	call   c0025a28 <IOAPIC::write(int, int)>
c0025ad0:	83 c4 0c             	add    esp,0xc
c0025ad3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025ad6:	50                   	push   eax
c0025ad7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ada:	e8 2b fe ff ff       	call   c002590a <IOAPIC::read(int)>
c0025adf:	83 c4 08             	add    esp,0x8
c0025ae2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025ae5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025aec:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025af3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025afa:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025afe:	74 09                	je     c0025b09 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025b00:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025b07:	eb 07                	jmp    c0025b10 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025b09:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025b10:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025b14:	74 09                	je     c0025b1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025b16:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025b1d:	eb 07                	jmp    c0025b26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025b1f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025b26:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025b2d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025b31:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025b34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025b37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b3a:	52                   	push   edx
c0025b3b:	50                   	push   eax
c0025b3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b3f:	e8 e4 fe ff ff       	call   c0025a28 <IOAPIC::write(int, int)>
c0025b44:	83 c4 0c             	add    esp,0xc
c0025b47:	90                   	nop
c0025b48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025b4b:	c9                   	leave  
c0025b4c:	c3                   	ret    
c0025b4d:	90                   	nop

c0025b4e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025b4e:	55                   	push   ebp
c0025b4f:	89 e5                	mov    ebp,esp
c0025b51:	57                   	push   edi
c0025b52:	56                   	push   esi
c0025b53:	53                   	push   ebx
c0025b54:	83 ec 2c             	sub    esp,0x2c
c0025b57:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025b5a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025b5d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025b61:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025b65:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025b69:	74 5a                	je     c0025bc5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025b6b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025b6f:	7f 44                	jg     c0025bb5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025b71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b74:	05 e0 d4 02 c0       	add    eax,0xc002d4e0
c0025b79:	8a 00                	mov    al,BYTE PTR [eax]
c0025b7b:	0f b6 c0             	movzx  eax,al
c0025b7e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025b81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b84:	66 8b 84 00 00 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf400]
c0025b8c:	0f b7 c0             	movzx  eax,ax
c0025b8f:	83 e0 02             	and    eax,0x2
c0025b92:	85 c0                	test   eax,eax
c0025b94:	74 04                	je     c0025b9a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025b96:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025b9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b9d:	66 8b 84 00 00 0c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf400]
c0025ba5:	0f b7 c0             	movzx  eax,ax
c0025ba8:	83 e0 08             	and    eax,0x8
c0025bab:	85 c0                	test   eax,eax
c0025bad:	74 16                	je     c0025bc5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025baf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025bb3:	eb 10                	jmp    c0025bc5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025bb5:	83 ec 0c             	sub    esp,0xc
c0025bb8:	68 a4 cf 02 c0       	push   0xc002cfa4
c0025bbd:	e8 bb 48 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0025bc2:	83 c4 10             	add    esp,0x10
c0025bc5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025bc9:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c0025bce:	83 ec 08             	sub    esp,0x8
c0025bd1:	50                   	push   eax
c0025bd2:	68 dc cf 02 c0       	push   0xc002cfdc
c0025bd7:	e8 f8 d1 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0025bdc:	83 c4 10             	add    esp,0x10
c0025bdf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025be6:	a1 00 26 03 c0       	mov    eax,ds:0xc0032600
c0025beb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025bee:	7d 67                	jge    c0025c57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025bf0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025bf3:	8b 04 85 20 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9e0]
c0025bfa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025bfd:	83 ec 08             	sub    esp,0x8
c0025c00:	52                   	push   edx
c0025c01:	50                   	push   eax
c0025c02:	e8 d1 fc ff ff       	call   c00258d8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025c07:	83 c4 10             	add    esp,0x10
c0025c0a:	84 c0                	test   al,al
c0025c0c:	74 44                	je     c0025c52 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025c0e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025c11:	8b 1c 85 20 26 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd9e0]
c0025c18:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025c1c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025c1f:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025c23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c26:	83 c0 20             	add    eax,0x20
c0025c29:	0f b6 f0             	movzx  esi,al
c0025c2c:	b8 00 00 00 00       	mov    eax,0x0
c0025c31:	99                   	cdq    
c0025c32:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025c35:	0f b6 c9             	movzx  ecx,cl
c0025c38:	83 ec 04             	sub    esp,0x4
c0025c3b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025c3e:	57                   	push   edi
c0025c3f:	56                   	push   esi
c0025c40:	52                   	push   edx
c0025c41:	50                   	push   eax
c0025c42:	51                   	push   ecx
c0025c43:	53                   	push   ebx
c0025c44:	e8 0b fe ff ff       	call   c0025a54 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025c49:	83 c4 20             	add    esp,0x20
c0025c4c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025c50:	eb 05                	jmp    c0025c57 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025c52:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025c55:	eb 8f                	jmp    c0025be6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025c57:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025c5a:	83 f0 01             	xor    eax,0x1
c0025c5d:	84 c0                	test   al,al
c0025c5f:	74 10                	je     c0025c71 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025c61:	83 ec 0c             	sub    esp,0xc
c0025c64:	68 f3 cf 02 c0       	push   0xc002cff3
c0025c69:	e8 0f 48 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0025c6e:	83 c4 10             	add    esp,0x10
c0025c71:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025c75:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025c7c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025c80:	7f 65                	jg     c0025ce7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c85:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025c88:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025c8f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025c92:	01 ca                	add    edx,ecx
c0025c94:	83 c2 54             	add    edx,0x54
c0025c97:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025c9b:	85 c0                	test   eax,eax
c0025c9d:	75 43                	jne    c0025ce2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ca2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ca5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cac:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025caf:	01 ca                	add    edx,ecx
c0025cb1:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025cb4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025cb7:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025cbe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025cc1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025cc8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ccb:	01 ca                	add    edx,ecx
c0025ccd:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025cd3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025cd6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025cda:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cdd:	83 e8 20             	sub    eax,0x20
c0025ce0:	eb 1a                	jmp    c0025cfc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ce2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ce5:	eb 95                	jmp    c0025c7c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ce7:	83 ec 0c             	sub    esp,0xc
c0025cea:	68 00 d0 02 c0       	push   0xc002d000
c0025cef:	e8 89 47 ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0025cf4:	83 c4 10             	add    esp,0x10
c0025cf7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025cfc:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025cff:	5b                   	pop    ebx
c0025d00:	5e                   	pop    esi
c0025d01:	5f                   	pop    edi
c0025d02:	5d                   	pop    ebp
c0025d03:	c3                   	ret    

c0025d04 <PIC::disable()>:
c0025d04:	55                   	push   ebp
c0025d05:	89 e5                	mov    ebp,esp
c0025d07:	83 ec 10             	sub    esp,0x10
c0025d0a:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025d10:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025d14:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d17:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d1b:	ee                   	out    dx,al
c0025d1c:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025d22:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025d26:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025d29:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025d2d:	ee                   	out    dx,al
c0025d2e:	90                   	nop
c0025d2f:	c9                   	leave  
c0025d30:	c3                   	ret    
c0025d31:	90                   	nop

c0025d32 <PIC::close(int, int, void*)>:
c0025d32:	55                   	push   ebp
c0025d33:	89 e5                	mov    ebp,esp
c0025d35:	83 ec 08             	sub    esp,0x8
c0025d38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d3d:	83 c0 3c             	add    eax,0x3c
c0025d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0025d42:	83 ec 0c             	sub    esp,0xc
c0025d45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d48:	ff d0                	call   eax
c0025d4a:	83 c4 10             	add    esp,0x10
c0025d4d:	b8 00 00 00 00       	mov    eax,0x0
c0025d52:	c9                   	leave  
c0025d53:	c3                   	ret    

c0025d54 <PIC::PIC()>:
c0025d54:	83 ec 0c             	sub    esp,0xc
c0025d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d5b:	83 ec 08             	sub    esp,0x8
c0025d5e:	68 ac d0 02 c0       	push   0xc002d0ac
c0025d63:	50                   	push   eax
c0025d64:	e8 ed ed fe ff       	call   c0014b56 <InterruptController::InterruptController(char const*)>
c0025d69:	83 c4 10             	add    esp,0x10
c0025d6c:	ba d8 d0 02 c0       	mov    edx,0xc002d0d8
c0025d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d75:	89 10                	mov    DWORD PTR [eax],edx
c0025d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d7b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d81:	0f b6 d0             	movzx  edx,al
c0025d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d88:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025d99:	0f b6 d0             	movzx  edx,al
c0025d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025da9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025daf:	8d 50 01             	lea    edx,[eax+0x1]
c0025db2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025db6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025dbc:	0f b6 d0             	movzx  edx,al
c0025dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dc3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025dc7:	83 e1 3f             	and    ecx,0x3f
c0025dca:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025dd8:	0f b6 d0             	movzx  edx,al
c0025ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025df0:	0f b6 d0             	movzx  edx,al
c0025df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025e06:	8d 50 01             	lea    edx,[eax+0x1]
c0025e09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025e0d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025e13:	0f b6 d0             	movzx  edx,al
c0025e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e1a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025e1e:	83 e1 3f             	and    ecx,0x3f
c0025e21:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025e25:	90                   	nop
c0025e26:	83 c4 0c             	add    esp,0xc
c0025e29:	c3                   	ret    

c0025e2a <PIC::ioWait()>:
c0025e2a:	eb 00                	jmp    c0025e2c <PIC::ioWait()+0x2>
c0025e2c:	eb 00                	jmp    c0025e2e <PIC::ioWait()+0x4>
c0025e2e:	90                   	nop
c0025e2f:	c3                   	ret    

c0025e30 <PIC::getIRQReg(int)>:
c0025e30:	55                   	push   ebp
c0025e31:	89 e5                	mov    ebp,esp
c0025e33:	83 ec 10             	sub    esp,0x10
c0025e36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e39:	0f b6 c0             	movzx  eax,al
c0025e3c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025e42:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025e45:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e48:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e4c:	ee                   	out    dx,al
c0025e4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e50:	0f b6 c0             	movzx  eax,al
c0025e53:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025e59:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025e5c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e5f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e63:	ee                   	out    dx,al
c0025e64:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025e6a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025e6e:	89 c2                	mov    edx,eax
c0025e70:	ec                   	in     al,dx
c0025e71:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025e74:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025e77:	0f b6 c0             	movzx  eax,al
c0025e7a:	c1 e0 08             	shl    eax,0x8
c0025e7d:	89 c1                	mov    ecx,eax
c0025e7f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025e85:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025e89:	89 c2                	mov    edx,eax
c0025e8b:	ec                   	in     al,dx
c0025e8c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025e8f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025e92:	0f b6 c0             	movzx  eax,al
c0025e95:	09 c8                	or     eax,ecx
c0025e97:	c9                   	leave  
c0025e98:	c3                   	ret    
c0025e99:	90                   	nop

c0025e9a <PIC::eoi(unsigned char)>:
c0025e9a:	55                   	push   ebp
c0025e9b:	89 e5                	mov    ebp,esp
c0025e9d:	83 ec 14             	sub    esp,0x14
c0025ea0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ea3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025ea6:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025eaa:	75 1e                	jne    c0025eca <PIC::eoi(unsigned char)+0x30>
c0025eac:	6a 0b                	push   0xb
c0025eae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eb1:	e8 7a ff ff ff       	call   c0025e30 <PIC::getIRQReg(int)>
c0025eb6:	83 c4 08             	add    esp,0x8
c0025eb9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025ebd:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ec1:	25 80 00 00 00       	and    eax,0x80
c0025ec6:	85 c0                	test   eax,eax
c0025ec8:	74 5f                	je     c0025f29 <PIC::eoi(unsigned char)+0x8f>
c0025eca:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025ece:	75 2d                	jne    c0025efd <PIC::eoi(unsigned char)+0x63>
c0025ed0:	6a 0b                	push   0xb
c0025ed2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ed5:	e8 56 ff ff ff       	call   c0025e30 <PIC::getIRQReg(int)>
c0025eda:	83 c4 08             	add    esp,0x8
c0025edd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025ee1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025ee4:	66 85 c0             	test   ax,ax
c0025ee7:	78 14                	js     c0025efd <PIC::eoi(unsigned char)+0x63>
c0025ee9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025eef:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025ef3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ef6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025efa:	ee                   	out    dx,al
c0025efb:	eb 2d                	jmp    c0025f2a <PIC::eoi(unsigned char)+0x90>
c0025efd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025f01:	76 12                	jbe    c0025f15 <PIC::eoi(unsigned char)+0x7b>
c0025f03:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025f09:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025f0d:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f10:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f14:	ee                   	out    dx,al
c0025f15:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025f1b:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025f1f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f22:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f26:	ee                   	out    dx,al
c0025f27:	eb 01                	jmp    c0025f2a <PIC::eoi(unsigned char)+0x90>
c0025f29:	90                   	nop
c0025f2a:	c9                   	leave  
c0025f2b:	c3                   	ret    

c0025f2c <PIC::remap()>:
c0025f2c:	55                   	push   ebp
c0025f2d:	89 e5                	mov    ebp,esp
c0025f2f:	83 ec 48             	sub    esp,0x48
c0025f32:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025f39:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025f40:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025f46:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025f49:	89 c2                	mov    edx,eax
c0025f4b:	ec                   	in     al,dx
c0025f4c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025f4f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025f52:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025f55:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025f5b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025f5e:	89 c2                	mov    edx,eax
c0025f60:	ec                   	in     al,dx
c0025f61:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025f64:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025f67:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025f6a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025f70:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025f74:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025f77:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025f7a:	ee                   	out    dx,al
c0025f7b:	83 ec 0c             	sub    esp,0xc
c0025f7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f81:	e8 a4 fe ff ff       	call   c0025e2a <PIC::ioWait()>
c0025f86:	83 c4 10             	add    esp,0x10
c0025f89:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025f8f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025f93:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025f96:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025f99:	ee                   	out    dx,al
c0025f9a:	83 ec 0c             	sub    esp,0xc
c0025f9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa0:	e8 85 fe ff ff       	call   c0025e2a <PIC::ioWait()>
c0025fa5:	83 c4 10             	add    esp,0x10
c0025fa8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fab:	0f b6 c0             	movzx  eax,al
c0025fae:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025fb4:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025fb7:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025fba:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025fbd:	ee                   	out    dx,al
c0025fbe:	83 ec 0c             	sub    esp,0xc
c0025fc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc4:	e8 61 fe ff ff       	call   c0025e2a <PIC::ioWait()>
c0025fc9:	83 c4 10             	add    esp,0x10
c0025fcc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fcf:	0f b6 c0             	movzx  eax,al
c0025fd2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025fd8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025fdb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025fde:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025fe1:	ee                   	out    dx,al
c0025fe2:	83 ec 0c             	sub    esp,0xc
c0025fe5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fe8:	e8 3d fe ff ff       	call   c0025e2a <PIC::ioWait()>
c0025fed:	83 c4 10             	add    esp,0x10
c0025ff0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025ff6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025ffa:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025ffd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026000:	ee                   	out    dx,al
c0026001:	83 ec 0c             	sub    esp,0xc
c0026004:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026007:	e8 1e fe ff ff       	call   c0025e2a <PIC::ioWait()>
c002600c:	83 c4 10             	add    esp,0x10
c002600f:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026015:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026019:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002601c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002601f:	ee                   	out    dx,al
c0026020:	83 ec 0c             	sub    esp,0xc
c0026023:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026026:	e8 ff fd ff ff       	call   c0025e2a <PIC::ioWait()>
c002602b:	83 c4 10             	add    esp,0x10
c002602e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026034:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026038:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c002603b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002603e:	ee                   	out    dx,al
c002603f:	83 ec 0c             	sub    esp,0xc
c0026042:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026045:	e8 e0 fd ff ff       	call   c0025e2a <PIC::ioWait()>
c002604a:	83 c4 10             	add    esp,0x10
c002604d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026053:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026057:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002605a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002605d:	ee                   	out    dx,al
c002605e:	83 ec 0c             	sub    esp,0xc
c0026061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026064:	e8 c1 fd ff ff       	call   c0025e2a <PIC::ioWait()>
c0026069:	83 c4 10             	add    esp,0x10
c002606c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026070:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026076:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026079:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002607c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002607f:	ee                   	out    dx,al
c0026080:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026084:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002608a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002608d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026090:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026093:	ee                   	out    dx,al
c0026094:	90                   	nop
c0026095:	c9                   	leave  
c0026096:	c3                   	ret    
c0026097:	90                   	nop

c0026098 <PIC::open(int, int, void*)>:
c0026098:	55                   	push   ebp
c0026099:	89 e5                	mov    ebp,esp
c002609b:	83 ec 18             	sub    esp,0x18
c002609e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00260a4:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00260a8:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00260ab:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00260af:	ee                   	out    dx,al
c00260b0:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00260b6:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00260ba:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260bd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00260c1:	ee                   	out    dx,al
c00260c2:	83 ec 0c             	sub    esp,0xc
c00260c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c8:	e8 5f fe ff ff       	call   c0025f2c <PIC::remap()>
c00260cd:	83 c4 10             	add    esp,0x10
c00260d0:	b8 00 00 00 00       	mov    eax,0x0
c00260d5:	c9                   	leave  
c00260d6:	c3                   	ret    
c00260d7:	90                   	nop

c00260d8 <APICTimer::close(int, int, void*)>:
c00260d8:	b8 00 00 00 00       	mov    eax,0x0
c00260dd:	c3                   	ret    

c00260de <apicTimerHandler(regs*, void*)>:
c00260de:	83 ec 0c             	sub    esp,0xc
c00260e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00260e7:	99                   	cdq    
c00260e8:	52                   	push   edx
c00260e9:	50                   	push   eax
c00260ea:	6a 00                	push   0x0
c00260ec:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260f1:	e8 86 07 00 00       	call   c002687c <__udivdi3>
c00260f6:	83 c4 10             	add    esp,0x10
c00260f9:	83 ec 08             	sub    esp,0x8
c00260fc:	52                   	push   edx
c00260fd:	50                   	push   eax
c00260fe:	e8 a2 0a ff ff       	call   c0016ba5 <timerHandler(unsigned long long)>
c0026103:	83 c4 10             	add    esp,0x10
c0026106:	90                   	nop
c0026107:	83 c4 0c             	add    esp,0xc
c002610a:	c3                   	ret    
c002610b:	90                   	nop

c002610c <APICTimer::write(int)>:
c002610c:	53                   	push   ebx
c002610d:	83 ec 28             	sub    esp,0x28
c0026110:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026114:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026118:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002611e:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0026123:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026129:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002612f:	83 ec 0c             	sub    esp,0xc
c0026132:	50                   	push   eax
c0026133:	e8 de f4 ff ff       	call   c0025616 <APIC::getBase()>
c0026138:	83 c4 10             	add    esp,0x10
c002613b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002613f:	a1 10 e9 02 c0       	mov    eax,ds:0xc002e910
c0026144:	8b 15 14 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e914
c002614a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002614e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026152:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026156:	05 e0 03 00 00       	add    eax,0x3e0
c002615b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026161:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026165:	05 80 03 00 00       	add    eax,0x380
c002616a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026170:	fb                   	sti    
c0026171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026175:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026179:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002617e:	83 d2 00             	adc    edx,0x0
c0026181:	89 c1                	mov    ecx,eax
c0026183:	89 d3                	mov    ebx,edx
c0026185:	a1 10 e9 02 c0       	mov    eax,ds:0xc002e910
c002618a:	8b 15 14 e9 02 c0    	mov    edx,DWORD PTR ds:0xc002e914
c0026190:	39 c8                	cmp    eax,ecx
c0026192:	89 d0                	mov    eax,edx
c0026194:	19 d8                	sbb    eax,ebx
c0026196:	73 02                	jae    c002619a <APICTimer::write(int)+0x8e>
c0026198:	eb d7                	jmp    c0026171 <APICTimer::write(int)+0x65>
c002619a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002619e:	05 20 03 00 00       	add    eax,0x320
c00261a3:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00261a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261ad:	05 90 03 00 00       	add    eax,0x390
c00261b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00261b4:	f7 d0                	not    eax
c00261b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261ba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00261be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261c2:	ba 00 00 00 00       	mov    edx,0x0
c00261c7:	f7 f3                	div    ebx
c00261c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00261cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00261d1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00261d7:	0d 00 00 02 00       	or     eax,0x20000
c00261dc:	89 c2                	mov    edx,eax
c00261de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261e2:	05 20 03 00 00       	add    eax,0x320
c00261e7:	89 10                	mov    DWORD PTR [eax],edx
c00261e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261ed:	05 e0 03 00 00       	add    eax,0x3e0
c00261f2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00261f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00261fc:	05 80 03 00 00       	add    eax,0x380
c0026201:	89 c2                	mov    edx,eax
c0026203:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026207:	89 02                	mov    DWORD PTR [edx],eax
c0026209:	90                   	nop
c002620a:	83 c4 28             	add    esp,0x28
c002620d:	5b                   	pop    ebx
c002620e:	c3                   	ret    
c002620f:	90                   	nop

c0026210 <APICTimer::open(int, int, void*)>:
c0026210:	57                   	push   edi
c0026211:	56                   	push   esi
c0026212:	53                   	push   ebx
c0026213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026217:	8b 00                	mov    eax,DWORD PTR [eax]
c0026219:	83 c0 24             	add    eax,0x24
c002621c:	8b 00                	mov    eax,DWORD PTR [eax]
c002621e:	83 ec 08             	sub    esp,0x8
c0026221:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026225:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026229:	ff d0                	call   eax
c002622b:	83 c4 10             	add    esp,0x10
c002622e:	a1 88 e2 02 c0       	mov    eax,ds:0xc002e288
c0026233:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026239:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002623f:	83 ec 0c             	sub    esp,0xc
c0026242:	50                   	push   eax
c0026243:	e8 ce f3 ff ff       	call   c0025616 <APIC::getBase()>
c0026248:	83 c4 10             	add    esp,0x10
c002624b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026255:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002625b:	0f b6 f8             	movzx  edi,al
c002625e:	89 d0                	mov    eax,edx
c0026260:	ba 00 00 00 00       	mov    edx,0x0
c0026265:	89 c1                	mov    ecx,eax
c0026267:	80 e5 ff             	and    ch,0xff
c002626a:	89 cb                	mov    ebx,ecx
c002626c:	0f b6 f2             	movzx  esi,dl
c002626f:	89 d8                	mov    eax,ebx
c0026271:	89 f2                	mov    edx,esi
c0026273:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026277:	8d 5f 08             	lea    ebx,[edi+0x8]
c002627a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002627e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026282:	83 e0 00             	and    eax,0x0
c0026285:	09 d0                	or     eax,edx
c0026287:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002628b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002628f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026295:	8d 50 01             	lea    edx,[eax+0x1]
c0026298:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002629c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262a2:	0f b6 d0             	movzx  edx,al
c00262a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262a9:	83 c2 08             	add    edx,0x8
c00262ac:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00262b0:	0f b6 c9             	movzx  ecx,cl
c00262b3:	81 c9 00 00 01 00    	or     ecx,0x10000
c00262b9:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00262bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00262c5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262d3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00262d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00262dd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00262e3:	83 ec 0c             	sub    esp,0xc
c00262e6:	51                   	push   ecx
c00262e7:	6a 01                	push   0x1
c00262e9:	68 de 60 02 c0       	push   0xc00260de
c00262ee:	52                   	push   edx
c00262ef:	50                   	push   eax
c00262f0:	e8 89 de fe ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00262f5:	83 c4 20             	add    esp,0x20
c00262f8:	89 c2                	mov    edx,eax
c00262fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fe:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026304:	b8 00 00 00 00       	mov    eax,0x0
c0026309:	5b                   	pop    ebx
c002630a:	5e                   	pop    esi
c002630b:	5f                   	pop    edi
c002630c:	c3                   	ret    
c002630d:	90                   	nop

c002630e <APICTimer::APICTimer()>:
c002630e:	83 ec 0c             	sub    esp,0xc
c0026311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026315:	83 ec 08             	sub    esp,0x8
c0026318:	68 18 d1 02 c0       	push   0xc002d118
c002631d:	50                   	push   eax
c002631e:	e8 f3 07 ff ff       	call   c0016b16 <Timer::Timer(char const*)>
c0026323:	83 c4 10             	add    esp,0x10
c0026326:	ba 2c d1 02 c0       	mov    edx,0xc002d12c
c002632b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002632f:	89 10                	mov    DWORD PTR [eax],edx
c0026331:	90                   	nop
c0026332:	83 c4 0c             	add    esp,0xc
c0026335:	c3                   	ret    

c0026336 <PIT::write(int)>:
c0026336:	83 ec 10             	sub    esp,0x10
c0026339:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002633d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026341:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026347:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002634b:	a3 44 26 03 c0       	mov    ds:0xc0032644,eax
c0026350:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026355:	99                   	cdq    
c0026356:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002635a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002635e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026365:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002636a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002636e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026373:	ee                   	out    dx,al
c0026374:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026378:	0f b6 c0             	movzx  eax,al
c002637b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026382:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026386:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002638a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002638f:	ee                   	out    dx,al
c0026390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026394:	c1 f8 08             	sar    eax,0x8
c0026397:	0f b6 c0             	movzx  eax,al
c002639a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00263a1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00263a5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00263a9:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00263ae:	ee                   	out    dx,al
c00263af:	90                   	nop
c00263b0:	83 c4 10             	add    esp,0x10
c00263b3:	c3                   	ret    

c00263b4 <pitHandler(regs*, void*)>:
c00263b4:	83 ec 0c             	sub    esp,0xc
c00263b7:	a1 44 26 03 c0       	mov    eax,ds:0xc0032644
c00263bc:	99                   	cdq    
c00263bd:	52                   	push   edx
c00263be:	50                   	push   eax
c00263bf:	6a 00                	push   0x0
c00263c1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00263c6:	e8 b1 04 00 00       	call   c002687c <__udivdi3>
c00263cb:	83 c4 10             	add    esp,0x10
c00263ce:	83 ec 08             	sub    esp,0x8
c00263d1:	52                   	push   edx
c00263d2:	50                   	push   eax
c00263d3:	e8 cd 07 ff ff       	call   c0016ba5 <timerHandler(unsigned long long)>
c00263d8:	83 c4 10             	add    esp,0x10
c00263db:	90                   	nop
c00263dc:	83 c4 0c             	add    esp,0xc
c00263df:	c3                   	ret    

c00263e0 <PIT::open(int, int, void*)>:
c00263e0:	83 ec 0c             	sub    esp,0xc
c00263e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00263e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263e9:	83 c0 24             	add    eax,0x24
c00263ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00263ee:	83 ec 08             	sub    esp,0x8
c00263f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00263f9:	ff d0                	call   eax
c00263fb:	83 c4 10             	add    esp,0x10
c00263fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026402:	83 ec 0c             	sub    esp,0xc
c0026405:	6a 00                	push   0x0
c0026407:	6a 01                	push   0x1
c0026409:	68 b4 63 02 c0       	push   0xc00263b4
c002640e:	6a 00                	push   0x0
c0026410:	50                   	push   eax
c0026411:	e8 68 dd fe ff       	call   c001417e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026416:	83 c4 20             	add    esp,0x20
c0026419:	89 c2                	mov    edx,eax
c002641b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002641f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026425:	b8 00 00 00 00       	mov    eax,0x0
c002642a:	83 c4 0c             	add    esp,0xc
c002642d:	c3                   	ret    

c002642e <PIT::close(int, int, void*)>:
c002642e:	83 ec 0c             	sub    esp,0xc
c0026431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026435:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026443:	6a 01                	push   0x1
c0026445:	68 b4 63 02 c0       	push   0xc00263b4
c002644a:	6a 00                	push   0x0
c002644c:	50                   	push   eax
c002644d:	e8 6a dd fe ff       	call   c00141bc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026452:	83 c4 10             	add    esp,0x10
c0026455:	b8 00 00 00 00       	mov    eax,0x0
c002645a:	83 c4 0c             	add    esp,0xc
c002645d:	c3                   	ret    

c002645e <PIT::PIT()>:
c002645e:	83 ec 0c             	sub    esp,0xc
c0026461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026465:	83 ec 08             	sub    esp,0x8
c0026468:	68 54 d1 02 c0       	push   0xc002d154
c002646d:	50                   	push   eax
c002646e:	e8 a3 06 ff ff       	call   c0016b16 <Timer::Timer(char const*)>
c0026473:	83 c4 10             	add    esp,0x10
c0026476:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c002647b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647f:	89 10                	mov    DWORD PTR [eax],edx
c0026481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026485:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002648b:	0f b6 d0             	movzx  edx,al
c002648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026492:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002649d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264a3:	0f b6 d0             	movzx  edx,al
c00264a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264aa:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00264af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00264b9:	8d 50 01             	lea    edx,[eax+0x1]
c00264bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264c0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00264c6:	0f b6 d0             	movzx  edx,al
c00264c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264cd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00264d1:	83 e1 3f             	and    ecx,0x3f
c00264d4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00264d8:	90                   	nop
c00264d9:	83 c4 0c             	add    esp,0xc
c00264dc:	c3                   	ret    
c00264dd:	66 90                	xchg   ax,ax
c00264df:	90                   	nop

c00264e0 <avxDetect>:
c00264e0:	b8 00 00 00 00       	mov    eax,0x0
c00264e5:	c3                   	ret    

c00264e6 <avxSave>:
c00264e6:	c3                   	ret    

c00264e7 <avxLoad>:
c00264e7:	c3                   	ret    

c00264e8 <avxInit>:
c00264e8:	c3                   	ret    

c00264e9 <avxClose>:
c00264e9:	c3                   	ret    

c00264ea <wouldSheSayYes>:
c00264ea:	c3                   	ret    
c00264eb:	49                   	dec    ecx
c00264ec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00264f0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00264f4:	75 20                	jne    c0026516 <sseDetect.noSSE+0x1>
c00264f6:	4e                   	dec    esi
c00264f7:	79 61                	jns    c002655a <x87Detect+0x14>
c00264f9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00264fe:	66 90                	xchg   ax,ax

c0026500 <absolutelyNoChanceInHell>:
c0026500:	b8 01 00 00 00       	mov    eax,0x1
c0026505:	0f a2                	cpuid  
c0026507:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002650d:	74 06                	je     c0026515 <sseDetect.noSSE>
c002650f:	b8 01 00 00 00       	mov    eax,0x1
c0026514:	c3                   	ret    

c0026515 <sseDetect.noSSE>:
c0026515:	31 c0                	xor    eax,eax
c0026517:	c3                   	ret    

c0026518 <sseSave>:
c0026518:	0f ae 44 24 08       	fxsave [esp+0x8]
c002651d:	c3                   	ret    

c002651e <sseLoad>:
c002651e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026523:	c3                   	ret    

c0026524 <sseInit>:
c0026524:	e8 43 00 00 00       	call   c002656c <x87Init>
c0026529:	0f 20 e0             	mov    eax,cr4
c002652c:	66 0d 00 06          	or     ax,0x600
c0026530:	0f 22 e0             	mov    cr4,eax
c0026533:	c3                   	ret    

c0026534 <sseClose>:
c0026534:	c3                   	ret    
c0026535:	66 90                	xchg   ax,ax
c0026537:	66 90                	xchg   ax,ax
c0026539:	66 90                	xchg   ax,ax
c002653b:	66 90                	xchg   ax,ax
c002653d:	66 90                	xchg   ax,ax
c002653f:	90                   	nop

c0026540 <value_37F>:
c0026540:	7f 03                	jg     c0026545 <value_37A+0x1>

c0026542 <value_37E>:
c0026542:	7e 03                	jle    c0026547 <x87Detect+0x1>

c0026544 <value_37A>:
c0026544:	7a 03                	jp     c0026549 <x87Detect+0x3>

c0026546 <x87Detect>:
c0026546:	b8 01 00 00 00       	mov    eax,0x1
c002654b:	0f a2                	cpuid  
c002654d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026553:	74 06                	je     c002655b <x87Detect.nox87>
c0026555:	b8 01 00 00 00       	mov    eax,0x1
c002655a:	c3                   	ret    

c002655b <x87Detect.nox87>:
c002655b:	b8 00 00 00 00       	mov    eax,0x0
c0026560:	c3                   	ret    

c0026561 <x87Save>:
c0026561:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026566:	c3                   	ret    

c0026567 <x87Load>:
c0026567:	dd 64 24 08          	frstor [esp+0x8]
c002656b:	c3                   	ret    

c002656c <x87Init>:
c002656c:	9b db e3             	finit  
c002656f:	0f 20 c0             	mov    eax,cr0
c0026572:	66 25 fb ff          	and    ax,0xfffb
c0026576:	66 0d 22 00          	or     ax,0x22
c002657a:	0f 22 c0             	mov    cr0,eax
c002657d:	0f 06                	clts   
c002657f:	d9 2d 44 65 02 c0    	fldcw  WORD PTR ds:0xc0026544
c0026585:	c3                   	ret    

c0026586 <x87Close>:
c0026586:	c3                   	ret    
c0026587:	90                   	nop

c0026588 <__do_global_ctors_aux>:
c0026588:	a1 cc 90 02 c0       	mov    eax,ds:0xc00290cc
c002658d:	83 f8 ff             	cmp    eax,0xffffffff
c0026590:	74 1a                	je     c00265ac <__do_global_ctors_aux+0x24>
c0026592:	55                   	push   ebp
c0026593:	89 e5                	mov    ebp,esp
c0026595:	53                   	push   ebx
c0026596:	52                   	push   edx
c0026597:	bb cc 90 02 c0       	mov    ebx,0xc00290cc
c002659c:	ff d0                	call   eax
c002659e:	83 eb 04             	sub    ebx,0x4
c00265a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00265a3:	83 f8 ff             	cmp    eax,0xffffffff
c00265a6:	75 f4                	jne    c002659c <__do_global_ctors_aux+0x14>
c00265a8:	58                   	pop    eax
c00265a9:	5b                   	pop    ebx
c00265aa:	5d                   	pop    ebp
c00265ab:	c3                   	ret    
c00265ac:	c3                   	ret    
c00265ad:	66 90                	xchg   ax,ax
c00265af:	90                   	nop

c00265b0 <__divdi3>:
c00265b0:	55                   	push   ebp
c00265b1:	57                   	push   edi
c00265b2:	56                   	push   esi
c00265b3:	53                   	push   ebx
c00265b4:	83 ec 1c             	sub    esp,0x1c
c00265b7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00265bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00265bf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00265c2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00265c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00265ca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00265ce:	85 db                	test   ebx,ebx
c00265d0:	0f 88 8e 00 00 00    	js     c0026664 <__divdi3+0xb4>
c00265d6:	89 dd                	mov    ebp,ebx
c00265d8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00265e0:	89 d3                	mov    ebx,edx
c00265e2:	85 d2                	test   edx,edx
c00265e4:	79 0d                	jns    c00265f3 <__divdi3+0x43>
c00265e6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00265ea:	f7 d8                	neg    eax
c00265ec:	83 d2 00             	adc    edx,0x0
c00265ef:	f7 da                	neg    edx
c00265f1:	89 d3                	mov    ebx,edx
c00265f3:	89 c7                	mov    edi,eax
c00265f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00265f8:	85 db                	test   ebx,ebx
c00265fa:	75 48                	jne    c0026644 <__divdi3+0x94>
c00265fc:	39 ef                	cmp    edi,ebp
c00265fe:	76 24                	jbe    c0026624 <__divdi3+0x74>
c0026600:	89 ea                	mov    edx,ebp
c0026602:	f7 f7                	div    edi
c0026604:	89 c1                	mov    ecx,eax
c0026606:	31 f6                	xor    esi,esi
c0026608:	89 c8                	mov    eax,ecx
c002660a:	89 f2                	mov    edx,esi
c002660c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026610:	85 c9                	test   ecx,ecx
c0026612:	74 07                	je     c002661b <__divdi3+0x6b>
c0026614:	f7 d8                	neg    eax
c0026616:	83 d2 00             	adc    edx,0x0
c0026619:	f7 da                	neg    edx
c002661b:	83 c4 1c             	add    esp,0x1c
c002661e:	5b                   	pop    ebx
c002661f:	5e                   	pop    esi
c0026620:	5f                   	pop    edi
c0026621:	5d                   	pop    ebp
c0026622:	c3                   	ret    
c0026623:	90                   	nop
c0026624:	85 ff                	test   edi,edi
c0026626:	75 0b                	jne    c0026633 <__divdi3+0x83>
c0026628:	b8 01 00 00 00       	mov    eax,0x1
c002662d:	31 d2                	xor    edx,edx
c002662f:	f7 f3                	div    ebx
c0026631:	89 c7                	mov    edi,eax
c0026633:	31 d2                	xor    edx,edx
c0026635:	89 e8                	mov    eax,ebp
c0026637:	f7 f7                	div    edi
c0026639:	89 c6                	mov    esi,eax
c002663b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002663e:	f7 f7                	div    edi
c0026640:	89 c1                	mov    ecx,eax
c0026642:	eb c4                	jmp    c0026608 <__divdi3+0x58>
c0026644:	39 eb                	cmp    ebx,ebp
c0026646:	77 3c                	ja     c0026684 <__divdi3+0xd4>
c0026648:	0f bd f3             	bsr    esi,ebx
c002664b:	83 f6 1f             	xor    esi,0x1f
c002664e:	75 40                	jne    c0026690 <__divdi3+0xe0>
c0026650:	39 eb                	cmp    ebx,ebp
c0026652:	72 09                	jb     c002665d <__divdi3+0xad>
c0026654:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026657:	0f 87 97 00 00 00    	ja     c00266f4 <__divdi3+0x144>
c002665d:	b9 01 00 00 00       	mov    ecx,0x1
c0026662:	eb a4                	jmp    c0026608 <__divdi3+0x58>
c0026664:	f7 d9                	neg    ecx
c0026666:	83 d3 00             	adc    ebx,0x0
c0026669:	f7 db                	neg    ebx
c002666b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002666e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026672:	89 dd                	mov    ebp,ebx
c0026674:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002667c:	e9 5f ff ff ff       	jmp    c00265e0 <__divdi3+0x30>
c0026681:	8d 76 00             	lea    esi,[esi+0x0]
c0026684:	31 f6                	xor    esi,esi
c0026686:	31 c9                	xor    ecx,ecx
c0026688:	e9 7b ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c002668d:	8d 76 00             	lea    esi,[esi+0x0]
c0026690:	b8 20 00 00 00       	mov    eax,0x20
c0026695:	29 f0                	sub    eax,esi
c0026697:	89 f1                	mov    ecx,esi
c0026699:	d3 e3                	shl    ebx,cl
c002669b:	89 fa                	mov    edx,edi
c002669d:	88 c1                	mov    cl,al
c002669f:	d3 ea                	shr    edx,cl
c00266a1:	09 da                	or     edx,ebx
c00266a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00266a7:	89 f1                	mov    ecx,esi
c00266a9:	d3 e7                	shl    edi,cl
c00266ab:	89 eb                	mov    ebx,ebp
c00266ad:	88 c1                	mov    cl,al
c00266af:	d3 eb                	shr    ebx,cl
c00266b1:	89 f1                	mov    ecx,esi
c00266b3:	d3 e5                	shl    ebp,cl
c00266b5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00266b8:	88 c1                	mov    cl,al
c00266ba:	d3 ea                	shr    edx,cl
c00266bc:	09 d5                	or     ebp,edx
c00266be:	89 e8                	mov    eax,ebp
c00266c0:	89 da                	mov    edx,ebx
c00266c2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00266c6:	89 d3                	mov    ebx,edx
c00266c8:	89 c5                	mov    ebp,eax
c00266ca:	f7 e7                	mul    edi
c00266cc:	39 d3                	cmp    ebx,edx
c00266ce:	72 18                	jb     c00266e8 <__divdi3+0x138>
c00266d0:	74 0a                	je     c00266dc <__divdi3+0x12c>
c00266d2:	89 e9                	mov    ecx,ebp
c00266d4:	31 f6                	xor    esi,esi
c00266d6:	e9 2d ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266db:	90                   	nop
c00266dc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00266df:	89 f1                	mov    ecx,esi
c00266e1:	d3 e7                	shl    edi,cl
c00266e3:	39 c7                	cmp    edi,eax
c00266e5:	73 eb                	jae    c00266d2 <__divdi3+0x122>
c00266e7:	90                   	nop
c00266e8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00266eb:	31 f6                	xor    esi,esi
c00266ed:	e9 16 ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266f2:	66 90                	xchg   ax,ax
c00266f4:	31 c9                	xor    ecx,ecx
c00266f6:	e9 0d ff ff ff       	jmp    c0026608 <__divdi3+0x58>
c00266fb:	90                   	nop

c00266fc <__moddi3>:
c00266fc:	55                   	push   ebp
c00266fd:	57                   	push   edi
c00266fe:	56                   	push   esi
c00266ff:	53                   	push   ebx
c0026700:	83 ec 2c             	sub    esp,0x2c
c0026703:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026707:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002670b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002670f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026713:	85 db                	test   ebx,ebx
c0026715:	0f 88 85 00 00 00    	js     c00267a0 <__moddi3+0xa4>
c002671b:	89 de                	mov    esi,ebx
c002671d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026725:	89 d7                	mov    edi,edx
c0026727:	85 d2                	test   edx,edx
c0026729:	79 09                	jns    c0026734 <__moddi3+0x38>
c002672b:	f7 d8                	neg    eax
c002672d:	83 d2 00             	adc    edx,0x0
c0026730:	f7 da                	neg    edx
c0026732:	89 d7                	mov    edi,edx
c0026734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026738:	89 cd                	mov    ebp,ecx
c002673a:	85 ff                	test   edi,edi
c002673c:	75 52                	jne    c0026790 <__moddi3+0x94>
c002673e:	89 c3                	mov    ebx,eax
c0026740:	39 f0                	cmp    eax,esi
c0026742:	76 24                	jbe    c0026768 <__moddi3+0x6c>
c0026744:	89 c8                	mov    eax,ecx
c0026746:	89 f2                	mov    edx,esi
c0026748:	f7 f3                	div    ebx
c002674a:	89 d6                	mov    esi,edx
c002674c:	89 f0                	mov    eax,esi
c002674e:	31 d2                	xor    edx,edx
c0026750:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026754:	85 c9                	test   ecx,ecx
c0026756:	74 07                	je     c002675f <__moddi3+0x63>
c0026758:	f7 d8                	neg    eax
c002675a:	83 d2 00             	adc    edx,0x0
c002675d:	f7 da                	neg    edx
c002675f:	83 c4 2c             	add    esp,0x2c
c0026762:	5b                   	pop    ebx
c0026763:	5e                   	pop    esi
c0026764:	5f                   	pop    edi
c0026765:	5d                   	pop    ebp
c0026766:	c3                   	ret    
c0026767:	90                   	nop
c0026768:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002676c:	85 db                	test   ebx,ebx
c002676e:	75 0d                	jne    c002677d <__moddi3+0x81>
c0026770:	b8 01 00 00 00       	mov    eax,0x1
c0026775:	31 d2                	xor    edx,edx
c0026777:	f7 f7                	div    edi
c0026779:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002677d:	89 f0                	mov    eax,esi
c002677f:	31 d2                	xor    edx,edx
c0026781:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026785:	f7 f7                	div    edi
c0026787:	89 e8                	mov    eax,ebp
c0026789:	f7 f7                	div    edi
c002678b:	89 d6                	mov    esi,edx
c002678d:	eb bd                	jmp    c002674c <__moddi3+0x50>
c002678f:	90                   	nop
c0026790:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026794:	39 f7                	cmp    edi,esi
c0026796:	76 20                	jbe    c00267b8 <__moddi3+0xbc>
c0026798:	89 c8                	mov    eax,ecx
c002679a:	89 f2                	mov    edx,esi
c002679c:	eb b2                	jmp    c0026750 <__moddi3+0x54>
c002679e:	66 90                	xchg   ax,ax
c00267a0:	f7 d9                	neg    ecx
c00267a2:	83 d3 00             	adc    ebx,0x0
c00267a5:	f7 db                	neg    ebx
c00267a7:	89 de                	mov    esi,ebx
c00267a9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00267b1:	e9 6f ff ff ff       	jmp    c0026725 <__moddi3+0x29>
c00267b6:	66 90                	xchg   ax,ax
c00267b8:	0f bd c7             	bsr    eax,edi
c00267bb:	83 f0 1f             	xor    eax,0x1f
c00267be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00267c2:	75 24                	jne    c00267e8 <__moddi3+0xec>
c00267c4:	39 f7                	cmp    edi,esi
c00267c6:	72 06                	jb     c00267ce <__moddi3+0xd2>
c00267c8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00267cc:	77 0c                	ja     c00267da <__moddi3+0xde>
c00267ce:	89 e9                	mov    ecx,ebp
c00267d0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00267d4:	19 fe                	sbb    esi,edi
c00267d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00267da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00267de:	89 f2                	mov    edx,esi
c00267e0:	e9 6b ff ff ff       	jmp    c0026750 <__moddi3+0x54>
c00267e5:	8d 76 00             	lea    esi,[esi+0x0]
c00267e8:	b8 20 00 00 00       	mov    eax,0x20
c00267ed:	89 c2                	mov    edx,eax
c00267ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00267f3:	29 da                	sub    edx,ebx
c00267f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00267f9:	88 d9                	mov    cl,bl
c00267fb:	d3 e7                	shl    edi,cl
c00267fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026801:	88 d1                	mov    cl,dl
c0026803:	d3 e8                	shr    eax,cl
c0026805:	09 c7                	or     edi,eax
c0026807:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002680b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002680f:	89 d8                	mov    eax,ebx
c0026811:	88 d9                	mov    cl,bl
c0026813:	d3 e7                	shl    edi,cl
c0026815:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026819:	89 f3                	mov    ebx,esi
c002681b:	88 d1                	mov    cl,dl
c002681d:	d3 eb                	shr    ebx,cl
c002681f:	89 c7                	mov    edi,eax
c0026821:	88 c1                	mov    cl,al
c0026823:	d3 e6                	shl    esi,cl
c0026825:	89 e8                	mov    eax,ebp
c0026827:	88 d1                	mov    cl,dl
c0026829:	d3 e8                	shr    eax,cl
c002682b:	09 f0                	or     eax,esi
c002682d:	89 f9                	mov    ecx,edi
c002682f:	d3 e5                	shl    ebp,cl
c0026831:	89 da                	mov    edx,ebx
c0026833:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026837:	89 d3                	mov    ebx,edx
c0026839:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002683d:	89 c6                	mov    esi,eax
c002683f:	89 d1                	mov    ecx,edx
c0026841:	39 d3                	cmp    ebx,edx
c0026843:	72 27                	jb     c002686c <__moddi3+0x170>
c0026845:	74 21                	je     c0026868 <__moddi3+0x16c>
c0026847:	29 f5                	sub    ebp,esi
c0026849:	19 cb                	sbb    ebx,ecx
c002684b:	89 de                	mov    esi,ebx
c002684d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026851:	d3 e6                	shl    esi,cl
c0026853:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026857:	89 f9                	mov    ecx,edi
c0026859:	d3 ed                	shr    ebp,cl
c002685b:	09 ee                	or     esi,ebp
c002685d:	89 f0                	mov    eax,esi
c002685f:	d3 eb                	shr    ebx,cl
c0026861:	89 da                	mov    edx,ebx
c0026863:	e9 e8 fe ff ff       	jmp    c0026750 <__moddi3+0x54>
c0026868:	39 c5                	cmp    ebp,eax
c002686a:	73 db                	jae    c0026847 <__moddi3+0x14b>
c002686c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026870:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026874:	89 d1                	mov    ecx,edx
c0026876:	89 c6                	mov    esi,eax
c0026878:	eb cd                	jmp    c0026847 <__moddi3+0x14b>
c002687a:	66 90                	xchg   ax,ax

c002687c <__udivdi3>:
c002687c:	55                   	push   ebp
c002687d:	57                   	push   edi
c002687e:	56                   	push   esi
c002687f:	53                   	push   ebx
c0026880:	83 ec 1c             	sub    esp,0x1c
c0026883:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026887:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002688b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002688f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026893:	85 d2                	test   edx,edx
c0026895:	75 41                	jne    c00268d8 <__udivdi3+0x5c>
c0026897:	39 f7                	cmp    edi,esi
c0026899:	76 15                	jbe    c00268b0 <__udivdi3+0x34>
c002689b:	89 e8                	mov    eax,ebp
c002689d:	89 f2                	mov    edx,esi
c002689f:	f7 f7                	div    edi
c00268a1:	31 db                	xor    ebx,ebx
c00268a3:	89 da                	mov    edx,ebx
c00268a5:	83 c4 1c             	add    esp,0x1c
c00268a8:	5b                   	pop    ebx
c00268a9:	5e                   	pop    esi
c00268aa:	5f                   	pop    edi
c00268ab:	5d                   	pop    ebp
c00268ac:	c3                   	ret    
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	89 f9                	mov    ecx,edi
c00268b2:	85 ff                	test   edi,edi
c00268b4:	75 0b                	jne    c00268c1 <__udivdi3+0x45>
c00268b6:	b8 01 00 00 00       	mov    eax,0x1
c00268bb:	31 d2                	xor    edx,edx
c00268bd:	f7 f7                	div    edi
c00268bf:	89 c1                	mov    ecx,eax
c00268c1:	31 d2                	xor    edx,edx
c00268c3:	89 f0                	mov    eax,esi
c00268c5:	f7 f1                	div    ecx
c00268c7:	89 c3                	mov    ebx,eax
c00268c9:	89 e8                	mov    eax,ebp
c00268cb:	f7 f1                	div    ecx
c00268cd:	89 da                	mov    edx,ebx
c00268cf:	83 c4 1c             	add    esp,0x1c
c00268d2:	5b                   	pop    ebx
c00268d3:	5e                   	pop    esi
c00268d4:	5f                   	pop    edi
c00268d5:	5d                   	pop    ebp
c00268d6:	c3                   	ret    
c00268d7:	90                   	nop
c00268d8:	39 f2                	cmp    edx,esi
c00268da:	77 1c                	ja     c00268f8 <__udivdi3+0x7c>
c00268dc:	0f bd da             	bsr    ebx,edx
c00268df:	83 f3 1f             	xor    ebx,0x1f
c00268e2:	75 24                	jne    c0026908 <__udivdi3+0x8c>
c00268e4:	39 f2                	cmp    edx,esi
c00268e6:	72 08                	jb     c00268f0 <__udivdi3+0x74>
c00268e8:	39 ef                	cmp    edi,ebp
c00268ea:	0f 87 84 00 00 00    	ja     c0026974 <__udivdi3+0xf8>
c00268f0:	b8 01 00 00 00       	mov    eax,0x1
c00268f5:	eb ac                	jmp    c00268a3 <__udivdi3+0x27>
c00268f7:	90                   	nop
c00268f8:	31 db                	xor    ebx,ebx
c00268fa:	31 c0                	xor    eax,eax
c00268fc:	89 da                	mov    edx,ebx
c00268fe:	83 c4 1c             	add    esp,0x1c
c0026901:	5b                   	pop    ebx
c0026902:	5e                   	pop    esi
c0026903:	5f                   	pop    edi
c0026904:	5d                   	pop    ebp
c0026905:	c3                   	ret    
c0026906:	66 90                	xchg   ax,ax
c0026908:	b8 20 00 00 00       	mov    eax,0x20
c002690d:	29 d8                	sub    eax,ebx
c002690f:	88 d9                	mov    cl,bl
c0026911:	d3 e2                	shl    edx,cl
c0026913:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026917:	89 fa                	mov    edx,edi
c0026919:	88 c1                	mov    cl,al
c002691b:	d3 ea                	shr    edx,cl
c002691d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026921:	09 d1                	or     ecx,edx
c0026923:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026927:	88 d9                	mov    cl,bl
c0026929:	d3 e7                	shl    edi,cl
c002692b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002692f:	89 f7                	mov    edi,esi
c0026931:	88 c1                	mov    cl,al
c0026933:	d3 ef                	shr    edi,cl
c0026935:	88 d9                	mov    cl,bl
c0026937:	d3 e6                	shl    esi,cl
c0026939:	89 ea                	mov    edx,ebp
c002693b:	88 c1                	mov    cl,al
c002693d:	d3 ea                	shr    edx,cl
c002693f:	09 d6                	or     esi,edx
c0026941:	89 f0                	mov    eax,esi
c0026943:	89 fa                	mov    edx,edi
c0026945:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026949:	89 d7                	mov    edi,edx
c002694b:	89 c6                	mov    esi,eax
c002694d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026951:	39 d7                	cmp    edi,edx
c0026953:	72 13                	jb     c0026968 <__udivdi3+0xec>
c0026955:	74 09                	je     c0026960 <__udivdi3+0xe4>
c0026957:	89 f0                	mov    eax,esi
c0026959:	31 db                	xor    ebx,ebx
c002695b:	e9 43 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c0026960:	88 d9                	mov    cl,bl
c0026962:	d3 e5                	shl    ebp,cl
c0026964:	39 c5                	cmp    ebp,eax
c0026966:	73 ef                	jae    c0026957 <__udivdi3+0xdb>
c0026968:	8d 46 ff             	lea    eax,[esi-0x1]
c002696b:	31 db                	xor    ebx,ebx
c002696d:	e9 31 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c0026972:	66 90                	xchg   ax,ax
c0026974:	31 c0                	xor    eax,eax
c0026976:	e9 28 ff ff ff       	jmp    c00268a3 <__udivdi3+0x27>
c002697b:	90                   	nop

c002697c <__umoddi3>:
c002697c:	55                   	push   ebp
c002697d:	57                   	push   edi
c002697e:	56                   	push   esi
c002697f:	53                   	push   ebx
c0026980:	83 ec 1c             	sub    esp,0x1c
c0026983:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026987:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002698b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002698f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026993:	89 da                	mov    edx,ebx
c0026995:	85 c0                	test   eax,eax
c0026997:	75 37                	jne    c00269d0 <__umoddi3+0x54>
c0026999:	39 df                	cmp    edi,ebx
c002699b:	76 13                	jbe    c00269b0 <__umoddi3+0x34>
c002699d:	89 f0                	mov    eax,esi
c002699f:	f7 f7                	div    edi
c00269a1:	89 d0                	mov    eax,edx
c00269a3:	31 d2                	xor    edx,edx
c00269a5:	83 c4 1c             	add    esp,0x1c
c00269a8:	5b                   	pop    ebx
c00269a9:	5e                   	pop    esi
c00269aa:	5f                   	pop    edi
c00269ab:	5d                   	pop    ebp
c00269ac:	c3                   	ret    
c00269ad:	8d 76 00             	lea    esi,[esi+0x0]
c00269b0:	89 fd                	mov    ebp,edi
c00269b2:	85 ff                	test   edi,edi
c00269b4:	75 0b                	jne    c00269c1 <__umoddi3+0x45>
c00269b6:	b8 01 00 00 00       	mov    eax,0x1
c00269bb:	31 d2                	xor    edx,edx
c00269bd:	f7 f7                	div    edi
c00269bf:	89 c5                	mov    ebp,eax
c00269c1:	89 d8                	mov    eax,ebx
c00269c3:	31 d2                	xor    edx,edx
c00269c5:	f7 f5                	div    ebp
c00269c7:	89 f0                	mov    eax,esi
c00269c9:	f7 f5                	div    ebp
c00269cb:	89 d0                	mov    eax,edx
c00269cd:	eb d4                	jmp    c00269a3 <__umoddi3+0x27>
c00269cf:	90                   	nop
c00269d0:	89 f1                	mov    ecx,esi
c00269d2:	39 d8                	cmp    eax,ebx
c00269d4:	76 0a                	jbe    c00269e0 <__umoddi3+0x64>
c00269d6:	89 f0                	mov    eax,esi
c00269d8:	83 c4 1c             	add    esp,0x1c
c00269db:	5b                   	pop    ebx
c00269dc:	5e                   	pop    esi
c00269dd:	5f                   	pop    edi
c00269de:	5d                   	pop    ebp
c00269df:	c3                   	ret    
c00269e0:	0f bd e8             	bsr    ebp,eax
c00269e3:	83 f5 1f             	xor    ebp,0x1f
c00269e6:	75 1c                	jne    c0026a04 <__umoddi3+0x88>
c00269e8:	39 d8                	cmp    eax,ebx
c00269ea:	72 04                	jb     c00269f0 <__umoddi3+0x74>
c00269ec:	39 f7                	cmp    edi,esi
c00269ee:	77 08                	ja     c00269f8 <__umoddi3+0x7c>
c00269f0:	89 da                	mov    edx,ebx
c00269f2:	29 fe                	sub    esi,edi
c00269f4:	19 c2                	sbb    edx,eax
c00269f6:	89 f1                	mov    ecx,esi
c00269f8:	89 c8                	mov    eax,ecx
c00269fa:	83 c4 1c             	add    esp,0x1c
c00269fd:	5b                   	pop    ebx
c00269fe:	5e                   	pop    esi
c00269ff:	5f                   	pop    edi
c0026a00:	5d                   	pop    ebp
c0026a01:	c3                   	ret    
c0026a02:	66 90                	xchg   ax,ax
c0026a04:	ba 20 00 00 00       	mov    edx,0x20
c0026a09:	29 ea                	sub    edx,ebp
c0026a0b:	89 e9                	mov    ecx,ebp
c0026a0d:	d3 e0                	shl    eax,cl
c0026a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026a13:	89 f8                	mov    eax,edi
c0026a15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026a19:	88 d1                	mov    cl,dl
c0026a1b:	d3 e8                	shr    eax,cl
c0026a1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026a21:	09 c1                	or     ecx,eax
c0026a23:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026a27:	89 e9                	mov    ecx,ebp
c0026a29:	d3 e7                	shl    edi,cl
c0026a2b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026a35:	88 d1                	mov    cl,dl
c0026a37:	d3 e8                	shr    eax,cl
c0026a39:	89 c7                	mov    edi,eax
c0026a3b:	89 e9                	mov    ecx,ebp
c0026a3d:	d3 e3                	shl    ebx,cl
c0026a3f:	89 f0                	mov    eax,esi
c0026a41:	88 d1                	mov    cl,dl
c0026a43:	d3 e8                	shr    eax,cl
c0026a45:	09 d8                	or     eax,ebx
c0026a47:	89 e9                	mov    ecx,ebp
c0026a49:	d3 e6                	shl    esi,cl
c0026a4b:	89 f3                	mov    ebx,esi
c0026a4d:	89 fa                	mov    edx,edi
c0026a4f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026a53:	89 d1                	mov    ecx,edx
c0026a55:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a59:	89 c6                	mov    esi,eax
c0026a5b:	89 d7                	mov    edi,edx
c0026a5d:	39 d1                	cmp    ecx,edx
c0026a5f:	72 27                	jb     c0026a88 <__umoddi3+0x10c>
c0026a61:	74 21                	je     c0026a84 <__umoddi3+0x108>
c0026a63:	89 ca                	mov    edx,ecx
c0026a65:	29 f3                	sub    ebx,esi
c0026a67:	19 fa                	sbb    edx,edi
c0026a69:	89 d0                	mov    eax,edx
c0026a6b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026a6f:	d3 e0                	shl    eax,cl
c0026a71:	89 e9                	mov    ecx,ebp
c0026a73:	d3 eb                	shr    ebx,cl
c0026a75:	09 d8                	or     eax,ebx
c0026a77:	d3 ea                	shr    edx,cl
c0026a79:	83 c4 1c             	add    esp,0x1c
c0026a7c:	5b                   	pop    ebx
c0026a7d:	5e                   	pop    esi
c0026a7e:	5f                   	pop    edi
c0026a7f:	5d                   	pop    ebp
c0026a80:	c3                   	ret    
c0026a81:	8d 76 00             	lea    esi,[esi+0x0]
c0026a84:	39 c3                	cmp    ebx,eax
c0026a86:	73 db                	jae    c0026a63 <__umoddi3+0xe7>
c0026a88:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a8c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026a90:	89 d7                	mov    edi,edx
c0026a92:	89 c6                	mov    esi,eax
c0026a94:	eb cd                	jmp    c0026a63 <__umoddi3+0xe7>

c0026a96 <__addsf3>:
c0026a96:	55                   	push   ebp
c0026a97:	89 e5                	mov    ebp,esp
c0026a99:	57                   	push   edi
c0026a9a:	56                   	push   esi
c0026a9b:	53                   	push   ebx
c0026a9c:	83 ec 08             	sub    esp,0x8
c0026a9f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026aa2:	89 fa                	mov    edx,edi
c0026aa4:	89 f8                	mov    eax,edi
c0026aa6:	c1 f8 17             	sar    eax,0x17
c0026aa9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026aac:	c1 e2 08             	shl    edx,0x8
c0026aaf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ab5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ab8:	89 de                	mov    esi,ebx
c0026aba:	c1 fe 17             	sar    esi,0x17
c0026abd:	c1 e3 08             	shl    ebx,0x8
c0026ac0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ac6:	31 f0                	xor    eax,esi
c0026ac8:	0f 88 3b 01 00 00    	js     c0026c09 <__addsf3+0x173>
c0026ace:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026ad1:	29 f1                	sub    ecx,esi
c0026ad3:	85 c9                	test   ecx,ecx
c0026ad5:	7e 54                	jle    c0026b2b <__addsf3+0x95>
c0026ad7:	89 f0                	mov    eax,esi
c0026ad9:	84 c0                	test   al,al
c0026adb:	75 10                	jne    c0026aed <__addsf3+0x57>
c0026add:	85 db                	test   ebx,ebx
c0026adf:	0f 84 aa 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026ae5:	49                   	dec    ecx
c0026ae6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026ae9:	74 38                	je     c0026b23 <__addsf3+0x8d>
c0026aeb:	eb 13                	jmp    c0026b00 <__addsf3+0x6a>
c0026aed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026af0:	f7 d0                	not    eax
c0026af2:	84 c0                	test   al,al
c0026af4:	0f 84 95 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026afa:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026b00:	83 f9 1f             	cmp    ecx,0x1f
c0026b03:	0f 8f 86 02 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026b09:	89 de                	mov    esi,ebx
c0026b0b:	d3 ee                	shr    esi,cl
c0026b0d:	b8 20 00 00 00       	mov    eax,0x20
c0026b12:	29 c8                	sub    eax,ecx
c0026b14:	89 c1                	mov    ecx,eax
c0026b16:	d3 e3                	shl    ebx,cl
c0026b18:	31 c0                	xor    eax,eax
c0026b1a:	85 db                	test   ebx,ebx
c0026b1c:	0f 95 c0             	setne  al
c0026b1f:	09 f0                	or     eax,esi
c0026b21:	01 d0                	add    eax,edx
c0026b23:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026b26:	e9 b6 00 00 00       	jmp    c0026be1 <__addsf3+0x14b>
c0026b2b:	74 5c                	je     c0026b89 <__addsf3+0xf3>
c0026b2d:	89 f1                	mov    ecx,esi
c0026b2f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026b32:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b35:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b39:	75 14                	jne    c0026b4f <__addsf3+0xb9>
c0026b3b:	85 d2                	test   edx,edx
c0026b3d:	0f 84 4c 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026b43:	49                   	dec    ecx
c0026b44:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026b47:	0f 84 94 00 00 00    	je     c0026be1 <__addsf3+0x14b>
c0026b4d:	eb 12                	jmp    c0026b61 <__addsf3+0xcb>
c0026b4f:	89 f0                	mov    eax,esi
c0026b51:	f7 d0                	not    eax
c0026b53:	84 c0                	test   al,al
c0026b55:	0f 84 34 02 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026b5b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b61:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b64:	83 f9 1f             	cmp    ecx,0x1f
c0026b67:	0f 8f 22 02 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026b6d:	89 d7                	mov    edi,edx
c0026b6f:	d3 ef                	shr    edi,cl
c0026b71:	b8 20 00 00 00       	mov    eax,0x20
c0026b76:	29 c8                	sub    eax,ecx
c0026b78:	89 c1                	mov    ecx,eax
c0026b7a:	d3 e2                	shl    edx,cl
c0026b7c:	31 c0                	xor    eax,eax
c0026b7e:	85 d2                	test   edx,edx
c0026b80:	0f 95 c0             	setne  al
c0026b83:	09 f8                	or     eax,edi
c0026b85:	01 d8                	add    eax,ebx
c0026b87:	eb 58                	jmp    c0026be1 <__addsf3+0x14b>
c0026b89:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b8c:	8d 70 01             	lea    esi,[eax+0x1]
c0026b8f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026b95:	75 32                	jne    c0026bc9 <__addsf3+0x133>
c0026b97:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026b9b:	75 1f                	jne    c0026bbc <__addsf3+0x126>
c0026b9d:	85 d2                	test   edx,edx
c0026b9f:	0f 84 e0 01 00 00    	je     c0026d85 <__addsf3+0x2ef>
c0026ba5:	85 db                	test   ebx,ebx
c0026ba7:	0f 84 e2 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026bad:	89 d0                	mov    eax,edx
c0026baf:	01 d8                	add    eax,ebx
c0026bb1:	0f 89 a9 01 00 00    	jns    c0026d60 <__addsf3+0x2ca>
c0026bb7:	e9 9d 01 00 00       	jmp    c0026d59 <__addsf3+0x2c3>
c0026bbc:	85 d2                	test   edx,edx
c0026bbe:	0f 85 cb 01 00 00    	jne    c0026d8f <__addsf3+0x2f9>
c0026bc4:	e9 bc 01 00 00       	jmp    c0026d85 <__addsf3+0x2ef>
c0026bc9:	31 c0                	xor    eax,eax
c0026bcb:	89 f1                	mov    ecx,esi
c0026bcd:	f7 d1                	not    ecx
c0026bcf:	84 c9                	test   cl,cl
c0026bd1:	0f 84 90 01 00 00    	je     c0026d67 <__addsf3+0x2d1>
c0026bd7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026bda:	d1 e8                	shr    eax,1
c0026bdc:	e9 86 01 00 00       	jmp    c0026d67 <__addsf3+0x2d1>
c0026be1:	85 c0                	test   eax,eax
c0026be3:	0f 89 7e 01 00 00    	jns    c0026d67 <__addsf3+0x2d1>
c0026be9:	46                   	inc    esi
c0026bea:	89 f2                	mov    edx,esi
c0026bec:	f7 d2                	not    edx
c0026bee:	84 d2                	test   dl,dl
c0026bf0:	0f 84 6f 01 00 00    	je     c0026d65 <__addsf3+0x2cf>
c0026bf6:	89 c2                	mov    edx,eax
c0026bf8:	83 e2 01             	and    edx,0x1
c0026bfb:	d1 e8                	shr    eax,1
c0026bfd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026c02:	09 d0                	or     eax,edx
c0026c04:	e9 5e 01 00 00       	jmp    c0026d67 <__addsf3+0x2d1>
c0026c09:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026c0d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c10:	89 f0                	mov    eax,esi
c0026c12:	0f b6 c0             	movzx  eax,al
c0026c15:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026c18:	29 c1                	sub    ecx,eax
c0026c1a:	85 c9                	test   ecx,ecx
c0026c1c:	7e 55                	jle    c0026c73 <__addsf3+0x1dd>
c0026c1e:	85 c0                	test   eax,eax
c0026c20:	75 11                	jne    c0026c33 <__addsf3+0x19d>
c0026c22:	85 db                	test   ebx,ebx
c0026c24:	0f 84 65 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c2a:	49                   	dec    ecx
c0026c2b:	75 19                	jne    c0026c46 <__addsf3+0x1b0>
c0026c2d:	89 d0                	mov    eax,edx
c0026c2f:	29 d8                	sub    eax,ebx
c0026c31:	eb 38                	jmp    c0026c6b <__addsf3+0x1d5>
c0026c33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026c36:	f7 d0                	not    eax
c0026c38:	84 c0                	test   al,al
c0026c3a:	0f 84 4f 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c40:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026c46:	83 f9 1f             	cmp    ecx,0x1f
c0026c49:	0f 8f 40 01 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026c4f:	89 de                	mov    esi,ebx
c0026c51:	d3 ee                	shr    esi,cl
c0026c53:	b8 20 00 00 00       	mov    eax,0x20
c0026c58:	29 c8                	sub    eax,ecx
c0026c5a:	89 c1                	mov    ecx,eax
c0026c5c:	d3 e3                	shl    ebx,cl
c0026c5e:	31 c0                	xor    eax,eax
c0026c60:	85 db                	test   ebx,ebx
c0026c62:	0f 95 c0             	setne  al
c0026c65:	09 f0                	or     eax,esi
c0026c67:	29 c2                	sub    edx,eax
c0026c69:	89 d0                	mov    eax,edx
c0026c6b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026c6e:	e9 af 00 00 00       	jmp    c0026d22 <__addsf3+0x28c>
c0026c73:	74 5c                	je     c0026cd1 <__addsf3+0x23b>
c0026c75:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026c78:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c7b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026c7f:	75 14                	jne    c0026c95 <__addsf3+0x1ff>
c0026c81:	85 d2                	test   edx,edx
c0026c83:	0f 84 06 01 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026c89:	48                   	dec    eax
c0026c8a:	75 1b                	jne    c0026ca7 <__addsf3+0x211>
c0026c8c:	89 d8                	mov    eax,ebx
c0026c8e:	29 d0                	sub    eax,edx
c0026c90:	e9 8d 00 00 00       	jmp    c0026d22 <__addsf3+0x28c>
c0026c95:	89 f1                	mov    ecx,esi
c0026c97:	f7 d1                	not    ecx
c0026c99:	84 c9                	test   cl,cl
c0026c9b:	0f 84 ee 00 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026ca1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ca7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026caa:	83 f8 1f             	cmp    eax,0x1f
c0026cad:	0f 8f dc 00 00 00    	jg     c0026d8f <__addsf3+0x2f9>
c0026cb3:	89 d7                	mov    edi,edx
c0026cb5:	88 c1                	mov    cl,al
c0026cb7:	d3 ef                	shr    edi,cl
c0026cb9:	b9 20 00 00 00       	mov    ecx,0x20
c0026cbe:	29 c1                	sub    ecx,eax
c0026cc0:	d3 e2                	shl    edx,cl
c0026cc2:	31 c0                	xor    eax,eax
c0026cc4:	85 d2                	test   edx,edx
c0026cc6:	0f 95 c0             	setne  al
c0026cc9:	09 f8                	or     eax,edi
c0026ccb:	29 c3                	sub    ebx,eax
c0026ccd:	89 d8                	mov    eax,ebx
c0026ccf:	eb 51                	jmp    c0026d22 <__addsf3+0x28c>
c0026cd1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026cd4:	40                   	inc    eax
c0026cd5:	a8 fe                	test   al,0xfe
c0026cd7:	75 3d                	jne    c0026d16 <__addsf3+0x280>
c0026cd9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026cdd:	0f 85 a7 00 00 00    	jne    c0026d8a <__addsf3+0x2f4>
c0026ce3:	85 d2                	test   edx,edx
c0026ce5:	75 12                	jne    c0026cf9 <__addsf3+0x263>
c0026ce7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026cea:	85 db                	test   ebx,ebx
c0026cec:	0f 85 9d 00 00 00    	jne    c0026d8f <__addsf3+0x2f9>
c0026cf2:	31 ff                	xor    edi,edi
c0026cf4:	e9 96 00 00 00       	jmp    c0026d8f <__addsf3+0x2f9>
c0026cf9:	85 db                	test   ebx,ebx
c0026cfb:	0f 84 8e 00 00 00    	je     c0026d8f <__addsf3+0x2f9>
c0026d01:	89 d0                	mov    eax,edx
c0026d03:	29 d8                	sub    eax,ebx
c0026d05:	79 06                	jns    c0026d0d <__addsf3+0x277>
c0026d07:	89 d8                	mov    eax,ebx
c0026d09:	29 d0                	sub    eax,edx
c0026d0b:	eb 5a                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d0d:	bf 00 00 00 00       	mov    edi,0x0
c0026d12:	74 7b                	je     c0026d8f <__addsf3+0x2f9>
c0026d14:	eb 4a                	jmp    c0026d60 <__addsf3+0x2ca>
c0026d16:	89 d0                	mov    eax,edx
c0026d18:	29 d8                	sub    eax,ebx
c0026d1a:	79 12                	jns    c0026d2e <__addsf3+0x298>
c0026d1c:	89 d8                	mov    eax,ebx
c0026d1e:	29 d0                	sub    eax,edx
c0026d20:	eb 09                	jmp    c0026d2b <__addsf3+0x295>
c0026d22:	85 c0                	test   eax,eax
c0026d24:	79 41                	jns    c0026d67 <__addsf3+0x2d1>
c0026d26:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d2b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026d2e:	31 f6                	xor    esi,esi
c0026d30:	85 c0                	test   eax,eax
c0026d32:	74 33                	je     c0026d67 <__addsf3+0x2d1>
c0026d34:	0f bd c8             	bsr    ecx,eax
c0026d37:	83 f1 1f             	xor    ecx,0x1f
c0026d3a:	d3 e0                	shl    eax,cl
c0026d3c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026d40:	39 ca                	cmp    edx,ecx
c0026d42:	7f 10                	jg     c0026d54 <__addsf3+0x2be>
c0026d44:	29 d1                	sub    ecx,edx
c0026d46:	41                   	inc    ecx
c0026d47:	d3 e8                	shr    eax,cl
c0026d49:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d4c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026d52:	eb 13                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d54:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d57:	29 ce                	sub    esi,ecx
c0026d59:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026d5e:	eb 07                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d60:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d63:	eb 02                	jmp    c0026d67 <__addsf3+0x2d1>
c0026d65:	31 c0                	xor    eax,eax
c0026d67:	89 c2                	mov    edx,eax
c0026d69:	c1 ea 08             	shr    edx,0x8
c0026d6c:	a8 7f                	test   al,0x7f
c0026d6e:	0f 95 c1             	setne  cl
c0026d71:	09 d1                	or     ecx,edx
c0026d73:	83 e1 01             	and    ecx,0x1
c0026d76:	c1 e8 07             	shr    eax,0x7
c0026d79:	21 c8                	and    eax,ecx
c0026d7b:	c1 e6 17             	shl    esi,0x17
c0026d7e:	09 d6                	or     esi,edx
c0026d80:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026d83:	eb 0a                	jmp    c0026d8f <__addsf3+0x2f9>
c0026d85:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d88:	eb 05                	jmp    c0026d8f <__addsf3+0x2f9>
c0026d8a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026d8f:	89 f8                	mov    eax,edi
c0026d91:	5a                   	pop    edx
c0026d92:	59                   	pop    ecx
c0026d93:	5b                   	pop    ebx
c0026d94:	5e                   	pop    esi
c0026d95:	5f                   	pop    edi
c0026d96:	5d                   	pop    ebp
c0026d97:	c3                   	ret    

c0026d98 <__subsf3>:
c0026d98:	55                   	push   ebp
c0026d99:	89 e5                	mov    ebp,esp
c0026d9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d9e:	05 00 00 00 80       	add    eax,0x80000000
c0026da3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026da6:	5d                   	pop    ebp
c0026da7:	e9 ea fc ff ff       	jmp    c0026a96 <__addsf3>

c0026dac <__negsf2>:
c0026dac:	55                   	push   ebp
c0026dad:	89 e5                	mov    ebp,esp
c0026daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026db2:	05 00 00 00 80       	add    eax,0x80000000
c0026db7:	5d                   	pop    ebp
c0026db8:	c3                   	ret    

c0026db9 <__mulsf3>:
c0026db9:	55                   	push   ebp
c0026dba:	89 e5                	mov    ebp,esp
c0026dbc:	57                   	push   edi
c0026dbd:	56                   	push   esi
c0026dbe:	53                   	push   ebx
c0026dbf:	83 ec 1c             	sub    esp,0x1c
c0026dc2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026dc5:	89 f0                	mov    eax,esi
c0026dc7:	89 f1                	mov    ecx,esi
c0026dc9:	c1 f9 17             	sar    ecx,0x17
c0026dcc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026dcf:	c1 e0 08             	shl    eax,0x8
c0026dd2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026dd7:	89 c1                	mov    ecx,eax
c0026dd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ddc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ddf:	89 c7                	mov    edi,eax
c0026de1:	c1 ff 17             	sar    edi,0x17
c0026de4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026de8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026deb:	89 f8                	mov    eax,edi
c0026ded:	0f b6 c0             	movzx  eax,al
c0026df0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026df3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026df7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026dfa:	42                   	inc    edx
c0026dfb:	80 e2 fe             	and    dl,0xfe
c0026dfe:	75 7b                	jne    c0026e7b <__mulsf3+0xc2>
c0026e00:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e04:	74 54                	je     c0026e5a <__mulsf3+0xa1>
c0026e06:	85 c9                	test   ecx,ecx
c0026e08:	0f 85 64 01 00 00    	jne    c0026f72 <__mulsf3+0x1b9>
c0026e0e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e11:	80 e2 fe             	and    dl,0xfe
c0026e14:	75 1f                	jne    c0026e35 <__mulsf3+0x7c>
c0026e16:	85 c0                	test   eax,eax
c0026e18:	b8 00 00 00 00       	mov    eax,0x0
c0026e1d:	74 29                	je     c0026e48 <__mulsf3+0x8f>
c0026e1f:	53                   	push   ebx
c0026e20:	53                   	push   ebx
c0026e21:	50                   	push   eax
c0026e22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e25:	e8 96 05 00 00       	call   c00273c0 <__nesf2>
c0026e2a:	83 c4 10             	add    esp,0x10
c0026e2d:	85 c0                	test   eax,eax
c0026e2f:	0f 85 3a 01 00 00    	jne    c0026f6f <__mulsf3+0x1b6>
c0026e35:	85 ff                	test   edi,edi
c0026e37:	0f 89 35 01 00 00    	jns    c0026f72 <__mulsf3+0x1b9>
c0026e3d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026e43:	e9 2a 01 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026e48:	51                   	push   ecx
c0026e49:	51                   	push   ecx
c0026e4a:	50                   	push   eax
c0026e4b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e4e:	e8 6d 05 00 00       	call   c00273c0 <__nesf2>
c0026e53:	83 c4 10             	add    esp,0x10
c0026e56:	85 c0                	test   eax,eax
c0026e58:	eb 15                	jmp    c0026e6f <__mulsf3+0xb6>
c0026e5a:	85 c9                	test   ecx,ecx
c0026e5c:	74 0b                	je     c0026e69 <__mulsf3+0xb0>
c0026e5e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026e61:	01 c9                	add    ecx,ecx
c0026e63:	78 16                	js     c0026e7b <__mulsf3+0xc2>
c0026e65:	89 d3                	mov    ebx,edx
c0026e67:	eb f5                	jmp    c0026e5e <__mulsf3+0xa5>
c0026e69:	89 f8                	mov    eax,edi
c0026e6b:	f7 d0                	not    eax
c0026e6d:	84 c0                	test   al,al
c0026e6f:	75 c4                	jne    c0026e35 <__mulsf3+0x7c>
c0026e71:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026e76:	e9 f7 00 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026e7b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026e7e:	c1 e6 08             	shl    esi,0x8
c0026e81:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026e87:	8d 57 01             	lea    edx,[edi+0x1]
c0026e8a:	80 e2 fe             	and    dl,0xfe
c0026e8d:	75 63                	jne    c0026ef2 <__mulsf3+0x139>
c0026e8f:	85 c0                	test   eax,eax
c0026e91:	74 2f                	je     c0026ec2 <__mulsf3+0x109>
c0026e93:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026e97:	0f 89 d2 00 00 00    	jns    c0026f6f <__mulsf3+0x1b6>
c0026e9d:	52                   	push   edx
c0026e9e:	52                   	push   edx
c0026e9f:	6a 00                	push   0x0
c0026ea1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ea4:	e8 dc 04 00 00       	call   c0027385 <__eqsf2>
c0026ea9:	83 c4 10             	add    esp,0x10
c0026eac:	85 c0                	test   eax,eax
c0026eae:	0f 85 bb 00 00 00    	jne    c0026f6f <__mulsf3+0x1b6>
c0026eb4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026eb7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ebd:	e9 b0 00 00 00       	jmp    c0026f72 <__mulsf3+0x1b9>
c0026ec2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026ec5:	50                   	push   eax
c0026ec6:	50                   	push   eax
c0026ec7:	6a 00                	push   0x0
c0026ec9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026ecc:	e8 b4 04 00 00       	call   c0027385 <__eqsf2>
c0026ed1:	83 c4 10             	add    esp,0x10
c0026ed4:	85 c0                	test   eax,eax
c0026ed6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026ed9:	75 0c                	jne    c0026ee7 <__mulsf3+0x12e>
c0026edb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026edf:	0f 89 8a 00 00 00    	jns    c0026f6f <__mulsf3+0x1b6>
c0026ee5:	eb cd                	jmp    c0026eb4 <__mulsf3+0xfb>
c0026ee7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026eea:	01 f6                	add    esi,esi
c0026eec:	78 04                	js     c0026ef2 <__mulsf3+0x139>
c0026eee:	89 c3                	mov    ebx,eax
c0026ef0:	eb f5                	jmp    c0026ee7 <__mulsf3+0x12e>
c0026ef2:	89 c8                	mov    eax,ecx
c0026ef4:	0d 00 00 00 80       	or     eax,0x80000000
c0026ef9:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026eff:	f7 e6                	mul    esi
c0026f01:	85 c0                	test   eax,eax
c0026f03:	0f 95 c0             	setne  al
c0026f06:	0f b6 c0             	movzx  eax,al
c0026f09:	09 c2                	or     edx,eax
c0026f0b:	78 03                	js     c0026f10 <__mulsf3+0x157>
c0026f0d:	01 d2                	add    edx,edx
c0026f0f:	4b                   	dec    ebx
c0026f10:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026f16:	7f 22                	jg     c0026f3a <__mulsf3+0x181>
c0026f18:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f1e:	85 db                	test   ebx,ebx
c0026f20:	7f 23                	jg     c0026f45 <__mulsf3+0x18c>
c0026f22:	83 fb e9             	cmp    ebx,0xffffffe9
c0026f25:	7c 1a                	jl     c0026f41 <__mulsf3+0x188>
c0026f27:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f2d:	b9 01 00 00 00       	mov    ecx,0x1
c0026f32:	29 d9                	sub    ecx,ebx
c0026f34:	d3 ea                	shr    edx,cl
c0026f36:	31 db                	xor    ebx,ebx
c0026f38:	eb 0b                	jmp    c0026f45 <__mulsf3+0x18c>
c0026f3a:	bb ff 00 00 00       	mov    ebx,0xff
c0026f3f:	eb 02                	jmp    c0026f43 <__mulsf3+0x18a>
c0026f41:	31 db                	xor    ebx,ebx
c0026f43:	31 d2                	xor    edx,edx
c0026f45:	89 d0                	mov    eax,edx
c0026f47:	c1 e8 08             	shr    eax,0x8
c0026f4a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026f4d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026f53:	09 fb                	or     ebx,edi
c0026f55:	c1 e3 17             	shl    ebx,0x17
c0026f58:	09 c3                	or     ebx,eax
c0026f5a:	f6 c2 7f             	test   dl,0x7f
c0026f5d:	0f 95 c1             	setne  cl
c0026f60:	09 c8                	or     eax,ecx
c0026f62:	83 e0 01             	and    eax,0x1
c0026f65:	c1 ea 07             	shr    edx,0x7
c0026f68:	21 c2                	and    edx,eax
c0026f6a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026f6d:	eb 03                	jmp    c0026f72 <__mulsf3+0x1b9>
c0026f6f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026f72:	89 f0                	mov    eax,esi
c0026f74:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f77:	5b                   	pop    ebx
c0026f78:	5e                   	pop    esi
c0026f79:	5f                   	pop    edi
c0026f7a:	5d                   	pop    ebp
c0026f7b:	c3                   	ret    

c0026f7c <__divsf3>:
c0026f7c:	55                   	push   ebp
c0026f7d:	89 e5                	mov    ebp,esp
c0026f7f:	57                   	push   edi
c0026f80:	56                   	push   esi
c0026f81:	53                   	push   ebx
c0026f82:	83 ec 1c             	sub    esp,0x1c
c0026f85:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026f88:	89 d8                	mov    eax,ebx
c0026f8a:	89 d9                	mov    ecx,ebx
c0026f8c:	c1 f9 17             	sar    ecx,0x17
c0026f8f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026f92:	c1 e0 08             	shl    eax,0x8
c0026f95:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026f9a:	89 c1                	mov    ecx,eax
c0026f9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f9f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fa2:	89 c7                	mov    edi,eax
c0026fa4:	c1 ff 17             	sar    edi,0x17
c0026fa7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fab:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fae:	89 f8                	mov    eax,edi
c0026fb0:	0f b6 c0             	movzx  eax,al
c0026fb3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026fb6:	29 c6                	sub    esi,eax
c0026fb8:	83 c6 7f             	add    esi,0x7f
c0026fbb:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fbe:	42                   	inc    edx
c0026fbf:	80 e2 fe             	and    dl,0xfe
c0026fc2:	0f 85 9c 00 00 00    	jne    c0027064 <__divsf3+0xe8>
c0026fc8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026fcc:	74 33                	je     c0027001 <__divsf3+0x85>
c0026fce:	85 c9                	test   ecx,ecx
c0026fd0:	0f 85 c7 01 00 00    	jne    c002719d <__divsf3+0x221>
c0026fd6:	8d 57 01             	lea    edx,[edi+0x1]
c0026fd9:	80 e2 fe             	and    dl,0xfe
c0026fdc:	75 2f                	jne    c002700d <__divsf3+0x91>
c0026fde:	85 c0                	test   eax,eax
c0026fe0:	74 2b                	je     c002700d <__divsf3+0x91>
c0026fe2:	51                   	push   ecx
c0026fe3:	51                   	push   ecx
c0026fe4:	6a 00                	push   0x0
c0026fe6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe9:	e8 d2 03 00 00       	call   c00273c0 <__nesf2>
c0026fee:	83 c4 10             	add    esp,0x10
c0026ff1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ff4:	85 c0                	test   eax,eax
c0026ff6:	0f 85 a1 01 00 00    	jne    c002719d <__divsf3+0x221>
c0026ffc:	e9 92 01 00 00       	jmp    c0027193 <__divsf3+0x217>
c0027001:	85 c9                	test   ecx,ecx
c0027003:	75 1b                	jne    c0027020 <__divsf3+0xa4>
c0027005:	8d 57 01             	lea    edx,[edi+0x1]
c0027008:	80 e2 fe             	and    dl,0xfe
c002700b:	74 1e                	je     c002702b <__divsf3+0xaf>
c002700d:	85 ff                	test   edi,edi
c002700f:	0f 89 88 01 00 00    	jns    c002719d <__divsf3+0x221>
c0027015:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002701b:	e9 7d 01 00 00       	jmp    c002719d <__divsf3+0x221>
c0027020:	8d 56 ff             	lea    edx,[esi-0x1]
c0027023:	01 c9                	add    ecx,ecx
c0027025:	78 3d                	js     c0027064 <__divsf3+0xe8>
c0027027:	89 d6                	mov    esi,edx
c0027029:	eb f5                	jmp    c0027020 <__divsf3+0xa4>
c002702b:	85 c0                	test   eax,eax
c002702d:	b8 00 00 00 00       	mov    eax,0x0
c0027032:	74 18                	je     c002704c <__divsf3+0xd0>
c0027034:	52                   	push   edx
c0027035:	52                   	push   edx
c0027036:	50                   	push   eax
c0027037:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703a:	e8 81 03 00 00       	call   c00273c0 <__nesf2>
c002703f:	83 c4 10             	add    esp,0x10
c0027042:	85 c0                	test   eax,eax
c0027044:	0f 85 50 01 00 00    	jne    c002719a <__divsf3+0x21e>
c002704a:	eb c1                	jmp    c002700d <__divsf3+0x91>
c002704c:	56                   	push   esi
c002704d:	56                   	push   esi
c002704e:	50                   	push   eax
c002704f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027052:	e8 69 03 00 00       	call   c00273c0 <__nesf2>
c0027057:	83 c4 10             	add    esp,0x10
c002705a:	85 c0                	test   eax,eax
c002705c:	0f 84 31 01 00 00    	je     c0027193 <__divsf3+0x217>
c0027062:	eb a9                	jmp    c002700d <__divsf3+0x91>
c0027064:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027067:	c1 e3 08             	shl    ebx,0x8
c002706a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027070:	8d 57 01             	lea    edx,[edi+0x1]
c0027073:	80 e2 fe             	and    dl,0xfe
c0027076:	75 71                	jne    c00270e9 <__divsf3+0x16d>
c0027078:	85 c0                	test   eax,eax
c002707a:	ba 00 00 00 00       	mov    edx,0x0
c002707f:	74 2f                	je     c00270b0 <__divsf3+0x134>
c0027081:	51                   	push   ecx
c0027082:	51                   	push   ecx
c0027083:	52                   	push   edx
c0027084:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027087:	e8 f9 02 00 00       	call   c0027385 <__eqsf2>
c002708c:	83 c4 10             	add    esp,0x10
c002708f:	85 c0                	test   eax,eax
c0027091:	0f 85 03 01 00 00    	jne    c002719a <__divsf3+0x21e>
c0027097:	31 d2                	xor    edx,edx
c0027099:	89 d3                	mov    ebx,edx
c002709b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002709e:	31 f8                	xor    eax,edi
c00270a0:	0f 89 f7 00 00 00    	jns    c002719d <__divsf3+0x221>
c00270a6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00270ab:	e9 ed 00 00 00       	jmp    c002719d <__divsf3+0x221>
c00270b0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270b3:	50                   	push   eax
c00270b4:	50                   	push   eax
c00270b5:	52                   	push   edx
c00270b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b9:	e8 c7 02 00 00       	call   c0027385 <__eqsf2>
c00270be:	83 c4 10             	add    esp,0x10
c00270c1:	85 c0                	test   eax,eax
c00270c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270c6:	75 16                	jne    c00270de <__divsf3+0x162>
c00270c8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00270cb:	31 fb                	xor    ebx,edi
c00270cd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00270d3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00270d9:	e9 bf 00 00 00       	jmp    c002719d <__divsf3+0x221>
c00270de:	8d 46 01             	lea    eax,[esi+0x1]
c00270e1:	01 db                	add    ebx,ebx
c00270e3:	78 04                	js     c00270e9 <__divsf3+0x16d>
c00270e5:	89 c6                	mov    esi,eax
c00270e7:	eb f5                	jmp    c00270de <__divsf3+0x162>
c00270e9:	89 c8                	mov    eax,ecx
c00270eb:	0d 00 00 00 80       	or     eax,0x80000000
c00270f0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00270f6:	31 d2                	xor    edx,edx
c00270f8:	39 d8                	cmp    eax,ebx
c00270fa:	72 07                	jb     c0027103 <__divsf3+0x187>
c00270fc:	29 d8                	sub    eax,ebx
c00270fe:	ba 01 00 00 00       	mov    edx,0x1
c0027103:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002710a:	01 d2                	add    edx,edx
c002710c:	89 c1                	mov    ecx,eax
c002710e:	01 c0                	add    eax,eax
c0027110:	85 c9                	test   ecx,ecx
c0027112:	78 04                	js     c0027118 <__divsf3+0x19c>
c0027114:	39 c3                	cmp    ebx,eax
c0027116:	77 05                	ja     c002711d <__divsf3+0x1a1>
c0027118:	29 d8                	sub    eax,ebx
c002711a:	83 ca 01             	or     edx,0x1
c002711d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027120:	75 e8                	jne    c002710a <__divsf3+0x18e>
c0027122:	85 c0                	test   eax,eax
c0027124:	0f 95 c0             	setne  al
c0027127:	0f b6 c0             	movzx  eax,al
c002712a:	c1 e2 06             	shl    edx,0x6
c002712d:	09 c2                	or     edx,eax
c002712f:	78 03                	js     c0027134 <__divsf3+0x1b8>
c0027131:	01 d2                	add    edx,edx
c0027133:	4e                   	dec    esi
c0027134:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002713a:	7f 22                	jg     c002715e <__divsf3+0x1e2>
c002713c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027142:	85 f6                	test   esi,esi
c0027144:	7f 23                	jg     c0027169 <__divsf3+0x1ed>
c0027146:	83 fe e9             	cmp    esi,0xffffffe9
c0027149:	7c 1a                	jl     c0027165 <__divsf3+0x1e9>
c002714b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027151:	b9 01 00 00 00       	mov    ecx,0x1
c0027156:	29 f1                	sub    ecx,esi
c0027158:	d3 ea                	shr    edx,cl
c002715a:	31 f6                	xor    esi,esi
c002715c:	eb 0b                	jmp    c0027169 <__divsf3+0x1ed>
c002715e:	be ff 00 00 00       	mov    esi,0xff
c0027163:	eb 02                	jmp    c0027167 <__divsf3+0x1eb>
c0027165:	31 f6                	xor    esi,esi
c0027167:	31 d2                	xor    edx,edx
c0027169:	89 d0                	mov    eax,edx
c002716b:	c1 e8 08             	shr    eax,0x8
c002716e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027171:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027177:	09 fe                	or     esi,edi
c0027179:	c1 e6 17             	shl    esi,0x17
c002717c:	09 c6                	or     esi,eax
c002717e:	f6 c2 7f             	test   dl,0x7f
c0027181:	0f 95 c1             	setne  cl
c0027184:	09 c8                	or     eax,ecx
c0027186:	83 e0 01             	and    eax,0x1
c0027189:	c1 ea 07             	shr    edx,0x7
c002718c:	21 c2                	and    edx,eax
c002718e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027191:	eb 0a                	jmp    c002719d <__divsf3+0x221>
c0027193:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027198:	eb 03                	jmp    c002719d <__divsf3+0x221>
c002719a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002719d:	89 d8                	mov    eax,ebx
c002719f:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271a2:	5b                   	pop    ebx
c00271a3:	5e                   	pop    esi
c00271a4:	5f                   	pop    edi
c00271a5:	5d                   	pop    ebp
c00271a6:	c3                   	ret    

c00271a7 <__floatsisf>:
c00271a7:	55                   	push   ebp
c00271a8:	89 e5                	mov    ebp,esp
c00271aa:	53                   	push   ebx
c00271ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00271ae:	85 d2                	test   edx,edx
c00271b0:	7e 2b                	jle    c00271dd <__floatsisf+0x36>
c00271b2:	0f bd ca             	bsr    ecx,edx
c00271b5:	83 f1 1f             	xor    ecx,0x1f
c00271b8:	d3 e2                	shl    edx,cl
c00271ba:	89 d0                	mov    eax,edx
c00271bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271c1:	89 c3                	mov    ebx,eax
c00271c3:	c1 eb 08             	shr    ebx,0x8
c00271c6:	80 e2 7f             	and    dl,0x7f
c00271c9:	0f 95 c2             	setne  dl
c00271cc:	09 da                	or     edx,ebx
c00271ce:	83 e2 01             	and    edx,0x1
c00271d1:	c1 e8 07             	shr    eax,0x7
c00271d4:	21 c2                	and    edx,eax
c00271d6:	b8 9e 00 00 00       	mov    eax,0x9e
c00271db:	eb 32                	jmp    c002720f <__floatsisf+0x68>
c00271dd:	b8 00 00 00 00       	mov    eax,0x0
c00271e2:	74 34                	je     c0027218 <__floatsisf+0x71>
c00271e4:	f7 da                	neg    edx
c00271e6:	0f bd ca             	bsr    ecx,edx
c00271e9:	83 f1 1f             	xor    ecx,0x1f
c00271ec:	d3 e2                	shl    edx,cl
c00271ee:	89 d0                	mov    eax,edx
c00271f0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00271f5:	89 c3                	mov    ebx,eax
c00271f7:	c1 eb 08             	shr    ebx,0x8
c00271fa:	80 e2 7f             	and    dl,0x7f
c00271fd:	0f 95 c2             	setne  dl
c0027200:	09 da                	or     edx,ebx
c0027202:	83 e2 01             	and    edx,0x1
c0027205:	c1 e8 07             	shr    eax,0x7
c0027208:	21 c2                	and    edx,eax
c002720a:	b8 9e 01 00 00       	mov    eax,0x19e
c002720f:	29 c8                	sub    eax,ecx
c0027211:	c1 e0 17             	shl    eax,0x17
c0027214:	09 d8                	or     eax,ebx
c0027216:	01 d0                	add    eax,edx
c0027218:	5b                   	pop    ebx
c0027219:	5d                   	pop    ebp
c002721a:	c3                   	ret    

c002721b <__floatunsisf>:
c002721b:	55                   	push   ebp
c002721c:	89 e5                	mov    ebp,esp
c002721e:	53                   	push   ebx
c002721f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027222:	31 c0                	xor    eax,eax
c0027224:	85 d2                	test   edx,edx
c0027226:	74 32                	je     c002725a <__floatunsisf+0x3f>
c0027228:	0f bd ca             	bsr    ecx,edx
c002722b:	83 f1 1f             	xor    ecx,0x1f
c002722e:	d3 e2                	shl    edx,cl
c0027230:	89 d0                	mov    eax,edx
c0027232:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027237:	89 c3                	mov    ebx,eax
c0027239:	c1 eb 08             	shr    ebx,0x8
c002723c:	80 e2 7f             	and    dl,0x7f
c002723f:	0f 95 c2             	setne  dl
c0027242:	09 da                	or     edx,ebx
c0027244:	83 e2 01             	and    edx,0x1
c0027247:	c1 e8 07             	shr    eax,0x7
c002724a:	21 c2                	and    edx,eax
c002724c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027251:	29 c8                	sub    eax,ecx
c0027253:	c1 e0 17             	shl    eax,0x17
c0027256:	09 d8                	or     eax,ebx
c0027258:	01 d0                	add    eax,edx
c002725a:	5b                   	pop    ebx
c002725b:	5d                   	pop    ebp
c002725c:	c3                   	ret    

c002725d <__fixsfsi>:
c002725d:	55                   	push   ebp
c002725e:	89 e5                	mov    ebp,esp
c0027260:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027263:	89 d1                	mov    ecx,edx
c0027265:	c1 e1 08             	shl    ecx,0x8
c0027268:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002726e:	c1 fa 17             	sar    edx,0x17
c0027271:	78 1c                	js     c002728f <__fixsfsi+0x32>
c0027273:	83 ea 7f             	sub    edx,0x7f
c0027276:	31 c0                	xor    eax,eax
c0027278:	83 fa 1e             	cmp    edx,0x1e
c002727b:	77 40                	ja     c00272bd <__fixsfsi+0x60>
c002727d:	89 c8                	mov    eax,ecx
c002727f:	0d 00 00 00 80       	or     eax,0x80000000
c0027284:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027289:	29 d1                	sub    ecx,edx
c002728b:	d3 e8                	shr    eax,cl
c002728d:	eb 2e                	jmp    c00272bd <__fixsfsi+0x60>
c002728f:	31 c0                	xor    eax,eax
c0027291:	81 c2 81 00 00 00    	add    edx,0x81
c0027297:	78 24                	js     c00272bd <__fixsfsi+0x60>
c0027299:	83 fa 1e             	cmp    edx,0x1e
c002729c:	7e 09                	jle    c00272a7 <__fixsfsi+0x4a>
c002729e:	83 fa 1f             	cmp    edx,0x1f
c00272a1:	75 18                	jne    c00272bb <__fixsfsi+0x5e>
c00272a3:	85 c9                	test   ecx,ecx
c00272a5:	75 14                	jne    c00272bb <__fixsfsi+0x5e>
c00272a7:	89 c8                	mov    eax,ecx
c00272a9:	0d 00 00 00 80       	or     eax,0x80000000
c00272ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272b3:	29 d1                	sub    ecx,edx
c00272b5:	d3 e8                	shr    eax,cl
c00272b7:	f7 d8                	neg    eax
c00272b9:	eb 02                	jmp    c00272bd <__fixsfsi+0x60>
c00272bb:	31 c0                	xor    eax,eax
c00272bd:	5d                   	pop    ebp
c00272be:	c3                   	ret    

c00272bf <__fixunssfsi>:
c00272bf:	55                   	push   ebp
c00272c0:	89 e5                	mov    ebp,esp
c00272c2:	53                   	push   ebx
c00272c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00272c6:	89 d3                	mov    ebx,edx
c00272c8:	c1 fb 17             	sar    ebx,0x17
c00272cb:	83 eb 7f             	sub    ebx,0x7f
c00272ce:	31 c0                	xor    eax,eax
c00272d0:	83 fb 1f             	cmp    ebx,0x1f
c00272d3:	77 18                	ja     c00272ed <__fixunssfsi+0x2e>
c00272d5:	89 d0                	mov    eax,edx
c00272d7:	c1 e0 08             	shl    eax,0x8
c00272da:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00272df:	0d 00 00 00 80       	or     eax,0x80000000
c00272e4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00272e9:	29 d9                	sub    ecx,ebx
c00272eb:	d3 e8                	shr    eax,cl
c00272ed:	5b                   	pop    ebx
c00272ee:	5d                   	pop    ebp
c00272ef:	c3                   	ret    

c00272f0 <__cmpsf2>:
c00272f0:	55                   	push   ebp
c00272f1:	89 e5                	mov    ebp,esp
c00272f3:	57                   	push   edi
c00272f4:	56                   	push   esi
c00272f5:	53                   	push   ebx
c00272f6:	83 ec 24             	sub    esp,0x24
c00272f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00272ff:	e8 4f 10 00 00       	call   c0028353 <__truncdfsf2>
c0027304:	5a                   	pop    edx
c0027305:	59                   	pop    ecx
c0027306:	89 c3                	mov    ebx,eax
c0027308:	c1 e8 17             	shr    eax,0x17
c002730b:	0f b6 f0             	movzx  esi,al
c002730e:	89 d8                	mov    eax,ebx
c0027310:	c1 e8 1f             	shr    eax,0x1f
c0027313:	31 c6                	xor    esi,eax
c0027315:	c1 e3 08             	shl    ebx,0x8
c0027318:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002731b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002731e:	e8 30 10 00 00       	call   c0028353 <__truncdfsf2>
c0027323:	83 c4 10             	add    esp,0x10
c0027326:	89 c1                	mov    ecx,eax
c0027328:	c1 e9 17             	shr    ecx,0x17
c002732b:	0f b6 c9             	movzx  ecx,cl
c002732e:	89 c7                	mov    edi,eax
c0027330:	c1 ef 1f             	shr    edi,0x1f
c0027333:	89 ca                	mov    edx,ecx
c0027335:	31 fa                	xor    edx,edi
c0027337:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002733a:	c1 e0 08             	shl    eax,0x8
c002733d:	89 c2                	mov    edx,eax
c002733f:	89 d8                	mov    eax,ebx
c0027341:	09 d0                	or     eax,edx
c0027343:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027348:	09 f0                	or     eax,esi
c002734a:	75 08                	jne    c0027354 <__cmpsf2+0x64>
c002734c:	31 c0                	xor    eax,eax
c002734e:	39 f9                	cmp    ecx,edi
c0027350:	75 0c                	jne    c002735e <__cmpsf2+0x6e>
c0027352:	eb 29                	jmp    c002737d <__cmpsf2+0x8d>
c0027354:	b8 01 00 00 00       	mov    eax,0x1
c0027359:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002735c:	7f 1f                	jg     c002737d <__cmpsf2+0x8d>
c002735e:	83 c8 ff             	or     eax,0xffffffff
c0027361:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027364:	7c 17                	jl     c002737d <__cmpsf2+0x8d>
c0027366:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002736c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027372:	b8 01 00 00 00       	mov    eax,0x1
c0027377:	39 d3                	cmp    ebx,edx
c0027379:	77 02                	ja     c002737d <__cmpsf2+0x8d>
c002737b:	19 c0                	sbb    eax,eax
c002737d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027380:	5b                   	pop    ebx
c0027381:	5e                   	pop    esi
c0027382:	5f                   	pop    edi
c0027383:	5d                   	pop    ebp
c0027384:	c3                   	ret    

c0027385 <__eqsf2>:
c0027385:	55                   	push   ebp
c0027386:	89 e5                	mov    ebp,esp
c0027388:	83 ec 24             	sub    esp,0x24
c002738b:	6a 01                	push   0x1
c002738d:	83 ec 0c             	sub    esp,0xc
c0027390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027393:	e8 df 10 00 00       	call   c0028477 <__extendsfdf2>
c0027398:	83 c4 10             	add    esp,0x10
c002739b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002739e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273a1:	52                   	push   edx
c00273a2:	50                   	push   eax
c00273a3:	50                   	push   eax
c00273a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273a7:	e8 cb 10 00 00       	call   c0028477 <__extendsfdf2>
c00273ac:	59                   	pop    ecx
c00273ad:	59                   	pop    ecx
c00273ae:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273b1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273b4:	52                   	push   edx
c00273b5:	50                   	push   eax
c00273b6:	e8 35 ff ff ff       	call   c00272f0 <__cmpsf2>
c00273bb:	83 c4 20             	add    esp,0x20
c00273be:	c9                   	leave  
c00273bf:	c3                   	ret    

c00273c0 <__nesf2>:
c00273c0:	eb c3                	jmp    c0027385 <__eqsf2>

c00273c2 <__gtsf2>:
c00273c2:	55                   	push   ebp
c00273c3:	89 e5                	mov    ebp,esp
c00273c5:	83 ec 24             	sub    esp,0x24
c00273c8:	6a ff                	push   0xffffffff
c00273ca:	83 ec 0c             	sub    esp,0xc
c00273cd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00273d0:	e8 a2 10 00 00       	call   c0028477 <__extendsfdf2>
c00273d5:	83 c4 10             	add    esp,0x10
c00273d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273db:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273de:	52                   	push   edx
c00273df:	50                   	push   eax
c00273e0:	50                   	push   eax
c00273e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00273e4:	e8 8e 10 00 00       	call   c0028477 <__extendsfdf2>
c00273e9:	59                   	pop    ecx
c00273ea:	59                   	pop    ecx
c00273eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00273f1:	52                   	push   edx
c00273f2:	50                   	push   eax
c00273f3:	e8 f8 fe ff ff       	call   c00272f0 <__cmpsf2>
c00273f8:	83 c4 20             	add    esp,0x20
c00273fb:	c9                   	leave  
c00273fc:	c3                   	ret    

c00273fd <__gesf2>:
c00273fd:	eb c3                	jmp    c00273c2 <__gtsf2>

c00273ff <__ltsf2>:
c00273ff:	eb 84                	jmp    c0027385 <__eqsf2>

c0027401 <__lesf2>:
c0027401:	eb 82                	jmp    c0027385 <__eqsf2>

c0027403 <__adddf3>:
c0027403:	55                   	push   ebp
c0027404:	89 e5                	mov    ebp,esp
c0027406:	57                   	push   edi
c0027407:	56                   	push   esi
c0027408:	53                   	push   ebx
c0027409:	83 ec 24             	sub    esp,0x24
c002740c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002740f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027412:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027415:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027418:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002741b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002741e:	89 c8                	mov    eax,ecx
c0027420:	89 ce                	mov    esi,ecx
c0027422:	c1 fe 14             	sar    esi,0x14
c0027425:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027428:	89 fb                	mov    ebx,edi
c002742a:	89 fa                	mov    edx,edi
c002742c:	c1 e2 0b             	shl    edx,0xb
c002742f:	c1 e0 0b             	shl    eax,0xb
c0027432:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027437:	c1 eb 15             	shr    ebx,0x15
c002743a:	09 d8                	or     eax,ebx
c002743c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002743f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027442:	c1 fe 14             	sar    esi,0x14
c0027445:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027448:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002744b:	89 f3                	mov    ebx,esi
c002744d:	c1 e3 0b             	shl    ebx,0xb
c0027450:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027453:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027456:	c1 e3 0b             	shl    ebx,0xb
c0027459:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002745f:	c1 ee 15             	shr    esi,0x15
c0027462:	09 f3                	or     ebx,esi
c0027464:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027467:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002746a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002746d:	0f 88 5f 02 00 00    	js     c00276d2 <__adddf3+0x2cf>
c0027473:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027476:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027479:	85 db                	test   ebx,ebx
c002747b:	0f 8e c7 00 00 00    	jle    c0027548 <__adddf3+0x145>
c0027481:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027488:	75 1a                	jne    c00274a4 <__adddf3+0xa1>
c002748a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002748d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027490:	0f 84 b2 05 00 00    	je     c0027a48 <__adddf3+0x645>
c0027496:	4b                   	dec    ebx
c0027497:	75 23                	jne    c00274bc <__adddf3+0xb9>
c0027499:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002749c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002749f:	e9 99 00 00 00       	jmp    c002753d <__adddf3+0x13a>
c00274a4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00274a7:	f7 d6                	not    esi
c00274a9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274af:	0f 84 93 05 00 00    	je     c0027a48 <__adddf3+0x645>
c00274b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00274bc:	83 fb 1f             	cmp    ebx,0x1f
c00274bf:	7e 42                	jle    c0027503 <__adddf3+0x100>
c00274c1:	83 fb 3f             	cmp    ebx,0x3f
c00274c4:	0f 8f 7e 05 00 00    	jg     c0027a48 <__adddf3+0x645>
c00274ca:	83 e3 1f             	and    ebx,0x1f
c00274cd:	89 d9                	mov    ecx,ebx
c00274cf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274d2:	d3 ef                	shr    edi,cl
c00274d4:	31 db                	xor    ebx,ebx
c00274d6:	85 c9                	test   ecx,ecx
c00274d8:	74 15                	je     c00274ef <__adddf3+0xec>
c00274da:	be 20 00 00 00       	mov    esi,0x20
c00274df:	29 ce                	sub    esi,ecx
c00274e1:	89 f1                	mov    ecx,esi
c00274e3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274e6:	d3 e6                	shl    esi,cl
c00274e8:	31 db                	xor    ebx,ebx
c00274ea:	85 f6                	test   esi,esi
c00274ec:	0f 95 c3             	setne  bl
c00274ef:	31 c9                	xor    ecx,ecx
c00274f1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274f5:	0f 95 c1             	setne  cl
c00274f8:	09 cf                	or     edi,ecx
c00274fa:	09 fb                	or     ebx,edi
c00274fc:	01 da                	add    edx,ebx
c00274fe:	83 d0 00             	adc    eax,0x0
c0027501:	eb 3a                	jmp    c002753d <__adddf3+0x13a>
c0027503:	bf 20 00 00 00       	mov    edi,0x20
c0027508:	29 df                	sub    edi,ebx
c002750a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002750d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027510:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027513:	d3 e6                	shl    esi,cl
c0027515:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027518:	88 d9                	mov    cl,bl
c002751a:	d3 ef                	shr    edi,cl
c002751c:	09 fe                	or     esi,edi
c002751e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027521:	88 d9                	mov    cl,bl
c0027523:	d3 ef                	shr    edi,cl
c0027525:	89 fb                	mov    ebx,edi
c0027527:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002752a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002752d:	d3 e7                	shl    edi,cl
c002752f:	85 ff                	test   edi,edi
c0027531:	0f 95 c1             	setne  cl
c0027534:	0f b6 c9             	movzx  ecx,cl
c0027537:	09 ce                	or     esi,ecx
c0027539:	01 f2                	add    edx,esi
c002753b:	11 d8                	adc    eax,ebx
c002753d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027540:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027543:	e9 52 01 00 00       	jmp    c002769a <__adddf3+0x297>
c0027548:	0f 84 d5 00 00 00    	je     c0027623 <__adddf3+0x220>
c002754e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027551:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027554:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027557:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002755a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027561:	75 20                	jne    c0027583 <__adddf3+0x180>
c0027563:	89 d6                	mov    esi,edx
c0027565:	09 c6                	or     esi,eax
c0027567:	0f 84 db 04 00 00    	je     c0027a48 <__adddf3+0x645>
c002756d:	4b                   	dec    ebx
c002756e:	75 29                	jne    c0027599 <__adddf3+0x196>
c0027570:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027573:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027576:	01 d1                	add    ecx,edx
c0027578:	11 c6                	adc    esi,eax
c002757a:	89 f0                	mov    eax,esi
c002757c:	89 ca                	mov    edx,ecx
c002757e:	e9 17 01 00 00       	jmp    c002769a <__adddf3+0x297>
c0027583:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027586:	f7 d6                	not    esi
c0027588:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002758e:	0f 84 b4 04 00 00    	je     c0027a48 <__adddf3+0x645>
c0027594:	0d 00 00 00 80       	or     eax,0x80000000
c0027599:	83 fb 1f             	cmp    ebx,0x1f
c002759c:	7e 48                	jle    c00275e6 <__adddf3+0x1e3>
c002759e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00275a1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00275a4:	83 fb 3f             	cmp    ebx,0x3f
c00275a7:	0f 8f 9b 04 00 00    	jg     c0027a48 <__adddf3+0x645>
c00275ad:	83 e3 1f             	and    ebx,0x1f
c00275b0:	89 d9                	mov    ecx,ebx
c00275b2:	89 c7                	mov    edi,eax
c00275b4:	d3 ef                	shr    edi,cl
c00275b6:	31 db                	xor    ebx,ebx
c00275b8:	85 c9                	test   ecx,ecx
c00275ba:	74 12                	je     c00275ce <__adddf3+0x1cb>
c00275bc:	be 20 00 00 00       	mov    esi,0x20
c00275c1:	29 ce                	sub    esi,ecx
c00275c3:	89 f1                	mov    ecx,esi
c00275c5:	d3 e0                	shl    eax,cl
c00275c7:	31 db                	xor    ebx,ebx
c00275c9:	85 c0                	test   eax,eax
c00275cb:	0f 95 c3             	setne  bl
c00275ce:	31 c0                	xor    eax,eax
c00275d0:	85 d2                	test   edx,edx
c00275d2:	0f 95 c0             	setne  al
c00275d5:	09 c7                	or     edi,eax
c00275d7:	09 fb                	or     ebx,edi
c00275d9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275dc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275df:	01 da                	add    edx,ebx
c00275e1:	83 d6 00             	adc    esi,0x0
c00275e4:	eb 39                	jmp    c002761f <__adddf3+0x21c>
c00275e6:	be 20 00 00 00       	mov    esi,0x20
c00275eb:	29 de                	sub    esi,ebx
c00275ed:	89 c7                	mov    edi,eax
c00275ef:	89 f1                	mov    ecx,esi
c00275f1:	d3 e7                	shl    edi,cl
c00275f3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275f6:	89 d7                	mov    edi,edx
c00275f8:	88 d9                	mov    cl,bl
c00275fa:	d3 ef                	shr    edi,cl
c00275fc:	89 f9                	mov    ecx,edi
c00275fe:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027601:	09 cf                	or     edi,ecx
c0027603:	88 d9                	mov    cl,bl
c0027605:	d3 e8                	shr    eax,cl
c0027607:	89 f1                	mov    ecx,esi
c0027609:	d3 e2                	shl    edx,cl
c002760b:	85 d2                	test   edx,edx
c002760d:	0f 95 c2             	setne  dl
c0027610:	0f b6 d2             	movzx  edx,dl
c0027613:	09 d7                	or     edi,edx
c0027615:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027618:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002761b:	01 fa                	add    edx,edi
c002761d:	11 c6                	adc    esi,eax
c002761f:	89 f0                	mov    eax,esi
c0027621:	eb 77                	jmp    c002769a <__adddf3+0x297>
c0027623:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027626:	46                   	inc    esi
c0027627:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002762a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027630:	75 41                	jne    c0027673 <__adddf3+0x270>
c0027632:	89 d3                	mov    ebx,edx
c0027634:	09 c3                	or     ebx,eax
c0027636:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002763d:	75 27                	jne    c0027666 <__adddf3+0x263>
c002763f:	85 db                	test   ebx,ebx
c0027641:	0f 84 fb 03 00 00    	je     c0027a42 <__adddf3+0x63f>
c0027647:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002764a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002764d:	0f 84 f5 03 00 00    	je     c0027a48 <__adddf3+0x645>
c0027653:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027656:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027659:	85 c0                	test   eax,eax
c002765b:	0f 89 91 03 00 00    	jns    c00279f2 <__adddf3+0x5ef>
c0027661:	e9 85 03 00 00       	jmp    c00279eb <__adddf3+0x5e8>
c0027666:	85 db                	test   ebx,ebx
c0027668:	0f 85 da 03 00 00    	jne    c0027a48 <__adddf3+0x645>
c002766e:	e9 cf 03 00 00       	jmp    c0027a42 <__adddf3+0x63f>
c0027673:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027676:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027679:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002767c:	f7 d1                	not    ecx
c002767e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027684:	0f 84 70 03 00 00    	je     c00279fa <__adddf3+0x5f7>
c002768a:	d1 ea                	shr    edx,1
c002768c:	89 c1                	mov    ecx,eax
c002768e:	c1 e1 1f             	shl    ecx,0x1f
c0027691:	09 ca                	or     edx,ecx
c0027693:	d1 e8                	shr    eax,1
c0027695:	e9 6f 03 00 00       	jmp    c0027a09 <__adddf3+0x606>
c002769a:	85 c0                	test   eax,eax
c002769c:	0f 89 67 03 00 00    	jns    c0027a09 <__adddf3+0x606>
c00276a2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00276a5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276a8:	f7 d1                	not    ecx
c00276aa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00276b0:	0f 84 44 03 00 00    	je     c00279fa <__adddf3+0x5f7>
c00276b6:	89 d1                	mov    ecx,edx
c00276b8:	d1 e9                	shr    ecx,1
c00276ba:	83 e2 01             	and    edx,0x1
c00276bd:	09 ca                	or     edx,ecx
c00276bf:	89 c1                	mov    ecx,eax
c00276c1:	c1 e1 1f             	shl    ecx,0x1f
c00276c4:	09 ca                	or     edx,ecx
c00276c6:	d1 e8                	shr    eax,1
c00276c8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00276cd:	e9 37 03 00 00       	jmp    c0027a09 <__adddf3+0x606>
c00276d2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276d5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276db:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00276de:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00276e1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00276e7:	29 de                	sub    esi,ebx
c00276e9:	85 f6                	test   esi,esi
c00276eb:	0f 8e bd 00 00 00    	jle    c00277ae <__adddf3+0x3ab>
c00276f1:	85 db                	test   ebx,ebx
c00276f3:	75 17                	jne    c002770c <__adddf3+0x309>
c00276f5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00276f8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00276fb:	0f 84 47 03 00 00    	je     c0027a48 <__adddf3+0x645>
c0027701:	4e                   	dec    esi
c0027702:	75 20                	jne    c0027724 <__adddf3+0x321>
c0027704:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027707:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002770a:	eb 5b                	jmp    c0027767 <__adddf3+0x364>
c002770c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002770f:	f7 d3                	not    ebx
c0027711:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027717:	0f 84 2b 03 00 00    	je     c0027a48 <__adddf3+0x645>
c002771d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027724:	83 fe 1f             	cmp    esi,0x1f
c0027727:	7e 49                	jle    c0027772 <__adddf3+0x36f>
c0027729:	83 fe 3f             	cmp    esi,0x3f
c002772c:	0f 8f 16 03 00 00    	jg     c0027a48 <__adddf3+0x645>
c0027732:	83 e6 1f             	and    esi,0x1f
c0027735:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027738:	89 f1                	mov    ecx,esi
c002773a:	d3 ef                	shr    edi,cl
c002773c:	31 db                	xor    ebx,ebx
c002773e:	85 f6                	test   esi,esi
c0027740:	74 13                	je     c0027755 <__adddf3+0x352>
c0027742:	b9 20 00 00 00       	mov    ecx,0x20
c0027747:	29 f1                	sub    ecx,esi
c0027749:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002774c:	d3 e6                	shl    esi,cl
c002774e:	31 db                	xor    ebx,ebx
c0027750:	85 f6                	test   esi,esi
c0027752:	0f 95 c3             	setne  bl
c0027755:	31 c9                	xor    ecx,ecx
c0027757:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002775b:	0f 95 c1             	setne  cl
c002775e:	09 cf                	or     edi,ecx
c0027760:	09 fb                	or     ebx,edi
c0027762:	29 da                	sub    edx,ebx
c0027764:	83 d8 00             	sbb    eax,0x0
c0027767:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002776a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002776d:	e9 aa 01 00 00       	jmp    c002791c <__adddf3+0x519>
c0027772:	bf 20 00 00 00       	mov    edi,0x20
c0027777:	29 f7                	sub    edi,esi
c0027779:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002777c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002777f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027782:	d3 e3                	shl    ebx,cl
c0027784:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027787:	89 f1                	mov    ecx,esi
c0027789:	d3 ef                	shr    edi,cl
c002778b:	09 fb                	or     ebx,edi
c002778d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027790:	89 f1                	mov    ecx,esi
c0027792:	d3 ef                	shr    edi,cl
c0027794:	89 fe                	mov    esi,edi
c0027796:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027799:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002779c:	d3 e7                	shl    edi,cl
c002779e:	85 ff                	test   edi,edi
c00277a0:	0f 95 c1             	setne  cl
c00277a3:	0f b6 c9             	movzx  ecx,cl
c00277a6:	09 cb                	or     ebx,ecx
c00277a8:	29 da                	sub    edx,ebx
c00277aa:	19 f0                	sbb    eax,esi
c00277ac:	eb b9                	jmp    c0027767 <__adddf3+0x364>
c00277ae:	0f 84 cd 00 00 00    	je     c0027881 <__adddf3+0x47e>
c00277b4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00277b7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277ba:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277bd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00277c1:	75 1b                	jne    c00277de <__adddf3+0x3db>
c00277c3:	89 d6                	mov    esi,edx
c00277c5:	09 c6                	or     esi,eax
c00277c7:	0f 84 7b 02 00 00    	je     c0027a48 <__adddf3+0x645>
c00277cd:	4b                   	dec    ebx
c00277ce:	75 24                	jne    c00277f4 <__adddf3+0x3f1>
c00277d0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277d3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00277d6:	29 d1                	sub    ecx,edx
c00277d8:	19 c6                	sbb    esi,eax
c00277da:	89 ca                	mov    edx,ecx
c00277dc:	eb 61                	jmp    c002783f <__adddf3+0x43c>
c00277de:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277e1:	f7 d6                	not    esi
c00277e3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277e9:	0f 84 59 02 00 00    	je     c0027a48 <__adddf3+0x645>
c00277ef:	0d 00 00 00 80       	or     eax,0x80000000
c00277f4:	83 fb 1f             	cmp    ebx,0x1f
c00277f7:	7e 4d                	jle    c0027846 <__adddf3+0x443>
c00277f9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277fc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277ff:	83 fb 3f             	cmp    ebx,0x3f
c0027802:	0f 8f 40 02 00 00    	jg     c0027a48 <__adddf3+0x645>
c0027808:	83 e3 1f             	and    ebx,0x1f
c002780b:	89 d9                	mov    ecx,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	d3 ef                	shr    edi,cl
c0027811:	31 db                	xor    ebx,ebx
c0027813:	85 c9                	test   ecx,ecx
c0027815:	74 12                	je     c0027829 <__adddf3+0x426>
c0027817:	be 20 00 00 00       	mov    esi,0x20
c002781c:	29 ce                	sub    esi,ecx
c002781e:	89 f1                	mov    ecx,esi
c0027820:	d3 e0                	shl    eax,cl
c0027822:	31 db                	xor    ebx,ebx
c0027824:	85 c0                	test   eax,eax
c0027826:	0f 95 c3             	setne  bl
c0027829:	31 c0                	xor    eax,eax
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c0             	setne  al
c0027830:	09 c7                	or     edi,eax
c0027832:	09 fb                	or     ebx,edi
c0027834:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027837:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783a:	29 da                	sub    edx,ebx
c002783c:	83 de 00             	sbb    esi,0x0
c002783f:	89 f0                	mov    eax,esi
c0027841:	e9 d6 00 00 00       	jmp    c002791c <__adddf3+0x519>
c0027846:	be 20 00 00 00       	mov    esi,0x20
c002784b:	29 de                	sub    esi,ebx
c002784d:	89 c7                	mov    edi,eax
c002784f:	89 f1                	mov    ecx,esi
c0027851:	d3 e7                	shl    edi,cl
c0027853:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027856:	89 d7                	mov    edi,edx
c0027858:	88 d9                	mov    cl,bl
c002785a:	d3 ef                	shr    edi,cl
c002785c:	89 f9                	mov    ecx,edi
c002785e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027861:	09 cf                	or     edi,ecx
c0027863:	88 d9                	mov    cl,bl
c0027865:	d3 e8                	shr    eax,cl
c0027867:	89 f1                	mov    ecx,esi
c0027869:	d3 e2                	shl    edx,cl
c002786b:	85 d2                	test   edx,edx
c002786d:	0f 95 c2             	setne  dl
c0027870:	0f b6 d2             	movzx  edx,dl
c0027873:	09 d7                	or     edi,edx
c0027875:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027878:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002787b:	29 fa                	sub    edx,edi
c002787d:	19 c6                	sbb    esi,eax
c002787f:	eb be                	jmp    c002783f <__adddf3+0x43c>
c0027881:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027884:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027887:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002788d:	75 6a                	jne    c00278f9 <__adddf3+0x4f6>
c002788f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027893:	75 58                	jne    c00278ed <__adddf3+0x4ea>
c0027895:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027898:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002789b:	89 d6                	mov    esi,edx
c002789d:	09 c6                	or     esi,eax
c002789f:	75 17                	jne    c00278b8 <__adddf3+0x4b5>
c00278a1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278a4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278a7:	85 db                	test   ebx,ebx
c00278a9:	0f 85 99 01 00 00    	jne    c0027a48 <__adddf3+0x645>
c00278af:	31 ff                	xor    edi,edi
c00278b1:	31 c9                	xor    ecx,ecx
c00278b3:	e9 90 01 00 00       	jmp    c0027a48 <__adddf3+0x645>
c00278b8:	85 db                	test   ebx,ebx
c00278ba:	0f 84 88 01 00 00    	je     c0027a48 <__adddf3+0x645>
c00278c0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278c3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278c6:	85 c0                	test   eax,eax
c00278c8:	79 10                	jns    c00278da <__adddf3+0x4d7>
c00278ca:	31 c9                	xor    ecx,ecx
c00278cc:	f7 da                	neg    edx
c00278ce:	0f 95 c1             	setne  cl
c00278d1:	01 c8                	add    eax,ecx
c00278d3:	f7 d8                	neg    eax
c00278d5:	e9 2f 01 00 00       	jmp    c0027a09 <__adddf3+0x606>
c00278da:	31 ff                	xor    edi,edi
c00278dc:	31 c9                	xor    ecx,ecx
c00278de:	89 c3                	mov    ebx,eax
c00278e0:	09 d3                	or     ebx,edx
c00278e2:	0f 84 60 01 00 00    	je     c0027a48 <__adddf3+0x645>
c00278e8:	e9 05 01 00 00       	jmp    c00279f2 <__adddf3+0x5ef>
c00278ed:	31 ff                	xor    edi,edi
c00278ef:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00278f4:	e9 4f 01 00 00       	jmp    c0027a48 <__adddf3+0x645>
c00278f9:	89 c1                	mov    ecx,eax
c00278fb:	89 d0                	mov    eax,edx
c00278fd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027900:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027903:	89 ca                	mov    edx,ecx
c0027905:	85 c9                	test   ecx,ecx
c0027907:	79 2c                	jns    c0027935 <__adddf3+0x532>
c0027909:	31 c9                	xor    ecx,ecx
c002790b:	f7 d8                	neg    eax
c002790d:	0f 95 c1             	setne  cl
c0027910:	01 ca                	add    edx,ecx
c0027912:	f7 da                	neg    edx
c0027914:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027917:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002791a:	eb 19                	jmp    c0027935 <__adddf3+0x532>
c002791c:	85 c0                	test   eax,eax
c002791e:	0f 89 e5 00 00 00    	jns    c0027a09 <__adddf3+0x606>
c0027924:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027929:	89 c1                	mov    ecx,eax
c002792b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002792e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027931:	89 d0                	mov    eax,edx
c0027933:	89 ca                	mov    edx,ecx
c0027935:	85 d2                	test   edx,edx
c0027937:	74 59                	je     c0027992 <__adddf3+0x58f>
c0027939:	0f bd da             	bsr    ebx,edx
c002793c:	83 f3 1f             	xor    ebx,0x1f
c002793f:	88 d9                	mov    cl,bl
c0027941:	d3 e2                	shl    edx,cl
c0027943:	bf 20 00 00 00       	mov    edi,0x20
c0027948:	89 f9                	mov    ecx,edi
c002794a:	29 d9                	sub    ecx,ebx
c002794c:	89 c6                	mov    esi,eax
c002794e:	d3 ee                	shr    esi,cl
c0027950:	09 d6                	or     esi,edx
c0027952:	88 d9                	mov    cl,bl
c0027954:	d3 e0                	shl    eax,cl
c0027956:	89 c2                	mov    edx,eax
c0027958:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002795b:	25 ff 07 00 00       	and    eax,0x7ff
c0027960:	39 d8                	cmp    eax,ebx
c0027962:	7f 22                	jg     c0027986 <__adddf3+0x583>
c0027964:	29 c3                	sub    ebx,eax
c0027966:	43                   	inc    ebx
c0027967:	88 d9                	mov    cl,bl
c0027969:	d3 ea                	shr    edx,cl
c002796b:	29 df                	sub    edi,ebx
c002796d:	89 f9                	mov    ecx,edi
c002796f:	89 f0                	mov    eax,esi
c0027971:	d3 e0                	shl    eax,cl
c0027973:	09 c2                	or     edx,eax
c0027975:	89 f0                	mov    eax,esi
c0027977:	88 d9                	mov    cl,bl
c0027979:	d3 e8                	shr    eax,cl
c002797b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002797e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027984:	eb 6f                	jmp    c00279f5 <__adddf3+0x5f2>
c0027986:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027989:	29 d8                	sub    eax,ebx
c002798b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002798e:	89 f0                	mov    eax,esi
c0027990:	eb 59                	jmp    c00279eb <__adddf3+0x5e8>
c0027992:	85 c0                	test   eax,eax
c0027994:	74 6a                	je     c0027a00 <__adddf3+0x5fd>
c0027996:	0f bd c8             	bsr    ecx,eax
c0027999:	83 f1 1f             	xor    ecx,0x1f
c002799c:	d3 e0                	shl    eax,cl
c002799e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279a1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00279a7:	83 c1 20             	add    ecx,0x20
c00279aa:	39 cb                	cmp    ebx,ecx
c00279ac:	7f 35                	jg     c00279e3 <__adddf3+0x5e0>
c00279ae:	29 d9                	sub    ecx,ebx
c00279b0:	8d 71 01             	lea    esi,[ecx+0x1]
c00279b3:	83 fe 1f             	cmp    esi,0x1f
c00279b6:	7e 09                	jle    c00279c1 <__adddf3+0x5be>
c00279b8:	83 e9 1f             	sub    ecx,0x1f
c00279bb:	d3 e8                	shr    eax,cl
c00279bd:	89 c3                	mov    ebx,eax
c00279bf:	eb 11                	jmp    c00279d2 <__adddf3+0x5cf>
c00279c1:	b9 20 00 00 00       	mov    ecx,0x20
c00279c6:	29 f1                	sub    ecx,esi
c00279c8:	89 c3                	mov    ebx,eax
c00279ca:	d3 e3                	shl    ebx,cl
c00279cc:	89 f1                	mov    ecx,esi
c00279ce:	d3 e8                	shr    eax,cl
c00279d0:	89 c2                	mov    edx,eax
c00279d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279d5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00279da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279dd:	89 d0                	mov    eax,edx
c00279df:	89 da                	mov    edx,ebx
c00279e1:	eb 26                	jmp    c0027a09 <__adddf3+0x606>
c00279e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e6:	29 cf                	sub    edi,ecx
c00279e8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279eb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00279f0:	eb 17                	jmp    c0027a09 <__adddf3+0x606>
c00279f2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279f5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00279f8:	eb 0f                	jmp    c0027a09 <__adddf3+0x606>
c00279fa:	31 d2                	xor    edx,edx
c00279fc:	31 c0                	xor    eax,eax
c00279fe:	eb 09                	jmp    c0027a09 <__adddf3+0x606>
c0027a00:	89 c2                	mov    edx,eax
c0027a02:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027a09:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a0c:	c1 e1 14             	shl    ecx,0x14
c0027a0f:	89 c3                	mov    ebx,eax
c0027a11:	c1 eb 0b             	shr    ebx,0xb
c0027a14:	09 d9                	or     ecx,ebx
c0027a16:	89 d3                	mov    ebx,edx
c0027a18:	c1 eb 0b             	shr    ebx,0xb
c0027a1b:	c1 e0 15             	shl    eax,0x15
c0027a1e:	09 d8                	or     eax,ebx
c0027a20:	89 c7                	mov    edi,eax
c0027a22:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027a28:	0f 95 c0             	setne  al
c0027a2b:	89 c6                	mov    esi,eax
c0027a2d:	09 f3                	or     ebx,esi
c0027a2f:	83 e3 01             	and    ebx,0x1
c0027a32:	c1 ea 0a             	shr    edx,0xa
c0027a35:	21 da                	and    edx,ebx
c0027a37:	89 f8                	mov    eax,edi
c0027a39:	01 d0                	add    eax,edx
c0027a3b:	83 d1 00             	adc    ecx,0x0
c0027a3e:	89 c7                	mov    edi,eax
c0027a40:	eb 06                	jmp    c0027a48 <__adddf3+0x645>
c0027a42:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a45:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a48:	89 f8                	mov    eax,edi
c0027a4a:	89 ca                	mov    edx,ecx
c0027a4c:	83 c4 24             	add    esp,0x24
c0027a4f:	5b                   	pop    ebx
c0027a50:	5e                   	pop    esi
c0027a51:	5f                   	pop    edi
c0027a52:	5d                   	pop    ebp
c0027a53:	c3                   	ret    

c0027a54 <__subdf3>:
c0027a54:	55                   	push   ebp
c0027a55:	89 e5                	mov    ebp,esp
c0027a57:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a5a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027a5d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a63:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027a66:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027a69:	5d                   	pop    ebp
c0027a6a:	e9 94 f9 ff ff       	jmp    c0027403 <__adddf3>

c0027a6f <__negdf2>:
c0027a6f:	55                   	push   ebp
c0027a70:	89 e5                	mov    ebp,esp
c0027a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027a75:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a78:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027a7e:	5d                   	pop    ebp
c0027a7f:	c3                   	ret    

c0027a80 <__muldf3>:
c0027a80:	55                   	push   ebp
c0027a81:	89 e5                	mov    ebp,esp
c0027a83:	57                   	push   edi
c0027a84:	56                   	push   esi
c0027a85:	53                   	push   ebx
c0027a86:	83 ec 24             	sub    esp,0x24
c0027a89:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a8f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a95:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027a98:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027a9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027a9e:	89 c8                	mov    eax,ecx
c0027aa0:	c1 f8 14             	sar    eax,0x14
c0027aa3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027aa6:	89 f8                	mov    eax,edi
c0027aa8:	89 fb                	mov    ebx,edi
c0027aaa:	c1 e3 0b             	shl    ebx,0xb
c0027aad:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ab0:	c1 e1 0b             	shl    ecx,0xb
c0027ab3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ab9:	c1 e8 15             	shr    eax,0x15
c0027abc:	09 c1                	or     ecx,eax
c0027abe:	89 d6                	mov    esi,edx
c0027ac0:	89 d0                	mov    eax,edx
c0027ac2:	c1 f8 14             	sar    eax,0x14
c0027ac5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ac8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027acb:	89 c3                	mov    ebx,eax
c0027acd:	c1 e3 0b             	shl    ebx,0xb
c0027ad0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ad3:	c1 e6 0b             	shl    esi,0xb
c0027ad6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027adc:	c1 e8 15             	shr    eax,0x15
c0027adf:	09 c6                	or     esi,eax
c0027ae1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ae4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ae9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027aec:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027aef:	25 ff 07 00 00       	and    eax,0x7ff
c0027af4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027af7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027afa:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027afd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027b04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b07:	40                   	inc    eax
c0027b08:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b0d:	0f 85 8d 00 00 00    	jne    c0027ba0 <__muldf3+0x120>
c0027b13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b16:	09 c8                	or     eax,ecx
c0027b18:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027b1c:	74 44                	je     c0027b62 <__muldf3+0xe2>
c0027b1e:	85 c0                	test   eax,eax
c0027b20:	0f 85 31 02 00 00    	jne    c0027d57 <__muldf3+0x2d7>
c0027b26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b29:	40                   	inc    eax
c0027b2a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b2f:	75 13                	jne    c0027b44 <__muldf3+0xc4>
c0027b31:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b34:	09 f1                	or     ecx,esi
c0027b36:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027b3a:	74 22                	je     c0027b5e <__muldf3+0xde>
c0027b3c:	85 c9                	test   ecx,ecx
c0027b3e:	0f 85 0d 02 00 00    	jne    c0027d51 <__muldf3+0x2d1>
c0027b44:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027b48:	0f 89 09 02 00 00    	jns    c0027d57 <__muldf3+0x2d7>
c0027b4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b51:	05 00 00 00 80       	add    eax,0x80000000
c0027b56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b59:	e9 f9 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027b5e:	85 c9                	test   ecx,ecx
c0027b60:	eb 2e                	jmp    c0027b90 <__muldf3+0x110>
c0027b62:	85 c0                	test   eax,eax
c0027b64:	74 20                	je     c0027b86 <__muldf3+0x106>
c0027b66:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027b69:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b6c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b6f:	c1 ef 1f             	shr    edi,0x1f
c0027b72:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027b75:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027b78:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027b7b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027b7e:	09 f9                	or     ecx,edi
c0027b80:	78 1e                	js     c0027ba0 <__muldf3+0x120>
c0027b82:	89 c3                	mov    ebx,eax
c0027b84:	eb e0                	jmp    c0027b66 <__muldf3+0xe6>
c0027b86:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b89:	f7 d0                	not    eax
c0027b8b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027b90:	75 b2                	jne    c0027b44 <__muldf3+0xc4>
c0027b92:	31 ff                	xor    edi,edi
c0027b94:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027b9b:	e9 b7 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027ba0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ba3:	40                   	inc    eax
c0027ba4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027ba9:	75 57                	jne    c0027c02 <__muldf3+0x182>
c0027bab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027bae:	09 f0                	or     eax,esi
c0027bb0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027bb4:	74 23                	je     c0027bd9 <__muldf3+0x159>
c0027bb6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027bba:	0f 89 91 01 00 00    	jns    c0027d51 <__muldf3+0x2d1>
c0027bc0:	85 c0                	test   eax,eax
c0027bc2:	0f 85 89 01 00 00    	jne    c0027d51 <__muldf3+0x2d1>
c0027bc8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bcb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027bd1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bd4:	e9 7e 01 00 00       	jmp    c0027d57 <__muldf3+0x2d7>
c0027bd9:	85 c0                	test   eax,eax
c0027bdb:	75 0c                	jne    c0027be9 <__muldf3+0x169>
c0027bdd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027be1:	0f 89 6a 01 00 00    	jns    c0027d51 <__muldf3+0x2d1>
c0027be7:	eb df                	jmp    c0027bc8 <__muldf3+0x148>
c0027be9:	01 f6                	add    esi,esi
c0027beb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027bee:	c1 ea 1f             	shr    edx,0x1f
c0027bf1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027bf4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027bf7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027bfa:	09 d6                	or     esi,edx
c0027bfc:	78 04                	js     c0027c02 <__muldf3+0x182>
c0027bfe:	89 c3                	mov    ebx,eax
c0027c00:	eb e7                	jmp    c0027be9 <__muldf3+0x169>
c0027c02:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027c08:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c0e:	89 c8                	mov    eax,ecx
c0027c10:	f7 e6                	mul    esi
c0027c12:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027c15:	89 c7                	mov    edi,eax
c0027c17:	89 c8                	mov    eax,ecx
c0027c19:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c1c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027c1f:	89 c1                	mov    ecx,eax
c0027c21:	89 f0                	mov    eax,esi
c0027c23:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027c26:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027c29:	89 c6                	mov    esi,eax
c0027c2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c2e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027c31:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027c34:	31 c0                	xor    eax,eax
c0027c36:	01 f1                	add    ecx,esi
c0027c38:	0f 92 c0             	setb   al
c0027c3b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027c3e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027c41:	83 d6 00             	adc    esi,0x0
c0027c44:	01 c7                	add    edi,eax
c0027c46:	83 d6 00             	adc    esi,0x0
c0027c49:	01 ca                	add    edx,ecx
c0027c4b:	0f 92 c1             	setb   cl
c0027c4e:	0f b6 c9             	movzx  ecx,cl
c0027c51:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027c54:	83 d6 00             	adc    esi,0x0
c0027c57:	01 cf                	add    edi,ecx
c0027c59:	83 d6 00             	adc    esi,0x0
c0027c5c:	31 c9                	xor    ecx,ecx
c0027c5e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027c61:	0f 95 c1             	setne  cl
c0027c64:	09 cf                	or     edi,ecx
c0027c66:	85 f6                	test   esi,esi
c0027c68:	78 0c                	js     c0027c76 <__muldf3+0x1f6>
c0027c6a:	01 f6                	add    esi,esi
c0027c6c:	89 f8                	mov    eax,edi
c0027c6e:	c1 e8 1f             	shr    eax,0x1f
c0027c71:	09 c6                	or     esi,eax
c0027c73:	01 ff                	add    edi,edi
c0027c75:	4b                   	dec    ebx
c0027c76:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027c7c:	0f 8f 85 00 00 00    	jg     c0027d07 <__muldf3+0x287>
c0027c82:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027c88:	85 db                	test   ebx,ebx
c0027c8a:	0f 8f 84 00 00 00    	jg     c0027d14 <__muldf3+0x294>
c0027c90:	83 fb cc             	cmp    ebx,0xffffffcc
c0027c93:	7c 79                	jl     c0027d0e <__muldf3+0x28e>
c0027c95:	ba 01 00 00 00       	mov    edx,0x1
c0027c9a:	29 da                	sub    edx,ebx
c0027c9c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ca2:	83 fa 1f             	cmp    edx,0x1f
c0027ca5:	7e 30                	jle    c0027cd7 <__muldf3+0x257>
c0027ca7:	83 fa 20             	cmp    edx,0x20
c0027caa:	75 0b                	jne    c0027cb7 <__muldf3+0x237>
c0027cac:	31 c0                	xor    eax,eax
c0027cae:	85 ff                	test   edi,edi
c0027cb0:	0f 95 c0             	setne  al
c0027cb3:	89 c7                	mov    edi,eax
c0027cb5:	eb 1a                	jmp    c0027cd1 <__muldf3+0x251>
c0027cb7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027cba:	89 f0                	mov    eax,esi
c0027cbc:	d3 e0                	shl    eax,cl
c0027cbe:	09 f8                	or     eax,edi
c0027cc0:	0f 95 c0             	setne  al
c0027cc3:	0f b6 c0             	movzx  eax,al
c0027cc6:	89 c7                	mov    edi,eax
c0027cc8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ccd:	29 d9                	sub    ecx,ebx
c0027ccf:	d3 ee                	shr    esi,cl
c0027cd1:	09 f7                	or     edi,esi
c0027cd3:	31 db                	xor    ebx,ebx
c0027cd5:	eb 3b                	jmp    c0027d12 <__muldf3+0x292>
c0027cd7:	83 c3 1f             	add    ebx,0x1f
c0027cda:	89 f0                	mov    eax,esi
c0027cdc:	88 d9                	mov    cl,bl
c0027cde:	d3 e0                	shl    eax,cl
c0027ce0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ce3:	89 f8                	mov    eax,edi
c0027ce5:	88 d1                	mov    cl,dl
c0027ce7:	d3 e8                	shr    eax,cl
c0027ce9:	89 c1                	mov    ecx,eax
c0027ceb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027cee:	09 c8                	or     eax,ecx
c0027cf0:	88 d9                	mov    cl,bl
c0027cf2:	d3 e7                	shl    edi,cl
c0027cf4:	31 db                	xor    ebx,ebx
c0027cf6:	85 ff                	test   edi,edi
c0027cf8:	0f 95 c3             	setne  bl
c0027cfb:	89 df                	mov    edi,ebx
c0027cfd:	09 c7                	or     edi,eax
c0027cff:	88 d1                	mov    cl,dl
c0027d01:	d3 ee                	shr    esi,cl
c0027d03:	31 db                	xor    ebx,ebx
c0027d05:	eb 0d                	jmp    c0027d14 <__muldf3+0x294>
c0027d07:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027d0c:	eb 02                	jmp    c0027d10 <__muldf3+0x290>
c0027d0e:	31 db                	xor    ebx,ebx
c0027d10:	31 ff                	xor    edi,edi
c0027d12:	31 f6                	xor    esi,esi
c0027d14:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d17:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027d1a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027d1f:	09 c3                	or     ebx,eax
c0027d21:	c1 e3 14             	shl    ebx,0x14
c0027d24:	89 f0                	mov    eax,esi
c0027d26:	c1 e8 0b             	shr    eax,0xb
c0027d29:	09 c3                	or     ebx,eax
c0027d2b:	89 f8                	mov    eax,edi
c0027d2d:	c1 e8 0b             	shr    eax,0xb
c0027d30:	c1 e6 15             	shl    esi,0x15
c0027d33:	09 c6                	or     esi,eax
c0027d35:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027d3b:	0f 95 c1             	setne  cl
c0027d3e:	09 c8                	or     eax,ecx
c0027d40:	83 e0 01             	and    eax,0x1
c0027d43:	c1 ef 0a             	shr    edi,0xa
c0027d46:	21 c7                	and    edi,eax
c0027d48:	01 f7                	add    edi,esi
c0027d4a:	83 d3 00             	adc    ebx,0x0
c0027d4d:	89 da                	mov    edx,ebx
c0027d4f:	eb 03                	jmp    c0027d54 <__muldf3+0x2d4>
c0027d51:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027d54:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027d57:	89 f8                	mov    eax,edi
c0027d59:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027d5c:	83 c4 24             	add    esp,0x24
c0027d5f:	5b                   	pop    ebx
c0027d60:	5e                   	pop    esi
c0027d61:	5f                   	pop    edi
c0027d62:	5d                   	pop    ebp
c0027d63:	c3                   	ret    

c0027d64 <__divdf3>:
c0027d64:	55                   	push   ebp
c0027d65:	89 e5                	mov    ebp,esp
c0027d67:	57                   	push   edi
c0027d68:	56                   	push   esi
c0027d69:	53                   	push   ebx
c0027d6a:	83 ec 2c             	sub    esp,0x2c
c0027d6d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d70:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d76:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d79:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d7c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d7f:	89 ce                	mov    esi,ecx
c0027d81:	89 c8                	mov    eax,ecx
c0027d83:	c1 f8 14             	sar    eax,0x14
c0027d86:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d89:	89 f8                	mov    eax,edi
c0027d8b:	89 fb                	mov    ebx,edi
c0027d8d:	c1 e3 0b             	shl    ebx,0xb
c0027d90:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027d93:	c1 e6 0b             	shl    esi,0xb
c0027d96:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027d9c:	c1 e8 15             	shr    eax,0x15
c0027d9f:	09 c6                	or     esi,eax
c0027da1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027da4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027da7:	89 c2                	mov    edx,eax
c0027da9:	c1 fa 14             	sar    edx,0x14
c0027dac:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027daf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027db2:	89 de                	mov    esi,ebx
c0027db4:	c1 e6 0b             	shl    esi,0xb
c0027db7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dba:	c1 e0 0b             	shl    eax,0xb
c0027dbd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027dc2:	c1 eb 15             	shr    ebx,0x15
c0027dc5:	09 d8                	or     eax,ebx
c0027dc7:	89 c2                	mov    edx,eax
c0027dc9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027dcc:	25 ff 07 00 00       	and    eax,0x7ff
c0027dd1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027dd4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dd7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ddd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027de0:	29 d8                	sub    eax,ebx
c0027de2:	05 ff 03 00 00       	add    eax,0x3ff
c0027de7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dea:	46                   	inc    esi
c0027deb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027df1:	0f 85 a5 00 00 00    	jne    c0027e9c <__divdf3+0x138>
c0027df7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027dfa:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027dfd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027e01:	74 2a                	je     c0027e2d <__divdf3+0xc9>
c0027e03:	85 f6                	test   esi,esi
c0027e05:	0f 85 cc 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e0e:	40                   	inc    eax
c0027e0f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e14:	75 26                	jne    c0027e3c <__divdf3+0xd8>
c0027e16:	85 db                	test   ebx,ebx
c0027e18:	74 22                	je     c0027e3c <__divdf3+0xd8>
c0027e1a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e1d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e20:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e23:	09 d0                	or     eax,edx
c0027e25:	0f 85 ac 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027e2b:	eb 63                	jmp    c0027e90 <__divdf3+0x12c>
c0027e2d:	85 f6                	test   esi,esi
c0027e2f:	75 22                	jne    c0027e53 <__divdf3+0xef>
c0027e31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e34:	40                   	inc    eax
c0027e35:	a9 fe 07 00 00       	test   eax,0x7fe
c0027e3a:	74 36                	je     c0027e72 <__divdf3+0x10e>
c0027e3c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027e40:	0f 89 91 02 00 00    	jns    c00280d7 <__divdf3+0x373>
c0027e46:	89 f8                	mov    eax,edi
c0027e48:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027e4e:	e9 80 02 00 00       	jmp    c00280d3 <__divdf3+0x36f>
c0027e53:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e56:	01 f6                	add    esi,esi
c0027e58:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027e5b:	c1 ef 1f             	shr    edi,0x1f
c0027e5e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e61:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027e64:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027e67:	09 f7                	or     edi,esi
c0027e69:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027e6c:	78 2e                	js     c0027e9c <__divdf3+0x138>
c0027e6e:	89 c8                	mov    eax,ecx
c0027e70:	eb e1                	jmp    c0027e53 <__divdf3+0xef>
c0027e72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027e75:	09 d0                	or     eax,edx
c0027e77:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027e7b:	74 0f                	je     c0027e8c <__divdf3+0x128>
c0027e7d:	85 c0                	test   eax,eax
c0027e7f:	74 bb                	je     c0027e3c <__divdf3+0xd8>
c0027e81:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027e84:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027e87:	e9 4b 02 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027e8c:	85 c0                	test   eax,eax
c0027e8e:	75 ac                	jne    c0027e3c <__divdf3+0xd8>
c0027e90:	31 ff                	xor    edi,edi
c0027e92:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027e97:	e9 3b 02 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027e9c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e9f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027ea2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027ea8:	75 6b                	jne    c0027f15 <__divdf3+0x1b1>
c0027eaa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ead:	09 d6                	or     esi,edx
c0027eaf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027eb3:	74 28                	je     c0027edd <__divdf3+0x179>
c0027eb5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027eb8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ebb:	85 f6                	test   esi,esi
c0027ebd:	0f 85 14 02 00 00    	jne    c00280d7 <__divdf3+0x373>
c0027ec3:	31 ff                	xor    edi,edi
c0027ec5:	31 c9                	xor    ecx,ecx
c0027ec7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027eca:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ecd:	0f 89 04 02 00 00    	jns    c00280d7 <__divdf3+0x373>
c0027ed3:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027ed8:	e9 fa 01 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027edd:	85 f6                	test   esi,esi
c0027edf:	75 1b                	jne    c0027efc <__divdf3+0x198>
c0027ee1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ee4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027ee7:	25 00 00 00 80       	and    eax,0x80000000
c0027eec:	31 c9                	xor    ecx,ecx
c0027eee:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027ef3:	89 cf                	mov    edi,ecx
c0027ef5:	89 c1                	mov    ecx,eax
c0027ef7:	e9 db 01 00 00       	jmp    c00280d7 <__divdf3+0x373>
c0027efc:	01 d2                	add    edx,edx
c0027efe:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f01:	c1 eb 1f             	shr    ebx,0x1f
c0027f04:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f07:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027f0a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027f0d:	09 da                	or     edx,ebx
c0027f0f:	78 04                	js     c0027f15 <__divdf3+0x1b1>
c0027f11:	89 c8                	mov    eax,ecx
c0027f13:	eb e7                	jmp    c0027efc <__divdf3+0x198>
c0027f15:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f18:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027f1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027f24:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027f27:	39 d6                	cmp    esi,edx
c0027f29:	77 0d                	ja     c0027f38 <__divdf3+0x1d4>
c0027f2b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027f2e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027f31:	72 1b                	jb     c0027f4e <__divdf3+0x1ea>
c0027f33:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027f36:	75 16                	jne    c0027f4e <__divdf3+0x1ea>
c0027f38:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f3b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027f3e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027f41:	83 de 00             	sbb    esi,0x0
c0027f44:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027f47:	ba 01 00 00 00       	mov    edx,0x1
c0027f4c:	eb 02                	jmp    c0027f50 <__divdf3+0x1ec>
c0027f4e:	31 d2                	xor    edx,edx
c0027f50:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027f57:	31 ff                	xor    edi,edi
c0027f59:	01 ff                	add    edi,edi
c0027f5b:	89 d1                	mov    ecx,edx
c0027f5d:	c1 e9 1f             	shr    ecx,0x1f
c0027f60:	09 cf                	or     edi,ecx
c0027f62:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027f65:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027f68:	89 da                	mov    edx,ebx
c0027f6a:	89 f3                	mov    ebx,esi
c0027f6c:	8d 34 36             	lea    esi,[esi+esi*1]
c0027f6f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f72:	c1 e9 1f             	shr    ecx,0x1f
c0027f75:	09 ce                	or     esi,ecx
c0027f77:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027f7a:	01 c9                	add    ecx,ecx
c0027f7c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027f7f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027f82:	85 db                	test   ebx,ebx
c0027f84:	78 29                	js     c0027faf <__divdf3+0x24b>
c0027f86:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027f89:	72 07                	jb     c0027f92 <__divdf3+0x22e>
c0027f8b:	75 3c                	jne    c0027fc9 <__divdf3+0x265>
c0027f8d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027f90:	77 37                	ja     c0027fc9 <__divdf3+0x265>
c0027f92:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027f95:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027f98:	31 d2                	xor    edx,edx
c0027f9a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027f9d:	0f 97 c2             	seta   dl
c0027fa0:	29 d6                	sub    esi,edx
c0027fa2:	89 d9                	mov    ecx,ebx
c0027fa4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027fa7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027faa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027fad:	eb 17                	jmp    c0027fc6 <__divdf3+0x262>
c0027faf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027fb2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fb5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fb8:	0f 97 c1             	seta   cl
c0027fbb:	0f b6 c9             	movzx  ecx,cl
c0027fbe:	29 ce                	sub    esi,ecx
c0027fc0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027fc3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027fc6:	83 ca 01             	or     edx,0x1
c0027fc9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027fcc:	75 8b                	jne    c0027f59 <__divdf3+0x1f5>
c0027fce:	c1 e7 09             	shl    edi,0x9
c0027fd1:	89 d1                	mov    ecx,edx
c0027fd3:	c1 e9 17             	shr    ecx,0x17
c0027fd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fd9:	09 f3                	or     ebx,esi
c0027fdb:	0f 95 c3             	setne  bl
c0027fde:	0f b6 db             	movzx  ebx,bl
c0027fe1:	c1 e2 09             	shl    edx,0x9
c0027fe4:	09 d3                	or     ebx,edx
c0027fe6:	89 ca                	mov    edx,ecx
c0027fe8:	09 fa                	or     edx,edi
c0027fea:	78 0c                	js     c0027ff8 <__divdf3+0x294>
c0027fec:	01 d2                	add    edx,edx
c0027fee:	89 d9                	mov    ecx,ebx
c0027ff0:	c1 e9 1f             	shr    ecx,0x1f
c0027ff3:	09 ca                	or     edx,ecx
c0027ff5:	01 db                	add    ebx,ebx
c0027ff7:	48                   	dec    eax
c0027ff8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ffd:	0f 8f 83 00 00 00    	jg     c0028086 <__divdf3+0x322>
c0028003:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028009:	85 c0                	test   eax,eax
c002800b:	0f 8f 82 00 00 00    	jg     c0028093 <__divdf3+0x32f>
c0028011:	83 f8 cc             	cmp    eax,0xffffffcc
c0028014:	7c 77                	jl     c002808d <__divdf3+0x329>
c0028016:	be 01 00 00 00       	mov    esi,0x1
c002801b:	29 c6                	sub    esi,eax
c002801d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028023:	83 fe 1f             	cmp    esi,0x1f
c0028026:	7e 2f                	jle    c0028057 <__divdf3+0x2f3>
c0028028:	83 fe 20             	cmp    esi,0x20
c002802b:	75 0a                	jne    c0028037 <__divdf3+0x2d3>
c002802d:	85 db                	test   ebx,ebx
c002802f:	0f 95 c3             	setne  bl
c0028032:	0f b6 db             	movzx  ebx,bl
c0028035:	eb 1a                	jmp    c0028051 <__divdf3+0x2ed>
c0028037:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002803a:	89 d7                	mov    edi,edx
c002803c:	d3 e7                	shl    edi,cl
c002803e:	89 f9                	mov    ecx,edi
c0028040:	09 d9                	or     ecx,ebx
c0028042:	0f 95 c3             	setne  bl
c0028045:	0f b6 db             	movzx  ebx,bl
c0028048:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002804d:	29 c1                	sub    ecx,eax
c002804f:	d3 ea                	shr    edx,cl
c0028051:	09 d3                	or     ebx,edx
c0028053:	31 c0                	xor    eax,eax
c0028055:	eb 3a                	jmp    c0028091 <__divdf3+0x32d>
c0028057:	83 c0 1f             	add    eax,0x1f
c002805a:	89 d7                	mov    edi,edx
c002805c:	88 c1                	mov    cl,al
c002805e:	d3 e7                	shl    edi,cl
c0028060:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028063:	89 df                	mov    edi,ebx
c0028065:	89 f1                	mov    ecx,esi
c0028067:	d3 ef                	shr    edi,cl
c0028069:	89 f9                	mov    ecx,edi
c002806b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002806e:	09 cf                	or     edi,ecx
c0028070:	88 c1                	mov    cl,al
c0028072:	d3 e3                	shl    ebx,cl
c0028074:	85 db                	test   ebx,ebx
c0028076:	0f 95 c3             	setne  bl
c0028079:	0f b6 db             	movzx  ebx,bl
c002807c:	09 fb                	or     ebx,edi
c002807e:	89 f1                	mov    ecx,esi
c0028080:	d3 ea                	shr    edx,cl
c0028082:	31 c0                	xor    eax,eax
c0028084:	eb 0d                	jmp    c0028093 <__divdf3+0x32f>
c0028086:	b8 ff 07 00 00       	mov    eax,0x7ff
c002808b:	eb 02                	jmp    c002808f <__divdf3+0x32b>
c002808d:	31 c0                	xor    eax,eax
c002808f:	31 db                	xor    ebx,ebx
c0028091:	31 d2                	xor    edx,edx
c0028093:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028096:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028099:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002809f:	09 c8                	or     eax,ecx
c00280a1:	c1 e0 14             	shl    eax,0x14
c00280a4:	89 d1                	mov    ecx,edx
c00280a6:	c1 e9 0b             	shr    ecx,0xb
c00280a9:	09 c8                	or     eax,ecx
c00280ab:	89 c6                	mov    esi,eax
c00280ad:	89 d9                	mov    ecx,ebx
c00280af:	c1 e9 0b             	shr    ecx,0xb
c00280b2:	c1 e2 15             	shl    edx,0x15
c00280b5:	09 ca                	or     edx,ecx
c00280b7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00280bd:	0f 95 c0             	setne  al
c00280c0:	09 c1                	or     ecx,eax
c00280c2:	83 e1 01             	and    ecx,0x1
c00280c5:	c1 eb 0a             	shr    ebx,0xa
c00280c8:	21 cb                	and    ebx,ecx
c00280ca:	01 d3                	add    ebx,edx
c00280cc:	89 d8                	mov    eax,ebx
c00280ce:	83 d6 00             	adc    esi,0x0
c00280d1:	89 f2                	mov    edx,esi
c00280d3:	89 c7                	mov    edi,eax
c00280d5:	89 d1                	mov    ecx,edx
c00280d7:	89 f8                	mov    eax,edi
c00280d9:	89 ca                	mov    edx,ecx
c00280db:	83 c4 2c             	add    esp,0x2c
c00280de:	5b                   	pop    ebx
c00280df:	5e                   	pop    esi
c00280e0:	5f                   	pop    edi
c00280e1:	5d                   	pop    ebp
c00280e2:	c3                   	ret    

c00280e3 <__floatsidf>:
c00280e3:	55                   	push   ebp
c00280e4:	89 e5                	mov    ebp,esp
c00280e6:	56                   	push   esi
c00280e7:	53                   	push   ebx
c00280e8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280eb:	85 db                	test   ebx,ebx
c00280ed:	7e 15                	jle    c0028104 <__floatsidf+0x21>
c00280ef:	0f bd cb             	bsr    ecx,ebx
c00280f2:	83 f1 1f             	xor    ecx,0x1f
c00280f5:	d3 e3                	shl    ebx,cl
c00280f7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00280fd:	b8 1e 04 00 00       	mov    eax,0x41e
c0028102:	eb 21                	jmp    c0028125 <__floatsidf+0x42>
c0028104:	b8 00 00 00 00       	mov    eax,0x0
c0028109:	ba 00 00 00 00       	mov    edx,0x0
c002810e:	74 2a                	je     c002813a <__floatsidf+0x57>
c0028110:	f7 db                	neg    ebx
c0028112:	0f bd cb             	bsr    ecx,ebx
c0028115:	83 f1 1f             	xor    ecx,0x1f
c0028118:	d3 e3                	shl    ebx,cl
c002811a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028120:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028125:	29 c8                	sub    eax,ecx
c0028127:	c1 e0 14             	shl    eax,0x14
c002812a:	89 c1                	mov    ecx,eax
c002812c:	89 de                	mov    esi,ebx
c002812e:	c1 ee 0b             	shr    esi,0xb
c0028131:	09 f1                	or     ecx,esi
c0028133:	89 ca                	mov    edx,ecx
c0028135:	c1 e3 15             	shl    ebx,0x15
c0028138:	89 d8                	mov    eax,ebx
c002813a:	5b                   	pop    ebx
c002813b:	5e                   	pop    esi
c002813c:	5d                   	pop    ebp
c002813d:	c3                   	ret    

c002813e <__floatunsidf>:
c002813e:	55                   	push   ebp
c002813f:	89 e5                	mov    ebp,esp
c0028141:	56                   	push   esi
c0028142:	53                   	push   ebx
c0028143:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028146:	85 db                	test   ebx,ebx
c0028148:	74 2a                	je     c0028174 <__floatunsidf+0x36>
c002814a:	0f bd cb             	bsr    ecx,ebx
c002814d:	83 f1 1f             	xor    ecx,0x1f
c0028150:	d3 e3                	shl    ebx,cl
c0028152:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028158:	b8 1e 04 00 00       	mov    eax,0x41e
c002815d:	29 c8                	sub    eax,ecx
c002815f:	c1 e0 14             	shl    eax,0x14
c0028162:	89 c1                	mov    ecx,eax
c0028164:	89 de                	mov    esi,ebx
c0028166:	c1 ee 0b             	shr    esi,0xb
c0028169:	09 f1                	or     ecx,esi
c002816b:	89 ca                	mov    edx,ecx
c002816d:	c1 e3 15             	shl    ebx,0x15
c0028170:	89 d8                	mov    eax,ebx
c0028172:	eb 04                	jmp    c0028178 <__floatunsidf+0x3a>
c0028174:	31 c0                	xor    eax,eax
c0028176:	31 d2                	xor    edx,edx
c0028178:	5b                   	pop    ebx
c0028179:	5e                   	pop    esi
c002817a:	5d                   	pop    ebp
c002817b:	c3                   	ret    

c002817c <__fixdfsi>:
c002817c:	55                   	push   ebp
c002817d:	89 e5                	mov    ebp,esp
c002817f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028182:	89 d1                	mov    ecx,edx
c0028184:	c1 e1 0b             	shl    ecx,0xb
c0028187:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002818d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028190:	c1 e8 15             	shr    eax,0x15
c0028193:	09 c1                	or     ecx,eax
c0028195:	c1 fa 14             	sar    edx,0x14
c0028198:	78 1f                	js     c00281b9 <__fixdfsi+0x3d>
c002819a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00281a0:	31 c0                	xor    eax,eax
c00281a2:	83 fa 1e             	cmp    edx,0x1e
c00281a5:	77 40                	ja     c00281e7 <__fixdfsi+0x6b>
c00281a7:	89 c8                	mov    eax,ecx
c00281a9:	0d 00 00 00 80       	or     eax,0x80000000
c00281ae:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281b3:	29 d1                	sub    ecx,edx
c00281b5:	d3 e8                	shr    eax,cl
c00281b7:	eb 2e                	jmp    c00281e7 <__fixdfsi+0x6b>
c00281b9:	31 c0                	xor    eax,eax
c00281bb:	81 c2 01 04 00 00    	add    edx,0x401
c00281c1:	78 24                	js     c00281e7 <__fixdfsi+0x6b>
c00281c3:	83 fa 1e             	cmp    edx,0x1e
c00281c6:	7e 09                	jle    c00281d1 <__fixdfsi+0x55>
c00281c8:	83 fa 1f             	cmp    edx,0x1f
c00281cb:	75 18                	jne    c00281e5 <__fixdfsi+0x69>
c00281cd:	85 c9                	test   ecx,ecx
c00281cf:	75 14                	jne    c00281e5 <__fixdfsi+0x69>
c00281d1:	89 c8                	mov    eax,ecx
c00281d3:	0d 00 00 00 80       	or     eax,0x80000000
c00281d8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00281dd:	29 d1                	sub    ecx,edx
c00281df:	d3 e8                	shr    eax,cl
c00281e1:	f7 d8                	neg    eax
c00281e3:	eb 02                	jmp    c00281e7 <__fixdfsi+0x6b>
c00281e5:	31 c0                	xor    eax,eax
c00281e7:	5d                   	pop    ebp
c00281e8:	c3                   	ret    

c00281e9 <__fixunsdfsi>:
c00281e9:	55                   	push   ebp
c00281ea:	89 e5                	mov    ebp,esp
c00281ec:	53                   	push   ebx
c00281ed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00281f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281f3:	89 d3                	mov    ebx,edx
c00281f5:	c1 fb 14             	sar    ebx,0x14
c00281f8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00281fe:	31 c0                	xor    eax,eax
c0028200:	83 fb 1f             	cmp    ebx,0x1f
c0028203:	77 1d                	ja     c0028222 <__fixunsdfsi+0x39>
c0028205:	89 d0                	mov    eax,edx
c0028207:	c1 e0 0b             	shl    eax,0xb
c002820a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002820f:	c1 e9 15             	shr    ecx,0x15
c0028212:	09 c8                	or     eax,ecx
c0028214:	0d 00 00 00 80       	or     eax,0x80000000
c0028219:	b9 1f 00 00 00       	mov    ecx,0x1f
c002821e:	29 d9                	sub    ecx,ebx
c0028220:	d3 e8                	shr    eax,cl
c0028222:	5b                   	pop    ebx
c0028223:	5d                   	pop    ebp
c0028224:	c3                   	ret    

c0028225 <__cmpdf2>:
c0028225:	55                   	push   ebp
c0028226:	89 e5                	mov    ebp,esp
c0028228:	57                   	push   edi
c0028229:	56                   	push   esi
c002822a:	53                   	push   ebx
c002822b:	83 ec 0c             	sub    esp,0xc
c002822e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028231:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028234:	89 ca                	mov    edx,ecx
c0028236:	c1 ea 14             	shr    edx,0x14
c0028239:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002823f:	89 cb                	mov    ebx,ecx
c0028241:	c1 fb 1f             	sar    ebx,0x1f
c0028244:	31 da                	xor    edx,ebx
c0028246:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028249:	89 df                	mov    edi,ebx
c002824b:	c1 e7 0b             	shl    edi,0xb
c002824e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028251:	c1 e1 0b             	shl    ecx,0xb
c0028254:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002825a:	c1 eb 15             	shr    ebx,0x15
c002825d:	09 d9                	or     ecx,ebx
c002825f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028262:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028265:	89 ce                	mov    esi,ecx
c0028267:	c1 ee 14             	shr    esi,0x14
c002826a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028270:	89 cb                	mov    ebx,ecx
c0028272:	c1 fb 1f             	sar    ebx,0x1f
c0028275:	31 de                	xor    esi,ebx
c0028277:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002827a:	89 df                	mov    edi,ebx
c002827c:	c1 e7 0b             	shl    edi,0xb
c002827f:	c1 e1 0b             	shl    ecx,0xb
c0028282:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028288:	c1 eb 15             	shr    ebx,0x15
c002828b:	09 d9                	or     ecx,ebx
c002828d:	89 d3                	mov    ebx,edx
c002828f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028295:	43                   	inc    ebx
c0028296:	83 fb 01             	cmp    ebx,0x1
c0028299:	77 08                	ja     c00282a3 <__cmpdf2+0x7e>
c002829b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002829e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00282a1:	75 68                	jne    c002830b <__cmpdf2+0xe6>
c00282a3:	89 f3                	mov    ebx,esi
c00282a5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00282ab:	43                   	inc    ebx
c00282ac:	83 fb 01             	cmp    ebx,0x1
c00282af:	77 06                	ja     c00282b7 <__cmpdf2+0x92>
c00282b1:	89 fb                	mov    ebx,edi
c00282b3:	09 cb                	or     ebx,ecx
c00282b5:	75 54                	jne    c002830b <__cmpdf2+0xe6>
c00282b7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282ba:	09 f8                	or     eax,edi
c00282bc:	09 c8                	or     eax,ecx
c00282be:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00282c1:	75 12                	jne    c00282d5 <__cmpdf2+0xb0>
c00282c3:	8d 42 01             	lea    eax,[edx+0x1]
c00282c6:	83 f8 01             	cmp    eax,0x1
c00282c9:	77 0a                	ja     c00282d5 <__cmpdf2+0xb0>
c00282cb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ce:	31 c0                	xor    eax,eax
c00282d0:	83 fb 01             	cmp    ebx,0x1
c00282d3:	76 36                	jbe    c002830b <__cmpdf2+0xe6>
c00282d5:	b8 01 00 00 00       	mov    eax,0x1
c00282da:	39 f2                	cmp    edx,esi
c00282dc:	7f 2d                	jg     c002830b <__cmpdf2+0xe6>
c00282de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00282e3:	7c 26                	jl     c002830b <__cmpdf2+0xe6>
c00282e5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00282e8:	77 07                	ja     c00282f1 <__cmpdf2+0xcc>
c00282ea:	72 16                	jb     c0028302 <__cmpdf2+0xdd>
c00282ec:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00282ef:	76 0a                	jbe    c00282fb <__cmpdf2+0xd6>
c00282f1:	89 d0                	mov    eax,edx
c00282f3:	c1 f8 1f             	sar    eax,0x1f
c00282f6:	83 c8 01             	or     eax,0x1
c00282f9:	eb 10                	jmp    c002830b <__cmpdf2+0xe6>
c00282fb:	b8 00 00 00 00       	mov    eax,0x0
c0028300:	73 09                	jae    c002830b <__cmpdf2+0xe6>
c0028302:	89 d0                	mov    eax,edx
c0028304:	c1 f8 1f             	sar    eax,0x1f
c0028307:	83 e0 02             	and    eax,0x2
c002830a:	48                   	dec    eax
c002830b:	83 c4 0c             	add    esp,0xc
c002830e:	5b                   	pop    ebx
c002830f:	5e                   	pop    esi
c0028310:	5f                   	pop    edi
c0028311:	5d                   	pop    ebp
c0028312:	c3                   	ret    

c0028313 <__eqdf2>:
c0028313:	55                   	push   ebp
c0028314:	89 e5                	mov    ebp,esp
c0028316:	50                   	push   eax
c0028317:	6a 01                	push   0x1
c0028319:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002831c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002831f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028322:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028325:	e8 fb fe ff ff       	call   c0028225 <__cmpdf2>
c002832a:	83 c4 18             	add    esp,0x18
c002832d:	c9                   	leave  
c002832e:	c3                   	ret    

c002832f <__nedf2>:
c002832f:	eb e2                	jmp    c0028313 <__eqdf2>

c0028331 <__gtdf2>:
c0028331:	55                   	push   ebp
c0028332:	89 e5                	mov    ebp,esp
c0028334:	50                   	push   eax
c0028335:	6a ff                	push   0xffffffff
c0028337:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002833a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002833d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028340:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028343:	e8 dd fe ff ff       	call   c0028225 <__cmpdf2>
c0028348:	83 c4 18             	add    esp,0x18
c002834b:	c9                   	leave  
c002834c:	c3                   	ret    

c002834d <__gedf2>:
c002834d:	eb e2                	jmp    c0028331 <__gtdf2>

c002834f <__ltdf2>:
c002834f:	eb c2                	jmp    c0028313 <__eqdf2>

c0028351 <__ledf2>:
c0028351:	eb c0                	jmp    c0028313 <__eqdf2>

c0028353 <__truncdfsf2>:
c0028353:	55                   	push   ebp
c0028354:	89 e5                	mov    ebp,esp
c0028356:	57                   	push   edi
c0028357:	56                   	push   esi
c0028358:	53                   	push   ebx
c0028359:	83 ec 0c             	sub    esp,0xc
c002835c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002835f:	89 d1                	mov    ecx,edx
c0028361:	c1 f9 14             	sar    ecx,0x14
c0028364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028367:	89 df                	mov    edi,ebx
c0028369:	c1 e7 0b             	shl    edi,0xb
c002836c:	89 d0                	mov    eax,edx
c002836e:	c1 e0 0b             	shl    eax,0xb
c0028371:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028376:	c1 eb 15             	shr    ebx,0x15
c0028379:	09 d8                	or     eax,ebx
c002837b:	89 cb                	mov    ebx,ecx
c002837d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028383:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028389:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002838f:	0f 86 9e 00 00 00    	jbe    c0028433 <__truncdfsf2+0xe0>
c0028395:	85 db                	test   ebx,ebx
c0028397:	75 0a                	jne    c00283a3 <__truncdfsf2+0x50>
c0028399:	c1 fa 17             	sar    edx,0x17
c002839c:	30 d2                	xor    dl,dl
c002839e:	e9 84 00 00 00       	jmp    c0028427 <__truncdfsf2+0xd4>
c00283a3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00283a9:	83 fe 83             	cmp    esi,0xffffff83
c00283ac:	7d 4b                	jge    c00283f9 <__truncdfsf2+0xa6>
c00283ae:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00283b3:	29 f1                	sub    ecx,esi
c00283b5:	83 f9 1f             	cmp    ecx,0x1f
c00283b8:	7f 6b                	jg     c0028425 <__truncdfsf2+0xd2>
c00283ba:	0d 00 00 00 80       	or     eax,0x80000000
c00283bf:	89 c3                	mov    ebx,eax
c00283c1:	d3 eb                	shr    ebx,cl
c00283c3:	be 01 00 00 00       	mov    esi,0x1
c00283c8:	d3 e6                	shl    esi,cl
c00283ca:	4e                   	dec    esi
c00283cb:	21 f0                	and    eax,esi
c00283cd:	09 f8                	or     eax,edi
c00283cf:	0f 95 c0             	setne  al
c00283d2:	0f b6 c0             	movzx  eax,al
c00283d5:	09 c3                	or     ebx,eax
c00283d7:	89 d9                	mov    ecx,ebx
c00283d9:	c1 e9 08             	shr    ecx,0x8
c00283dc:	f6 c3 7f             	test   bl,0x7f
c00283df:	0f 95 c0             	setne  al
c00283e2:	09 c8                	or     eax,ecx
c00283e4:	83 e0 01             	and    eax,0x1
c00283e7:	c1 eb 07             	shr    ebx,0x7
c00283ea:	21 c3                	and    ebx,eax
c00283ec:	81 e2 00 00 00 80    	and    edx,0x80000000
c00283f2:	09 d1                	or     ecx,edx
c00283f4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00283f7:	eb 76                	jmp    c002846f <__truncdfsf2+0x11c>
c00283f9:	83 c6 80             	add    esi,0xffffff80
c00283fc:	7e 1d                	jle    c002841b <__truncdfsf2+0xc8>
c00283fe:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028404:	75 0b                	jne    c0028411 <__truncdfsf2+0xbe>
c0028406:	09 f8                	or     eax,edi
c0028408:	74 09                	je     c0028413 <__truncdfsf2+0xc0>
c002840a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002840f:	eb 02                	jmp    c0028413 <__truncdfsf2+0xc0>
c0028411:	31 c0                	xor    eax,eax
c0028413:	c1 fa 17             	sar    edx,0x17
c0028416:	80 ca ff             	or     dl,0xff
c0028419:	eb 0e                	jmp    c0028429 <__truncdfsf2+0xd6>
c002841b:	c1 fa 1f             	sar    edx,0x1f
c002841e:	c1 e2 08             	shl    edx,0x8
c0028421:	09 ca                	or     edx,ecx
c0028423:	eb 04                	jmp    c0028429 <__truncdfsf2+0xd6>
c0028425:	31 d2                	xor    edx,edx
c0028427:	31 c0                	xor    eax,eax
c0028429:	c1 e2 17             	shl    edx,0x17
c002842c:	c1 e8 08             	shr    eax,0x8
c002842f:	09 d0                	or     eax,edx
c0028431:	eb 3c                	jmp    c002846f <__truncdfsf2+0x11c>
c0028433:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028439:	89 ca                	mov    edx,ecx
c002843b:	c1 fa 0b             	sar    edx,0xb
c002843e:	c1 e2 08             	shl    edx,0x8
c0028441:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028444:	31 db                	xor    ebx,ebx
c0028446:	85 ff                	test   edi,edi
c0028448:	0f 95 c3             	setne  bl
c002844b:	09 d8                	or     eax,ebx
c002844d:	89 c3                	mov    ebx,eax
c002844f:	c1 eb 08             	shr    ebx,0x8
c0028452:	a8 7f                	test   al,0x7f
c0028454:	0f 95 c2             	setne  dl
c0028457:	89 d6                	mov    esi,edx
c0028459:	09 de                	or     esi,ebx
c002845b:	83 e6 01             	and    esi,0x1
c002845e:	c1 e8 07             	shr    eax,0x7
c0028461:	21 f0                	and    eax,esi
c0028463:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028466:	09 ca                	or     edx,ecx
c0028468:	c1 e2 17             	shl    edx,0x17
c002846b:	09 da                	or     edx,ebx
c002846d:	01 d0                	add    eax,edx
c002846f:	83 c4 0c             	add    esp,0xc
c0028472:	5b                   	pop    ebx
c0028473:	5e                   	pop    esi
c0028474:	5f                   	pop    edi
c0028475:	5d                   	pop    ebp
c0028476:	c3                   	ret    

c0028477 <__extendsfdf2>:
c0028477:	55                   	push   ebp
c0028478:	89 e5                	mov    ebp,esp
c002847a:	57                   	push   edi
c002847b:	56                   	push   esi
c002847c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002847f:	89 d1                	mov    ecx,edx
c0028481:	c1 f9 17             	sar    ecx,0x17
c0028484:	c1 e2 08             	shl    edx,0x8
c0028487:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002848d:	89 c8                	mov    eax,ecx
c002848f:	80 e4 f8             	and    ah,0xf8
c0028492:	8d 71 01             	lea    esi,[ecx+0x1]
c0028495:	81 e6 fe 00 00 00    	and    esi,0xfe
c002849b:	75 27                	jne    c00284c4 <__extendsfdf2+0x4d>
c002849d:	81 e1 ff 00 00 00    	and    ecx,0xff
c00284a3:	75 18                	jne    c00284bd <__extendsfdf2+0x46>
c00284a5:	85 d2                	test   edx,edx
c00284a7:	74 20                	je     c00284c9 <__extendsfdf2+0x52>
c00284a9:	41                   	inc    ecx
c00284aa:	01 d2                	add    edx,edx
c00284ac:	79 fb                	jns    c00284a9 <__extendsfdf2+0x32>
c00284ae:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00284b4:	29 c8                	sub    eax,ecx
c00284b6:	05 81 03 00 00       	add    eax,0x381
c00284bb:	eb 0c                	jmp    c00284c9 <__extendsfdf2+0x52>
c00284bd:	05 00 07 00 00       	add    eax,0x700
c00284c2:	eb 05                	jmp    c00284c9 <__extendsfdf2+0x52>
c00284c4:	05 80 03 00 00       	add    eax,0x380
c00284c9:	c1 e0 14             	shl    eax,0x14
c00284cc:	89 c1                	mov    ecx,eax
c00284ce:	89 d0                	mov    eax,edx
c00284d0:	c1 e8 0b             	shr    eax,0xb
c00284d3:	09 c1                	or     ecx,eax
c00284d5:	c1 e2 15             	shl    edx,0x15
c00284d8:	89 d0                	mov    eax,edx
c00284da:	89 ca                	mov    edx,ecx
c00284dc:	5e                   	pop    esi
c00284dd:	5f                   	pop    edi
c00284de:	5d                   	pop    ebp
c00284df:	c3                   	ret    

c00284e0 <fabs>:
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00284ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00284ee:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00284f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00284f7:	dd 04 24             	fld    QWORD PTR [esp]
c00284fa:	83 c4 0c             	add    esp,0xc
c00284fd:	c3                   	ret    
c00284fe:	66 90                	xchg   ax,ax

c0028500 <lrint>:
c0028500:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028504:	83 ec 04             	sub    esp,0x4
c0028507:	db 1c 24             	fistp  DWORD PTR [esp]
c002850a:	58                   	pop    eax
c002850b:	c3                   	ret    

c002850c <lrintf>:
c002850c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028510:	83 ec 04             	sub    esp,0x4
c0028513:	db 1c 24             	fistp  DWORD PTR [esp]
c0028516:	58                   	pop    eax
c0028517:	c3                   	ret    

Disassembly of section .init:

c0028518 <_init>:
c0028518:	55                   	push   ebp
c0028519:	89 e5                	mov    ebp,esp
c002851b:	e8 f8 7b fd ff       	call   c0000118 <frame_dummy>
c0028520:	e8 63 e0 ff ff       	call   c0026588 <__do_global_ctors_aux>
c0028525:	5d                   	pop    ebp
c0028526:	c3                   	ret    

Disassembly of section .fini:

c0028527 <_fini>:
c0028527:	55                   	push   ebp
c0028528:	89 e5                	mov    ebp,esp
c002852a:	e8 79 7b fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002852f:	5d                   	pop    ebp
c0028530:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028532 <Computer::~Computer()>:
c0028532:	83 ec 0c             	sub    esp,0xc
c0028535:	ba 68 a0 02 c0       	mov    edx,0xc002a068
c002853a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853e:	89 10                	mov    DWORD PTR [eax],edx
c0028540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028544:	83 ec 0c             	sub    esp,0xc
c0028547:	50                   	push   eax
c0028548:	e8 7f bb fe ff       	call   c00140cc <Device::~Device()>
c002854d:	83 c4 10             	add    esp,0x10
c0028550:	90                   	nop
c0028551:	83 c4 0c             	add    esp,0xc
c0028554:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028556 <Computer::~Computer()>:
c0028556:	83 ec 0c             	sub    esp,0xc
c0028559:	83 ec 0c             	sub    esp,0xc
c002855c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028560:	e8 cd ff ff ff       	call   c0028532 <Computer::~Computer()>
c0028565:	83 c4 10             	add    esp,0x10
c0028568:	83 ec 08             	sub    esp,0x8
c002856b:	68 ec 01 00 00       	push   0x1ec
c0028570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028574:	e8 7b a7 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028579:	83 c4 10             	add    esp,0x10
c002857c:	83 c4 0c             	add    esp,0xc
c002857f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028580 <idleCommon()>:
c0028580:	83 ec 0c             	sub    esp,0xc
c0028583:	e8 ef 56 ff ff       	call   c001dc77 <lockScheduler()>
c0028588:	e8 25 5a ff ff       	call   c001dfb2 <schedule()>
c002858d:	83 c4 0c             	add    esp,0xc
c0028590:	e9 e4 56 ff ff       	jmp    c001dc79 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028596 <LinkedList<UnixFile>::~LinkedList()>:
c0028596:	90                   	nop
c0028597:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028598 <LinkedList<UnixFile>::LinkedList()>:
c0028598:	83 ec 0c             	sub    esp,0xc
c002859b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285db:	83 ec 0c             	sub    esp,0xc
c00285de:	68 42 a3 02 c0       	push   0xc002a342
c00285e3:	e8 ec a7 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00285e8:	83 c4 10             	add    esp,0x10
c00285eb:	90                   	nop
c00285ec:	83 c4 0c             	add    esp,0xc
c00285ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00285f0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00285f0:	83 ec 0c             	sub    esp,0xc
c00285f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00285f8:	75 10                	jne    c002860a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00285fa:	83 ec 0c             	sub    esp,0xc
c00285fd:	68 5c a3 02 c0       	push   0xc002a35c
c0028602:	e8 76 1e ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028607:	83 c4 10             	add    esp,0x10
c002860a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028610:	85 c0                	test   eax,eax
c0028612:	74 34                	je     c0028648 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028618:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002861b:	85 c0                	test   eax,eax
c002861d:	74 29                	je     c0028648 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002861f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028623:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028626:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002862a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002862d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028631:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028635:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002863f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028646:	eb 65                	jmp    c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864c:	8b 00                	mov    eax,DWORD PTR [eax]
c002864e:	85 c0                	test   eax,eax
c0028650:	75 4b                	jne    c002869d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028656:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028659:	85 c0                	test   eax,eax
c002865b:	75 40                	jne    c002869d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002865d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028665:	89 10                	mov    DWORD PTR [eax],edx
c0028667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002866b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002866f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028676:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028679:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028684:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028687:	85 c0                	test   eax,eax
c0028689:	74 22                	je     c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002868b:	83 ec 0c             	sub    esp,0xc
c002868e:	68 7e a3 02 c0       	push   0xc002a37e
c0028693:	e8 e5 1d ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028698:	83 c4 10             	add    esp,0x10
c002869b:	eb 10                	jmp    c00286ad <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002869d:	83 ec 0c             	sub    esp,0xc
c00286a0:	68 88 a3 02 c0       	push   0xc002a388
c00286a5:	e8 d3 1d ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00286aa:	83 c4 10             	add    esp,0x10
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286b4:	8d 50 01             	lea    edx,[eax+0x1]
c00286b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00286be:	90                   	nop
c00286bf:	83 c4 0c             	add    esp,0xc
c00286c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00286c4 <LinkedList<UnixFile>::getFirstElement()>:
c00286c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00286c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00286cc <LinkedList<UnixFile>::removeFirst()>:
c00286cc:	83 ec 0c             	sub    esp,0xc
c00286cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00286d5:	85 c0                	test   eax,eax
c00286d7:	75 12                	jne    c00286eb <LinkedList<UnixFile>::removeFirst()+0x1f>
c00286d9:	83 ec 0c             	sub    esp,0xc
c00286dc:	68 94 a3 02 c0       	push   0xc002a394
c00286e1:	e8 97 1d ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00286e6:	83 c4 10             	add    esp,0x10
c00286e9:	eb 7e                	jmp    c0028769 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00286eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f5:	85 c0                	test   eax,eax
c00286f7:	74 10                	je     c0028709 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00286f9:	83 ec 0c             	sub    esp,0xc
c00286fc:	68 df a3 02 c0       	push   0xc002a3df
c0028701:	e8 77 1d ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028706:	83 c4 10             	add    esp,0x10
c0028709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870d:	8b 00                	mov    eax,DWORD PTR [eax]
c002870f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028712:	85 c0                	test   eax,eax
c0028714:	75 33                	jne    c0028749 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002872b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028732:	83 f8 01             	cmp    eax,0x1
c0028735:	74 21                	je     c0028758 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028737:	83 ec 0c             	sub    esp,0xc
c002873a:	68 b8 a3 02 c0       	push   0xc002a3b8
c002873f:	e8 39 1d ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028744:	83 c4 10             	add    esp,0x10
c0028747:	eb 0f                	jmp    c0028758 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874d:	8b 00                	mov    eax,DWORD PTR [eax]
c002874f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028756:	89 10                	mov    DWORD PTR [eax],edx
c0028758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002875f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028766:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028769:	83 c4 0c             	add    esp,0xc
c002876c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002876e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002876e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028775:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028776 <DriverlessDevice::~DriverlessDevice()>:
c0028776:	ba e4 aa 02 c0       	mov    edx,0xc002aae4
c002877b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002877f:	89 10                	mov    DWORD PTR [eax],edx
c0028781:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028785:	50                   	push   eax
c0028786:	e8 41 b9 fe ff       	call   c00140cc <Device::~Device()>
c002878b:	83 c4 04             	add    esp,0x4
c002878e:	90                   	nop
c002878f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028790 <DriverlessDevice::~DriverlessDevice()>:
c0028790:	83 ec 0c             	sub    esp,0xc
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002879a:	e8 d7 ff ff ff       	call   c0028776 <DriverlessDevice::~DriverlessDevice()>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	83 ec 08             	sub    esp,0x8
c00287a5:	68 58 01 00 00       	push   0x158
c00287aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287ae:	e8 41 a5 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00287b3:	83 c4 10             	add    esp,0x10
c00287b6:	83 c4 0c             	add    esp,0xc
c00287b9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00287ba <LinkedList<Device>::addElement(Device*)>:
c00287ba:	83 ec 0c             	sub    esp,0xc
c00287bd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287c2:	75 10                	jne    c00287d4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00287c4:	83 ec 0c             	sub    esp,0xc
c00287c7:	68 5c a3 02 c0       	push   0xc002a35c
c00287cc:	e8 ac 1c ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00287d1:	83 c4 10             	add    esp,0x10
c00287d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287da:	85 c0                	test   eax,eax
c00287dc:	74 3a                	je     c0028818 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287e5:	85 c0                	test   eax,eax
c00287e7:	74 2f                	je     c0028818 <LinkedList<Device>::addElement(Device*)+0x5e>
c00287e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287f4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028802:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028816:	eb 68                	jmp    c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881c:	8b 00                	mov    eax,DWORD PTR [eax]
c002881e:	85 c0                	test   eax,eax
c0028820:	75 4e                	jne    c0028870 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028829:	85 c0                	test   eax,eax
c002882b:	75 43                	jne    c0028870 <LinkedList<Device>::addElement(Device*)+0xb6>
c002882d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028831:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028835:	89 10                	mov    DWORD PTR [eax],edx
c0028837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002883f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028857:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002885a:	85 c0                	test   eax,eax
c002885c:	74 22                	je     c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c002885e:	83 ec 0c             	sub    esp,0xc
c0028861:	68 7e a3 02 c0       	push   0xc002a37e
c0028866:	e8 12 1c ff ff       	call   c001a47d <Krnl::panic(char const*)>
c002886b:	83 c4 10             	add    esp,0x10
c002886e:	eb 10                	jmp    c0028880 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028870:	83 ec 0c             	sub    esp,0xc
c0028873:	68 88 a3 02 c0       	push   0xc002a388
c0028878:	e8 00 1c ff ff       	call   c001a47d <Krnl::panic(char const*)>
c002887d:	83 c4 10             	add    esp,0x10
c0028880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028884:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028887:	8d 50 01             	lea    edx,[eax+0x1]
c002888a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028891:	90                   	nop
c0028892:	83 c4 0c             	add    esp,0xc
c0028895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028896 <LinkedList<Device>::LinkedList()>:
c0028896:	83 ec 0c             	sub    esp,0xc
c0028899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288d9:	83 ec 0c             	sub    esp,0xc
c00288dc:	68 42 a3 02 c0       	push   0xc002a342
c00288e1:	e8 ee a4 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c00288e6:	83 c4 10             	add    esp,0x10
c00288e9:	90                   	nop
c00288ea:	83 c4 0c             	add    esp,0xc
c00288ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00288ee <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00288ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00288f6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00288f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00288fc:	85 c0                	test   eax,eax
c00288fe:	75 0e                	jne    c002890e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028904:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028907:	85 c0                	test   eax,eax
c0028909:	75 03                	jne    c002890e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002890b:	b0 01                	mov    al,0x1
c002890d:	c3                   	ret    
c002890e:	b0 00                	mov    al,0x0
c0028910:	90                   	nop
c0028911:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028912 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028912:	83 ec 0c             	sub    esp,0xc
c0028915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028919:	8b 00                	mov    eax,DWORD PTR [eax]
c002891b:	85 c0                	test   eax,eax
c002891d:	75 15                	jne    c0028934 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002891f:	83 ec 0c             	sub    esp,0xc
c0028922:	68 94 a3 02 c0       	push   0xc002a394
c0028927:	e8 51 1b ff ff       	call   c001a47d <Krnl::panic(char const*)>
c002892c:	83 c4 10             	add    esp,0x10
c002892f:	e9 88 00 00 00       	jmp    c00289bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002893b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002893e:	85 c0                	test   eax,eax
c0028940:	0f 95 c0             	setne  al
c0028943:	84 c0                	test   al,al
c0028945:	74 10                	je     c0028957 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028947:	83 ec 0c             	sub    esp,0xc
c002894a:	68 df a3 02 c0       	push   0xc002a3df
c002894f:	e8 29 1b ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028954:	83 c4 10             	add    esp,0x10
c0028957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895b:	8b 00                	mov    eax,DWORD PTR [eax]
c002895d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028960:	85 c0                	test   eax,eax
c0028962:	0f 94 c0             	sete   al
c0028965:	84 c0                	test   al,al
c0028967:	74 33                	je     c002899c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028977:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028982:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028985:	83 f8 01             	cmp    eax,0x1
c0028988:	74 21                	je     c00289ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	68 b8 a3 02 c0       	push   0xc002a3b8
c0028992:	e8 e6 1a ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028997:	83 c4 10             	add    esp,0x10
c002899a:	eb 0f                	jmp    c00289ab <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002899c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00289a2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00289a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a9:	89 10                	mov    DWORD PTR [eax],edx
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289b2:	8d 50 ff             	lea    edx,[eax-0x1]
c00289b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00289bc:	83 c4 0c             	add    esp,0xc
c00289bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00289c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289c8:	75 10                	jne    c00289da <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c00289ca:	83 ec 0c             	sub    esp,0xc
c00289cd:	68 5c a3 02 c0       	push   0xc002a35c
c00289d2:	e8 a6 1a ff ff       	call   c001a47d <Krnl::panic(char const*)>
c00289d7:	83 c4 10             	add    esp,0x10
c00289da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289de:	8b 00                	mov    eax,DWORD PTR [eax]
c00289e0:	85 c0                	test   eax,eax
c00289e2:	74 34                	je     c0028a18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289eb:	85 c0                	test   eax,eax
c00289ed:	74 29                	je     c0028a18 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00289ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289fa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00289fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a01:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a0f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a16:	eb 65                	jmp    c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a1e:	85 c0                	test   eax,eax
c0028a20:	75 4b                	jne    c0028a6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a29:	85 c0                	test   eax,eax
c0028a2b:	75 40                	jne    c0028a6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a31:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a35:	89 10                	mov    DWORD PTR [eax],edx
c0028a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a3f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a57:	85 c0                	test   eax,eax
c0028a59:	74 22                	je     c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a5b:	83 ec 0c             	sub    esp,0xc
c0028a5e:	68 7e a3 02 c0       	push   0xc002a37e
c0028a63:	e8 15 1a ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028a68:	83 c4 10             	add    esp,0x10
c0028a6b:	eb 10                	jmp    c0028a7d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028a6d:	83 ec 0c             	sub    esp,0xc
c0028a70:	68 88 a3 02 c0       	push   0xc002a388
c0028a75:	e8 03 1a ff ff       	call   c001a47d <Krnl::panic(char const*)>
c0028a7a:	83 c4 10             	add    esp,0x10
c0028a7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a84:	8d 50 01             	lea    edx,[eax+0x1]
c0028a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a8e:	90                   	nop
c0028a8f:	83 c4 0c             	add    esp,0xc
c0028a92:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028a94 <ACPI::~ACPI()>:
c0028a94:	83 ec 0c             	sub    esp,0xc
c0028a97:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0028a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa0:	89 10                	mov    DWORD PTR [eax],edx
c0028aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa6:	83 ec 0c             	sub    esp,0xc
c0028aa9:	50                   	push   eax
c0028aaa:	e8 1d b6 fe ff       	call   c00140cc <Device::~Device()>
c0028aaf:	83 c4 10             	add    esp,0x10
c0028ab2:	90                   	nop
c0028ab3:	83 c4 0c             	add    esp,0xc
c0028ab6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ab8 <ACPI::~ACPI()>:
c0028ab8:	83 ec 0c             	sub    esp,0xc
c0028abb:	83 ec 0c             	sub    esp,0xc
c0028abe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac2:	e8 cd ff ff ff       	call   c0028a94 <ACPI::~ACPI()>
c0028ac7:	83 c4 10             	add    esp,0x10
c0028aca:	83 ec 08             	sub    esp,0x8
c0028acd:	68 68 12 00 00       	push   0x1268
c0028ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ad6:	e8 19 a2 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028adb:	83 c4 10             	add    esp,0x10
c0028ade:	83 c4 0c             	add    esp,0xc
c0028ae1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028ae2 <CPU::~CPU()>:
c0028ae2:	83 ec 0c             	sub    esp,0xc
c0028ae5:	ba 4c b8 02 c0       	mov    edx,0xc002b84c
c0028aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aee:	89 10                	mov    DWORD PTR [eax],edx
c0028af0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af4:	83 ec 0c             	sub    esp,0xc
c0028af7:	50                   	push   eax
c0028af8:	e8 cf b5 fe ff       	call   c00140cc <Device::~Device()>
c0028afd:	83 c4 10             	add    esp,0x10
c0028b00:	90                   	nop
c0028b01:	83 c4 0c             	add    esp,0xc
c0028b04:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028b06 <CPU::~CPU()>:
c0028b06:	83 ec 0c             	sub    esp,0xc
c0028b09:	83 ec 0c             	sub    esp,0xc
c0028b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b10:	e8 cd ff ff ff       	call   c0028ae2 <CPU::~CPU()>
c0028b15:	83 c4 10             	add    esp,0x10
c0028b18:	83 ec 08             	sub    esp,0x8
c0028b1b:	68 98 11 00 00       	push   0x1198
c0028b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b24:	e8 cb a1 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028b29:	83 c4 10             	add    esp,0x10
c0028b2c:	83 c4 0c             	add    esp,0xc
c0028b2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028b30 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028b32 <ThreadControlBlock::ThreadControlBlock()>:
c0028b32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b36:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028b3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b41:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b4c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b57:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b62:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b6a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028b6e:	90                   	nop
c0028b6f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028b70 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b77:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028bb3:	83 ec 0c             	sub    esp,0xc
c0028bb6:	68 42 a3 02 c0       	push   0xc002a342
c0028bbb:	e8 14 a2 fe ff       	call   c0012dd4 <Dbg::kprintf(char const*, ...)>
c0028bc0:	83 c4 10             	add    esp,0x10
c0028bc3:	90                   	nop
c0028bc4:	83 c4 0c             	add    esp,0xc
c0028bc7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028bc8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028bc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028bcc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028bcf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028bd0 <Vm::_FPUState::_FPUState()>:
c0028bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028bd4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028bdb:	90                   	nop
c0028bdc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028bde <PCI::~PCI()>:
c0028bde:	83 ec 0c             	sub    esp,0xc
c0028be1:	ba d8 c8 02 c0       	mov    edx,0xc002c8d8
c0028be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bea:	89 10                	mov    DWORD PTR [eax],edx
c0028bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf0:	83 ec 0c             	sub    esp,0xc
c0028bf3:	50                   	push   eax
c0028bf4:	e8 ab ae fe ff       	call   c0013aa4 <Bus::~Bus()>
c0028bf9:	83 c4 10             	add    esp,0x10
c0028bfc:	90                   	nop
c0028bfd:	83 c4 0c             	add    esp,0xc
c0028c00:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028c02 <PCI::~PCI()>:
c0028c02:	83 ec 0c             	sub    esp,0xc
c0028c05:	83 ec 0c             	sub    esp,0xc
c0028c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c0c:	e8 cd ff ff ff       	call   c0028bde <PCI::~PCI()>
c0028c11:	83 c4 10             	add    esp,0x10
c0028c14:	83 ec 08             	sub    esp,0x8
c0028c17:	68 58 01 00 00       	push   0x158
c0028c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c20:	e8 cf a0 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028c25:	83 c4 10             	add    esp,0x10
c0028c28:	83 c4 0c             	add    esp,0xc
c0028c2b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028c2c <IDE::~IDE()>:
c0028c2c:	83 ec 0c             	sub    esp,0xc
c0028c2f:	ba 3c cb 02 c0       	mov    edx,0xc002cb3c
c0028c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c38:	89 10                	mov    DWORD PTR [eax],edx
c0028c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3e:	83 ec 0c             	sub    esp,0xc
c0028c41:	50                   	push   eax
c0028c42:	e8 75 b9 fe ff       	call   c00145bc <HardDiskController::~HardDiskController()>
c0028c47:	83 c4 10             	add    esp,0x10
c0028c4a:	90                   	nop
c0028c4b:	83 c4 0c             	add    esp,0xc
c0028c4e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028c50 <IDE::~IDE()>:
c0028c50:	83 ec 0c             	sub    esp,0xc
c0028c53:	83 ec 0c             	sub    esp,0xc
c0028c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c5a:	e8 cd ff ff ff       	call   c0028c2c <IDE::~IDE()>
c0028c5f:	83 c4 10             	add    esp,0x10
c0028c62:	83 ec 08             	sub    esp,0x8
c0028c65:	68 70 02 00 00       	push   0x270
c0028c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6e:	e8 81 a0 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028c73:	83 c4 10             	add    esp,0x10
c0028c76:	83 c4 0c             	add    esp,0xc
c0028c79:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028c7a <SATABus::~SATABus()>:
c0028c7a:	83 ec 0c             	sub    esp,0xc
c0028c7d:	ba 1c cc 02 c0       	mov    edx,0xc002cc1c
c0028c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c86:	89 10                	mov    DWORD PTR [eax],edx
c0028c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c8c:	83 ec 0c             	sub    esp,0xc
c0028c8f:	50                   	push   eax
c0028c90:	e8 27 b9 fe ff       	call   c00145bc <HardDiskController::~HardDiskController()>
c0028c95:	83 c4 10             	add    esp,0x10
c0028c98:	90                   	nop
c0028c99:	83 c4 0c             	add    esp,0xc
c0028c9c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028c9e <SATABus::~SATABus()>:
c0028c9e:	83 ec 0c             	sub    esp,0xc
c0028ca1:	83 ec 0c             	sub    esp,0xc
c0028ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ca8:	e8 cd ff ff ff       	call   c0028c7a <SATABus::~SATABus()>
c0028cad:	83 c4 10             	add    esp,0x10
c0028cb0:	83 ec 08             	sub    esp,0x8
c0028cb3:	68 64 01 00 00       	push   0x164
c0028cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cbc:	e8 33 a0 fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028cc1:	83 c4 10             	add    esp,0x10
c0028cc4:	83 c4 0c             	add    esp,0xc
c0028cc7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028cc8 <ATA::~ATA()>:
c0028cc8:	83 ec 0c             	sub    esp,0xc
c0028ccb:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c0028cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cd4:	89 10                	mov    DWORD PTR [eax],edx
c0028cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	50                   	push   eax
c0028cde:	e8 cb b9 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028ce3:	83 c4 10             	add    esp,0x10
c0028ce6:	90                   	nop
c0028ce7:	83 c4 0c             	add    esp,0xc
c0028cea:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028cec <ATA::~ATA()>:
c0028cec:	83 ec 0c             	sub    esp,0xc
c0028cef:	83 ec 0c             	sub    esp,0xc
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 cd ff ff ff       	call   c0028cc8 <ATA::~ATA()>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 ec 08             	sub    esp,0x8
c0028d01:	68 7c 01 00 00       	push   0x17c
c0028d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0a:	e8 e5 9f fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	83 c4 0c             	add    esp,0xc
c0028d15:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028d16 <ATAPI::~ATAPI()>:
c0028d16:	83 ec 0c             	sub    esp,0xc
c0028d19:	ba a0 cc 02 c0       	mov    edx,0xc002cca0
c0028d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d22:	89 10                	mov    DWORD PTR [eax],edx
c0028d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d28:	83 ec 0c             	sub    esp,0xc
c0028d2b:	50                   	push   eax
c0028d2c:	e8 7d b9 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028d31:	83 c4 10             	add    esp,0x10
c0028d34:	90                   	nop
c0028d35:	83 c4 0c             	add    esp,0xc
c0028d38:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028d3a <ATAPI::~ATAPI()>:
c0028d3a:	83 ec 0c             	sub    esp,0xc
c0028d3d:	83 ec 0c             	sub    esp,0xc
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 cd ff ff ff       	call   c0028d16 <ATAPI::~ATAPI()>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 ec 08             	sub    esp,0x8
c0028d4f:	68 80 01 00 00       	push   0x180
c0028d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d58:	e8 97 9f fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028d5d:	83 c4 10             	add    esp,0x10
c0028d60:	83 c4 0c             	add    esp,0xc
c0028d63:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028d64 <SATA::~SATA()>:
c0028d64:	83 ec 0c             	sub    esp,0xc
c0028d67:	ba 54 cd 02 c0       	mov    edx,0xc002cd54
c0028d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d70:	89 10                	mov    DWORD PTR [eax],edx
c0028d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d76:	83 ec 0c             	sub    esp,0xc
c0028d79:	50                   	push   eax
c0028d7a:	e8 2f b9 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028d7f:	83 c4 10             	add    esp,0x10
c0028d82:	90                   	nop
c0028d83:	83 c4 0c             	add    esp,0xc
c0028d86:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028d88 <SATA::~SATA()>:
c0028d88:	83 ec 0c             	sub    esp,0xc
c0028d8b:	83 ec 0c             	sub    esp,0xc
c0028d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d92:	e8 cd ff ff ff       	call   c0028d64 <SATA::~SATA()>
c0028d97:	83 c4 10             	add    esp,0x10
c0028d9a:	83 ec 08             	sub    esp,0x8
c0028d9d:	68 7c 01 00 00       	push   0x17c
c0028da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da6:	e8 49 9f fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 c4 0c             	add    esp,0xc
c0028db1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028db2 <SATAPI::~SATAPI()>:
c0028db2:	83 ec 0c             	sub    esp,0xc
c0028db5:	ba 30 ce 02 c0       	mov    edx,0xc002ce30
c0028dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dbe:	89 10                	mov    DWORD PTR [eax],edx
c0028dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc4:	83 ec 0c             	sub    esp,0xc
c0028dc7:	50                   	push   eax
c0028dc8:	e8 e1 b8 fe ff       	call   c00146ae <PhysicalDisk::~PhysicalDisk()>
c0028dcd:	83 c4 10             	add    esp,0x10
c0028dd0:	90                   	nop
c0028dd1:	83 c4 0c             	add    esp,0xc
c0028dd4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028dd6 <SATAPI::~SATAPI()>:
c0028dd6:	83 ec 0c             	sub    esp,0xc
c0028dd9:	83 ec 0c             	sub    esp,0xc
c0028ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028de0:	e8 cd ff ff ff       	call   c0028db2 <SATAPI::~SATAPI()>
c0028de5:	83 c4 10             	add    esp,0x10
c0028de8:	83 ec 08             	sub    esp,0x8
c0028deb:	68 80 01 00 00       	push   0x180
c0028df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df4:	e8 fb 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028df9:	83 c4 10             	add    esp,0x10
c0028dfc:	83 c4 0c             	add    esp,0xc
c0028dff:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028e00 <AVX::~AVX()>:
c0028e00:	83 ec 0c             	sub    esp,0xc
c0028e03:	ba 70 ce 02 c0       	mov    edx,0xc002ce70
c0028e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0c:	89 10                	mov    DWORD PTR [eax],edx
c0028e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e12:	83 ec 0c             	sub    esp,0xc
c0028e15:	50                   	push   eax
c0028e16:	e8 17 b9 fe ff       	call   c0014732 <FPU::~FPU()>
c0028e1b:	83 c4 10             	add    esp,0x10
c0028e1e:	90                   	nop
c0028e1f:	83 c4 0c             	add    esp,0xc
c0028e22:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028e24 <AVX::~AVX()>:
c0028e24:	83 ec 0c             	sub    esp,0xc
c0028e27:	83 ec 0c             	sub    esp,0xc
c0028e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2e:	e8 cd ff ff ff       	call   c0028e00 <AVX::~AVX()>
c0028e33:	83 c4 10             	add    esp,0x10
c0028e36:	83 ec 08             	sub    esp,0x8
c0028e39:	68 58 01 00 00       	push   0x158
c0028e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e42:	e8 ad 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028e47:	83 c4 10             	add    esp,0x10
c0028e4a:	83 c4 0c             	add    esp,0xc
c0028e4d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028e4e <MMX::~MMX()>:
c0028e4e:	83 ec 0c             	sub    esp,0xc
c0028e51:	ba b0 ce 02 c0       	mov    edx,0xc002ceb0
c0028e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5a:	89 10                	mov    DWORD PTR [eax],edx
c0028e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	50                   	push   eax
c0028e64:	e8 c9 b8 fe ff       	call   c0014732 <FPU::~FPU()>
c0028e69:	83 c4 10             	add    esp,0x10
c0028e6c:	90                   	nop
c0028e6d:	83 c4 0c             	add    esp,0xc
c0028e70:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028e72 <MMX::~MMX()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	83 ec 0c             	sub    esp,0xc
c0028e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7c:	e8 cd ff ff ff       	call   c0028e4e <MMX::~MMX()>
c0028e81:	83 c4 10             	add    esp,0x10
c0028e84:	83 ec 08             	sub    esp,0x8
c0028e87:	68 58 01 00 00       	push   0x158
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 5f 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 c4 0c             	add    esp,0xc
c0028e9b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028e9c <SSE::~SSE()>:
c0028e9c:	83 ec 0c             	sub    esp,0xc
c0028e9f:	ba f0 ce 02 c0       	mov    edx,0xc002cef0
c0028ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea8:	89 10                	mov    DWORD PTR [eax],edx
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	83 ec 0c             	sub    esp,0xc
c0028eb1:	50                   	push   eax
c0028eb2:	e8 7b b8 fe ff       	call   c0014732 <FPU::~FPU()>
c0028eb7:	83 c4 10             	add    esp,0x10
c0028eba:	90                   	nop
c0028ebb:	83 c4 0c             	add    esp,0xc
c0028ebe:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028ec0 <SSE::~SSE()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	83 ec 0c             	sub    esp,0xc
c0028ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eca:	e8 cd ff ff ff       	call   c0028e9c <SSE::~SSE()>
c0028ecf:	83 c4 10             	add    esp,0x10
c0028ed2:	83 ec 08             	sub    esp,0x8
c0028ed5:	68 58 01 00 00       	push   0x158
c0028eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ede:	e8 11 9e fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	83 c4 0c             	add    esp,0xc
c0028ee9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028eea <x87::~x87()>:
c0028eea:	83 ec 0c             	sub    esp,0xc
c0028eed:	ba 30 cf 02 c0       	mov    edx,0xc002cf30
c0028ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef6:	89 10                	mov    DWORD PTR [eax],edx
c0028ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efc:	83 ec 0c             	sub    esp,0xc
c0028eff:	50                   	push   eax
c0028f00:	e8 2d b8 fe ff       	call   c0014732 <FPU::~FPU()>
c0028f05:	83 c4 10             	add    esp,0x10
c0028f08:	90                   	nop
c0028f09:	83 c4 0c             	add    esp,0xc
c0028f0c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028f0e <x87::~x87()>:
c0028f0e:	83 ec 0c             	sub    esp,0xc
c0028f11:	83 ec 0c             	sub    esp,0xc
c0028f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f18:	e8 cd ff ff ff       	call   c0028eea <x87::~x87()>
c0028f1d:	83 c4 10             	add    esp,0x10
c0028f20:	83 ec 08             	sub    esp,0x8
c0028f23:	68 58 01 00 00       	push   0x158
c0028f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2c:	e8 c3 9d fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	83 c4 0c             	add    esp,0xc
c0028f37:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028f38 <IOAPIC::~IOAPIC()>:
c0028f38:	83 ec 0c             	sub    esp,0xc
c0028f3b:	ba 88 d0 02 c0       	mov    edx,0xc002d088
c0028f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f44:	89 10                	mov    DWORD PTR [eax],edx
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	83 ec 0c             	sub    esp,0xc
c0028f4d:	50                   	push   eax
c0028f4e:	e8 79 b1 fe ff       	call   c00140cc <Device::~Device()>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	90                   	nop
c0028f57:	83 c4 0c             	add    esp,0xc
c0028f5a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028f5c <IOAPIC::~IOAPIC()>:
c0028f5c:	83 ec 0c             	sub    esp,0xc
c0028f5f:	83 ec 0c             	sub    esp,0xc
c0028f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f66:	e8 cd ff ff ff       	call   c0028f38 <IOAPIC::~IOAPIC()>
c0028f6b:	83 c4 10             	add    esp,0x10
c0028f6e:	83 ec 08             	sub    esp,0x8
c0028f71:	68 68 01 00 00       	push   0x168
c0028f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7a:	e8 75 9d fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	83 c4 0c             	add    esp,0xc
c0028f85:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028f86 <APIC::~APIC()>:
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	ba 40 d0 02 c0       	mov    edx,0xc002d040
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	89 10                	mov    DWORD PTR [eax],edx
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	83 ec 0c             	sub    esp,0xc
c0028f9b:	50                   	push   eax
c0028f9c:	e8 5b bc fe ff       	call   c0014bfc <InterruptController::~InterruptController()>
c0028fa1:	83 c4 10             	add    esp,0x10
c0028fa4:	90                   	nop
c0028fa5:	83 c4 0c             	add    esp,0xc
c0028fa8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028faa <APIC::~APIC()>:
c0028faa:	83 ec 0c             	sub    esp,0xc
c0028fad:	83 ec 0c             	sub    esp,0xc
c0028fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb4:	e8 cd ff ff ff       	call   c0028f86 <APIC::~APIC()>
c0028fb9:	83 c4 10             	add    esp,0x10
c0028fbc:	83 ec 08             	sub    esp,0x8
c0028fbf:	68 58 21 00 00       	push   0x2158
c0028fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc8:	e8 27 9d fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	83 c4 0c             	add    esp,0xc
c0028fd3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028fd4 <PIC::~PIC()>:
c0028fd4:	83 ec 0c             	sub    esp,0xc
c0028fd7:	ba d8 d0 02 c0       	mov    edx,0xc002d0d8
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	89 10                	mov    DWORD PTR [eax],edx
c0028fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe6:	83 ec 0c             	sub    esp,0xc
c0028fe9:	50                   	push   eax
c0028fea:	e8 0d bc fe ff       	call   c0014bfc <InterruptController::~InterruptController()>
c0028fef:	83 c4 10             	add    esp,0x10
c0028ff2:	90                   	nop
c0028ff3:	83 c4 0c             	add    esp,0xc
c0028ff6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028ff8 <PIC::~PIC()>:
c0028ff8:	83 ec 0c             	sub    esp,0xc
c0028ffb:	83 ec 0c             	sub    esp,0xc
c0028ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029002:	e8 cd ff ff ff       	call   c0028fd4 <PIC::~PIC()>
c0029007:	83 c4 10             	add    esp,0x10
c002900a:	83 ec 08             	sub    esp,0x8
c002900d:	68 58 21 00 00       	push   0x2158
c0029012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029016:	e8 d9 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c002901b:	83 c4 10             	add    esp,0x10
c002901e:	83 c4 0c             	add    esp,0xc
c0029021:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029022 <APICTimer::~APICTimer()>:
c0029022:	83 ec 0c             	sub    esp,0xc
c0029025:	ba 2c d1 02 c0       	mov    edx,0xc002d12c
c002902a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902e:	89 10                	mov    DWORD PTR [eax],edx
c0029030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029034:	83 ec 0c             	sub    esp,0xc
c0029037:	50                   	push   eax
c0029038:	e8 0f db fe ff       	call   c0016b4c <Timer::~Timer()>
c002903d:	83 c4 10             	add    esp,0x10
c0029040:	90                   	nop
c0029041:	83 c4 0c             	add    esp,0xc
c0029044:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029046 <APICTimer::~APICTimer()>:
c0029046:	83 ec 0c             	sub    esp,0xc
c0029049:	83 ec 0c             	sub    esp,0xc
c002904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029050:	e8 cd ff ff ff       	call   c0029022 <APICTimer::~APICTimer()>
c0029055:	83 c4 10             	add    esp,0x10
c0029058:	83 ec 08             	sub    esp,0x8
c002905b:	68 60 01 00 00       	push   0x160
c0029060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029064:	e8 8b 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c0029069:	83 c4 10             	add    esp,0x10
c002906c:	83 c4 0c             	add    esp,0xc
c002906f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029070 <PIT::~PIT()>:
c0029070:	83 ec 0c             	sub    esp,0xc
c0029073:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c0029078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907c:	89 10                	mov    DWORD PTR [eax],edx
c002907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029082:	83 ec 0c             	sub    esp,0xc
c0029085:	50                   	push   eax
c0029086:	e8 c1 da fe ff       	call   c0016b4c <Timer::~Timer()>
c002908b:	83 c4 10             	add    esp,0x10
c002908e:	90                   	nop
c002908f:	83 c4 0c             	add    esp,0xc
c0029092:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029094 <PIT::~PIT()>:
c0029094:	83 ec 0c             	sub    esp,0xc
c0029097:	83 ec 0c             	sub    esp,0xc
c002909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909e:	e8 cd ff ff ff       	call   c0029070 <PIT::~PIT()>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	83 ec 08             	sub    esp,0x8
c00290a9:	68 5c 01 00 00       	push   0x15c
c00290ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b2:	e8 3d 9c fe ff       	call   c0012cf4 <operator delete(void*, unsigned long)>
c00290b7:	83 c4 10             	add    esp,0x10
c00290ba:	83 c4 0c             	add    esp,0xc
c00290bd:	c3                   	ret    
