
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 13 87 02 00       	call   c0028738 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e2 92 02 c0       	mov    ebx,0xc00292e2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 92 02 c0    	cmp    ebx,0xc00292f0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 da 02 c0       	mov    eax,0xc002da98
c0000049:	3d 98 da 02 c0       	cmp    eax,0xc002da98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 da 02 c0       	push   0xc002da98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 da 02 c0       	mov    eax,0xc002da98
c0000075:	2d 98 da 02 c0       	sub    eax,0xc002da98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 da 02 c0       	push   0xc002da98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0c8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 92 02 c0       	mov    ebx,0xc00292f8
c00000bb:	81 eb f4 92 02 c0    	sub    ebx,0xc00292f4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 92 02 c0       	mov    esi,0xc00292f4
c00000ca:	a1 cc e0 02 c0       	mov    eax,ds:0xc002e0cc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc e0 02 c0       	mov    ds:0xc002e0cc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc e0 02 c0       	mov    eax,ds:0xc002e0cc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 da 02 c0       	push   0xc002da98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0c8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 e0 02 c0       	push   0xc002e0d0
c000012c:	68 98 da 02 c0       	push   0xc002da98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 eb d6 01 00       	call   c001da86 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 4a 2a 01 00       	call   c0012dfd <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 c9 d6 01 00       	call   c001da86 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 17 db 01 00       	call   c001def3 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 c5 e0 01 00       	call   c001e4aa <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 e5 02 c0 	lgdtd  ds:0xc002e510
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 28 47 01 00       	call   c0014d01 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 e0 02 c0       	mov    ds:0xc002e0e8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0e8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 00 93 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d00],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 00 93 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d00],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 00 93 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d00],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 00 93 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d00],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e100
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1efc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1efc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 e1 02 c0    	mov    DWORD PTR ds:0xc002e100,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c e1 02 c0    	cmp    DWORD PTR ds:0xc002e12c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e13c
c0000e60:	c7 42 0c 34 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e134
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 e1 02 c0 02 	test   BYTE PTR ds:0xc002e100,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e100
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1efc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1efc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 e1 02 c0 	lea    edx,[eax*8-0x3ffd1ecc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e140
c00011e2:	81 fb 34 e1 02 c0    	cmp    ebx,0xc002e134
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 e1 02 c0       	cmp    eax,0xc002e134
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 e1 02 c0    	cmp    DWORD PTR ds:0xc002e130,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c000121e:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0001223:	a3 30 e1 02 c0       	mov    ds:0xc002e130,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e134
c0001231:	c7 40 0c 34 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e134
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e134
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 e0 02 c0 	lea    ebp,[edx*4-0x3ffd1f08]
c0001282:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1f00]
c000129d:	8b 14 95 00 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f00]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1bcc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 e1 02 c0 	lea    eax,[eax*8-0x3ffd1ecc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ecx
c0001357:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c000135d:	c7 41 08 34 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e134
c0001364:	c7 41 0c 34 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e134
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1ed4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bcc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bcc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c e1 02 c0 	lea    edx,[eax*4-0x3ffd1ed4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1bcc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edi
c000142a:	89 3d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,edi
c0001430:	c7 47 08 34 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e134
c0001437:	c7 47 0c 34 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e134
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 e1 02 c0       	mov    edx,0xc002e100
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e100,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e454
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e454,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 e4 02 c0    	mov    DWORD PTR ds:0xc002e454,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c e1 02 c0    	cmp    DWORD PTR ds:0xc002e12c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c e1 02 c0    	mov    DWORD PTR ds:0xc002e12c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e100,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c e4 02 c0    	push   DWORD PTR ds:0xc002e45c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e100,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c e4 02 c0       	mov    eax,ds:0xc002e45c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e12c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c e1 02 c0       	mov    eax,ds:0xc002e12c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1efc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 e1 02 c0       	mov    eax,0xc002e134
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c e4 02 c0       	cmp    eax,0xc002e42c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 e4 02 c0       	mov    eax,ds:0xc002e468
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e450
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e464
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e474
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 04 94 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6bfc]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 e4 02 c0    	mov    DWORD PTR ds:0xc002e444,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 e4 02 c0    	mov    DWORD PTR ds:0xc002e448,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c e4 02 c0    	mov    DWORD PTR ds:0xc002e44c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e454,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 76 f2 01 00       	jmp    c0020ea2 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 a7 f2 01 00       	jmp    c0020ee9 <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 cf f2 01 00       	jmp    c0020f30 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 58 4b 02 00       	call   c0026a9c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 20 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6ae0]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 20 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6ae0]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 40 95 02 c0       	mov    edx,0xc0029540
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 20 c9 02 c0       	mov    edx,0xc002c920
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 4c 95 02 c0       	mov    edx,0xc002954c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1b60]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 e4 02 c0    	mov    ax,ds:0xc002e480
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 e4 02 c0    	mov    ds:0xc002e480,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 55 39 02 00       	call   c0026a9c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 52 95 02 c0       	mov    eax,0xc0029552
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad a0 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b60]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 5b 95 02 c0       	mov    eax,0xc002955b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 20 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6ae0]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 20 23 02 00       	call   c0026a9c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 30 95 02 c0       	mov    edx,0xc0029530
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 20 94 02 c0       	mov    edx,0xc0029420
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b60]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b60],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 e7 0c 02 00       	call   c0026a9c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 cd 0c 02 00       	call   c0026a9c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 77 94 02 c0       	mov    eax,0xc0029477
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 70 94 02 c0       	mov    eax,0xc0029470
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b60]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 60 94 02 c0       	mov    esi,0xc0029460
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 10 f4 01 00       	call   c0026a9c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 40 95 02 c0       	mov    edx,0xc0029540
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 40 94 02 c0       	mov    edx,0xc0029440
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 50 94 02 c0       	mov    edx,0xc0029450
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 62 95 02 c0       	mov    edx,0xc0029562
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 6e 95 02 c0       	mov    edx,0xc002956e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 82 95 02 c0       	mov    edx,0xc0029582
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c a0 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc00298a0
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 a0 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc00298a0
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 a0 96 02 c0       	mov    eax,0xc00296a0
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 e0 95 02 c0       	mov    eax,0xc00295e0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 a0 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a60]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 64 fd 01 00       	call   c002856f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 27 fd 01 00       	call   c0028551 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 fb fc 01 00       	call   c002856f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 ae f3 01 00       	call   c0027c74 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 28 fe 01 00       	call   c0028700 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 75 fc 01 00       	call   c002856f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 b7 fb 01 00       	call   c002856f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 84 fb 01 00       	call   c0028551 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 71 fa 01 00       	call   c002856f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 39 fa 01 00       	call   c0028551 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 a0 99 02 c0       	mov    eax,0xc00299a0
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 45 f8 01 00       	call   c002856f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 0a f8 01 00       	call   c0028551 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 00 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6200]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 1a f5 01 00       	call   c0028303 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 98 ee 01 00       	call   c0027ca0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 54 f7 01 00       	call   c0028573 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 42 f8 01 00       	call   c0028697 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 2c ee 01 00       	call   c0027ca0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 d7 f6 01 00       	call   c002856d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 b8 f6 01 00       	call   c0028571 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 46 f8 01 00       	call   c0028720 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 f8 f3 01 00       	call   c0028303 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 76 ed 01 00       	call   c0027ca0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 32 f6 01 00       	call   c0028573 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 20 f7 01 00       	call   c0028697 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 0a ed 01 00       	call   c0027ca0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 b5 f5 01 00       	call   c002856d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 95 f5 01 00       	call   c0028571 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 22 f7 01 00       	call   c0028720 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 d0 f4 01 00       	call   c002856f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 8e f4 01 00       	call   c0028551 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 76 f4 01 00       	call   c002856f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 e8 f1 01 00       	call   c0028303 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ea e4 01 00       	call   c0027623 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 4d eb 01 00       	call   c0027ca0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 9f f1 01 00       	call   c0028303 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 a5 e4 01 00       	call   c0027623 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 74 f1 01 00       	call   c0028303 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 c4 f3 01 00       	call   c002856d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 a1 ea 01 00       	call   c0027c74 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 1b f5 01 00       	call   c0028700 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 4a f3 01 00       	call   c0028551 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 45 ea 01 00       	call   c0027c74 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 c3 f0 01 00       	call   c0028303 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 46 ea 01 00       	call   c0027ca0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 98 f0 01 00       	call   c0028303 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 ff ec 01 00       	call   c0027f84 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 7e e3 01 00       	call   c0027623 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 de dc 01 00       	call   c0026fb8 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 b5 f3 01 00       	call   c0028697 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 9e e9 01 00       	call   c0027ca0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 85 f3 01 00       	call   c0028697 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 f7 e2 01 00       	call   c0027623 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 30 f2 01 00       	call   c0028573 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 18 ec 01 00       	call   c0027f84 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 9e e2 01 00       	call   c0027623 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 84 f3 01 00       	call   c0028720 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 5e ef 01 00       	call   c0028303 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 b5 e8 01 00       	call   c0027c74 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 94 f1 01 00       	call   c002856f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 2d e2 01 00       	call   c0027623 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 59 e8 01 00       	call   c0027c74 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 f3 f2 01 00       	call   c0028720 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 ac ee 01 00       	call   c0028303 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 29 e8 01 00       	call   c0027ca0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 7c ee 01 00       	call   c0028303 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 82 e1 01 00       	call   c0027623 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 52 ee 01 00       	call   c0028303 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 a4 f0 01 00       	call   c002856f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 7b e7 01 00       	call   c0027c74 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 f5 f1 01 00       	call   c0028700 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 24 f0 01 00       	call   c0028551 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 1e e7 01 00       	call   c0027c74 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 9c ed 01 00       	call   c0028303 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 1f e7 01 00       	call   c0027ca0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 71 ed 01 00       	call   c0028303 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 d8 e9 01 00       	call   c0027f84 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 57 e0 01 00       	call   c0027623 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 a7 d9 01 00       	call   c0026fb8 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 7e f0 01 00       	call   c0028697 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 67 e6 01 00       	call   c0027ca0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 4e f0 01 00       	call   c0028697 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 c0 df 01 00       	call   c0027623 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 f9 ee 01 00       	call   c0028573 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 e0 e8 01 00       	call   c0027f84 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 5f df 01 00       	call   c0027623 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 45 f0 01 00       	call   c0028720 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 1f ec 01 00       	call   c0028303 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 76 e5 01 00       	call   c0027c74 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 55 ee 01 00       	call   c002856f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 ee de 01 00       	call   c0027623 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 1a e5 01 00       	call   c0027c74 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 8f eb 01 00       	call   c0028303 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 95 de 01 00       	call   c0027623 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 60 9e 02 c0       	mov    eax,0xc0029e60
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 74 9e 02 c0       	mov    eax,0xc0029e74
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 0a ea 01 00       	call   c0028303 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 88 e3 01 00       	call   c0027ca0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 1a d6 01 00       	call   c0026fb8 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 f1 ec 01 00       	call   c0028697 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 da e2 01 00       	call   c0027ca0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 bd ec 01 00       	call   c0028697 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 2f dc 01 00       	call   c0027623 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 8f ec 01 00       	call   c0028697 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 7e e2 01 00       	call   c0027ca0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 e7 db 01 00       	call   c0027623 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 08 d5 01 00       	call   c0026fb8 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 df eb 01 00       	call   c0028697 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 c8 e1 01 00       	call   c0027ca0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 ab eb 01 00       	call   c0028697 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 1d db 01 00       	call   c0027623 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 7d eb 01 00       	call   c0028697 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 6c e1 01 00       	call   c0027ca0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 d5 da 01 00       	call   c0027623 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 b3 da 01 00       	call   c0027623 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 8f d3 01 00       	call   c0026fb8 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 66 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 4f e0 01 00       	call   c0027ca0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 32 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 a4 d9 01 00       	call   c0027623 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 04 ea 01 00       	call   c0028697 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 ed df 01 00       	call   c0027ca0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 56 d9 01 00       	call   c0027623 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 b6 e9 01 00       	call   c0028697 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 9f df 01 00       	call   c0027ca0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 08 d9 01 00       	call   c0027623 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 1d d2 01 00       	call   c0026fb8 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 f4 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 dd de 01 00       	call   c0027ca0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 c4 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 36 d8 01 00       	call   c0027623 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 96 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 7f de 01 00       	call   c0027ca0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 e8 d7 01 00       	call   c0027623 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 48 e8 01 00       	call   c0028697 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 31 de 01 00       	call   c0027ca0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 9a d7 01 00       	call   c0027623 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 6e d7 01 00       	call   c0027623 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 cb dd 01 00       	call   c0027ca0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 87 e6 01 00       	call   c0028573 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 16 d7 01 00       	call   c0027623 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 73 dd 01 00       	call   c0027ca0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 2f e6 01 00       	call   c0028573 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 a9 cf 01 00       	call   c0026fb8 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 80 e6 01 00       	call   c0028697 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 69 dc 01 00       	call   c0027ca0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 4c e6 01 00       	call   c0028697 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 be d5 01 00       	call   c0027623 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 1e e6 01 00       	call   c0028697 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 07 dc 01 00       	call   c0027ca0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 70 d5 01 00       	call   c0027623 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 d0 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 b9 db 01 00       	call   c0027ca0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 22 d5 01 00       	call   c0027623 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 82 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 6b db 01 00       	call   c0027ca0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 d4 d4 01 00       	call   c0027623 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 34 e5 01 00       	call   c0028697 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 1d db 01 00       	call   c0027ca0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 86 d4 01 00       	call   c0027623 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 88 cd 01 00       	call   c0026fb8 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 5f e4 01 00       	call   c0028697 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 48 da 01 00       	call   c0027ca0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 2f e4 01 00       	call   c0028697 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 a1 d3 01 00       	call   c0027623 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 01 e4 01 00       	call   c0028697 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ea d9 01 00       	call   c0027ca0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 53 d3 01 00       	call   c0027623 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 b3 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 9c d9 01 00       	call   c0027ca0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 05 d3 01 00       	call   c0027623 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 65 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 4e d9 01 00       	call   c0027ca0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 b7 d2 01 00       	call   c0027623 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 17 e3 01 00       	call   c0028697 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 00 d9 01 00       	call   c0027ca0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 69 d2 01 00       	call   c0027623 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 3d d2 01 00       	call   c0027623 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 9a d8 01 00       	call   c0027ca0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 56 e1 01 00       	call   c0028573 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 e5 d1 01 00       	call   c0027623 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 42 d8 01 00       	call   c0027ca0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 fe e0 01 00       	call   c0028573 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 8c d1 01 00       	call   c0027623 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 e9 d7 01 00       	call   c0027ca0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 a5 e0 01 00       	call   c0028573 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 33 d1 01 00       	call   c0027623 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 90 d7 01 00       	call   c0027ca0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 4c e0 01 00       	call   c0028573 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 aa c9 01 00       	call   c0026fb8 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 81 e0 01 00       	call   c0028697 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 6a d6 01 00       	call   c0027ca0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 4d e0 01 00       	call   c0028697 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 bf cf 01 00       	call   c0027623 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 1f e0 01 00       	call   c0028697 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 08 d6 01 00       	call   c0027ca0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 71 cf 01 00       	call   c0027623 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 d1 df 01 00       	call   c0028697 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 ba d5 01 00       	call   c0027ca0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 23 cf 01 00       	call   c0027623 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 83 df 01 00       	call   c0028697 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 6c d5 01 00       	call   c0027ca0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 d5 ce 01 00       	call   c0027623 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 35 df 01 00       	call   c0028697 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 1e d5 01 00       	call   c0027ca0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 87 ce 01 00       	call   c0027623 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 e7 de 01 00       	call   c0028697 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 d0 d4 01 00       	call   c0027ca0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 36 ce 01 00       	call   c0027623 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 96 de 01 00       	call   c0028697 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 7f d4 01 00       	call   c0027ca0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 e8 cd 01 00       	call   c0027623 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 e2 c6 01 00       	call   c0026fb8 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 b9 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 a2 d3 01 00       	call   c0027ca0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 82 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 f4 cc 01 00       	call   c0027623 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 54 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 3d d3 01 00       	call   c0027ca0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 a6 cc 01 00       	call   c0027623 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 06 dd 01 00       	call   c0028697 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 ef d2 01 00       	call   c0027ca0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 58 cc 01 00       	call   c0027623 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 b8 dc 01 00       	call   c0028697 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 a1 d2 01 00       	call   c0027ca0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 0a cc 01 00       	call   c0027623 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 6a dc 01 00       	call   c0028697 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 53 d2 01 00       	call   c0027ca0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 bc cb 01 00       	call   c0027623 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 1c dc 01 00       	call   c0028697 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 05 d2 01 00       	call   c0027ca0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 6b cb 01 00       	call   c0027623 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 cb db 01 00       	call   c0028697 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 b4 d1 01 00       	call   c0027ca0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 23 cb 01 00       	call   c0027623 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 fc ca 01 00       	call   c0027623 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 5a d1 01 00       	call   c0027ca0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 16 da 01 00       	call   c0028573 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 a5 ca 01 00       	call   c0027623 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 03 d1 01 00       	call   c0027ca0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 bf d9 01 00       	call   c0028573 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 4d ca 01 00       	call   c0027623 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 ab d0 01 00       	call   c0027ca0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 67 d9 01 00       	call   c0028573 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 f5 c9 01 00       	call   c0027623 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 53 d0 01 00       	call   c0027ca0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 0f d9 01 00       	call   c0028573 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 9d c9 01 00       	call   c0027623 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 fb cf 01 00       	call   c0027ca0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 b7 d8 01 00       	call   c0028573 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 4b c9 01 00       	call   c0027623 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 a9 cf 01 00       	call   c0027ca0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 65 d8 01 00       	call   c0028573 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 79 c1 01 00       	call   c0026fb8 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 50 d8 01 00       	call   c0028697 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 39 ce 01 00       	call   c0027ca0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 20 d8 01 00       	call   c0028697 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 92 c7 01 00       	call   c0027623 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 a4 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd615c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 c6 d7 01 00       	call   c0028697 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 af cd 01 00       	call   c0027ca0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 1a c7 01 00       	call   c0027623 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 67 d7 01 00       	call   c0028697 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 50 cd 01 00       	call   c0027ca0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 bb c6 01 00       	call   c0027623 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 08 d7 01 00       	call   c0028697 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 f1 cc 01 00       	call   c0027ca0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 5c c6 01 00       	call   c0027623 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 a9 d6 01 00       	call   c0028697 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 92 cc 01 00       	call   c0027ca0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 fd c5 01 00       	call   c0027623 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 4a d6 01 00       	call   c0028697 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 33 cc 01 00       	call   c0027ca0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 9e c5 01 00       	call   c0027623 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 eb d5 01 00       	call   c0028697 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 d4 cb 01 00       	call   c0027ca0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 3f c5 01 00       	call   c0027623 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 8c d5 01 00       	call   c0028697 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 75 cb 01 00       	call   c0027ca0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 e0 c4 01 00       	call   c0027623 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 2d d5 01 00       	call   c0028697 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 16 cb 01 00       	call   c0027ca0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 81 c4 01 00       	call   c0027623 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 8b bd 01 00       	call   c0026fb8 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 62 d4 01 00       	call   c0028697 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 4b ca 01 00       	call   c0027ca0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 32 d4 01 00       	call   c0028697 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 a4 c3 01 00       	call   c0027623 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 c0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6140]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 d7 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 c0 c9 01 00       	call   c0027ca0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 2b c3 01 00       	call   c0027623 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 77 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 60 c9 01 00       	call   c0027ca0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 cb c2 01 00       	call   c0027623 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 17 d3 01 00       	call   c0028697 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 00 c9 01 00       	call   c0027ca0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 6b c2 01 00       	call   c0027623 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 b7 d2 01 00       	call   c0028697 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 a0 c8 01 00       	call   c0027ca0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 0b c2 01 00       	call   c0027623 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 57 d2 01 00       	call   c0028697 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 40 c8 01 00       	call   c0027ca0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 ab c1 01 00       	call   c0027623 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 f7 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 e0 c7 01 00       	call   c0027ca0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 4b c1 01 00       	call   c0027623 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 97 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 80 c7 01 00       	call   c0027ca0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 eb c0 01 00       	call   c0027623 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 37 d1 01 00       	call   c0028697 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 20 c7 01 00       	call   c0027ca0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 8b c0 01 00       	call   c0027623 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 dc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6124]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 30 c0 01 00       	call   c0027623 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 8d c6 01 00       	call   c0027ca0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 49 cf 01 00       	call   c0028573 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 d3 bf 01 00       	call   c0027623 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 30 c6 01 00       	call   c0027ca0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 ec ce 01 00       	call   c0028573 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 76 bf 01 00       	call   c0027623 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 d3 c5 01 00       	call   c0027ca0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 8f ce 01 00       	call   c0028573 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 19 bf 01 00       	call   c0027623 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 76 c5 01 00       	call   c0027ca0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 32 ce 01 00       	call   c0028573 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 bc be 01 00       	call   c0027623 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 19 c5 01 00       	call   c0027ca0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 d5 cd 01 00       	call   c0028573 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 5f be 01 00       	call   c0027623 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 bc c4 01 00       	call   c0027ca0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 78 cd 01 00       	call   c0028573 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 02 be 01 00       	call   c0027623 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 5f c4 01 00       	call   c0027ca0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 1b cd 01 00       	call   c0028573 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 a5 bd 01 00       	call   c0027623 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 02 c4 01 00       	call   c0027ca0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 be cc 01 00       	call   c0028573 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 ba c3 01 00       	call   c0027ca0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 2a ce 01 00       	jmp    c0028720 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 9c ca 01 00       	call   c002856f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 5a ca 01 00       	call   c0028551 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 f1 c7 01 00       	call   c0028303 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 f2 ba 01 00       	call   c0027623 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 c1 c7 01 00       	call   c0028303 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 28 c4 01 00       	call   c0027f84 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 c7 c9 01 00       	call   c0028551 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 ca c9 01 00       	call   c002856f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 9d c9 01 00       	call   c002856f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 96 c3 01 00       	call   c0027f84 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 18 cb 01 00       	call   c0028720 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 f3 ca 01 00       	call   c0028720 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 cd c6 01 00       	call   c0028303 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 24 c0 01 00       	call   c0027c74 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 03 c9 01 00       	call   c002856f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 9c b9 01 00       	call   c0027623 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 c0 bf 01 00       	call   c0027c74 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 5a ca 01 00       	call   c0028720 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 9a c2 01 00       	call   c0027f84 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 17 b9 01 00       	call   c0027623 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 43 c5 01 00       	call   c0028303 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 43 b8 01 00       	call   c0027623 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 23 b8 01 00       	call   c0027623 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 f3 c4 01 00       	call   c0028303 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 43 c7 01 00       	call   c002856d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 22 be 01 00       	call   c0027c74 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 9c c8 01 00       	call   c0028700 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 cb c6 01 00       	call   c0028551 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 c9 bd 01 00       	call   c0027c74 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 47 c4 01 00       	call   c0028303 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 ca bd 01 00       	call   c0027ca0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 1c c4 01 00       	call   c0028303 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 83 c0 01 00       	call   c0027f84 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 02 b7 01 00       	call   c0027623 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 cc c3 01 00       	call   c0028303 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 18 c6 01 00       	call   c002856f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 0d bd 01 00       	call   c0027ca0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 df bc 01 00       	call   c0027ca0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 18 c3 01 00       	call   c0028303 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 7c bf 01 00       	call   c0027f84 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 44 bf 01 00       	call   c0027f84 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 c3 b5 01 00       	call   c0027623 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 a8 c6 01 00       	call   c0028720 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 82 c2 01 00       	call   c0028303 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 d9 bb 01 00       	call   c0027c74 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 b8 c4 01 00       	call   c002856f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 50 b5 01 00       	call   c0027623 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 74 bb 01 00       	call   c0027c74 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 0e c6 01 00       	call   c0028720 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 d7 c3 01 00       	call   c002856f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 95 c3 01 00       	call   c0028551 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 2c c1 01 00       	call   c0028303 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 2d b4 01 00       	call   c0027623 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 fc c0 01 00       	call   c0028303 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 63 bd 01 00       	call   c0027f84 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 02 c3 01 00       	call   c0028551 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 05 c3 01 00       	call   c002856f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 d8 c2 01 00       	call   c002856f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 d1 bc 01 00       	call   c0027f84 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 53 c4 01 00       	call   c0028720 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 2e c4 01 00       	call   c0028720 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 08 c0 01 00       	call   c0028303 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 5f b9 01 00       	call   c0027c74 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 3e c2 01 00       	call   c002856f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 d7 b2 01 00       	call   c0027623 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 fb b8 01 00       	call   c0027c74 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 95 c3 01 00       	call   c0028720 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 d5 bb 01 00       	call   c0027f84 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 52 b2 01 00       	call   c0027623 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 7d be 01 00       	call   c0028303 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 7d b1 01 00       	call   c0027623 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 5d b1 01 00       	call   c0027623 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 2d be 01 00       	call   c0028303 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 7d c0 01 00       	call   c002856d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 5b b7 01 00       	call   c0027c74 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 d5 c1 01 00       	call   c0028700 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 04 c0 01 00       	call   c0028551 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 01 b7 01 00       	call   c0027c74 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 7f bd 01 00       	call   c0028303 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 02 b7 01 00       	call   c0027ca0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 54 bd 01 00       	call   c0028303 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 bb b9 01 00       	call   c0027f84 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 3a b0 01 00       	call   c0027623 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 04 bd 01 00       	call   c0028303 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 50 bf 01 00       	call   c002856f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 45 b6 01 00       	call   c0027ca0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 17 b6 01 00       	call   c0027ca0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 4e bc 01 00       	call   c0028303 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 b2 b8 01 00       	call   c0027f84 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 7f b8 01 00       	call   c0027f84 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 fe ae 01 00       	call   c0027623 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 e3 bf 01 00       	call   c0028720 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 bd bb 01 00       	call   c0028303 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 14 b5 01 00       	call   c0027c74 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 f3 bd 01 00       	call   c002856f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 8b ae 01 00       	call   c0027623 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 af b4 01 00       	call   c0027c74 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 49 bf 01 00       	call   c0028720 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 12 bd 01 00       	call   c002856f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 d0 bc 01 00       	call   c0028551 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 67 ba 01 00       	call   c0028303 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 68 ad 01 00       	call   c0027623 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 37 ba 01 00       	call   c0028303 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 9e b6 01 00       	call   c0027f84 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 3d bc 01 00       	call   c0028551 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 40 bc 01 00       	call   c002856f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 13 bc 01 00       	call   c002856f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 0c b6 01 00       	call   c0027f84 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 8e bd 01 00       	call   c0028720 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 69 bd 01 00       	call   c0028720 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 43 b9 01 00       	call   c0028303 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 9a b2 01 00       	call   c0027c74 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 79 bb 01 00       	call   c002856f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 12 ac 01 00       	call   c0027623 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 36 b2 01 00       	call   c0027c74 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 d0 bc 01 00       	call   c0028720 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 10 b5 01 00       	call   c0027f84 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 8d ab 01 00       	call   c0027623 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 b8 b7 01 00       	call   c0028303 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 b8 aa 01 00       	call   c0027623 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 98 aa 01 00       	call   c0027623 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 68 b7 01 00       	call   c0028303 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 b8 b9 01 00       	call   c002856d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 96 b0 01 00       	call   c0027c74 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 10 bb 01 00       	call   c0028700 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 3f b9 01 00       	call   c0028551 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 3c b0 01 00       	call   c0027c74 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 ba b6 01 00       	call   c0028303 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 3d b0 01 00       	call   c0027ca0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 8f b6 01 00       	call   c0028303 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 f6 b2 01 00       	call   c0027f84 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 75 a9 01 00       	call   c0027623 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 3f b6 01 00       	call   c0028303 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 8b b8 01 00       	call   c002856f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 80 af 01 00       	call   c0027ca0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 52 af 01 00       	call   c0027ca0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 89 b5 01 00       	call   c0028303 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 ed b1 01 00       	call   c0027f84 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 ba b1 01 00       	call   c0027f84 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 39 a8 01 00       	call   c0027623 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 1e b9 01 00       	call   c0028720 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 f8 b4 01 00       	call   c0028303 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 4f ae 01 00       	call   c0027c74 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 2e b7 01 00       	call   c002856f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 c6 a7 01 00       	call   c0027623 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ea ad 01 00       	call   c0027c74 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 84 b8 01 00       	call   c0028720 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 4d b6 01 00       	call   c002856f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 0b b6 01 00       	call   c0028551 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 a2 b3 01 00       	call   c0028303 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 a3 a6 01 00       	call   c0027623 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 72 b3 01 00       	call   c0028303 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 d9 af 01 00       	call   c0027f84 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 78 b5 01 00       	call   c0028551 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 7b b5 01 00       	call   c002856f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 4e b5 01 00       	call   c002856f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 47 af 01 00       	call   c0027f84 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 c9 b6 01 00       	call   c0028720 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 a4 b6 01 00       	call   c0028720 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 7e b2 01 00       	call   c0028303 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 d5 ab 01 00       	call   c0027c74 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 b4 b4 01 00       	call   c002856f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 4d a5 01 00       	call   c0027623 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 71 ab 01 00       	call   c0027c74 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 0b b6 01 00       	call   c0028720 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 4b ae 01 00       	call   c0027f84 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 c8 a4 01 00       	call   c0027623 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 f3 b0 01 00       	call   c0028303 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 f3 a3 01 00       	call   c0027623 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 d3 a3 01 00       	call   c0027623 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 a3 b0 01 00       	call   c0028303 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 f3 b2 01 00       	call   c002856d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 d1 a9 01 00       	call   c0027c74 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 4b b4 01 00       	call   c0028700 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 7a b2 01 00       	call   c0028551 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 77 a9 01 00       	call   c0027c74 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 f5 af 01 00       	call   c0028303 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 78 a9 01 00       	call   c0027ca0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 ca af 01 00       	call   c0028303 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 31 ac 01 00       	call   c0027f84 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 b0 a2 01 00       	call   c0027623 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 7a af 01 00       	call   c0028303 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 c6 b1 01 00       	call   c002856f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 bb a8 01 00       	call   c0027ca0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 8d a8 01 00       	call   c0027ca0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 c4 ae 01 00       	call   c0028303 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 28 ab 01 00       	call   c0027f84 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 f5 aa 01 00       	call   c0027f84 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 74 a1 01 00       	call   c0027623 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 59 b2 01 00       	call   c0028720 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 33 ae 01 00       	call   c0028303 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 8a a7 01 00       	call   c0027c74 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 69 b0 01 00       	call   c002856f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 01 a1 01 00       	call   c0027623 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 25 a7 01 00       	call   c0027c74 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 bf b1 01 00       	call   c0028720 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 85 af 01 00       	call   c002856f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 43 af 01 00       	call   c0028551 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 da ac 01 00       	call   c0028303 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 db 9f 01 00       	call   c0027623 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 aa ac 01 00       	call   c0028303 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 11 a9 01 00       	call   c0027f84 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 b0 ae 01 00       	call   c0028551 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 b3 ae 01 00       	call   c002856f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 86 ae 01 00       	call   c002856f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 7f a8 01 00       	call   c0027f84 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 01 b0 01 00       	call   c0028720 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 d8 af 01 00       	call   c0028720 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 b2 ab 01 00       	call   c0028303 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 09 a5 01 00       	call   c0027c74 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 e8 ad 01 00       	call   c002856f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 81 9e 01 00       	call   c0027623 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 a9 a4 01 00       	call   c0027c74 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 43 af 01 00       	call   c0028720 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 84 a7 01 00       	call   c0027f84 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 01 9e 01 00       	call   c0027623 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 2d aa 01 00       	call   c0028303 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 2d 9d 01 00       	call   c0027623 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 0d 9d 01 00       	call   c0027623 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 dd a9 01 00       	call   c0028303 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 11 ac 01 00       	call   c0028551 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 08 a3 01 00       	call   c0027c74 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 82 ad 01 00       	call   c0028700 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 b1 ab 01 00       	call   c0028551 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 ab a2 01 00       	call   c0027c74 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 29 a9 01 00       	call   c0028303 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 ac a2 01 00       	call   c0027ca0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 fe a8 01 00       	call   c0028303 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 65 a5 01 00       	call   c0027f84 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 e4 9b 01 00       	call   c0027623 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 ae a8 01 00       	call   c0028303 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 fa aa 01 00       	call   c002856f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 ef a1 01 00       	call   c0027ca0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 c1 a1 01 00       	call   c0027ca0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 05 a8 01 00       	call   c0028303 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 6c a4 01 00       	call   c0027f84 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 55 a1 01 00       	call   c0027ca0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 11 aa 01 00       	call   c0028573 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 04 a4 01 00       	call   c0027f84 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 83 9a 01 00       	call   c0027623 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 68 ab 01 00       	call   c0028720 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 42 a7 01 00       	call   c0028303 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 99 a0 01 00       	call   c0027c74 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 78 a9 01 00       	call   c002856f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 10 9a 01 00       	call   c0027623 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 38 a0 01 00       	call   c0027c74 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 d2 aa 01 00       	call   c0028720 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 04 9f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd60fc]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 f8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6108]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 8d a7 01 00       	call   c002856f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 4b a7 01 00       	call   c0028551 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 37 a7 01 00       	call   c002856f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 a9 a4 01 00       	call   c0028303 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 27 9e 01 00       	call   c0027ca0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 79 a4 01 00       	call   c0028303 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 7f 97 01 00       	call   c0027623 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 4e a4 01 00       	call   c0028303 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 9e a6 01 00       	call   c002856d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 7f 9d 01 00       	call   c0027c74 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 f9 a7 01 00       	call   c0028700 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 28 a6 01 00       	call   c0028551 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 27 9d 01 00       	call   c0027c74 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 a5 a3 01 00       	call   c0028303 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 28 9d 01 00       	call   c0027ca0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 7a a3 01 00       	call   c0028303 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 e1 9f 01 00       	call   c0027f84 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 60 96 01 00       	call   c0027623 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 88 9f 01 00       	call   c0027f84 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 0e 96 01 00       	call   c0027623 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 f4 a6 01 00       	call   c0028720 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 ce a2 01 00       	call   c0028303 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 25 9c 01 00       	call   c0027c74 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 04 a5 01 00       	call   c002856f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 9d 95 01 00       	call   c0027623 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 c9 9b 01 00       	call   c0027c74 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 63 a6 01 00       	call   c0028720 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 18 a2 01 00       	call   c0028303 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 95 9b 01 00       	call   c0027ca0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 e6 a1 01 00       	call   c0028303 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 ec 94 01 00       	call   c0027623 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 bc a1 01 00       	call   c0028303 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 10 a4 01 00       	call   c0028571 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 e9 9a 01 00       	call   c0027c74 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 63 a5 01 00       	call   c0028700 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 92 a3 01 00       	call   c0028551 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 90 9a 01 00       	call   c0027c74 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 0e a1 01 00       	call   c0028303 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 91 9a 01 00       	call   c0027ca0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 e3 a0 01 00       	call   c0028303 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 4a 9d 01 00       	call   c0027f84 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 c9 93 01 00       	call   c0027623 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 e5 9c 01 00       	call   c0027f84 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 64 93 01 00       	call   c0027623 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 4a a4 01 00       	call   c0028720 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 24 a0 01 00       	call   c0028303 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 7b 99 01 00       	call   c0027c74 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 5a a2 01 00       	call   c002856f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 f3 92 01 00       	call   c0027623 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 1f 99 01 00       	call   c0027c74 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 90 9f 01 00       	call   c0028303 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 96 92 01 00       	call   c0027623 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 1e a0 02 c0       	mov    eax,0xc002a01e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 2f a0 02 c0       	mov    eax,0xc002a02f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 66 a0 02 c0       	push   0xc002a066
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 e5 02 c0       	mov    eax,0xc002e508
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 6f a0 02 c0       	push   0xc002a06f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 9c 6a 02 c0       	mov    eax,0xc0026a9c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 79 a0 02 c0       	push   0xc002a079
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 d0 67 02 c0       	mov    eax,0xc00267d0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 82 a0 02 c0       	push   0xc002a082
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 9c 6b 02 c0       	mov    eax,0xc0026b9c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 8c a0 02 c0       	push   0xc002a08c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 1c 69 02 c0       	mov    eax,0xc002691c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 95 a0 02 c0       	push   0xc002a095
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c e5 02 c0       	mov    eax,0xc002e50c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 a2 a0 02 c0       	push   0xc002a0a2
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d e5 02 c0       	mov    eax,0xc002e50d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 99 5f 00 00       	call   c00145bc <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c000e668:	68 af a0 02 c0       	push   0xc002a0af
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 7f f6 00 00       	call   c001dcf4 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 68 f9 00 00       	call   c001dff2 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 50 e8 01 c0       	push   0xc001e850
c000e693:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c000e699:	e8 54 f9 00 00       	call   c001dff2 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c000e6a6:	c6 05 0d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e50d,0x1
c000e6ad:	e8 1f 05 01 00       	call   c001ebd1 <Vm::initialise8086()>
c000e6b2:	e8 ed 4c 00 00       	call   c00133a4 <Fs::initVFS()>
c000e6b7:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 99 df 00 00       	call   c001c66c <Sys::loadSyscalls()>
c000e6d3:	e8 bc be 00 00       	call   c001a594 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 bc a0 02 c0       	push   0xc002a0bc
c000e6e2:	68 c5 a0 02 c0       	push   0xc002a0c5
c000e6e7:	e8 ce cb 00 00       	call   c001b2ba <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 98 57 00 00       	call   c0013e8c <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 8b 5e 00 00       	call   c0014590 <Device::loadDriversForAll()>
c000e705:	e8 d0 b9 00 00       	call   c001a0da <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 cd a0 02 c0       	push   0xc002a0cd
c000e719:	e8 e2 f0 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 25 f3 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 22 fc 00 00       	call   c001e356 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 e9 a0 02 c0       	push   0xc002a0e9
c000e749:	50                   	push   eax
c000e74a:	e8 e7 5e 00 00       	call   c0014636 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 88 a2 02 c0       	mov    edx,0xc002a288
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 e5 02 c0 04 	test   BYTE PTR ds:0xc002e521,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 83 7e 01 00       	call   c0026766 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 ce a4 00 00       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 a7 a4 00 00       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 85 a4 00 00       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 63 a4 00 00       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e520,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 71 a3 00 00       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 4c a3 00 00       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 ed 7c 01 00       	call   c0026720 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 aa 7c 01 00       	call   c0026700 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 68 a3 00 00       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 f9 a0 02 c0       	push   0xc002a0f9
c000eaaf:	e8 6b 45 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 0c a1 02 c0       	push   0xc002a10c
c000ead2:	e8 48 45 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 1d a1 02 c0       	push   0xc002a11d
c000eaf5:	e8 25 45 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 2e a1 02 c0       	push   0xc002a12e
c000eb18:	e8 02 45 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 3f a1 02 c0       	push   0xc002a13f
c000eb3b:	e8 df 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 50 a1 02 c0       	push   0xc002a150
c000eb5e:	e8 bc 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 61 a1 02 c0       	push   0xc002a161
c000eb81:	e8 99 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 72 a1 02 c0       	push   0xc002a172
c000eba4:	e8 76 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 83 a1 02 c0       	push   0xc002a183
c000ebc7:	e8 53 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 94 a1 02 c0       	push   0xc002a194
c000ebea:	e8 30 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 a5 a1 02 c0       	push   0xc002a1a5
c000ec0d:	e8 0d 44 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 b6 a1 02 c0       	push   0xc002a1b6
c000ec30:	e8 ea 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 c7 a1 02 c0       	push   0xc002a1c7
c000ec53:	e8 c7 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 d8 a1 02 c0       	push   0xc002a1d8
c000ec76:	e8 a4 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 e9 a1 02 c0       	push   0xc002a1e9
c000ec99:	e8 81 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 fa a1 02 c0       	push   0xc002a1fa
c000ecbc:	e8 5e 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 0b a2 02 c0       	push   0xc002a20b
c000ecdf:	e8 3b 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 1c a2 02 c0       	push   0xc002a21c
c000ed02:	e8 18 43 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 2d a2 02 c0       	push   0xc002a22d
c000ed21:	e8 f9 42 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 ec bb 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bbec
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 e8 42 00 00       	jmp    c001301f <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 3e a2 02 c0       	push   0xc002a23e
c000ee0a:	e8 be b8 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 44 a2 02 c0       	push   0xc002a244
c000ee42:	e8 86 b8 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 e5 02 c0 04 	test   BYTE PTR ds:0xc002e520,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 d4 02 c0 	sete   BYTE PTR ds:0xc002d444
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 07 94 00 00       	call   c00182bc <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 82 55 00 00       	call   c0014446 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 b0 9f 00 00       	call   c0018ea4 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 43 55 00 00       	call   c0014446 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 ad 5a 00 00       	call   c00149cc <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 13 55 00 00       	call   c0014446 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 9d f1 00 00       	call   c001e0f2 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 4a a2 02 c0       	push   0xc002a24a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 7c 40 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 5b a2 02 c0       	push   0xc002a25b
c000efc0:	e8 08 b7 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 68 a2 02 c0       	push   0xc002a268
c000efd5:	e8 f3 b6 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 72 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a272
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 dc b6 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 ac a2 02 c0       	push   0xc002a2ac
c000f086:	e8 94 3f 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 e5 02 c0       	mov    ds:0xc002e512,eax
c000f0c7:	66 89 15 10 e5 02 c0 	mov    WORD PTR ds:0xc002e510,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 e4 ec 00 00       	call   c001dec2 <unlockScheduler()>
c000f1de:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 74 95 01 00       	call   c00287a0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 6b 95 01 00       	call   c00287a0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e518,0x7ff
c000f323:	a3 1a e5 02 c0       	mov    ds:0xc002e51a,eax
c000f328:	0f 01 1d 18 e5 02 c0 	lidtd  ds:0xc002e518
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 2b 28 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 5c 2e 00 00       	call   c001247c <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 98 1e 00 00       	call   c00114d6 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 c9 1e 00 00       	call   c0011516 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 34 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d434
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 34 d4 02 c0       	mov    eax,ds:0xc002d434
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 c8 a2 02 c0       	push   0xc002a2c8
c000f6f4:	e8 26 39 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 34 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d434,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 21 27 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 34 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d434
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 43 2c 00 00       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 34 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d434
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 f8 a2 02 c0       	push   0xc002a2f8
c000f7ad:	e8 1b af 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 fd a2 02 c0       	push   0xc002a2fd
c000f7c3:	e8 05 af 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 e7 e6 00 00       	call   c001dec0 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 d8 e6 00 00       	call   c001dec2 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 45 26 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 6f 2c 00 00       	call   c001247c <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 27 26 00 00       	call   c0011e40 <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 12 29 00 00       	call   c0012138 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 40 d4 02 c0       	mov    eax,ds:0xc002d440
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 40 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d440
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 40 d4 02 c0       	mov    eax,ds:0xc002d440
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 b5 0c 00 00       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 77 0c 00 00       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 0e 0d 00 00       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 40 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d440
c000fb49:	80 3d a0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5a0,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 40 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d440,0x8000
c000fba3:	c6 05 a0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5a0,0x1
c000fbaa:	c7 05 d8 e5 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e5d8,0xc000fa16
c000fbb4:	c7 05 c4 e5 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e5c4,0xc000f89d
c000fbbe:	c7 05 c0 e5 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e5c0,0xc000f8e8
c000fbc8:	c7 05 cc e5 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e5cc,0xc000fa5c
c000fbd2:	c7 05 d4 e5 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e5d4,0xc000f966
c000fbdc:	c7 05 c8 e5 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e5c8,0xc000f9c4
c000fbe6:	c7 05 d0 e5 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e5d0,0xc000f9c5
c000fbf0:	c7 05 dc e5 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e5dc,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 10             	sub    esp,0x10
c000fc08:	e8 f5 09 00 00       	call   c0010602 <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 04 a3 02 c0       	push   0xc002a304
c000fc4d:	e8 cd 33 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 54 04 00 00       	call   c00100bd <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 f6 20 00 00       	call   c0011d64 <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 ed bb 02 c0       	push   0xc002bbed
c000fc95:	e8 33 aa 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 20 e5 02 c0    	mov    DWORD PTR ds:0xc002e520,ebx
c000fca6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 c6 22 00 00       	call   c0011f76 <VAS::VAS()>
c000fcb0:	89 1d 8c e6 02 c0    	mov    DWORD PTR ds:0xc002e68c,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 1b a3 02 c0 	mov    DWORD PTR [esp],0xc002a31b
c000fcc2:	e8 58 33 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 17 21 00 00       	call   c0011de3 <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 08 e5 02 c0    	mov    DWORD PTR ds:0xc002e508,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 38 a3 02 c0       	push   0xc002a338
c000fcf0:	e8 2a 33 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 01 25 00 00       	call   c0012210 <VAS::~VAS()>
c000fd0f:	c7 04 24 4b a3 02 c0 	mov    DWORD PTR [esp],0xc002a34b
c000fd16:	e8 b2 a9 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000fd1b:	83 c4 20             	add    esp,0x20
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba 60 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1aa0],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be 60 e5 02 c0       	mov    esi,0xc002e560
c000fd8c:	8d 90 60 e5 02 c0    	lea    edx,[eax-0x3ffd1aa0]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 60 e5 02 c0    	lea    eax,[edx-0x3ffd1aa0]
c000fdf2:	8d 94 11 60 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1aa0]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 38 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d438
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 38 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d438
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 38 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d438
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 50 e5 02 c0       	mov    eax,ds:0xc002e550
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 50 e5 02 c0       	mov    ds:0xc002e550,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d 54 e5 02 c0    	idiv   DWORD PTR ds:0xc002e554
c000fe94:	39 05 4c e5 02 c0    	cmp    DWORD PTR ds:0xc002e54c,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 4c e5 02 c0       	mov    ds:0xc002e54c,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 d9 0a 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 66 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a366
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 e8 a7 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 14             	sub    esp,0x14
c000feea:	8b 35 44 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e544
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x19>
c000fef4:	89 1d 44 e5 02 c0    	mov    DWORD PTR ds:0xc002e544,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x3d>
c000fefe:	53                   	push   ebx
c000feff:	e8 3b ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 5e                	je     c000ff67 <Phys::allocatePage()+0x82>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0xf>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 44 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e544,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x19>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	68 7c a3 02 c0       	push   0xc002a37c
c000ff2a:	e8 f0 30 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c000ff2f:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff36:	e8 e7 fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff3b:	83 c4 10             	add    esp,0x10
c000ff3e:	85 c0                	test   eax,eax
c000ff40:	0f 85 ac 00 00 00    	jne    c000fff2 <Phys::allocatePage()+0x10d>
c000ff46:	83 ec 0c             	sub    esp,0xc
c000ff49:	68 8d a3 02 c0       	push   0xc002a38d
c000ff4e:	e8 7a a7 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c000ff53:	83 c4 10             	add    esp,0x10
c000ff56:	8b 1d 44 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e544
c000ff5c:	53                   	push   ebx
c000ff5d:	e8 dd fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff62:	5a                   	pop    edx
c000ff63:	84 c0                	test   al,al
c000ff65:	75 a2                	jne    c000ff09 <Phys::allocatePage()+0x24>
c000ff67:	6a 01                	push   0x1
c000ff69:	53                   	push   ebx
c000ff6a:	e8 9e fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff6f:	a1 50 e5 02 c0       	mov    eax,ds:0xc002e550
c000ff74:	59                   	pop    ecx
c000ff75:	40                   	inc    eax
c000ff76:	5b                   	pop    ebx
c000ff77:	a3 50 e5 02 c0       	mov    ds:0xc002e550,eax
c000ff7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff7f:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff82:	c1 e0 02             	shl    eax,0x2
c000ff85:	99                   	cdq    
c000ff86:	f7 3d 54 e5 02 c0    	idiv   DWORD PTR ds:0xc002e554
c000ff8c:	39 05 4c e5 02 c0    	cmp    DWORD PTR ds:0xc002e54c,eax
c000ff92:	75 64                	jne    c000fff8 <Phys::allocatePage()+0x113>
c000ff94:	83 f8 32             	cmp    eax,0x32
c000ff97:	7e 51                	jle    c000ffea <Phys::allocatePage()+0x105>
c000ff99:	80 3d 40 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e540,0x0
c000ffa0:	75 48                	jne    c000ffea <Phys::allocatePage()+0x105>
c000ffa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffa7:	85 c0                	test   eax,eax
c000ffa9:	74 22                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffae:	85 c0                	test   eax,eax
c000ffb0:	74 1b                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffb2:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ffb8:	85 c0                	test   eax,eax
c000ffba:	74 11                	je     c000ffcd <Phys::allocatePage()+0xe8>
c000ffbc:	52                   	push   edx
c000ffbd:	68 c8 00 00 00       	push   0xc8
c000ffc2:	6a 04                	push   0x4
c000ffc4:	50                   	push   eax
c000ffc5:	e8 74 2b 00 00       	call   c0012b3e <VAS::scanForEviction(int, int)>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	a1 50 e5 02 c0       	mov    eax,ds:0xc002e550
c000ffd2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd5:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd8:	c1 e0 02             	shl    eax,0x2
c000ffdb:	99                   	cdq    
c000ffdc:	f7 3d 54 e5 02 c0    	idiv   DWORD PTR ds:0xc002e554
c000ffe2:	39 05 4c e5 02 c0    	cmp    DWORD PTR ds:0xc002e54c,eax
c000ffe8:	75 2e                	jne    c0010018 <Phys::allocatePage()+0x133>
c000ffea:	a1 44 e5 02 c0       	mov    eax,ds:0xc002e544
c000ffef:	c1 e0 0c             	shl    eax,0xc
c000fff2:	83 c4 14             	add    esp,0x14
c000fff5:	5b                   	pop    ebx
c000fff6:	5e                   	pop    esi
c000fff7:	c3                   	ret    
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	a3 4c e5 02 c0       	mov    ds:0xc002e54c,eax
c0010000:	50                   	push   eax
c0010001:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010005:	e8 8c 09 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010011:	83 f8 32             	cmp    eax,0x32
c0010014:	7e d4                	jle    c000ffea <Phys::allocatePage()+0x105>
c0010016:	eb 81                	jmp    c000ff99 <Phys::allocatePage()+0xb4>
c0010018:	83 ec 0c             	sub    esp,0xc
c001001b:	a3 4c e5 02 c0       	mov    ds:0xc002e54c,eax
c0010020:	50                   	push   eax
c0010021:	e8 70 09 00 00       	call   c0010996 <VgaText::updateRAMUsageDisplay(int)>
c0010026:	83 c4 10             	add    esp,0x10
c0010029:	eb bf                	jmp    c000ffea <Phys::allocatePage()+0x105>

c001002b <Phys::allocateContiguousPages(int)>:
c001002b:	57                   	push   edi
c001002c:	56                   	push   esi
c001002d:	53                   	push   ebx
c001002e:	31 db                	xor    ebx,ebx
c0010030:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0010034:	e8 87 de 00 00       	call   c001dec0 <lockScheduler()>
c0010039:	85 db                	test   ebx,ebx
c001003b:	75 11                	jne    c001004e <Phys::allocateContiguousPages(int)+0x23>
c001003d:	e8 a3 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c0010042:	83 ff 01             	cmp    edi,0x1
c0010045:	89 c6                	mov    esi,eax
c0010047:	74 21                	je     c001006a <Phys::allocateContiguousPages(int)+0x3f>
c0010049:	bb 01 00 00 00       	mov    ebx,0x1
c001004e:	e8 92 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c0010053:	89 da                	mov    edx,ebx
c0010055:	c1 e2 0c             	shl    edx,0xc
c0010058:	01 f2                	add    edx,esi
c001005a:	39 c2                	cmp    edx,eax
c001005c:	74 17                	je     c0010075 <Phys::allocateContiguousPages(int)+0x4a>
c001005e:	bb 01 00 00 00       	mov    ebx,0x1
c0010063:	89 c6                	mov    esi,eax
c0010065:	83 ff 01             	cmp    edi,0x1
c0010068:	75 e4                	jne    c001004e <Phys::allocateContiguousPages(int)+0x23>
c001006a:	e8 53 de 00 00       	call   c001dec2 <unlockScheduler()>
c001006f:	89 f0                	mov    eax,esi
c0010071:	5b                   	pop    ebx
c0010072:	5e                   	pop    esi
c0010073:	5f                   	pop    edi
c0010074:	c3                   	ret    
c0010075:	43                   	inc    ebx
c0010076:	39 fb                	cmp    ebx,edi
c0010078:	75 bf                	jne    c0010039 <Phys::allocateContiguousPages(int)+0xe>
c001007a:	e8 43 de 00 00       	call   c001dec2 <unlockScheduler()>
c001007f:	89 f0                	mov    eax,esi
c0010081:	5b                   	pop    ebx
c0010082:	5e                   	pop    esi
c0010083:	5f                   	pop    edi
c0010084:	c3                   	ret    

c0010085 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010085:	56                   	push   esi
c0010086:	53                   	push   ebx
c0010087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008b:	39 1d 48 e5 02 c0    	cmp    DWORD PTR ds:0xc002e548,ebx
c0010091:	73 06                	jae    c0010099 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010093:	89 1d 48 e5 02 c0    	mov    DWORD PTR ds:0xc002e548,ebx
c0010099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001009d:	c1 eb 0c             	shr    ebx,0xc
c00100a0:	c1 e8 0c             	shr    eax,0xc
c00100a3:	39 d8                	cmp    eax,ebx
c00100a5:	73 13                	jae    c00100ba <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100a7:	6a 00                	push   0x0
c00100a9:	8d 70 01             	lea    esi,[eax+0x1]
c00100ac:	50                   	push   eax
c00100ad:	e8 5b fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100b2:	5a                   	pop    edx
c00100b3:	89 f0                	mov    eax,esi
c00100b5:	59                   	pop    ecx
c00100b6:	39 f3                	cmp    ebx,esi
c00100b8:	75 ed                	jne    c00100a7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c00100ba:	5b                   	pop    ebx
c00100bb:	5e                   	pop    esi
c00100bc:	c3                   	ret    

c00100bd <Phys::physicalMemorySetup(unsigned int)>:
c00100bd:	55                   	push   ebp
c00100be:	57                   	push   edi
c00100bf:	56                   	push   esi
c00100c0:	53                   	push   ebx
c00100c1:	31 db                	xor    ebx,ebx
c00100c3:	83 ec 40             	sub    esp,0x40
c00100c6:	6a 30                	push   0x30
c00100c8:	6a 00                	push   0x0
c00100ca:	68 60 e5 02 c0       	push   0xc002e560
c00100cf:	e8 a4 06 ff ff       	call   c0000778 <memset>
c00100d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100dd:	05 00 10 00 00       	add    eax,0x1000
c00100e2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	83 ec 08             	sub    esp,0x8
c00100ec:	6a 01                	push   0x1
c00100ee:	53                   	push   ebx
c00100ef:	43                   	inc    ebx
c00100f0:	e8 18 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100fe:	75 e9                	jne    c00100e9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010100:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010107:	66 85 c0             	test   ax,ax
c001010a:	0f 84 8e 01 00 00    	je     c001029e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010114:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001011c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010120:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010129:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010131:	eb 15                	jmp    c0010148 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010133:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010137:	83 c3 18             	add    ebx,0x18
c001013a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001013e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010142:	0f 84 66 01 00 00    	je     c00102ae <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010148:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001014b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001014e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010151:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010155:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010159:	8b 33                	mov    esi,DWORD PTR [ebx]
c001015b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001015e:	01 f0                	add    eax,esi
c0010160:	55                   	push   ebp
c0010161:	11 fa                	adc    edx,edi
c0010163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010167:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001016b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001016f:	56                   	push   esi
c0010170:	68 c8 a3 02 c0       	push   0xc002a3c8
c0010175:	e8 a5 2e 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001017a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001017e:	83 c4 10             	add    esp,0x10
c0010181:	09 f8                	or     eax,edi
c0010183:	0f 85 25 01 00 00    	jne    c00102ae <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010189:	4d                   	dec    ebp
c001018a:	75 a7                	jne    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001018c:	ba 00 00 08 00       	mov    edx,0x80000
c0010191:	89 c1                	mov    ecx,eax
c0010193:	39 f2                	cmp    edx,esi
c0010195:	19 f9                	sbb    ecx,edi
c0010197:	0f 82 a7 00 00 00    	jb     c0010244 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001019d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101a1:	89 c1                	mov    ecx,eax
c00101a3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101a7:	0f 83 97 00 00 00    	jae    c0010244 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ad:	ba 00 00 0a 00       	mov    edx,0xa0000
c00101b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101b6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101ba:	39 fa                	cmp    edx,edi
c00101bc:	19 e8                	sbb    eax,ebp
c00101be:	0f 82 14 01 00 00    	jb     c00102d8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101c8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101cc:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101d2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101d7:	83 d5 ff             	adc    ebp,0xffffffff
c00101da:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101de:	31 c0                	xor    eax,eax
c00101e0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101e4:	39 fa                	cmp    edx,edi
c00101e6:	89 c1                	mov    ecx,eax
c00101e8:	19 e9                	sbb    ecx,ebp
c00101ea:	0f 83 43 ff ff ff    	jae    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101f0:	be 00 00 08 00       	mov    esi,0x80000
c00101f5:	50                   	push   eax
c00101f6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101fa:	57                   	push   edi
c00101fb:	56                   	push   esi
c00101fc:	68 ec a3 02 c0       	push   0xc002a3ec
c0010201:	e8 19 2e 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0010206:	5a                   	pop    edx
c0010207:	59                   	pop    ecx
c0010208:	57                   	push   edi
c0010209:	56                   	push   esi
c001020a:	e8 76 fe ff ff       	call   c0010085 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001020f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010217:	83 c4 0c             	add    esp,0xc
c001021a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001021e:	03 05 54 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e554
c0010224:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001022b:	a3 54 e5 02 c0       	mov    ds:0xc002e554,eax
c0010230:	52                   	push   edx
c0010231:	50                   	push   eax
c0010232:	68 a9 a3 02 c0       	push   0xc002a3a9
c0010237:	e8 e3 2d 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001023c:	83 c4 10             	add    esp,0x10
c001023f:	e9 ef fe ff ff       	jmp    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010244:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010248:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001024c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010250:	39 ea                	cmp    edx,ebp
c0010252:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010256:	0f 82 d7 fe ff ff    	jb     c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001025c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010261:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010265:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010269:	0f 83 c4 fe ff ff    	jae    c0010133 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001026f:	39 ee                	cmp    esi,ebp
c0010271:	89 f8                	mov    eax,edi
c0010273:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010277:	0f 83 78 ff ff ff    	jae    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010281:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010285:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010289:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001028d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010291:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010295:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010299:	e9 57 ff ff ff       	jmp    c00101f5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001029e:	83 ec 0c             	sub    esp,0xc
c00102a1:	68 9b a3 02 c0       	push   0xc002a39b
c00102a6:	e8 22 a4 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00102ab:	83 c4 10             	add    esp,0x10
c00102ae:	bb 40 01 00 00       	mov    ebx,0x140
c00102b3:	83 ec 08             	sub    esp,0x8
c00102b6:	6a 00                	push   0x0
c00102b8:	53                   	push   ebx
c00102b9:	43                   	inc    ebx
c00102ba:	e8 4e fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00102bf:	ff 05 54 e5 02 c0    	inc    DWORD PTR ds:0xc002e554
c00102c5:	83 c4 10             	add    esp,0x10
c00102c8:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102ce:	75 e3                	jne    c00102b3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102d0:	83 c4 3c             	add    esp,0x3c
c00102d3:	5b                   	pop    ebx
c00102d4:	5e                   	pop    esi
c00102d5:	5f                   	pop    edi
c00102d6:	5d                   	pop    ebp
c00102d7:	c3                   	ret    
c00102d8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102e8:	e9 d7 fe ff ff       	jmp    c00101c4 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102ed:	90                   	nop

c00102ee <Pipe::isAtty()>:
c00102ee:	31 c0                	xor    eax,eax
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::~Pipe()>:
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	ba 58 a4 02 c0       	mov    edx,0xc002a458
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	89 10                	mov    DWORD PTR [eax],edx
c0010300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010304:	83 ec 0c             	sub    esp,0xc
c0010307:	50                   	push   eax
c0010308:	e8 37 16 00 00       	call   c0011944 <UnixFile::~UnixFile()>
c001030d:	83 c4 10             	add    esp,0x10
c0010310:	90                   	nop
c0010311:	83 c4 0c             	add    esp,0xc
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <Pipe::~Pipe()>:
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	83 ec 0c             	sub    esp,0xc
c001031c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010320:	e8 cd ff ff ff       	call   c00102f2 <Pipe::~Pipe()>
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	6a 20                	push   0x20
c001032d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010331:	e8 09 2c 00 00       	call   c0012f3f <operator delete(void*, unsigned long)>
c0010336:	83 c4 10             	add    esp,0x10
c0010339:	83 c4 0c             	add    esp,0xc
c001033c:	c3                   	ret    
c001033d:	90                   	nop

c001033e <Pipe::read(unsigned long long, void*, int*)>:
c001033e:	55                   	push   ebp
c001033f:	57                   	push   edi
c0010340:	56                   	push   esi
c0010341:	53                   	push   ebx
c0010342:	83 ec 1c             	sub    esp,0x1c
c0010345:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010351:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010354:	89 c8                	mov    eax,ecx
c0010356:	99                   	cdq    
c0010357:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001035b:	74 19                	je     c0010376 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001035d:	39 f9                	cmp    ecx,edi
c001035f:	89 d1                	mov    ecx,edx
c0010361:	19 f1                	sbb    ecx,esi
c0010363:	73 11                	jae    c0010376 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010365:	e8 56 db 00 00       	call   c001dec0 <lockScheduler()>
c001036a:	e8 8d de 00 00       	call   c001e1fc <schedule()>
c001036f:	e8 4e db 00 00       	call   c001dec2 <unlockScheduler()>
c0010374:	eb db                	jmp    c0010351 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010376:	39 f8                	cmp    eax,edi
c0010378:	89 d1                	mov    ecx,edx
c001037a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001037e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010382:	19 f1                	sbb    ecx,esi
c0010384:	73 08                	jae    c001038e <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010386:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001038a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001038e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010391:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010394:	29 c6                	sub    esi,eax
c0010396:	89 f1                	mov    ecx,esi
c0010398:	c1 f9 1f             	sar    ecx,0x1f
c001039b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001039f:	89 ca                	mov    edx,ecx
c00103a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103a5:	19 d1                	sbb    ecx,edx
c00103a7:	73 04                	jae    c00103ad <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00103a9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00103ad:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00103b1:	89 fd                	mov    ebp,edi
c00103b3:	29 f5                	sub    ebp,esi
c00103b5:	85 f6                	test   esi,esi
c00103b7:	74 12                	je     c00103cb <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00103b9:	52                   	push   edx
c00103ba:	56                   	push   esi
c00103bb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00103be:	50                   	push   eax
c00103bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00103c3:	e8 7c 03 ff ff       	call   c0000744 <memcpy>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	85 ed                	test   ebp,ebp
c00103cd:	74 12                	je     c00103e1 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103cf:	50                   	push   eax
c00103d0:	55                   	push   ebp
c00103d1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103d4:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103d8:	56                   	push   esi
c00103d9:	e8 66 03 ff ff       	call   c0000744 <memcpy>
c00103de:	83 c4 10             	add    esp,0x10
c00103e1:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103e4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103e7:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103ea:	99                   	cdq    
c00103eb:	89 f7                	mov    edi,esi
c00103ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103f5:	c1 ff 1f             	sar    edi,0x1f
c00103f8:	57                   	push   edi
c00103f9:	56                   	push   esi
c00103fa:	52                   	push   edx
c00103fb:	50                   	push   eax
c00103fc:	e8 9b 67 01 00       	call   c0026b9c <__umoddi3>
c0010401:	83 c4 10             	add    esp,0x10
c0010404:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010407:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001040c:	75 10                	jne    c001041e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001040e:	83 ec 0c             	sub    esp,0xc
c0010411:	68 15 a4 02 c0       	push   0xc002a415
c0010416:	e8 b2 a2 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c001041b:	83 c4 10             	add    esp,0x10
c001041e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010426:	89 10                	mov    DWORD PTR [eax],edx
c0010428:	83 c4 1c             	add    esp,0x1c
c001042b:	31 c0                	xor    eax,eax
c001042d:	5b                   	pop    ebx
c001042e:	5e                   	pop    esi
c001042f:	5f                   	pop    edi
c0010430:	5d                   	pop    ebp
c0010431:	c3                   	ret    

c0010432 <Pipe::write(unsigned long long, void*, int*)>:
c0010432:	55                   	push   ebp
c0010433:	57                   	push   edi
c0010434:	56                   	push   esi
c0010435:	53                   	push   ebx
c0010436:	83 ec 1c             	sub    esp,0x1c
c0010439:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001043d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010441:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010445:	89 04 24             	mov    DWORD PTR [esp],eax
c0010448:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001044b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001044e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010452:	89 de                	mov    esi,ebx
c0010454:	89 df                	mov    edi,ebx
c0010456:	c1 ff 1f             	sar    edi,0x1f
c0010459:	01 c6                	add    esi,eax
c001045b:	89 c8                	mov    eax,ecx
c001045d:	11 d7                	adc    edi,edx
c001045f:	99                   	cdq    
c0010460:	39 f1                	cmp    ecx,esi
c0010462:	89 d0                	mov    eax,edx
c0010464:	19 f8                	sbb    eax,edi
c0010466:	b8 01 00 00 00       	mov    eax,0x1
c001046b:	0f 82 80 00 00 00    	jb     c00104f1 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c0010471:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010474:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010477:	01 d8                	add    eax,ebx
c0010479:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001047d:	99                   	cdq    
c001047e:	f7 f9                	idiv   ecx
c0010480:	29 d1                	sub    ecx,edx
c0010482:	89 d7                	mov    edi,edx
c0010484:	89 c8                	mov    eax,ecx
c0010486:	99                   	cdq    
c0010487:	39 ce                	cmp    esi,ecx
c0010489:	19 d3                	sbb    ebx,edx
c001048b:	bb 00 00 00 00       	mov    ebx,0x0
c0010490:	72 04                	jb     c0010496 <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010492:	89 f3                	mov    ebx,esi
c0010494:	29 cb                	sub    ebx,ecx
c0010496:	89 f1                	mov    ecx,esi
c0010498:	29 d9                	sub    ecx,ebx
c001049a:	74 1a                	je     c00104b6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c001049c:	52                   	push   edx
c001049d:	51                   	push   ecx
c001049e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00104a2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00104a6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00104a9:	57                   	push   edi
c00104aa:	e8 95 02 ff ff       	call   c0000744 <memcpy>
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104b6:	85 db                	test   ebx,ebx
c00104b8:	74 12                	je     c00104cc <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00104ba:	50                   	push   eax
c00104bb:	53                   	push   ebx
c00104bc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c00104c0:	51                   	push   ecx
c00104c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104c4:	e8 7b 02 ff ff       	call   c0000744 <memcpy>
c00104c9:	83 c4 10             	add    esp,0x10
c00104cc:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104cf:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104d4:	75 10                	jne    c00104e6 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	68 31 a4 02 c0       	push   0xc002a431
c00104de:	e8 ea a1 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00104e3:	83 c4 10             	add    esp,0x10
c00104e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104ed:	89 38                	mov    DWORD PTR [eax],edi
c00104ef:	31 c0                	xor    eax,eax
c00104f1:	83 c4 1c             	add    esp,0x1c
c00104f4:	5b                   	pop    ebx
c00104f5:	5e                   	pop    esi
c00104f6:	5f                   	pop    edi
c00104f7:	5d                   	pop    ebp
c00104f8:	c3                   	ret    
c00104f9:	90                   	nop

c00104fa <Pipe::Pipe(int)>:
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010501:	83 ec 08             	sub    esp,0x8
c0010504:	6a 00                	push   0x0
c0010506:	50                   	push   eax
c0010507:	e8 56 12 00 00       	call   c0011762 <UnixFile::UnixFile(int)>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	ba 58 a4 02 c0       	mov    edx,0xc002a458
c0010514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010518:	89 10                	mov    DWORD PTR [eax],edx
c001051a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010522:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010529:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010534:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001053b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001053f:	83 ec 0c             	sub    esp,0xc
c0010542:	50                   	push   eax
c0010543:	e8 fb f2 ff ff       	call   c000f843 <malloc>
c0010548:	83 c4 10             	add    esp,0x10
c001054b:	89 c2                	mov    edx,eax
c001054d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010551:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010558:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001055c:	90                   	nop
c001055d:	83 c4 0c             	add    esp,0xc
c0010560:	c3                   	ret    
c0010561:	90                   	nop

c0010562 <VgaText::isAtty()>:
c0010562:	b0 01                	mov    al,0x1
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <VgaText::~VgaText()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	ba 14 a5 02 c0       	mov    edx,0xc002a514
c001056e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010572:	89 10                	mov    DWORD PTR [eax],edx
c0010574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	50                   	push   eax
c001057c:	e8 c3 13 00 00       	call   c0011944 <UnixFile::~UnixFile()>
c0010581:	83 c4 10             	add    esp,0x10
c0010584:	90                   	nop
c0010585:	83 c4 0c             	add    esp,0xc
c0010588:	c3                   	ret    
c0010589:	90                   	nop

c001058a <VgaText::~VgaText()>:
c001058a:	83 ec 0c             	sub    esp,0xc
c001058d:	83 ec 0c             	sub    esp,0xc
c0010590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010594:	e8 cd ff ff ff       	call   c0010566 <VgaText::~VgaText()>
c0010599:	83 c4 10             	add    esp,0x10
c001059c:	83 ec 08             	sub    esp,0x8
c001059f:	68 60 12 00 00       	push   0x1260
c00105a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105a8:	e8 92 29 00 00       	call   c0012f3f <operator delete(void*, unsigned long)>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	83 c4 0c             	add    esp,0xc
c00105b3:	c3                   	ret    

c00105b4 <VgaText::read(unsigned long long, void*, int*)>:
c00105b4:	83 ec 10             	sub    esp,0x10
c00105b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00105bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105c3:	e8 06 5e 00 00       	call   c00163ce <readKeyboard(VgaText*, char*, unsigned long)>
c00105c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105cc:	89 02                	mov    DWORD PTR [edx],eax
c00105ce:	31 c0                	xor    eax,eax
c00105d0:	83 c4 1c             	add    esp,0x1c
c00105d3:	c3                   	ret    

c00105d4 <setTerminalScrollLock(bool)>:
c00105d4:	c3                   	ret    

c00105d5 <addToTerminalCycle(VgaText*)>:
c00105d5:	8b 15 e0 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e0
c00105db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105df:	85 d2                	test   edx,edx
c00105e1:	75 0c                	jne    c00105ef <addToTerminalCycle(VgaText*)+0x1a>
c00105e3:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105e9:	a3 e0 e5 02 c0       	mov    ds:0xc002e5e0,eax
c00105ee:	c3                   	ret    
c00105ef:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105f5:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105fb:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010601:	c3                   	ret    

c0010602 <installVgaTextImplementation()>:
c0010602:	83 ec 10             	sub    esp,0x10
c0010605:	6a 20                	push   0x20
c0010607:	6a 00                	push   0x0
c0010609:	68 c0 e5 02 c0       	push   0xc002e5c0
c001060e:	e8 65 01 ff ff       	call   c0000778 <memset>
c0010613:	83 c4 1c             	add    esp,0x1c
c0010616:	c3                   	ret    

c0010617 <scrollTerminalScrollLock(int)>:
c0010617:	c3                   	ret    

c0010618 <VgaText::load()>:
c0010618:	53                   	push   ebx
c0010619:	31 c0                	xor    eax,eax
c001061b:	83 ec 58             	sub    esp,0x58
c001061e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010622:	89 e2                	mov    edx,esp
c0010624:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010628:	40                   	inc    eax
c0010629:	83 f8 50             	cmp    eax,0x50
c001062c:	75 f6                	jne    c0010624 <VgaText::load()+0xc>
c001062e:	31 c0                	xor    eax,eax
c0010630:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010637:	84 c9                	test   cl,cl
c0010639:	74 06                	je     c0010641 <VgaText::load()+0x29>
c001063b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001063e:	40                   	inc    eax
c001063f:	eb ef                	jmp    c0010630 <VgaText::load()+0x18>
c0010641:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010647:	85 c0                	test   eax,eax
c0010649:	74 09                	je     c0010654 <VgaText::load()+0x3c>
c001064b:	51                   	push   ecx
c001064c:	51                   	push   ecx
c001064d:	52                   	push   edx
c001064e:	53                   	push   ebx
c001064f:	ff d0                	call   eax
c0010651:	83 c4 10             	add    esp,0x10
c0010654:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 09                	je     c0010667 <VgaText::load()+0x4f>
c001065e:	83 ec 0c             	sub    esp,0xc
c0010661:	53                   	push   ebx
c0010662:	ff d0                	call   eax
c0010664:	83 c4 10             	add    esp,0x10
c0010667:	83 c4 58             	add    esp,0x58
c001066a:	5b                   	pop    ebx
c001066b:	c3                   	ret    

c001066c <VgaText::updateCursor()>:
c001066c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010670:	39 05 e4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e4,eax
c0010676:	75 0c                	jne    c0010684 <VgaText::updateCursor()+0x18>
c0010678:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001067e:	85 c0                	test   eax,eax
c0010680:	74 02                	je     c0010684 <VgaText::updateCursor()+0x18>
c0010682:	ff e0                	jmp    eax
c0010684:	c3                   	ret    
c0010685:	90                   	nop

c0010686 <VgaText::showCursor(bool)>:
c0010686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001068a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001068e:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010694:	c3                   	ret    
c0010695:	90                   	nop

c0010696 <VgaText::disableBlink(bool)>:
c0010696:	56                   	push   esi
c0010697:	53                   	push   ebx
c0010698:	51                   	push   ecx
c0010699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001069d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106a1:	39 1d e4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e4,ebx
c00106a7:	75 18                	jne    c00106c1 <VgaText::disableBlink(bool)+0x2b>
c00106a9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00106af:	85 c0                	test   eax,eax
c00106b1:	74 0e                	je     c00106c1 <VgaText::disableBlink(bool)+0x2b>
c00106b3:	89 f1                	mov    ecx,esi
c00106b5:	52                   	push   edx
c00106b6:	52                   	push   edx
c00106b7:	0f b6 d1             	movzx  edx,cl
c00106ba:	52                   	push   edx
c00106bb:	53                   	push   ebx
c00106bc:	ff d0                	call   eax
c00106be:	83 c4 10             	add    esp,0x10
c00106c1:	89 f0                	mov    eax,esi
c00106c3:	83 f0 01             	xor    eax,0x1
c00106c6:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106cc:	58                   	pop    eax
c00106cd:	5b                   	pop    ebx
c00106ce:	5e                   	pop    esi
c00106cf:	c3                   	ret    

c00106d0 <VgaText::doANSI_SGR(int)>:
c00106d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d8:	85 d2                	test   edx,edx
c00106da:	75 14                	jne    c00106f0 <VgaText::doANSI_SGR(int)+0x20>
c00106dc:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106e2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106e8:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106ee:	eb 65                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c00106f0:	83 fa 07             	cmp    edx,0x7
c00106f3:	75 14                	jne    c0010709 <VgaText::doANSI_SGR(int)+0x39>
c00106f5:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106fb:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010701:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010707:	eb 4c                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c0010709:	83 fa 1b             	cmp    edx,0x1b
c001070c:	74 ce                	je     c00106dc <VgaText::doANSI_SGR(int)+0xc>
c001070e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010711:	83 f9 07             	cmp    ecx,0x7
c0010714:	77 09                	ja     c001071f <VgaText::doANSI_SGR(int)+0x4f>
c0010716:	8b 14 8d 60 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ba0]
c001071d:	eb 20                	jmp    c001073f <VgaText::doANSI_SGR(int)+0x6f>
c001071f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010722:	83 f9 07             	cmp    ecx,0x7
c0010725:	77 09                	ja     c0010730 <VgaText::doANSI_SGR(int)+0x60>
c0010727:	8b 14 8d 60 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2ba0]
c001072e:	eb 25                	jmp    c0010755 <VgaText::doANSI_SGR(int)+0x85>
c0010730:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010733:	83 f9 07             	cmp    ecx,0x7
c0010736:	77 0e                	ja     c0010746 <VgaText::doANSI_SGR(int)+0x76>
c0010738:	8b 14 95 18 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ce8]
c001073f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010745:	c3                   	ret    
c0010746:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010749:	83 f9 07             	cmp    ecx,0x7
c001074c:	77 0d                	ja     c001075b <VgaText::doANSI_SGR(int)+0x8b>
c001074e:	8b 14 95 f0 d2 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2d10]
c0010755:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001075b:	c3                   	ret    

c001075c <VgaText::setDefaultBgColour(VgaColour)>:
c001075c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010760:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010764:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c001076a:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010770:	c3                   	ret    
c0010771:	90                   	nop

c0010772 <VgaText::setDefaultFgColour(VgaColour)>:
c0010772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001077a:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010780:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010786:	c3                   	ret    
c0010787:	90                   	nop

c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010788:	53                   	push   ebx
c0010789:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001078d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010791:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010795:	51                   	push   ecx
c0010796:	e8 c1 ff ff ff       	call   c001075c <VgaText::setDefaultBgColour(VgaColour)>
c001079b:	58                   	pop    eax
c001079c:	5a                   	pop    edx
c001079d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107a1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107a5:	5b                   	pop    ebx
c00107a6:	eb ca                	jmp    c0010772 <VgaText::setDefaultFgColour(VgaColour)>

c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107a8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107ac:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107b1:	83 e0 0f             	and    eax,0xf
c00107b4:	c1 e2 04             	shl    edx,0x4
c00107b7:	09 d0                	or     eax,edx
c00107b9:	c3                   	ret    

c00107ba <VgaText::scrollScreen()>:
c00107ba:	57                   	push   edi
c00107bb:	56                   	push   esi
c00107bc:	be 01 00 00 00       	mov    esi,0x1
c00107c1:	53                   	push   ebx
c00107c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107c6:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107cc:	31 ff                	xor    edi,edi
c00107ce:	01 d9                	add    ecx,ebx
c00107d0:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107d3:	83 fe 17             	cmp    esi,0x17
c00107d6:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107dc:	75 28                	jne    c0010806 <VgaText::scrollScreen()+0x4c>
c00107de:	f7 c7 01 00 00 00    	test   edi,0x1
c00107e4:	74 1c                	je     c0010802 <VgaText::scrollScreen()+0x48>
c00107e6:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107ed:	50                   	push   eax
c00107ee:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107f5:	50                   	push   eax
c00107f6:	e8 ad ff ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00107fb:	5a                   	pop    edx
c00107fc:	5a                   	pop    edx
c00107fd:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010800:	eb 04                	jmp    c0010806 <VgaText::scrollScreen()+0x4c>
c0010802:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010806:	47                   	inc    edi
c0010807:	41                   	inc    ecx
c0010808:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001080e:	75 c0                	jne    c00107d0 <VgaText::scrollScreen()+0x16>
c0010810:	46                   	inc    esi
c0010811:	83 fe 18             	cmp    esi,0x18
c0010814:	75 b0                	jne    c00107c6 <VgaText::scrollScreen()+0xc>
c0010816:	39 1d e4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e4,ebx
c001081c:	75 24                	jne    c0010842 <VgaText::scrollScreen()+0x88>
c001081e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010825:	74 08                	je     c001082f <VgaText::scrollScreen()+0x75>
c0010827:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001082d:	eb 13                	jmp    c0010842 <VgaText::scrollScreen()+0x88>
c001082f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010835:	85 c0                	test   eax,eax
c0010837:	74 09                	je     c0010842 <VgaText::scrollScreen()+0x88>
c0010839:	83 ec 0c             	sub    esp,0xc
c001083c:	53                   	push   ebx
c001083d:	ff d0                	call   eax
c001083f:	83 c4 10             	add    esp,0x10
c0010842:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010846:	5b                   	pop    ebx
c0010847:	5e                   	pop    esi
c0010848:	5f                   	pop    edi
c0010849:	e9 1e fe ff ff       	jmp    c001066c <VgaText::updateCursor()>

c001084e <VgaText::combineCharAndColour(char, unsigned char)>:
c001084e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010853:	c1 e0 08             	shl    eax,0x8
c0010856:	89 c2                	mov    edx,eax
c0010858:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001085d:	09 d0                	or     eax,edx
c001085f:	c3                   	ret    

c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010860:	53                   	push   ebx
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010868:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001086d:	50                   	push   eax
c001086e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010873:	50                   	push   eax
c0010874:	e8 2f ff ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010879:	5a                   	pop    edx
c001087a:	0f b6 c0             	movzx  eax,al
c001087d:	5b                   	pop    ebx
c001087e:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010883:	50                   	push   eax
c0010884:	53                   	push   ebx
c0010885:	e8 c4 ff ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c001088a:	5a                   	pop    edx
c001088b:	5a                   	pop    edx
c001088c:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010892:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010896:	0f b7 d2             	movzx  edx,dx
c0010899:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001089e:	39 0d e4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e4,ecx
c00108a4:	75 14                	jne    c00108ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108a6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00108ac:	85 c0                	test   eax,eax
c00108ae:	74 0a                	je     c00108ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00108b0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108b4:	83 c4 08             	add    esp,0x8
c00108b7:	5b                   	pop    ebx
c00108b8:	ff e0                	jmp    eax
c00108ba:	83 c4 08             	add    esp,0x8
c00108bd:	5b                   	pop    ebx
c00108be:	c3                   	ret    
c00108bf:	90                   	nop

c00108c0 <VgaText::getCursorX()>:
c00108c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108c4:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108ca:	c3                   	ret    
c00108cb:	90                   	nop

c00108cc <VgaText::getCursorY()>:
c00108cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108d0:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <VgaText::setCursor(int, int)>:
c00108d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108e0:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108ea:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108f0:	e9 77 fd ff ff       	jmp    c001066c <VgaText::updateCursor()>
c00108f5:	90                   	nop

c00108f6 <VgaText::setCursorX(int)>:
c00108f6:	83 ec 10             	sub    esp,0x10
c00108f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108fd:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010907:	50                   	push   eax
c0010908:	e8 cb ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001090d:	83 c4 1c             	add    esp,0x1c
c0010910:	c3                   	ret    
c0010911:	90                   	nop

c0010912 <VgaText::setCursorY(int)>:
c0010912:	83 ec 10             	sub    esp,0x10
c0010915:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001091d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010923:	50                   	push   eax
c0010924:	e8 af ff ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010929:	83 c4 1c             	add    esp,0x1c
c001092c:	c3                   	ret    
c001092d:	90                   	nop

c001092e <VgaText::incrementCursor(bool)>:
c001092e:	56                   	push   esi
c001092f:	53                   	push   ebx
c0010930:	51                   	push   ecx
c0010931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010935:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010939:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001093f:	40                   	inc    eax
c0010940:	83 f8 50             	cmp    eax,0x50
c0010943:	74 08                	je     c001094d <VgaText::incrementCursor(bool)+0x1f>
c0010945:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001094b:	eb 33                	jmp    c0010980 <VgaText::incrementCursor(bool)+0x52>
c001094d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010953:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001095d:	8d 50 01             	lea    edx,[eax+0x1]
c0010960:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010966:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001096c:	75 12                	jne    c0010980 <VgaText::incrementCursor(bool)+0x52>
c001096e:	83 ec 0c             	sub    esp,0xc
c0010971:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010977:	53                   	push   ebx
c0010978:	e8 3d fe ff ff       	call   c00107ba <VgaText::scrollScreen()>
c001097d:	83 c4 10             	add    esp,0x10
c0010980:	89 f0                	mov    eax,esi
c0010982:	84 c0                	test   al,al
c0010984:	74 0c                	je     c0010992 <VgaText::incrementCursor(bool)+0x64>
c0010986:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001098a:	5a                   	pop    edx
c001098b:	5b                   	pop    ebx
c001098c:	5e                   	pop    esi
c001098d:	e9 da fc ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010992:	58                   	pop    eax
c0010993:	5b                   	pop    ebx
c0010994:	5e                   	pop    esi
c0010995:	c3                   	ret    

c0010996 <VgaText::updateRAMUsageDisplay(int)>:
c0010996:	56                   	push   esi
c0010997:	8b 35 40 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d440
c001099d:	53                   	push   ebx
c001099e:	bb 0a 00 00 00       	mov    ebx,0xa
c00109a3:	6a 0f                	push   0xf
c00109a5:	6a 00                	push   0x0
c00109a7:	e8 fc fd ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ac:	5a                   	pop    edx
c00109ad:	59                   	pop    ecx
c00109ae:	0f b6 c8             	movzx  ecx,al
c00109b1:	51                   	push   ecx
c00109b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b6:	99                   	cdq    
c00109b7:	f7 fb                	idiv   ebx
c00109b9:	89 d3                	mov    ebx,edx
c00109bb:	83 c0 30             	add    eax,0x30
c00109be:	83 c3 30             	add    ebx,0x30
c00109c1:	0f be c0             	movsx  eax,al
c00109c4:	0f b6 db             	movzx  ebx,bl
c00109c7:	50                   	push   eax
c00109c8:	e8 81 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109cd:	5a                   	pop    edx
c00109ce:	5a                   	pop    edx
c00109cf:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109d6:	51                   	push   ecx
c00109d7:	53                   	push   ebx
c00109d8:	e8 71 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109dd:	5b                   	pop    ebx
c00109de:	5a                   	pop    edx
c00109df:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109e6:	51                   	push   ecx
c00109e7:	6a 25                	push   0x25
c00109e9:	e8 60 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c00109ee:	59                   	pop    ecx
c00109ef:	5b                   	pop    ebx
c00109f0:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109f7:	5b                   	pop    ebx
c00109f8:	5e                   	pop    esi
c00109f9:	c3                   	ret    

c00109fa <VgaText::updateDiskUsage()>:
c00109fa:	55                   	push   ebp
c00109fb:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a00:	57                   	push   edi
c0010a01:	8b 3d 40 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d440
c0010a07:	56                   	push   esi
c0010a08:	53                   	push   ebx
c0010a09:	6a 0f                	push   0xf
c0010a0b:	6a 00                	push   0x0
c0010a0d:	e8 96 fd ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010a12:	5a                   	pop    edx
c0010a13:	0f b6 d8             	movzx  ebx,al
c0010a16:	59                   	pop    ecx
c0010a17:	8b 35 88 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032888
c0010a1d:	53                   	push   ebx
c0010a1e:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a23:	89 f0                	mov    eax,esi
c0010a25:	99                   	cdq    
c0010a26:	f7 fd                	idiv   ebp
c0010a28:	99                   	cdq    
c0010a29:	f7 f9                	idiv   ecx
c0010a2b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2e:	0f b6 c0             	movzx  eax,al
c0010a31:	50                   	push   eax
c0010a32:	e8 17 fe ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a37:	5d                   	pop    ebp
c0010a38:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a3d:	5a                   	pop    edx
c0010a3e:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a42:	53                   	push   ebx
c0010a43:	89 f0                	mov    eax,esi
c0010a45:	99                   	cdq    
c0010a46:	f7 fd                	idiv   ebp
c0010a48:	99                   	cdq    
c0010a49:	f7 f9                	idiv   ecx
c0010a4b:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4e:	0f b6 c0             	movzx  eax,al
c0010a51:	50                   	push   eax
c0010a52:	e8 f7 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a57:	5d                   	pop    ebp
c0010a58:	bd 64 00 00 00       	mov    ebp,0x64
c0010a5d:	5a                   	pop    edx
c0010a5e:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a65:	53                   	push   ebx
c0010a66:	89 f0                	mov    eax,esi
c0010a68:	99                   	cdq    
c0010a69:	f7 fd                	idiv   ebp
c0010a6b:	99                   	cdq    
c0010a6c:	f7 f9                	idiv   ecx
c0010a6e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a71:	0f b6 c0             	movzx  eax,al
c0010a74:	50                   	push   eax
c0010a75:	e8 d4 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a7a:	5d                   	pop    ebp
c0010a7b:	5a                   	pop    edx
c0010a7c:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a83:	53                   	push   ebx
c0010a84:	89 f0                	mov    eax,esi
c0010a86:	99                   	cdq    
c0010a87:	f7 f9                	idiv   ecx
c0010a89:	89 d6                	mov    esi,edx
c0010a8b:	99                   	cdq    
c0010a8c:	f7 f9                	idiv   ecx
c0010a8e:	8d 42 30             	lea    eax,[edx+0x30]
c0010a91:	0f b6 c0             	movzx  eax,al
c0010a94:	50                   	push   eax
c0010a95:	e8 b4 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9a:	5d                   	pop    ebp
c0010a9b:	5a                   	pop    edx
c0010a9c:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010aa3:	53                   	push   ebx
c0010aa4:	8d 46 30             	lea    eax,[esi+0x30]
c0010aa7:	0f b6 f0             	movzx  esi,al
c0010aaa:	56                   	push   esi
c0010aab:	e8 9e fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab0:	5e                   	pop    esi
c0010ab1:	8b 35 84 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032884
c0010ab7:	5d                   	pop    ebp
c0010ab8:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010abf:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ac4:	53                   	push   ebx
c0010ac5:	89 f0                	mov    eax,esi
c0010ac7:	99                   	cdq    
c0010ac8:	f7 fd                	idiv   ebp
c0010aca:	99                   	cdq    
c0010acb:	f7 f9                	idiv   ecx
c0010acd:	8d 42 30             	lea    eax,[edx+0x30]
c0010ad0:	0f b6 c0             	movzx  eax,al
c0010ad3:	50                   	push   eax
c0010ad4:	e8 75 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad9:	5a                   	pop    edx
c0010ada:	5d                   	pop    ebp
c0010adb:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ae2:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ae7:	53                   	push   ebx
c0010ae8:	89 f0                	mov    eax,esi
c0010aea:	99                   	cdq    
c0010aeb:	f7 fd                	idiv   ebp
c0010aed:	99                   	cdq    
c0010aee:	f7 f9                	idiv   ecx
c0010af0:	8d 42 30             	lea    eax,[edx+0x30]
c0010af3:	0f b6 c0             	movzx  eax,al
c0010af6:	50                   	push   eax
c0010af7:	e8 52 fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010afc:	5a                   	pop    edx
c0010afd:	5d                   	pop    ebp
c0010afe:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010b05:	bd 64 00 00 00       	mov    ebp,0x64
c0010b0a:	53                   	push   ebx
c0010b0b:	89 f0                	mov    eax,esi
c0010b0d:	99                   	cdq    
c0010b0e:	f7 fd                	idiv   ebp
c0010b10:	99                   	cdq    
c0010b11:	f7 f9                	idiv   ecx
c0010b13:	83 c2 30             	add    edx,0x30
c0010b16:	0f b6 d2             	movzx  edx,dl
c0010b19:	52                   	push   edx
c0010b1a:	e8 2f fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1f:	5a                   	pop    edx
c0010b20:	5d                   	pop    ebp
c0010b21:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b28:	53                   	push   ebx
c0010b29:	89 f0                	mov    eax,esi
c0010b2b:	99                   	cdq    
c0010b2c:	f7 f9                	idiv   ecx
c0010b2e:	89 d6                	mov    esi,edx
c0010b30:	99                   	cdq    
c0010b31:	f7 f9                	idiv   ecx
c0010b33:	8d 42 30             	lea    eax,[edx+0x30]
c0010b36:	0f b6 c0             	movzx  eax,al
c0010b39:	50                   	push   eax
c0010b3a:	e8 0f fd ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b3f:	5a                   	pop    edx
c0010b40:	59                   	pop    ecx
c0010b41:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b48:	53                   	push   ebx
c0010b49:	8d 46 30             	lea    eax,[esi+0x30]
c0010b4c:	0f b6 f0             	movzx  esi,al
c0010b4f:	56                   	push   esi
c0010b50:	e8 f9 fc ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010b55:	5b                   	pop    ebx
c0010b56:	5e                   	pop    esi
c0010b57:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b5e:	5b                   	pop    ebx
c0010b5f:	5e                   	pop    esi
c0010b60:	5f                   	pop    edi
c0010b61:	5d                   	pop    ebp
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <VgaText::updateTitle()>:
c0010b64:	53                   	push   ebx
c0010b65:	31 c0                	xor    eax,eax
c0010b67:	83 ec 58             	sub    esp,0x58
c0010b6a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b6e:	89 e1                	mov    ecx,esp
c0010b70:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b74:	40                   	inc    eax
c0010b75:	83 f8 50             	cmp    eax,0x50
c0010b78:	75 f6                	jne    c0010b70 <VgaText::updateTitle()+0xc>
c0010b7a:	31 c0                	xor    eax,eax
c0010b7c:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b83:	84 db                	test   bl,bl
c0010b85:	74 06                	je     c0010b8d <VgaText::updateTitle()+0x29>
c0010b87:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b8a:	40                   	inc    eax
c0010b8b:	eb ef                	jmp    c0010b7c <VgaText::updateTitle()+0x18>
c0010b8d:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b93:	85 c0                	test   eax,eax
c0010b95:	74 09                	je     c0010ba0 <VgaText::updateTitle()+0x3c>
c0010b97:	53                   	push   ebx
c0010b98:	53                   	push   ebx
c0010b99:	51                   	push   ecx
c0010b9a:	52                   	push   edx
c0010b9b:	ff d0                	call   eax
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	e8 55 fe ff ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0010ba5:	83 c4 58             	add    esp,0x58
c0010ba8:	5b                   	pop    ebx
c0010ba9:	c3                   	ret    

c0010baa <VgaText::setTitleTextColour(VgaColour)>:
c0010baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bb2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010bb8:	eb aa                	jmp    c0010b64 <VgaText::updateTitle()>

c0010bba <VgaText::setTitleColour(VgaColour)>:
c0010bba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bbe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bc2:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010bc8:	eb 9a                	jmp    c0010b64 <VgaText::updateTitle()>

c0010bca <VgaText::setTitle(char*)>:
c0010bca:	53                   	push   ebx
c0010bcb:	83 ec 10             	sub    esp,0x10
c0010bce:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd6:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bdc:	50                   	push   eax
c0010bdd:	e8 52 fc fe ff       	call   c0000834 <strcpy>
c0010be2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010be6:	83 c4 18             	add    esp,0x18
c0010be9:	5b                   	pop    ebx
c0010bea:	e9 75 ff ff ff       	jmp    c0010b64 <VgaText::updateTitle()>
c0010bef:	90                   	nop

c0010bf0 <VgaText::decrementCursor(bool)>:
c0010bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bf8:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bfe:	85 c0                	test   eax,eax
c0010c00:	74 07                	je     c0010c09 <VgaText::decrementCursor(bool)+0x19>
c0010c02:	48                   	dec    eax
c0010c03:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010c09:	84 c9                	test   cl,cl
c0010c0b:	74 09                	je     c0010c16 <VgaText::decrementCursor(bool)+0x26>
c0010c0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010c11:	e9 56 fa ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010c16:	c3                   	ret    
c0010c17:	90                   	nop

c0010c18 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010c18:	53                   	push   ebx
c0010c19:	83 ec 08             	sub    esp,0x8
c0010c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c20:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c24:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c28:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c2c:	3c 07                	cmp    al,0x7
c0010c2e:	75 2a                	jne    c0010c5a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c30:	a1 9c e6 02 c0       	mov    eax,ds:0xc002e69c
c0010c35:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c3d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c45:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c4d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c51:	83 c4 08             	add    esp,0x8
c0010c54:	5b                   	pop    ebx
c0010c55:	e9 c4 31 00 00       	jmp    c0013e1e <Buzzer::beep(int, int, bool)>
c0010c5a:	3c 0d                	cmp    al,0xd
c0010c5c:	75 0c                	jne    c0010c6a <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c5e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c68:	eb 3b                	jmp    c0010ca5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c6a:	3c 0a                	cmp    al,0xa
c0010c6c:	75 40                	jne    c0010cae <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c6e:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c74:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c7e:	8d 50 01             	lea    edx,[eax+0x1]
c0010c81:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c87:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c8d:	75 12                	jne    c0010ca1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c8f:	83 ec 0c             	sub    esp,0xc
c0010c92:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c98:	53                   	push   ebx
c0010c99:	e8 1c fb ff ff       	call   c00107ba <VgaText::scrollScreen()>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ca5:	83 c4 08             	add    esp,0x8
c0010ca8:	5b                   	pop    ebx
c0010ca9:	e9 be f9 ff ff       	jmp    c001066c <VgaText::updateCursor()>
c0010cae:	3c 08                	cmp    al,0x8
c0010cb0:	75 31                	jne    c0010ce3 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010cb2:	50                   	push   eax
c0010cb3:	50                   	push   eax
c0010cb4:	6a 01                	push   0x1
c0010cb6:	53                   	push   ebx
c0010cb7:	e8 34 ff ff ff       	call   c0010bf0 <VgaText::decrementCursor(bool)>
c0010cbc:	5a                   	pop    edx
c0010cbd:	59                   	pop    ecx
c0010cbe:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc4:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cca:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cd0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cd6:	6a 20                	push   0x20
c0010cd8:	53                   	push   ebx
c0010cd9:	e8 82 fb ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cde:	83 c4 28             	add    esp,0x28
c0010ce1:	5b                   	pop    ebx
c0010ce2:	c3                   	ret    
c0010ce3:	83 ec 08             	sub    esp,0x8
c0010ce6:	0f be c0             	movsx  eax,al
c0010ce9:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cef:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cf5:	51                   	push   ecx
c0010cf6:	52                   	push   edx
c0010cf7:	50                   	push   eax
c0010cf8:	53                   	push   ebx
c0010cf9:	e8 62 fb ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cfe:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010d02:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010d0a:	83 c4 28             	add    esp,0x28
c0010d0d:	5b                   	pop    ebx
c0010d0e:	e9 1b fc ff ff       	jmp    c001092e <VgaText::incrementCursor(bool)>
c0010d13:	90                   	nop

c0010d14 <VgaText::isShowingCursor()>:
c0010d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d18:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010d1e:	c3                   	ret    
c0010d1f:	90                   	nop

c0010d20 <VgaText::isBlinkDisabled()>:
c0010d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d24:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d2a:	83 f0 01             	xor    eax,0x1
c0010d2d:	c3                   	ret    

c0010d2e <VgaText::setCursorHeight(int)>:
c0010d2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d36:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d3c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d47:	e9 3a f9 ff ff       	jmp    c0010686 <VgaText::showCursor(bool)>

c0010d4c <VgaText::getCursorHeight()>:
c0010d4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d50:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d56:	c3                   	ret    

c0010d57 <setActiveTerminal(VgaText*)>:
c0010d57:	53                   	push   ebx
c0010d58:	83 ec 08             	sub    esp,0x8
c0010d5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d5f:	85 db                	test   ebx,ebx
c0010d61:	75 11                	jne    c0010d74 <setActiveTerminal(VgaText*)+0x1d>
c0010d63:	c7 44 24 10 6c a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a46c
c0010d6b:	83 c4 08             	add    esp,0x8
c0010d6e:	5b                   	pop    ebx
c0010d6f:	e9 59 99 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>
c0010d74:	50                   	push   eax
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	68 7a a4 02 c0       	push   0xc002a47a
c0010d7c:	e8 9e 22 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0010d81:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0010d86:	83 c4 10             	add    esp,0x10
c0010d89:	85 c0                	test   eax,eax
c0010d8b:	74 0c                	je     c0010d99 <setActiveTerminal(VgaText*)+0x42>
c0010d8d:	83 ec 0c             	sub    esp,0xc
c0010d90:	50                   	push   eax
c0010d91:	e8 d6 f8 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010d96:	83 c4 10             	add    esp,0x10
c0010d99:	89 1d e4 e5 02 c0    	mov    DWORD PTR ds:0xc002e5e4,ebx
c0010d9f:	51                   	push   ecx
c0010da0:	51                   	push   ecx
c0010da1:	53                   	push   ebx
c0010da2:	68 92 a4 02 c0       	push   0xc002a492
c0010da7:	e8 73 22 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0010dac:	83 c4 0c             	add    esp,0xc
c0010daf:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010db5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010dbb:	53                   	push   ebx
c0010dbc:	e8 17 fb ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c0010dc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dc4:	e8 57 ff ff ff       	call   c0010d20 <VgaText::isBlinkDisabled()>
c0010dc9:	5a                   	pop    edx
c0010dca:	0f b6 c0             	movzx  eax,al
c0010dcd:	59                   	pop    ecx
c0010dce:	50                   	push   eax
c0010dcf:	53                   	push   ebx
c0010dd0:	e8 c1 f8 ff ff       	call   c0010696 <VgaText::disableBlink(bool)>
c0010dd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd8:	e8 6f ff ff ff       	call   c0010d4c <VgaText::getCursorHeight()>
c0010ddd:	5a                   	pop    edx
c0010dde:	59                   	pop    ecx
c0010ddf:	50                   	push   eax
c0010de0:	53                   	push   ebx
c0010de1:	e8 48 ff ff ff       	call   c0010d2e <VgaText::setCursorHeight(int)>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010df0:	75 0a                	jne    c0010dfc <setActiveTerminal(VgaText*)+0xa5>
c0010df2:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dfc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010e00:	83 c4 08             	add    esp,0x8
c0010e03:	5b                   	pop    ebx
c0010e04:	e9 0f f8 ff ff       	jmp    c0010618 <VgaText::load()>

c0010e09 <doTerminalCycle()>:
c0010e09:	83 ec 18             	sub    esp,0x18
c0010e0c:	a1 e0 e5 02 c0       	mov    eax,ds:0xc002e5e0
c0010e11:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010e17:	50                   	push   eax
c0010e18:	a3 e0 e5 02 c0       	mov    ds:0xc002e5e0,eax
c0010e1d:	e8 35 ff ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c0010e22:	83 c4 1c             	add    esp,0x1c
c0010e25:	c3                   	ret    

c0010e26 <VgaText::doUpdate()>:
c0010e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e2a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e30:	85 c0                	test   eax,eax
c0010e32:	74 02                	je     c0010e36 <VgaText::doUpdate()+0x10>
c0010e34:	ff e0                	jmp    eax
c0010e36:	c3                   	ret    
c0010e37:	90                   	nop

c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e38:	55                   	push   ebp
c0010e39:	57                   	push   edi
c0010e3a:	56                   	push   esi
c0010e3b:	53                   	push   ebx
c0010e3c:	83 ec 1c             	sub    esp,0x1c
c0010e3f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e43:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e48:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e4f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e52:	50                   	push   eax
c0010e53:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e58:	50                   	push   eax
c0010e59:	e8 4a f9 ff ff       	call   c00107a8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e5e:	59                   	pop    ecx
c0010e5f:	0f b6 c0             	movzx  eax,al
c0010e62:	5b                   	pop    ebx
c0010e63:	31 c9                	xor    ecx,ecx
c0010e65:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e6d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e71:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e7b:	0f b7 db             	movzx  ebx,bx
c0010e7e:	01 db                	add    ebx,ebx
c0010e80:	01 fb                	add    ebx,edi
c0010e82:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e85:	84 c0                	test   al,al
c0010e87:	0f 84 38 01 00 00    	je     c0010fc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e8d:	3c 0d                	cmp    al,0xd
c0010e8f:	75 0f                	jne    c0010ea0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e91:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e9b:	e9 1f 01 00 00       	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ea0:	3c 0a                	cmp    al,0xa
c0010ea2:	75 5b                	jne    c0010eff <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ea4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010eaa:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010eb4:	8d 48 01             	lea    ecx,[eax+0x1]
c0010eb7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ebd:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010ec3:	75 12                	jne    c0010ed7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ec5:	83 ec 0c             	sub    esp,0xc
c0010ec8:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ece:	55                   	push   ebp
c0010ecf:	e8 e6 f8 ff ff       	call   c00107ba <VgaText::scrollScreen()>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	83 ec 0c             	sub    esp,0xc
c0010eda:	55                   	push   ebp
c0010edb:	e8 8c f7 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010ee0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ee8:	83 c4 10             	add    esp,0x10
c0010eeb:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ef1:	31 c9                	xor    ecx,ecx
c0010ef3:	0f b7 db             	movzx  ebx,bx
c0010ef6:	01 db                	add    ebx,ebx
c0010ef8:	01 fb                	add    ebx,edi
c0010efa:	e9 c0 00 00 00       	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010eff:	3c 08                	cmp    al,0x8
c0010f01:	75 4e                	jne    c0010f51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010f03:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f07:	53                   	push   ebx
c0010f08:	53                   	push   ebx
c0010f09:	6a 01                	push   0x1
c0010f0b:	55                   	push   ebp
c0010f0c:	e8 df fc ff ff       	call   c0010bf0 <VgaText::decrementCursor(bool)>
c0010f11:	58                   	pop    eax
c0010f12:	5a                   	pop    edx
c0010f13:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f19:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f1f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f25:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f2b:	6a 20                	push   0x20
c0010f2d:	55                   	push   ebp
c0010f2e:	e8 2d f9 ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f33:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f3b:	83 c4 20             	add    esp,0x20
c0010f3e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f44:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f48:	0f b7 db             	movzx  ebx,bx
c0010f4b:	01 db                	add    ebx,ebx
c0010f4d:	01 fb                	add    ebx,edi
c0010f4f:	eb 6e                	jmp    c0010fbf <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f51:	51                   	push   ecx
c0010f52:	51                   	push   ecx
c0010f53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f57:	50                   	push   eax
c0010f58:	e8 f1 f8 ff ff       	call   c001084e <VgaText::combineCharAndColour(char, unsigned char)>
c0010f5d:	83 c4 10             	add    esp,0x10
c0010f60:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f63:	39 2d e4 e5 02 c0    	cmp    DWORD PTR ds:0xc002e5e4,ebp
c0010f69:	75 2a                	jne    c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f6b:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f71:	85 c0                	test   eax,eax
c0010f73:	74 20                	je     c0010f95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f75:	52                   	push   edx
c0010f76:	52                   	push   edx
c0010f77:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f7d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f8b:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f8e:	51                   	push   ecx
c0010f8f:	55                   	push   ebp
c0010f90:	ff d0                	call   eax
c0010f92:	83 c4 20             	add    esp,0x20
c0010f95:	83 c3 02             	add    ebx,0x2
c0010f98:	50                   	push   eax
c0010f99:	50                   	push   eax
c0010f9a:	6a 00                	push   0x0
c0010f9c:	55                   	push   ebp
c0010f9d:	e8 8c f9 ff ff       	call   c001092e <VgaText::incrementCursor(bool)>
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010fac:	75 0f                	jne    c0010fbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010fae:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010fb6:	0f b7 db             	movzx  ebx,bx
c0010fb9:	01 db                	add    ebx,ebx
c0010fbb:	01 fb                	add    ebx,edi
c0010fbd:	b1 01                	mov    cl,0x1
c0010fbf:	46                   	inc    esi
c0010fc0:	e9 bd fe ff ff       	jmp    c0010e82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fc5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fc9:	83 ec 0c             	sub    esp,0xc
c0010fcc:	55                   	push   ebp
c0010fcd:	e8 9a f6 ff ff       	call   c001066c <VgaText::updateCursor()>
c0010fd2:	83 c4 10             	add    esp,0x10
c0010fd5:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fd9:	84 c9                	test   cl,cl
c0010fdb:	74 0c                	je     c0010fe9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fdd:	83 ec 0c             	sub    esp,0xc
c0010fe0:	55                   	push   ebp
c0010fe1:	e8 40 fe ff ff       	call   c0010e26 <VgaText::doUpdate()>
c0010fe6:	83 c4 10             	add    esp,0x10
c0010fe9:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010ff0:	83 c4 1c             	add    esp,0x1c
c0010ff3:	5b                   	pop    ebx
c0010ff4:	5e                   	pop    esi
c0010ff5:	5f                   	pop    edi
c0010ff6:	5d                   	pop    ebp
c0010ff7:	c3                   	ret    

c0010ff8 <VgaText::clearScreen()>:
c0010ff8:	57                   	push   edi
c0010ff9:	56                   	push   esi
c0010ffa:	31 f6                	xor    esi,esi
c0010ffc:	53                   	push   ebx
c0010ffd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011001:	52                   	push   edx
c0011002:	6a 00                	push   0x0
c0011004:	6a 00                	push   0x0
c0011006:	53                   	push   ebx
c0011007:	e8 cc f8 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001100c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001101c:	7e 26                	jle    c0011044 <VgaText::clearScreen()+0x4c>
c001101e:	31 ff                	xor    edi,edi
c0011020:	50                   	push   eax
c0011021:	50                   	push   eax
c0011022:	56                   	push   esi
c0011023:	57                   	push   edi
c0011024:	47                   	inc    edi
c0011025:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001102b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011031:	6a 20                	push   0x20
c0011033:	53                   	push   ebx
c0011034:	e8 27 f8 ff ff       	call   c0010860 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011039:	83 c4 20             	add    esp,0x20
c001103c:	83 ff 50             	cmp    edi,0x50
c001103f:	75 df                	jne    c0011020 <VgaText::clearScreen()+0x28>
c0011041:	46                   	inc    esi
c0011042:	eb d2                	jmp    c0011016 <VgaText::clearScreen()+0x1e>
c0011044:	83 ec 0c             	sub    esp,0xc
c0011047:	53                   	push   ebx
c0011048:	e8 d9 fd ff ff       	call   c0010e26 <VgaText::doUpdate()>
c001104d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011054:	83 c4 10             	add    esp,0x10
c0011057:	5b                   	pop    ebx
c0011058:	5e                   	pop    esi
c0011059:	5f                   	pop    edi
c001105a:	c3                   	ret    
c001105b:	90                   	nop

c001105c <VgaText::putchar(char)>:
c001105c:	56                   	push   esi
c001105d:	53                   	push   ebx
c001105e:	83 ec 14             	sub    esp,0x14
c0011061:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011065:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011069:	3c 5b                	cmp    al,0x5b
c001106b:	75 21                	jne    c001108e <VgaText::putchar(char)+0x32>
c001106d:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011074:	74 28                	je     c001109e <VgaText::putchar(char)+0x42>
c0011076:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001107f:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011089:	e9 e2 00 00 00       	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001108e:	3c 1b                	cmp    al,0x1b
c0011090:	75 0c                	jne    c001109e <VgaText::putchar(char)+0x42>
c0011092:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011099:	e9 d2 00 00 00       	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001109e:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00110a4:	84 c9                	test   cl,cl
c00110a6:	0f 84 ab 00 00 00    	je     c0011157 <VgaText::putchar(char)+0xfb>
c00110ac:	8d 50 c0             	lea    edx,[eax-0x40]
c00110af:	80 fa 3e             	cmp    dl,0x3e
c00110b2:	0f 87 82 00 00 00    	ja     c001113a <VgaText::putchar(char)+0xde>
c00110b8:	3c 6d                	cmp    al,0x6d
c00110ba:	75 4d                	jne    c0011109 <VgaText::putchar(char)+0xad>
c00110bc:	31 f6                	xor    esi,esi
c00110be:	31 d2                	xor    edx,edx
c00110c0:	31 c0                	xor    eax,eax
c00110c2:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110c8:	7e 30                	jle    c00110fa <VgaText::putchar(char)+0x9e>
c00110ca:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110d2:	80 fa 3b             	cmp    dl,0x3b
c00110d5:	75 17                	jne    c00110ee <VgaText::putchar(char)+0x92>
c00110d7:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110db:	50                   	push   eax
c00110dc:	53                   	push   ebx
c00110dd:	e8 ee f5 ff ff       	call   c00106d0 <VgaText::doANSI_SGR(int)>
c00110e2:	59                   	pop    ecx
c00110e3:	31 d2                	xor    edx,edx
c00110e5:	58                   	pop    eax
c00110e6:	31 c0                	xor    eax,eax
c00110e8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110ec:	eb 09                	jmp    c00110f7 <VgaText::putchar(char)+0x9b>
c00110ee:	6b c0 0a             	imul   eax,eax,0xa
c00110f1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110f5:	88 ca                	mov    dl,cl
c00110f7:	46                   	inc    esi
c00110f8:	eb c8                	jmp    c00110c2 <VgaText::putchar(char)+0x66>
c00110fa:	84 d2                	test   dl,dl
c00110fc:	74 31                	je     c001112f <VgaText::putchar(char)+0xd3>
c00110fe:	50                   	push   eax
c00110ff:	53                   	push   ebx
c0011100:	e8 cb f5 ff ff       	call   c00106d0 <VgaText::doANSI_SGR(int)>
c0011105:	58                   	pop    eax
c0011106:	5a                   	pop    edx
c0011107:	eb 26                	jmp    c001112f <VgaText::putchar(char)+0xd3>
c0011109:	3c 4a                	cmp    al,0x4a
c001110b:	75 22                	jne    c001112f <VgaText::putchar(char)+0xd3>
c001110d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0011114:	75 19                	jne    c001112f <VgaText::putchar(char)+0xd3>
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	53                   	push   ebx
c001111a:	e8 d9 fe ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c001111f:	83 c4 0c             	add    esp,0xc
c0011122:	6a 00                	push   0x0
c0011124:	6a 00                	push   0x0
c0011126:	53                   	push   ebx
c0011127:	e8 ac f7 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c001112c:	83 c4 10             	add    esp,0x10
c001112f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011138:	eb 36                	jmp    c0011170 <VgaText::putchar(char)+0x114>
c001113a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0011140:	83 fa 0e             	cmp    edx,0xe
c0011143:	7f 2b                	jg     c0011170 <VgaText::putchar(char)+0x114>
c0011145:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011148:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001114e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011155:	eb 19                	jmp    c0011170 <VgaText::putchar(char)+0x114>
c0011157:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001115d:	0f be c0             	movsx  eax,al
c0011160:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011166:	50                   	push   eax
c0011167:	53                   	push   ebx
c0011168:	e8 ab fa ff ff       	call   c0010c18 <VgaText::putchar(char, VgaColour, VgaColour)>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	83 c4 14             	add    esp,0x14
c0011173:	5b                   	pop    ebx
c0011174:	5e                   	pop    esi
c0011175:	c3                   	ret    

c0011176 <VgaText::puts(char const*)>:
c0011176:	53                   	push   ebx
c0011177:	83 ec 08             	sub    esp,0x8
c001117a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001117e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011181:	84 c0                	test   al,al
c0011183:	74 12                	je     c0011197 <VgaText::puts(char const*)+0x21>
c0011185:	43                   	inc    ebx
c0011186:	51                   	push   ecx
c0011187:	51                   	push   ecx
c0011188:	50                   	push   eax
c0011189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118d:	e8 ca fe ff ff       	call   c001105c <VgaText::putchar(char)>
c0011192:	83 c4 10             	add    esp,0x10
c0011195:	eb e7                	jmp    c001117e <VgaText::puts(char const*)+0x8>
c0011197:	83 c4 08             	add    esp,0x8
c001119a:	5b                   	pop    ebx
c001119b:	c3                   	ret    

c001119c <VgaText::putx(unsigned int)>:
c001119c:	57                   	push   edi
c001119d:	b9 11 00 00 00       	mov    ecx,0x11
c00111a2:	56                   	push   esi
c00111a3:	be ae a4 02 c0       	mov    esi,0xc002a4ae
c00111a8:	53                   	push   ebx
c00111a9:	83 ec 20             	sub    esp,0x20
c00111ac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00111b0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00111b4:	fc                   	cld    
c00111b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111b7:	be 08 00 00 00       	mov    esi,0x8
c00111bc:	50                   	push   eax
c00111bd:	50                   	push   eax
c00111be:	89 d8                	mov    eax,ebx
c00111c0:	c1 e3 04             	shl    ebx,0x4
c00111c3:	c1 e8 1c             	shr    eax,0x1c
c00111c6:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111cb:	50                   	push   eax
c00111cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d0:	e8 87 fe ff ff       	call   c001105c <VgaText::putchar(char)>
c00111d5:	83 c4 10             	add    esp,0x10
c00111d8:	4e                   	dec    esi
c00111d9:	75 e1                	jne    c00111bc <VgaText::putx(unsigned int)+0x20>
c00111db:	83 c4 20             	add    esp,0x20
c00111de:	5b                   	pop    ebx
c00111df:	5e                   	pop    esi
c00111e0:	5f                   	pop    edi
c00111e1:	c3                   	ret    

c00111e2 <VgaText::VgaText(char const*)>:
c00111e2:	57                   	push   edi
c00111e3:	56                   	push   esi
c00111e4:	53                   	push   ebx
c00111e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	6a 00                	push   0x0
c00111ee:	50                   	push   eax
c00111ef:	e8 6e 05 00 00       	call   c0011762 <UnixFile::UnixFile(int)>
c00111f4:	83 c4 10             	add    esp,0x10
c00111f7:	ba 14 a5 02 c0       	mov    edx,0xc002a514
c00111fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011200:	89 10                	mov    DWORD PTR [eax],edx
c0011202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011206:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c001121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011222:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011238:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0011250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011254:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001125b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001126a:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0011270:	bb c0 e5 02 c0       	mov    ebx,0xc002e5c0
c0011275:	b8 08 00 00 00       	mov    eax,0x8
c001127a:	fc                   	cld    
c001127b:	89 d7                	mov    edi,edx
c001127d:	89 de                	mov    esi,ebx
c001127f:	89 c1                	mov    ecx,eax
c0011281:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011287:	05 1e 10 00 00       	add    eax,0x101e
c001128c:	83 ec 08             	sub    esp,0x8
c001128f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011293:	50                   	push   eax
c0011294:	e8 9b f5 fe ff       	call   c0000834 <strcpy>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112a0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00112aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ae:	83 c0 0c             	add    eax,0xc
c00112b1:	83 ec 04             	sub    esp,0x4
c00112b4:	68 00 0f 00 00       	push   0xf00
c00112b9:	6a 00                	push   0x0
c00112bb:	50                   	push   eax
c00112bc:	e8 b7 f4 fe ff       	call   c0000778 <memset>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	83 ec 04             	sub    esp,0x4
c00112c7:	6a 00                	push   0x0
c00112c9:	6a 07                	push   0x7
c00112cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cf:	e8 b4 f4 ff ff       	call   c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112d4:	83 c4 10             	add    esp,0x10
c00112d7:	83 ec 08             	sub    esp,0x8
c00112da:	6a 02                	push   0x2
c00112dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e0:	e8 49 fa ff ff       	call   c0010d2e <VgaText::setCursorHeight(int)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	83 ec 04             	sub    esp,0x4
c00112eb:	6a 00                	push   0x0
c00112ed:	6a 00                	push   0x0
c00112ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f3:	e8 e0 f5 ff ff       	call   c00108d8 <VgaText::setCursor(int, int)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	83 ec 08             	sub    esp,0x8
c00112fe:	6a 01                	push   0x1
c0011300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011304:	e8 7d f3 ff ff       	call   c0010686 <VgaText::showCursor(bool)>
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	83 ec 08             	sub    esp,0x8
c001130f:	6a 01                	push   0x1
c0011311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011315:	e8 7c f3 ff ff       	call   c0010696 <VgaText::disableBlink(bool)>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	83 ec 0c             	sub    esp,0xc
c0011320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011324:	e8 cf fc ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011330:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133b:	05 9e 10 00 00       	add    eax,0x109e
c0011340:	83 ec 04             	sub    esp,0x4
c0011343:	68 96 00 00 00       	push   0x96
c0011348:	6a 00                	push   0x0
c001134a:	50                   	push   eax
c001134b:	e8 28 f4 fe ff       	call   c0000778 <memset>
c0011350:	83 c4 10             	add    esp,0x10
c0011353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011357:	05 34 11 00 00       	add    eax,0x1134
c001135c:	83 ec 04             	sub    esp,0x4
c001135f:	68 2c 01 00 00       	push   0x12c
c0011364:	6a 00                	push   0x0
c0011366:	50                   	push   eax
c0011367:	e8 0c f4 fe ff       	call   c0000778 <memset>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	90                   	nop
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	5f                   	pop    edi
c0011373:	c3                   	ret    

c0011374 <VgaText::receiveKey(unsigned char)>:
c0011374:	55                   	push   ebp
c0011375:	57                   	push   edi
c0011376:	56                   	push   esi
c0011377:	53                   	push   ebx
c0011378:	83 ec 1c             	sub    esp,0x1c
c001137b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001137f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011383:	84 db                	test   bl,bl
c0011385:	0f 84 c9 00 00 00    	je     c0011454 <VgaText::receiveKey(unsigned char)+0xe0>
c001138b:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0011391:	80 fb 08             	cmp    bl,0x8
c0011394:	75 2c                	jne    c00113c2 <VgaText::receiveKey(unsigned char)+0x4e>
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	57                   	push   edi
c001139a:	e8 f5 f3 fe ff       	call   c0000794 <strlen>
c001139f:	83 c4 10             	add    esp,0x10
c00113a2:	85 c0                	test   eax,eax
c00113a4:	74 41                	je     c00113e7 <VgaText::receiveKey(unsigned char)+0x73>
c00113a6:	50                   	push   eax
c00113a7:	50                   	push   eax
c00113a8:	6a 08                	push   0x8
c00113aa:	56                   	push   esi
c00113ab:	e8 ac fc ff ff       	call   c001105c <VgaText::putchar(char)>
c00113b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113b3:	e8 dc f3 fe ff       	call   c0000794 <strlen>
c00113b8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c00113c0:	eb 22                	jmp    c00113e4 <VgaText::receiveKey(unsigned char)+0x70>
c00113c2:	0f be c3             	movsx  eax,bl
c00113c5:	52                   	push   edx
c00113c6:	52                   	push   edx
c00113c7:	50                   	push   eax
c00113c8:	56                   	push   esi
c00113c9:	e8 8e fc ff ff       	call   c001105c <VgaText::putchar(char)>
c00113ce:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113d7:	59                   	pop    ecx
c00113d8:	5d                   	pop    ebp
c00113d9:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113dd:	50                   	push   eax
c00113de:	57                   	push   edi
c00113df:	e8 90 f5 fe ff       	call   c0000974 <strcat>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113ee:	75 05                	jne    c00113f5 <VgaText::receiveKey(unsigned char)+0x81>
c00113f0:	80 fb 0a             	cmp    bl,0xa
c00113f3:	75 53                	jne    c0011448 <VgaText::receiveKey(unsigned char)+0xd4>
c00113f5:	83 ec 0c             	sub    esp,0xc
c00113f8:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113fe:	53                   	push   ebx
c00113ff:	e8 90 f3 fe ff       	call   c0000794 <strlen>
c0011404:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011407:	89 c5                	mov    ebp,eax
c0011409:	e8 86 f3 fe ff       	call   c0000794 <strlen>
c001140e:	83 c4 10             	add    esp,0x10
c0011411:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011415:	3d 2c 01 00 00       	cmp    eax,0x12c
c001141a:	76 10                	jbe    c001142c <VgaText::receiveKey(unsigned char)+0xb8>
c001141c:	83 ec 0c             	sub    esp,0xc
c001141f:	68 bf a4 02 c0       	push   0xc002a4bf
c0011424:	e8 a4 92 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	50                   	push   eax
c001142d:	50                   	push   eax
c001142e:	57                   	push   edi
c001142f:	53                   	push   ebx
c0011430:	e8 3f f5 fe ff       	call   c0000974 <strcat>
c0011435:	83 c4 0c             	add    esp,0xc
c0011438:	68 96 00 00 00       	push   0x96
c001143d:	6a 00                	push   0x0
c001143f:	57                   	push   edi
c0011440:	e8 33 f3 fe ff       	call   c0000778 <memset>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	83 ec 0c             	sub    esp,0xc
c001144b:	56                   	push   esi
c001144c:	e8 d5 f9 ff ff       	call   c0010e26 <VgaText::doUpdate()>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	83 c4 1c             	add    esp,0x1c
c0011457:	5b                   	pop    ebx
c0011458:	5e                   	pop    esi
c0011459:	5f                   	pop    edi
c001145a:	5d                   	pop    ebp
c001145b:	c3                   	ret    

c001145c <VgaText::write(unsigned long long, void*, int*)>:
c001145c:	55                   	push   ebp
c001145d:	57                   	push   edi
c001145e:	56                   	push   esi
c001145f:	53                   	push   ebx
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011467:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001146b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001146f:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011476:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011479:	39 eb                	cmp    ebx,ebp
c001147b:	74 13                	je     c0011490 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001147d:	43                   	inc    ebx
c001147e:	50                   	push   eax
c001147f:	50                   	push   eax
c0011480:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011484:	50                   	push   eax
c0011485:	56                   	push   esi
c0011486:	e8 d1 fb ff ff       	call   c001105c <VgaText::putchar(char)>
c001148b:	83 c4 10             	add    esp,0x10
c001148e:	eb e9                	jmp    c0011479 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011490:	83 ec 0c             	sub    esp,0xc
c0011493:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c001149a:	56                   	push   esi
c001149b:	e8 86 f9 ff ff       	call   c0010e26 <VgaText::doUpdate()>
c00114a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114a4:	89 38                	mov    DWORD PTR [eax],edi
c00114a6:	83 c4 1c             	add    esp,0x1c
c00114a9:	31 c0                	xor    eax,eax
c00114ab:	5b                   	pop    ebx
c00114ac:	5e                   	pop    esi
c00114ad:	5f                   	pop    edi
c00114ae:	5d                   	pop    ebp
c00114af:	c3                   	ret    

c00114b0 <newTerminal(char*)>:
c00114b0:	83 ec 28             	sub    esp,0x28
c00114b3:	68 60 12 00 00       	push   0x1260
c00114b8:	e8 86 e3 ff ff       	call   c000f843 <malloc>
c00114bd:	5a                   	pop    edx
c00114be:	59                   	pop    ecx
c00114bf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00114c3:	50                   	push   eax
c00114c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114c8:	e8 15 fd ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c00114cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d1:	83 c4 2c             	add    esp,0x2c
c00114d4:	c3                   	ret    
c00114d5:	90                   	nop

c00114d6 <TSS::TSS()>:
c00114d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114e1:	90                   	nop
c00114e2:	c3                   	ret    
c00114e3:	90                   	nop

c00114e4 <TSS::setESP(unsigned long)>:
c00114e4:	55                   	push   ebp
c00114e5:	89 e5                	mov    ebp,esp
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114f3:	90                   	nop
c00114f4:	5d                   	pop    ebp
c00114f5:	c3                   	ret    

c00114f6 <TSS::flush()>:
c00114f6:	55                   	push   ebp
c00114f7:	89 e5                	mov    ebp,esp
c00114f9:	83 ec 10             	sub    esp,0x10
c00114fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0011501:	83 c8 03             	or     eax,0x3
c0011504:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011508:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001150c:	66 89 d0             	mov    ax,dx
c001150f:	0f 00 d8             	ltr    ax
c0011512:	90                   	nop
c0011513:	c9                   	leave  
c0011514:	c3                   	ret    
c0011515:	90                   	nop

c0011516 <TSS::setup(unsigned long, unsigned long)>:
c0011516:	55                   	push   ebp
c0011517:	89 e5                	mov    ebp,esp
c0011519:	83 ec 18             	sub    esp,0x18
c001151c:	83 ec 0c             	sub    esp,0xc
c001151f:	6a 68                	push   0x68
c0011521:	e8 1d e3 ff ff       	call   c000f843 <malloc>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	89 c2                	mov    edx,eax
c001152b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001152e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011531:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011537:	83 ec 04             	sub    esp,0x4
c001153a:	6a 68                	push   0x68
c001153c:	6a 00                	push   0x0
c001153e:	50                   	push   eax
c001153f:	e8 34 f2 fe ff       	call   c0000778 <memset>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011559:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001155f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011565:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011568:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011571:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011595:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ad:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00115b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00115bc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00115bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115c8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115d1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115de:	0f 20 da             	mov    edx,cr3
c00115e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115e7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	50                   	push   eax
c00115f4:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115f7:	50                   	push   eax
c00115f8:	e8 21 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	83 ec 08             	sub    esp,0x8
c0011603:	6a 68                	push   0x68
c0011605:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011608:	50                   	push   eax
c0011609:	e8 2c da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011615:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011618:	83 e0 0f             	and    eax,0xf
c001161b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001161e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011621:	83 c8 40             	or     eax,0x40
c0011624:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011627:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001162c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011632:	05 78 01 00 00       	add    eax,0x178
c0011637:	83 ec 04             	sub    esp,0x4
c001163a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001163d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011640:	50                   	push   eax
c0011641:	e8 28 da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011646:	83 c4 10             	add    esp,0x10
c0011649:	89 c2                	mov    edx,eax
c001164b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164e:	89 10                	mov    DWORD PTR [eax],edx
c0011650:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0011655:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001165b:	05 78 01 00 00       	add    eax,0x178
c0011660:	83 ec 0c             	sub    esp,0xc
c0011663:	50                   	push   eax
c0011664:	e8 49 da ff ff       	call   c000f0b2 <GDT::flush()>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001166f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011671:	83 ec 08             	sub    esp,0x8
c0011674:	50                   	push   eax
c0011675:	68 28 a5 02 c0       	push   0xc002a528
c001167a:	e8 a0 19 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001167f:	83 c4 10             	add    esp,0x10
c0011682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011685:	8b 00                	mov    eax,DWORD PTR [eax]
c0011687:	c9                   	leave  
c0011688:	c3                   	ret    
c0011689:	90                   	nop

c001168a <ReservedFilename::read(unsigned long long, void*, int*)>:
c001168a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001168e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011692:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011695:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001169a:	75 08                	jne    c00116a4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c001169c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116a2:	eb 38                	jmp    c00116dc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00116a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a9:	75 17                	jne    c00116c2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00116ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00116b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00116bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116bf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00116c2:	89 c1                	mov    ecx,eax
c00116c4:	83 e1 fd             	and    ecx,0xfffffffd
c00116c7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116cd:	74 cd                	je     c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116cf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116d4:	83 e0 ef             	and    eax,0xffffffef
c00116d7:	83 f8 08             	cmp    eax,0x8
c00116da:	76 c0                	jbe    c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116dc:	31 c0                	xor    eax,eax
c00116de:	c3                   	ret    
c00116df:	90                   	nop

c00116e0 <ReservedFilename::isAtty()>:
c00116e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116e7:	31 c0                	xor    eax,eax
c00116e9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116ef:	74 09                	je     c00116fa <ReservedFilename::isAtty()+0x1a>
c00116f1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116f7:	0f 94 c0             	sete   al
c00116fa:	c3                   	ret    
c00116fb:	90                   	nop

c00116fc <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011700:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011704:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011707:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001170b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011710:	75 08                	jne    c001171a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011712:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011718:	eb 3d                	jmp    c0011757 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001171a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001171f:	75 17                	jne    c0011738 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011726:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011729:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001172f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011731:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011735:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011738:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001173d:	75 04                	jne    c0011743 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001173f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011741:	eb 14                	jmp    c0011757 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011743:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011748:	74 c8                	je     c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001174a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001174f:	83 e0 ef             	and    eax,0xffffffef
c0011752:	83 f8 08             	cmp    eax,0x8
c0011755:	76 bb                	jbe    c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011757:	31 c0                	xor    eax,eax
c0011759:	c3                   	ret    

c001175a <UnixFile::getFileDescriptor()>:
c001175a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011761:	c3                   	ret    

c0011762 <UnixFile::UnixFile(int)>:
c0011762:	53                   	push   ebx
c0011763:	83 ec 28             	sub    esp,0x28
c0011766:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c001176b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001176f:	89 10                	mov    DWORD PTR [eax],edx
c0011771:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011779:	0f 8f 8c 01 00 00    	jg     c001190b <UnixFile::UnixFile(int)+0x1a9>
c001177f:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c0011784:	8d 50 01             	lea    edx,[eax+0x1]
c0011787:	89 15 a0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4a0,edx
c001178d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011791:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011794:	83 ec 08             	sub    esp,0x8
c0011797:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001179b:	68 78 e6 02 c0       	push   0xc002e678
c00117a0:	e8 6b 70 01 00       	call   c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	a0 74 e6 02 c0       	mov    al,ds:0xc002e674
c00117ad:	83 f0 01             	xor    eax,0x1
c00117b0:	84 c0                	test   al,al
c00117b2:	0f 84 54 01 00 00    	je     c001190c <UnixFile::UnixFile(int)+0x1aa>
c00117b8:	c6 05 74 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e674,0x1
c00117bf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117c7:	83 ec 0c             	sub    esp,0xc
c00117ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117ce:	e8 70 e0 ff ff       	call   c000f843 <malloc>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	89 c3                	mov    ebx,eax
c00117d8:	83 ec 08             	sub    esp,0x8
c00117db:	68 03 ff ff 0f       	push   0xfffff03
c00117e0:	53                   	push   ebx
c00117e1:	e8 2c 01 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00117e6:	83 c4 10             	add    esp,0x10
c00117e9:	89 1d 6c e6 02 c0    	mov    DWORD PTR ds:0xc002e66c,ebx
c00117ef:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117f7:	83 ec 0c             	sub    esp,0xc
c00117fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117fe:	e8 40 e0 ff ff       	call   c000f843 <malloc>
c0011803:	83 c4 10             	add    esp,0x10
c0011806:	89 c3                	mov    ebx,eax
c0011808:	83 ec 08             	sub    esp,0x8
c001180b:	68 01 ff ff 0f       	push   0xfffff01
c0011810:	53                   	push   ebx
c0011811:	e8 fc 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011816:	83 c4 10             	add    esp,0x10
c0011819:	89 1d 70 e6 02 c0    	mov    DWORD PTR ds:0xc002e670,ebx
c001181f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011827:	83 ec 0c             	sub    esp,0xc
c001182a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001182e:	e8 10 e0 ff ff       	call   c000f843 <malloc>
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	89 c3                	mov    ebx,eax
c0011838:	83 ec 08             	sub    esp,0x8
c001183b:	68 00 ff ff 0f       	push   0xfffff00
c0011840:	53                   	push   ebx
c0011841:	e8 cc 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011846:	83 c4 10             	add    esp,0x10
c0011849:	89 1d 64 e6 02 c0    	mov    DWORD PTR ds:0xc002e664,ebx
c001184f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001185e:	e8 e0 df ff ff       	call   c000f843 <malloc>
c0011863:	83 c4 10             	add    esp,0x10
c0011866:	89 c3                	mov    ebx,eax
c0011868:	83 ec 08             	sub    esp,0x8
c001186b:	68 02 ff ff 0f       	push   0xfffff02
c0011870:	53                   	push   ebx
c0011871:	e8 9c 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c0011876:	83 c4 10             	add    esp,0x10
c0011879:	89 1d 68 e6 02 c0    	mov    DWORD PTR ds:0xc002e668,ebx
c001187f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011887:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001188c:	7f 7e                	jg     c001190c <UnixFile::UnixFile(int)+0x1aa>
c001188e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011896:	83 ec 0c             	sub    esp,0xc
c0011899:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001189d:	e8 a1 df ff ff       	call   c000f843 <malloc>
c00118a2:	83 c4 10             	add    esp,0x10
c00118a5:	89 c3                	mov    ebx,eax
c00118a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118ab:	05 10 ff ff 0f       	add    eax,0xfffff10
c00118b0:	83 ec 08             	sub    esp,0x8
c00118b3:	50                   	push   eax
c00118b4:	53                   	push   ebx
c00118b5:	e8 58 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00118ba:	83 c4 10             	add    esp,0x10
c00118bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118c1:	89 1c 85 40 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19c0],ebx
c00118c8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118d0:	83 ec 0c             	sub    esp,0xc
c00118d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118d7:	e8 67 df ff ff       	call   c000f843 <malloc>
c00118dc:	83 c4 10             	add    esp,0x10
c00118df:	89 c3                	mov    ebx,eax
c00118e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118e5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118ea:	83 ec 08             	sub    esp,0x8
c00118ed:	50                   	push   eax
c00118ee:	53                   	push   ebx
c00118ef:	e8 1e 00 00 00       	call   c0011912 <ReservedFilename::ReservedFilename(int)>
c00118f4:	83 c4 10             	add    esp,0x10
c00118f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118fb:	89 1c 85 00 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a00],ebx
c0011902:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011906:	e9 7c ff ff ff       	jmp    c0011887 <UnixFile::UnixFile(int)+0x125>
c001190b:	90                   	nop
c001190c:	83 c4 28             	add    esp,0x28
c001190f:	5b                   	pop    ebx
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <ReservedFilename::ReservedFilename(int)>:
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011919:	83 ec 08             	sub    esp,0x8
c001191c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011920:	50                   	push   eax
c0011921:	e8 3c fe ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	ba 30 a6 02 c0       	mov    edx,0xc002a630
c001192e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011932:	89 10                	mov    DWORD PTR [eax],edx
c0011934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011938:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001193c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001193f:	90                   	nop
c0011940:	83 c4 0c             	add    esp,0xc
c0011943:	c3                   	ret    

c0011944 <UnixFile::~UnixFile()>:
c0011944:	83 ec 1c             	sub    esp,0x1c
c0011947:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c001194c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011950:	89 10                	mov    DWORD PTR [eax],edx
c0011952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011956:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011959:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001195e:	7f 73                	jg     c00119d3 <UnixFile::~UnixFile()+0x8f>
c0011960:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011968:	83 ec 0c             	sub    esp,0xc
c001196b:	68 78 e6 02 c0       	push   0xc002e678
c0011970:	e8 6f 6f 01 00       	call   c00288e4 <LinkedList<UnixFile>::getFirstElement()>
c0011975:	83 c4 10             	add    esp,0x10
c0011978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	68 78 e6 02 c0       	push   0xc002e678
c0011984:	e8 63 6f 01 00       	call   c00288ec <LinkedList<UnixFile>::removeFirst()>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011990:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011994:	74 40                	je     c00119d6 <UnixFile::~UnixFile()+0x92>
c0011996:	83 ec 08             	sub    esp,0x8
c0011999:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001199d:	68 78 e6 02 c0       	push   0xc002e678
c00119a2:	e8 69 6e 01 00       	call   c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00119ae:	8d 50 01             	lea    edx,[eax+0x1]
c00119b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119b5:	3d 88 13 00 00       	cmp    eax,0x1388
c00119ba:	0f 94 c0             	sete   al
c00119bd:	84 c0                	test   al,al
c00119bf:	74 a7                	je     c0011968 <UnixFile::~UnixFile()+0x24>
c00119c1:	83 ec 0c             	sub    esp,0xc
c00119c4:	68 ec a5 02 c0       	push   0xc002a5ec
c00119c9:	e8 ff 8c 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00119ce:	83 c4 10             	add    esp,0x10
c00119d1:	eb 95                	jmp    c0011968 <UnixFile::~UnixFile()+0x24>
c00119d3:	90                   	nop
c00119d4:	eb 01                	jmp    c00119d7 <UnixFile::~UnixFile()+0x93>
c00119d6:	90                   	nop
c00119d7:	90                   	nop
c00119d8:	83 c4 1c             	add    esp,0x1c
c00119db:	c3                   	ret    

c00119dc <UnixFile::~UnixFile()>:
c00119dc:	83 ec 0c             	sub    esp,0xc
c00119df:	83 ec 0c             	sub    esp,0xc
c00119e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119e6:	e8 59 ff ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00119eb:	83 c4 10             	add    esp,0x10
c00119ee:	83 ec 08             	sub    esp,0x8
c00119f1:	6a 0c                	push   0xc
c00119f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f7:	e8 43 15 00 00       	call   c0012f3f <operator delete(void*, unsigned long)>
c00119fc:	83 c4 10             	add    esp,0x10
c00119ff:	83 c4 0c             	add    esp,0xc
c0011a02:	c3                   	ret    
c0011a03:	90                   	nop

c0011a04 <ReservedFilename::~ReservedFilename()>:
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	ba 30 a6 02 c0       	mov    edx,0xc002a630
c0011a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a10:	89 10                	mov    DWORD PTR [eax],edx
c0011a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a16:	83 ec 0c             	sub    esp,0xc
c0011a19:	50                   	push   eax
c0011a1a:	e8 25 ff ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	90                   	nop
c0011a23:	83 c4 0c             	add    esp,0xc
c0011a26:	c3                   	ret    
c0011a27:	90                   	nop

c0011a28 <ReservedFilename::~ReservedFilename()>:
c0011a28:	83 ec 0c             	sub    esp,0xc
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a32:	e8 cd ff ff ff       	call   c0011a04 <ReservedFilename::~ReservedFilename()>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	83 ec 08             	sub    esp,0x8
c0011a3d:	6a 0c                	push   0xc
c0011a3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a43:	e8 f7 14 00 00       	call   c0012f3f <operator delete(void*, unsigned long)>
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	83 c4 0c             	add    esp,0xc
c0011a4e:	c3                   	ret    

c0011a4f <getFromFileDescriptor(int)>:
c0011a4f:	53                   	push   ebx
c0011a50:	83 ec 08             	sub    esp,0x8
c0011a53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a57:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a5d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a63:	7f 2c                	jg     c0011a91 <getFromFileDescriptor(int)+0x42>
c0011a65:	83 ec 0c             	sub    esp,0xc
c0011a68:	68 78 e6 02 c0       	push   0xc002e678
c0011a6d:	e8 72 6e 01 00       	call   c00288e4 <LinkedList<UnixFile>::getFirstElement()>
c0011a72:	83 c4 10             	add    esp,0x10
c0011a75:	85 c0                	test   eax,eax
c0011a77:	75 04                	jne    c0011a7d <getFromFileDescriptor(int)+0x2e>
c0011a79:	31 c0                	xor    eax,eax
c0011a7b:	eb 6e                	jmp    c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a7d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a80:	74 69                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a82:	52                   	push   edx
c0011a83:	52                   	push   edx
c0011a84:	50                   	push   eax
c0011a85:	68 78 e6 02 c0       	push   0xc002e678
c0011a8a:	e8 ff 6e 01 00       	call   c002898e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a8f:	eb e1                	jmp    c0011a72 <getFromFileDescriptor(int)+0x23>
c0011a91:	a1 6c e6 02 c0       	mov    eax,ds:0xc002e66c
c0011a96:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a9c:	74 4d                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011a9e:	a1 70 e6 02 c0       	mov    eax,ds:0xc002e670
c0011aa3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011aa9:	74 40                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011aab:	a1 68 e6 02 c0       	mov    eax,ds:0xc002e668
c0011ab0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011ab6:	74 33                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ab8:	a1 64 e6 02 c0       	mov    eax,ds:0xc002e664
c0011abd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011ac3:	74 26                	je     c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ac5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011acb:	83 f8 08             	cmp    eax,0x8
c0011ace:	77 09                	ja     c0011ad9 <getFromFileDescriptor(int)+0x8a>
c0011ad0:	8b 04 85 40 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19c0]
c0011ad7:	eb 12                	jmp    c0011aeb <getFromFileDescriptor(int)+0x9c>
c0011ad9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011adf:	83 fb 08             	cmp    ebx,0x8
c0011ae2:	77 95                	ja     c0011a79 <getFromFileDescriptor(int)+0x2a>
c0011ae4:	8b 04 9d 00 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1a00]
c0011aeb:	83 c4 08             	add    esp,0x8
c0011aee:	5b                   	pop    ebx
c0011aef:	c3                   	ret    

c0011af0 <__static_initialization_and_destruction_0(int, int)>:
c0011af0:	83 ec 0c             	sub    esp,0xc
c0011af3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011af8:	75 34                	jne    c0011b2e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011afa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011b02:	75 2a                	jne    c0011b2e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011b04:	83 ec 0c             	sub    esp,0xc
c0011b07:	68 78 e6 02 c0       	push   0xc002e678
c0011b0c:	e8 a7 6c 01 00       	call   c00287b8 <LinkedList<UnixFile>::LinkedList()>
c0011b11:	83 c4 10             	add    esp,0x10
c0011b14:	83 ec 04             	sub    esp,0x4
c0011b17:	68 30 d4 02 c0       	push   0xc002d430
c0011b1c:	68 78 e6 02 c0       	push   0xc002e678
c0011b21:	68 b6 87 02 c0       	push   0xc00287b6
c0011b26:	e8 8e 13 00 00       	call   c0012eb9 <__cxa_atexit>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	90                   	nop
c0011b2f:	83 c4 0c             	add    esp,0xc
c0011b32:	c3                   	ret    

c0011b33 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b33:	83 ec 0c             	sub    esp,0xc
c0011b36:	83 ec 08             	sub    esp,0x8
c0011b39:	68 ff ff 00 00       	push   0xffff
c0011b3e:	6a 01                	push   0x1
c0011b40:	e8 ab ff ff ff       	call   c0011af0 <__static_initialization_and_destruction_0(int, int)>
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	83 c4 0c             	add    esp,0xc
c0011b4b:	c3                   	ret    

c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b4c:	53                   	push   ebx
c0011b4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b55:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b5b:	89 c8                	mov    eax,ecx
c0011b5d:	d1 e8                	shr    eax,1
c0011b5f:	03 05 a8 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4a8
c0011b65:	83 e1 01             	and    ecx,0x1
c0011b68:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b6a:	75 09                	jne    c0011b75 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b6c:	83 e2 f0             	and    edx,0xfffffff0
c0011b6f:	09 da                	or     edx,ebx
c0011b71:	88 10                	mov    BYTE PTR [eax],dl
c0011b73:	5b                   	pop    ebx
c0011b74:	c3                   	ret    
c0011b75:	c1 e3 04             	shl    ebx,0x4
c0011b78:	83 e2 0f             	and    edx,0xf
c0011b7b:	09 da                	or     edx,ebx
c0011b7d:	88 10                	mov    BYTE PTR [eax],dl
c0011b7f:	5b                   	pop    ebx
c0011b80:	c3                   	ret    

c0011b81 <Virt::getPageState(unsigned long)>:
c0011b81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b85:	8b 0d a8 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4a8
c0011b8b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b91:	89 d0                	mov    eax,edx
c0011b93:	d1 e8                	shr    eax,1
c0011b95:	83 e2 01             	and    edx,0x1
c0011b98:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b9b:	75 04                	jne    c0011ba1 <Virt::getPageState(unsigned long)+0x20>
c0011b9d:	83 e0 0f             	and    eax,0xf
c0011ba0:	c3                   	ret    
c0011ba1:	c0 e8 04             	shr    al,0x4
c0011ba4:	c3                   	ret    

c0011ba5 <Virt::allocateKernelVirtualPages(int)>:
c0011ba5:	55                   	push   ebp
c0011ba6:	31 ed                	xor    ebp,ebp
c0011ba8:	57                   	push   edi
c0011ba9:	56                   	push   esi
c0011baa:	53                   	push   ebx
c0011bab:	31 db                	xor    ebx,ebx
c0011bad:	83 ec 1c             	sub    esp,0x1c
c0011bb0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011bb4:	8b 3d a4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4a4
c0011bba:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011bbf:	57                   	push   edi
c0011bc0:	e8 bc ff ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c0011bc5:	5a                   	pop    edx
c0011bc6:	84 c0                	test   al,al
c0011bc8:	75 3a                	jne    c0011c04 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011bca:	85 db                	test   ebx,ebx
c0011bcc:	75 02                	jne    c0011bd0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011bce:	89 fd                	mov    ebp,edi
c0011bd0:	43                   	inc    ebx
c0011bd1:	39 f3                	cmp    ebx,esi
c0011bd3:	74 5a                	je     c0011c2f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bd5:	47                   	inc    edi
c0011bd6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bdc:	76 31                	jbe    c0011c0f <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bde:	c7 05 a4 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d4a4,0xc8000
c0011be8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bed:	75 28                	jne    c0011c17 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bef:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bf4:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bf9:	57                   	push   edi
c0011bfa:	e8 82 ff ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c0011bff:	5a                   	pop    edx
c0011c00:	84 c0                	test   al,al
c0011c02:	74 c6                	je     c0011bca <Virt::allocateKernelVirtualPages(int)+0x25>
c0011c04:	31 db                	xor    ebx,ebx
c0011c06:	47                   	inc    edi
c0011c07:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011c0d:	77 cf                	ja     c0011bde <Virt::allocateKernelVirtualPages(int)+0x39>
c0011c0f:	89 3d a4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4a4,edi
c0011c15:	eb a8                	jmp    c0011bbf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c17:	83 ec 0c             	sub    esp,0xc
c0011c1a:	68 44 a6 02 c0       	push   0xc002a644
c0011c1f:	e8 a9 8a 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0011c24:	8b 3d a4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4a4
c0011c2a:	83 c4 10             	add    esp,0x10
c0011c2d:	eb 90                	jmp    c0011bbf <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c2f:	89 2d a4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4a4,ebp
c0011c35:	4b                   	dec    ebx
c0011c36:	74 5f                	je     c0011c97 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c38:	85 f6                	test   esi,esi
c0011c3a:	74 3d                	je     c0011c79 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c3c:	89 e8                	mov    eax,ebp
c0011c3e:	31 db                	xor    ebx,ebx
c0011c40:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c43:	eb 14                	jmp    c0011c59 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c45:	6a 01                	push   0x1
c0011c47:	43                   	inc    ebx
c0011c48:	50                   	push   eax
c0011c49:	e8 fe fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4e:	58                   	pop    eax
c0011c4f:	39 f3                	cmp    ebx,esi
c0011c51:	5a                   	pop    edx
c0011c52:	74 25                	je     c0011c79 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c54:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c0011c59:	8d 50 01             	lea    edx,[eax+0x1]
c0011c5c:	85 db                	test   ebx,ebx
c0011c5e:	89 15 a4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4a4,edx
c0011c64:	74 20                	je     c0011c86 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c66:	39 df                	cmp    edi,ebx
c0011c68:	75 db                	jne    c0011c45 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c6a:	6a 03                	push   0x3
c0011c6c:	43                   	inc    ebx
c0011c6d:	50                   	push   eax
c0011c6e:	e8 d9 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c73:	59                   	pop    ecx
c0011c74:	39 f3                	cmp    ebx,esi
c0011c76:	58                   	pop    eax
c0011c77:	75 db                	jne    c0011c54 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c79:	83 c4 1c             	add    esp,0x1c
c0011c7c:	89 e8                	mov    eax,ebp
c0011c7e:	5b                   	pop    ebx
c0011c7f:	c1 e0 0c             	shl    eax,0xc
c0011c82:	5e                   	pop    esi
c0011c83:	5f                   	pop    edi
c0011c84:	5d                   	pop    ebp
c0011c85:	c3                   	ret    
c0011c86:	6a 02                	push   0x2
c0011c88:	bb 01 00 00 00       	mov    ebx,0x1
c0011c8d:	50                   	push   eax
c0011c8e:	e8 b9 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c93:	58                   	pop    eax
c0011c94:	5a                   	pop    edx
c0011c95:	eb bd                	jmp    c0011c54 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c97:	6a 04                	push   0x4
c0011c99:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c9c:	55                   	push   ebp
c0011c9d:	a3 a4 d4 02 c0       	mov    ds:0xc002d4a4,eax
c0011ca2:	e8 a5 fe ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca7:	59                   	pop    ecx
c0011ca8:	89 e8                	mov    eax,ebp
c0011caa:	5b                   	pop    ebx
c0011cab:	c1 e0 0c             	shl    eax,0xc
c0011cae:	83 c4 1c             	add    esp,0x1c
c0011cb1:	5b                   	pop    ebx
c0011cb2:	5e                   	pop    esi
c0011cb3:	5f                   	pop    edi
c0011cb4:	5d                   	pop    ebp
c0011cb5:	c3                   	ret    

c0011cb6 <Virt::freeSwapfilePage(unsigned long)>:
c0011cb6:	53                   	push   ebx
c0011cb7:	8b 15 88 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e688
c0011cbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011cc1:	b8 01 00 00 00       	mov    eax,0x1
c0011cc6:	89 cb                	mov    ebx,ecx
c0011cc8:	d3 e0                	shl    eax,cl
c0011cca:	c1 eb 05             	shr    ebx,0x5
c0011ccd:	f7 d0                	not    eax
c0011ccf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cd2:	5b                   	pop    ebx
c0011cd3:	c3                   	ret    

c0011cd4 <Virt::swapIDToSector(unsigned long)>:
c0011cd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cd8:	0f af 05 ac d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d4ac
c0011cdf:	03 05 b4 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4b4
c0011ce5:	c3                   	ret    

c0011ce6 <Virt::allocateSwapfilePage()>:
c0011ce6:	55                   	push   ebp
c0011ce7:	31 d2                	xor    edx,edx
c0011ce9:	57                   	push   edi
c0011cea:	56                   	push   esi
c0011ceb:	53                   	push   ebx
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	8b 0d ac d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4ac
c0011cf5:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c0011cfa:	f7 f1                	div    ecx
c0011cfc:	39 0d b0 d4 02 c0    	cmp    DWORD PTR ds:0xc002d4b0,ecx
c0011d02:	72 2d                	jb     c0011d31 <Virt::allocateSwapfilePage()+0x4b>
c0011d04:	8b 35 88 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e688
c0011d0a:	8b 16                	mov    edx,DWORD PTR [esi]
c0011d0c:	f6 c2 01             	test   dl,0x1
c0011d0f:	74 3c                	je     c0011d4d <Virt::allocateSwapfilePage()+0x67>
c0011d11:	31 c9                	xor    ecx,ecx
c0011d13:	bf 01 00 00 00       	mov    edi,0x1
c0011d18:	eb 12                	jmp    c0011d2c <Virt::allocateSwapfilePage()+0x46>
c0011d1a:	89 fd                	mov    ebp,edi
c0011d1c:	89 ca                	mov    edx,ecx
c0011d1e:	d3 e5                	shl    ebp,cl
c0011d20:	c1 ea 05             	shr    edx,0x5
c0011d23:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d26:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d28:	85 ea                	test   edx,ebp
c0011d2a:	74 2a                	je     c0011d56 <Virt::allocateSwapfilePage()+0x70>
c0011d2c:	41                   	inc    ecx
c0011d2d:	39 c8                	cmp    eax,ecx
c0011d2f:	77 e9                	ja     c0011d1a <Virt::allocateSwapfilePage()+0x34>
c0011d31:	83 ec 0c             	sub    esp,0xc
c0011d34:	68 cb a7 02 c0       	push   0xc002a7cb
c0011d39:	e8 8f 89 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	31 c9                	xor    ecx,ecx
c0011d43:	83 c4 0c             	add    esp,0xc
c0011d46:	89 c8                	mov    eax,ecx
c0011d48:	5b                   	pop    ebx
c0011d49:	5e                   	pop    esi
c0011d4a:	5f                   	pop    edi
c0011d4b:	5d                   	pop    ebp
c0011d4c:	c3                   	ret    
c0011d4d:	89 f3                	mov    ebx,esi
c0011d4f:	bd 01 00 00 00       	mov    ebp,0x1
c0011d54:	31 c9                	xor    ecx,ecx
c0011d56:	09 ea                	or     edx,ebp
c0011d58:	89 c8                	mov    eax,ecx
c0011d5a:	89 13                	mov    DWORD PTR [ebx],edx
c0011d5c:	83 c4 0c             	add    esp,0xc
c0011d5f:	5b                   	pop    ebx
c0011d60:	5e                   	pop    esi
c0011d61:	5f                   	pop    edi
c0011d62:	5d                   	pop    ebp
c0011d63:	c3                   	ret    

c0011d64 <Virt::virtualMemorySetup()>:
c0011d64:	53                   	push   ebx
c0011d65:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	6a 0f                	push   0xf
c0011d6f:	53                   	push   ebx
c0011d70:	43                   	inc    ebx
c0011d71:	e8 d6 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d76:	59                   	pop    ecx
c0011d77:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d7d:	58                   	pop    eax
c0011d7e:	75 ed                	jne    c0011d6d <Virt::virtualMemorySetup()+0x9>
c0011d80:	83 ec 08             	sub    esp,0x8
c0011d83:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d88:	68 00 00 00 c8       	push   0xc8000000
c0011d8d:	68 e2 a7 02 c0       	push   0xc002a7e2
c0011d92:	e8 88 12 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0011d97:	58                   	pop    eax
c0011d98:	5a                   	pop    edx
c0011d99:	68 00 f0 ff ef       	push   0xeffff000
c0011d9e:	68 f6 a7 02 c0       	push   0xc002a7f6
c0011da3:	e8 77 12 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	83 ec 08             	sub    esp,0x8
c0011dae:	6a 00                	push   0x0
c0011db0:	53                   	push   ebx
c0011db1:	43                   	inc    ebx
c0011db2:	e8 95 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011dc0:	75 e9                	jne    c0011dab <Virt::virtualMemorySetup()+0x47>
c0011dc2:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011dc7:	83 ec 08             	sub    esp,0x8
c0011dca:	6a 0f                	push   0xf
c0011dcc:	53                   	push   ebx
c0011dcd:	43                   	inc    ebx
c0011dce:	e8 79 fd ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011ddc:	75 e9                	jne    c0011dc7 <Virt::virtualMemorySetup()+0x63>
c0011dde:	83 c4 08             	add    esp,0x8
c0011de1:	5b                   	pop    ebx
c0011de2:	c3                   	ret    

c0011de3 <Virt::swappingSetup()>:
c0011de3:	83 ec 14             	sub    esp,0x14
c0011de6:	31 d2                	xor    edx,edx
c0011de8:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c0011ded:	f7 35 ac d4 02 c0    	div    DWORD PTR ds:0xc002d4ac
c0011df3:	c1 e8 05             	shr    eax,0x5
c0011df6:	50                   	push   eax
c0011df7:	68 0a a8 02 c0       	push   0xc002a80a
c0011dfc:	e8 1e 12 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0011e01:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c0011e06:	31 d2                	xor    edx,edx
c0011e08:	f7 35 ac d4 02 c0    	div    DWORD PTR ds:0xc002d4ac
c0011e0e:	c1 e8 05             	shr    eax,0x5
c0011e11:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e14:	e8 2a da ff ff       	call   c000f843 <malloc>
c0011e19:	83 c4 0c             	add    esp,0xc
c0011e1c:	89 c1                	mov    ecx,eax
c0011e1e:	a3 88 e6 02 c0       	mov    ds:0xc002e688,eax
c0011e23:	31 d2                	xor    edx,edx
c0011e25:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c0011e2a:	f7 35 ac d4 02 c0    	div    DWORD PTR ds:0xc002d4ac
c0011e30:	c1 e8 05             	shr    eax,0x5
c0011e33:	50                   	push   eax
c0011e34:	6a 00                	push   0x0
c0011e36:	51                   	push   ecx
c0011e37:	e8 3c e9 fe ff       	call   c0000778 <memset>
c0011e3c:	83 c4 1c             	add    esp,0x1c
c0011e3f:	c3                   	ret    

c0011e40 <Virt::getAKernelVAS()>:
c0011e40:	a1 8c e6 02 c0       	mov    eax,ds:0xc002e68c
c0011e45:	c3                   	ret    

c0011e46 <Virt::setupPageSwapping(int)>:
c0011e46:	57                   	push   edi
c0011e47:	56                   	push   esi
c0011e48:	53                   	push   ebx
c0011e49:	83 ec 1c             	sub    esp,0x1c
c0011e4c:	68 14 01 00 00       	push   0x114
c0011e51:	e8 ed d9 ff ff       	call   c000f843 <malloc>
c0011e56:	83 c4 0c             	add    esp,0xc
c0011e59:	89 c6                	mov    esi,eax
c0011e5b:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c0011e61:	68 25 a8 02 c0       	push   0xc002a825
c0011e66:	50                   	push   eax
c0011e67:	e8 0c 17 00 00       	call   c0013578 <File::File(char const*, Process*)>
c0011e6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e6f:	e8 e0 18 00 00       	call   c0013754 <File::unlink()>
c0011e74:	58                   	pop    eax
c0011e75:	5a                   	pop    edx
c0011e76:	6a 12                	push   0x12
c0011e78:	56                   	push   esi
c0011e79:	e8 5e 17 00 00       	call   c00135dc <File::open(FileOpenMode)>
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	85 c0                	test   eax,eax
c0011e83:	0f 85 ca 00 00 00    	jne    c0011f53 <Virt::setupPageSwapping(int)+0x10d>
c0011e89:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e95:	c1 e3 08             	shl    ebx,0x8
c0011e98:	83 ec 0c             	sub    esp,0xc
c0011e9b:	68 00 00 01 00       	push   0x10000
c0011ea0:	e8 9e d9 ff ff       	call   c000f843 <malloc>
c0011ea5:	83 c4 0c             	add    esp,0xc
c0011ea8:	89 c7                	mov    edi,eax
c0011eaa:	68 00 00 01 00       	push   0x10000
c0011eaf:	6a 00                	push   0x0
c0011eb1:	50                   	push   eax
c0011eb2:	e8 c1 e8 fe ff       	call   c0000778 <memset>
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	85 db                	test   ebx,ebx
c0011ebc:	79 03                	jns    c0011ec1 <Virt::setupPageSwapping(int)+0x7b>
c0011ebe:	83 c3 0f             	add    ebx,0xf
c0011ec1:	c1 fb 04             	sar    ebx,0x4
c0011ec4:	4b                   	dec    ebx
c0011ec5:	83 fb ff             	cmp    ebx,0xffffffff
c0011ec8:	74 4b                	je     c0011f15 <Virt::setupPageSwapping(int)+0xcf>
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ecf:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ed3:	52                   	push   edx
c0011ed4:	57                   	push   edi
c0011ed5:	6a 00                	push   0x0
c0011ed7:	68 00 00 01 00       	push   0x10000
c0011edc:	56                   	push   esi
c0011edd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011ee0:	83 c4 20             	add    esp,0x20
c0011ee3:	85 c0                	test   eax,eax
c0011ee5:	75 59                	jne    c0011f40 <Virt::setupPageSwapping(int)+0xfa>
c0011ee7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eeb:	3d 00 00 01 00       	cmp    eax,0x10000
c0011ef0:	74 d2                	je     c0011ec4 <Virt::setupPageSwapping(int)+0x7e>
c0011ef2:	83 ec 08             	sub    esp,0x8
c0011ef5:	4b                   	dec    ebx
c0011ef6:	50                   	push   eax
c0011ef7:	68 78 a8 02 c0       	push   0xc002a878
c0011efc:	e8 1e 11 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0011f01:	c7 04 24 81 a8 02 c0 	mov    DWORD PTR [esp],0xc002a881
c0011f08:	e8 c0 87 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	83 fb ff             	cmp    ebx,0xffffffff
c0011f13:	75 b5                	jne    c0011eca <Virt::setupPageSwapping(int)+0x84>
c0011f15:	83 ec 0c             	sub    esp,0xc
c0011f18:	56                   	push   esi
c0011f19:	e8 1c 17 00 00       	call   c001363a <File::close()>
c0011f1e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011f21:	e8 3d d9 ff ff       	call   c000f863 <rfree>
c0011f26:	83 c4 10             	add    esp,0x10
c0011f29:	85 f6                	test   esi,esi
c0011f2b:	74 0c                	je     c0011f39 <Virt::setupPageSwapping(int)+0xf3>
c0011f2d:	83 ec 0c             	sub    esp,0xc
c0011f30:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f32:	56                   	push   esi
c0011f33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f36:	83 c4 10             	add    esp,0x10
c0011f39:	83 c4 10             	add    esp,0x10
c0011f3c:	5b                   	pop    ebx
c0011f3d:	5e                   	pop    esi
c0011f3e:	5f                   	pop    edi
c0011f3f:	c3                   	ret    
c0011f40:	83 ec 08             	sub    esp,0x8
c0011f43:	50                   	push   eax
c0011f44:	68 60 a8 02 c0       	push   0xc002a860
c0011f49:	e8 d1 10 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0011f4e:	83 c4 10             	add    esp,0x10
c0011f51:	eb 94                	jmp    c0011ee7 <Virt::setupPageSwapping(int)+0xa1>
c0011f53:	83 ec 08             	sub    esp,0x8
c0011f56:	50                   	push   eax
c0011f57:	68 3c a8 02 c0       	push   0xc002a83c
c0011f5c:	e8 be 10 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0011f61:	c7 04 24 45 a8 02 c0 	mov    DWORD PTR [esp],0xc002a845
c0011f68:	e8 60 87 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0011f6d:	83 c4 10             	add    esp,0x10
c0011f70:	e9 14 ff ff ff       	jmp    c0011e89 <Virt::setupPageSwapping(int)+0x43>
c0011f75:	90                   	nop

c0011f76 <VAS::VAS()>:
c0011f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f85:	a3 8c e6 02 c0       	mov    ds:0xc002e68c,eax
c0011f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f8e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f96:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f9d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011fa4:	90                   	nop
c0011fa5:	c3                   	ret    

c0011fa6 <VAS::VAS(VAS*)>:
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011fb4:	83 ec 0c             	sub    esp,0xc
c0011fb7:	68 64 a6 02 c0       	push   0xc002a664
c0011fbc:	e8 0c 87 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	90                   	nop
c0011fc5:	83 c4 0c             	add    esp,0xc
c0011fc8:	c3                   	ret    
c0011fc9:	90                   	nop

c0011fca <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fce:	89 c2                	mov    edx,eax
c0011fd0:	c1 e8 0a             	shr    eax,0xa
c0011fd3:	c1 ea 16             	shr    edx,0x16
c0011fd6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fdb:	19 c9                	sbb    ecx,ecx
c0011fdd:	c1 e2 0c             	shl    edx,0xc
c0011fe0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fe6:	25 fc 0f 00 00       	and    eax,0xffc
c0011feb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ff2:	01 d0                	add    eax,edx
c0011ff4:	c3                   	ret    
c0011ff5:	90                   	nop

c0011ff6 <VAS::getPageTableEntry(unsigned long)>:
c0011ff6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ffa:	89 ca                	mov    edx,ecx
c0011ffc:	c1 e9 0a             	shr    ecx,0xa
c0011fff:	c1 ea 16             	shr    edx,0x16
c0012002:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012008:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001200e:	c1 e0 0c             	shl    eax,0xc
c0012011:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012014:	c3                   	ret    

c0012015 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012015:	57                   	push   edi
c0012016:	56                   	push   esi
c0012017:	be 01 00 00 00       	mov    esi,0x1
c001201c:	53                   	push   ebx
c001201d:	83 ec 10             	sub    esp,0x10
c0012020:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012024:	c1 eb 0c             	shr    ebx,0xc
c0012027:	eb 3f                	jmp    c0012068 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012029:	e8 12 fe ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001202e:	83 ec 08             	sub    esp,0x8
c0012031:	57                   	push   edi
c0012032:	50                   	push   eax
c0012033:	e8 be ff ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	8b 00                	mov    eax,DWORD PTR [eax]
c001203d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012041:	f6 c4 04             	test   ah,0x4
c0012044:	75 5f                	jne    c00120a5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012046:	80 fa 04             	cmp    dl,0x4
c0012049:	74 78                	je     c00120c3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001204b:	80 fa 02             	cmp    dl,0x2
c001204e:	0f 84 88 00 00 00    	je     c00120dc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012054:	80 fa 03             	cmp    dl,0x3
c0012057:	0f 84 ad 00 00 00    	je     c001210a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001205d:	fe ca                	dec    dl
c001205f:	0f 84 92 00 00 00    	je     c00120f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012065:	43                   	inc    ebx
c0012066:	31 f6                	xor    esi,esi
c0012068:	53                   	push   ebx
c0012069:	e8 13 fb ff ff       	call   c0011b81 <Virt::getPageState(unsigned long)>
c001206e:	5f                   	pop    edi
c001206f:	89 df                	mov    edi,ebx
c0012071:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012075:	c1 e7 0c             	shl    edi,0xc
c0012078:	84 c0                	test   al,al
c001207a:	75 ad                	jne    c0012029 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001207c:	83 ec 0c             	sub    esp,0xc
c001207f:	68 87 a8 02 c0       	push   0xc002a887
c0012084:	e8 44 86 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0012089:	e8 b2 fd ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001208e:	5a                   	pop    edx
c001208f:	59                   	pop    ecx
c0012090:	57                   	push   edi
c0012091:	50                   	push   eax
c0012092:	e8 5f ff ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	8b 00                	mov    eax,DWORD PTR [eax]
c001209c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120a0:	f6 c4 04             	test   ah,0x4
c00120a3:	74 c0                	je     c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120a5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00120a9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120ae:	83 ec 0c             	sub    esp,0xc
c00120b1:	50                   	push   eax
c00120b2:	e8 a4 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120be:	80 fa 04             	cmp    dl,0x4
c00120c1:	75 88                	jne    c001204b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120c3:	89 f0                	mov    eax,esi
c00120c5:	84 c0                	test   al,al
c00120c7:	75 47                	jne    c0012110 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120c9:	c7 44 24 20 88 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a688
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	5b                   	pop    ebx
c00120d5:	5e                   	pop    esi
c00120d6:	5f                   	pop    edi
c00120d7:	e9 f1 85 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>
c00120dc:	89 f0                	mov    eax,esi
c00120de:	84 c0                	test   al,al
c00120e0:	75 15                	jne    c00120f7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	68 a3 a8 02 c0       	push   0xc002a8a3
c00120ea:	e8 de 85 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	e9 6e ff ff ff       	jmp    c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120f7:	83 ec 08             	sub    esp,0x8
c00120fa:	6a 00                	push   0x0
c00120fc:	53                   	push   ebx
c00120fd:	e8 4a fa ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	e9 5b ff ff ff       	jmp    c0012065 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001210a:	89 f0                	mov    eax,esi
c001210c:	84 c0                	test   al,al
c001210e:	75 15                	jne    c0012125 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012110:	83 ec 08             	sub    esp,0x8
c0012113:	6a 00                	push   0x0
c0012115:	53                   	push   ebx
c0012116:	e8 31 fa ff ff       	call   c0011b4c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	5b                   	pop    ebx
c0012122:	5e                   	pop    esi
c0012123:	5f                   	pop    edi
c0012124:	c3                   	ret    
c0012125:	c7 44 24 20 bf a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8bf
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	5f                   	pop    edi
c0012133:	e9 95 85 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>

c0012138 <VAS::freeAllocatedPages(unsigned long)>:
c0012138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001213c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012140:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012144:	74 09                	je     c001214f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001214a:	e9 c6 fe ff ff       	jmp    c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001214f:	c7 44 24 04 ac a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6ac
c0012157:	e9 c3 0e 00 00       	jmp    c001301f <Dbg::kprintf(char const*, ...)>

c001215c <VAS::virtualToPhysical(unsigned long)>:
c001215c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012160:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012164:	e8 8d fe ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012169:	5a                   	pop    edx
c001216a:	8b 00                	mov    eax,DWORD PTR [eax]
c001216c:	59                   	pop    ecx
c001216d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012172:	c3                   	ret    
c0012173:	90                   	nop

c0012174 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012174:	55                   	push   ebp
c0012175:	57                   	push   edi
c0012176:	56                   	push   esi
c0012177:	53                   	push   ebx
c0012178:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001217c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012180:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012184:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012188:	85 db                	test   ebx,ebx
c001218a:	7e 22                	jle    c00121ae <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001218c:	c1 e3 0c             	shl    ebx,0xc
c001218f:	01 f3                	add    ebx,esi
c0012191:	56                   	push   esi
c0012192:	81 c6 00 10 00 00    	add    esi,0x1000
c0012198:	55                   	push   ebp
c0012199:	e8 58 fe ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c001219e:	5a                   	pop    edx
c001219f:	59                   	pop    ecx
c00121a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00121a2:	21 f9                	and    ecx,edi
c00121a4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00121a8:	39 f3                	cmp    ebx,esi
c00121aa:	89 08                	mov    DWORD PTR [eax],ecx
c00121ac:	75 e3                	jne    c0012191 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	5f                   	pop    edi
c00121b1:	5d                   	pop    ebp
c00121b2:	c3                   	ret    
c00121b3:	90                   	nop

c00121b4 <VAS::setToWriteCombining(unsigned long, int)>:
c00121b4:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00121b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121bf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121c6:	75 01                	jne    c00121c9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121c8:	c3                   	ret    
c00121c9:	68 80 00 00 00       	push   0x80
c00121ce:	6a ff                	push   0xffffffff
c00121d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121dc:	e8 93 ff ff ff       	call   c0012174 <VAS::reflagRange(unsigned long, int, int, int)>
c00121e1:	83 c4 14             	add    esp,0x14
c00121e4:	c3                   	ret    
c00121e5:	90                   	nop

c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121e6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121f6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121f9:	19 c0                	sbb    eax,eax
c00121fb:	83 ca 03             	or     edx,0x3
c00121fe:	83 e0 fc             	and    eax,0xfffffffc
c0012201:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012208:	0f 20 d8             	mov    eax,cr3
c001220b:	0f 22 d8             	mov    cr3,eax
c001220e:	c3                   	ret    
c001220f:	90                   	nop

c0012210 <VAS::~VAS()>:
c0012210:	83 ec 2c             	sub    esp,0x2c
c0012213:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001221b:	e8 a0 bc 00 00       	call   c001dec0 <lockScheduler()>
c0012220:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012225:	8b 00                	mov    eax,DWORD PTR [eax]
c0012227:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001222a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012230:	83 ec 04             	sub    esp,0x4
c0012233:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012237:	6a 01                	push   0x1
c0012239:	50                   	push   eax
c001223a:	e8 a7 ff ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001224a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012252:	0f 8f d7 00 00 00    	jg     c001232f <VAS::~VAS()+0x11f>
c0012258:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001225c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001225f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012263:	c1 e2 02             	shl    edx,0x2
c0012266:	01 d0                	add    eax,edx
c0012268:	8b 00                	mov    eax,DWORD PTR [eax]
c001226a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012272:	83 e0 01             	and    eax,0x1
c0012275:	0f 84 ab 00 00 00    	je     c0012326 <VAS::~VAS()+0x116>
c001227b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012283:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001228b:	7f 75                	jg     c0012302 <VAS::~VAS()+0xf2>
c001228d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012291:	c1 e0 0a             	shl    eax,0xa
c0012294:	89 c2                	mov    edx,eax
c0012296:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001229a:	01 d0                	add    eax,edx
c001229c:	c1 e0 0c             	shl    eax,0xc
c001229f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00122a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00122aa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00122ad:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122b3:	83 ec 04             	sub    esp,0x4
c00122b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122ba:	6a 01                	push   0x1
c00122bc:	50                   	push   eax
c00122bd:	e8 08 fd ff ff       	call   c0011fca <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122c2:	83 c4 10             	add    esp,0x10
c00122c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00122cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d7:	25 01 04 00 00       	and    eax,0x401
c00122dc:	3d 01 04 00 00       	cmp    eax,0x401
c00122e1:	75 19                	jne    c00122fc <VAS::~VAS()+0xec>
c00122e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122ec:	83 ec 0c             	sub    esp,0xc
c00122ef:	50                   	push   eax
c00122f0:	e8 66 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122fc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012300:	eb 81                	jmp    c0012283 <VAS::~VAS()+0x73>
c0012302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012306:	25 00 04 00 00       	and    eax,0x400
c001230b:	74 19                	je     c0012326 <VAS::~VAS()+0x116>
c001230d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012311:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	50                   	push   eax
c001231a:	e8 3c db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001231f:	83 c4 10             	add    esp,0x10
c0012322:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012326:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001232a:	e9 1b ff ff ff       	jmp    c001224a <VAS::~VAS()+0x3a>
c001232f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012333:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012336:	83 ec 0c             	sub    esp,0xc
c0012339:	50                   	push   eax
c001233a:	e8 d6 fc ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012346:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012349:	83 ec 0c             	sub    esp,0xc
c001234c:	50                   	push   eax
c001234d:	e8 09 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012359:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001235d:	c1 e0 02             	shl    eax,0x2
c0012360:	83 ec 08             	sub    esp,0x8
c0012363:	50                   	push   eax
c0012364:	68 d0 a6 02 c0       	push   0xc002a6d0
c0012369:	e8 b1 0c 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	e8 4c bb 00 00       	call   c001dec2 <unlockScheduler()>
c0012376:	90                   	nop
c0012377:	83 c4 2c             	add    esp,0x2c
c001237a:	c3                   	ret    
c001237b:	90                   	nop

c001237c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001237c:	55                   	push   ebp
c001237d:	57                   	push   edi
c001237e:	56                   	push   esi
c001237f:	53                   	push   ebx
c0012380:	83 ec 1c             	sub    esp,0x1c
c0012383:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012387:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001238b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012391:	77 08                	ja     c001239b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012393:	0f 20 d8             	mov    eax,cr3
c0012396:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012399:	75 47                	jne    c00123e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001239b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001239f:	09 d8                	or     eax,ebx
c00123a1:	a9 ff 0f 00 00       	test   eax,0xfff
c00123a6:	75 57                	jne    c00123ff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00123a8:	89 de                	mov    esi,ebx
c00123aa:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00123ad:	c1 ee 16             	shr    esi,0x16
c00123b0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123b7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123bb:	74 54                	je     c0012411 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123c1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123cb:	c1 e6 0c             	shl    esi,0xc
c00123ce:	c1 eb 0a             	shr    ebx,0xa
c00123d1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123d7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123da:	83 c4 1c             	add    esp,0x1c
c00123dd:	5b                   	pop    ebx
c00123de:	5e                   	pop    esi
c00123df:	5f                   	pop    edi
c00123e0:	5d                   	pop    ebp
c00123e1:	c3                   	ret    
c00123e2:	83 ec 0c             	sub    esp,0xc
c00123e5:	68 f0 a6 02 c0       	push   0xc002a6f0
c00123ea:	e8 30 0c 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00123ef:	83 c4 10             	add    esp,0x10
c00123f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f6:	09 d8                	or     eax,ebx
c00123f8:	a9 ff 0f 00 00       	test   eax,0xfff
c00123fd:	74 a9                	je     c00123a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123ff:	83 ec 0c             	sub    esp,0xc
c0012402:	68 58 a7 02 c0       	push   0xc002a758
c0012407:	e8 c1 82 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	eb 97                	jmp    c00123a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012415:	e8 cb da ff ff       	call   c000fee5 <Phys::allocatePage()>
c001241a:	89 c5                	mov    ebp,eax
c001241c:	e8 1f fa ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0012421:	83 ec 0c             	sub    esp,0xc
c0012424:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012428:	6a 01                	push   0x1
c001242a:	e8 76 f7 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c001242f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012436:	6a 01                	push   0x1
c0012438:	50                   	push   eax
c0012439:	55                   	push   ebp
c001243a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012440:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012444:	51                   	push   ecx
c0012445:	e8 26 02 00 00       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001244a:	83 c4 1c             	add    esp,0x1c
c001244d:	68 00 10 00 00       	push   0x1000
c0012452:	6a 00                	push   0x0
c0012454:	50                   	push   eax
c0012455:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012459:	e8 1a e3 fe ff       	call   c0000778 <memset>
c001245e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012462:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012465:	e8 ab fb ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001246a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001246e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012471:	83 c4 10             	add    esp,0x10
c0012474:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012477:	e9 41 ff ff ff       	jmp    c00123bd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001247c <VAS::allocatePages(int, int)>:
c001247c:	55                   	push   ebp
c001247d:	57                   	push   edi
c001247e:	56                   	push   esi
c001247f:	53                   	push   ebx
c0012480:	83 ec 1c             	sub    esp,0x1c
c0012483:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012487:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001248c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012492:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012498:	83 e0 01             	and    eax,0x1
c001249b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001249f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00124a3:	0f 85 cc 00 00 00    	jne    c0012575 <VAS::allocatePages(int, int)+0xf9>
c00124a9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00124ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124b0:	85 c0                	test   eax,eax
c00124b2:	0f 84 a1 00 00 00    	je     c0012559 <VAS::allocatePages(int, int)+0xdd>
c00124b8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124c0:	c1 e6 0c             	shl    esi,0xc
c00124c3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124c7:	85 c0                	test   eax,eax
c00124c9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124cc:	7e 33                	jle    c0012501 <VAS::allocatePages(int, int)+0x85>
c00124ce:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d6:	81 cd 00 04 00 00    	or     ebp,0x400
c00124dc:	e8 04 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c00124e1:	55                   	push   ebp
c00124e2:	53                   	push   ebx
c00124e3:	50                   	push   eax
c00124e4:	57                   	push   edi
c00124e5:	e8 92 fe ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00124ea:	83 c4 10             	add    esp,0x10
c00124ed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f2:	74 03                	je     c00124f7 <VAS::allocatePages(int, int)+0x7b>
c00124f4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124f7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124fd:	39 de                	cmp    esi,ebx
c00124ff:	75 db                	jne    c00124dc <VAS::allocatePages(int, int)+0x60>
c0012501:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012506:	75 12                	jne    c001251a <VAS::allocatePages(int, int)+0x9e>
c0012508:	0f 20 d8             	mov    eax,cr3
c001250b:	0f 22 d8             	mov    cr3,eax
c001250e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012512:	83 c4 1c             	add    esp,0x1c
c0012515:	5b                   	pop    ebx
c0012516:	5e                   	pop    esi
c0012517:	5f                   	pop    edi
c0012518:	5d                   	pop    ebp
c0012519:	c3                   	ret    
c001251a:	c1 ee 0a             	shr    esi,0xa
c001251d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012521:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012527:	c1 eb 0a             	shr    ebx,0xa
c001252a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012530:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012536:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001253c:	39 c3                	cmp    ebx,eax
c001253e:	77 ce                	ja     c001250e <VAS::allocatePages(int, int)+0x92>
c0012540:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012543:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012549:	39 d8                	cmp    eax,ebx
c001254b:	73 f3                	jae    c0012540 <VAS::allocatePages(int, int)+0xc4>
c001254d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012551:	83 c4 1c             	add    esp,0x1c
c0012554:	5b                   	pop    ebx
c0012555:	5e                   	pop    esi
c0012556:	5f                   	pop    edi
c0012557:	5d                   	pop    ebp
c0012558:	c3                   	ret    
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	68 7c a7 02 c0       	push   0xc002a77c
c0012561:	e8 67 81 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0012566:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012569:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001256d:	83 c4 10             	add    esp,0x10
c0012570:	e9 43 ff ff ff       	jmp    c00124b8 <VAS::allocatePages(int, int)+0x3c>
c0012575:	83 ec 0c             	sub    esp,0xc
c0012578:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001257c:	e8 24 f6 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0012581:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012585:	83 c4 10             	add    esp,0x10
c0012588:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001258d:	0f 87 9b 00 00 00    	ja     c001262e <VAS::allocatePages(int, int)+0x1b2>
c0012593:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012597:	85 d2                	test   edx,edx
c0012599:	7e 3c                	jle    c00125d7 <VAS::allocatePages(int, int)+0x15b>
c001259b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001259f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00125a7:	c1 e5 0c             	shl    ebp,0xc
c00125aa:	81 ce 00 04 00 00    	or     esi,0x400
c00125b0:	01 dd                	add    ebp,ebx
c00125b2:	e8 2e d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00125b7:	56                   	push   esi
c00125b8:	53                   	push   ebx
c00125b9:	50                   	push   eax
c00125ba:	57                   	push   edi
c00125bb:	e8 bc fd ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c8:	74 03                	je     c00125cd <VAS::allocatePages(int, int)+0x151>
c00125ca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d3:	39 dd                	cmp    ebp,ebx
c00125d5:	75 db                	jne    c00125b2 <VAS::allocatePages(int, int)+0x136>
c00125d7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125dc:	0f 84 26 ff ff ff    	je     c0012508 <VAS::allocatePages(int, int)+0x8c>
c00125e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125ea:	89 d3                	mov    ebx,edx
c00125ec:	c1 e0 0c             	shl    eax,0xc
c00125ef:	c1 eb 0a             	shr    ebx,0xa
c00125f2:	01 d0                	add    eax,edx
c00125f4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125fa:	c1 e8 0a             	shr    eax,0xa
c00125fd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012603:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012608:	2d 00 00 40 00       	sub    eax,0x400000
c001260d:	39 c3                	cmp    ebx,eax
c001260f:	0f 87 f9 fe ff ff    	ja     c001250e <VAS::allocatePages(int, int)+0x92>
c0012615:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012618:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261e:	39 d8                	cmp    eax,ebx
c0012620:	73 f3                	jae    c0012615 <VAS::allocatePages(int, int)+0x199>
c0012622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012626:	83 c4 1c             	add    esp,0x1c
c0012629:	5b                   	pop    ebx
c001262a:	5e                   	pop    esi
c001262b:	5f                   	pop    edi
c001262c:	5d                   	pop    ebp
c001262d:	c3                   	ret    
c001262e:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0012633:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012639:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012640:	0f 84 4d ff ff ff    	je     c0012593 <VAS::allocatePages(int, int)+0x117>
c0012646:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001264e:	e9 40 ff ff ff       	jmp    c0012593 <VAS::allocatePages(int, int)+0x117>
c0012653:	90                   	nop

c0012654 <VAS::setCPUSpecific(unsigned long)>:
c0012654:	83 ec 0c             	sub    esp,0xc
c0012657:	6a 05                	push   0x5
c0012659:	68 00 00 40 c2       	push   0xc2400000
c001265e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012666:	e8 11 fd ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001266b:	83 c4 1c             	add    esp,0x1c
c001266e:	c3                   	ret    
c001266f:	90                   	nop

c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012670:	55                   	push   ebp
c0012671:	57                   	push   edi
c0012672:	56                   	push   esi
c0012673:	53                   	push   ebx
c0012674:	83 ec 1c             	sub    esp,0x1c
c0012677:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001267c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012680:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012686:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001268a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012690:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012694:	83 e0 01             	and    eax,0x1
c0012697:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001269b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001269f:	85 c0                	test   eax,eax
c00126a1:	7e 39                	jle    c00126dc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00126a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a7:	89 f3                	mov    ebx,esi
c00126a9:	c1 e0 0c             	shl    eax,0xc
c00126ac:	01 f0                	add    eax,esi
c00126ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126b2:	55                   	push   ebp
c00126b3:	53                   	push   ebx
c00126b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126b8:	29 f0                	sub    eax,esi
c00126ba:	01 d8                	add    eax,ebx
c00126bc:	50                   	push   eax
c00126bd:	57                   	push   edi
c00126be:	e8 b9 fc ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c00126c3:	83 c4 10             	add    esp,0x10
c00126c6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126cb:	74 03                	je     c00126d0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126cd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126d0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126d6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126da:	75 d6                	jne    c00126b2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126dc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126e1:	75 10                	jne    c00126f3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126e3:	0f 20 d8             	mov    eax,cr3
c00126e6:	0f 22 d8             	mov    cr3,eax
c00126e9:	83 c4 1c             	add    esp,0x1c
c00126ec:	89 f0                	mov    eax,esi
c00126ee:	5b                   	pop    ebx
c00126ef:	5e                   	pop    esi
c00126f0:	5f                   	pop    edi
c00126f1:	5d                   	pop    ebp
c00126f2:	c3                   	ret    
c00126f3:	89 f3                	mov    ebx,esi
c00126f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126f9:	c1 eb 0a             	shr    ebx,0xa
c00126fc:	c1 e0 0c             	shl    eax,0xc
c00126ff:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012705:	01 f0                	add    eax,esi
c0012707:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001270d:	c1 e8 0a             	shr    eax,0xa
c0012710:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012715:	2d 00 00 40 00       	sub    eax,0x400000
c001271a:	39 c3                	cmp    ebx,eax
c001271c:	77 cb                	ja     c00126e9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001271e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012721:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012727:	39 d8                	cmp    eax,ebx
c0012729:	73 f3                	jae    c001271e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001272b:	83 c4 1c             	add    esp,0x1c
c001272e:	89 f0                	mov    eax,esi
c0012730:	5b                   	pop    ebx
c0012731:	5e                   	pop    esi
c0012732:	5f                   	pop    edi
c0012733:	5d                   	pop    ebp
c0012734:	c3                   	ret    
c0012735:	90                   	nop

c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012736:	55                   	push   ebp
c0012737:	57                   	push   edi
c0012738:	56                   	push   esi
c0012739:	53                   	push   ebx
c001273a:	83 ec 1c             	sub    esp,0x1c
c001273d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012741:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012745:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012749:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001274d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012752:	75 4a                	jne    c001279e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012754:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012758:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001275b:	c1 eb 16             	shr    ebx,0x16
c001275e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012765:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012769:	74 4d                	je     c00127b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001276b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001276f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012773:	c1 e8 0a             	shr    eax,0xa
c0012776:	80 fa 01             	cmp    dl,0x1
c0012779:	19 d2                	sbb    edx,edx
c001277b:	c1 e3 0c             	shl    ebx,0xc
c001277e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012782:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012788:	25 fc 0f 00 00       	and    eax,0xffc
c001278d:	01 d8                	add    eax,ebx
c001278f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012796:	83 c4 1c             	add    esp,0x1c
c0012799:	5b                   	pop    ebx
c001279a:	5e                   	pop    esi
c001279b:	5f                   	pop    edi
c001279c:	5d                   	pop    ebp
c001279d:	c3                   	ret    
c001279e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00127a2:	83 ec 0c             	sub    esp,0xc
c00127a5:	68 a8 a7 02 c0       	push   0xc002a7a8
c00127aa:	e8 1e 7f 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00127af:	83 c4 10             	add    esp,0x10
c00127b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127b6:	eb 9c                	jmp    c0012754 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127bc:	e8 24 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00127c1:	89 c5                	mov    ebp,eax
c00127c3:	e8 78 f6 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127cf:	6a 01                	push   0x1
c00127d1:	e8 cf f3 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c00127d6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127dd:	6a 01                	push   0x1
c00127df:	50                   	push   eax
c00127e0:	55                   	push   ebp
c00127e1:	81 cd 07 04 00 00    	or     ebp,0x407
c00127e7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127eb:	51                   	push   ecx
c00127ec:	e8 7f fe ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127f1:	83 c4 1c             	add    esp,0x1c
c00127f4:	68 00 10 00 00       	push   0x1000
c00127f9:	6a 00                	push   0x0
c00127fb:	50                   	push   eax
c00127fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012800:	e8 73 df fe ff       	call   c0000778 <memset>
c0012805:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012809:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001280c:	e8 04 f8 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c0012811:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001281a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281e:	e9 48 ff ff ff       	jmp    c001276b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012823:	90                   	nop

c0012824 <VAS::VAS(bool)>:
c0012824:	53                   	push   ebx
c0012825:	83 ec 28             	sub    esp,0x28
c0012828:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001282c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012830:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001283b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012843:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012846:	e8 9a d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001284b:	89 c2                	mov    edx,eax
c001284d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012851:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012854:	e8 e7 f5 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0012859:	89 c3                	mov    ebx,eax
c001285b:	83 ec 0c             	sub    esp,0xc
c001285e:	6a 01                	push   0x1
c0012860:	e8 40 f3 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0012865:	83 c4 10             	add    esp,0x10
c0012868:	89 c2                	mov    edx,eax
c001286a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012871:	83 ec 0c             	sub    esp,0xc
c0012874:	6a 03                	push   0x3
c0012876:	6a 01                	push   0x1
c0012878:	52                   	push   edx
c0012879:	50                   	push   eax
c001287a:	53                   	push   ebx
c001287b:	e8 f0 fd ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012880:	83 c4 20             	add    esp,0x20
c0012883:	89 c2                	mov    edx,eax
c0012885:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012889:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001288c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012894:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001289c:	7f 1c                	jg     c00128ba <VAS::VAS(bool)+0x96>
c001289e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a9:	c1 e2 02             	shl    edx,0x2
c00128ac:	01 d0                	add    eax,edx
c00128ae:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128b4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b8:	eb da                	jmp    c0012894 <VAS::VAS(bool)+0x70>
c00128ba:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128c2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128ca:	7f 7a                	jg     c0012946 <VAS::VAS(bool)+0x122>
c00128cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128d0:	2d 00 02 00 00       	sub    eax,0x200
c00128d5:	c1 e0 0c             	shl    eax,0xc
c00128d8:	83 c8 03             	or     eax,0x3
c00128db:	89 c2                	mov    edx,eax
c00128dd:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00128e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ee:	83 e0 10             	and    eax,0x10
c00128f1:	84 c0                	test   al,al
c00128f3:	74 07                	je     c00128fc <VAS::VAS(bool)+0xd8>
c00128f5:	b8 00 01 00 00       	mov    eax,0x100
c00128fa:	eb 05                	jmp    c0012901 <VAS::VAS(bool)+0xdd>
c00128fc:	b8 00 00 00 00       	mov    eax,0x0
c0012901:	09 d0                	or     eax,edx
c0012903:	89 c1                	mov    ecx,eax
c0012905:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012909:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001290c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012910:	c1 e2 02             	shl    edx,0x2
c0012913:	01 d0                	add    eax,edx
c0012915:	89 ca                	mov    edx,ecx
c0012917:	89 10                	mov    DWORD PTR [eax],edx
c0012919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001291d:	2d 40 03 00 00       	sub    eax,0x340
c0012922:	83 f8 7f             	cmp    eax,0x7f
c0012925:	77 16                	ja     c001293d <VAS::VAS(bool)+0x119>
c0012927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012932:	c1 e2 02             	shl    edx,0x2
c0012935:	01 d0                	add    eax,edx
c0012937:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001293d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012941:	e9 7c ff ff ff       	jmp    c00128c2 <VAS::VAS(bool)+0x9e>
c0012946:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001294b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012951:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012957:	83 e0 10             	and    eax,0x10
c001295a:	84 c0                	test   al,al
c001295c:	74 07                	je     c0012965 <VAS::VAS(bool)+0x141>
c001295e:	b8 03 41 00 00       	mov    eax,0x4103
c0012963:	eb 05                	jmp    c001296a <VAS::VAS(bool)+0x146>
c0012965:	b8 03 40 00 00       	mov    eax,0x4003
c001296a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001296e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012971:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012977:	89 02                	mov    DWORD PTR [edx],eax
c0012979:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001297e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012984:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001298a:	83 ec 08             	sub    esp,0x8
c001298d:	50                   	push   eax
c001298e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012992:	e8 bd fc ff ff       	call   c0012654 <VAS::setCPUSpecific(unsigned long)>
c0012997:	83 c4 10             	add    esp,0x10
c001299a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001299e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00129a1:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00129a6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129ac:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129b2:	83 e0 10             	and    eax,0x10
c00129b5:	84 c0                	test   al,al
c00129b7:	74 07                	je     c00129c0 <VAS::VAS(bool)+0x19c>
c00129b9:	b8 00 01 00 00       	mov    eax,0x100
c00129be:	eb 05                	jmp    c00129c5 <VAS::VAS(bool)+0x1a1>
c00129c0:	b8 00 00 00 00       	mov    eax,0x0
c00129c5:	09 c2                	or     edx,eax
c00129c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129ce:	05 fc 0f 00 00       	add    eax,0xffc
c00129d3:	83 ca 03             	or     edx,0x3
c00129d6:	89 10                	mov    DWORD PTR [eax],edx
c00129d8:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00129dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e3:	83 ec 0c             	sub    esp,0xc
c00129e6:	50                   	push   eax
c00129e7:	e8 46 1d 00 00       	call   c0014732 <Device::getName()>
c00129ec:	83 c4 10             	add    esp,0x10
c00129ef:	83 ec 08             	sub    esp,0x8
c00129f2:	68 d9 a8 02 c0       	push   0xc002a8d9
c00129f7:	50                   	push   eax
c00129f8:	e8 c3 de fe ff       	call   c00008c0 <strcmp>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	85 c0                	test   eax,eax
c0012a02:	0f 94 c0             	sete   al
c0012a05:	84 c0                	test   al,al
c0012a07:	74 70                	je     c0012a79 <VAS::VAS(bool)+0x255>
c0012a09:	e8 95 b4 00 00       	call   c001dea3 <disableIRQs()>
c0012a0e:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0012a13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a19:	05 7c 09 00 00       	add    eax,0x97c
c0012a1e:	83 ec 0c             	sub    esp,0xc
c0012a21:	50                   	push   eax
c0012a22:	e8 95 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a27:	83 c4 10             	add    esp,0x10
c0012a2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2f:	89 c3                	mov    ebx,eax
c0012a31:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0012a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a3c:	05 7c 09 00 00       	add    eax,0x97c
c0012a41:	83 ec 0c             	sub    esp,0xc
c0012a44:	50                   	push   eax
c0012a45:	e8 72 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a4a:	83 c4 10             	add    esp,0x10
c0012a4d:	83 ec 08             	sub    esp,0x8
c0012a50:	50                   	push   eax
c0012a51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a55:	e8 9c f5 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012a5a:	83 c4 10             	add    esp,0x10
c0012a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a64:	6a 11                	push   0x11
c0012a66:	53                   	push   ebx
c0012a67:	50                   	push   eax
c0012a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a6c:	e8 0b f9 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	e8 38 b4 00 00       	call   c001deb1 <enableIRQs()>
c0012a79:	90                   	nop
c0012a7a:	83 c4 28             	add    esp,0x28
c0012a7d:	5b                   	pop    ebx
c0012a7e:	c3                   	ret    
c0012a7f:	90                   	nop

c0012a80 <VAS::evict(unsigned long)>:
c0012a80:	55                   	push   ebp
c0012a81:	57                   	push   edi
c0012a82:	56                   	push   esi
c0012a83:	53                   	push   ebx
c0012a84:	83 ec 1c             	sub    esp,0x1c
c0012a87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a93:	e8 28 b4 00 00       	call   c001dec0 <lockScheduler()>
c0012a98:	e8 49 f2 ff ff       	call   c0011ce6 <Virt::allocateSwapfilePage()>
c0012a9d:	89 c7                	mov    edi,eax
c0012a9f:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c0012aa4:	85 c0                	test   eax,eax
c0012aa6:	7e 3d                	jle    c0012ae5 <VAS::evict(unsigned long)+0x65>
c0012aa8:	89 ee                	mov    esi,ebp
c0012aaa:	31 db                	xor    ebx,ebx
c0012aac:	83 ec 0c             	sub    esp,0xc
c0012aaf:	57                   	push   edi
c0012ab0:	e8 1f f2 ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012ab5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ab8:	01 d8                	add    eax,ebx
c0012aba:	6a 01                	push   0x1
c0012abc:	31 d2                	xor    edx,edx
c0012abe:	43                   	inc    ebx
c0012abf:	52                   	push   edx
c0012ac0:	81 c6 00 02 00 00    	add    esi,0x200
c0012ac6:	50                   	push   eax
c0012ac7:	0f be 05 b8 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d4b8
c0012ace:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0012ad5:	e8 ce 3d 00 00       	call   c00168a8 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ada:	83 c4 20             	add    esp,0x20
c0012add:	39 1d ac d4 02 c0    	cmp    DWORD PTR ds:0xc002d4ac,ebx
c0012ae3:	7f c7                	jg     c0012aac <VAS::evict(unsigned long)+0x2c>
c0012ae5:	83 ec 08             	sub    esp,0x8
c0012ae8:	c1 e7 0b             	shl    edi,0xb
c0012aeb:	55                   	push   ebp
c0012aec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012af0:	e8 01 f5 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012af5:	89 c3                	mov    ebx,eax
c0012af7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012af9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012afe:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b01:	e8 55 d3 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012b06:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b08:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012b0e:	09 d7                	or     edi,edx
c0012b10:	89 3b                	mov    DWORD PTR [ebx],edi
c0012b12:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0012b17:	40                   	inc    eax
c0012b18:	a3 84 e6 02 c0       	mov    ds:0xc002e684,eax
c0012b1d:	0f 20 da             	mov    edx,cr3
c0012b20:	0f 22 da             	mov    cr3,edx
c0012b23:	83 c4 0c             	add    esp,0xc
c0012b26:	50                   	push   eax
c0012b27:	55                   	push   ebp
c0012b28:	68 e7 a8 02 c0       	push   0xc002a8e7
c0012b2d:	e8 ed 04 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012b32:	83 c4 2c             	add    esp,0x2c
c0012b35:	5b                   	pop    ebx
c0012b36:	5e                   	pop    esi
c0012b37:	5f                   	pop    edi
c0012b38:	5d                   	pop    ebp
c0012b39:	e9 84 b3 00 00       	jmp    c001dec2 <unlockScheduler()>

c0012b3e <VAS::scanForEviction(int, int)>:
c0012b3e:	55                   	push   ebp
c0012b3f:	31 ed                	xor    ebp,ebp
c0012b41:	57                   	push   edi
c0012b42:	56                   	push   esi
c0012b43:	be 00 00 40 00       	mov    esi,0x400000
c0012b48:	53                   	push   ebx
c0012b49:	83 ec 28             	sub    esp,0x28
c0012b4c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012b50:	68 fc a8 02 c0       	push   0xc002a8fc
c0012b55:	e8 c5 04 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012b5a:	83 c4 10             	add    esp,0x10
c0012b5d:	ff 05 90 e6 02 c0    	inc    DWORD PTR ds:0xc002e690
c0012b63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b6b:	eb 11                	jmp    c0012b7e <VAS::scanForEviction(int, int)+0x40>
c0012b6d:	83 c5 04             	add    ebp,0x4
c0012b70:	81 c6 00 00 40 00    	add    esi,0x400000
c0012b76:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c0012b7c:	74 76                	je     c0012bf4 <VAS::scanForEviction(int, int)+0xb6>
c0012b7e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012b81:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0012b85:	74 e6                	je     c0012b6d <VAS::scanForEviction(int, int)+0x2f>
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	8d 9e 00 00 c0 ff    	lea    ebx,[esi-0x400000]
c0012b90:	68 15 a9 02 c0       	push   0xc002a915
c0012b95:	e8 85 04 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012b9a:	83 c4 10             	add    esp,0x10
c0012b9d:	eb 0a                	jmp    c0012ba9 <VAS::scanForEviction(int, int)+0x6b>
c0012b9f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012ba5:	39 de                	cmp    esi,ebx
c0012ba7:	74 c4                	je     c0012b6d <VAS::scanForEviction(int, int)+0x2f>
c0012ba9:	83 ec 08             	sub    esp,0x8
c0012bac:	53                   	push   ebx
c0012bad:	57                   	push   edi
c0012bae:	e8 43 f4 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bb8:	89 d1                	mov    ecx,edx
c0012bba:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012bc0:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012bc6:	75 d7                	jne    c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bc8:	f6 c2 01             	test   dl,0x1
c0012bcb:	74 d2                	je     c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bcd:	f6 c2 40             	test   dl,0x40
c0012bd0:	74 07                	je     c0012bd9 <VAS::scanForEviction(int, int)+0x9b>
c0012bd2:	83 e2 bf             	and    edx,0xffffffbf
c0012bd5:	89 10                	mov    DWORD PTR [eax],edx
c0012bd7:	eb c6                	jmp    c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bd9:	83 ec 08             	sub    esp,0x8
c0012bdc:	53                   	push   ebx
c0012bdd:	57                   	push   edi
c0012bde:	e8 9d fe ff ff       	call   c0012a80 <VAS::evict(unsigned long)>
c0012be3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012be7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
c0012bf2:	75 ab                	jne    c0012b9f <VAS::scanForEviction(int, int)+0x61>
c0012bf4:	83 c4 1c             	add    esp,0x1c
c0012bf7:	5b                   	pop    ebx
c0012bf8:	5e                   	pop    esi
c0012bf9:	5f                   	pop    edi
c0012bfa:	5d                   	pop    ebp
c0012bfb:	c3                   	ret    

c0012bfc <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012bfc:	55                   	push   ebp
c0012bfd:	57                   	push   edi
c0012bfe:	56                   	push   esi
c0012bff:	53                   	push   ebx
c0012c00:	83 ec 14             	sub    esp,0x14
c0012c03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c07:	68 20 a9 02 c0       	push   0xc002a920
c0012c0c:	e8 0e 04 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c11:	c7 04 24 2a a9 02 c0 	mov    DWORD PTR [esp],0xc002a92a
c0012c18:	e8 02 04 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c1d:	e8 9e b2 00 00       	call   c001dec0 <lockScheduler()>
c0012c22:	c7 04 24 2e a9 02 c0 	mov    DWORD PTR [esp],0xc002a92e
c0012c29:	e8 f1 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c2e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012c32:	c7 04 24 32 a9 02 c0 	mov    DWORD PTR [esp],0xc002a932
c0012c39:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012c3f:	e8 db 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c44:	c7 04 24 36 a9 02 c0 	mov    DWORD PTR [esp],0xc002a936
c0012c4b:	e8 cf 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c50:	83 c4 10             	add    esp,0x10
c0012c53:	85 f6                	test   esi,esi
c0012c55:	74 52                	je     c0012ca9 <VAS::tryLoadBackOffDisk(unsigned long)+0xad>
c0012c57:	83 ec 08             	sub    esp,0x8
c0012c5a:	56                   	push   esi
c0012c5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c5f:	e8 92 f3 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c0012c64:	c7 04 24 4b a9 02 c0 	mov    DWORD PTR [esp],0xc002a94b
c0012c6b:	89 c3                	mov    ebx,eax
c0012c6d:	e8 ad 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c72:	83 c4 10             	add    esp,0x10
c0012c75:	85 db                	test   ebx,ebx
c0012c77:	74 05                	je     c0012c7e <VAS::tryLoadBackOffDisk(unsigned long)+0x82>
c0012c79:	f6 03 01             	test   BYTE PTR [ebx],0x1
c0012c7c:	74 4a                	je     c0012cc8 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0012c7e:	83 ec 0c             	sub    esp,0xc
c0012c81:	68 74 a9 02 c0       	push   0xc002a974
c0012c86:	e8 94 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c8b:	e8 32 b2 00 00       	call   c001dec2 <unlockScheduler()>
c0012c90:	c7 04 24 78 a9 02 c0 	mov    DWORD PTR [esp],0xc002a978
c0012c97:	e8 83 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	31 c0                	xor    eax,eax
c0012ca1:	83 c4 0c             	add    esp,0xc
c0012ca4:	5b                   	pop    ebx
c0012ca5:	5e                   	pop    esi
c0012ca6:	5f                   	pop    edi
c0012ca7:	5d                   	pop    ebp
c0012ca8:	c3                   	ret    
c0012ca9:	83 ec 0c             	sub    esp,0xc
c0012cac:	68 3a a9 02 c0       	push   0xc002a93a
c0012cb1:	e8 69 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012cb6:	e8 07 b2 00 00       	call   c001dec2 <unlockScheduler()>
c0012cbb:	83 c4 10             	add    esp,0x10
c0012cbe:	31 c0                	xor    eax,eax
c0012cc0:	83 c4 0c             	add    esp,0xc
c0012cc3:	5b                   	pop    ebx
c0012cc4:	5e                   	pop    esi
c0012cc5:	5f                   	pop    edi
c0012cc6:	5d                   	pop    ebp
c0012cc7:	c3                   	ret    
c0012cc8:	83 ec 0c             	sub    esp,0xc
c0012ccb:	68 4f a9 02 c0       	push   0xc002a94f
c0012cd0:	e8 4a 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012cd5:	c6 05 40 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e540,0x1
c0012cdc:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012cde:	e8 02 d2 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012ce3:	c1 ed 0b             	shr    ebp,0xb
c0012ce6:	89 c7                	mov    edi,eax
c0012ce8:	c7 04 24 53 a9 02 c0 	mov    DWORD PTR [esp],0xc002a953
c0012cef:	c6 05 40 e5 02 c0 00 	mov    BYTE PTR ds:0xc002e540,0x0
c0012cf6:	e8 24 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cfd:	25 ff 0f 00 00       	and    eax,0xfff
c0012d02:	09 f8                	or     eax,edi
c0012d04:	0d 01 08 00 00       	or     eax,0x801
c0012d09:	89 03                	mov    DWORD PTR [ebx],eax
c0012d0b:	c7 04 24 57 a9 02 c0 	mov    DWORD PTR [esp],0xc002a957
c0012d12:	e8 08 03 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012d17:	83 c4 10             	add    esp,0x10
c0012d1a:	8b 15 ac d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4ac
c0012d20:	85 d2                	test   edx,edx
c0012d22:	7e 3d                	jle    c0012d61 <VAS::tryLoadBackOffDisk(unsigned long)+0x165>
c0012d24:	89 f7                	mov    edi,esi
c0012d26:	31 db                	xor    ebx,ebx
c0012d28:	83 ec 0c             	sub    esp,0xc
c0012d2b:	55                   	push   ebp
c0012d2c:	e8 a3 ef ff ff       	call   c0011cd4 <Virt::swapIDToSector(unsigned long)>
c0012d31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d34:	01 d8                	add    eax,ebx
c0012d36:	6a 01                	push   0x1
c0012d38:	31 d2                	xor    edx,edx
c0012d3a:	43                   	inc    ebx
c0012d3b:	52                   	push   edx
c0012d3c:	81 c7 00 02 00 00    	add    edi,0x200
c0012d42:	50                   	push   eax
c0012d43:	0f be 05 b8 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d4b8
c0012d4a:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0012d51:	e8 e6 3a 00 00       	call   c001683c <LogicalDisk::read(unsigned long long, int, void*)>
c0012d56:	83 c4 20             	add    esp,0x20
c0012d59:	39 1d ac d4 02 c0    	cmp    DWORD PTR ds:0xc002d4ac,ebx
c0012d5f:	7f c7                	jg     c0012d28 <VAS::tryLoadBackOffDisk(unsigned long)+0x12c>
c0012d61:	83 ec 0c             	sub    esp,0xc
c0012d64:	68 5b a9 02 c0       	push   0xc002a95b
c0012d69:	e8 b1 02 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012d6e:	83 c4 0c             	add    esp,0xc
c0012d71:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0012d76:	48                   	dec    eax
c0012d77:	50                   	push   eax
c0012d78:	a3 84 e6 02 c0       	mov    ds:0xc002e684,eax
c0012d7d:	56                   	push   esi
c0012d7e:	68 5f a9 02 c0       	push   0xc002a95f
c0012d83:	e8 97 02 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012d88:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d8b:	e8 26 ef ff ff       	call   c0011cb6 <Virt::freeSwapfilePage(unsigned long)>
c0012d90:	e8 2d b1 00 00       	call   c001dec2 <unlockScheduler()>
c0012d95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012d99:	83 c4 10             	add    esp,0x10
c0012d9c:	25 ff 0f 00 00       	and    eax,0xfff
c0012da1:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012da6:	77 20                	ja     c0012dc8 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cc>
c0012da8:	a1 94 e6 02 c0       	mov    eax,ds:0xc002e694
c0012dad:	40                   	inc    eax
c0012dae:	a3 94 e6 02 c0       	mov    ds:0xc002e694,eax
c0012db3:	83 f8 08             	cmp    eax,0x8
c0012db6:	74 28                	je     c0012de0 <VAS::tryLoadBackOffDisk(unsigned long)+0x1e4>
c0012db8:	0f 20 d8             	mov    eax,cr3
c0012dbb:	0f 22 d8             	mov    cr3,eax
c0012dbe:	b0 01                	mov    al,0x1
c0012dc0:	83 c4 0c             	add    esp,0xc
c0012dc3:	5b                   	pop    ebx
c0012dc4:	5e                   	pop    esi
c0012dc5:	5f                   	pop    edi
c0012dc6:	5d                   	pop    ebp
c0012dc7:	c3                   	ret    
c0012dc8:	83 ec 08             	sub    esp,0x8
c0012dcb:	81 c6 00 10 00 00    	add    esi,0x1000
c0012dd1:	56                   	push   esi
c0012dd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012dd6:	e8 21 fe ff ff       	call   c0012bfc <VAS::tryLoadBackOffDisk(unsigned long)>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	eb c8                	jmp    c0012da8 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ac>
c0012de0:	50                   	push   eax
c0012de1:	6a 08                	push   0x8
c0012de3:	6a 01                	push   0x1
c0012de5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012de9:	e8 50 fd ff ff       	call   c0012b3e <VAS::scanForEviction(int, int)>
c0012dee:	c7 05 94 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e694,0x0
c0012df8:	83 c4 10             	add    esp,0x10
c0012dfb:	eb bb                	jmp    c0012db8 <VAS::tryLoadBackOffDisk(unsigned long)+0x1bc>

c0012dfd <mapVASFirstTime>:
c0012dfd:	55                   	push   ebp
c0012dfe:	57                   	push   edi
c0012dff:	56                   	push   esi
c0012e00:	53                   	push   ebx
c0012e01:	83 ec 0c             	sub    esp,0xc
c0012e04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e09:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012e0c:	4a                   	dec    edx
c0012e0d:	0f 84 8e 00 00 00    	je     c0012ea1 <mapVASFirstTime+0xa4>
c0012e13:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012e16:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012e19:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012e1e:	c1 e5 15             	shl    ebp,0x15
c0012e21:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012e26:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012e2c:	29 eb                	sub    ebx,ebp
c0012e2e:	29 ee                	sub    esi,ebp
c0012e30:	e8 b0 d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e35:	83 ec 0c             	sub    esp,0xc
c0012e38:	68 03 04 00 00       	push   0x403
c0012e3d:	6a 01                	push   0x1
c0012e3f:	53                   	push   ebx
c0012e40:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e46:	50                   	push   eax
c0012e47:	57                   	push   edi
c0012e48:	e8 23 f8 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e4d:	83 c4 20             	add    esp,0x20
c0012e50:	39 f3                	cmp    ebx,esi
c0012e52:	75 dc                	jne    c0012e30 <mapVASFirstTime+0x33>
c0012e54:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e59:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e5e:	29 ee                	sub    esi,ebp
c0012e60:	29 e8                	sub    eax,ebp
c0012e62:	89 c5                	mov    ebp,eax
c0012e64:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e68:	19 db                	sbb    ebx,ebx
c0012e6a:	e8 76 d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e6f:	83 e3 04             	and    ebx,0x4
c0012e72:	83 ec 0c             	sub    esp,0xc
c0012e75:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e7b:	53                   	push   ebx
c0012e7c:	6a 01                	push   0x1
c0012e7e:	56                   	push   esi
c0012e7f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e85:	50                   	push   eax
c0012e86:	57                   	push   edi
c0012e87:	e8 e4 f7 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e8c:	83 c4 20             	add    esp,0x20
c0012e8f:	39 f5                	cmp    ebp,esi
c0012e91:	75 d1                	jne    c0012e64 <mapVASFirstTime+0x67>
c0012e93:	0f 20 d8             	mov    eax,cr3
c0012e96:	0f 22 d8             	mov    cr3,eax
c0012e99:	83 c4 0c             	add    esp,0xc
c0012e9c:	5b                   	pop    ebx
c0012e9d:	5e                   	pop    esi
c0012e9e:	5f                   	pop    edi
c0012e9f:	5d                   	pop    ebp
c0012ea0:	c3                   	ret    
c0012ea1:	83 ec 0c             	sub    esp,0xc
c0012ea4:	68 7c a9 02 c0       	push   0xc002a97c
c0012ea9:	e8 71 01 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012eae:	83 c4 10             	add    esp,0x10
c0012eb1:	83 c4 0c             	add    esp,0xc
c0012eb4:	5b                   	pop    ebx
c0012eb5:	5e                   	pop    esi
c0012eb6:	5f                   	pop    edi
c0012eb7:	5d                   	pop    ebp
c0012eb8:	c3                   	ret    

c0012eb9 <__cxa_atexit>:
c0012eb9:	31 c0                	xor    eax,eax
c0012ebb:	c3                   	ret    

c0012ebc <__cxa_finalize>:
c0012ebc:	c3                   	ret    

c0012ebd <__stack_chk_fail>:
c0012ebd:	55                   	push   ebp
c0012ebe:	89 e5                	mov    ebp,esp
c0012ec0:	83 ec 14             	sub    esp,0x14
c0012ec3:	68 95 a9 02 c0       	push   0xc002a995
c0012ec8:	e8 52 01 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012ecd:	58                   	pop    eax
c0012ece:	5a                   	pop    edx
c0012ecf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012ed2:	68 e5 a9 02 c0       	push   0xc002a9e5
c0012ed7:	e8 43 01 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012edc:	59                   	pop    ecx
c0012edd:	58                   	pop    eax
c0012ede:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ee1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ee4:	68 e5 a9 02 c0       	push   0xc002a9e5
c0012ee9:	e8 31 01 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012eee:	5a                   	pop    edx
c0012eef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ef2:	59                   	pop    ecx
c0012ef3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ef5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ef8:	68 e5 a9 02 c0       	push   0xc002a9e5
c0012efd:	e8 1d 01 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012f02:	5a                   	pop    edx
c0012f03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012f06:	59                   	pop    ecx
c0012f07:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f09:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f0b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012f0e:	68 e5 a9 02 c0       	push   0xc002a9e5
c0012f13:	e8 07 01 00 00       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0012f18:	c7 04 24 ed a9 02 c0 	mov    DWORD PTR [esp],0xc002a9ed
c0012f1f:	e8 a9 77 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	c9                   	leave  
c0012f28:	c3                   	ret    

c0012f29 <__cxa_pure_virtual>:
c0012f29:	83 ec 18             	sub    esp,0x18
c0012f2c:	68 05 aa 02 c0       	push   0xc002aa05
c0012f31:	e8 97 77 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0012f36:	83 c4 1c             	add    esp,0x1c
c0012f39:	c3                   	ret    

c0012f3a <operator new[](unsigned long)>:
c0012f3a:	e9 04 c9 ff ff       	jmp    c000f843 <malloc>

c0012f3f <operator delete(void*, unsigned long)>:
c0012f3f:	e9 1f c9 ff ff       	jmp    c000f863 <rfree>

c0012f44 <operator delete[](void*)>:
c0012f44:	e9 1a c9 ff ff       	jmp    c000f863 <rfree>

c0012f49 <operator delete[](void*, unsigned long)>:
c0012f49:	e9 15 c9 ff ff       	jmp    c000f863 <rfree>

c0012f4e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f4e:	57                   	push   edi
c0012f4f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f54:	56                   	push   esi
c0012f55:	be 18 aa 02 c0       	mov    esi,0xc002aa18
c0012f5a:	53                   	push   ebx
c0012f5b:	83 ec 40             	sub    esp,0x40
c0012f5e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f62:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f66:	fc                   	cld    
c0012f67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f69:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f6d:	83 f9 3e             	cmp    ecx,0x3e
c0012f70:	7e 05                	jle    c0012f77 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f72:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f77:	89 df                	mov    edi,ebx
c0012f79:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f7d:	eb 02                	jmp    c0012f81 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f7f:	89 c7                	mov    edi,eax
c0012f81:	31 d2                	xor    edx,edx
c0012f83:	46                   	inc    esi
c0012f84:	89 f8                	mov    eax,edi
c0012f86:	f7 f1                	div    ecx
c0012f88:	39 cf                	cmp    edi,ecx
c0012f8a:	73 f3                	jae    c0012f7f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f8c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f8f:	eb 02                	jmp    c0012f93 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f91:	89 c3                	mov    ebx,eax
c0012f93:	31 d2                	xor    edx,edx
c0012f95:	4e                   	dec    esi
c0012f96:	89 d8                	mov    eax,ebx
c0012f98:	f7 f1                	div    ecx
c0012f9a:	39 cb                	cmp    ebx,ecx
c0012f9c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012fa0:	88 16                	mov    BYTE PTR [esi],dl
c0012fa2:	73 ed                	jae    c0012f91 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012fa4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012fa8:	83 c4 40             	add    esp,0x40
c0012fab:	5b                   	pop    ebx
c0012fac:	5e                   	pop    esi
c0012fad:	5f                   	pop    edi
c0012fae:	c3                   	ret    

c0012faf <Dbg::logc(char)>:
c0012faf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012fb3:	ba fd 03 00 00       	mov    edx,0x3fd
c0012fb8:	ec                   	in     al,dx
c0012fb9:	a8 20                	test   al,0x20
c0012fbb:	74 fb                	je     c0012fb8 <Dbg::logc(char)+0x9>
c0012fbd:	ba f8 03 00 00       	mov    edx,0x3f8
c0012fc2:	88 c8                	mov    al,cl
c0012fc4:	ee                   	out    dx,al
c0012fc5:	c3                   	ret    

c0012fc6 <Dbg::logs(char*)>:
c0012fc6:	53                   	push   ebx
c0012fc7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012fcb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fce:	84 c0                	test   al,al
c0012fd0:	74 0f                	je     c0012fe1 <Dbg::logs(char*)+0x1b>
c0012fd2:	50                   	push   eax
c0012fd3:	43                   	inc    ebx
c0012fd4:	e8 d6 ff ff ff       	call   c0012faf <Dbg::logc(char)>
c0012fd9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fdc:	5a                   	pop    edx
c0012fdd:	84 c0                	test   al,al
c0012fdf:	75 f1                	jne    c0012fd2 <Dbg::logs(char*)+0xc>
c0012fe1:	5b                   	pop    ebx
c0012fe2:	c3                   	ret    

c0012fe3 <Dbg::logWriteInt(unsigned int)>:
c0012fe3:	83 ec 10             	sub    esp,0x10
c0012fe6:	6a 0a                	push   0xa
c0012fe8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fec:	50                   	push   eax
c0012fed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ff1:	e8 58 ff ff ff       	call   c0012f4e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ff6:	50                   	push   eax
c0012ff7:	e8 ca ff ff ff       	call   c0012fc6 <Dbg::logs(char*)>
c0012ffc:	83 c4 20             	add    esp,0x20
c0012fff:	c3                   	ret    

c0013000 <Dbg::logWriteIntBase(unsigned int, int)>:
c0013000:	83 ec 10             	sub    esp,0x10
c0013003:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013007:	8d 44 24 08          	lea    eax,[esp+0x8]
c001300b:	50                   	push   eax
c001300c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013010:	e8 39 ff ff ff       	call   c0012f4e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0013015:	50                   	push   eax
c0013016:	e8 ab ff ff ff       	call   c0012fc6 <Dbg::logs(char*)>
c001301b:	83 c4 20             	add    esp,0x20
c001301e:	c3                   	ret    

c001301f <Dbg::kprintf(char const*, ...)>:
c001301f:	55                   	push   ebp
c0013020:	57                   	push   edi
c0013021:	56                   	push   esi
c0013022:	53                   	push   ebx
c0013023:	83 ec 0c             	sub    esp,0xc
c0013026:	8d 44 24 24          	lea    eax,[esp+0x24]
c001302a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001302e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013032:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013035:	84 c0                	test   al,al
c0013037:	74 4a                	je     c0013083 <Dbg::kprintf(char const*, ...)+0x64>
c0013039:	31 db                	xor    ebx,ebx
c001303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001303e:	3c 25                	cmp    al,0x25
c0013040:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0013043:	0f 85 e4 00 00 00    	jne    c001312d <Dbg::kprintf(char const*, ...)+0x10e>
c0013049:	83 c3 02             	add    ebx,0x2
c001304c:	8a 07                	mov    al,BYTE PTR [edi]
c001304e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0013051:	83 e8 25             	sub    eax,0x25
c0013054:	3c 53                	cmp    al,0x53
c0013056:	0f 87 ba 00 00 00    	ja     c0013116 <Dbg::kprintf(char const*, ...)+0xf7>
c001305c:	0f b6 c0             	movzx  eax,al
c001305f:	ff 24 85 58 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd55a8]
c0013066:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001306a:	89 c8                	mov    eax,ecx
c001306c:	83 c1 04             	add    ecx,0x4
c001306f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013073:	ff 30                	push   DWORD PTR [eax]
c0013075:	e8 4c ff ff ff       	call   c0012fc6 <Dbg::logs(char*)>
c001307a:	58                   	pop    eax
c001307b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001307f:	84 c0                	test   al,al
c0013081:	75 b8                	jne    c001303b <Dbg::kprintf(char const*, ...)+0x1c>
c0013083:	83 c4 0c             	add    esp,0xc
c0013086:	5b                   	pop    ebx
c0013087:	5e                   	pop    esi
c0013088:	5f                   	pop    edi
c0013089:	5d                   	pop    ebp
c001308a:	c3                   	ret    
c001308b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001308f:	89 d0                	mov    eax,edx
c0013091:	83 c2 04             	add    edx,0x4
c0013094:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013098:	ff 30                	push   DWORD PTR [eax]
c001309a:	e8 44 ff ff ff       	call   c0012fe3 <Dbg::logWriteInt(unsigned int)>
c001309f:	58                   	pop    eax
c00130a0:	eb d9                	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c00130a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130a6:	89 d0                	mov    eax,edx
c00130a8:	83 c2 04             	add    edx,0x4
c00130ab:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00130ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130b2:	50                   	push   eax
c00130b3:	e8 f7 fe ff ff       	call   c0012faf <Dbg::logc(char)>
c00130b8:	58                   	pop    eax
c00130b9:	eb c0                	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c00130bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130bf:	89 c8                	mov    eax,ecx
c00130c1:	83 c1 04             	add    ecx,0x4
c00130c4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130c8:	ff 30                	push   DWORD PTR [eax]
c00130ca:	e8 14 ff ff ff       	call   c0012fe3 <Dbg::logWriteInt(unsigned int)>
c00130cf:	5f                   	pop    edi
c00130d0:	eb a9                	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c00130d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130d6:	89 c8                	mov    eax,ecx
c00130d8:	83 c1 04             	add    ecx,0x4
c00130db:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130df:	6a 10                	push   0x10
c00130e1:	ff 30                	push   DWORD PTR [eax]
c00130e3:	e8 18 ff ff ff       	call   c0013000 <Dbg::logWriteIntBase(unsigned int, int)>
c00130e8:	59                   	pop    ecx
c00130e9:	5f                   	pop    edi
c00130ea:	eb 8f                	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c00130ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130f0:	89 d0                	mov    eax,edx
c00130f2:	83 c2 08             	add    edx,0x8
c00130f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130f9:	6a 10                	push   0x10
c00130fb:	ff 30                	push   DWORD PTR [eax]
c00130fd:	e8 fe fe ff ff       	call   c0013000 <Dbg::logWriteIntBase(unsigned int, int)>
c0013102:	58                   	pop    eax
c0013103:	5a                   	pop    edx
c0013104:	e9 72 ff ff ff       	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c0013109:	6a 25                	push   0x25
c001310b:	e8 9f fe ff ff       	call   c0012faf <Dbg::logc(char)>
c0013110:	58                   	pop    eax
c0013111:	e9 65 ff ff ff       	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c0013116:	6a 25                	push   0x25
c0013118:	e8 92 fe ff ff       	call   c0012faf <Dbg::logc(char)>
c001311d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0013120:	50                   	push   eax
c0013121:	e8 89 fe ff ff       	call   c0012faf <Dbg::logc(char)>
c0013126:	5a                   	pop    edx
c0013127:	59                   	pop    ecx
c0013128:	e9 4e ff ff ff       	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c001312d:	50                   	push   eax
c001312e:	89 eb                	mov    ebx,ebp
c0013130:	e8 7a fe ff ff       	call   c0012faf <Dbg::logc(char)>
c0013135:	89 fd                	mov    ebp,edi
c0013137:	58                   	pop    eax
c0013138:	e9 3e ff ff ff       	jmp    c001307b <Dbg::kprintf(char const*, ...)+0x5c>
c001313d:	90                   	nop

c001313e <File::read(unsigned long long, void*, int*)>:
c001313e:	53                   	push   ebx
c001313f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013143:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013147:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001314e:	3c 19                	cmp    al,0x19
c0013150:	77 35                	ja     c0013187 <File::read(unsigned long long, void*, int*)+0x49>
c0013152:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0013159:	85 c0                	test   eax,eax
c001315b:	74 2a                	je     c0013187 <File::read(unsigned long long, void*, int*)+0x49>
c001315d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013163:	85 c0                	test   eax,eax
c0013165:	74 20                	je     c0013187 <File::read(unsigned long long, void*, int*)+0x49>
c0013167:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001316b:	74 21                	je     c001318e <File::read(unsigned long long, void*, int*)+0x50>
c001316d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001316f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013173:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013179:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001317d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013181:	5b                   	pop    ebx
c0013182:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013185:	ff e0                	jmp    eax
c0013187:	b8 0b 00 00 00       	mov    eax,0xb
c001318c:	eb 05                	jmp    c0013193 <File::read(unsigned long long, void*, int*)+0x55>
c001318e:	b8 05 00 00 00       	mov    eax,0x5
c0013193:	5b                   	pop    ebx
c0013194:	c3                   	ret    
c0013195:	90                   	nop

c0013196 <File::write(unsigned long long, void*, int*)>:
c0013196:	53                   	push   ebx
c0013197:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001319b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001319f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131a6:	3c 19                	cmp    al,0x19
c00131a8:	77 35                	ja     c00131df <File::write(unsigned long long, void*, int*)+0x49>
c00131aa:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c00131b1:	85 c0                	test   eax,eax
c00131b3:	74 2a                	je     c00131df <File::write(unsigned long long, void*, int*)+0x49>
c00131b5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131bb:	85 c0                	test   eax,eax
c00131bd:	74 20                	je     c00131df <File::write(unsigned long long, void*, int*)+0x49>
c00131bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131c3:	74 21                	je     c00131e6 <File::write(unsigned long long, void*, int*)+0x50>
c00131c5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131c7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131cb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131d9:	5b                   	pop    ebx
c00131da:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131dd:	ff e0                	jmp    eax
c00131df:	b8 0b 00 00 00       	mov    eax,0xb
c00131e4:	eb 05                	jmp    c00131eb <File::write(unsigned long long, void*, int*)+0x55>
c00131e6:	b8 05 00 00 00       	mov    eax,0x5
c00131eb:	5b                   	pop    ebx
c00131ec:	c3                   	ret    
c00131ed:	90                   	nop

c00131ee <Directory::read(unsigned long long, void*, int*)>:
c00131ee:	53                   	push   ebx
c00131ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131fe:	3c 19                	cmp    al,0x19
c0013200:	77 35                	ja     c0013237 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013202:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0013209:	85 c0                	test   eax,eax
c001320b:	74 2a                	je     c0013237 <Directory::read(unsigned long long, void*, int*)+0x49>
c001320d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013213:	85 c0                	test   eax,eax
c0013215:	74 20                	je     c0013237 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013217:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001321b:	74 21                	je     c001323e <Directory::read(unsigned long long, void*, int*)+0x50>
c001321d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001321f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013223:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013229:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001322d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013231:	5b                   	pop    ebx
c0013232:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013235:	ff e0                	jmp    eax
c0013237:	b8 0b 00 00 00       	mov    eax,0xb
c001323c:	eb 05                	jmp    c0013243 <Directory::read(unsigned long long, void*, int*)+0x55>
c001323e:	b8 05 00 00 00       	mov    eax,0x5
c0013243:	5b                   	pop    ebx
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <Directory::write(unsigned long long, void*, int*)>:
c0013246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001324a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013251:	b8 0b 00 00 00       	mov    eax,0xb
c0013256:	80 fa 19             	cmp    dl,0x19
c0013259:	77 18                	ja     c0013273 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001325b:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013262:	85 d2                	test   edx,edx
c0013264:	74 0d                	je     c0013273 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013266:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001326d:	19 c0                	sbb    eax,eax
c001326f:	83 e0 0a             	and    eax,0xa
c0013272:	40                   	inc    eax
c0013273:	c3                   	ret    

c0013274 <File::isAtty()>:
c0013274:	31 c0                	xor    eax,eax
c0013276:	c3                   	ret    
c0013277:	90                   	nop

c0013278 <Directory::isAtty()>:
c0013278:	31 c0                	xor    eax,eax
c001327a:	c3                   	ret    
c001327b:	90                   	nop

c001327c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001327c:	b8 0a 00 00 00       	mov    eax,0xa
c0013281:	c3                   	ret    

c0013282 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013282:	b8 0a 00 00 00       	mov    eax,0xa
c0013287:	c3                   	ret    

c0013288 <File::~File()>:
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	ba 14 ac 02 c0       	mov    edx,0xc002ac14
c0013290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013294:	89 10                	mov    DWORD PTR [eax],edx
c0013296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001329a:	83 ec 0c             	sub    esp,0xc
c001329d:	50                   	push   eax
c001329e:	e8 a1 e6 ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00132a3:	83 c4 10             	add    esp,0x10
c00132a6:	90                   	nop
c00132a7:	83 c4 0c             	add    esp,0xc
c00132aa:	c3                   	ret    
c00132ab:	90                   	nop

c00132ac <File::~File()>:
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	83 ec 0c             	sub    esp,0xc
c00132b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132b6:	e8 cd ff ff ff       	call   c0013288 <File::~File()>
c00132bb:	83 c4 10             	add    esp,0x10
c00132be:	83 ec 08             	sub    esp,0x8
c00132c1:	68 14 01 00 00       	push   0x114
c00132c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132ca:	e8 70 fc ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00132cf:	83 c4 10             	add    esp,0x10
c00132d2:	83 c4 0c             	add    esp,0xc
c00132d5:	c3                   	ret    

c00132d6 <Directory::~Directory()>:
c00132d6:	83 ec 0c             	sub    esp,0xc
c00132d9:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c00132de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e2:	89 10                	mov    DWORD PTR [eax],edx
c00132e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e8:	83 ec 0c             	sub    esp,0xc
c00132eb:	50                   	push   eax
c00132ec:	e8 53 e6 ff ff       	call   c0011944 <UnixFile::~UnixFile()>
c00132f1:	83 c4 10             	add    esp,0x10
c00132f4:	90                   	nop
c00132f5:	83 c4 0c             	add    esp,0xc
c00132f8:	c3                   	ret    
c00132f9:	90                   	nop

c00132fa <Directory::~Directory()>:
c00132fa:	83 ec 0c             	sub    esp,0xc
c00132fd:	83 ec 0c             	sub    esp,0xc
c0013300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013304:	e8 cd ff ff ff       	call   c00132d6 <Directory::~Directory()>
c0013309:	83 c4 10             	add    esp,0x10
c001330c:	83 ec 08             	sub    esp,0x8
c001330f:	68 14 01 00 00       	push   0x114
c0013314:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013318:	e8 22 fc ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c001331d:	83 c4 10             	add    esp,0x10
c0013320:	83 c4 0c             	add    esp,0xc
c0013323:	c3                   	ret    

c0013324 <Filesystem::Filesystem()>:
c0013324:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c0013329:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001332d:	89 10                	mov    DWORD PTR [eax],edx
c001332f:	8b 15 98 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e698
c0013335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013339:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001333c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013340:	a3 98 e6 02 c0       	mov    ds:0xc002e698,eax
c0013345:	90                   	nop
c0013346:	c3                   	ret    
c0013347:	90                   	nop

c0013348 <Filesystem::~Filesystem()>:
c0013348:	ba b0 ab 02 c0       	mov    edx,0xc002abb0
c001334d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013351:	89 10                	mov    DWORD PTR [eax],edx
c0013353:	90                   	nop
c0013354:	c3                   	ret    
c0013355:	90                   	nop

c0013356 <Filesystem::~Filesystem()>:
c0013356:	83 ec 0c             	sub    esp,0xc
c0013359:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001335d:	e8 e6 ff ff ff       	call   c0013348 <Filesystem::~Filesystem()>
c0013362:	83 c4 04             	add    esp,0x4
c0013365:	83 ec 08             	sub    esp,0x8
c0013368:	6a 08                	push   0x8
c001336a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001336e:	e8 cc fb ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	83 c4 0c             	add    esp,0xc
c0013379:	c3                   	ret    

c001337a <Fs::getcwd(Process*, char*, int)>:
c001337a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001337e:	31 c0                	xor    eax,eax
c0013380:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013383:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013387:	7d 15                	jge    c001339e <Fs::getcwd(Process*, char*, int)+0x24>
c0013389:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001338d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013394:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013397:	84 c9                	test   cl,cl
c0013399:	74 06                	je     c00133a1 <Fs::getcwd(Process*, char*, int)+0x27>
c001339b:	40                   	inc    eax
c001339c:	eb e2                	jmp    c0013380 <Fs::getcwd(Process*, char*, int)+0x6>
c001339e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00133a1:	31 c0                	xor    eax,eax
c00133a3:	c3                   	ret    

c00133a4 <Fs::initVFS()>:
c00133a4:	83 ec 18             	sub    esp,0x18
c00133a7:	6a 08                	push   0x8
c00133a9:	e8 95 c4 ff ff       	call   c000f843 <malloc>
c00133ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00133b1:	e8 7e dc 00 00       	call   c0021034 <FAT::FAT()>
c00133b6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00133bd:	e8 81 c4 ff ff       	call   c000f843 <malloc>
c00133c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00133c5:	e8 c2 ee 00 00       	call   c002228c <ISO9660::ISO9660()>
c00133ca:	83 c4 1c             	add    esp,0x1c
c00133cd:	c3                   	ret    

c00133ce <Fs::standardiseFiles(char*, char const*, char const*)>:
c00133ce:	55                   	push   ebp
c00133cf:	57                   	push   edi
c00133d0:	56                   	push   esi
c00133d1:	53                   	push   ebx
c00133d2:	81 ec 10 04 00 00    	sub    esp,0x410
c00133d8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133df:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133e6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00133ed:	68 00 04 00 00       	push   0x400
c00133f2:	6a 00                	push   0x0
c00133f4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133f8:	56                   	push   esi
c00133f9:	e8 7a d3 fe ff       	call   c0000778 <memset>
c00133fe:	83 c4 10             	add    esp,0x10
c0013401:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013405:	75 0b                	jne    c0013412 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013407:	50                   	push   eax
c0013408:	50                   	push   eax
c0013409:	57                   	push   edi
c001340a:	56                   	push   esi
c001340b:	e8 24 d4 fe ff       	call   c0000834 <strcpy>
c0013410:	eb 41                	jmp    c0013453 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013412:	8a 07                	mov    al,BYTE PTR [edi]
c0013414:	3c 5c                	cmp    al,0x5c
c0013416:	74 04                	je     c001341c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013418:	3c 2f                	cmp    al,0x2f
c001341a:	75 18                	jne    c0013434 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001341c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001341f:	3c 60                	cmp    al,0x60
c0013421:	7e 03                	jle    c0013426 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013423:	83 e8 20             	sub    eax,0x20
c0013426:	88 04 24             	mov    BYTE PTR [esp],al
c0013429:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013430:	50                   	push   eax
c0013431:	50                   	push   eax
c0013432:	eb 18                	jmp    c001344c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013434:	50                   	push   eax
c0013435:	50                   	push   eax
c0013436:	55                   	push   ebp
c0013437:	56                   	push   esi
c0013438:	e8 f7 d3 fe ff       	call   c0000834 <strcpy>
c001343d:	5a                   	pop    edx
c001343e:	59                   	pop    ecx
c001343f:	68 f4 c2 02 c0       	push   0xc002c2f4
c0013444:	56                   	push   esi
c0013445:	e8 2a d5 fe ff       	call   c0000974 <strcat>
c001344a:	5d                   	pop    ebp
c001344b:	58                   	pop    eax
c001344c:	57                   	push   edi
c001344d:	56                   	push   esi
c001344e:	e8 21 d5 fe ff       	call   c0000974 <strcat>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013459:	3c 60                	cmp    al,0x60
c001345b:	7e 03                	jle    c0013460 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001345d:	83 e8 20             	sub    eax,0x20
c0013460:	88 04 24             	mov    BYTE PTR [esp],al
c0013463:	88 03                	mov    BYTE PTR [ebx],al
c0013465:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001346c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013472:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013476:	bf 03 00 00 00       	mov    edi,0x3
c001347b:	b8 03 00 00 00       	mov    eax,0x3
c0013480:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013483:	84 d2                	test   dl,dl
c0013485:	0f 84 91 00 00 00    	je     c001351c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001348b:	8d 4f 01             	lea    ecx,[edi+0x1]
c001348e:	80 fa 5c             	cmp    dl,0x5c
c0013491:	74 05                	je     c0013498 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013493:	80 fa 2f             	cmp    dl,0x2f
c0013496:	75 12                	jne    c00134aa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013498:	89 c5                	mov    ebp,eax
c001349a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001349f:	74 09                	je     c00134aa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00134a1:	40                   	inc    eax
c00134a2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00134a6:	89 cf                	mov    edi,ecx
c00134a8:	eb d6                	jmp    c0013480 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00134aa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00134af:	75 5b                	jne    c001350c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00134b1:	80 fa 2e             	cmp    dl,0x2e
c00134b4:	75 56                	jne    c001350c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00134b6:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00134ba:	74 19                	je     c00134d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00134bc:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134c1:	74 53                	je     c0013516 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134c3:	89 f9                	mov    ecx,edi
c00134c5:	41                   	inc    ecx
c00134c6:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134c9:	80 fa 2f             	cmp    dl,0x2f
c00134cc:	74 f7                	je     c00134c5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134ce:	80 fa 5c             	cmp    dl,0x5c
c00134d1:	74 f2                	je     c00134c5 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134d3:	eb d1                	jmp    c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134d5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134da:	74 3a                	je     c0013516 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134dc:	83 f8 03             	cmp    eax,0x3
c00134df:	74 c5                	je     c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e1:	41                   	inc    ecx
c00134e2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134e5:	80 fa 2f             	cmp    dl,0x2f
c00134e8:	74 f7                	je     c00134e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134ea:	80 fa 5c             	cmp    dl,0x5c
c00134ed:	74 f2                	je     c00134e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134ef:	48                   	dec    eax
c00134f0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134f4:	75 06                	jne    c00134fc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134f6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134fa:	eb f3                	jmp    c00134ef <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134fc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013500:	74 07                	je     c0013509 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013502:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013506:	48                   	dec    eax
c0013507:	eb f3                	jmp    c00134fc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013509:	40                   	inc    eax
c001350a:	eb 9a                	jmp    c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001350c:	80 fa 2f             	cmp    dl,0x2f
c001350f:	74 95                	je     c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013511:	80 fa 5c             	cmp    dl,0x5c
c0013514:	74 90                	je     c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013516:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013519:	40                   	inc    eax
c001351a:	eb 8a                	jmp    c00134a6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001351c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013520:	83 ec 0c             	sub    esp,0xc
c0013523:	53                   	push   ebx
c0013524:	e8 6b d2 fe ff       	call   c0000794 <strlen>
c0013529:	83 c4 10             	add    esp,0x10
c001352c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013531:	75 26                	jne    c0013559 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013533:	83 ec 0c             	sub    esp,0xc
c0013536:	53                   	push   ebx
c0013537:	e8 58 d2 fe ff       	call   c0000794 <strlen>
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013544:	74 26                	je     c001356c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013546:	83 ec 0c             	sub    esp,0xc
c0013549:	53                   	push   ebx
c001354a:	e8 45 d2 fe ff       	call   c0000794 <strlen>
c001354f:	83 c4 10             	add    esp,0x10
c0013552:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013557:	eb c7                	jmp    c0013520 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013559:	83 ec 0c             	sub    esp,0xc
c001355c:	53                   	push   ebx
c001355d:	e8 32 d2 fe ff       	call   c0000794 <strlen>
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001356a:	74 c7                	je     c0013533 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001356c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013572:	5b                   	pop    ebx
c0013573:	5e                   	pop    esi
c0013574:	5f                   	pop    edi
c0013575:	5d                   	pop    ebp
c0013576:	c3                   	ret    
c0013577:	90                   	nop

c0013578 <File::File(char const*, Process*)>:
c0013578:	83 ec 0c             	sub    esp,0xc
c001357b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357f:	83 ec 08             	sub    esp,0x8
c0013582:	6a 00                	push   0x0
c0013584:	50                   	push   eax
c0013585:	e8 d8 e1 ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	ba 14 ac 02 c0       	mov    edx,0xc002ac14
c0013592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013596:	89 10                	mov    DWORD PTR [eax],edx
c0013598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a6:	83 c0 0d             	add    eax,0xd
c00135a9:	83 ec 04             	sub    esp,0x4
c00135ac:	52                   	push   edx
c00135ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135b1:	50                   	push   eax
c00135b2:	e8 17 fe ff ff       	call   c00133ce <Fs::standardiseFiles(char*, char const*, char const*)>
c00135b7:	83 c4 10             	add    esp,0x10
c00135ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135be:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00135c1:	8d 50 bf             	lea    edx,[eax-0x41]
c00135c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00135ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135d6:	90                   	nop
c00135d7:	83 c4 0c             	add    esp,0xc
c00135da:	c3                   	ret    
c00135db:	90                   	nop

c00135dc <File::open(FileOpenMode)>:
c00135dc:	53                   	push   ebx
c00135dd:	b8 0b 00 00 00       	mov    eax,0xb
c00135e2:	83 ec 08             	sub    esp,0x8
c00135e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135e9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135f0:	80 fa 19             	cmp    dl,0x19
c00135f3:	77 40                	ja     c0013635 <File::open(FileOpenMode)+0x59>
c00135f5:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c00135fc:	85 d2                	test   edx,edx
c00135fe:	74 35                	je     c0013635 <File::open(FileOpenMode)+0x59>
c0013600:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013606:	85 d2                	test   edx,edx
c0013608:	74 2b                	je     c0013635 <File::open(FileOpenMode)+0x59>
c001360a:	b8 06 00 00 00       	mov    eax,0x6
c001360f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013613:	75 20                	jne    c0013635 <File::open(FileOpenMode)+0x59>
c0013615:	8b 02                	mov    eax,DWORD PTR [edx]
c0013617:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001361d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013621:	51                   	push   ecx
c0013622:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013625:	51                   	push   ecx
c0013626:	52                   	push   edx
c0013627:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	85 c0                	test   eax,eax
c001362f:	75 04                	jne    c0013635 <File::open(FileOpenMode)+0x59>
c0013631:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013635:	83 c4 08             	add    esp,0x8
c0013638:	5b                   	pop    ebx
c0013639:	c3                   	ret    

c001363a <File::close()>:
c001363a:	53                   	push   ebx
c001363b:	b8 0b 00 00 00       	mov    eax,0xb
c0013640:	83 ec 08             	sub    esp,0x8
c0013643:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013647:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001364e:	80 fa 19             	cmp    dl,0x19
c0013651:	77 41                	ja     c0013694 <File::close()+0x5a>
c0013653:	8b 1c 95 40 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd14c0]
c001365a:	85 db                	test   ebx,ebx
c001365c:	74 36                	je     c0013694 <File::close()+0x5a>
c001365e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013665:	74 2d                	je     c0013694 <File::close()+0x5a>
c0013667:	b8 05 00 00 00       	mov    eax,0x5
c001366c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013670:	74 22                	je     c0013694 <File::close()+0x5a>
c0013672:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013676:	8b 04 95 40 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd14c0]
c001367d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013683:	53                   	push   ebx
c0013684:	53                   	push   ebx
c0013685:	8b 10                	mov    edx,DWORD PTR [eax]
c0013687:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001368d:	50                   	push   eax
c001368e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	83 c4 08             	add    esp,0x8
c0013697:	5b                   	pop    ebx
c0013698:	c3                   	ret    
c0013699:	90                   	nop

c001369a <File::seek(unsigned long long)>:
c001369a:	56                   	push   esi
c001369b:	53                   	push   ebx
c001369c:	b8 0b 00 00 00       	mov    eax,0xb
c00136a1:	51                   	push   ecx
c00136a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00136aa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00136b1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136b5:	80 fa 19             	cmp    dl,0x19
c00136b8:	77 31                	ja     c00136eb <File::seek(unsigned long long)+0x51>
c00136ba:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c00136c1:	85 d2                	test   edx,edx
c00136c3:	74 26                	je     c00136eb <File::seek(unsigned long long)+0x51>
c00136c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136cb:	85 d2                	test   edx,edx
c00136cd:	74 1c                	je     c00136eb <File::seek(unsigned long long)+0x51>
c00136cf:	b8 05 00 00 00       	mov    eax,0x5
c00136d4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136d8:	74 11                	je     c00136eb <File::seek(unsigned long long)+0x51>
c00136da:	8b 02                	mov    eax,DWORD PTR [edx]
c00136dc:	53                   	push   ebx
c00136dd:	51                   	push   ecx
c00136de:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136e4:	52                   	push   edx
c00136e5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136e8:	83 c4 10             	add    esp,0x10
c00136eb:	5a                   	pop    edx
c00136ec:	5b                   	pop    ebx
c00136ed:	5e                   	pop    esi
c00136ee:	c3                   	ret    
c00136ef:	90                   	nop

c00136f0 <File::tell(unsigned long long*)>:
c00136f0:	83 ec 0c             	sub    esp,0xc
c00136f3:	b8 0b 00 00 00       	mov    eax,0xb
c00136f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136fc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013703:	80 fa 19             	cmp    dl,0x19
c0013706:	77 34                	ja     c001373c <File::tell(unsigned long long*)+0x4c>
c0013708:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c001370f:	85 d2                	test   edx,edx
c0013711:	74 29                	je     c001373c <File::tell(unsigned long long*)+0x4c>
c0013713:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013719:	85 d2                	test   edx,edx
c001371b:	74 1f                	je     c001373c <File::tell(unsigned long long*)+0x4c>
c001371d:	b8 05 00 00 00       	mov    eax,0x5
c0013722:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013726:	74 14                	je     c001373c <File::tell(unsigned long long*)+0x4c>
c0013728:	50                   	push   eax
c0013729:	8b 02                	mov    eax,DWORD PTR [edx]
c001372b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001372f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013735:	52                   	push   edx
c0013736:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013739:	83 c4 10             	add    esp,0x10
c001373c:	83 c4 0c             	add    esp,0xc
c001373f:	c3                   	ret    

c0013740 <File::rewind()>:
c0013740:	83 ec 10             	sub    esp,0x10
c0013743:	6a 00                	push   0x0
c0013745:	6a 00                	push   0x0
c0013747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001374b:	e8 4a ff ff ff       	call   c001369a <File::seek(unsigned long long)>
c0013750:	83 c4 1c             	add    esp,0x1c
c0013753:	c3                   	ret    

c0013754 <File::unlink()>:
c0013754:	83 ec 0c             	sub    esp,0xc
c0013757:	b8 0b 00 00 00       	mov    eax,0xb
c001375c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013760:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013767:	80 f9 19             	cmp    cl,0x19
c001376a:	77 2f                	ja     c001379b <File::unlink()+0x47>
c001376c:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013773:	85 c9                	test   ecx,ecx
c0013775:	74 24                	je     c001379b <File::unlink()+0x47>
c0013777:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001377d:	85 c9                	test   ecx,ecx
c001377f:	74 1a                	je     c001379b <File::unlink()+0x47>
c0013781:	b8 06 00 00 00       	mov    eax,0x6
c0013786:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001378a:	75 0f                	jne    c001379b <File::unlink()+0x47>
c001378c:	83 c2 0d             	add    edx,0xd
c001378f:	50                   	push   eax
c0013790:	50                   	push   eax
c0013791:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013793:	52                   	push   edx
c0013794:	51                   	push   ecx
c0013795:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013798:	83 c4 10             	add    esp,0x10
c001379b:	83 c4 0c             	add    esp,0xc
c001379e:	c3                   	ret    
c001379f:	90                   	nop

c00137a0 <File::rename(char const*)>:
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	b8 0b 00 00 00       	mov    eax,0xb
c00137a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ac:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137b3:	80 f9 19             	cmp    cl,0x19
c00137b6:	77 32                	ja     c00137ea <File::rename(char const*)+0x4a>
c00137b8:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c00137bf:	85 c9                	test   ecx,ecx
c00137c1:	74 27                	je     c00137ea <File::rename(char const*)+0x4a>
c00137c3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137c9:	85 c9                	test   ecx,ecx
c00137cb:	74 1d                	je     c00137ea <File::rename(char const*)+0x4a>
c00137cd:	b8 06 00 00 00       	mov    eax,0x6
c00137d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137d6:	75 12                	jne    c00137ea <File::rename(char const*)+0x4a>
c00137d8:	83 c2 0d             	add    edx,0xd
c00137db:	50                   	push   eax
c00137dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137e2:	52                   	push   edx
c00137e3:	51                   	push   ecx
c00137e4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137e7:	83 c4 10             	add    esp,0x10
c00137ea:	83 c4 0c             	add    esp,0xc
c00137ed:	c3                   	ret    

c00137ee <File::chfatattr(unsigned char, unsigned char)>:
c00137ee:	57                   	push   edi
c00137ef:	b8 0b 00 00 00       	mov    eax,0xb
c00137f4:	56                   	push   esi
c00137f5:	53                   	push   ebx
c00137f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137fa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013805:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013809:	80 f9 19             	cmp    cl,0x19
c001380c:	77 37                	ja     c0013845 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001380e:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013815:	85 c9                	test   ecx,ecx
c0013817:	74 2c                	je     c0013845 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013819:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001381f:	85 c9                	test   ecx,ecx
c0013821:	74 22                	je     c0013845 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013823:	b8 06 00 00 00       	mov    eax,0x6
c0013828:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001382c:	75 17                	jne    c0013845 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001382e:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013830:	89 f0                	mov    eax,esi
c0013832:	83 c2 0d             	add    edx,0xd
c0013835:	0f b6 f0             	movzx  esi,al
c0013838:	0f b6 db             	movzx  ebx,bl
c001383b:	56                   	push   esi
c001383c:	53                   	push   ebx
c001383d:	52                   	push   edx
c001383e:	51                   	push   ecx
c001383f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	5b                   	pop    ebx
c0013846:	5e                   	pop    esi
c0013847:	5f                   	pop    edi
c0013848:	c3                   	ret    
c0013849:	90                   	nop

c001384a <File::exists()>:
c001384a:	83 ec 0c             	sub    esp,0xc
c001384d:	31 c0                	xor    eax,eax
c001384f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013853:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001385a:	80 f9 19             	cmp    cl,0x19
c001385d:	77 24                	ja     c0013883 <File::exists()+0x39>
c001385f:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013866:	85 c9                	test   ecx,ecx
c0013868:	74 19                	je     c0013883 <File::exists()+0x39>
c001386a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013870:	85 c9                	test   ecx,ecx
c0013872:	74 0f                	je     c0013883 <File::exists()+0x39>
c0013874:	83 c2 0d             	add    edx,0xd
c0013877:	50                   	push   eax
c0013878:	50                   	push   eax
c0013879:	8b 01                	mov    eax,DWORD PTR [ecx]
c001387b:	52                   	push   edx
c001387c:	51                   	push   ecx
c001387d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013880:	83 c4 10             	add    esp,0x10
c0013883:	83 c4 0c             	add    esp,0xc
c0013886:	c3                   	ret    
c0013887:	90                   	nop

c0013888 <File::stat(unsigned long long*, bool*)>:
c0013888:	56                   	push   esi
c0013889:	53                   	push   ebx
c001388a:	50                   	push   eax
c001388b:	b8 0b 00 00 00       	mov    eax,0xb
c0013890:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013894:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013898:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001389f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138a3:	80 f9 19             	cmp    cl,0x19
c00138a6:	77 3d                	ja     c00138e5 <File::stat(unsigned long long*, bool*)+0x5d>
c00138a8:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c00138af:	85 c9                	test   ecx,ecx
c00138b1:	74 32                	je     c00138e5 <File::stat(unsigned long long*, bool*)+0x5d>
c00138b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00138b9:	85 c9                	test   ecx,ecx
c00138bb:	74 28                	je     c00138e5 <File::stat(unsigned long long*, bool*)+0x5d>
c00138bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c00138bf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00138c3:	74 13                	je     c00138d8 <File::stat(unsigned long long*, bool*)+0x50>
c00138c5:	83 ec 04             	sub    esp,0x4
c00138c8:	56                   	push   esi
c00138c9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00138cf:	51                   	push   ecx
c00138d0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00138d3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138d6:	eb 0a                	jmp    c00138e2 <File::stat(unsigned long long*, bool*)+0x5a>
c00138d8:	53                   	push   ebx
c00138d9:	83 c2 0d             	add    edx,0xd
c00138dc:	56                   	push   esi
c00138dd:	52                   	push   edx
c00138de:	51                   	push   ecx
c00138df:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	5a                   	pop    edx
c00138e6:	5b                   	pop    ebx
c00138e7:	5e                   	pop    esi
c00138e8:	c3                   	ret    

c00138e9 <Fs::setcwd(Process*, char*)>:
c00138e9:	55                   	push   ebp
c00138ea:	57                   	push   edi
c00138eb:	56                   	push   esi
c00138ec:	53                   	push   ebx
c00138ed:	81 ec 20 02 00 00    	sub    esp,0x220
c00138f3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138fa:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013900:	57                   	push   edi
c0013901:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013908:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001390c:	56                   	push   esi
c001390d:	e8 bc fa ff ff       	call   c00133ce <Fs::standardiseFiles(char*, char const*, char const*)>
c0013912:	89 34 24             	mov    DWORD PTR [esp],esi
c0013915:	e8 7a ce fe ff       	call   c0000794 <strlen>
c001391a:	83 c4 10             	add    esp,0x10
c001391d:	83 f8 02             	cmp    eax,0x2
c0013920:	77 17                	ja     c0013939 <Fs::setcwd(Process*, char*)+0x50>
c0013922:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013927:	83 e8 41             	sub    eax,0x41
c001392a:	83 f8 19             	cmp    eax,0x19
c001392d:	76 24                	jbe    c0013953 <Fs::setcwd(Process*, char*)+0x6a>
c001392f:	b8 03 00 00 00       	mov    eax,0x3
c0013934:	e9 e0 00 00 00       	jmp    c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c0013939:	83 ec 0c             	sub    esp,0xc
c001393c:	56                   	push   esi
c001393d:	e8 52 ce fe ff       	call   c0000794 <strlen>
c0013942:	83 c4 10             	add    esp,0x10
c0013945:	83 f8 03             	cmp    eax,0x3
c0013948:	75 34                	jne    c001397e <Fs::setcwd(Process*, char*)+0x95>
c001394a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001394f:	75 2d                	jne    c001397e <Fs::setcwd(Process*, char*)+0x95>
c0013951:	eb cf                	jmp    c0013922 <Fs::setcwd(Process*, char*)+0x39>
c0013953:	8b 14 85 40 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd14c0]
c001395a:	b8 05 00 00 00       	mov    eax,0x5
c001395f:	85 d2                	test   edx,edx
c0013961:	0f 84 b2 00 00 00    	je     c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c0013967:	b8 06 00 00 00       	mov    eax,0x6
c001396c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013973:	0f 85 92 00 00 00    	jne    c0013a0b <Fs::setcwd(Process*, char*)+0x122>
c0013979:	e9 9b 00 00 00       	jmp    c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c001397e:	83 ec 0c             	sub    esp,0xc
c0013981:	68 14 01 00 00       	push   0x114
c0013986:	e8 b8 be ff ff       	call   c000f843 <malloc>
c001398b:	83 c4 0c             	add    esp,0xc
c001398e:	89 c3                	mov    ebx,eax
c0013990:	55                   	push   ebp
c0013991:	56                   	push   esi
c0013992:	50                   	push   eax
c0013993:	e8 e0 fb ff ff       	call   c0013578 <File::File(char const*, Process*)>
c0013998:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001399d:	83 c4 0c             	add    esp,0xc
c00139a0:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00139a4:	50                   	push   eax
c00139a5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00139a9:	50                   	push   eax
c00139aa:	53                   	push   ebx
c00139ab:	e8 d8 fe ff ff       	call   c0013888 <File::stat(unsigned long long*, bool*)>
c00139b0:	83 c4 10             	add    esp,0x10
c00139b3:	83 f8 02             	cmp    eax,0x2
c00139b6:	74 04                	je     c00139bc <Fs::setcwd(Process*, char*)+0xd3>
c00139b8:	85 c0                	test   eax,eax
c00139ba:	74 1c                	je     c00139d8 <Fs::setcwd(Process*, char*)+0xef>
c00139bc:	b8 01 00 00 00       	mov    eax,0x1
c00139c1:	85 db                	test   ebx,ebx
c00139c3:	74 54                	je     c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c00139c5:	83 ec 0c             	sub    esp,0xc
c00139c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139ca:	53                   	push   ebx
c00139cb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	b8 01 00 00 00       	mov    eax,0x1
c00139d6:	eb 41                	jmp    c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c00139d8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139dd:	75 1c                	jne    c00139fb <Fs::setcwd(Process*, char*)+0x112>
c00139df:	b8 02 00 00 00       	mov    eax,0x2
c00139e4:	85 db                	test   ebx,ebx
c00139e6:	74 31                	je     c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c00139e8:	83 ec 0c             	sub    esp,0xc
c00139eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139ed:	53                   	push   ebx
c00139ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139f1:	83 c4 10             	add    esp,0x10
c00139f4:	b8 02 00 00 00       	mov    eax,0x2
c00139f9:	eb 1e                	jmp    c0013a19 <Fs::setcwd(Process*, char*)+0x130>
c00139fb:	85 db                	test   ebx,ebx
c00139fd:	74 0c                	je     c0013a0b <Fs::setcwd(Process*, char*)+0x122>
c00139ff:	83 ec 0c             	sub    esp,0xc
c0013a02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a04:	53                   	push   ebx
c0013a05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a08:	83 c4 10             	add    esp,0x10
c0013a0b:	50                   	push   eax
c0013a0c:	50                   	push   eax
c0013a0d:	56                   	push   esi
c0013a0e:	57                   	push   edi
c0013a0f:	e8 20 ce fe ff       	call   c0000834 <strcpy>
c0013a14:	83 c4 10             	add    esp,0x10
c0013a17:	31 c0                	xor    eax,eax
c0013a19:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013a1f:	5b                   	pop    ebx
c0013a20:	5e                   	pop    esi
c0013a21:	5f                   	pop    edi
c0013a22:	5d                   	pop    ebp
c0013a23:	c3                   	ret    

c0013a24 <Directory::Directory(char const*, Process*)>:
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2b:	83 ec 08             	sub    esp,0x8
c0013a2e:	6a 00                	push   0x0
c0013a30:	50                   	push   eax
c0013a31:	e8 2c dd ff ff       	call   c0011762 <UnixFile::UnixFile(int)>
c0013a36:	83 c4 10             	add    esp,0x10
c0013a39:	ba 30 ac 02 c0       	mov    edx,0xc002ac30
c0013a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a42:	89 10                	mov    DWORD PTR [eax],edx
c0013a44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a48:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a52:	83 c0 0d             	add    eax,0xd
c0013a55:	83 ec 04             	sub    esp,0x4
c0013a58:	52                   	push   edx
c0013a59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a5d:	50                   	push   eax
c0013a5e:	e8 6b f9 ff ff       	call   c00133ce <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a63:	83 c4 10             	add    esp,0x10
c0013a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a6a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a6d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a74:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a7e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a82:	90                   	nop
c0013a83:	83 c4 0c             	add    esp,0xc
c0013a86:	c3                   	ret    
c0013a87:	90                   	nop

c0013a88 <Directory::open()>:
c0013a88:	53                   	push   ebx
c0013a89:	b8 0b 00 00 00       	mov    eax,0xb
c0013a8e:	83 ec 08             	sub    esp,0x8
c0013a91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a95:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a9c:	80 fa 19             	cmp    dl,0x19
c0013a9f:	77 3d                	ja     c0013ade <Directory::open()+0x56>
c0013aa1:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013aa8:	85 d2                	test   edx,edx
c0013aaa:	74 32                	je     c0013ade <Directory::open()+0x56>
c0013aac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013ab2:	85 d2                	test   edx,edx
c0013ab4:	74 28                	je     c0013ade <Directory::open()+0x56>
c0013ab6:	b8 06 00 00 00       	mov    eax,0x6
c0013abb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013abf:	75 1d                	jne    c0013ade <Directory::open()+0x56>
c0013ac1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013ac7:	50                   	push   eax
c0013ac8:	8b 02                	mov    eax,DWORD PTR [edx]
c0013aca:	51                   	push   ecx
c0013acb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013ace:	51                   	push   ecx
c0013acf:	52                   	push   edx
c0013ad0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013ad3:	83 c4 10             	add    esp,0x10
c0013ad6:	85 c0                	test   eax,eax
c0013ad8:	75 04                	jne    c0013ade <Directory::open()+0x56>
c0013ada:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013ade:	83 c4 08             	add    esp,0x8
c0013ae1:	5b                   	pop    ebx
c0013ae2:	c3                   	ret    
c0013ae3:	90                   	nop

c0013ae4 <Directory::close()>:
c0013ae4:	53                   	push   ebx
c0013ae5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aea:	83 ec 08             	sub    esp,0x8
c0013aed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013af1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013af8:	80 fa 19             	cmp    dl,0x19
c0013afb:	77 41                	ja     c0013b3e <Directory::close()+0x5a>
c0013afd:	8b 1c 95 40 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd14c0]
c0013b04:	85 db                	test   ebx,ebx
c0013b06:	74 36                	je     c0013b3e <Directory::close()+0x5a>
c0013b08:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013b0f:	74 2d                	je     c0013b3e <Directory::close()+0x5a>
c0013b11:	b8 05 00 00 00       	mov    eax,0x5
c0013b16:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013b1a:	74 22                	je     c0013b3e <Directory::close()+0x5a>
c0013b1c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013b20:	8b 04 95 40 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd14c0]
c0013b27:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013b2d:	53                   	push   ebx
c0013b2e:	53                   	push   ebx
c0013b2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b31:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b37:	50                   	push   eax
c0013b38:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	83 c4 08             	add    esp,0x8
c0013b41:	5b                   	pop    ebx
c0013b42:	c3                   	ret    
c0013b43:	90                   	nop

c0013b44 <Directory::unlink()>:
c0013b44:	83 ec 0c             	sub    esp,0xc
c0013b47:	b8 0b 00 00 00       	mov    eax,0xb
c0013b4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b57:	80 f9 19             	cmp    cl,0x19
c0013b5a:	77 2f                	ja     c0013b8b <Directory::unlink()+0x47>
c0013b5c:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013b63:	85 c9                	test   ecx,ecx
c0013b65:	74 24                	je     c0013b8b <Directory::unlink()+0x47>
c0013b67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b6d:	85 c9                	test   ecx,ecx
c0013b6f:	74 1a                	je     c0013b8b <Directory::unlink()+0x47>
c0013b71:	b8 06 00 00 00       	mov    eax,0x6
c0013b76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b7a:	75 0f                	jne    c0013b8b <Directory::unlink()+0x47>
c0013b7c:	83 c2 0d             	add    edx,0xd
c0013b7f:	50                   	push   eax
c0013b80:	50                   	push   eax
c0013b81:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b83:	52                   	push   edx
c0013b84:	51                   	push   ecx
c0013b85:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b88:	83 c4 10             	add    esp,0x10
c0013b8b:	83 c4 0c             	add    esp,0xc
c0013b8e:	c3                   	ret    
c0013b8f:	90                   	nop

c0013b90 <Directory::rename(char const*)>:
c0013b90:	83 ec 0c             	sub    esp,0xc
c0013b93:	b8 0b 00 00 00       	mov    eax,0xb
c0013b98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ba3:	80 f9 19             	cmp    cl,0x19
c0013ba6:	77 32                	ja     c0013bda <Directory::rename(char const*)+0x4a>
c0013ba8:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013baf:	85 c9                	test   ecx,ecx
c0013bb1:	74 27                	je     c0013bda <Directory::rename(char const*)+0x4a>
c0013bb3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bb9:	85 c9                	test   ecx,ecx
c0013bbb:	74 1d                	je     c0013bda <Directory::rename(char const*)+0x4a>
c0013bbd:	b8 06 00 00 00       	mov    eax,0x6
c0013bc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013bc6:	75 12                	jne    c0013bda <Directory::rename(char const*)+0x4a>
c0013bc8:	83 c2 0d             	add    edx,0xd
c0013bcb:	50                   	push   eax
c0013bcc:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bd2:	52                   	push   edx
c0013bd3:	51                   	push   ecx
c0013bd4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013bd7:	83 c4 10             	add    esp,0x10
c0013bda:	83 c4 0c             	add    esp,0xc
c0013bdd:	c3                   	ret    

c0013bde <Directory::exists()>:
c0013bde:	83 ec 0c             	sub    esp,0xc
c0013be1:	31 c0                	xor    eax,eax
c0013be3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013be7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bee:	80 f9 19             	cmp    cl,0x19
c0013bf1:	77 24                	ja     c0013c17 <Directory::exists()+0x39>
c0013bf3:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013bfa:	85 c9                	test   ecx,ecx
c0013bfc:	74 19                	je     c0013c17 <Directory::exists()+0x39>
c0013bfe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c04:	85 c9                	test   ecx,ecx
c0013c06:	74 0f                	je     c0013c17 <Directory::exists()+0x39>
c0013c08:	83 c2 0d             	add    edx,0xd
c0013c0b:	50                   	push   eax
c0013c0c:	50                   	push   eax
c0013c0d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c0f:	52                   	push   edx
c0013c10:	51                   	push   ecx
c0013c11:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	83 c4 0c             	add    esp,0xc
c0013c1a:	c3                   	ret    
c0013c1b:	90                   	nop

c0013c1c <Directory::read(dirent*)>:
c0013c1c:	83 ec 1c             	sub    esp,0x1c
c0013c1f:	b8 0b 00 00 00       	mov    eax,0xb
c0013c24:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013c28:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013c2f:	80 fa 19             	cmp    dl,0x19
c0013c32:	77 30                	ja     c0013c64 <Directory::read(dirent*)+0x48>
c0013c34:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013c3b:	85 d2                	test   edx,edx
c0013c3d:	74 25                	je     c0013c64 <Directory::read(dirent*)+0x48>
c0013c3f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c46:	74 1c                	je     c0013c64 <Directory::read(dirent*)+0x48>
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c4d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c51:	52                   	push   edx
c0013c52:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c56:	6a 00                	push   0x0
c0013c58:	68 10 01 00 00       	push   0x110
c0013c5d:	51                   	push   ecx
c0013c5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c61:	83 c4 20             	add    esp,0x20
c0013c64:	83 c4 1c             	add    esp,0x1c
c0013c67:	c3                   	ret    

c0013c68 <Directory::create()>:
c0013c68:	83 ec 0c             	sub    esp,0xc
c0013c6b:	b8 0b 00 00 00       	mov    eax,0xb
c0013c70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c74:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c7b:	80 f9 19             	cmp    cl,0x19
c0013c7e:	77 2f                	ja     c0013caf <Directory::create()+0x47>
c0013c80:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013c87:	85 c9                	test   ecx,ecx
c0013c89:	74 24                	je     c0013caf <Directory::create()+0x47>
c0013c8b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c91:	85 c9                	test   ecx,ecx
c0013c93:	74 1a                	je     c0013caf <Directory::create()+0x47>
c0013c95:	b8 06 00 00 00       	mov    eax,0x6
c0013c9a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c9e:	75 0f                	jne    c0013caf <Directory::create()+0x47>
c0013ca0:	83 c2 0d             	add    edx,0xd
c0013ca3:	50                   	push   eax
c0013ca4:	50                   	push   eax
c0013ca5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ca7:	52                   	push   edx
c0013ca8:	51                   	push   ecx
c0013ca9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013cac:	83 c4 10             	add    esp,0x10
c0013caf:	83 c4 0c             	add    esp,0xc
c0013cb2:	c3                   	ret    
c0013cb3:	90                   	nop

c0013cb4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013cb4:	b8 0a 00 00 00       	mov    eax,0xa
c0013cb9:	c3                   	ret    

c0013cba <Bus::Bus(char const*)>:
c0013cba:	83 ec 0c             	sub    esp,0xc
c0013cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc1:	83 ec 08             	sub    esp,0x8
c0013cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc8:	50                   	push   eax
c0013cc9:	e8 68 09 00 00       	call   c0014636 <Device::Device(char const*)>
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	ba 4c ac 02 c0       	mov    edx,0xc002ac4c
c0013cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cda:	89 10                	mov    DWORD PTR [eax],edx
c0013cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013cea:	90                   	nop
c0013ceb:	83 c4 0c             	add    esp,0xc
c0013cee:	c3                   	ret    
c0013cef:	90                   	nop

c0013cf0 <Bus::~Bus()>:
c0013cf0:	83 ec 0c             	sub    esp,0xc
c0013cf3:	ba 4c ac 02 c0       	mov    edx,0xc002ac4c
c0013cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cfc:	89 10                	mov    DWORD PTR [eax],edx
c0013cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	50                   	push   eax
c0013d06:	e8 0d 06 00 00       	call   c0014318 <Device::~Device()>
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	90                   	nop
c0013d0f:	83 c4 0c             	add    esp,0xc
c0013d12:	c3                   	ret    
c0013d13:	90                   	nop

c0013d14 <Bus::~Bus()>:
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	83 ec 0c             	sub    esp,0xc
c0013d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1e:	e8 cd ff ff ff       	call   c0013cf0 <Bus::~Bus()>
c0013d23:	83 c4 10             	add    esp,0x10
c0013d26:	83 ec 08             	sub    esp,0x8
c0013d29:	68 58 01 00 00       	push   0x158
c0013d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d32:	e8 08 f2 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0013d37:	83 c4 10             	add    esp,0x10
c0013d3a:	83 c4 0c             	add    esp,0xc
c0013d3d:	c3                   	ret    

c0013d3e <Buzzer::Buzzer(char const*)>:
c0013d3e:	83 ec 0c             	sub    esp,0xc
c0013d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d45:	83 ec 08             	sub    esp,0x8
c0013d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d4c:	50                   	push   eax
c0013d4d:	e8 e4 08 00 00       	call   c0014636 <Device::Device(char const*)>
c0013d52:	83 c4 10             	add    esp,0x10
c0013d55:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0013d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5e:	89 10                	mov    DWORD PTR [eax],edx
c0013d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d64:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d72:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d7c:	90                   	nop
c0013d7d:	83 c4 0c             	add    esp,0xc
c0013d80:	c3                   	ret    
c0013d81:	90                   	nop

c0013d82 <Buzzer::~Buzzer()>:
c0013d82:	83 ec 0c             	sub    esp,0xc
c0013d85:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0013d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d8e:	89 10                	mov    DWORD PTR [eax],edx
c0013d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d94:	83 ec 0c             	sub    esp,0xc
c0013d97:	50                   	push   eax
c0013d98:	e8 7b 05 00 00       	call   c0014318 <Device::~Device()>
c0013d9d:	83 c4 10             	add    esp,0x10
c0013da0:	90                   	nop
c0013da1:	83 c4 0c             	add    esp,0xc
c0013da4:	c3                   	ret    
c0013da5:	90                   	nop

c0013da6 <Buzzer::~Buzzer()>:
c0013da6:	83 ec 0c             	sub    esp,0xc
c0013da9:	83 ec 0c             	sub    esp,0xc
c0013dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013db0:	e8 cd ff ff ff       	call   c0013d82 <Buzzer::~Buzzer()>
c0013db5:	83 c4 10             	add    esp,0x10
c0013db8:	83 ec 08             	sub    esp,0x8
c0013dbb:	68 5c 01 00 00       	push   0x15c
c0013dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dc4:	e8 76 f1 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0013dc9:	83 c4 10             	add    esp,0x10
c0013dcc:	83 c4 0c             	add    esp,0xc
c0013dcf:	c3                   	ret    

c0013dd0 <Buzzer::stop()>:
c0013dd0:	83 ec 14             	sub    esp,0x14
c0013dd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dd9:	6a 00                	push   0x0
c0013ddb:	50                   	push   eax
c0013ddc:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ddf:	83 c4 1c             	add    esp,0x1c
c0013de2:	c3                   	ret    

c0013de3 <beepThread(void*)>:
c0013de3:	53                   	push   ebx
c0013de4:	83 ec 08             	sub    esp,0x8
c0013de7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013deb:	e8 d2 a0 00 00       	call   c001dec2 <unlockScheduler()>
c0013df0:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013df5:	52                   	push   edx
c0013df6:	52                   	push   edx
c0013df7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013dfd:	52                   	push   edx
c0013dfe:	50                   	push   eax
c0013dff:	e8 0c a6 00 00       	call   c001e410 <nanoSleep(unsigned long long)>
c0013e04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e07:	e8 c4 ff ff ff       	call   c0013dd0 <Buzzer::stop()>
c0013e0c:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013e14:	83 c4 18             	add    esp,0x18
c0013e17:	5b                   	pop    ebx
c0013e18:	e9 39 a5 00 00       	jmp    c001e356 <blockTask(TaskState)>
c0013e1d:	90                   	nop

c0013e1e <Buzzer::beep(int, int, bool)>:
c0013e1e:	57                   	push   edi
c0013e1f:	56                   	push   esi
c0013e20:	53                   	push   ebx
c0013e21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e25:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e2d:	52                   	push   edx
c0013e2e:	52                   	push   edx
c0013e2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e35:	56                   	push   esi
c0013e36:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e39:	83 c4 10             	add    esp,0x10
c0013e3c:	89 f8                	mov    eax,edi
c0013e3e:	84 c0                	test   al,al
c0013e40:	74 1f                	je     c0013e61 <Buzzer::beep(int, int, bool)+0x43>
c0013e42:	50                   	push   eax
c0013e43:	50                   	push   eax
c0013e44:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e4a:	99                   	cdq    
c0013e4b:	52                   	push   edx
c0013e4c:	50                   	push   eax
c0013e4d:	e8 be a5 00 00       	call   c001e410 <nanoSleep(unsigned long long)>
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e59:	5b                   	pop    ebx
c0013e5a:	5e                   	pop    esi
c0013e5b:	5f                   	pop    edi
c0013e5c:	e9 6f ff ff ff       	jmp    c0013dd0 <Buzzer::stop()>
c0013e61:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e67:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0013e6c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e74:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e78:	c7 44 24 14 e3 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013de3
c0013e80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e84:	5b                   	pop    ebx
c0013e85:	5e                   	pop    esi
c0013e86:	5f                   	pop    edi
c0013e87:	e9 66 a1 00 00       	jmp    c001dff2 <Process::createThread(void (*)(void*), void*, int)>

c0013e8c <User::loadClockSettings(int)>:
c0013e8c:	53                   	push   ebx
c0013e8d:	83 ec 14             	sub    esp,0x14
c0013e90:	68 14 01 00 00       	push   0x114
c0013e95:	e8 a9 b9 ff ff       	call   c000f843 <malloc>
c0013e9a:	83 c4 0c             	add    esp,0xc
c0013e9d:	89 c3                	mov    ebx,eax
c0013e9f:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c0013ea5:	68 a0 ac 02 c0       	push   0xc002aca0
c0013eaa:	50                   	push   eax
c0013eab:	e8 c8 f6 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c0013eb0:	58                   	pop    eax
c0013eb1:	5a                   	pop    edx
c0013eb2:	6a 01                	push   0x1
c0013eb4:	53                   	push   ebx
c0013eb5:	e8 22 f7 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c0013eba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ebd:	e8 78 f7 ff ff       	call   c001363a <File::close()>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	85 db                	test   ebx,ebx
c0013ec7:	74 0f                	je     c0013ed8 <User::loadClockSettings(int)+0x4c>
c0013ec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ecb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013ecf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ed2:	83 c4 08             	add    esp,0x8
c0013ed5:	5b                   	pop    ebx
c0013ed6:	ff e0                	jmp    eax
c0013ed8:	83 c4 08             	add    esp,0x8
c0013edb:	5b                   	pop    ebx
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Clock::Clock(char const*)>:
c0013ede:	83 ec 0c             	sub    esp,0xc
c0013ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee5:	83 ec 08             	sub    esp,0x8
c0013ee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eec:	50                   	push   eax
c0013eed:	e8 44 07 00 00       	call   c0014636 <Device::Device(char const*)>
c0013ef2:	83 c4 10             	add    esp,0x10
c0013ef5:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0013efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013efe:	89 10                	mov    DWORD PTR [eax],edx
c0013f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f04:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013f0e:	90                   	nop
c0013f0f:	83 c4 0c             	add    esp,0xc
c0013f12:	c3                   	ret    
c0013f13:	90                   	nop

c0013f14 <Clock::~Clock()>:
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0013f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f20:	89 10                	mov    DWORD PTR [eax],edx
c0013f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	50                   	push   eax
c0013f2a:	e8 e9 03 00 00       	call   c0014318 <Device::~Device()>
c0013f2f:	83 c4 10             	add    esp,0x10
c0013f32:	90                   	nop
c0013f33:	83 c4 0c             	add    esp,0xc
c0013f36:	c3                   	ret    
c0013f37:	90                   	nop

c0013f38 <Clock::~Clock()>:
c0013f38:	83 ec 0c             	sub    esp,0xc
c0013f3b:	83 ec 0c             	sub    esp,0xc
c0013f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f42:	e8 cd ff ff ff       	call   c0013f14 <Clock::~Clock()>
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	83 ec 08             	sub    esp,0x8
c0013f4d:	68 58 01 00 00       	push   0x158
c0013f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f56:	e8 e4 ef ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	83 c4 0c             	add    esp,0xc
c0013f61:	c3                   	ret    

c0013f62 <Clock::timeInSecondsLocal()>:
c0013f62:	53                   	push   ebx
c0013f63:	83 ec 14             	sub    esp,0x14
c0013f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f6c:	50                   	push   eax
c0013f6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f70:	0f b6 0d a0 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6a0
c0013f77:	03 0d a4 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6a4
c0013f7d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f83:	89 cb                	mov    ebx,ecx
c0013f85:	c1 fb 1f             	sar    ebx,0x1f
c0013f88:	01 c8                	add    eax,ecx
c0013f8a:	11 da                	adc    edx,ebx
c0013f8c:	83 c4 10             	add    esp,0x10
c0013f8f:	31 c9                	xor    ecx,ecx
c0013f91:	80 3d a1 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a1,0x0
c0013f98:	74 05                	je     c0013f9f <Clock::timeInSecondsLocal()+0x3d>
c0013f9a:	b9 08 07 00 00       	mov    ecx,0x708
c0013f9f:	31 db                	xor    ebx,ebx
c0013fa1:	01 c8                	add    eax,ecx
c0013fa3:	11 da                	adc    edx,ebx
c0013fa5:	83 c4 08             	add    esp,0x8
c0013fa8:	5b                   	pop    ebx
c0013fa9:	c3                   	ret    

c0013faa <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013faa:	57                   	push   edi
c0013fab:	56                   	push   esi
c0013fac:	53                   	push   ebx
c0013fad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013fb5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013fb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fbb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013fbe:	0f b6 05 a0 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e6a0
c0013fc5:	03 05 a4 e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6a4
c0013fcb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013fd1:	99                   	cdq    
c0013fd2:	29 c6                	sub    esi,eax
c0013fd4:	19 d7                	sbb    edi,edx
c0013fd6:	89 f0                	mov    eax,esi
c0013fd8:	89 fa                	mov    edx,edi
c0013fda:	31 f6                	xor    esi,esi
c0013fdc:	80 3d a1 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a1,0x0
c0013fe3:	74 05                	je     c0013fea <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013fe5:	be 08 07 00 00       	mov    esi,0x708
c0013fea:	31 ff                	xor    edi,edi
c0013fec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ff0:	29 f0                	sub    eax,esi
c0013ff2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ff6:	19 fa                	sbb    edx,edi
c0013ff8:	89 d8                	mov    eax,ebx
c0013ffa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ffe:	5b                   	pop    ebx
c0013fff:	5e                   	pop    esi
c0014000:	5f                   	pop    edi
c0014001:	ff e0                	jmp    eax

c0014003 <datetimeToSeconds(datetime_t)>:
c0014003:	55                   	push   ebp
c0014004:	57                   	push   edi
c0014005:	56                   	push   esi
c0014006:	53                   	push   ebx
c0014007:	83 ec 14             	sub    esp,0x14
c001400a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001400e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014012:	89 d3                	mov    ebx,edx
c0014014:	0f b6 c6             	movzx  eax,dh
c0014017:	c1 eb 10             	shr    ebx,0x10
c001401a:	48                   	dec    eax
c001401b:	66 81 eb 6c 07       	sub    bx,0x76c
c0014020:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0014024:	0f b6 f5             	movzx  esi,ch
c0014027:	89 cf                	mov    edi,ecx
c0014029:	6b f6 3c             	imul   esi,esi,0x3c
c001402c:	c1 ef 10             	shr    edi,0x10
c001402f:	0f b6 c9             	movzx  ecx,cl
c0014032:	89 f8                	mov    eax,edi
c0014034:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001403a:	0f b6 f8             	movzx  edi,al
c001403d:	0f b6 d2             	movzx  edx,dl
c0014040:	01 fe                	add    esi,edi
c0014042:	01 f1                	add    ecx,esi
c0014044:	0f b7 f3             	movzx  esi,bx
c0014047:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001404b:	c1 f9 1f             	sar    ecx,0x1f
c001404e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014053:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014057:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001405c:	8b 0c 8d 00 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5300]
c0014063:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014067:	76 29                	jbe    c0014092 <datetimeToSeconds(datetime_t)+0x8f>
c0014069:	f6 c3 03             	test   bl,0x3
c001406c:	75 24                	jne    c0014092 <datetimeToSeconds(datetime_t)+0x8f>
c001406e:	31 d2                	xor    edx,edx
c0014070:	bf 64 00 00 00       	mov    edi,0x64
c0014075:	89 d8                	mov    eax,ebx
c0014077:	66 f7 f7             	div    di
c001407a:	66 85 d2             	test   dx,dx
c001407d:	75 12                	jne    c0014091 <datetimeToSeconds(datetime_t)+0x8e>
c001407f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0014085:	bf 90 01 00 00       	mov    edi,0x190
c001408a:	99                   	cdq    
c001408b:	f7 ff                	idiv   edi
c001408d:	85 d2                	test   edx,edx
c001408f:	75 01                	jne    c0014092 <datetimeToSeconds(datetime_t)+0x8f>
c0014091:	41                   	inc    ecx
c0014092:	66 83 fb 46          	cmp    bx,0x46
c0014096:	76 45                	jbe    c00140dd <datetimeToSeconds(datetime_t)+0xda>
c0014098:	bb 46 00 00 00       	mov    ebx,0x46
c001409d:	bf 64 00 00 00       	mov    edi,0x64
c00140a2:	bd 90 01 00 00       	mov    ebp,0x190
c00140a7:	b8 6d 01 00 00       	mov    eax,0x16d
c00140ac:	f6 c3 03             	test   bl,0x3
c00140af:	75 23                	jne    c00140d4 <datetimeToSeconds(datetime_t)+0xd1>
c00140b1:	89 d8                	mov    eax,ebx
c00140b3:	99                   	cdq    
c00140b4:	f7 ff                	idiv   edi
c00140b6:	b8 6e 01 00 00       	mov    eax,0x16e
c00140bb:	85 d2                	test   edx,edx
c00140bd:	75 15                	jne    c00140d4 <datetimeToSeconds(datetime_t)+0xd1>
c00140bf:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00140c5:	99                   	cdq    
c00140c6:	f7 fd                	idiv   ebp
c00140c8:	83 fa 01             	cmp    edx,0x1
c00140cb:	19 c0                	sbb    eax,eax
c00140cd:	f7 d0                	not    eax
c00140cf:	05 6e 01 00 00       	add    eax,0x16e
c00140d4:	01 c1                	add    ecx,eax
c00140d6:	43                   	inc    ebx
c00140d7:	39 f3                	cmp    ebx,esi
c00140d9:	7c cc                	jl     c00140a7 <datetimeToSeconds(datetime_t)+0xa4>
c00140db:	eb 35                	jmp    c0014112 <datetimeToSeconds(datetime_t)+0x10f>
c00140dd:	74 33                	je     c0014112 <datetimeToSeconds(datetime_t)+0x10f>
c00140df:	b8 45 00 00 00       	mov    eax,0x45
c00140e4:	89 c2                	mov    edx,eax
c00140e6:	83 e2 03             	and    edx,0x3
c00140e9:	39 f0                	cmp    eax,esi
c00140eb:	7e 0f                	jle    c00140fc <datetimeToSeconds(datetime_t)+0xf9>
c00140ed:	83 fa 01             	cmp    edx,0x1
c00140f0:	19 d2                	sbb    edx,edx
c00140f2:	48                   	dec    eax
c00140f3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140fa:	eb e8                	jmp    c00140e4 <datetimeToSeconds(datetime_t)+0xe1>
c00140fc:	b8 6d 01 00 00       	mov    eax,0x16d
c0014101:	85 d2                	test   edx,edx
c0014103:	75 0b                	jne    c0014110 <datetimeToSeconds(datetime_t)+0x10d>
c0014105:	66 83 fb 01          	cmp    bx,0x1
c0014109:	19 c0                	sbb    eax,eax
c001410b:	05 6e 01 00 00       	add    eax,0x16e
c0014110:	29 c1                	sub    ecx,eax
c0014112:	b8 80 51 01 00       	mov    eax,0x15180
c0014117:	f7 e9                	imul   ecx
c0014119:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001411d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0014121:	83 c4 14             	add    esp,0x14
c0014124:	5b                   	pop    ebx
c0014125:	5e                   	pop    esi
c0014126:	5f                   	pop    edi
c0014127:	5d                   	pop    ebp
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001412a:	57                   	push   edi
c001412b:	56                   	push   esi
c001412c:	53                   	push   ebx
c001412d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014131:	8b 06                	mov    eax,DWORD PTR [esi]
c0014133:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014136:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001413a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001413e:	e8 c0 fe ff ff       	call   c0014003 <datetimeToSeconds(datetime_t)>
c0014143:	59                   	pop    ecx
c0014144:	0f b6 0d a0 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6a0
c001414b:	5b                   	pop    ebx
c001414c:	03 0d a4 e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6a4
c0014152:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014158:	89 cb                	mov    ebx,ecx
c001415a:	c1 fb 1f             	sar    ebx,0x1f
c001415d:	29 c8                	sub    eax,ecx
c001415f:	19 da                	sbb    edx,ebx
c0014161:	31 c9                	xor    ecx,ecx
c0014163:	80 3d a1 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6a1,0x0
c001416a:	74 05                	je     c0014171 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001416c:	b9 08 07 00 00       	mov    ecx,0x708
c0014171:	31 db                	xor    ebx,ebx
c0014173:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014177:	29 c8                	sub    eax,ecx
c0014179:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001417d:	19 da                	sbb    edx,ebx
c001417f:	89 f8                	mov    eax,edi
c0014181:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014185:	5b                   	pop    ebx
c0014186:	5e                   	pop    esi
c0014187:	5f                   	pop    edi
c0014188:	ff e0                	jmp    eax

c001418a <secondsToDatetime(unsigned long long)>:
c001418a:	55                   	push   ebp
c001418b:	57                   	push   edi
c001418c:	56                   	push   esi
c001418d:	53                   	push   ebx
c001418e:	83 ec 1c             	sub    esp,0x1c
c0014191:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014195:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014199:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001419d:	6a 00                	push   0x0
c001419f:	68 80 51 01 00       	push   0x15180
c00141a4:	55                   	push   ebp
c00141a5:	57                   	push   edi
c00141a6:	e8 f1 28 01 00       	call   c0026a9c <__udivdi3>
c00141ab:	83 c4 10             	add    esp,0x10
c00141ae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00141b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141b8:	6a 00                	push   0x0
c00141ba:	68 80 51 01 00       	push   0x15180
c00141bf:	55                   	push   ebp
c00141c0:	57                   	push   edi
c00141c1:	bf 10 0e 00 00       	mov    edi,0xe10
c00141c6:	e8 d1 29 01 00       	call   c0026b9c <__umoddi3>
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	99                   	cdq    
c00141cf:	f7 ff                	idiv   edi
c00141d1:	bf 3c 00 00 00       	mov    edi,0x3c
c00141d6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141d9:	89 d0                	mov    eax,edx
c00141db:	99                   	cdq    
c00141dc:	f7 ff                	idiv   edi
c00141de:	85 db                	test   ebx,ebx
c00141e0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141e3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141e6:	79 11                	jns    c00141f9 <secondsToDatetime(unsigned long long)+0x6f>
c00141e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00141ec:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141f2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141f7:	eb 07                	jmp    c0014200 <secondsToDatetime(unsigned long long)+0x76>
c00141f9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141fe:	89 d8                	mov    eax,ebx
c0014200:	bf b4 05 00 00       	mov    edi,0x5b4
c0014205:	99                   	cdq    
c0014206:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001420b:	f7 f9                	idiv   ecx
c001420d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014216:	31 d2                	xor    edx,edx
c0014218:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014220:	01 c3                	add    ebx,eax
c0014222:	89 d8                	mov    eax,ebx
c0014224:	f7 f1                	div    ecx
c0014226:	31 d2                	xor    edx,edx
c0014228:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001422b:	89 d8                	mov    eax,ebx
c001422d:	f7 f7                	div    edi
c001422f:	31 d2                	xor    edx,edx
c0014231:	29 c1                	sub    ecx,eax
c0014233:	89 d8                	mov    eax,ebx
c0014235:	f7 f5                	div    ebp
c0014237:	bd 6d 01 00 00       	mov    ebp,0x16d
c001423c:	29 c1                	sub    ecx,eax
c001423e:	31 d2                	xor    edx,edx
c0014240:	89 c8                	mov    eax,ecx
c0014242:	f7 f5                	div    ebp
c0014244:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014249:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001424d:	31 d2                	xor    edx,edx
c001424f:	89 c8                	mov    eax,ecx
c0014251:	f7 f5                	div    ebp
c0014253:	31 d2                	xor    edx,edx
c0014255:	01 c3                	add    ebx,eax
c0014257:	89 c8                	mov    eax,ecx
c0014259:	f7 f7                	div    edi
c001425b:	bf 99 00 00 00       	mov    edi,0x99
c0014260:	29 c3                	sub    ebx,eax
c0014262:	31 d2                	xor    edx,edx
c0014264:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001426c:	29 c3                	sub    ebx,eax
c001426e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014271:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014274:	bb 05 00 00 00       	mov    ebx,0x5
c0014279:	83 c1 02             	add    ecx,0x2
c001427c:	89 c8                	mov    eax,ecx
c001427e:	f7 f7                	div    edi
c0014280:	31 d2                	xor    edx,edx
c0014282:	89 c7                	mov    edi,eax
c0014284:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001428a:	83 c0 02             	add    eax,0x2
c001428d:	f7 f3                	div    ebx
c001428f:	89 eb                	mov    ebx,ebp
c0014291:	29 c3                	sub    ebx,eax
c0014293:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014299:	88 1e                	mov    BYTE PTR [esi],bl
c001429b:	19 c0                	sbb    eax,eax
c001429d:	31 d2                	xor    edx,edx
c001429f:	83 e0 0c             	and    eax,0xc
c00142a2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00142a6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00142ae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00142b2:	83 f9 01             	cmp    ecx,0x1
c00142b5:	0f 96 c2             	setbe  dl
c00142b8:	41                   	inc    ecx
c00142b9:	01 d0                	add    eax,edx
c00142bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00142be:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00142c2:	83 c4 1c             	add    esp,0x1c
c00142c5:	89 f0                	mov    eax,esi
c00142c7:	5b                   	pop    ebx
c00142c8:	5e                   	pop    esi
c00142c9:	5f                   	pop    edi
c00142ca:	5d                   	pop    ebp
c00142cb:	c2 04 00             	ret    0x4

c00142ce <Clock::timeInDatetimeLocal()>:
c00142ce:	53                   	push   ebx
c00142cf:	83 ec 14             	sub    esp,0x14
c00142d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142da:	e8 83 fc ff ff       	call   c0013f62 <Clock::timeInSecondsLocal()>
c00142df:	83 c4 0c             	add    esp,0xc
c00142e2:	52                   	push   edx
c00142e3:	50                   	push   eax
c00142e4:	53                   	push   ebx
c00142e5:	e8 a0 fe ff ff       	call   c001418a <secondsToDatetime(unsigned long long)>
c00142ea:	89 d8                	mov    eax,ebx
c00142ec:	83 c4 14             	add    esp,0x14
c00142ef:	5b                   	pop    ebx
c00142f0:	c2 04 00             	ret    0x4
c00142f3:	90                   	nop

c00142f4 <Device::hibernate()>:
c00142f4:	c3                   	ret    
c00142f5:	90                   	nop

c00142f6 <Device::wake()>:
c00142f6:	c3                   	ret    
c00142f7:	90                   	nop

c00142f8 <Device::detect()>:
c00142f8:	c3                   	ret    
c00142f9:	90                   	nop

c00142fa <Device::disableLegacy()>:
c00142fa:	c3                   	ret    
c00142fb:	90                   	nop

c00142fc <Device::powerSaving(PowerSavingLevel)>:
c00142fc:	c3                   	ret    
c00142fd:	90                   	nop

c00142fe <DriverlessDevice::close(int, int, void*)>:
c00142fe:	31 c0                	xor    eax,eax
c0014300:	c3                   	ret    
c0014301:	90                   	nop

c0014302 <DriverlessDevice::detect()>:
c0014302:	c3                   	ret    
c0014303:	90                   	nop

c0014304 <DriverlessDevice::open(int, int, void*)>:
c0014304:	83 ec 18             	sub    esp,0x18
c0014307:	68 30 ad 02 c0       	push   0xc002ad30
c001430c:	e8 bc 63 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0014311:	83 c8 ff             	or     eax,0xffffffff
c0014314:	83 c4 1c             	add    esp,0x1c
c0014317:	c3                   	ret    

c0014318 <Device::~Device()>:
c0014318:	ba 58 ad 02 c0       	mov    edx,0xc002ad58
c001431d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014321:	89 10                	mov    DWORD PTR [eax],edx
c0014323:	90                   	nop
c0014324:	c3                   	ret    
c0014325:	90                   	nop

c0014326 <Device::~Device()>:
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001432d:	e8 e6 ff ff ff       	call   c0014318 <Device::~Device()>
c0014332:	83 c4 04             	add    esp,0x4
c0014335:	83 ec 08             	sub    esp,0x8
c0014338:	68 58 01 00 00       	push   0x158
c001433d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014341:	e8 f9 eb ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0014346:	83 c4 10             	add    esp,0x10
c0014349:	83 c4 0c             	add    esp,0xc
c001434c:	c3                   	ret    
c001434d:	90                   	nop

c001434e <Device::findAndLoadDriver()>:
c001434e:	c3                   	ret    
c001434f:	90                   	nop

c0014350 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014350:	57                   	push   edi
c0014351:	b9 09 00 00 00       	mov    ecx,0x9
c0014356:	56                   	push   esi
c0014357:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001435b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001435f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014369:	81 c7 18 01 00 00    	add    edi,0x118
c001436f:	fc                   	cld    
c0014370:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014372:	5e                   	pop    esi
c0014373:	5f                   	pop    edi
c0014374:	c3                   	ret    
c0014375:	90                   	nop

c0014376 <Device::preOpenACPI(void*, char*, char*)>:
c0014376:	56                   	push   esi
c0014377:	53                   	push   ebx
c0014378:	83 ec 08             	sub    esp,0x8
c001437b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001437f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014383:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001438d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014391:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014397:	6a 1e                	push   0x1e
c0014399:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001439f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00143a3:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00143a9:	50                   	push   eax
c00143aa:	e8 95 c3 fe ff       	call   c0000744 <memcpy>
c00143af:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00143b3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00143b7:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00143bf:	83 c4 14             	add    esp,0x14
c00143c2:	5b                   	pop    ebx
c00143c3:	5e                   	pop    esi
c00143c4:	e9 7b c3 fe ff       	jmp    c0000744 <memcpy>
c00143c9:	90                   	nop

c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143ce:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143d3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143da:	75 0b                	jne    c00143e7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00143de:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143e2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143e5:	eb 1e                	jmp    c0014405 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143e7:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00143ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143f2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143f8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014402:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014405:	ff e0                	jmp    eax
c0014407:	90                   	nop

c0014408 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001440c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014411:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014418:	75 0b                	jne    c0014425 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001441a:	8b 00                	mov    eax,DWORD PTR [eax]
c001441c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014420:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014423:	eb 1e                	jmp    c0014443 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014425:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001442a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014430:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014436:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014438:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001443c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014440:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014443:	ff e0                	jmp    eax
c0014445:	90                   	nop

c0014446 <Device::addChild(Device*)>:
c0014446:	53                   	push   ebx
c0014447:	83 ec 08             	sub    esp,0x8
c001444a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001444e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014452:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014458:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001445e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014460:	85 d2                	test   edx,edx
c0014462:	74 04                	je     c0014468 <Device::addChild(Device*)+0x22>
c0014464:	89 d3                	mov    ebx,edx
c0014466:	eb f6                	jmp    c001445e <Device::addChild(Device*)+0x18>
c0014468:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001446b:	83 ec 0c             	sub    esp,0xc
c001446e:	6a 08                	push   0x8
c0014470:	e8 ce b3 ff ff       	call   c000f843 <malloc>
c0014475:	89 03                	mov    DWORD PTR [ebx],eax
c0014477:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001447d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014484:	83 c4 18             	add    esp,0x18
c0014487:	5b                   	pop    ebx
c0014488:	c3                   	ret    
c0014489:	90                   	nop

c001448a <Device::removeAllChildren()>:
c001448a:	56                   	push   esi
c001448b:	53                   	push   ebx
c001448c:	52                   	push   edx
c001448d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014491:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014497:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001449a:	74 17                	je     c00144b3 <Device::removeAllChildren()+0x29>
c001449c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001449f:	85 c0                	test   eax,eax
c00144a1:	74 0c                	je     c00144af <Device::removeAllChildren()+0x25>
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00144a8:	50                   	push   eax
c00144a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00144ac:	83 c4 10             	add    esp,0x10
c00144af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144b1:	eb e4                	jmp    c0014497 <Device::removeAllChildren()+0xd>
c00144b3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144bf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00144c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144cc:	58                   	pop    eax
c00144cd:	5b                   	pop    ebx
c00144ce:	5e                   	pop    esi
c00144cf:	c3                   	ret    

c00144d0 <Device::hibernateAll()>:
c00144d0:	53                   	push   ebx
c00144d1:	83 ec 14             	sub    esp,0x14
c00144d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144da:	53                   	push   ebx
c00144db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ea:	74 0f                	je     c00144fb <Device::hibernateAll()+0x2b>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f2:	e8 d9 ff ff ff       	call   c00144d0 <Device::hibernateAll()>
c00144f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f9:	eb e9                	jmp    c00144e4 <Device::hibernateAll()+0x14>
c00144fb:	83 c4 08             	add    esp,0x8
c00144fe:	5b                   	pop    ebx
c00144ff:	c3                   	ret    

c0014500 <Device::wakeAll()>:
c0014500:	53                   	push   ebx
c0014501:	83 ec 14             	sub    esp,0x14
c0014504:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014508:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450a:	53                   	push   ebx
c001450b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001450e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001451a:	74 0f                	je     c001452b <Device::wakeAll()+0x2b>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014522:	e8 d9 ff ff ff       	call   c0014500 <Device::wakeAll()>
c0014527:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014529:	eb e9                	jmp    c0014514 <Device::wakeAll()+0x14>
c001452b:	83 c4 08             	add    esp,0x8
c001452e:	5b                   	pop    ebx
c001452f:	c3                   	ret    

c0014530 <Device::detectAll()>:
c0014530:	53                   	push   ebx
c0014531:	83 ec 14             	sub    esp,0x14
c0014534:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014538:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453a:	53                   	push   ebx
c001453b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001453e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014544:	83 c4 10             	add    esp,0x10
c0014547:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001454a:	74 0f                	je     c001455b <Device::detectAll()+0x2b>
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014552:	e8 d9 ff ff ff       	call   c0014530 <Device::detectAll()>
c0014557:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014559:	eb e9                	jmp    c0014544 <Device::detectAll()+0x14>
c001455b:	83 c4 08             	add    esp,0x8
c001455e:	5b                   	pop    ebx
c001455f:	c3                   	ret    

c0014560 <Device::disableLegacyAll()>:
c0014560:	53                   	push   ebx
c0014561:	83 ec 14             	sub    esp,0x14
c0014564:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014568:	8b 03                	mov    eax,DWORD PTR [ebx]
c001456a:	53                   	push   ebx
c001456b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001456e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014574:	83 c4 10             	add    esp,0x10
c0014577:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001457a:	74 0f                	je     c001458b <Device::disableLegacyAll()+0x2b>
c001457c:	83 ec 0c             	sub    esp,0xc
c001457f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014582:	e8 d9 ff ff ff       	call   c0014560 <Device::disableLegacyAll()>
c0014587:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014589:	eb e9                	jmp    c0014574 <Device::disableLegacyAll()+0x14>
c001458b:	83 c4 08             	add    esp,0x8
c001458e:	5b                   	pop    ebx
c001458f:	c3                   	ret    

c0014590 <Device::loadDriversForAll()>:
c0014590:	53                   	push   ebx
c0014591:	83 ec 08             	sub    esp,0x8
c0014594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014598:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001459e:	8b 18                	mov    ebx,DWORD PTR [eax]
c00145a0:	85 db                	test   ebx,ebx
c00145a2:	74 12                	je     c00145b6 <Device::loadDriversForAll()+0x26>
c00145a4:	83 ec 0c             	sub    esp,0xc
c00145a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00145aa:	e8 e1 ff ff ff       	call   c0014590 <Device::loadDriversForAll()>
c00145af:	83 c4 10             	add    esp,0x10
c00145b2:	89 d8                	mov    eax,ebx
c00145b4:	eb e8                	jmp    c001459e <Device::loadDriversForAll()+0xe>
c00145b6:	83 c4 08             	add    esp,0x8
c00145b9:	5b                   	pop    ebx
c00145ba:	c3                   	ret    
c00145bb:	90                   	nop

c00145bc <Device::closeAll()>:
c00145bc:	53                   	push   ebx
c00145bd:	83 ec 08             	sub    esp,0x8
c00145c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c6:	6a 00                	push   0x0
c00145c8:	6a 00                	push   0x0
c00145ca:	6a 00                	push   0x0
c00145cc:	53                   	push   ebx
c00145cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145d0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145d6:	83 c4 10             	add    esp,0x10
c00145d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145dc:	74 0f                	je     c00145ed <Device::closeAll()+0x31>
c00145de:	83 ec 0c             	sub    esp,0xc
c00145e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145e4:	e8 d3 ff ff ff       	call   c00145bc <Device::closeAll()>
c00145e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145eb:	eb e9                	jmp    c00145d6 <Device::closeAll()+0x1a>
c00145ed:	83 c4 08             	add    esp,0x8
c00145f0:	5b                   	pop    ebx
c00145f1:	c3                   	ret    

c00145f2 <Device::powerSavingAll(PowerSavingLevel)>:
c00145f2:	56                   	push   esi
c00145f3:	53                   	push   ebx
c00145f4:	83 ec 0c             	sub    esp,0xc
c00145f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145fb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014601:	56                   	push   esi
c0014602:	53                   	push   ebx
c0014603:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014606:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001460c:	83 c4 10             	add    esp,0x10
c001460f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014612:	74 0f                	je     c0014623 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014614:	52                   	push   edx
c0014615:	52                   	push   edx
c0014616:	56                   	push   esi
c0014617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001461a:	e8 d3 ff ff ff       	call   c00145f2 <Device::powerSavingAll(PowerSavingLevel)>
c001461f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014621:	eb e9                	jmp    c001460c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014623:	58                   	pop    eax
c0014624:	5b                   	pop    ebx
c0014625:	5e                   	pop    esi
c0014626:	c3                   	ret    
c0014627:	90                   	nop

c0014628 <Device::setName(char const*)>:
c0014628:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014630:	e9 ff c1 fe ff       	jmp    c0000834 <strcpy>
c0014635:	90                   	nop

c0014636 <Device::Device(char const*)>:
c0014636:	83 ec 1c             	sub    esp,0x1c
c0014639:	ba 58 ad 02 c0       	mov    edx,0xc002ad58
c001463e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014642:	89 10                	mov    DWORD PTR [eax],edx
c0014644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014648:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014656:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014664:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001466e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014672:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001467c:	83 ec 08             	sub    esp,0x8
c001467f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014683:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014687:	e8 9c ff ff ff       	call   c0014628 <Device::setName(char const*)>
c001468c:	83 c4 10             	add    esp,0x10
c001468f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014697:	83 ec 0c             	sub    esp,0xc
c001469a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001469e:	e8 a0 b1 ff ff       	call   c000f843 <malloc>
c00146a3:	83 c4 10             	add    esp,0x10
c00146a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146b7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00146bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00146cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ed:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014706:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014714:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001471e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014722:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001472c:	90                   	nop
c001472d:	83 c4 1c             	add    esp,0x1c
c0014730:	c3                   	ret    
c0014731:	90                   	nop

c0014732 <Device::getName()>:
c0014732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014736:	05 d0 00 00 00       	add    eax,0xd0
c001473b:	c3                   	ret    

c001473c <DriverlessDevice::DriverlessDevice(char const*)>:
c001473c:	83 ec 0c             	sub    esp,0xc
c001473f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014743:	83 ec 08             	sub    esp,0x8
c0014746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001474a:	50                   	push   eax
c001474b:	e8 e6 fe ff ff       	call   c0014636 <Device::Device(char const*)>
c0014750:	83 c4 10             	add    esp,0x10
c0014753:	ba 84 ad 02 c0       	mov    edx,0xc002ad84
c0014758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475c:	89 10                	mov    DWORD PTR [eax],edx
c001475e:	90                   	nop
c001475f:	83 c4 0c             	add    esp,0xc
c0014762:	c3                   	ret    
c0014763:	90                   	nop

c0014764 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014764:	57                   	push   edi
c0014765:	56                   	push   esi
c0014766:	53                   	push   ebx
c0014767:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001476b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001476f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014773:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014779:	75 0c                	jne    c0014787 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001477b:	52                   	push   edx
c001477c:	52                   	push   edx
c001477d:	53                   	push   ebx
c001477e:	56                   	push   esi
c001477f:	e8 56 42 01 00       	call   c00289da <LinkedList<Device>::addElement(Device*)>
c0014784:	83 c4 10             	add    esp,0x10
c0014787:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001478d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014790:	74 12                	je     c00147a4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014792:	50                   	push   eax
c0014793:	57                   	push   edi
c0014794:	56                   	push   esi
c0014795:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014798:	e8 c7 ff ff ff       	call   c0014764 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001479d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001479f:	83 c4 10             	add    esp,0x10
c00147a2:	eb e9                	jmp    c001478d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00147a4:	5b                   	pop    ebx
c00147a5:	5e                   	pop    esi
c00147a6:	5f                   	pop    edi
c00147a7:	c3                   	ret    

c00147a8 <getDevicesOfType(DeviceType)>:
c00147a8:	53                   	push   ebx
c00147a9:	83 ec 14             	sub    esp,0x14
c00147ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147b0:	53                   	push   ebx
c00147b1:	e8 00 43 01 00       	call   c0028ab6 <LinkedList<Device>::LinkedList()>
c00147b6:	83 c4 0c             	add    esp,0xc
c00147b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147bd:	53                   	push   ebx
c00147be:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c00147c4:	e8 9b ff ff ff       	call   c0014764 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00147c9:	89 d8                	mov    eax,ebx
c00147cb:	83 c4 18             	add    esp,0x18
c00147ce:	5b                   	pop    ebx
c00147cf:	c2 04 00             	ret    0x4

c00147d2 <HardDiskController::HardDiskController(char const*)>:
c00147d2:	83 ec 0c             	sub    esp,0xc
c00147d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d9:	83 ec 08             	sub    esp,0x8
c00147dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e0:	50                   	push   eax
c00147e1:	e8 50 fe ff ff       	call   c0014636 <Device::Device(char const*)>
c00147e6:	83 c4 10             	add    esp,0x10
c00147e9:	ba b0 ad 02 c0       	mov    edx,0xc002adb0
c00147ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f2:	89 10                	mov    DWORD PTR [eax],edx
c00147f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147f8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014802:	90                   	nop
c0014803:	83 c4 0c             	add    esp,0xc
c0014806:	c3                   	ret    
c0014807:	90                   	nop

c0014808 <HardDiskController::~HardDiskController()>:
c0014808:	83 ec 0c             	sub    esp,0xc
c001480b:	ba b0 ad 02 c0       	mov    edx,0xc002adb0
c0014810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014814:	89 10                	mov    DWORD PTR [eax],edx
c0014816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001481a:	83 ec 0c             	sub    esp,0xc
c001481d:	50                   	push   eax
c001481e:	e8 f5 fa ff ff       	call   c0014318 <Device::~Device()>
c0014823:	83 c4 10             	add    esp,0x10
c0014826:	90                   	nop
c0014827:	83 c4 0c             	add    esp,0xc
c001482a:	c3                   	ret    
c001482b:	90                   	nop

c001482c <HardDiskController::~HardDiskController()>:
c001482c:	83 ec 0c             	sub    esp,0xc
c001482f:	83 ec 0c             	sub    esp,0xc
c0014832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014836:	e8 cd ff ff ff       	call   c0014808 <HardDiskController::~HardDiskController()>
c001483b:	83 c4 10             	add    esp,0x10
c001483e:	83 ec 08             	sub    esp,0x8
c0014841:	68 58 01 00 00       	push   0x158
c0014846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001484a:	e8 f0 e6 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	83 c4 0c             	add    esp,0xc
c0014855:	c3                   	ret    

c0014856 <PhysicalDisk::eject()>:
c0014856:	83 ec 18             	sub    esp,0x18
c0014859:	68 d4 ad 02 c0       	push   0xc002add4
c001485e:	e8 bc e7 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014863:	83 c8 ff             	or     eax,0xffffffff
c0014866:	83 c4 1c             	add    esp,0x1c
c0014869:	c3                   	ret    

c001486a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001486a:	83 ec 0c             	sub    esp,0xc
c001486d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014871:	83 ec 08             	sub    esp,0x8
c0014874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014878:	50                   	push   eax
c0014879:	e8 b8 fd ff ff       	call   c0014636 <Device::Device(char const*)>
c001487e:	83 c4 10             	add    esp,0x10
c0014881:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c0014886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001488a:	89 10                	mov    DWORD PTR [eax],edx
c001488c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014890:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001489b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00148a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148a6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00148b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00148b8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00148be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148cc:	90                   	nop
c00148cd:	83 c4 0c             	add    esp,0xc
c00148d0:	c3                   	ret    
c00148d1:	90                   	nop

c00148d2 <PhysicalDisk::startCache()>:
c00148d2:	56                   	push   esi
c00148d3:	53                   	push   ebx
c00148d4:	83 ec 10             	sub    esp,0x10
c00148d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148db:	6a 44                	push   0x44
c00148dd:	e8 61 af ff ff       	call   c000f843 <malloc>
c00148e2:	89 c6                	mov    esi,eax
c00148e4:	58                   	pop    eax
c00148e5:	5a                   	pop    edx
c00148e6:	53                   	push   ebx
c00148e7:	56                   	push   esi
c00148e8:	e8 35 27 00 00       	call   c0017022 <VCache::VCache(PhysicalDisk*)>
c00148ed:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148f3:	83 c4 14             	add    esp,0x14
c00148f6:	5b                   	pop    ebx
c00148f7:	5e                   	pop    esi
c00148f8:	c3                   	ret    
c00148f9:	90                   	nop

c00148fa <PhysicalDisk::~PhysicalDisk()>:
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	ba 04 ae 02 c0       	mov    edx,0xc002ae04
c0014902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014906:	89 10                	mov    DWORD PTR [eax],edx
c0014908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001490c:	83 ec 0c             	sub    esp,0xc
c001490f:	50                   	push   eax
c0014910:	e8 03 fa ff ff       	call   c0014318 <Device::~Device()>
c0014915:	83 c4 10             	add    esp,0x10
c0014918:	90                   	nop
c0014919:	83 c4 0c             	add    esp,0xc
c001491c:	c3                   	ret    
c001491d:	90                   	nop

c001491e <PhysicalDisk::~PhysicalDisk()>:
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	83 ec 0c             	sub    esp,0xc
c0014924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014928:	e8 cd ff ff ff       	call   c00148fa <PhysicalDisk::~PhysicalDisk()>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	83 ec 08             	sub    esp,0x8
c0014933:	68 6c 01 00 00       	push   0x16c
c0014938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001493c:	e8 fe e5 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0014941:	83 c4 10             	add    esp,0x10
c0014944:	83 c4 0c             	add    esp,0xc
c0014947:	c3                   	ret    

c0014948 <FPU::FPU(char const*)>:
c0014948:	83 ec 0c             	sub    esp,0xc
c001494b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001494f:	83 ec 08             	sub    esp,0x8
c0014952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014956:	50                   	push   eax
c0014957:	e8 da fc ff ff       	call   c0014636 <Device::Device(char const*)>
c001495c:	83 c4 10             	add    esp,0x10
c001495f:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c0014964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014968:	89 10                	mov    DWORD PTR [eax],edx
c001496a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001496e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014978:	90                   	nop
c0014979:	83 c4 0c             	add    esp,0xc
c001497c:	c3                   	ret    
c001497d:	90                   	nop

c001497e <FPU::~FPU()>:
c001497e:	83 ec 0c             	sub    esp,0xc
c0014981:	ba 48 ae 02 c0       	mov    edx,0xc002ae48
c0014986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001498a:	89 10                	mov    DWORD PTR [eax],edx
c001498c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014990:	83 ec 0c             	sub    esp,0xc
c0014993:	50                   	push   eax
c0014994:	e8 7f f9 ff ff       	call   c0014318 <Device::~Device()>
c0014999:	83 c4 10             	add    esp,0x10
c001499c:	90                   	nop
c001499d:	83 c4 0c             	add    esp,0xc
c00149a0:	c3                   	ret    
c00149a1:	90                   	nop

c00149a2 <FPU::~FPU()>:
c00149a2:	83 ec 0c             	sub    esp,0xc
c00149a5:	83 ec 0c             	sub    esp,0xc
c00149a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149ac:	e8 cd ff ff ff       	call   c001497e <FPU::~FPU()>
c00149b1:	83 c4 10             	add    esp,0x10
c00149b4:	83 ec 08             	sub    esp,0x8
c00149b7:	68 58 01 00 00       	push   0x158
c00149bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c0:	e8 7a e5 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00149c5:	83 c4 10             	add    esp,0x10
c00149c8:	83 c4 0c             	add    esp,0xc
c00149cb:	c3                   	ret    

c00149cc <setupFPU()>:
c00149cc:	53                   	push   ebx
c00149cd:	83 ec 08             	sub    esp,0x8
c00149d0:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c00149d6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149dd:	74 19                	je     c00149f8 <setupFPU()+0x2c>
c00149df:	83 ec 0c             	sub    esp,0xc
c00149e2:	68 58 01 00 00       	push   0x158
c00149e7:	e8 57 ae ff ff       	call   c000f843 <malloc>
c00149ec:	89 c3                	mov    ebx,eax
c00149ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00149f1:	e8 30 0c 01 00       	call   c0025626 <AVX::AVX()>
c00149f6:	eb 5b                	jmp    c0014a53 <setupFPU()+0x87>
c00149f8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149fe:	84 c0                	test   al,al
c0014a00:	79 19                	jns    c0014a1b <setupFPU()+0x4f>
c0014a02:	83 ec 0c             	sub    esp,0xc
c0014a05:	68 58 01 00 00       	push   0x158
c0014a0a:	e8 34 ae ff ff       	call   c000f843 <malloc>
c0014a0f:	89 c3                	mov    ebx,eax
c0014a11:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a14:	e8 33 0d 01 00       	call   c002574c <SSE::SSE()>
c0014a19:	eb 38                	jmp    c0014a53 <setupFPU()+0x87>
c0014a1b:	a8 20                	test   al,0x20
c0014a1d:	74 19                	je     c0014a38 <setupFPU()+0x6c>
c0014a1f:	83 ec 0c             	sub    esp,0xc
c0014a22:	68 58 01 00 00       	push   0x158
c0014a27:	e8 17 ae ff ff       	call   c000f843 <malloc>
c0014a2c:	89 c3                	mov    ebx,eax
c0014a2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a31:	e8 80 0c 01 00       	call   c00256b6 <MMX::MMX()>
c0014a36:	eb 1b                	jmp    c0014a53 <setupFPU()+0x87>
c0014a38:	a8 10                	test   al,0x10
c0014a3a:	74 1c                	je     c0014a58 <setupFPU()+0x8c>
c0014a3c:	83 ec 0c             	sub    esp,0xc
c0014a3f:	68 58 01 00 00       	push   0x158
c0014a44:	e8 fa ad ff ff       	call   c000f843 <malloc>
c0014a49:	89 c3                	mov    ebx,eax
c0014a4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a4e:	e8 87 0d 01 00       	call   c00257da <x87::x87()>
c0014a53:	83 c4 10             	add    esp,0x10
c0014a56:	eb 24                	jmp    c0014a7c <setupFPU()+0xb0>
c0014a58:	83 e0 ef             	and    eax,0xffffffef
c0014a5b:	83 ec 0c             	sub    esp,0xc
c0014a5e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a64:	68 34 ae 02 c0       	push   0xc002ae34
c0014a69:	e8 b1 e5 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014a6e:	0f 20 c0             	mov    eax,cr0
c0014a71:	83 c8 04             	or     eax,0x4
c0014a74:	0f 22 c0             	mov    cr0,eax
c0014a77:	31 db                	xor    ebx,ebx
c0014a79:	83 c4 10             	add    esp,0x10
c0014a7c:	89 d8                	mov    eax,ebx
c0014a7e:	83 c4 08             	add    esp,0x8
c0014a81:	5b                   	pop    ebx
c0014a82:	c3                   	ret    
c0014a83:	90                   	nop

c0014a84 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a8c:	c1 e0 04             	shl    eax,0x4
c0014a8f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a93:	8d 50 10             	lea    edx,[eax+0x10]
c0014a96:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a9c:	74 08                	je     c0014aa6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a9e:	83 c0 04             	add    eax,0x4
c0014aa1:	39 d0                	cmp    eax,edx
c0014aa3:	75 f1                	jne    c0014a96 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014aa5:	c3                   	ret    
c0014aa6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ab0:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014aba:	eb e2                	jmp    c0014a9e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014abc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014abc:	57                   	push   edi
c0014abd:	31 c0                	xor    eax,eax
c0014abf:	56                   	push   esi
c0014ac0:	53                   	push   ebx
c0014ac1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014ac5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ac9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014acd:	89 da                	mov    edx,ebx
c0014acf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014ad3:	c1 e2 04             	shl    edx,0x4
c0014ad6:	01 ca                	add    edx,ecx
c0014ad8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014ae0:	74 16                	je     c0014af8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014ae2:	40                   	inc    eax
c0014ae3:	83 f8 04             	cmp    eax,0x4
c0014ae6:	75 f0                	jne    c0014ad8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014ae8:	c7 44 24 10 78 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae78
c0014af0:	5b                   	pop    ebx
c0014af1:	5e                   	pop    esi
c0014af2:	5f                   	pop    edi
c0014af3:	e9 d5 5b 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>
c0014af8:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014afb:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014afe:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014b04:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014b0a:	5b                   	pop    ebx
c0014b0b:	5e                   	pop    esi
c0014b0c:	5f                   	pop    edi
c0014b0d:	c3                   	ret    

c0014b0e <doubleFault(regs*, void*)>:
c0014b0e:	55                   	push   ebp
c0014b0f:	89 e5                	mov    ebp,esp
c0014b11:	83 ec 08             	sub    esp,0x8
c0014b14:	83 ec 0c             	sub    esp,0xc
c0014b17:	68 b3 ae 02 c0       	push   0xc002aeb3
c0014b1c:	e8 ac 5b 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0014b21:	83 c4 10             	add    esp,0x10
c0014b24:	90                   	nop
c0014b25:	c9                   	leave  
c0014b26:	c3                   	ret    
c0014b27:	90                   	nop

c0014b28 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014b28:	56                   	push   esi
c0014b29:	53                   	push   ebx
c0014b2a:	50                   	push   eax
c0014b2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b2f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b33:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b38:	75 35                	jne    c0014b6f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b3a:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b3d:	31 d2                	xor    edx,edx
c0014b3f:	89 c1                	mov    ecx,eax
c0014b41:	c1 e1 04             	shl    ecx,0x4
c0014b44:	01 f1                	add    ecx,esi
c0014b46:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b4e:	74 3e                	je     c0014b8e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b50:	42                   	inc    edx
c0014b51:	83 fa 04             	cmp    edx,0x4
c0014b54:	75 f0                	jne    c0014b46 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b56:	83 ec 0c             	sub    esp,0xc
c0014b59:	68 f8 ae 02 c0       	push   0xc002aef8
c0014b5e:	e8 6a 5b 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b6b:	5a                   	pop    edx
c0014b6c:	5b                   	pop    ebx
c0014b6d:	5e                   	pop    esi
c0014b6e:	c3                   	ret    
c0014b6f:	83 ec 0c             	sub    esp,0xc
c0014b72:	56                   	push   esi
c0014b73:	e8 ba fb ff ff       	call   c0014732 <Device::getName()>
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b7e:	75 ba                	jne    c0014b3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b80:	83 fb 0f             	cmp    ebx,0xf
c0014b83:	7f 29                	jg     c0014bae <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b85:	0f b6 9b 60 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd28a0]
c0014b8c:	eb ac                	jmp    c0014b3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b8e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b91:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b95:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b98:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b9e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ba2:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014ba8:	89 d8                	mov    eax,ebx
c0014baa:	5a                   	pop    edx
c0014bab:	5b                   	pop    ebx
c0014bac:	5e                   	pop    esi
c0014bad:	c3                   	ret    
c0014bae:	83 ec 0c             	sub    esp,0xc
c0014bb1:	68 c0 ae 02 c0       	push   0xc002aec0
c0014bb6:	e8 12 5b 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	e9 77 ff ff ff       	jmp    c0014b3a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014bc3:	90                   	nop

c0014bc4 <InterruptController::clearAllHandlers(int, bool)>:
c0014bc4:	56                   	push   esi
c0014bc5:	53                   	push   ebx
c0014bc6:	52                   	push   edx
c0014bc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014bcb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bcf:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014bd4:	75 61                	jne    c0014c37 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014bd6:	8d 46 20             	lea    eax,[esi+0x20]
c0014bd9:	c1 e6 04             	shl    esi,0x4
c0014bdc:	c1 e0 04             	shl    eax,0x4
c0014bdf:	01 de                	add    esi,ebx
c0014be1:	01 d8                	add    eax,ebx
c0014be3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014bed:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014bf7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014c01:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014c0b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014c15:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014c1f:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014c29:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014c33:	58                   	pop    eax
c0014c34:	5b                   	pop    ebx
c0014c35:	5e                   	pop    esi
c0014c36:	c3                   	ret    
c0014c37:	83 ec 0c             	sub    esp,0xc
c0014c3a:	53                   	push   ebx
c0014c3b:	e8 f2 fa ff ff       	call   c0014732 <Device::getName()>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c46:	75 8e                	jne    c0014bd6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c48:	83 fe 0f             	cmp    esi,0xf
c0014c4b:	7f 09                	jg     c0014c56 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c4d:	0f b6 b6 60 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd28a0]
c0014c54:	eb 80                	jmp    c0014bd6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c56:	83 ec 0c             	sub    esp,0xc
c0014c59:	68 34 af 02 c0       	push   0xc002af34
c0014c5e:	e8 6a 5a 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0014c63:	83 c4 10             	add    esp,0x10
c0014c66:	e9 6b ff ff ff       	jmp    c0014bd6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c6b:	90                   	nop

c0014c6c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c6c:	56                   	push   esi
c0014c6d:	53                   	push   ebx
c0014c6e:	52                   	push   edx
c0014c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c77:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c7c:	75 3a                	jne    c0014cb8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c82:	8d 50 20             	lea    edx,[eax+0x20]
c0014c85:	c1 e2 04             	shl    edx,0x4
c0014c88:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c8b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c8f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c95:	74 0b                	je     c0014ca2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c97:	83 c0 04             	add    eax,0x4
c0014c9a:	39 d0                	cmp    eax,edx
c0014c9c:	75 f1                	jne    c0014c8f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c9e:	58                   	pop    eax
c0014c9f:	5b                   	pop    ebx
c0014ca0:	5e                   	pop    esi
c0014ca1:	c3                   	ret    
c0014ca2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014cac:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014cb6:	eb df                	jmp    c0014c97 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014cb8:	83 ec 0c             	sub    esp,0xc
c0014cbb:	56                   	push   esi
c0014cbc:	e8 71 fa ff ff       	call   c0014732 <Device::getName()>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014cc7:	75 b5                	jne    c0014c7e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cc9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014cce:	7f 11                	jg     c0014ce1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014cd4:	0f b6 80 60 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd28a0]
c0014cdb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cdf:	eb 9d                	jmp    c0014c7e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ce1:	83 ec 0c             	sub    esp,0xc
c0014ce4:	68 34 af 02 c0       	push   0xc002af34
c0014ce9:	e8 df 59 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0014cee:	83 c4 10             	add    esp,0x10
c0014cf1:	eb 8b                	jmp    c0014c7e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014cf3 <nmiHandler(regs*, void*)>:
c0014cf3:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0014cf8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cfc:	e9 8b a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014d01 <int_handler>:
c0014d01:	55                   	push   ebp
c0014d02:	57                   	push   edi
c0014d03:	56                   	push   esi
c0014d04:	53                   	push   ebx
c0014d05:	83 ec 0c             	sub    esp,0xc
c0014d08:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014d0c:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c0014d13:	74 0b                	je     c0014d20 <int_handler+0x1f>
c0014d15:	fa                   	cli    
c0014d16:	f4                   	hlt    
c0014d17:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c0014d1e:	75 f5                	jne    c0014d15 <int_handler+0x14>
c0014d20:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0014d25:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014d28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014d2e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014d34:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d37:	83 f8 17             	cmp    eax,0x17
c0014d3a:	77 13                	ja     c0014d4f <int_handler+0x4e>
c0014d3c:	83 ec 08             	sub    esp,0x8
c0014d3f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d41:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d44:	0f b6 c0             	movzx  eax,al
c0014d47:	50                   	push   eax
c0014d48:	57                   	push   edi
c0014d49:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d4c:	83 c4 10             	add    esp,0x10
c0014d4f:	83 c3 15             	add    ebx,0x15
c0014d52:	c1 e3 04             	shl    ebx,0x4
c0014d55:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d59:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d60:	31 db                	xor    ebx,ebx
c0014d62:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d66:	85 c0                	test   eax,eax
c0014d68:	74 13                	je     c0014d7d <int_handler+0x7c>
c0014d6a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d6d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d71:	74 1c                	je     c0014d8f <int_handler+0x8e>
c0014d73:	83 ec 08             	sub    esp,0x8
c0014d76:	52                   	push   edx
c0014d77:	56                   	push   esi
c0014d78:	ff d0                	call   eax
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	43                   	inc    ebx
c0014d7e:	83 fb 04             	cmp    ebx,0x4
c0014d81:	75 df                	jne    c0014d62 <int_handler+0x61>
c0014d83:	83 c4 0c             	add    esp,0xc
c0014d86:	31 c0                	xor    eax,eax
c0014d88:	5b                   	pop    ebx
c0014d89:	31 d2                	xor    edx,edx
c0014d8b:	5e                   	pop    esi
c0014d8c:	5f                   	pop    edi
c0014d8d:	5d                   	pop    ebp
c0014d8e:	c3                   	ret    
c0014d8f:	83 ec 08             	sub    esp,0x8
c0014d92:	52                   	push   edx
c0014d93:	56                   	push   esi
c0014d94:	ff d0                	call   eax
c0014d96:	83 c4 10             	add    esp,0x10
c0014d99:	83 c4 0c             	add    esp,0xc
c0014d9c:	5b                   	pop    ebx
c0014d9d:	5e                   	pop    esi
c0014d9e:	5f                   	pop    edi
c0014d9f:	5d                   	pop    ebp
c0014da0:	c3                   	ret    
c0014da1:	90                   	nop

c0014da2 <InterruptController::InterruptController(char const*)>:
c0014da2:	83 ec 1c             	sub    esp,0x1c
c0014da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da9:	83 ec 08             	sub    esp,0x8
c0014dac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014db0:	50                   	push   eax
c0014db1:	e8 80 f8 ff ff       	call   c0014636 <Device::Device(char const*)>
c0014db6:	83 c4 10             	add    esp,0x10
c0014db9:	ba ec b1 02 c0       	mov    edx,0xc002b1ec
c0014dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc2:	89 10                	mov    DWORD PTR [eax],edx
c0014dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014dd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014dda:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014de2:	7f 5e                	jg     c0014e42 <InterruptController::InterruptController(char const*)+0xa0>
c0014de4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014df1:	7f 49                	jg     c0014e3c <InterruptController::InterruptController(char const*)+0x9a>
c0014df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014df7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dfb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e06:	01 ca                	add    edx,ecx
c0014e08:	83 c2 54             	add    edx,0x54
c0014e0b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e1b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014e22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e26:	01 ca                	add    edx,ecx
c0014e28:	81 c2 54 04 00 00    	add    edx,0x454
c0014e2e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e36:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e3a:	eb b0                	jmp    c0014dec <InterruptController::InterruptController(char const*)+0x4a>
c0014e3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e40:	eb 98                	jmp    c0014dda <InterruptController::InterruptController(char const*)+0x38>
c0014e42:	90                   	nop
c0014e43:	83 c4 1c             	add    esp,0x1c
c0014e46:	c3                   	ret    
c0014e47:	90                   	nop

c0014e48 <InterruptController::~InterruptController()>:
c0014e48:	83 ec 0c             	sub    esp,0xc
c0014e4b:	ba ec b1 02 c0       	mov    edx,0xc002b1ec
c0014e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e54:	89 10                	mov    DWORD PTR [eax],edx
c0014e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e5a:	83 ec 0c             	sub    esp,0xc
c0014e5d:	50                   	push   eax
c0014e5e:	e8 b5 f4 ff ff       	call   c0014318 <Device::~Device()>
c0014e63:	83 c4 10             	add    esp,0x10
c0014e66:	90                   	nop
c0014e67:	83 c4 0c             	add    esp,0xc
c0014e6a:	c3                   	ret    
c0014e6b:	90                   	nop

c0014e6c <InterruptController::~InterruptController()>:
c0014e6c:	83 ec 0c             	sub    esp,0xc
c0014e6f:	83 ec 0c             	sub    esp,0xc
c0014e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e76:	e8 cd ff ff ff       	call   c0014e48 <InterruptController::~InterruptController()>
c0014e7b:	83 c4 10             	add    esp,0x10
c0014e7e:	83 ec 08             	sub    esp,0x8
c0014e81:	68 58 21 00 00       	push   0x2158
c0014e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e8a:	e8 b0 e0 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0014e8f:	83 c4 10             	add    esp,0x10
c0014e92:	83 c4 0c             	add    esp,0xc
c0014e95:	c3                   	ret    

c0014e96 <displayDebugInfo(regs*)>:
c0014e96:	55                   	push   ebp
c0014e97:	57                   	push   edi
c0014e98:	56                   	push   esi
c0014e99:	53                   	push   ebx
c0014e9a:	83 ec 24             	sub    esp,0x24
c0014e9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ea1:	0f 20 c2             	mov    edx,cr0
c0014ea4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014ea8:	0f 20 d7             	mov    edi,cr2
c0014eab:	0f 20 de             	mov    esi,cr3
c0014eae:	0f 20 e5             	mov    ebp,cr4
c0014eb1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014eb4:	68 6e af 02 c0       	push   0xc002af6e
c0014eb9:	e8 61 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014ebe:	59                   	pop    ecx
c0014ebf:	58                   	pop    eax
c0014ec0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ec3:	68 79 af 02 c0       	push   0xc002af79
c0014ec8:	e8 52 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014ecd:	58                   	pop    eax
c0014ece:	5a                   	pop    edx
c0014ecf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014ed2:	68 84 af 02 c0       	push   0xc002af84
c0014ed7:	e8 43 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014edc:	59                   	pop    ecx
c0014edd:	58                   	pop    eax
c0014ede:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ee1:	68 8f af 02 c0       	push   0xc002af8f
c0014ee6:	e8 34 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014eeb:	58                   	pop    eax
c0014eec:	5a                   	pop    edx
c0014eed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014ef0:	68 9a af 02 c0       	push   0xc002af9a
c0014ef5:	e8 25 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014efa:	59                   	pop    ecx
c0014efb:	58                   	pop    eax
c0014efc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014eff:	68 a5 af 02 c0       	push   0xc002afa5
c0014f04:	e8 16 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f09:	58                   	pop    eax
c0014f0a:	5a                   	pop    edx
c0014f0b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014f0e:	68 b0 af 02 c0       	push   0xc002afb0
c0014f13:	e8 07 e1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f18:	59                   	pop    ecx
c0014f19:	58                   	pop    eax
c0014f1a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014f1d:	68 bb af 02 c0       	push   0xc002afbb
c0014f22:	e8 f8 e0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f27:	58                   	pop    eax
c0014f28:	5a                   	pop    edx
c0014f29:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f2c:	68 c6 af 02 c0       	push   0xc002afc6
c0014f31:	e8 e9 e0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f36:	59                   	pop    ecx
c0014f37:	58                   	pop    eax
c0014f38:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f3b:	68 d5 af 02 c0       	push   0xc002afd5
c0014f40:	e8 da e0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f45:	58                   	pop    eax
c0014f46:	5a                   	pop    edx
c0014f47:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f4a:	68 e0 af 02 c0       	push   0xc002afe0
c0014f4f:	e8 cb e0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f54:	59                   	pop    ecx
c0014f55:	58                   	pop    eax
c0014f56:	57                   	push   edi
c0014f57:	68 eb af 02 c0       	push   0xc002afeb
c0014f5c:	e8 be e0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f61:	58                   	pop    eax
c0014f62:	5a                   	pop    edx
c0014f63:	56                   	push   esi
c0014f64:	68 f6 af 02 c0       	push   0xc002aff6
c0014f69:	e8 b1 e0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0014f6e:	59                   	pop    ecx
c0014f6f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7a:	e8 d8 bd ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c0014f7f:	58                   	pop    eax
c0014f80:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f83:	5a                   	pop    edx
c0014f84:	c1 e0 05             	shl    eax,0x5
c0014f87:	05 c0 d4 02 c0       	add    eax,0xc002d4c0
c0014f8c:	50                   	push   eax
c0014f8d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f98:	e8 d9 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014f9d:	59                   	pop    ecx
c0014f9e:	58                   	pop    eax
c0014f9f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fa4:	68 01 b0 02 c0       	push   0xc002b001
c0014fa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014faf:	e8 c2 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fb4:	58                   	pop    eax
c0014fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014fba:	5a                   	pop    edx
c0014fbb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fbe:	83 c0 0c             	add    eax,0xc
c0014fc1:	50                   	push   eax
c0014fc2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fcd:	e8 a4 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fd2:	59                   	pop    ecx
c0014fd3:	58                   	pop    eax
c0014fd4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fd9:	68 0a b0 02 c0       	push   0xc002b00a
c0014fde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe4:	e8 8d c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0014fe9:	58                   	pop    eax
c0014fea:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fef:	5a                   	pop    edx
c0014ff0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ff3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff9:	e8 9e c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0014ffe:	59                   	pop    ecx
c0014fff:	58                   	pop    eax
c0015000:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015005:	68 12 b0 02 c0       	push   0xc002b012
c001500a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015010:	e8 61 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015015:	58                   	pop    eax
c0015016:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001501b:	5a                   	pop    edx
c001501c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001501f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015025:	e8 72 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001502a:	59                   	pop    ecx
c001502b:	58                   	pop    eax
c001502c:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015031:	68 1a b0 02 c0       	push   0xc002b01a
c0015036:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503c:	e8 35 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015041:	58                   	pop    eax
c0015042:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015047:	5a                   	pop    edx
c0015048:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001504b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015051:	e8 46 c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015056:	59                   	pop    ecx
c0015057:	58                   	pop    eax
c0015058:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001505d:	68 22 b0 02 c0       	push   0xc002b022
c0015062:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015068:	e8 09 c1 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001506d:	58                   	pop    eax
c001506e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015073:	5a                   	pop    edx
c0015074:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507d:	e8 1a c1 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015082:	59                   	pop    ecx
c0015083:	58                   	pop    eax
c0015084:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015089:	68 2a b0 02 c0       	push   0xc002b02a
c001508e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015094:	e8 dd c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015099:	58                   	pop    eax
c001509a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001509f:	5a                   	pop    edx
c00150a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00150a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a9:	e8 ee c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00150ae:	59                   	pop    ecx
c00150af:	58                   	pop    eax
c00150b0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150b5:	68 32 b0 02 c0       	push   0xc002b032
c00150ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c0:	e8 b1 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00150c5:	58                   	pop    eax
c00150c6:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150cb:	5a                   	pop    edx
c00150cc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00150cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d5:	e8 c2 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00150da:	59                   	pop    ecx
c00150db:	58                   	pop    eax
c00150dc:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150e1:	68 3a b0 02 c0       	push   0xc002b03a
c00150e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ec:	e8 85 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00150f1:	58                   	pop    eax
c00150f2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150f7:	5a                   	pop    edx
c00150f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150fc:	52                   	push   edx
c00150fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015103:	e8 94 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015108:	59                   	pop    ecx
c0015109:	58                   	pop    eax
c001510a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001510f:	68 43 b0 02 c0       	push   0xc002b043
c0015114:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001511a:	e8 57 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001511f:	58                   	pop    eax
c0015120:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015125:	5a                   	pop    edx
c0015126:	57                   	push   edi
c0015127:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512d:	e8 6a c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015132:	59                   	pop    ecx
c0015133:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015138:	5f                   	pop    edi
c0015139:	68 4b b0 02 c0       	push   0xc002b04b
c001513e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015144:	e8 2d c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015149:	58                   	pop    eax
c001514a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001514f:	5a                   	pop    edx
c0015150:	56                   	push   esi
c0015151:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015157:	e8 40 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001515c:	59                   	pop    ecx
c001515d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015162:	5e                   	pop    esi
c0015163:	68 53 b0 02 c0       	push   0xc002b053
c0015168:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516e:	e8 03 c0 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015173:	5f                   	pop    edi
c0015174:	58                   	pop    eax
c0015175:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001517a:	55                   	push   ebp
c001517b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015181:	e8 16 c0 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015186:	58                   	pop    eax
c0015187:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001518c:	5a                   	pop    edx
c001518d:	68 5b b0 02 c0       	push   0xc002b05b
c0015192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015198:	e8 d9 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001519d:	0f 21 c0             	mov    eax,db0
c00151a0:	59                   	pop    ecx
c00151a1:	5e                   	pop    esi
c00151a2:	50                   	push   eax
c00151a3:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ae:	e8 e9 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00151b3:	5f                   	pop    edi
c00151b4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151b9:	5d                   	pop    ebp
c00151ba:	68 64 b0 02 c0       	push   0xc002b064
c00151bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c5:	e8 ac bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00151ca:	0f 21 c8             	mov    eax,db1
c00151cd:	5a                   	pop    edx
c00151ce:	59                   	pop    ecx
c00151cf:	50                   	push   eax
c00151d0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151db:	e8 bc bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c00151e0:	5e                   	pop    esi
c00151e1:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151e6:	5f                   	pop    edi
c00151e7:	68 6c b0 02 c0       	push   0xc002b06c
c00151ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151f2:	e8 7f bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00151f7:	0f 21 d0             	mov    eax,db2
c00151fa:	5d                   	pop    ebp
c00151fb:	5a                   	pop    edx
c00151fc:	50                   	push   eax
c00151fd:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015202:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015208:	e8 8f bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001520d:	59                   	pop    ecx
c001520e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015213:	5e                   	pop    esi
c0015214:	68 74 b0 02 c0       	push   0xc002b074
c0015219:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001521f:	e8 52 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015224:	0f 21 d8             	mov    eax,db3
c0015227:	5f                   	pop    edi
c0015228:	5d                   	pop    ebp
c0015229:	50                   	push   eax
c001522a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001522f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015235:	e8 62 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001523a:	58                   	pop    eax
c001523b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015240:	5a                   	pop    edx
c0015241:	68 7c b0 02 c0       	push   0xc002b07c
c0015246:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001524c:	e8 25 bf ff ff       	call   c0011176 <VgaText::puts(char const*)>
c0015251:	0f 21 f0             	mov    eax,db6
c0015254:	59                   	pop    ecx
c0015255:	5e                   	pop    esi
c0015256:	50                   	push   eax
c0015257:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001525c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015262:	e8 35 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015267:	5f                   	pop    edi
c0015268:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001526d:	5d                   	pop    ebp
c001526e:	68 84 b0 02 c0       	push   0xc002b084
c0015273:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015279:	e8 f8 be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001527e:	0f 21 f8             	mov    eax,db7
c0015281:	5a                   	pop    edx
c0015282:	59                   	pop    ecx
c0015283:	50                   	push   eax
c0015284:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015289:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001528f:	e8 08 bf ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015294:	5e                   	pop    esi
c0015295:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015298:	e8 12 85 00 00       	call   c001d7af <Thr::getDriverNameFromAddress(unsigned long)>
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	85 c0                	test   eax,eax
c00152a2:	74 7d                	je     c0015321 <displayDebugInfo(regs*)+0x48b>
c00152a4:	89 c6                	mov    esi,eax
c00152a6:	50                   	push   eax
c00152a7:	50                   	push   eax
c00152a8:	56                   	push   esi
c00152a9:	68 8c b0 02 c0       	push   0xc002b08c
c00152ae:	e8 6c dd ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00152b3:	5a                   	pop    edx
c00152b4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152b9:	59                   	pop    ecx
c00152ba:	68 9a b0 02 c0       	push   0xc002b09a
c00152bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152c5:	e8 ac be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00152ca:	5f                   	pop    edi
c00152cb:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152d0:	5d                   	pop    ebp
c00152d1:	56                   	push   esi
c00152d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152d8:	e8 99 be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00152dd:	58                   	pop    eax
c00152de:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152e3:	5a                   	pop    edx
c00152e4:	68 a6 b0 02 c0       	push   0xc002b0a6
c00152e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152ef:	e8 82 be ff ff       	call   c0011176 <VgaText::puts(char const*)>
c00152f4:	59                   	pop    ecx
c00152f5:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152fa:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015300:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015303:	e8 de 84 00 00       	call   c001d7e6 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015308:	5b                   	pop    ebx
c0015309:	5d                   	pop    ebp
c001530a:	50                   	push   eax
c001530b:	57                   	push   edi
c001530c:	e8 8b be ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c0015311:	58                   	pop    eax
c0015312:	5a                   	pop    edx
c0015313:	56                   	push   esi
c0015314:	68 b2 b0 02 c0       	push   0xc002b0b2
c0015319:	e8 01 dd ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001531e:	83 c4 10             	add    esp,0x10
c0015321:	fa                   	cli    
c0015322:	f4                   	hlt    
c0015323:	eb fe                	jmp    c0015323 <displayDebugInfo(regs*)+0x48d>

c0015325 <x87EmulHandler(regs*, void*)>:
c0015325:	53                   	push   ebx
c0015326:	83 ec 14             	sub    esp,0x14
c0015329:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001532d:	53                   	push   ebx
c001532e:	e8 21 a8 00 00       	call   c001fb54 <Vm::x87Handler(regs*)>
c0015333:	83 c4 10             	add    esp,0x10
c0015336:	84 c0                	test   al,al
c0015338:	74 05                	je     c001533f <x87EmulHandler(regs*, void*)+0x1a>
c001533a:	83 c4 08             	add    esp,0x8
c001533d:	5b                   	pop    ebx
c001533e:	c3                   	ret    
c001533f:	83 ec 0c             	sub    esp,0xc
c0015342:	68 c2 b0 02 c0       	push   0xc002b0c2
c0015347:	e8 d3 dc ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001534c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001534f:	e8 42 fb ff ff       	call   c0014e96 <displayDebugInfo(regs*)>

c0015354 <gpFault(regs*, void*)>:
c0015354:	53                   	push   ebx
c0015355:	83 ec 14             	sub    esp,0x14
c0015358:	c7 05 c0 e6 02 c0 d1 ee 01 c0 	mov    DWORD PTR ds:0xc002e6c0,0xc001eed1
c0015362:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015366:	53                   	push   ebx
c0015367:	e8 65 9b 00 00       	call   c001eed1 <Vm::faultHandler(regs*)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	84 c0                	test   al,al
c0015371:	74 05                	je     c0015378 <gpFault(regs*, void*)+0x24>
c0015373:	83 c4 08             	add    esp,0x8
c0015376:	5b                   	pop    ebx
c0015377:	c3                   	ret    
c0015378:	83 ec 0c             	sub    esp,0xc
c001537b:	68 d8 b0 02 c0       	push   0xc002b0d8
c0015380:	e8 9a dc ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0015385:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015388:	e8 09 fb ff ff       	call   c0014e96 <displayDebugInfo(regs*)>

c001538d <pgFault(regs*, void*)>:
c001538d:	83 ec 18             	sub    esp,0x18
c0015390:	68 f3 b0 02 c0       	push   0xc002b0f3
c0015395:	e8 85 dc ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001539a:	0f 20 d0             	mov    eax,cr2
c001539d:	5a                   	pop    edx
c001539e:	59                   	pop    ecx
c001539f:	50                   	push   eax
c00153a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153a8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00153ae:	e8 49 d8 ff ff       	call   c0012bfc <VAS::tryLoadBackOffDisk(unsigned long)>
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	84 c0                	test   al,al
c00153b8:	74 04                	je     c00153be <pgFault(regs*, void*)+0x31>
c00153ba:	83 c4 0c             	add    esp,0xc
c00153bd:	c3                   	ret    
c00153be:	83 ec 0c             	sub    esp,0xc
c00153c1:	68 00 b1 02 c0       	push   0xc002b100
c00153c6:	e8 54 dc ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00153cb:	58                   	pop    eax
c00153cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153d0:	e8 c1 fa ff ff       	call   c0014e96 <displayDebugInfo(regs*)>

c00153d5 <otherISRHandler(regs*, void*)>:
c00153d5:	53                   	push   ebx
c00153d6:	83 ec 0c             	sub    esp,0xc
c00153d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153e0:	50                   	push   eax
c00153e1:	50                   	push   eax
c00153e2:	68 1e b1 02 c0       	push   0xc002b11e
c00153e7:	e8 33 dc ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00153ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153ef:	e8 a2 fa ff ff       	call   c0014e96 <displayDebugInfo(regs*)>

c00153f4 <opcodeFault(regs*, void*)>:
c00153f4:	55                   	push   ebp
c00153f5:	89 e5                	mov    ebp,esp
c00153f7:	56                   	push   esi
c00153f8:	53                   	push   ebx
c00153f9:	83 ec 40             	sub    esp,0x40
c00153fc:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0015401:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015407:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001540d:	84 c0                	test   al,al
c001540f:	74 24                	je     c0015435 <opcodeFault(regs*, void*)+0x41>
c0015411:	83 ec 0c             	sub    esp,0xc
c0015414:	68 3c b1 02 c0       	push   0xc002b13c
c0015419:	e8 01 dc ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001541e:	83 c4 10             	add    esp,0x10
c0015421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015424:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015427:	8d 50 19             	lea    edx,[eax+0x19]
c001542a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015430:	e9 be 05 00 00       	jmp    c00159f3 <opcodeFault(regs*, void*)+0x5ff>
c0015435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015438:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001543e:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015442:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015449:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001544c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001544f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015452:	8a 00                	mov    al,BYTE PTR [eax]
c0015454:	3c f0                	cmp    al,0xf0
c0015456:	75 17                	jne    c001546f <opcodeFault(regs*, void*)+0x7b>
c0015458:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001545b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015461:	8d 50 01             	lea    edx,[eax+0x1]
c0015464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015467:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001546a:	e9 da 00 00 00       	jmp    c0015549 <opcodeFault(regs*, void*)+0x155>
c001546f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015472:	8a 00                	mov    al,BYTE PTR [eax]
c0015474:	3c f2                	cmp    al,0xf2
c0015476:	74 09                	je     c0015481 <opcodeFault(regs*, void*)+0x8d>
c0015478:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547b:	8a 00                	mov    al,BYTE PTR [eax]
c001547d:	3c f3                	cmp    al,0xf3
c001547f:	75 1b                	jne    c001549c <opcodeFault(regs*, void*)+0xa8>
c0015481:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015485:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015488:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001548e:	8d 50 01             	lea    edx,[eax+0x1]
c0015491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015494:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015497:	e9 ad 00 00 00       	jmp    c0015549 <opcodeFault(regs*, void*)+0x155>
c001549c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549f:	8a 00                	mov    al,BYTE PTR [eax]
c00154a1:	3c 66                	cmp    al,0x66
c00154a3:	75 1f                	jne    c00154c4 <opcodeFault(regs*, void*)+0xd0>
c00154a5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154a9:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00154ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b6:	8d 50 01             	lea    edx,[eax+0x1]
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154bf:	e9 85 00 00 00       	jmp    c0015549 <opcodeFault(regs*, void*)+0x155>
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	8a 00                	mov    al,BYTE PTR [eax]
c00154c9:	3c 67                	cmp    al,0x67
c00154cb:	75 18                	jne    c00154e5 <opcodeFault(regs*, void*)+0xf1>
c00154cd:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154d1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154da:	8d 50 01             	lea    edx,[eax+0x1]
c00154dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154e3:	eb 64                	jmp    c0015549 <opcodeFault(regs*, void*)+0x155>
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ea:	3c 2e                	cmp    al,0x2e
c00154ec:	74 09                	je     c00154f7 <opcodeFault(regs*, void*)+0x103>
c00154ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f1:	8a 00                	mov    al,BYTE PTR [eax]
c00154f3:	3c 3e                	cmp    al,0x3e
c00154f5:	75 18                	jne    c001550f <opcodeFault(regs*, void*)+0x11b>
c00154f7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154fb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015501:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015504:	8d 50 01             	lea    edx,[eax+0x1]
c0015507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001550d:	eb 3a                	jmp    c0015549 <opcodeFault(regs*, void*)+0x155>
c001550f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015512:	8a 00                	mov    al,BYTE PTR [eax]
c0015514:	3c 36                	cmp    al,0x36
c0015516:	74 1b                	je     c0015533 <opcodeFault(regs*, void*)+0x13f>
c0015518:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551b:	8a 00                	mov    al,BYTE PTR [eax]
c001551d:	3c 26                	cmp    al,0x26
c001551f:	74 12                	je     c0015533 <opcodeFault(regs*, void*)+0x13f>
c0015521:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015524:	8a 00                	mov    al,BYTE PTR [eax]
c0015526:	3c 64                	cmp    al,0x64
c0015528:	74 09                	je     c0015533 <opcodeFault(regs*, void*)+0x13f>
c001552a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001552d:	8a 00                	mov    al,BYTE PTR [eax]
c001552f:	3c 65                	cmp    al,0x65
c0015531:	75 16                	jne    c0015549 <opcodeFault(regs*, void*)+0x155>
c0015533:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015537:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001553a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001553d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015540:	8d 50 01             	lea    edx,[eax+0x1]
c0015543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015546:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015549:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554c:	8a 00                	mov    al,BYTE PTR [eax]
c001554e:	3c 0f                	cmp    al,0xf
c0015550:	0f 85 ad 00 00 00    	jne    c0015603 <opcodeFault(regs*, void*)+0x20f>
c0015556:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015559:	40                   	inc    eax
c001555a:	8a 00                	mov    al,BYTE PTR [eax]
c001555c:	3c c2                	cmp    al,0xc2
c001555e:	74 0e                	je     c001556e <opcodeFault(regs*, void*)+0x17a>
c0015560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015563:	40                   	inc    eax
c0015564:	8a 00                	mov    al,BYTE PTR [eax]
c0015566:	3c c3                	cmp    al,0xc3
c0015568:	0f 85 95 00 00 00    	jne    c0015603 <opcodeFault(regs*, void*)+0x20f>
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	68 5f b1 02 c0       	push   0xc002b15f
c0015576:	e8 a4 da ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001557b:	83 c4 10             	add    esp,0x10
c001557e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015581:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015584:	8d 50 01             	lea    edx,[eax+0x1]
c0015587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001558d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015590:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015593:	8a 00                	mov    al,BYTE PTR [eax]
c0015595:	8d 50 fe             	lea    edx,[eax-0x2]
c0015598:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559b:	88 10                	mov    BYTE PTR [eax],dl
c001559d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00155a0:	50                   	push   eax
c00155a1:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00155a4:	50                   	push   eax
c00155a5:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00155a8:	50                   	push   eax
c00155a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00155ac:	e8 e3 47 00 00       	call   c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00155b1:	83 c4 10             	add    esp,0x10
c00155b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155ba:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155bd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00155c0:	01 d0                	add    eax,edx
c00155c2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00155c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155cb:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00155ce:	48                   	dec    eax
c00155cf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00155d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155d8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155de:	83 ec 04             	sub    esp,0x4
c00155e1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155e4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155e7:	50                   	push   eax
c00155e8:	e8 c7 ab fe ff       	call   c00001b4 <voodooXADD>
c00155ed:	83 c4 10             	add    esp,0x10
c00155f0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00155f3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00155f6:	01 c2                	add    edx,eax
c00155f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155fe:	e9 f0 03 00 00       	jmp    c00159f3 <opcodeFault(regs*, void*)+0x5ff>
c0015603:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015606:	8a 00                	mov    al,BYTE PTR [eax]
c0015608:	3c 0f                	cmp    al,0xf
c001560a:	0f 85 8b 01 00 00    	jne    c001579b <opcodeFault(regs*, void*)+0x3a7>
c0015610:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015613:	40                   	inc    eax
c0015614:	8a 00                	mov    al,BYTE PTR [eax]
c0015616:	3c c7                	cmp    al,0xc7
c0015618:	0f 86 7d 01 00 00    	jbe    c001579b <opcodeFault(regs*, void*)+0x3a7>
c001561e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015621:	40                   	inc    eax
c0015622:	8a 00                	mov    al,BYTE PTR [eax]
c0015624:	3c cf                	cmp    al,0xcf
c0015626:	0f 87 6f 01 00 00    	ja     c001579b <opcodeFault(regs*, void*)+0x3a7>
c001562c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562f:	40                   	inc    eax
c0015630:	8a 00                	mov    al,BYTE PTR [eax]
c0015632:	83 c0 38             	add    eax,0x38
c0015635:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015638:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001563c:	75 0b                	jne    c0015649 <opcodeFault(regs*, void*)+0x255>
c001563e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015641:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015644:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015647:	eb 75                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c0015649:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001564d:	75 0b                	jne    c001565a <opcodeFault(regs*, void*)+0x266>
c001564f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015652:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015655:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015658:	eb 64                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c001565a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001565e:	75 0b                	jne    c001566b <opcodeFault(regs*, void*)+0x277>
c0015660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015663:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015666:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015669:	eb 53                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c001566b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001566f:	75 0b                	jne    c001567c <opcodeFault(regs*, void*)+0x288>
c0015671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015674:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015677:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001567a:	eb 42                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c001567c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015680:	75 0b                	jne    c001568d <opcodeFault(regs*, void*)+0x299>
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015688:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001568b:	eb 31                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c001568d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015691:	75 0b                	jne    c001569e <opcodeFault(regs*, void*)+0x2aa>
c0015693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015696:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015699:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001569c:	eb 20                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c001569e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00156a2:	75 0b                	jne    c00156af <opcodeFault(regs*, void*)+0x2bb>
c00156a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00156aa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156ad:	eb 0f                	jmp    c00156be <opcodeFault(regs*, void*)+0x2ca>
c00156af:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00156b3:	75 09                	jne    c00156be <opcodeFault(regs*, void*)+0x2ca>
c00156b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00156bb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156be:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00156c2:	74 10                	je     c00156d4 <opcodeFault(regs*, void*)+0x2e0>
c00156c4:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00156cb:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00156d2:	eb 2d                	jmp    c0015701 <opcodeFault(regs*, void*)+0x30d>
c00156d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156d7:	c1 e0 18             	shl    eax,0x18
c00156da:	89 c2                	mov    edx,eax
c00156dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156df:	c1 e0 08             	shl    eax,0x8
c00156e2:	25 00 00 ff 00       	and    eax,0xff0000
c00156e7:	09 c2                	or     edx,eax
c00156e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156ec:	c1 e8 08             	shr    eax,0x8
c00156ef:	25 00 ff 00 00       	and    eax,0xff00
c00156f4:	09 c2                	or     edx,eax
c00156f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156f9:	c1 e8 18             	shr    eax,0x18
c00156fc:	09 d0                	or     eax,edx
c00156fe:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015701:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015705:	75 0b                	jne    c0015712 <opcodeFault(regs*, void*)+0x31e>
c0015707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001570d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015710:	eb 75                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015712:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015716:	75 0b                	jne    c0015723 <opcodeFault(regs*, void*)+0x32f>
c0015718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001571e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015721:	eb 64                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015723:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015727:	75 0b                	jne    c0015734 <opcodeFault(regs*, void*)+0x340>
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001572f:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015732:	eb 53                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015734:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015738:	75 0b                	jne    c0015745 <opcodeFault(regs*, void*)+0x351>
c001573a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015740:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015743:	eb 42                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015745:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015749:	75 0b                	jne    c0015756 <opcodeFault(regs*, void*)+0x362>
c001574b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015751:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015754:	eb 31                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015756:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001575a:	75 0b                	jne    c0015767 <opcodeFault(regs*, void*)+0x373>
c001575c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015762:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015765:	eb 20                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015767:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001576b:	75 0b                	jne    c0015778 <opcodeFault(regs*, void*)+0x384>
c001576d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015770:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015773:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015776:	eb 0f                	jmp    c0015787 <opcodeFault(regs*, void*)+0x393>
c0015778:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001577c:	75 09                	jne    c0015787 <opcodeFault(regs*, void*)+0x393>
c001577e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015781:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015784:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001578d:	8d 50 02             	lea    edx,[eax+0x2]
c0015790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015793:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015796:	e9 58 02 00 00       	jmp    c00159f3 <opcodeFault(regs*, void*)+0x5ff>
c001579b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579e:	8a 00                	mov    al,BYTE PTR [eax]
c00157a0:	3c 0f                	cmp    al,0xf
c00157a2:	0f 85 76 01 00 00    	jne    c001591e <opcodeFault(regs*, void*)+0x52a>
c00157a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ab:	40                   	inc    eax
c00157ac:	8a 00                	mov    al,BYTE PTR [eax]
c00157ae:	3c c7                	cmp    al,0xc7
c00157b0:	0f 85 68 01 00 00    	jne    c001591e <opcodeFault(regs*, void*)+0x52a>
c00157b6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00157b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157bc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00157bf:	8d 50 01             	lea    edx,[eax+0x1]
c00157c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157c8:	8d 45 ba             	lea    eax,[ebp-0x46]
c00157cb:	50                   	push   eax
c00157cc:	8d 45 bb             	lea    eax,[ebp-0x45]
c00157cf:	50                   	push   eax
c00157d0:	8d 45 bc             	lea    eax,[ebp-0x44]
c00157d3:	50                   	push   eax
c00157d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157d7:	e8 b8 45 00 00       	call   c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157e2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157e5:	83 f0 01             	xor    eax,0x1
c00157e8:	84 c0                	test   al,al
c00157ea:	0f 84 2e 01 00 00    	je     c001591e <opcodeFault(regs*, void*)+0x52a>
c00157f0:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00157f3:	3c 01                	cmp    al,0x1
c00157f5:	0f 85 23 01 00 00    	jne    c001591e <opcodeFault(regs*, void*)+0x52a>
c00157fb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157fe:	83 f0 01             	xor    eax,0x1
c0015801:	84 c0                	test   al,al
c0015803:	0f 84 15 01 00 00    	je     c001591e <opcodeFault(regs*, void*)+0x52a>
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001580f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015812:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015819:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001581c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001581f:	89 c2                	mov    edx,eax
c0015821:	b8 00 00 00 00       	mov    eax,0x0
c0015826:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015829:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001582c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015832:	ba 00 00 00 00       	mov    edx,0x0
c0015837:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001583a:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001583d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015840:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015843:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015846:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001584d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015850:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015853:	89 c2                	mov    edx,eax
c0015855:	b8 00 00 00 00       	mov    eax,0x0
c001585a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001585d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015866:	ba 00 00 00 00       	mov    edx,0x0
c001586b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001586e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015871:	e8 4a 86 00 00       	call   c001dec0 <lockScheduler()>
c0015876:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015879:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001587c:	8b 00                	mov    eax,DWORD PTR [eax]
c001587e:	89 c1                	mov    ecx,eax
c0015880:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015883:	89 cb                	mov    ebx,ecx
c0015885:	89 d0                	mov    eax,edx
c0015887:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001588a:	89 c6                	mov    esi,eax
c001588c:	89 f0                	mov    eax,esi
c001588e:	09 d8                	or     eax,ebx
c0015890:	85 c0                	test   eax,eax
c0015892:	75 21                	jne    c00158b5 <opcodeFault(regs*, void*)+0x4c1>
c0015894:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015897:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001589a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001589d:	89 01                	mov    DWORD PTR [ecx],eax
c001589f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00158a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158a8:	83 c8 40             	or     eax,0x40
c00158ab:	89 c2                	mov    edx,eax
c00158ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158b3:	eb 3e                	jmp    c00158f3 <opcodeFault(regs*, void*)+0x4ff>
c00158b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00158b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00158bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00158c0:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00158c3:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00158c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00158cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00158cf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00158d2:	89 d0                	mov    eax,edx
c00158d4:	31 d2                	xor    edx,edx
c00158d6:	89 c3                	mov    ebx,eax
c00158d8:	89 d6                	mov    esi,edx
c00158da:	89 da                	mov    edx,ebx
c00158dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158df:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158e8:	83 e0 bf             	and    eax,0xffffffbf
c00158eb:	89 c2                	mov    edx,eax
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158f3:	e8 ca 85 00 00       	call   c001dec2 <unlockScheduler()>
c00158f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158fb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fe:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015901:	01 c2                	add    edx,eax
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015909:	83 ec 0c             	sub    esp,0xc
c001590c:	68 6e b1 02 c0       	push   0xc002b16e
c0015911:	e8 09 d7 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0015916:	83 c4 10             	add    esp,0x10
c0015919:	e9 d5 00 00 00       	jmp    c00159f3 <opcodeFault(regs*, void*)+0x5ff>
c001591e:	83 ec 0c             	sub    esp,0xc
c0015921:	68 81 b1 02 c0       	push   0xc002b181
c0015926:	e8 f4 d6 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001592b:	83 c4 10             	add    esp,0x10
c001592e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015931:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015937:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001593a:	c1 e0 04             	shl    eax,0x4
c001593d:	01 d0                	add    eax,edx
c001593f:	83 c0 03             	add    eax,0x3
c0015942:	8a 00                	mov    al,BYTE PTR [eax]
c0015944:	0f b6 d8             	movzx  ebx,al
c0015947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015950:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015953:	c1 e0 04             	shl    eax,0x4
c0015956:	01 d0                	add    eax,edx
c0015958:	83 c0 02             	add    eax,0x2
c001595b:	8a 00                	mov    al,BYTE PTR [eax]
c001595d:	0f b6 c8             	movzx  ecx,al
c0015960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015963:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015969:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001596c:	c1 e0 04             	shl    eax,0x4
c001596f:	01 d0                	add    eax,edx
c0015971:	40                   	inc    eax
c0015972:	8a 00                	mov    al,BYTE PTR [eax]
c0015974:	0f b6 d0             	movzx  edx,al
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001597d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015980:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015983:	c1 e0 04             	shl    eax,0x4
c0015986:	01 f0                	add    eax,esi
c0015988:	8a 00                	mov    al,BYTE PTR [eax]
c001598a:	0f b6 c0             	movzx  eax,al
c001598d:	83 ec 0c             	sub    esp,0xc
c0015990:	53                   	push   ebx
c0015991:	51                   	push   ecx
c0015992:	52                   	push   edx
c0015993:	50                   	push   eax
c0015994:	68 94 b1 02 c0       	push   0xc002b194
c0015999:	e8 81 d6 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001599e:	83 c4 20             	add    esp,0x20
c00159a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159a7:	83 c0 03             	add    eax,0x3
c00159aa:	8a 00                	mov    al,BYTE PTR [eax]
c00159ac:	0f b6 d8             	movzx  ebx,al
c00159af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159b5:	83 c0 02             	add    eax,0x2
c00159b8:	8a 00                	mov    al,BYTE PTR [eax]
c00159ba:	0f b6 c8             	movzx  ecx,al
c00159bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159c3:	40                   	inc    eax
c00159c4:	8a 00                	mov    al,BYTE PTR [eax]
c00159c6:	0f b6 d0             	movzx  edx,al
c00159c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00159cf:	8a 00                	mov    al,BYTE PTR [eax]
c00159d1:	0f b6 c0             	movzx  eax,al
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	53                   	push   ebx
c00159d8:	51                   	push   ecx
c00159d9:	52                   	push   edx
c00159da:	50                   	push   eax
c00159db:	68 bc b1 02 c0       	push   0xc002b1bc
c00159e0:	e8 3a d6 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00159e5:	83 c4 20             	add    esp,0x20
c00159e8:	83 ec 0c             	sub    esp,0xc
c00159eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159ee:	e8 a3 f4 ff ff       	call   c0014e96 <displayDebugInfo(regs*)>
c00159f3:	8d 65 f8             	lea    esp,[ebp-0x8]
c00159f6:	5b                   	pop    ebx
c00159f7:	5e                   	pop    esi
c00159f8:	5d                   	pop    ebp
c00159f9:	c3                   	ret    

c00159fa <displayProgramFault(char const*)>:
c00159fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015a02:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a08:	85 c0                	test   eax,eax
c0015a0a:	74 15                	je     c0015a21 <displayProgramFault(char const*)+0x27>
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	6a 04                	push   0x4
c0015a11:	6a 0f                	push   0xf
c0015a13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a17:	50                   	push   eax
c0015a18:	e8 1b b4 ff ff       	call   c0010e38 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015a1d:	83 c4 1c             	add    esp,0x1c
c0015a20:	c3                   	ret    
c0015a21:	c3                   	ret    

c0015a22 <setupInterruptController()>:
c0015a22:	55                   	push   ebp
c0015a23:	89 e5                	mov    ebp,esp
c0015a25:	53                   	push   ebx
c0015a26:	83 ec 24             	sub    esp,0x24
c0015a29:	b8 00 00 00 00       	mov    eax,0x0
c0015a2e:	85 c0                	test   eax,eax
c0015a30:	0f 95 c0             	setne  al
c0015a33:	84 c0                	test   al,al
c0015a35:	74 5b                	je     c0015a92 <setupInterruptController()+0x70>
c0015a37:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a3e:	83 ec 0c             	sub    esp,0xc
c0015a41:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a44:	e8 fa 9d ff ff       	call   c000f843 <malloc>
c0015a49:	83 c4 10             	add    esp,0x10
c0015a4c:	89 c3                	mov    ebx,eax
c0015a4e:	83 ec 0c             	sub    esp,0xc
c0015a51:	53                   	push   ebx
c0015a52:	e8 c1 ff 00 00       	call   c0025a18 <APIC::APIC()>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a5d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a65:	83 c0 08             	add    eax,0x8
c0015a68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6a:	6a 00                	push   0x0
c0015a6c:	6a 00                	push   0x0
c0015a6e:	6a 00                	push   0x0
c0015a70:	52                   	push   edx
c0015a71:	ff d0                	call   eax
c0015a73:	83 c4 10             	add    esp,0x10
c0015a76:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0015a7b:	83 ec 08             	sub    esp,0x8
c0015a7e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a81:	50                   	push   eax
c0015a82:	e8 bf e9 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0015a87:	83 c4 10             	add    esp,0x10
c0015a8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a8d:	e9 52 03 00 00       	jmp    c0015de4 <setupInterruptController()+0x3c2>
c0015a92:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0015a97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a9d:	83 e0 01             	and    eax,0x1
c0015aa0:	84 c0                	test   al,al
c0015aa2:	0f 95 c0             	setne  al
c0015aa5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015aa8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015aaf:	83 ec 0c             	sub    esp,0xc
c0015ab2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015ab5:	e8 89 9d ff ff       	call   c000f843 <malloc>
c0015aba:	83 c4 10             	add    esp,0x10
c0015abd:	89 c3                	mov    ebx,eax
c0015abf:	83 ec 0c             	sub    esp,0xc
c0015ac2:	53                   	push   ebx
c0015ac3:	e8 a8 04 01 00       	call   c0025f70 <PIC::PIC()>
c0015ac8:	83 c4 10             	add    esp,0x10
c0015acb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015ace:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ad1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad6:	83 c0 08             	add    eax,0x8
c0015ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015adb:	6a 00                	push   0x0
c0015add:	6a 00                	push   0x0
c0015adf:	6a 00                	push   0x0
c0015ae1:	52                   	push   edx
c0015ae2:	ff d0                	call   eax
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015aeb:	74 73                	je     c0015b60 <setupInterruptController()+0x13e>
c0015aed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015af0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af5:	83 c0 0c             	add    eax,0xc
c0015af8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afa:	6a 00                	push   0x0
c0015afc:	6a 00                	push   0x0
c0015afe:	6a 00                	push   0x0
c0015b00:	52                   	push   edx
c0015b01:	ff d0                	call   eax
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015b0a:	74 15                	je     c0015b21 <setupInterruptController()+0xff>
c0015b0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b11:	83 c0 04             	add    eax,0x4
c0015b14:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b16:	83 ec 0c             	sub    esp,0xc
c0015b19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1c:	ff d0                	call   eax
c0015b1e:	83 c4 10             	add    esp,0x10
c0015b21:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015b28:	83 ec 0c             	sub    esp,0xc
c0015b2b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015b2e:	e8 10 9d ff ff       	call   c000f843 <malloc>
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	89 c3                	mov    ebx,eax
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	53                   	push   ebx
c0015b3c:	e8 d7 fe 00 00       	call   c0025a18 <APIC::APIC()>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b47:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4f:	83 c0 08             	add    eax,0x8
c0015b52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b54:	6a 00                	push   0x0
c0015b56:	6a 00                	push   0x0
c0015b58:	6a 00                	push   0x0
c0015b5a:	52                   	push   edx
c0015b5b:	ff d0                	call   eax
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0015b65:	83 ec 08             	sub    esp,0x8
c0015b68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6b:	50                   	push   eax
c0015b6c:	e8 d5 e8 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0015b71:	83 c4 10             	add    esp,0x10
c0015b74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b79:	83 c0 24             	add    eax,0x24
c0015b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7e:	6a 00                	push   0x0
c0015b80:	68 d5 53 01 c0       	push   0xc00153d5
c0015b85:	6a 00                	push   0x0
c0015b87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b8a:	ff d0                	call   eax
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b92:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b94:	83 c0 24             	add    eax,0x24
c0015b97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b99:	6a 00                	push   0x0
c0015b9b:	68 d5 53 01 c0       	push   0xc00153d5
c0015ba0:	6a 01                	push   0x1
c0015ba2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba5:	ff d0                	call   eax
c0015ba7:	83 c4 10             	add    esp,0x10
c0015baa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bad:	8b 00                	mov    eax,DWORD PTR [eax]
c0015baf:	83 c0 24             	add    eax,0x24
c0015bb2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb4:	6a 00                	push   0x0
c0015bb6:	68 f3 4c 01 c0       	push   0xc0014cf3
c0015bbb:	6a 02                	push   0x2
c0015bbd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc0:	ff d0                	call   eax
c0015bc2:	83 c4 10             	add    esp,0x10
c0015bc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bca:	83 c0 24             	add    eax,0x24
c0015bcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcf:	6a 00                	push   0x0
c0015bd1:	68 d5 53 01 c0       	push   0xc00153d5
c0015bd6:	6a 03                	push   0x3
c0015bd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bdb:	ff d0                	call   eax
c0015bdd:	83 c4 10             	add    esp,0x10
c0015be0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be5:	83 c0 24             	add    eax,0x24
c0015be8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bea:	6a 00                	push   0x0
c0015bec:	68 d5 53 01 c0       	push   0xc00153d5
c0015bf1:	6a 04                	push   0x4
c0015bf3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf6:	ff d0                	call   eax
c0015bf8:	83 c4 10             	add    esp,0x10
c0015bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c00:	83 c0 24             	add    eax,0x24
c0015c03:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c05:	6a 00                	push   0x0
c0015c07:	68 d5 53 01 c0       	push   0xc00153d5
c0015c0c:	6a 05                	push   0x5
c0015c0e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c11:	ff d0                	call   eax
c0015c13:	83 c4 10             	add    esp,0x10
c0015c16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c19:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1b:	83 c0 24             	add    eax,0x24
c0015c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c20:	6a 00                	push   0x0
c0015c22:	68 f4 53 01 c0       	push   0xc00153f4
c0015c27:	6a 06                	push   0x6
c0015c29:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c2c:	ff d0                	call   eax
c0015c2e:	83 c4 10             	add    esp,0x10
c0015c31:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c36:	83 c0 24             	add    eax,0x24
c0015c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3b:	6a 00                	push   0x0
c0015c3d:	68 25 53 01 c0       	push   0xc0015325
c0015c42:	6a 07                	push   0x7
c0015c44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c47:	ff d0                	call   eax
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c51:	83 c0 24             	add    eax,0x24
c0015c54:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c56:	6a 00                	push   0x0
c0015c58:	68 0e 4b 01 c0       	push   0xc0014b0e
c0015c5d:	6a 08                	push   0x8
c0015c5f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c62:	ff d0                	call   eax
c0015c64:	83 c4 10             	add    esp,0x10
c0015c67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6c:	83 c0 24             	add    eax,0x24
c0015c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c71:	6a 00                	push   0x0
c0015c73:	68 d5 53 01 c0       	push   0xc00153d5
c0015c78:	6a 09                	push   0x9
c0015c7a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c7d:	ff d0                	call   eax
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c87:	83 c0 24             	add    eax,0x24
c0015c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8c:	6a 00                	push   0x0
c0015c8e:	68 d5 53 01 c0       	push   0xc00153d5
c0015c93:	6a 0a                	push   0xa
c0015c95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c98:	ff d0                	call   eax
c0015c9a:	83 c4 10             	add    esp,0x10
c0015c9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca2:	83 c0 24             	add    eax,0x24
c0015ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca7:	6a 00                	push   0x0
c0015ca9:	68 d5 53 01 c0       	push   0xc00153d5
c0015cae:	6a 0b                	push   0xb
c0015cb0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb3:	ff d0                	call   eax
c0015cb5:	83 c4 10             	add    esp,0x10
c0015cb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cbd:	83 c0 24             	add    eax,0x24
c0015cc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc2:	6a 00                	push   0x0
c0015cc4:	68 d5 53 01 c0       	push   0xc00153d5
c0015cc9:	6a 0c                	push   0xc
c0015ccb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cce:	ff d0                	call   eax
c0015cd0:	83 c4 10             	add    esp,0x10
c0015cd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cd8:	83 c0 24             	add    eax,0x24
c0015cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cdd:	6a 00                	push   0x0
c0015cdf:	68 54 53 01 c0       	push   0xc0015354
c0015ce4:	6a 0d                	push   0xd
c0015ce6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ce9:	ff d0                	call   eax
c0015ceb:	83 c4 10             	add    esp,0x10
c0015cee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf3:	83 c0 24             	add    eax,0x24
c0015cf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf8:	6a 00                	push   0x0
c0015cfa:	68 8d 53 01 c0       	push   0xc001538d
c0015cff:	6a 0e                	push   0xe
c0015d01:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d04:	ff d0                	call   eax
c0015d06:	83 c4 10             	add    esp,0x10
c0015d09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d0e:	83 c0 24             	add    eax,0x24
c0015d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d13:	6a 00                	push   0x0
c0015d15:	68 d5 53 01 c0       	push   0xc00153d5
c0015d1a:	6a 0f                	push   0xf
c0015d1c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d1f:	ff d0                	call   eax
c0015d21:	83 c4 10             	add    esp,0x10
c0015d24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d29:	83 c0 24             	add    eax,0x24
c0015d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2e:	6a 00                	push   0x0
c0015d30:	68 d5 53 01 c0       	push   0xc00153d5
c0015d35:	6a 10                	push   0x10
c0015d37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d3a:	ff d0                	call   eax
c0015d3c:	83 c4 10             	add    esp,0x10
c0015d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d44:	83 c0 24             	add    eax,0x24
c0015d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d49:	6a 00                	push   0x0
c0015d4b:	68 d5 53 01 c0       	push   0xc00153d5
c0015d50:	6a 11                	push   0x11
c0015d52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d55:	ff d0                	call   eax
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d5f:	83 c0 24             	add    eax,0x24
c0015d62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d64:	6a 00                	push   0x0
c0015d66:	68 d5 53 01 c0       	push   0xc00153d5
c0015d6b:	6a 12                	push   0x12
c0015d6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d70:	ff d0                	call   eax
c0015d72:	83 c4 10             	add    esp,0x10
c0015d75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d7a:	83 c0 24             	add    eax,0x24
c0015d7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d7f:	6a 00                	push   0x0
c0015d81:	68 d5 53 01 c0       	push   0xc00153d5
c0015d86:	6a 13                	push   0x13
c0015d88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d8b:	ff d0                	call   eax
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d95:	83 c0 24             	add    eax,0x24
c0015d98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d9a:	6a 00                	push   0x0
c0015d9c:	68 d5 53 01 c0       	push   0xc00153d5
c0015da1:	6a 14                	push   0x14
c0015da3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015da6:	ff d0                	call   eax
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015db0:	83 c0 24             	add    eax,0x24
c0015db3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015db5:	6a 00                	push   0x0
c0015db7:	68 d5 53 01 c0       	push   0xc00153d5
c0015dbc:	6a 1e                	push   0x1e
c0015dbe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dc1:	ff d0                	call   eax
c0015dc3:	83 c4 10             	add    esp,0x10
c0015dc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dcb:	83 c0 24             	add    eax,0x24
c0015dce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015dd0:	6a 00                	push   0x0
c0015dd2:	68 57 c8 01 c0       	push   0xc001c857
c0015dd7:	6a 60                	push   0x60
c0015dd9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ddc:	ff d0                	call   eax
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015de4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015de7:	c9                   	leave  
c0015de8:	c3                   	ret    
c0015de9:	90                   	nop

c0015dea <InterruptController::convertLegacyIRQNumber(int)>:
c0015dea:	55                   	push   ebp
c0015deb:	89 e5                	mov    ebp,esp
c0015ded:	83 ec 08             	sub    esp,0x8
c0015df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015df3:	83 ec 0c             	sub    esp,0xc
c0015df6:	50                   	push   eax
c0015df7:	e8 36 e9 ff ff       	call   c0014732 <Device::getName()>
c0015dfc:	83 c4 10             	add    esp,0x10
c0015dff:	8a 00                	mov    al,BYTE PTR [eax]
c0015e01:	3c 41                	cmp    al,0x41
c0015e03:	0f 94 c0             	sete   al
c0015e06:	84 c0                	test   al,al
c0015e08:	74 28                	je     c0015e32 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e0a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015e0e:	7f 12                	jg     c0015e22 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015e10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e13:	05 60 d7 02 c0       	add    eax,0xc002d760
c0015e18:	8a 00                	mov    al,BYTE PTR [eax]
c0015e1a:	0f b6 c0             	movzx  eax,al
c0015e1d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015e20:	eb 10                	jmp    c0015e32 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015e22:	83 ec 0c             	sub    esp,0xc
c0015e25:	68 c0 ae 02 c0       	push   0xc002aec0
c0015e2a:	e8 9e 48 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0015e2f:	83 c4 10             	add    esp,0x10
c0015e32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e35:	c9                   	leave  
c0015e36:	c3                   	ret    
c0015e37:	90                   	nop

c0015e38 <startGUI(void*)>:
c0015e38:	55                   	push   ebp
c0015e39:	89 e5                	mov    ebp,esp
c0015e3b:	53                   	push   ebx
c0015e3c:	83 ec 04             	sub    esp,0x4
c0015e3f:	e8 7e 80 00 00       	call   c001dec2 <unlockScheduler()>
c0015e44:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0015e4a:	83 ec 08             	sub    esp,0x8
c0015e4d:	6a 01                	push   0x1
c0015e4f:	68 2c b2 02 c0       	push   0xc002b22c
c0015e54:	e8 a7 79 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c0015e59:	83 c4 10             	add    esp,0x10
c0015e5c:	83 ec 08             	sub    esp,0x8
c0015e5f:	53                   	push   ebx
c0015e60:	50                   	push   eax
c0015e61:	e8 e6 7b 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c0015e66:	83 c4 10             	add    esp,0x10
c0015e69:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0015e6f:	83 ec 08             	sub    esp,0x8
c0015e72:	6a 01                	push   0x1
c0015e74:	68 46 b2 02 c0       	push   0xc002b246
c0015e79:	e8 82 79 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c0015e7e:	83 c4 10             	add    esp,0x10
c0015e81:	83 ec 08             	sub    esp,0x8
c0015e84:	53                   	push   ebx
c0015e85:	50                   	push   eax
c0015e86:	e8 c1 7b 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	90                   	nop
c0015e8f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e92:	c9                   	leave  
c0015e93:	c3                   	ret    

c0015e94 <startGUIVESA(void*)>:
c0015e94:	55                   	push   ebp
c0015e95:	89 e5                	mov    ebp,esp
c0015e97:	53                   	push   ebx
c0015e98:	83 ec 04             	sub    esp,0x4
c0015e9b:	e8 22 80 00 00       	call   c001dec2 <unlockScheduler()>
c0015ea0:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0015ea6:	83 ec 08             	sub    esp,0x8
c0015ea9:	6a 01                	push   0x1
c0015eab:	68 60 b2 02 c0       	push   0xc002b260
c0015eb0:	e8 4b 79 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	83 ec 08             	sub    esp,0x8
c0015ebb:	53                   	push   ebx
c0015ebc:	50                   	push   eax
c0015ebd:	e8 8a 7b 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c0015ec2:	83 c4 10             	add    esp,0x10
c0015ec5:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0015ecb:	83 ec 08             	sub    esp,0x8
c0015ece:	6a 01                	push   0x1
c0015ed0:	68 46 b2 02 c0       	push   0xc002b246
c0015ed5:	e8 26 79 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c0015eda:	83 c4 10             	add    esp,0x10
c0015edd:	83 ec 08             	sub    esp,0x8
c0015ee0:	53                   	push   ebx
c0015ee1:	50                   	push   eax
c0015ee2:	e8 65 7b 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c0015ee7:	83 c4 10             	add    esp,0x10
c0015eea:	90                   	nop
c0015eeb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015eee:	c9                   	leave  
c0015eef:	c3                   	ret    

c0015ef0 <sendKeyToTerminal(unsigned char)>:
c0015ef0:	55                   	push   ebp
c0015ef1:	89 e5                	mov    ebp,esp
c0015ef3:	83 ec 28             	sub    esp,0x28
c0015ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015efc:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0015f01:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015f05:	83 ec 08             	sub    esp,0x8
c0015f08:	52                   	push   edx
c0015f09:	50                   	push   eax
c0015f0a:	e8 65 b4 ff ff       	call   c0011374 <VgaText::receiveKey(unsigned char)>
c0015f0f:	83 c4 10             	add    esp,0x10
c0015f12:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015f16:	75 41                	jne    c0015f59 <sendKeyToTerminal(unsigned char)+0x69>
c0015f18:	e8 ca 7f 00 00       	call   c001dee7 <lockStuff()>
c0015f1d:	a1 e0 e6 02 c0       	mov    eax,ds:0xc002e6e0
c0015f22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f25:	c7 05 e0 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6e0,0x0
c0015f2f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015f33:	74 1f                	je     c0015f54 <sendKeyToTerminal(unsigned char)+0x64>
c0015f35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f38:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f3e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f41:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f44:	83 ec 0c             	sub    esp,0xc
c0015f47:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f4a:	e8 89 85 00 00       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c0015f4f:	83 c4 10             	add    esp,0x10
c0015f52:	eb db                	jmp    c0015f2f <sendKeyToTerminal(unsigned char)+0x3f>
c0015f54:	e8 28 83 00 00       	call   c001e281 <unlockStuff()>
c0015f59:	90                   	nop
c0015f5a:	c9                   	leave  
c0015f5b:	c3                   	ret    

c0015f5c <sendKeyboardToken(KeyboardToken)>:
c0015f5c:	55                   	push   ebp
c0015f5d:	89 e5                	mov    ebp,esp
c0015f5f:	83 ec 18             	sub    esp,0x18
c0015f62:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f68:	0f b7 c0             	movzx  eax,ax
c0015f6b:	83 f2 01             	xor    edx,0x1
c0015f6e:	88 90 00 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1900],dl
c0015f74:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015f79:	85 c0                	test   eax,eax
c0015f7b:	74 24                	je     c0015fa1 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f7d:	8b 0d e8 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6e8
c0015f83:	83 ec 04             	sub    esp,0x4
c0015f86:	68 00 e7 02 c0       	push   0xc002e700
c0015f8b:	83 ec 08             	sub    esp,0x8
c0015f8e:	89 e2                	mov    edx,esp
c0015f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f93:	89 02                	mov    DWORD PTR [edx],eax
c0015f95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f98:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f9c:	ff d1                	call   ecx
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa4:	66 3d 03 02          	cmp    ax,0x203
c0015fa8:	75 07                	jne    c0015fb1 <sendKeyboardToken(KeyboardToken)+0x55>
c0015faa:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c0015faf:	84 c0                	test   al,al
c0015fb1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015fb5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015fb8:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0015fbd:	38 c2                	cmp    dl,al
c0015fbf:	74 1c                	je     c0015fdd <sendKeyboardToken(KeyboardToken)+0x81>
c0015fc1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015fc4:	a2 08 eb 02 c0       	mov    ds:0xc002eb08,al
c0015fc9:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0015fce:	0f b6 c0             	movzx  eax,al
c0015fd1:	83 ec 0c             	sub    esp,0xc
c0015fd4:	50                   	push   eax
c0015fd5:	e8 fa a5 ff ff       	call   c00105d4 <setTerminalScrollLock(bool)>
c0015fda:	83 c4 10             	add    esp,0x10
c0015fdd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fe0:	84 c0                	test   al,al
c0015fe2:	0f 84 ae 00 00 00    	je     c0016096 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015feb:	66 3d 10 03          	cmp    ax,0x310
c0015fef:	75 06                	jne    c0015ff7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015ff1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffa:	66 3d 11 03          	cmp    ax,0x311
c0015ffe:	75 06                	jne    c0016006 <sendKeyboardToken(KeyboardToken)+0xaa>
c0016000:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0016006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016009:	66 3d 12 03          	cmp    ax,0x312
c001600d:	75 06                	jne    c0016015 <sendKeyboardToken(KeyboardToken)+0xb9>
c001600f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0016015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016018:	66 3d 13 03          	cmp    ax,0x313
c001601c:	75 06                	jne    c0016024 <sendKeyboardToken(KeyboardToken)+0xc8>
c001601e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0016024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016027:	66 3d 14 03          	cmp    ax,0x314
c001602b:	75 06                	jne    c0016033 <sendKeyboardToken(KeyboardToken)+0xd7>
c001602d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0016033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016036:	66 3d 15 03          	cmp    ax,0x315
c001603a:	75 06                	jne    c0016042 <sendKeyboardToken(KeyboardToken)+0xe6>
c001603c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016045:	66 3d 16 03          	cmp    ax,0x316
c0016049:	75 06                	jne    c0016051 <sendKeyboardToken(KeyboardToken)+0xf5>
c001604b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016054:	66 3d 17 03          	cmp    ax,0x317
c0016058:	75 06                	jne    c0016060 <sendKeyboardToken(KeyboardToken)+0x104>
c001605a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016063:	66 3d 18 03          	cmp    ax,0x318
c0016067:	75 06                	jne    c001606f <sendKeyboardToken(KeyboardToken)+0x113>
c0016069:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001606f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016072:	66 3d 19 03          	cmp    ax,0x319
c0016076:	75 06                	jne    c001607e <sendKeyboardToken(KeyboardToken)+0x122>
c0016078:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001607e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016081:	66 3d 1a 03          	cmp    ax,0x31a
c0016085:	0f 85 c9 00 00 00    	jne    c0016154 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001608b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016091:	e9 be 00 00 00       	jmp    c0016154 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016099:	66 3d 10 03          	cmp    ax,0x310
c001609d:	75 0a                	jne    c00160a9 <sendKeyboardToken(KeyboardToken)+0x14d>
c001609f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00160a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ac:	66 3d 11 03          	cmp    ax,0x311
c00160b0:	75 0a                	jne    c00160bc <sendKeyboardToken(KeyboardToken)+0x160>
c00160b2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00160b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bf:	66 3d 12 03          	cmp    ax,0x312
c00160c3:	75 0a                	jne    c00160cf <sendKeyboardToken(KeyboardToken)+0x173>
c00160c5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00160cb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160d2:	66 3d 13 03          	cmp    ax,0x313
c00160d6:	75 0a                	jne    c00160e2 <sendKeyboardToken(KeyboardToken)+0x186>
c00160d8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e5:	66 3d 14 03          	cmp    ax,0x314
c00160e9:	75 0a                	jne    c00160f5 <sendKeyboardToken(KeyboardToken)+0x199>
c00160eb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160f1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f8:	66 3d 15 03          	cmp    ax,0x315
c00160fc:	75 0a                	jne    c0016108 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160fe:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016104:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610b:	66 3d 16 03          	cmp    ax,0x316
c001610f:	75 0a                	jne    c001611b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016111:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016117:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001611b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611e:	66 3d 17 03          	cmp    ax,0x317
c0016122:	75 0a                	jne    c001612e <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016124:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001612a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001612e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016131:	66 3d 18 03          	cmp    ax,0x318
c0016135:	75 0a                	jne    c0016141 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016137:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001613d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016144:	66 3d 19 03          	cmp    ax,0x319
c0016148:	75 0a                	jne    c0016154 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001614a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016150:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016157:	66 3d 00 02          	cmp    ax,0x200
c001615b:	75 2c                	jne    c0016189 <sendKeyboardToken(KeyboardToken)+0x22d>
c001615d:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c0016162:	83 f0 01             	xor    eax,0x1
c0016165:	84 c0                	test   al,al
c0016167:	74 20                	je     c0016189 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016169:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001616e:	6a 01                	push   0x1
c0016170:	6a 00                	push   0x0
c0016172:	68 38 5e 01 c0       	push   0xc0015e38
c0016177:	50                   	push   eax
c0016178:	e8 75 7e 00 00       	call   c001dff2 <Process::createThread(void (*)(void*), void*, int)>
c001617d:	83 c4 10             	add    esp,0x10
c0016180:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c0016187:	eb 33                	jmp    c00161bc <sendKeyboardToken(KeyboardToken)+0x260>
c0016189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618c:	66 3d 01 02          	cmp    ax,0x201
c0016190:	75 2a                	jne    c00161bc <sendKeyboardToken(KeyboardToken)+0x260>
c0016192:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c0016197:	83 f0 01             	xor    eax,0x1
c001619a:	84 c0                	test   al,al
c001619c:	74 1e                	je     c00161bc <sendKeyboardToken(KeyboardToken)+0x260>
c001619e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00161a3:	6a 01                	push   0x1
c00161a5:	6a 00                	push   0x0
c00161a7:	68 94 5e 01 c0       	push   0xc0015e94
c00161ac:	50                   	push   eax
c00161ad:	e8 40 7e 00 00       	call   c001dff2 <Process::createThread(void (*)(void*), void*, int)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c00161bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161bf:	66 3d 1d 03          	cmp    ax,0x31d
c00161c3:	75 06                	jne    c00161cb <sendKeyboardToken(KeyboardToken)+0x26f>
c00161c5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00161cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ce:	66 3d 1c 03          	cmp    ax,0x31c
c00161d2:	75 06                	jne    c00161da <sendKeyboardToken(KeyboardToken)+0x27e>
c00161d4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161dd:	66 3d 1b 03          	cmp    ax,0x31b
c00161e1:	75 06                	jne    c00161e9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161e3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ec:	66 3d 1e 03          	cmp    ax,0x31e
c00161f0:	75 06                	jne    c00161f8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161f2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161fb:	66 3d 1f 03          	cmp    ax,0x31f
c00161ff:	75 06                	jne    c0016207 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016201:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001620a:	66 3d 1a 03          	cmp    ax,0x31a
c001620e:	75 06                	jne    c0016216 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016210:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016216:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001621a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001621d:	83 f0 01             	xor    eax,0x1
c0016220:	84 c0                	test   al,al
c0016222:	74 77                	je     c001629b <sendKeyboardToken(KeyboardToken)+0x33f>
c0016224:	a0 01 e8 02 c0       	mov    al,ds:0xc002e801
c0016229:	84 c0                	test   al,al
c001622b:	74 41                	je     c001626e <sendKeyboardToken(KeyboardToken)+0x312>
c001622d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016231:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016235:	74 2b                	je     c0016262 <sendKeyboardToken(KeyboardToken)+0x306>
c0016237:	8b 15 04 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb04
c001623d:	89 d0                	mov    eax,edx
c001623f:	c1 e0 02             	shl    eax,0x2
c0016242:	01 d0                	add    eax,edx
c0016244:	01 c0                	add    eax,eax
c0016246:	a3 04 eb 02 c0       	mov    ds:0xc002eb04,eax
c001624b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624e:	0f b7 c0             	movzx  eax,ax
c0016251:	8d 50 d0             	lea    edx,[eax-0x30]
c0016254:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016259:	01 d0                	add    eax,edx
c001625b:	a3 04 eb 02 c0       	mov    ds:0xc002eb04,eax
c0016260:	eb 6d                	jmp    c00162cf <sendKeyboardToken(KeyboardToken)+0x373>
c0016262:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c001626c:	eb 61                	jmp    c00162cf <sendKeyboardToken(KeyboardToken)+0x373>
c001626e:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016273:	85 c0                	test   eax,eax
c0016275:	74 18                	je     c001628f <sendKeyboardToken(KeyboardToken)+0x333>
c0016277:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c001627c:	0f b6 c0             	movzx  eax,al
c001627f:	83 ec 0c             	sub    esp,0xc
c0016282:	50                   	push   eax
c0016283:	e8 68 fc ff ff       	call   c0015ef0 <sendKeyToTerminal(unsigned char)>
c0016288:	83 c4 10             	add    esp,0x10
c001628b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001628f:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0016299:	eb 34                	jmp    c00162cf <sendKeyboardToken(KeyboardToken)+0x373>
c001629b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629e:	66 3d 01 01          	cmp    ax,0x101
c00162a2:	75 2b                	jne    c00162cf <sendKeyboardToken(KeyboardToken)+0x373>
c00162a4:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c00162a9:	85 c0                	test   eax,eax
c00162ab:	74 18                	je     c00162c5 <sendKeyboardToken(KeyboardToken)+0x369>
c00162ad:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c00162b2:	0f b6 c0             	movzx  eax,al
c00162b5:	83 ec 0c             	sub    esp,0xc
c00162b8:	50                   	push   eax
c00162b9:	e8 32 fc ff ff       	call   c0015ef0 <sendKeyToTerminal(unsigned char)>
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00162c5:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c00162cf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162d2:	83 f0 01             	xor    eax,0x1
c00162d5:	84 c0                	test   al,al
c00162d7:	74 4c                	je     c0016325 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162d9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162dc:	83 f0 01             	xor    eax,0x1
c00162df:	84 c0                	test   al,al
c00162e1:	74 42                	je     c0016325 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162e3:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c00162e8:	83 f0 01             	xor    eax,0x1
c00162eb:	84 c0                	test   al,al
c00162ed:	74 36                	je     c0016325 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162f2:	66 83 f8 1f          	cmp    ax,0x1f
c00162f6:	76 09                	jbe    c0016301 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162fb:	66 83 f8 7e          	cmp    ax,0x7e
c00162ff:	76 12                	jbe    c0016313 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016304:	66 83 f8 0a          	cmp    ax,0xa
c0016308:	74 09                	je     c0016313 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001630a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001630d:	66 83 f8 08          	cmp    ax,0x8
c0016311:	75 12                	jne    c0016325 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016313:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016316:	0f b6 c0             	movzx  eax,al
c0016319:	83 ec 0c             	sub    esp,0xc
c001631c:	50                   	push   eax
c001631d:	e8 ce fb ff ff       	call   c0015ef0 <sendKeyToTerminal(unsigned char)>
c0016322:	83 c4 10             	add    esp,0x10
c0016325:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016328:	83 f0 01             	xor    eax,0x1
c001632b:	84 c0                	test   al,al
c001632d:	74 4f                	je     c001637e <sendKeyboardToken(KeyboardToken)+0x422>
c001632f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016332:	83 f0 01             	xor    eax,0x1
c0016335:	84 c0                	test   al,al
c0016337:	74 45                	je     c001637e <sendKeyboardToken(KeyboardToken)+0x422>
c0016339:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c001633e:	84 c0                	test   al,al
c0016340:	74 3c                	je     c001637e <sendKeyboardToken(KeyboardToken)+0x422>
c0016342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016345:	66 83 f8 3f          	cmp    ax,0x3f
c0016349:	76 33                	jbe    c001637e <sendKeyboardToken(KeyboardToken)+0x422>
c001634b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634e:	66 83 f8 7f          	cmp    ax,0x7f
c0016352:	77 2a                	ja     c001637e <sendKeyboardToken(KeyboardToken)+0x422>
c0016354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016357:	88 c2                	mov    dl,al
c0016359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001635c:	66 83 f8 5f          	cmp    ax,0x5f
c0016360:	76 04                	jbe    c0016366 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016362:	b0 20                	mov    al,0x20
c0016364:	eb 02                	jmp    c0016368 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016366:	b0 00                	mov    al,0x0
c0016368:	29 c2                	sub    edx,eax
c001636a:	88 d0                	mov    al,dl
c001636c:	83 e8 40             	sub    eax,0x40
c001636f:	0f b6 c0             	movzx  eax,al
c0016372:	83 ec 0c             	sub    esp,0xc
c0016375:	50                   	push   eax
c0016376:	e8 75 fb ff ff       	call   c0015ef0 <sendKeyToTerminal(unsigned char)>
c001637b:	83 c4 10             	add    esp,0x10
c001637e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016381:	66 3d 00 03          	cmp    ax,0x300
c0016385:	75 0f                	jne    c0016396 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016387:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001638a:	83 f0 01             	xor    eax,0x1
c001638d:	84 c0                	test   al,al
c001638f:	74 05                	je     c0016396 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016391:	e8 73 aa ff ff       	call   c0010e09 <doTerminalCycle()>
c0016396:	90                   	nop
c0016397:	c9                   	leave  
c0016398:	c3                   	ret    

c0016399 <clearInternalKeybuffer(VgaText*)>:
c0016399:	55                   	push   ebp
c001639a:	89 e5                	mov    ebp,esp
c001639c:	83 ec 08             	sub    esp,0x8
c001639f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a2:	05 34 11 00 00       	add    eax,0x1134
c00163a7:	83 ec 0c             	sub    esp,0xc
c00163aa:	50                   	push   eax
c00163ab:	e8 e4 a3 fe ff       	call   c0000794 <strlen>
c00163b0:	83 c4 10             	add    esp,0x10
c00163b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b6:	81 c2 34 11 00 00    	add    edx,0x1134
c00163bc:	83 ec 04             	sub    esp,0x4
c00163bf:	50                   	push   eax
c00163c0:	6a 00                	push   0x0
c00163c2:	52                   	push   edx
c00163c3:	e8 b0 a3 fe ff       	call   c0000778 <memset>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	90                   	nop
c00163cc:	c9                   	leave  
c00163cd:	c3                   	ret    

c00163ce <readKeyboard(VgaText*, char*, unsigned long)>:
c00163ce:	55                   	push   ebp
c00163cf:	89 e5                	mov    ebp,esp
c00163d1:	83 ec 18             	sub    esp,0x18
c00163d4:	fb                   	sti    
c00163d5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163dc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163e0:	0f 84 8a 00 00 00    	je     c0016470 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163e9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163ef:	84 c0                	test   al,al
c00163f1:	75 11                	jne    c0016404 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00163f3:	e8 c8 7a 00 00       	call   c001dec0 <lockScheduler()>
c00163f8:	e8 ff 7d 00 00       	call   c001e1fc <schedule()>
c00163fd:	e8 c0 7a 00 00       	call   c001dec2 <unlockScheduler()>
c0016402:	eb e2                	jmp    c00163e6 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0016404:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016407:	8d 50 01             	lea    edx,[eax+0x1]
c001640a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001640d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016410:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0016416:	88 10                	mov    BYTE PTR [eax],dl
c0016418:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001641b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0016421:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016427:	05 34 11 00 00       	add    eax,0x1134
c001642c:	83 ec 0c             	sub    esp,0xc
c001642f:	50                   	push   eax
c0016430:	e8 5f a3 fe ff       	call   c0000794 <strlen>
c0016435:	83 c4 10             	add    esp,0x10
c0016438:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001643b:	81 c2 34 11 00 00    	add    edx,0x1134
c0016441:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016444:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016447:	81 c2 34 11 00 00    	add    edx,0x1134
c001644d:	83 ec 04             	sub    esp,0x4
c0016450:	50                   	push   eax
c0016451:	51                   	push   ecx
c0016452:	52                   	push   edx
c0016453:	e8 24 a2 fe ff       	call   c000067c <memmove>
c0016458:	83 c4 10             	add    esp,0x10
c001645b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001645e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016461:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016465:	0f 85 71 ff ff ff    	jne    c00163dc <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001646b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001646e:	eb 03                	jmp    c0016473 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016470:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016473:	c9                   	leave  
c0016474:	c3                   	ret    
c0016475:	90                   	nop

c0016476 <Keyboard::Keyboard(char const*)>:
c0016476:	83 ec 0c             	sub    esp,0xc
c0016479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647d:	83 ec 08             	sub    esp,0x8
c0016480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016484:	50                   	push   eax
c0016485:	e8 ac e1 ff ff       	call   c0014636 <Device::Device(char const*)>
c001648a:	83 c4 10             	add    esp,0x10
c001648d:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c0016492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016496:	89 10                	mov    DWORD PTR [eax],edx
c0016498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164a6:	c6 05 e4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6e4,0x1
c00164ad:	90                   	nop
c00164ae:	83 c4 0c             	add    esp,0xc
c00164b1:	c3                   	ret    

c00164b2 <Keyboard::~Keyboard()>:
c00164b2:	83 ec 0c             	sub    esp,0xc
c00164b5:	ba 84 b2 02 c0       	mov    edx,0xc002b284
c00164ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164be:	89 10                	mov    DWORD PTR [eax],edx
c00164c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	50                   	push   eax
c00164c8:	e8 4b de ff ff       	call   c0014318 <Device::~Device()>
c00164cd:	83 c4 10             	add    esp,0x10
c00164d0:	90                   	nop
c00164d1:	83 c4 0c             	add    esp,0xc
c00164d4:	c3                   	ret    
c00164d5:	90                   	nop

c00164d6 <Keyboard::~Keyboard()>:
c00164d6:	83 ec 0c             	sub    esp,0xc
c00164d9:	83 ec 0c             	sub    esp,0xc
c00164dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e0:	e8 cd ff ff ff       	call   c00164b2 <Keyboard::~Keyboard()>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	83 ec 08             	sub    esp,0x8
c00164eb:	68 5c 01 00 00       	push   0x15c
c00164f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164f4:	e8 46 ca ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00164f9:	83 c4 10             	add    esp,0x10
c00164fc:	83 c4 0c             	add    esp,0xc
c00164ff:	c3                   	ret    

c0016500 <LogicalDisk::close(int, int, void*)>:
c0016500:	83 c8 ff             	or     eax,0xffffffff
c0016503:	c3                   	ret    

c0016504 <LogicalDisk::~LogicalDisk()>:
c0016504:	83 ec 0c             	sub    esp,0xc
c0016507:	ba 34 b3 02 c0       	mov    edx,0xc002b334
c001650c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016510:	89 10                	mov    DWORD PTR [eax],edx
c0016512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016516:	83 ec 0c             	sub    esp,0xc
c0016519:	50                   	push   eax
c001651a:	e8 f9 dd ff ff       	call   c0014318 <Device::~Device()>
c001651f:	83 c4 10             	add    esp,0x10
c0016522:	90                   	nop
c0016523:	83 c4 0c             	add    esp,0xc
c0016526:	c3                   	ret    
c0016527:	90                   	nop

c0016528 <LogicalDisk::~LogicalDisk()>:
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	83 ec 0c             	sub    esp,0xc
c001652e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016532:	e8 cd ff ff ff       	call   c0016504 <LogicalDisk::~LogicalDisk()>
c0016537:	83 c4 10             	add    esp,0x10
c001653a:	83 ec 08             	sub    esp,0x8
c001653d:	68 74 01 00 00       	push   0x174
c0016542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016546:	e8 f4 c9 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c001654b:	83 c4 10             	add    esp,0x10
c001654e:	83 c4 0c             	add    esp,0xc
c0016551:	c3                   	ret    

c0016552 <LogicalDisk::open(int, int, void*)>:
c0016552:	83 ec 18             	sub    esp,0x18
c0016555:	68 b0 b2 02 c0       	push   0xc002b2b0
c001655a:	e8 6e 41 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c001655f:	83 c8 ff             	or     eax,0xffffffff
c0016562:	83 c4 1c             	add    esp,0x1c
c0016565:	c3                   	ret    

c0016566 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016566:	53                   	push   ebx
c0016567:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001656b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001656f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016573:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016579:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001657f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016585:	77 10                	ja     c0016597 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016587:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001658d:	89 d3                	mov    ebx,edx
c001658f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016595:	72 05                	jb     c001659c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016597:	83 c8 ff             	or     eax,0xffffffff
c001659a:	89 c2                	mov    edx,eax
c001659c:	5b                   	pop    ebx
c001659d:	c3                   	ret    

c001659e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001659e:	56                   	push   esi
c001659f:	83 c8 ff             	or     eax,0xffffffff
c00165a2:	53                   	push   ebx
c00165a3:	89 c2                	mov    edx,eax
c00165a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165a9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165b1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165b7:	77 27                	ja     c00165e0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165b9:	89 d8                	mov    eax,ebx
c00165bb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165c1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165cc:	89 c2                	mov    edx,eax
c00165ce:	73 10                	jae    c00165e0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165d0:	89 c8                	mov    eax,ecx
c00165d2:	89 da                	mov    edx,ebx
c00165d4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165da:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165e0:	5b                   	pop    ebx
c00165e1:	5e                   	pop    esi
c00165e2:	c3                   	ret    
c00165e3:	90                   	nop

c00165e4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165e4:	83 ec 1c             	sub    esp,0x1c
c00165e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00165fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016602:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660a:	83 ec 08             	sub    esp,0x8
c001660d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016611:	50                   	push   eax
c0016612:	e8 1f e0 ff ff       	call   c0014636 <Device::Device(char const*)>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	ba 34 b3 02 c0       	mov    edx,0xc002b334
c001661f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016623:	89 10                	mov    DWORD PTR [eax],edx
c0016625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016629:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016634:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001663b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016649:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001664d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016651:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016655:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001665b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016661:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016665:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016668:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001666c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016672:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016680:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016694:	90                   	nop
c0016695:	83 c4 1c             	add    esp,0x1c
c0016698:	c3                   	ret    
c0016699:	90                   	nop

c001669a <LogicalDisk::assignDriveLetter()>:
c001669a:	55                   	push   ebp
c001669b:	57                   	push   edi
c001669c:	56                   	push   esi
c001669d:	53                   	push   ebx
c001669e:	83 ec 14             	sub    esp,0x14
c00166a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166a5:	8b 3d 20 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb20
c00166ab:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166b1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166b5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166bb:	8b 3d 24 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb24
c00166c1:	3c 01                	cmp    al,0x1
c00166c3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166cb:	19 c0                	sbb    eax,eax
c00166cd:	83 e0 02             	and    eax,0x2
c00166d0:	83 c0 41             	add    eax,0x41
c00166d3:	0f be e8             	movsx  ebp,al
c00166d6:	3c 43                	cmp    al,0x43
c00166d8:	75 10                	jne    c00166ea <LogicalDisk::assignDriveLetter()+0x50>
c00166da:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166e1:	75 5d                	jne    c0016740 <LogicalDisk::assignDriveLetter()+0xa6>
c00166e3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166e8:	75 56                	jne    c0016740 <LogicalDisk::assignDriveLetter()+0xa6>
c00166ea:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166ed:	ba 01 00 00 00       	mov    edx,0x1
c00166f2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166f6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166fa:	d3 e2                	shl    edx,cl
c00166fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016700:	89 d7                	mov    edi,edx
c0016702:	89 d6                	mov    esi,edx
c0016704:	c1 ff 1f             	sar    edi,0x1f
c0016707:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001670b:	21 f9                	and    ecx,edi
c001670d:	09 d1                	or     ecx,edx
c001670f:	75 2f                	jne    c0016740 <LogicalDisk::assignDriveLetter()+0xa6>
c0016711:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016715:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016719:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001671f:	09 f2                	or     edx,esi
c0016721:	89 15 20 eb 02 c0    	mov    DWORD PTR ds:0xc002eb20,edx
c0016727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001672b:	09 fa                	or     edx,edi
c001672d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016731:	89 15 24 eb 02 c0    	mov    DWORD PTR ds:0xc002eb24,edx
c0016737:	89 1c bd 40 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd14c0],ebx
c001673e:	eb 08                	jmp    c0016748 <LogicalDisk::assignDriveLetter()+0xae>
c0016740:	45                   	inc    ebp
c0016741:	40                   	inc    eax
c0016742:	3c 5b                	cmp    al,0x5b
c0016744:	75 90                	jne    c00166d6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016746:	31 c0                	xor    eax,eax
c0016748:	83 c4 14             	add    esp,0x14
c001674b:	5b                   	pop    ebx
c001674c:	5e                   	pop    esi
c001674d:	5f                   	pop    edi
c001674e:	5d                   	pop    ebp
c001674f:	c3                   	ret    

c0016750 <LogicalDisk::mount()>:
c0016750:	56                   	push   esi
c0016751:	53                   	push   ebx
c0016752:	51                   	push   ecx
c0016753:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016757:	8b 1d 98 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e698
c001675d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016767:	85 db                	test   ebx,ebx
c0016769:	74 50                	je     c00167bb <LogicalDisk::mount()+0x6b>
c001676b:	e8 3b 77 00 00       	call   c001deab <getIRQNestingLevel()>
c0016770:	52                   	push   edx
c0016771:	52                   	push   edx
c0016772:	50                   	push   eax
c0016773:	68 d4 b2 02 c0       	push   0xc002b2d4
c0016778:	e8 a2 c8 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001677d:	83 c4 0c             	add    esp,0xc
c0016780:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016789:	83 e8 41             	sub    eax,0x41
c001678c:	50                   	push   eax
c001678d:	56                   	push   esi
c001678e:	53                   	push   ebx
c001678f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016792:	83 c4 10             	add    esp,0x10
c0016795:	84 c0                	test   al,al
c0016797:	74 08                	je     c00167a1 <LogicalDisk::mount()+0x51>
c0016799:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001679f:	eb 1c                	jmp    c00167bd <LogicalDisk::mount()+0x6d>
c00167a1:	e8 05 77 00 00       	call   c001deab <getIRQNestingLevel()>
c00167a6:	51                   	push   ecx
c00167a7:	51                   	push   ecx
c00167a8:	50                   	push   eax
c00167a9:	68 ef b2 02 c0       	push   0xc002b2ef
c00167ae:	e8 6c c8 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00167b3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	eb ac                	jmp    c0016767 <LogicalDisk::mount()+0x17>
c00167bb:	31 c0                	xor    eax,eax
c00167bd:	5a                   	pop    edx
c00167be:	5b                   	pop    ebx
c00167bf:	5e                   	pop    esi
c00167c0:	c3                   	ret    
c00167c1:	90                   	nop

c00167c2 <LogicalDisk::unmount()>:
c00167c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167c6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167d0:	c3                   	ret    
c00167d1:	90                   	nop

c00167d2 <LogicalDisk::eject()>:
c00167d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00167de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167e2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167e5:	90                   	nop

c00167e6 <LogicalDisk::unassignDriveLetter()>:
c00167e6:	57                   	push   edi
c00167e7:	56                   	push   esi
c00167e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167ec:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167f3:	84 c9                	test   cl,cl
c00167f5:	75 0f                	jne    c0016806 <LogicalDisk::unassignDriveLetter()+0x20>
c00167f7:	c7 44 24 0c 0a b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b30a
c00167ff:	5e                   	pop    esi
c0016800:	5f                   	pop    edi
c0016801:	e9 c7 3e 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>
c0016806:	83 e9 41             	sub    ecx,0x41
c0016809:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016810:	b8 01 00 00 00       	mov    eax,0x1
c0016815:	c7 04 8d 40 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd14c0],0x0
c0016820:	d3 e0                	shl    eax,cl
c0016822:	89 c7                	mov    edi,eax
c0016824:	f7 d0                	not    eax
c0016826:	c1 ff 1f             	sar    edi,0x1f
c0016829:	21 05 20 eb 02 c0    	and    DWORD PTR ds:0xc002eb20,eax
c001682f:	89 fe                	mov    esi,edi
c0016831:	f7 d6                	not    esi
c0016833:	21 35 24 eb 02 c0    	and    DWORD PTR ds:0xc002eb24,esi
c0016839:	5e                   	pop    esi
c001683a:	5f                   	pop    edi
c001683b:	c3                   	ret    

c001683c <LogicalDisk::read(unsigned long long, int, void*)>:
c001683c:	57                   	push   edi
c001683d:	56                   	push   esi
c001683e:	53                   	push   ebx
c001683f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016843:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016847:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001684b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001684f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016855:	77 41                	ja     c0016898 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016857:	99                   	cdq    
c0016858:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001685e:	01 c8                	add    eax,ecx
c0016860:	11 da                	adc    edx,ebx
c0016862:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016868:	19 d7                	sbb    edi,edx
c001686a:	72 33                	jb     c001689f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001686c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016872:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016878:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001687c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016880:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016886:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001688c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016890:	5b                   	pop    ebx
c0016891:	5e                   	pop    esi
c0016892:	5f                   	pop    edi
c0016893:	e9 b0 0a 00 00       	jmp    c0017348 <VCache::read(unsigned long long, int, void*)>
c0016898:	b8 05 00 00 00       	mov    eax,0x5
c001689d:	eb 05                	jmp    c00168a4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001689f:	b8 07 00 00 00       	mov    eax,0x7
c00168a4:	5b                   	pop    ebx
c00168a5:	5e                   	pop    esi
c00168a6:	5f                   	pop    edi
c00168a7:	c3                   	ret    

c00168a8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168a8:	57                   	push   edi
c00168a9:	56                   	push   esi
c00168aa:	53                   	push   ebx
c00168ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168bb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168c1:	77 41                	ja     c0016904 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168c3:	99                   	cdq    
c00168c4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168ca:	01 c8                	add    eax,ecx
c00168cc:	11 da                	adc    edx,ebx
c00168ce:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168d4:	19 d7                	sbb    edi,edx
c00168d6:	72 33                	jb     c001690b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168d8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168de:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168e8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168ec:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168fc:	5b                   	pop    ebx
c00168fd:	5e                   	pop    esi
c00168fe:	5f                   	pop    edi
c00168ff:	e9 4e 09 00 00       	jmp    c0017252 <VCache::write(unsigned long long, int, void*)>
c0016904:	b8 05 00 00 00       	mov    eax,0x5
c0016909:	eb 05                	jmp    c0016910 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001690b:	b8 07 00 00 00       	mov    eax,0x7
c0016910:	5b                   	pop    ebx
c0016911:	5e                   	pop    esi
c0016912:	5f                   	pop    edi
c0016913:	c3                   	ret    

c0016914 <Mouse::Mouse(char const*)>:
c0016914:	83 ec 0c             	sub    esp,0xc
c0016917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001691b:	83 ec 08             	sub    esp,0x8
c001691e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016922:	50                   	push   eax
c0016923:	e8 0e dd ff ff       	call   c0014636 <Device::Device(char const*)>
c0016928:	83 c4 10             	add    esp,0x10
c001692b:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0016930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016934:	89 10                	mov    DWORD PTR [eax],edx
c0016936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001693a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016944:	90                   	nop
c0016945:	83 c4 0c             	add    esp,0xc
c0016948:	c3                   	ret    
c0016949:	90                   	nop

c001694a <Mouse::~Mouse()>:
c001694a:	83 ec 0c             	sub    esp,0xc
c001694d:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0016952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016956:	89 10                	mov    DWORD PTR [eax],edx
c0016958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001695c:	83 ec 0c             	sub    esp,0xc
c001695f:	50                   	push   eax
c0016960:	e8 b3 d9 ff ff       	call   c0014318 <Device::~Device()>
c0016965:	83 c4 10             	add    esp,0x10
c0016968:	90                   	nop
c0016969:	83 c4 0c             	add    esp,0xc
c001696c:	c3                   	ret    
c001696d:	90                   	nop

c001696e <Mouse::~Mouse()>:
c001696e:	83 ec 0c             	sub    esp,0xc
c0016971:	83 ec 0c             	sub    esp,0xc
c0016974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016978:	e8 cd ff ff ff       	call   c001694a <Mouse::~Mouse()>
c001697d:	83 c4 10             	add    esp,0x10
c0016980:	83 ec 08             	sub    esp,0x8
c0016983:	68 58 01 00 00       	push   0x158
c0016988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001698c:	e8 ae c5 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0016991:	83 c4 10             	add    esp,0x10
c0016994:	83 c4 0c             	add    esp,0xc
c0016997:	c3                   	ret    

c0016998 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016998:	55                   	push   ebp
c0016999:	57                   	push   edi
c001699a:	56                   	push   esi
c001699b:	53                   	push   ebx
c001699c:	81 ec 28 01 00 00    	sub    esp,0x128
c00169a2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00169a9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00169b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169b7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169c6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169cd:	e8 60 dd ff ff       	call   c0014732 <Device::getName()>
c00169d2:	5a                   	pop    edx
c00169d3:	59                   	pop    ecx
c00169d4:	50                   	push   eax
c00169d5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169d9:	55                   	push   ebp
c00169da:	e8 55 9e fe ff       	call   c0000834 <strcpy>
c00169df:	5b                   	pop    ebx
c00169e0:	58                   	pop    eax
c00169e1:	68 84 b3 02 c0       	push   0xc002b384
c00169e6:	55                   	push   ebp
c00169e7:	e8 88 9f fe ff       	call   c0000974 <strcat>
c00169ec:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169f3:	e8 4b 8e ff ff       	call   c000f843 <malloc>
c00169f8:	83 c4 0c             	add    esp,0xc
c00169fb:	89 c3                	mov    ebx,eax
c00169fd:	57                   	push   edi
c00169fe:	56                   	push   esi
c00169ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a07:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a0e:	55                   	push   ebp
c0016a0f:	50                   	push   eax
c0016a10:	e8 cf fb ff ff       	call   c00165e4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a15:	83 c4 14             	add    esp,0x14
c0016a18:	53                   	push   ebx
c0016a19:	e8 7c fc ff ff       	call   c001669a <LogicalDisk::assignDriveLetter()>
c0016a1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a21:	89 c6                	mov    esi,eax
c0016a23:	e8 28 fd ff ff       	call   c0016750 <LogicalDisk::mount()>
c0016a28:	58                   	pop    eax
c0016a29:	5a                   	pop    edx
c0016a2a:	53                   	push   ebx
c0016a2b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a32:	e8 0f da ff ff       	call   c0014446 <Device::addChild(Device*)>
c0016a37:	59                   	pop    ecx
c0016a38:	89 f0                	mov    eax,esi
c0016a3a:	5b                   	pop    ebx
c0016a3b:	0f be f0             	movsx  esi,al
c0016a3e:	56                   	push   esi
c0016a3f:	68 8f b3 02 c0       	push   0xc002b38f
c0016a44:	e8 d6 c5 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0016a49:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a4f:	5b                   	pop    ebx
c0016a50:	5e                   	pop    esi
c0016a51:	5f                   	pop    edi
c0016a52:	5d                   	pop    ebp
c0016a53:	c3                   	ret    

c0016a54 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a54:	55                   	push   ebp
c0016a55:	57                   	push   edi
c0016a56:	56                   	push   esi
c0016a57:	53                   	push   ebx
c0016a58:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a5e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a65:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a6b:	3d 00 02 00 00       	cmp    eax,0x200
c0016a70:	74 27                	je     c0016a99 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a72:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a78:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a7e:	83 ec 10             	sub    esp,0x10
c0016a81:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a85:	99                   	cdq    
c0016a86:	c1 e6 0a             	shl    esi,0xa
c0016a89:	52                   	push   edx
c0016a8a:	89 fd                	mov    ebp,edi
c0016a8c:	50                   	push   eax
c0016a8d:	55                   	push   ebp
c0016a8e:	56                   	push   esi
c0016a8f:	e8 08 00 01 00       	call   c0026a9c <__udivdi3>
c0016a94:	e9 b1 00 00 00       	jmp    c0016b4a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a99:	83 ec 0c             	sub    esp,0xc
c0016a9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a9e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016aa2:	56                   	push   esi
c0016aa3:	6a 01                	push   0x1
c0016aa5:	6a 00                	push   0x0
c0016aa7:	6a 00                	push   0x0
c0016aa9:	53                   	push   ebx
c0016aaa:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016aad:	83 c4 20             	add    esp,0x20
c0016ab0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016ab8:	75 0a                	jne    c0016ac4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016aba:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016ac2:	74 2c                	je     c0016af0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016ac4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aca:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ad0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad6:	83 ec 10             	sub    esp,0x10
c0016ad9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016add:	89 f7                	mov    edi,esi
c0016adf:	c1 e0 0a             	shl    eax,0xa
c0016ae2:	c1 ff 1f             	sar    edi,0x1f
c0016ae5:	57                   	push   edi
c0016ae6:	56                   	push   esi
c0016ae7:	52                   	push   edx
c0016ae8:	50                   	push   eax
c0016ae9:	e8 ae ff 00 00       	call   c0026a9c <__udivdi3>
c0016aee:	eb 5a                	jmp    c0016b4a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016af0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016af7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016afe:	83 e1 7f             	and    ecx,0x7f
c0016b01:	83 e0 7f             	and    eax,0x7f
c0016b04:	01 c1                	add    ecx,eax
c0016b06:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b0d:	83 e0 7f             	and    eax,0x7f
c0016b10:	01 c1                	add    ecx,eax
c0016b12:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b19:	83 e0 7f             	and    eax,0x7f
c0016b1c:	00 c1                	add    cl,al
c0016b1e:	74 41                	je     c0016b61 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b20:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b26:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b2c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b32:	83 ec 10             	sub    esp,0x10
c0016b35:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b39:	89 f7                	mov    edi,esi
c0016b3b:	c1 e0 0a             	shl    eax,0xa
c0016b3e:	c1 ff 1f             	sar    edi,0x1f
c0016b41:	57                   	push   edi
c0016b42:	56                   	push   esi
c0016b43:	52                   	push   edx
c0016b44:	50                   	push   eax
c0016b45:	e8 52 ff 00 00       	call   c0026a9c <__udivdi3>
c0016b4a:	83 c4 14             	add    esp,0x14
c0016b4d:	52                   	push   edx
c0016b4e:	50                   	push   eax
c0016b4f:	6a 00                	push   0x0
c0016b51:	6a 00                	push   0x0
c0016b53:	53                   	push   ebx
c0016b54:	e8 3f fe ff ff       	call   c0016998 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b59:	83 c4 20             	add    esp,0x20
c0016b5c:	e9 79 01 00 00       	jmp    c0016cda <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b61:	89 f0                	mov    eax,esi
c0016b63:	31 f6                	xor    esi,esi
c0016b65:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b6c:	75 02                	jne    c0016b70 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b6e:	89 f1                	mov    ecx,esi
c0016b70:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b77:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b7e:	c1 e2 08             	shl    edx,0x8
c0016b81:	c1 e7 10             	shl    edi,0x10
c0016b84:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b8c:	09 fa                	or     edx,edi
c0016b8e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b96:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b9d:	83 c0 10             	add    eax,0x10
c0016ba0:	09 fa                	or     edx,edi
c0016ba2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016ba9:	c1 e7 18             	shl    edi,0x18
c0016bac:	09 fa                	or     edx,edi
c0016bae:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016bb5:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016bb9:	c1 e7 10             	shl    edi,0x10
c0016bbc:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016bc3:	c1 e2 08             	shl    edx,0x8
c0016bc6:	09 fa                	or     edx,edi
c0016bc8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016bcf:	09 fa                	or     edx,edi
c0016bd1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016bd8:	c1 e7 18             	shl    edi,0x18
c0016bdb:	09 fa                	or     edx,edi
c0016bdd:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016be1:	46                   	inc    esi
c0016be2:	83 fe 04             	cmp    esi,0x4
c0016be5:	0f 85 7a ff ff ff    	jne    c0016b65 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bef:	83 f0 01             	xor    eax,0x1
c0016bf2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bf6:	75 57                	jne    c0016c4f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bfc:	83 f0 01             	xor    eax,0x1
c0016bff:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c03:	75 4a                	jne    c0016c4f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c05:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c09:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c19:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c1f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c25:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c2b:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c2f:	89 f7                	mov    edi,esi
c0016c31:	c1 e0 0a             	shl    eax,0xa
c0016c34:	c1 ff 1f             	sar    edi,0x1f
c0016c37:	57                   	push   edi
c0016c38:	56                   	push   esi
c0016c39:	52                   	push   edx
c0016c3a:	50                   	push   eax
c0016c3b:	e8 5c fe 00 00       	call   c0026a9c <__udivdi3>
c0016c40:	83 c4 10             	add    esp,0x10
c0016c43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c47:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c4b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c4f:	84 c9                	test   cl,cl
c0016c51:	74 53                	je     c0016ca6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c53:	0f b6 c9             	movzx  ecx,cl
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c5e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c62:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c66:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c6e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c72:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c86:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c8a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c8e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c92:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c9e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016ca2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016ca6:	31 ed                	xor    ebp,ebp
c0016ca8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016cac:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cb0:	89 f8                	mov    eax,edi
c0016cb2:	09 f0                	or     eax,esi
c0016cb4:	74 1e                	je     c0016cd4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cb6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016cba:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016cbe:	89 d1                	mov    ecx,edx
c0016cc0:	09 c1                	or     ecx,eax
c0016cc2:	74 10                	je     c0016cd4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cc4:	83 ec 0c             	sub    esp,0xc
c0016cc7:	57                   	push   edi
c0016cc8:	56                   	push   esi
c0016cc9:	52                   	push   edx
c0016cca:	50                   	push   eax
c0016ccb:	53                   	push   ebx
c0016ccc:	e8 c7 fc ff ff       	call   c0016998 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016cd1:	83 c4 20             	add    esp,0x20
c0016cd4:	45                   	inc    ebp
c0016cd5:	83 fd 04             	cmp    ebp,0x4
c0016cd8:	75 ce                	jne    c0016ca8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016cda:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016ce0:	5b                   	pop    ebx
c0016ce1:	5e                   	pop    esi
c0016ce2:	5f                   	pop    edi
c0016ce3:	5d                   	pop    ebp
c0016ce4:	c3                   	ret    
c0016ce5:	90                   	nop

c0016ce6 <Serial::Serial(char const*)>:
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ced:	83 ec 08             	sub    esp,0x8
c0016cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf4:	50                   	push   eax
c0016cf5:	e8 3c d9 ff ff       	call   c0014636 <Device::Device(char const*)>
c0016cfa:	83 c4 10             	add    esp,0x10
c0016cfd:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0016d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d06:	89 10                	mov    DWORD PTR [eax],edx
c0016d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d0c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d16:	90                   	nop
c0016d17:	83 c4 0c             	add    esp,0xc
c0016d1a:	c3                   	ret    
c0016d1b:	90                   	nop

c0016d1c <Serial::~Serial()>:
c0016d1c:	83 ec 0c             	sub    esp,0xc
c0016d1f:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0016d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d28:	89 10                	mov    DWORD PTR [eax],edx
c0016d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d2e:	83 ec 0c             	sub    esp,0xc
c0016d31:	50                   	push   eax
c0016d32:	e8 e1 d5 ff ff       	call   c0014318 <Device::~Device()>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	90                   	nop
c0016d3b:	83 c4 0c             	add    esp,0xc
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <Serial::~Serial()>:
c0016d40:	83 ec 0c             	sub    esp,0xc
c0016d43:	83 ec 0c             	sub    esp,0xc
c0016d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d4a:	e8 cd ff ff ff       	call   c0016d1c <Serial::~Serial()>
c0016d4f:	83 c4 10             	add    esp,0x10
c0016d52:	83 ec 08             	sub    esp,0x8
c0016d55:	68 58 01 00 00       	push   0x158
c0016d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5e:	e8 dc c1 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 c4 0c             	add    esp,0xc
c0016d69:	c3                   	ret    

c0016d6a <Timer::Timer(char const*)>:
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d71:	83 ec 08             	sub    esp,0x8
c0016d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d78:	50                   	push   eax
c0016d79:	e8 b8 d8 ff ff       	call   c0014636 <Device::Device(char const*)>
c0016d7e:	83 c4 10             	add    esp,0x10
c0016d81:	ba 00 b4 02 c0       	mov    edx,0xc002b400
c0016d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d8a:	89 10                	mov    DWORD PTR [eax],edx
c0016d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d90:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d9a:	90                   	nop
c0016d9b:	83 c4 0c             	add    esp,0xc
c0016d9e:	c3                   	ret    
c0016d9f:	90                   	nop

c0016da0 <Timer::~Timer()>:
c0016da0:	83 ec 0c             	sub    esp,0xc
c0016da3:	ba 00 b4 02 c0       	mov    edx,0xc002b400
c0016da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dac:	89 10                	mov    DWORD PTR [eax],edx
c0016dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016db2:	83 ec 0c             	sub    esp,0xc
c0016db5:	50                   	push   eax
c0016db6:	e8 5d d5 ff ff       	call   c0014318 <Device::~Device()>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	90                   	nop
c0016dbf:	83 c4 0c             	add    esp,0xc
c0016dc2:	c3                   	ret    
c0016dc3:	90                   	nop

c0016dc4 <Timer::~Timer()>:
c0016dc4:	83 ec 0c             	sub    esp,0xc
c0016dc7:	83 ec 0c             	sub    esp,0xc
c0016dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dce:	e8 cd ff ff ff       	call   c0016da0 <Timer::~Timer()>
c0016dd3:	83 c4 10             	add    esp,0x10
c0016dd6:	83 ec 08             	sub    esp,0x8
c0016dd9:	68 5c 01 00 00       	push   0x15c
c0016dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de2:	e8 58 c1 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	83 c4 0c             	add    esp,0xc
c0016ded:	c3                   	ret    

c0016dee <Timer::read()>:
c0016dee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016df8:	c3                   	ret    

c0016df9 <timerHandler(unsigned long long)>:
c0016df9:	55                   	push   ebp
c0016dfa:	57                   	push   edi
c0016dfb:	56                   	push   esi
c0016dfc:	53                   	push   ebx
c0016dfd:	83 ec 0c             	sub    esp,0xc
c0016e00:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e04:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e08:	01 35 b0 eb 02 c0    	add    DWORD PTR ds:0xc002ebb0,esi
c0016e0e:	11 3d b4 eb 02 c0    	adc    DWORD PTR ds:0xc002ebb4,edi
c0016e14:	80 3d 0d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e50d,0x0
c0016e1b:	0f 84 07 01 00 00    	je     c0016f28 <timerHandler(unsigned long long)+0x12f>
c0016e21:	e8 c1 70 00 00       	call   c001dee7 <lockStuff()>
c0016e26:	83 ec 0c             	sub    esp,0xc
c0016e29:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e2e:	e8 db 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e33:	c7 04 24 7c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a7c
c0016e3a:	89 c3                	mov    ebx,eax
c0016e3c:	e8 d5 1c 01 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	84 c0                	test   al,al
c0016e46:	74 60                	je     c0016ea8 <timerHandler(unsigned long long)+0xaf>
c0016e48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e4e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e51:	85 c0                	test   eax,eax
c0016e53:	0f 85 91 00 00 00    	jne    c0016eea <timerHandler(unsigned long long)+0xf1>
c0016e59:	e9 be 00 00 00       	jmp    c0016f1c <timerHandler(unsigned long long)+0x123>
c0016e5e:	83 ec 0c             	sub    esp,0xc
c0016e61:	55                   	push   ebp
c0016e62:	e8 71 76 00 00       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c0016e67:	83 c4 10             	add    esp,0x10
c0016e6a:	39 eb                	cmp    ebx,ebp
c0016e6c:	75 12                	jne    c0016e80 <timerHandler(unsigned long long)+0x87>
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e76:	e8 93 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e7b:	89 c3                	mov    ebx,eax
c0016e7d:	83 c4 10             	add    esp,0x10
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e88:	e8 89 1c 01 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e8d:	83 c4 10             	add    esp,0x10
c0016e90:	84 c0                	test   al,al
c0016e92:	75 b4                	jne    c0016e48 <timerHandler(unsigned long long)+0x4f>
c0016e94:	83 ec 0c             	sub    esp,0xc
c0016e97:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e9c:	e8 6d 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ea1:	83 c4 10             	add    esp,0x10
c0016ea4:	39 d8                	cmp    eax,ebx
c0016ea6:	74 a0                	je     c0016e48 <timerHandler(unsigned long long)+0x4f>
c0016ea8:	83 ec 0c             	sub    esp,0xc
c0016eab:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016eb0:	e8 59 1c 01 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016eb5:	c7 04 24 7c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a7c
c0016ebc:	89 c5                	mov    ebp,eax
c0016ebe:	e8 6f 1c 01 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ec3:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016ecc:	39 15 b0 eb 02 c0    	cmp    DWORD PTR ds:0xc002ebb0,edx
c0016ed2:	a1 b4 eb 02 c0       	mov    eax,ds:0xc002ebb4
c0016ed7:	19 c8                	sbb    eax,ecx
c0016ed9:	73 83                	jae    c0016e5e <timerHandler(unsigned long long)+0x65>
c0016edb:	50                   	push   eax
c0016edc:	50                   	push   eax
c0016edd:	55                   	push   ebp
c0016ede:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016ee3:	e8 f8 1c 01 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ee8:	eb 93                	jmp    c0016e7d <timerHandler(unsigned long long)+0x84>
c0016eea:	80 3d 0c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e50c,0x0
c0016ef1:	74 29                	je     c0016f1c <timerHandler(unsigned long long)+0x123>
c0016ef3:	39 c6                	cmp    esi,eax
c0016ef5:	bb 00 00 00 00       	mov    ebx,0x0
c0016efa:	19 df                	sbb    edi,ebx
c0016efc:	72 19                	jb     c0016f17 <timerHandler(unsigned long long)+0x11e>
c0016efe:	e8 bd 6f 00 00       	call   c001dec0 <lockScheduler()>
c0016f03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f08:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f0b:	e8 ec 72 00 00       	call   c001e1fc <schedule()>
c0016f10:	e8 ad 6f 00 00       	call   c001dec2 <unlockScheduler()>
c0016f15:	eb 05                	jmp    c0016f1c <timerHandler(unsigned long long)+0x123>
c0016f17:	29 f0                	sub    eax,esi
c0016f19:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016f1c:	83 c4 0c             	add    esp,0xc
c0016f1f:	5b                   	pop    ebx
c0016f20:	5e                   	pop    esi
c0016f21:	5f                   	pop    edi
c0016f22:	5d                   	pop    ebp
c0016f23:	e9 59 73 00 00       	jmp    c001e281 <unlockStuff()>
c0016f28:	83 c4 0c             	add    esp,0xc
c0016f2b:	5b                   	pop    ebx
c0016f2c:	5e                   	pop    esi
c0016f2d:	5f                   	pop    edi
c0016f2e:	5d                   	pop    ebp
c0016f2f:	c3                   	ret    

c0016f30 <setupTimer(int)>:
c0016f30:	57                   	push   edi
c0016f31:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0016f36:	56                   	push   esi
c0016f37:	53                   	push   ebx
c0016f38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f42:	83 ec 0c             	sub    esp,0xc
c0016f45:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f4b:	e8 e2 d7 ff ff       	call   c0014732 <Device::getName()>
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f56:	0f 85 8d 00 00 00    	jne    c0016fe9 <setupTimer(int)+0xb9>
c0016f5c:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0016f61:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f68:	74 7f                	je     c0016fe9 <setupTimer(int)+0xb9>
c0016f6a:	83 ec 0c             	sub    esp,0xc
c0016f6d:	68 5c 01 00 00       	push   0x15c
c0016f72:	e8 cc 88 ff ff       	call   c000f843 <malloc>
c0016f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f7a:	89 c3                	mov    ebx,eax
c0016f7c:	e8 f9 f6 00 00       	call   c002667a <PIT::PIT()>
c0016f81:	59                   	pop    ecx
c0016f82:	5f                   	pop    edi
c0016f83:	53                   	push   ebx
c0016f84:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c0016f8a:	e8 b7 d4 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0016f8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f91:	6a 00                	push   0x0
c0016f93:	6a 00                	push   0x0
c0016f95:	56                   	push   esi
c0016f96:	53                   	push   ebx
c0016f97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f9a:	83 c4 14             	add    esp,0x14
c0016f9d:	68 60 01 00 00       	push   0x160
c0016fa2:	e8 9c 88 ff ff       	call   c000f843 <malloc>
c0016fa7:	89 04 24             	mov    DWORD PTR [esp],eax
c0016faa:	89 c7                	mov    edi,eax
c0016fac:	e8 79 f5 00 00       	call   c002652a <APICTimer::APICTimer()>
c0016fb1:	6a 00                	push   0x0
c0016fb3:	6a 00                	push   0x0
c0016fb5:	56                   	push   esi
c0016fb6:	57                   	push   edi
c0016fb7:	e8 70 f4 00 00       	call   c002642c <APICTimer::open(int, int, void*)>
c0016fbc:	83 c4 20             	add    esp,0x20
c0016fbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fc1:	6a 00                	push   0x0
c0016fc3:	6a 00                	push   0x0
c0016fc5:	6a 00                	push   0x0
c0016fc7:	53                   	push   ebx
c0016fc8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fcb:	58                   	pop    eax
c0016fcc:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0016fd1:	5a                   	pop    edx
c0016fd2:	57                   	push   edi
c0016fd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fd9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fdf:	e8 62 d4 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	eb 33                	jmp    c001701c <setupTimer(int)+0xec>
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	68 5c 01 00 00       	push   0x15c
c0016ff1:	e8 4d 88 ff ff       	call   c000f843 <malloc>
c0016ff6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ff9:	89 c3                	mov    ebx,eax
c0016ffb:	e8 7a f6 00 00       	call   c002667a <PIT::PIT()>
c0017000:	58                   	pop    eax
c0017001:	5a                   	pop    edx
c0017002:	53                   	push   ebx
c0017003:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c0017009:	e8 38 d4 ff ff       	call   c0014446 <Device::addChild(Device*)>
c001700e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017010:	6a 00                	push   0x0
c0017012:	6a 00                	push   0x0
c0017014:	56                   	push   esi
c0017015:	53                   	push   ebx
c0017016:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017019:	83 c4 20             	add    esp,0x20
c001701c:	89 d8                	mov    eax,ebx
c001701e:	5b                   	pop    ebx
c001701f:	5e                   	pop    esi
c0017020:	5f                   	pop    edi
c0017021:	c3                   	ret    

c0017022 <VCache::VCache(PhysicalDisk*)>:
c0017022:	53                   	push   ebx
c0017023:	83 ec 18             	sub    esp,0x18
c0017026:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c001702b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702f:	89 10                	mov    DWORD PTR [eax],edx
c0017031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017035:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001703c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017040:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017052:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017059:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017064:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001706b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001707e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017082:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017089:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017094:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017098:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001709c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c00170a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00170b3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00170bb:	83 ec 0c             	sub    esp,0xc
c00170be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170c2:	e8 7c 87 ff ff       	call   c000f843 <malloc>
c00170c7:	83 c4 10             	add    esp,0x10
c00170ca:	89 c3                	mov    ebx,eax
c00170cc:	83 ec 0c             	sub    esp,0xc
c00170cf:	53                   	push   ebx
c00170d0:	e8 0b 6f 00 00       	call   c001dfe0 <Mutex::Mutex()>
c00170d5:	83 c4 10             	add    esp,0x10
c00170d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170dc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ee:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f9:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017103:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017106:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001710a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017110:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017116:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001711a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001711d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017124:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017128:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001712c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017132:	05 00 01 00 00       	add    eax,0x100
c0017137:	c1 e0 04             	shl    eax,0x4
c001713a:	83 ec 0c             	sub    esp,0xc
c001713d:	50                   	push   eax
c001713e:	e8 00 87 ff ff       	call   c000f843 <malloc>
c0017143:	83 c4 10             	add    esp,0x10
c0017146:	89 c2                	mov    edx,eax
c0017148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001714c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001714f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017153:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001715a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017162:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017166:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001716c:	c1 e0 07             	shl    eax,0x7
c001716f:	83 ec 0c             	sub    esp,0xc
c0017172:	50                   	push   eax
c0017173:	e8 cb 86 ff ff       	call   c000f843 <malloc>
c0017178:	83 c4 10             	add    esp,0x10
c001717b:	89 c2                	mov    edx,eax
c001717d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017181:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017184:	90                   	nop
c0017185:	83 c4 18             	add    esp,0x18
c0017188:	5b                   	pop    ebx
c0017189:	c3                   	ret    

c001718a <VCache::invalidateReadBuffer()>:
c001718a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001718e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017194:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017198:	c3                   	ret    
c0017199:	90                   	nop

c001719a <VCache::writeWriteBuffer()>:
c001719a:	53                   	push   ebx
c001719b:	83 ec 14             	sub    esp,0x14
c001719e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00171a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00171a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00171a7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00171aa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00171ad:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00171b0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00171b3:	50                   	push   eax
c00171b4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00171b7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171be:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171c5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171c9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171d0:	83 c4 28             	add    esp,0x28
c00171d3:	5b                   	pop    ebx
c00171d4:	c3                   	ret    
c00171d5:	90                   	nop

c00171d6 <VCache::~VCache()>:
c00171d6:	83 ec 0c             	sub    esp,0xc
c00171d9:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c00171de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e2:	89 10                	mov    DWORD PTR [eax],edx
c00171e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171eb:	84 c0                	test   al,al
c00171ed:	74 0f                	je     c00171fe <VCache::~VCache()+0x28>
c00171ef:	83 ec 0c             	sub    esp,0xc
c00171f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171f6:	e8 9f ff ff ff       	call   c001719a <VCache::writeWriteBuffer()>
c00171fb:	83 c4 10             	add    esp,0x10
c00171fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017202:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0017205:	83 ec 0c             	sub    esp,0xc
c0017208:	50                   	push   eax
c0017209:	e8 45 86 ff ff       	call   c000f853 <free>
c001720e:	83 c4 10             	add    esp,0x10
c0017211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017215:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	50                   	push   eax
c001721c:	e8 32 86 ff ff       	call   c000f853 <free>
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	90                   	nop
c0017225:	83 c4 0c             	add    esp,0xc
c0017228:	c3                   	ret    
c0017229:	90                   	nop

c001722a <VCache::~VCache()>:
c001722a:	83 ec 0c             	sub    esp,0xc
c001722d:	83 ec 0c             	sub    esp,0xc
c0017230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017234:	e8 9d ff ff ff       	call   c00171d6 <VCache::~VCache()>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	83 ec 08             	sub    esp,0x8
c001723f:	6a 44                	push   0x44
c0017241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017245:	e8 f5 bc ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c001724a:	83 c4 10             	add    esp,0x10
c001724d:	83 c4 0c             	add    esp,0xc
c0017250:	c3                   	ret    
c0017251:	90                   	nop

c0017252 <VCache::write(unsigned long long, int, void*)>:
c0017252:	55                   	push   ebp
c0017253:	57                   	push   edi
c0017254:	56                   	push   esi
c0017255:	53                   	push   ebx
c0017256:	83 ec 28             	sub    esp,0x28
c0017259:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001725d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017261:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017265:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017269:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001726c:	e8 d1 71 00 00       	call   c001e442 <Semaphore::acquire()>
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017278:	74 0c                	je     c0017286 <VCache::write(unsigned long long, int, void*)+0x34>
c001727a:	83 ec 0c             	sub    esp,0xc
c001727d:	53                   	push   ebx
c001727e:	e8 07 ff ff ff       	call   c001718a <VCache::invalidateReadBuffer()>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001728a:	74 66                	je     c00172f2 <VCache::write(unsigned long long, int, void*)+0xa0>
c001728c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001728f:	99                   	cdq    
c0017290:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017294:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017297:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001729a:	89 c1                	mov    ecx,eax
c001729c:	89 d0                	mov    eax,edx
c001729e:	31 f1                	xor    ecx,esi
c00172a0:	31 f8                	xor    eax,edi
c00172a2:	89 ca                	mov    edx,ecx
c00172a4:	09 c2                	or     edx,eax
c00172a6:	75 3e                	jne    c00172e6 <VCache::write(unsigned long long, int, void*)+0x94>
c00172a8:	83 fd 01             	cmp    ebp,0x1
c00172ab:	75 39                	jne    c00172e6 <VCache::write(unsigned long long, int, void*)+0x94>
c00172ad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00172b6:	51                   	push   ecx
c00172b7:	50                   	push   eax
c00172b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00172c0:	0f af c8             	imul   ecx,eax
c00172c3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00172c6:	51                   	push   ecx
c00172c7:	e8 78 94 fe ff       	call   c0000744 <memcpy>
c00172cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172cf:	83 c4 10             	add    esp,0x10
c00172d2:	40                   	inc    eax
c00172d3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172d6:	83 c0 80             	add    eax,0xffffff80
c00172d9:	75 57                	jne    c0017332 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172db:	83 ec 0c             	sub    esp,0xc
c00172de:	53                   	push   ebx
c00172df:	e8 b6 fe ff ff       	call   c001719a <VCache::writeWriteBuffer()>
c00172e4:	eb 34                	jmp    c001731a <VCache::write(unsigned long long, int, void*)+0xc8>
c00172e6:	83 ec 0c             	sub    esp,0xc
c00172e9:	53                   	push   ebx
c00172ea:	e8 ab fe ff ff       	call   c001719a <VCache::writeWriteBuffer()>
c00172ef:	83 c4 10             	add    esp,0x10
c00172f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172f5:	83 fd 7f             	cmp    ebp,0x7f
c00172f8:	7f 25                	jg     c001731f <VCache::write(unsigned long long, int, void*)+0xcd>
c00172fa:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172fd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017300:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0017303:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0017307:	52                   	push   edx
c0017308:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001730e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017312:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017315:	e8 2a 94 fe ff       	call   c0000744 <memcpy>
c001731a:	83 c4 10             	add    esp,0x10
c001731d:	eb 13                	jmp    c0017332 <VCache::write(unsigned long long, int, void*)+0xe0>
c001731f:	83 ec 0c             	sub    esp,0xc
c0017322:	8b 10                	mov    edx,DWORD PTR [eax]
c0017324:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017328:	55                   	push   ebp
c0017329:	57                   	push   edi
c001732a:	56                   	push   esi
c001732b:	50                   	push   eax
c001732c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001732f:	83 c4 20             	add    esp,0x20
c0017332:	83 ec 0c             	sub    esp,0xc
c0017335:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017338:	e8 b3 76 00 00       	call   c001e9f0 <Semaphore::release()>
c001733d:	83 c4 2c             	add    esp,0x2c
c0017340:	31 c0                	xor    eax,eax
c0017342:	5b                   	pop    ebx
c0017343:	5e                   	pop    esi
c0017344:	5f                   	pop    edi
c0017345:	5d                   	pop    ebp
c0017346:	c3                   	ret    
c0017347:	90                   	nop

c0017348 <VCache::read(unsigned long long, int, void*)>:
c0017348:	55                   	push   ebp
c0017349:	57                   	push   edi
c001734a:	56                   	push   esi
c001734b:	53                   	push   ebx
c001734c:	83 ec 28             	sub    esp,0x28
c001734f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017353:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017357:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001735b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001735f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017363:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017367:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001736b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001736e:	e8 cf 70 00 00       	call   c001e442 <Semaphore::acquire()>
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001737a:	74 0c                	je     c0017388 <VCache::read(unsigned long long, int, void*)+0x40>
c001737c:	83 ec 0c             	sub    esp,0xc
c001737f:	53                   	push   ebx
c0017380:	e8 15 fe ff ff       	call   c001719a <VCache::writeWriteBuffer()>
c0017385:	83 c4 10             	add    esp,0x10
c0017388:	83 fe 01             	cmp    esi,0x1
c001738b:	0f 85 80 00 00 00    	jne    c0017411 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017391:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017394:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001739b:	75 74                	jne    c0017411 <VCache::read(unsigned long long, int, void*)+0xc9>
c001739d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173a0:	89 d1                	mov    ecx,edx
c00173a2:	f7 d9                	neg    ecx
c00173a4:	89 cf                	mov    edi,ecx
c00173a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00173aa:	c1 ff 1f             	sar    edi,0x1f
c00173ad:	23 0c 24             	and    ecx,DWORD PTR [esp]
c00173b0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00173b4:	89 ce                	mov    esi,ecx
c00173b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173ba:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c00173be:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00173c2:	89 cf                	mov    edi,ecx
c00173c4:	74 0a                	je     c00173d0 <VCache::read(unsigned long long, int, void*)+0x88>
c00173c6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00173c9:	75 05                	jne    c00173d0 <VCache::read(unsigned long long, int, void*)+0x88>
c00173cb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c00173ce:	74 1c                	je     c00173ec <VCache::read(unsigned long long, int, void*)+0xa4>
c00173d0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173d4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173d7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173da:	83 ec 0c             	sub    esp,0xc
c00173dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173df:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173e2:	52                   	push   edx
c00173e3:	57                   	push   edi
c00173e4:	56                   	push   esi
c00173e5:	50                   	push   eax
c00173e6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173e9:	83 c4 20             	add    esp,0x20
c00173ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ef:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173f5:	50                   	push   eax
c00173f6:	52                   	push   edx
c00173f7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173fa:	48                   	dec    eax
c00173fb:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173ff:	0f af c2             	imul   eax,edx
c0017402:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0017405:	50                   	push   eax
c0017406:	55                   	push   ebp
c0017407:	e8 38 93 fe ff       	call   c0000744 <memcpy>
c001740c:	83 c4 10             	add    esp,0x10
c001740f:	eb 21                	jmp    c0017432 <VCache::read(unsigned long long, int, void*)+0xea>
c0017411:	83 ec 0c             	sub    esp,0xc
c0017414:	53                   	push   ebx
c0017415:	e8 70 fd ff ff       	call   c001718a <VCache::invalidateReadBuffer()>
c001741a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001741d:	8b 10                	mov    edx,DWORD PTR [eax]
c001741f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017422:	56                   	push   esi
c0017423:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017427:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001742b:	50                   	push   eax
c001742c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001742f:	83 c4 20             	add    esp,0x20
c0017432:	83 ec 0c             	sub    esp,0xc
c0017435:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017438:	e8 b3 75 00 00       	call   c001e9f0 <Semaphore::release()>
c001743d:	83 c4 2c             	add    esp,0x2c
c0017440:	31 c0                	xor    eax,eax
c0017442:	5b                   	pop    ebx
c0017443:	5e                   	pop    esi
c0017444:	5f                   	pop    edi
c0017445:	5d                   	pop    ebp
c0017446:	c3                   	ret    
c0017447:	90                   	nop

c0017448 <Video::putrect(int, int, int, int, unsigned int)>:
c0017448:	55                   	push   ebp
c0017449:	57                   	push   edi
c001744a:	56                   	push   esi
c001744b:	53                   	push   ebx
c001744c:	83 ec 1c             	sub    esp,0x1c
c001744f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017453:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017457:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001745b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001745f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017467:	01 df                	add    edi,ebx
c0017469:	39 fb                	cmp    ebx,edi
c001746b:	7d 1f                	jge    c001748c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001746d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017471:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017475:	7d 12                	jge    c0017489 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017477:	8b 16                	mov    edx,DWORD PTR [esi]
c0017479:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001747d:	53                   	push   ebx
c001747e:	55                   	push   ebp
c001747f:	45                   	inc    ebp
c0017480:	56                   	push   esi
c0017481:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	eb e8                	jmp    c0017471 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017489:	43                   	inc    ebx
c001748a:	eb dd                	jmp    c0017469 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001748c:	83 c4 1c             	add    esp,0x1c
c001748f:	5b                   	pop    ebx
c0017490:	5e                   	pop    esi
c0017491:	5f                   	pop    edi
c0017492:	5d                   	pop    ebp
c0017493:	c3                   	ret    

c0017494 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017494:	55                   	push   ebp
c0017495:	57                   	push   edi
c0017496:	31 ff                	xor    edi,edi
c0017498:	56                   	push   esi
c0017499:	53                   	push   ebx
c001749a:	83 ec 1c             	sub    esp,0x1c
c001749d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00174a1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00174a5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00174ac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00174b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174b5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00174b9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174bd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00174c0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174c4:	01 f9                	add    ecx,edi
c00174c6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00174ca:	7d 2f                	jge    c00174fb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00174cc:	31 f6                	xor    esi,esi
c00174ce:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174d2:	01 f2                	add    edx,esi
c00174d4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174d8:	7d 1a                	jge    c00174f4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174dd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174e0:	46                   	inc    esi
c00174e1:	51                   	push   ecx
c00174e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174e6:	52                   	push   edx
c00174e7:	55                   	push   ebp
c00174e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174eb:	83 c4 10             	add    esp,0x10
c00174ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174f2:	eb da                	jmp    c00174ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174f4:	47                   	inc    edi
c00174f5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174f9:	eb c5                	jmp    c00174c0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174fb:	83 c4 1c             	add    esp,0x1c
c00174fe:	5b                   	pop    ebx
c00174ff:	5e                   	pop    esi
c0017500:	5f                   	pop    edi
c0017501:	5d                   	pop    ebp
c0017502:	c3                   	ret    
c0017503:	90                   	nop

c0017504 <Video::blit(unsigned int*, int, int, int, int)>:
c0017504:	55                   	push   ebp
c0017505:	57                   	push   edi
c0017506:	56                   	push   esi
c0017507:	53                   	push   ebx
c0017508:	83 ec 1c             	sub    esp,0x1c
c001750b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001750f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017513:	85 c0                	test   eax,eax
c0017515:	79 02                	jns    c0017519 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017517:	31 c0                	xor    eax,eax
c0017519:	c1 e0 02             	shl    eax,0x2
c001751c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017520:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017524:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017528:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001752c:	39 d8                	cmp    eax,ebx
c001752e:	7e 49                	jle    c0017579 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017530:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017536:	7c 41                	jl     c0017579 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017538:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001753c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017540:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017544:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017548:	39 f9                	cmp    ecx,edi
c001754a:	7e 22                	jle    c001756e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001754c:	83 c5 04             	add    ebp,0x4
c001754f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017555:	7c 14                	jl     c001756b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017557:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017559:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001755c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017560:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017564:	56                   	push   esi
c0017565:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017568:	83 c4 10             	add    esp,0x10
c001756b:	47                   	inc    edi
c001756c:	eb d2                	jmp    c0017540 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001756e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017572:	43                   	inc    ebx
c0017573:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017577:	eb ab                	jmp    c0017524 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017579:	83 c4 1c             	add    esp,0x1c
c001757c:	5b                   	pop    ebx
c001757d:	5e                   	pop    esi
c001757e:	5f                   	pop    edi
c001757f:	5d                   	pop    ebp
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <Video::clearScreen(unsigned int)>:
c0017582:	57                   	push   edi
c0017583:	56                   	push   esi
c0017584:	53                   	push   ebx
c0017585:	31 db                	xor    ebx,ebx
c0017587:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001758b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017591:	7e 1f                	jle    c00175b2 <Video::clearScreen(unsigned int)+0x30>
c0017593:	31 ff                	xor    edi,edi
c0017595:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001759b:	7e 12                	jle    c00175af <Video::clearScreen(unsigned int)+0x2d>
c001759d:	8b 06                	mov    eax,DWORD PTR [esi]
c001759f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175a3:	53                   	push   ebx
c00175a4:	57                   	push   edi
c00175a5:	47                   	inc    edi
c00175a6:	56                   	push   esi
c00175a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00175aa:	83 c4 10             	add    esp,0x10
c00175ad:	eb e6                	jmp    c0017595 <Video::clearScreen(unsigned int)+0x13>
c00175af:	43                   	inc    ebx
c00175b0:	eb d9                	jmp    c001758b <Video::clearScreen(unsigned int)+0x9>
c00175b2:	5b                   	pop    ebx
c00175b3:	5e                   	pop    esi
c00175b4:	5f                   	pop    edi
c00175b5:	c3                   	ret    

c00175b6 <Video::putpixel(int, int, unsigned int)>:
c00175b6:	c7 44 24 04 38 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b438
c00175be:	e9 0a 31 00 00       	jmp    c001a6cd <Krnl::panic(char const*)>
c00175c3:	90                   	nop

c00175c4 <Video::Video(char const*)>:
c00175c4:	83 ec 0c             	sub    esp,0xc
c00175c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175cb:	83 ec 08             	sub    esp,0x8
c00175ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d2:	50                   	push   eax
c00175d3:	e8 5e d0 ff ff       	call   c0014636 <Device::Device(char const*)>
c00175d8:	83 c4 10             	add    esp,0x10
c00175db:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c00175e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e4:	89 10                	mov    DWORD PTR [eax],edx
c00175e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175f4:	90                   	nop
c00175f5:	83 c4 0c             	add    esp,0xc
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop

c00175fa <Video::~Video()>:
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	ba bc b4 02 c0       	mov    edx,0xc002b4bc
c0017602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017606:	89 10                	mov    DWORD PTR [eax],edx
c0017608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760c:	83 ec 0c             	sub    esp,0xc
c001760f:	50                   	push   eax
c0017610:	e8 03 cd ff ff       	call   c0014318 <Device::~Device()>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	90                   	nop
c0017619:	83 c4 0c             	add    esp,0xc
c001761c:	c3                   	ret    
c001761d:	90                   	nop

c001761e <Video::~Video()>:
c001761e:	83 ec 0c             	sub    esp,0xc
c0017621:	83 ec 0c             	sub    esp,0xc
c0017624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017628:	e8 cd ff ff ff       	call   c00175fa <Video::~Video()>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	83 ec 08             	sub    esp,0x8
c0017633:	68 64 01 00 00       	push   0x164
c0017638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001763c:	e8 fe b8 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0017641:	83 c4 10             	add    esp,0x10
c0017644:	83 c4 0c             	add    esp,0xc
c0017647:	c3                   	ret    

c0017648 <Video::isMonochrome()>:
c0017648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001764c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017652:	c3                   	ret    
c0017653:	90                   	nop

c0017654 <Video::getWidth()>:
c0017654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017658:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001765e:	c3                   	ret    
c001765f:	90                   	nop

c0017660 <Video::getHeight()>:
c0017660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017664:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001766a:	c3                   	ret    
c001766b:	90                   	nop

c001766c <Video::drawCursor(int, int, unsigned char*, int)>:
c001766c:	55                   	push   ebp
c001766d:	57                   	push   edi
c001766e:	56                   	push   esi
c001766f:	53                   	push   ebx
c0017670:	83 ec 2c             	sub    esp,0x2c
c0017673:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017677:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001767b:	83 f8 01             	cmp    eax,0x1
c001767e:	19 c9                	sbb    ecx,ecx
c0017680:	31 db                	xor    ebx,ebx
c0017682:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017686:	89 cd                	mov    ebp,ecx
c0017688:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017690:	f7 d5                	not    ebp
c0017692:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017698:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001769c:	01 d8                	add    eax,ebx
c001769e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a2:	56                   	push   esi
c00176a3:	e8 b8 ff ff ff       	call   c0017660 <Video::getHeight()>
c00176a8:	59                   	pop    ecx
c00176a9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176ad:	7e 70                	jle    c001771f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00176af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176b3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176b7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00176ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00176c2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00176c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176cd:	89 f8                	mov    eax,edi
c00176cf:	83 c0 20             	add    eax,0x20
c00176d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176d6:	56                   	push   esi
c00176d7:	e8 78 ff ff ff       	call   c0017654 <Video::getWidth()>
c00176dc:	5a                   	pop    edx
c00176dd:	39 c7                	cmp    edi,eax
c00176df:	7d 34                	jge    c0017715 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176e1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176e6:	74 05                	je     c00176ed <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00176ea:	55                   	push   ebp
c00176eb:	eb 0d                	jmp    c00176fa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176ed:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176f2:	74 12                	je     c0017706 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00176f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176fe:	57                   	push   edi
c00176ff:	56                   	push   esi
c0017700:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017703:	83 c4 10             	add    esp,0x10
c0017706:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001770a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001770e:	47                   	inc    edi
c001770f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017713:	75 c1                	jne    c00176d6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017715:	43                   	inc    ebx
c0017716:	83 fb 20             	cmp    ebx,0x20
c0017719:	0f 85 79 ff ff ff    	jne    c0017698 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001771f:	83 c4 2c             	add    esp,0x2c
c0017722:	5b                   	pop    ebx
c0017723:	5e                   	pop    esi
c0017724:	5f                   	pop    edi
c0017725:	5d                   	pop    ebp
c0017726:	c3                   	ret    
c0017727:	90                   	nop

c0017728 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017728:	55                   	push   ebp
c0017729:	57                   	push   edi
c001772a:	56                   	push   esi
c001772b:	53                   	push   ebx
c001772c:	83 ec 28             	sub    esp,0x28
c001772f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017733:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017737:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001773b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001773f:	c1 e7 08             	shl    edi,0x8
c0017742:	01 c7                	add    edi,eax
c0017744:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017748:	c1 e0 08             	shl    eax,0x8
c001774b:	01 d0                	add    eax,edx
c001774d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017755:	0f af c7             	imul   eax,edi
c0017758:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001775f:	50                   	push   eax
c0017760:	e8 de 80 ff ff       	call   c000f843 <malloc>
c0017765:	83 c4 10             	add    esp,0x10
c0017768:	89 c5                	mov    ebp,eax
c001776a:	85 c0                	test   eax,eax
c001776c:	75 15                	jne    c0017783 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001776e:	83 ec 0c             	sub    esp,0xc
c0017771:	68 59 b4 02 c0       	push   0xc002b459
c0017776:	e8 a4 b8 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001777b:	83 c4 10             	add    esp,0x10
c001777e:	e9 1c 01 00 00       	jmp    c001789f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017783:	be 12 00 00 00       	mov    esi,0x12
c0017788:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001778c:	74 11                	je     c001779f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001778e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017792:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017796:	c1 fe 03             	sar    esi,0x3
c0017799:	0f af f0             	imul   esi,eax
c001779c:	83 c6 12             	add    esi,0x12
c001779f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00177a3:	74 04                	je     c00177a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00177a5:	85 ff                	test   edi,edi
c00177a7:	75 12                	jne    c00177bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00177a9:	83 ec 0c             	sub    esp,0xc
c00177ac:	68 70 b4 02 c0       	push   0xc002b470
c00177b1:	e8 69 b8 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00177b6:	e9 ce 00 00 00       	jmp    c0017889 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00177bb:	52                   	push   edx
c00177bc:	52                   	push   edx
c00177bd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00177c1:	50                   	push   eax
c00177c2:	68 85 b4 02 c0       	push   0xc002b485
c00177c7:	e8 53 b8 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00177cc:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	80 fa 02             	cmp    dl,0x2
c00177d6:	0f 85 98 00 00 00    	jne    c0017874 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177dc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177e1:	75 10                	jne    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177e3:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177e7:	75 0a                	jne    c00177f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177ec:	83 e8 18             	sub    eax,0x18
c00177ef:	a8 f7                	test   al,0xf7
c00177f1:	74 0a                	je     c00177fd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	68 92 b4 02 c0       	push   0xc002b492
c00177fb:	eb 7f                	jmp    c001787c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017805:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001780d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017811:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017819:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001781d:	75 0c                	jne    c001782b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001781f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017824:	c1 e0 18             	shl    eax,0x18
c0017827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001782b:	41                   	inc    ecx
c001782c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017831:	c1 e2 10             	shl    edx,0x10
c0017834:	89 d0                	mov    eax,edx
c0017836:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001783b:	c1 e2 08             	shl    edx,0x8
c001783e:	09 c2                	or     edx,eax
c0017840:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017844:	09 c2                	or     edx,eax
c0017846:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001784a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001784e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017852:	c1 f8 03             	sar    eax,0x3
c0017855:	01 c6                	add    esi,eax
c0017857:	89 c8                	mov    eax,ecx
c0017859:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001785d:	39 c7                	cmp    edi,eax
c001785f:	7f b0                	jg     c0017811 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017861:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017865:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017869:	39 14 24             	cmp    DWORD PTR [esp],edx
c001786c:	7e 22                	jle    c0017890 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001786e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017872:	eb 99                	jmp    c001780d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017874:	50                   	push   eax
c0017875:	50                   	push   eax
c0017876:	52                   	push   edx
c0017877:	68 a0 b4 02 c0       	push   0xc002b4a0
c001787c:	e8 9e b7 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0017881:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017884:	e8 ca 7f ff ff       	call   c000f853 <free>
c0017889:	83 c4 10             	add    esp,0x10
c001788c:	31 ed                	xor    ebp,ebp
c001788e:	eb 0f                	jmp    c001789f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017890:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017894:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017897:	89 38                	mov    DWORD PTR [eax],edi
c0017899:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001789d:	89 08                	mov    DWORD PTR [eax],ecx
c001789f:	83 c4 1c             	add    esp,0x1c
c00178a2:	89 e8                	mov    eax,ebp
c00178a4:	5b                   	pop    ebx
c00178a5:	5e                   	pop    esi
c00178a6:	5f                   	pop    edi
c00178a7:	5d                   	pop    ebp
c00178a8:	c3                   	ret    
c00178a9:	90                   	nop

c00178aa <Video::putTGA(int, int, unsigned char*, int)>:
c00178aa:	55                   	push   ebp
c00178ab:	57                   	push   edi
c00178ac:	56                   	push   esi
c00178ad:	53                   	push   ebx
c00178ae:	83 ec 28             	sub    esp,0x28
c00178b1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00178b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178b9:	50                   	push   eax
c00178ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00178be:	50                   	push   eax
c00178bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178c3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178c7:	56                   	push   esi
c00178c8:	e8 5b fe ff ff       	call   c0017728 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00178cd:	83 c4 20             	add    esp,0x20
c00178d0:	85 c0                	test   eax,eax
c00178d2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178d6:	74 35                	je     c001790d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178d8:	89 c7                	mov    edi,eax
c00178da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178e2:	39 d8                	cmp    eax,ebx
c00178e4:	7e 27                	jle    c001790d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178e6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178ee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178f2:	39 e8                	cmp    eax,ebp
c00178f4:	7e 14                	jle    c001790a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00178f8:	83 c7 04             	add    edi,0x4
c00178fb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178fe:	53                   	push   ebx
c00178ff:	55                   	push   ebp
c0017900:	45                   	inc    ebp
c0017901:	56                   	push   esi
c0017902:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017905:	83 c4 10             	add    esp,0x10
c0017908:	eb e0                	jmp    c00178ea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001790a:	43                   	inc    ebx
c001790b:	eb cd                	jmp    c00178da <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001790d:	83 c4 1c             	add    esp,0x1c
c0017910:	5b                   	pop    ebx
c0017911:	5e                   	pop    esi
c0017912:	5f                   	pop    edi
c0017913:	5d                   	pop    ebp
c0017914:	c3                   	ret    
c0017915:	90                   	nop

c0017916 <ACPI::close(int, int, void*)>:
c0017916:	83 ec 1c             	sub    esp,0x1c
c0017919:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017921:	74 0a                	je     c001792d <ACPI::close(int, int, void*)+0x17>
c0017923:	b8 00 00 00 00       	mov    eax,0x0
c0017928:	e9 9a 00 00 00       	jmp    c00179c7 <ACPI::close(int, int, void*)+0xb1>
c001792d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017932:	75 37                	jne    c001796b <ACPI::close(int, int, void*)+0x55>
c0017934:	83 ec 0c             	sub    esp,0xc
c0017937:	68 fc b4 02 c0       	push   0xc002b4fc
c001793c:	e8 de b6 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0017941:	83 c4 10             	add    esp,0x10
c0017944:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c0017949:	85 c0                	test   eax,eax
c001794b:	74 07                	je     c0017954 <ACPI::close(int, int, void*)+0x3e>
c001794d:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c0017952:	ff d0                	call   eax
c0017954:	83 ec 0c             	sub    esp,0xc
c0017957:	68 20 b6 02 c0       	push   0xc002b620
c001795c:	e8 6c 2d 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c0017961:	83 c4 10             	add    esp,0x10
c0017964:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017969:	eb 5c                	jmp    c00179c7 <ACPI::close(int, int, void*)+0xb1>
c001796b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017970:	75 50                	jne    c00179c2 <ACPI::close(int, int, void*)+0xac>
c0017972:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c0017977:	85 c0                	test   eax,eax
c0017979:	74 07                	je     c0017982 <ACPI::close(int, int, void*)+0x6c>
c001797b:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c0017980:	ff d0                	call   eax
c0017982:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017987:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001798c:	83 e0 02             	and    eax,0x2
c001798f:	74 1c                	je     c00179ad <ACPI::close(int, int, void*)+0x97>
c0017991:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017998:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001799c:	89 c2                	mov    edx,eax
c001799e:	ec                   	in     al,dx
c001799f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00179a3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00179a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179ab:	eb da                	jmp    c0017987 <ACPI::close(int, int, void*)+0x71>
c00179ad:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00179b4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00179b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00179bd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00179c1:	ee                   	out    dx,al
c00179c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179c7:	83 c4 1c             	add    esp,0x1c
c00179ca:	c3                   	ret    

c00179cb <findRSDP()>:
c00179cb:	83 ec 1c             	sub    esp,0x1c
c00179ce:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00179d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179d9:	83 e0 04             	and    eax,0x4
c00179dc:	84 c0                	test   al,al
c00179de:	75 07                	jne    c00179e7 <findRSDP()+0x1c>
c00179e0:	b8 00 00 00 00       	mov    eax,0x0
c00179e5:	eb 6a                	jmp    c0017a51 <findRSDP()+0x86>
c00179e7:	a1 54 e5 02 c0       	mov    eax,ds:0xc002e554
c00179ec:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179f1:	7f 1b                	jg     c0017a0e <findRSDP()+0x43>
c00179f3:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00179f8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179fe:	83 e2 fb             	and    edx,0xfffffffb
c0017a01:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a07:	b8 00 00 00 00       	mov    eax,0x0
c0017a0c:	eb 43                	jmp    c0017a51 <findRSDP()+0x86>
c0017a0e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a16:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017a1e:	77 2c                	ja     c0017a4c <findRSDP()+0x81>
c0017a20:	83 ec 04             	sub    esp,0x4
c0017a23:	6a 08                	push   0x8
c0017a25:	68 09 b5 02 c0       	push   0xc002b509
c0017a2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a2e:	e8 0d 8c fe ff       	call   c0000640 <memcmp>
c0017a33:	83 c4 10             	add    esp,0x10
c0017a36:	85 c0                	test   eax,eax
c0017a38:	0f 94 c0             	sete   al
c0017a3b:	84 c0                	test   al,al
c0017a3d:	74 06                	je     c0017a45 <findRSDP()+0x7a>
c0017a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a43:	eb 0c                	jmp    c0017a51 <findRSDP()+0x86>
c0017a45:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a4a:	eb ca                	jmp    c0017a16 <findRSDP()+0x4b>
c0017a4c:	b8 00 00 00 00       	mov    eax,0x0
c0017a51:	83 c4 1c             	add    esp,0x1c
c0017a54:	c3                   	ret    

c0017a55 <loadACPITables(unsigned char*)>:
c0017a55:	56                   	push   esi
c0017a56:	53                   	push   ebx
c0017a57:	83 ec 44             	sub    esp,0x44
c0017a5a:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017a5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a65:	83 e0 04             	and    eax,0x4
c0017a68:	84 c0                	test   al,al
c0017a6a:	0f 84 05 02 00 00    	je     c0017c75 <loadACPITables(unsigned char*)+0x220>
c0017a70:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017a75:	84 c0                	test   al,al
c0017a77:	74 75                	je     c0017aee <loadACPITables(unsigned char*)+0x99>
c0017a79:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a88:	83 e8 24             	sub    eax,0x24
c0017a8b:	c1 e8 03             	shr    eax,0x3
c0017a8e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a92:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a9e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017aa2:	0f 8d b2 00 00 00    	jge    c0017b5a <loadACPITables(unsigned char*)+0x105>
c0017aa8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017aac:	83 c0 24             	add    eax,0x24
c0017aaf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ab3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ab7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017abb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017abf:	c1 e0 03             	shl    eax,0x3
c0017ac2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017ac6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017aca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017acd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017acf:	89 c1                	mov    ecx,eax
c0017ad1:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017ad6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ad9:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c0017adf:	89 ca                	mov    edx,ecx
c0017ae1:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017ae8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017aec:	eb ac                	jmp    c0017a9a <loadACPITables(unsigned char*)+0x45>
c0017aee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017af2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017af6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017afa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017afd:	83 e8 24             	sub    eax,0x24
c0017b00:	c1 e8 02             	shr    eax,0x2
c0017b03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b07:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017b0f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b13:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b17:	7d 41                	jge    c0017b5a <loadACPITables(unsigned char*)+0x105>
c0017b19:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b1d:	83 c0 24             	add    eax,0x24
c0017b20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b30:	c1 e0 02             	shl    eax,0x2
c0017b33:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b3d:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017b42:	8d 50 01             	lea    edx,[eax+0x1]
c0017b45:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c0017b4b:	89 ca                	mov    edx,ecx
c0017b4d:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017b54:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b58:	eb b5                	jmp    c0017b0f <loadACPITables(unsigned char*)+0xba>
c0017b5a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b62:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017b67:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b6b:	0f 8d 05 01 00 00    	jge    c0017c76 <loadACPITables(unsigned char*)+0x221>
c0017b71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b75:	8b 04 c5 04 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3fc]
c0017b7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b8c:	25 ff 0f 00 00       	and    eax,0xfff
c0017b91:	89 c6                	mov    esi,eax
c0017b93:	e8 a8 a2 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017b98:	89 c3                	mov    ebx,eax
c0017b9a:	83 ec 0c             	sub    esp,0xc
c0017b9d:	6a 01                	push   0x1
c0017b9f:	e8 01 a0 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017ba4:	83 c4 10             	add    esp,0x10
c0017ba7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017bb1:	83 ec 0c             	sub    esp,0xc
c0017bb4:	6a 01                	push   0x1
c0017bb6:	6a 01                	push   0x1
c0017bb8:	50                   	push   eax
c0017bb9:	52                   	push   edx
c0017bba:	53                   	push   ebx
c0017bbb:	e8 b0 aa ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017bc0:	83 c4 20             	add    esp,0x20
c0017bc3:	09 f0                	or     eax,esi
c0017bc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bc9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bcd:	c1 e0 03             	shl    eax,0x3
c0017bd0:	05 00 0c 03 c0       	add    eax,0xc0030c00
c0017bd5:	83 ec 04             	sub    esp,0x4
c0017bd8:	6a 04                	push   0x4
c0017bda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bde:	50                   	push   eax
c0017bdf:	e8 60 8b fe ff       	call   c0000744 <memcpy>
c0017be4:	83 c4 10             	add    esp,0x10
c0017be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017beb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bf6:	05 00 10 00 00       	add    eax,0x1000
c0017bfb:	c1 e8 0c             	shr    eax,0xc
c0017bfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c06:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c0d:	25 ff 0f 00 00       	and    eax,0xfff
c0017c12:	89 c6                	mov    esi,eax
c0017c14:	e8 27 a2 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017c19:	89 c3                	mov    ebx,eax
c0017c1b:	83 ec 0c             	sub    esp,0xc
c0017c1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c22:	e8 7e 9f ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017c27:	83 c4 10             	add    esp,0x10
c0017c2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c2e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c34:	83 ec 0c             	sub    esp,0xc
c0017c37:	6a 01                	push   0x1
c0017c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c3d:	50                   	push   eax
c0017c3e:	52                   	push   edx
c0017c3f:	53                   	push   ebx
c0017c40:	e8 2b aa ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c45:	83 c4 20             	add    esp,0x20
c0017c48:	09 f0                	or     eax,esi
c0017c4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c4e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c51:	83 ec 0c             	sub    esp,0xc
c0017c54:	50                   	push   eax
c0017c55:	e8 bb a3 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c5a:	83 c4 10             	add    esp,0x10
c0017c5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c65:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017c6c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c70:	e9 ed fe ff ff       	jmp    c0017b62 <loadACPITables(unsigned char*)+0x10d>
c0017c75:	90                   	nop
c0017c76:	83 c4 44             	add    esp,0x44
c0017c79:	5b                   	pop    ebx
c0017c7a:	5e                   	pop    esi
c0017c7b:	c3                   	ret    

c0017c7c <findRSDT(unsigned char*)>:
c0017c7c:	56                   	push   esi
c0017c7d:	53                   	push   ebx
c0017c7e:	83 ec 44             	sub    esp,0x44
c0017c81:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017c86:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c8c:	83 e0 04             	and    eax,0x4
c0017c8f:	84 c0                	test   al,al
c0017c91:	75 0a                	jne    c0017c9d <findRSDT(unsigned char*)+0x21>
c0017c93:	b8 00 00 00 00       	mov    eax,0x0
c0017c98:	e9 f7 00 00 00       	jmp    c0017d94 <findRSDT(unsigned char*)+0x118>
c0017c9d:	83 ec 04             	sub    esp,0x4
c0017ca0:	6a 24                	push   0x24
c0017ca2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017ca6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017caa:	50                   	push   eax
c0017cab:	e8 94 8a fe ff       	call   c0000744 <memcpy>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017cb7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017cbb:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017cc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ccb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ccf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cd3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cdb:	25 ff 0f 00 00       	and    eax,0xfff
c0017ce0:	89 c6                	mov    esi,eax
c0017ce2:	e8 59 a1 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017ce7:	89 c3                	mov    ebx,eax
c0017ce9:	83 ec 0c             	sub    esp,0xc
c0017cec:	6a 02                	push   0x2
c0017cee:	e8 b2 9e ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017cf3:	83 c4 10             	add    esp,0x10
c0017cf6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017cfa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d00:	83 ec 0c             	sub    esp,0xc
c0017d03:	6a 01                	push   0x1
c0017d05:	6a 02                	push   0x2
c0017d07:	50                   	push   eax
c0017d08:	52                   	push   edx
c0017d09:	53                   	push   ebx
c0017d0a:	e8 61 a9 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d0f:	83 c4 20             	add    esp,0x20
c0017d12:	09 f0                	or     eax,esi
c0017d14:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d1c:	25 ff 0f 00 00       	and    eax,0xfff
c0017d21:	89 c6                	mov    esi,eax
c0017d23:	e8 18 a1 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0017d28:	89 c3                	mov    ebx,eax
c0017d2a:	83 ec 0c             	sub    esp,0xc
c0017d2d:	6a 02                	push   0x2
c0017d2f:	e8 71 9e ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d3b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d41:	83 ec 0c             	sub    esp,0xc
c0017d44:	6a 01                	push   0x1
c0017d46:	6a 02                	push   0x2
c0017d48:	50                   	push   eax
c0017d49:	52                   	push   edx
c0017d4a:	53                   	push   ebx
c0017d4b:	e8 20 a9 ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d50:	83 c4 20             	add    esp,0x20
c0017d53:	09 f0                	or     eax,esi
c0017d55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d59:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d5e:	75 11                	jne    c0017d71 <findRSDT(unsigned char*)+0xf5>
c0017d60:	c6 05 00 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e00,0x0
c0017d67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d6b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d6f:	eb 1f                	jmp    c0017d90 <findRSDT(unsigned char*)+0x114>
c0017d71:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d76:	75 11                	jne    c0017d89 <findRSDT(unsigned char*)+0x10d>
c0017d78:	c6 05 00 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e00,0x1
c0017d7f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d83:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d87:	eb 07                	jmp    c0017d90 <findRSDT(unsigned char*)+0x114>
c0017d89:	b8 00 00 00 00       	mov    eax,0x0
c0017d8e:	eb 04                	jmp    c0017d94 <findRSDT(unsigned char*)+0x118>
c0017d90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d94:	83 c4 44             	add    esp,0x44
c0017d97:	5b                   	pop    ebx
c0017d98:	5e                   	pop    esi
c0017d99:	c3                   	ret    

c0017d9a <findDataTable(unsigned char*, char*)>:
c0017d9a:	83 ec 1c             	sub    esp,0x1c
c0017d9d:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017da2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017da8:	83 e0 04             	and    eax,0x4
c0017dab:	84 c0                	test   al,al
c0017dad:	75 07                	jne    c0017db6 <findDataTable(unsigned char*, char*)+0x1c>
c0017daf:	b8 00 00 00 00       	mov    eax,0x0
c0017db4:	eb 7c                	jmp    c0017e32 <findDataTable(unsigned char*, char*)+0x98>
c0017db6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017dbe:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017dc3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017dc7:	7d 3a                	jge    c0017e03 <findDataTable(unsigned char*, char*)+0x69>
c0017dc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dcd:	c1 e0 03             	shl    eax,0x3
c0017dd0:	05 00 0c 03 c0       	add    eax,0xc0030c00
c0017dd5:	83 ec 04             	sub    esp,0x4
c0017dd8:	6a 04                	push   0x4
c0017dda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dde:	50                   	push   eax
c0017ddf:	e8 5c 88 fe ff       	call   c0000640 <memcmp>
c0017de4:	83 c4 10             	add    esp,0x10
c0017de7:	85 c0                	test   eax,eax
c0017de9:	0f 94 c0             	sete   al
c0017dec:	84 c0                	test   al,al
c0017dee:	74 0d                	je     c0017dfd <findDataTable(unsigned char*, char*)+0x63>
c0017df0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017df4:	8b 04 c5 04 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3fc]
c0017dfb:	eb 35                	jmp    c0017e32 <findDataTable(unsigned char*, char*)+0x98>
c0017dfd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e01:	eb bb                	jmp    c0017dbe <findDataTable(unsigned char*, char*)+0x24>
c0017e03:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017e08:	84 c0                	test   al,al
c0017e0a:	74 07                	je     c0017e13 <findDataTable(unsigned char*, char*)+0x79>
c0017e0c:	b8 58 00 00 00       	mov    eax,0x58
c0017e11:	eb 05                	jmp    c0017e18 <findDataTable(unsigned char*, char*)+0x7e>
c0017e13:	b8 52 00 00 00       	mov    eax,0x52
c0017e18:	83 ec 04             	sub    esp,0x4
c0017e1b:	50                   	push   eax
c0017e1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e20:	68 44 b6 02 c0       	push   0xc002b644
c0017e25:	e8 f5 b1 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0017e2a:	83 c4 10             	add    esp,0x10
c0017e2d:	b8 00 00 00 00       	mov    eax,0x0
c0017e32:	83 c4 1c             	add    esp,0x1c
c0017e35:	c3                   	ret    

c0017e36 <scanMADT()>:
c0017e36:	53                   	push   ebx
c0017e37:	83 ec 38             	sub    esp,0x38
c0017e3a:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017e3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e45:	83 e0 04             	and    eax,0x4
c0017e48:	84 c0                	test   al,al
c0017e4a:	0f 84 63 04 00 00    	je     c00182b3 <scanMADT()+0x47d>
c0017e50:	e8 76 fb ff ff       	call   c00179cb <findRSDP()>
c0017e55:	a3 0c 0e 03 c0       	mov    ds:0xc0030e0c,eax
c0017e5a:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c0017e5f:	85 c0                	test   eax,eax
c0017e61:	75 19                	jne    c0017e7c <scanMADT()+0x46>
c0017e63:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017e68:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e6e:	83 e2 fb             	and    edx,0xfffffffb
c0017e71:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e77:	e9 3b 04 00 00       	jmp    c00182b7 <scanMADT()+0x481>
c0017e7c:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c0017e81:	83 ec 0c             	sub    esp,0xc
c0017e84:	50                   	push   eax
c0017e85:	e8 f2 fd ff ff       	call   c0017c7c <findRSDT(unsigned char*)>
c0017e8a:	83 c4 10             	add    esp,0x10
c0017e8d:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0017e92:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e97:	85 c0                	test   eax,eax
c0017e99:	75 19                	jne    c0017eb4 <scanMADT()+0x7e>
c0017e9b:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017ea0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ea6:	83 e2 fb             	and    edx,0xfffffffb
c0017ea9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eaf:	e9 03 04 00 00       	jmp    c00182b7 <scanMADT()+0x481>
c0017eb4:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017eb9:	83 ec 0c             	sub    esp,0xc
c0017ebc:	50                   	push   eax
c0017ebd:	e8 93 fb ff ff       	call   c0017a55 <loadACPITables(unsigned char*)>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017eca:	83 ec 08             	sub    esp,0x8
c0017ecd:	68 12 b5 02 c0       	push   0xc002b512
c0017ed2:	50                   	push   eax
c0017ed3:	e8 c2 fe ff ff       	call   c0017d9a <findDataTable(unsigned char*, char*)>
c0017ed8:	83 c4 10             	add    esp,0x10
c0017edb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017edf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ee4:	75 19                	jne    c0017eff <scanMADT()+0xc9>
c0017ee6:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0017eeb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ef1:	83 e2 fe             	and    edx,0xfffffffe
c0017ef4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017efa:	e9 b8 03 00 00       	jmp    c00182b7 <scanMADT()+0x481>
c0017eff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f0e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f12:	0f 87 9f 03 00 00    	ja     c00182b7 <scanMADT()+0x481>
c0017f18:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f20:	0f 87 91 03 00 00    	ja     c00182b7 <scanMADT()+0x481>
c0017f26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f32:	8d 50 01             	lea    edx,[eax+0x1]
c0017f35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f41:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f49:	8d 50 01             	lea    edx,[eax+0x1]
c0017f4c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f50:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f54:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f58:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f5c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f61:	0f 86 4f 03 00 00    	jbe    c00182b6 <scanMADT()+0x480>
c0017f67:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f6c:	75 57                	jne    c0017fc5 <scanMADT()+0x18f>
c0017f6e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f72:	8d 50 01             	lea    edx,[eax+0x1]
c0017f75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f79:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017f7f:	0f b6 d2             	movzx  edx,dl
c0017f82:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f86:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f8a:	88 82 40 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefc0],al
c0017f90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f94:	8d 50 01             	lea    edx,[eax+0x1]
c0017f97:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f9b:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017fa1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fa4:	88 0d 00 10 03 c0    	mov    BYTE PTR ds:0xc0031000,cl
c0017faa:	0f b6 d2             	movzx  edx,dl
c0017fad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fb1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fb5:	88 82 20 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefe0],al
c0017fbb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fc0:	e9 da 02 00 00       	jmp    c001829f <scanMADT()+0x469>
c0017fc5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fca:	0f 85 14 01 00 00    	jne    c00180e4 <scanMADT()+0x2ae>
c0017fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fdb:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017fe1:	0f b6 d2             	movzx  edx,dl
c0017fe4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fe8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fec:	88 82 e0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf120],al
c0017ff2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ff6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ffa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffe:	01 d0                	add    eax,edx
c0018000:	83 c0 2c             	add    eax,0x2c
c0018003:	8a 00                	mov    al,BYTE PTR [eax]
c0018005:	0f b6 d0             	movzx  edx,al
c0018008:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800c:	8d 48 01             	lea    ecx,[eax+0x1]
c001800f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018013:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018017:	0f b6 c0             	movzx  eax,al
c001801a:	c1 e0 08             	shl    eax,0x8
c001801d:	89 d1                	mov    ecx,edx
c001801f:	09 c1                	or     ecx,eax
c0018021:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018025:	8d 50 02             	lea    edx,[eax+0x2]
c0018028:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018030:	0f b6 c0             	movzx  eax,al
c0018033:	c1 e0 10             	shl    eax,0x10
c0018036:	09 c1                	or     ecx,eax
c0018038:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803c:	8d 50 03             	lea    edx,[eax+0x3]
c001803f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018043:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018047:	0f b6 c0             	movzx  eax,al
c001804a:	c1 e0 18             	shl    eax,0x18
c001804d:	09 c1                	or     ecx,eax
c001804f:	89 ca                	mov    edx,ecx
c0018051:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0018056:	0f b6 c0             	movzx  eax,al
c0018059:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c0018060:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018065:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018069:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806d:	01 d0                	add    eax,edx
c001806f:	83 c0 2c             	add    eax,0x2c
c0018072:	8a 00                	mov    al,BYTE PTR [eax]
c0018074:	0f b6 d0             	movzx  edx,al
c0018077:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807b:	8d 48 01             	lea    ecx,[eax+0x1]
c001807e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018082:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018086:	0f b6 c0             	movzx  eax,al
c0018089:	c1 e0 08             	shl    eax,0x8
c001808c:	89 d1                	mov    ecx,edx
c001808e:	09 c1                	or     ecx,eax
c0018090:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018094:	8d 50 02             	lea    edx,[eax+0x2]
c0018097:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001809b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001809f:	0f b6 c0             	movzx  eax,al
c00180a2:	c1 e0 10             	shl    eax,0x10
c00180a5:	09 c1                	or     ecx,eax
c00180a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ab:	8d 50 03             	lea    edx,[eax+0x3]
c00180ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b6:	0f b6 c0             	movzx  eax,al
c00180b9:	c1 e0 18             	shl    eax,0x18
c00180bc:	09 c1                	or     ecx,eax
c00180be:	89 ca                	mov    edx,ecx
c00180c0:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c00180c5:	0f b6 c0             	movzx  eax,al
c00180c8:	89 14 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],edx
c00180cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180d4:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c00180d9:	40                   	inc    eax
c00180da:	a2 c0 0e 03 c0       	mov    ds:0xc0030ec0,al
c00180df:	e9 bb 01 00 00       	jmp    c001829f <scanMADT()+0x469>
c00180e4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180e9:	0f 85 e9 00 00 00    	jne    c00181d8 <scanMADT()+0x3a2>
c00180ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f3:	8d 50 01             	lea    edx,[eax+0x1]
c00180f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018102:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018106:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001810a:	8d 50 01             	lea    edx,[eax+0x1]
c001810d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018111:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018115:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018119:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001811d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018121:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018125:	01 d0                	add    eax,edx
c0018127:	83 c0 2c             	add    eax,0x2c
c001812a:	8a 00                	mov    al,BYTE PTR [eax]
c001812c:	0f b6 d0             	movzx  edx,al
c001812f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018133:	8d 48 01             	lea    ecx,[eax+0x1]
c0018136:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001813e:	0f b6 c0             	movzx  eax,al
c0018141:	c1 e0 08             	shl    eax,0x8
c0018144:	89 d1                	mov    ecx,edx
c0018146:	09 c1                	or     ecx,eax
c0018148:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001814c:	8d 50 02             	lea    edx,[eax+0x2]
c001814f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018153:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018157:	0f b6 c0             	movzx  eax,al
c001815a:	c1 e0 10             	shl    eax,0x10
c001815d:	09 c1                	or     ecx,eax
c001815f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018163:	8d 50 03             	lea    edx,[eax+0x3]
c0018166:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001816e:	0f b6 c0             	movzx  eax,al
c0018171:	c1 e0 18             	shl    eax,0x18
c0018174:	09 c8                	or     eax,ecx
c0018176:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001817a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001817f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018183:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018187:	01 d0                	add    eax,edx
c0018189:	83 c0 2c             	add    eax,0x2c
c001818c:	8a 00                	mov    al,BYTE PTR [eax]
c001818e:	0f b6 c0             	movzx  eax,al
c0018191:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018195:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018198:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001819c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181a0:	0f b6 d2             	movzx  edx,dl
c00181a3:	c1 e2 08             	shl    edx,0x8
c00181a6:	09 d0                	or     eax,edx
c00181a8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181b2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181bb:	88 90 60 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd28a0],dl
c00181c1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181cb:	66 89 84 12 a0 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf160],ax
c00181d3:	e9 c7 00 00 00       	jmp    c001829f <scanMADT()+0x469>
c00181d8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181dd:	0f 85 b0 00 00 00    	jne    c0018293 <scanMADT()+0x45d>
c00181e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e7:	8d 50 01             	lea    edx,[eax+0x1]
c00181ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181f6:	0f b6 c0             	movzx  eax,al
c00181f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018201:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018205:	01 d0                	add    eax,edx
c0018207:	83 c0 2c             	add    eax,0x2c
c001820a:	8a 00                	mov    al,BYTE PTR [eax]
c001820c:	0f b6 d0             	movzx  edx,al
c001820f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018213:	8d 48 01             	lea    ecx,[eax+0x1]
c0018216:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001821a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001821e:	0f b6 c0             	movzx  eax,al
c0018221:	c1 e0 08             	shl    eax,0x8
c0018224:	09 d0                	or     eax,edx
c0018226:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001822a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001822f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018233:	8d 50 01             	lea    edx,[eax+0x1]
c0018236:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001823a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001823e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018242:	0f b6 c0             	movzx  eax,al
c0018245:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824d:	c1 e0 08             	shl    eax,0x8
c0018250:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018254:	89 c1                	mov    ecx,eax
c0018256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001825a:	c1 e0 18             	shl    eax,0x18
c001825d:	89 c3                	mov    ebx,eax
c001825f:	a1 10 0e 03 c0       	mov    eax,ds:0xc0030e10
c0018264:	8d 50 01             	lea    edx,[eax+0x1]
c0018267:	89 15 10 0e 03 c0    	mov    DWORD PTR ds:0xc0030e10,edx
c001826d:	09 d9                	or     ecx,ebx
c001826f:	89 ca                	mov    edx,ecx
c0018271:	89 14 85 20 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1e0],edx
c0018278:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001827c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018284:	68 74 b6 02 c0       	push   0xc002b674
c0018289:	e8 91 ad ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001828e:	83 c4 10             	add    esp,0x10
c0018291:	eb 0c                	jmp    c001829f <scanMADT()+0x469>
c0018293:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018298:	75 05                	jne    c001829f <scanMADT()+0x469>
c001829a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001829f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182a8:	01 d0                	add    eax,edx
c00182aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182ae:	e9 54 fc ff ff       	jmp    c0017f07 <scanMADT()+0xd1>
c00182b3:	90                   	nop
c00182b4:	eb 01                	jmp    c00182b7 <scanMADT()+0x481>
c00182b6:	90                   	nop
c00182b7:	83 c4 38             	add    esp,0x38
c00182ba:	5b                   	pop    ebx
c00182bb:	c3                   	ret    

c00182bc <ACPI::ACPI()>:
c00182bc:	83 ec 0c             	sub    esp,0xc
c00182bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c3:	83 ec 08             	sub    esp,0x8
c00182c6:	68 17 b5 02 c0       	push   0xc002b517
c00182cb:	50                   	push   eax
c00182cc:	e8 65 c3 ff ff       	call   c0014636 <Device::Device(char const*)>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	ba e8 b6 02 c0       	mov    edx,0xc002b6e8
c00182d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182dd:	89 10                	mov    DWORD PTR [eax],edx
c00182df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ee:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182fc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018315:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001831c:	e8 15 fb ff ff       	call   c0017e36 <scanMADT()>
c0018321:	90                   	nop
c0018322:	83 c4 0c             	add    esp,0xc
c0018325:	c3                   	ret    

c0018326 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018326:	83 ec 2c             	sub    esp,0x2c
c0018329:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001832d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018331:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018335:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018339:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001833e:	88 d0                	mov    al,dl
c0018340:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018344:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018349:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018351:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018355:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001835b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001835f:	0f 8d 97 00 00 00    	jge    c00183fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018369:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836d:	83 c2 2a             	add    edx,0x2a
c0018370:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018374:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018379:	75 78                	jne    c00183f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001837b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001837f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018383:	83 c2 2a             	add    edx,0x2a
c0018386:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001838a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001838e:	75 63                	jne    c00183f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018390:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018395:	74 3a                	je     c00183d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018397:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001839b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839f:	83 c2 2a             	add    edx,0x2a
c00183a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183ad:	39 c2                	cmp    edx,eax
c00183af:	74 10                	je     c00183c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183b1:	83 ec 0c             	sub    esp,0xc
c00183b4:	68 b0 b6 02 c0       	push   0xc002b6b0
c00183b9:	e8 0f 23 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00183be:	83 c4 10             	add    esp,0x10
c00183c1:	83 ec 0c             	sub    esp,0xc
c00183c4:	68 1c b5 02 c0       	push   0xc002b51c
c00183c9:	e8 ff 22 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00183ce:	83 c4 10             	add    esp,0x10
c00183d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183dd:	83 c2 2a             	add    edx,0x2a
c00183e0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00183e6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183e9:	89 01                	mov    DWORD PTR [ecx],eax
c00183eb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183ee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183f3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183f7:	e9 55 ff ff ff       	jmp    c0018351 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183fc:	90                   	nop
c00183fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018401:	83 c4 2c             	add    esp,0x2c
c0018404:	c2 04 00             	ret    0x4
c0018407:	90                   	nop

c0018408 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018408:	83 ec 1c             	sub    esp,0x1c
c001840b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001840f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018413:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018417:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001841c:	88 c8                	mov    al,cl
c001841e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018422:	88 d0                	mov    al,dl
c0018424:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018436:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018439:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001843d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018445:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001844b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001844f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018456:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001845b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018465:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018469:	8d 48 01             	lea    ecx,[eax+0x1]
c001846c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018470:	83 c2 2a             	add    edx,0x2a
c0018473:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018485:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018488:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001848c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018494:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001849a:	8d 50 01             	lea    edx,[eax+0x1]
c001849d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184b1:	3d 00 02 00 00       	cmp    eax,0x200
c00184b6:	75 10                	jne    c00184c8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184b8:	83 ec 0c             	sub    esp,0xc
c00184bb:	68 2b b5 02 c0       	push   0xc002b52b
c00184c0:	e8 08 22 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c00184c5:	83 c4 10             	add    esp,0x10
c00184c8:	90                   	nop
c00184c9:	83 c4 1c             	add    esp,0x1c
c00184cc:	c3                   	ret    
c00184cd:	90                   	nop

c00184ce <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184ce:	b8 00 00 00 00       	mov    eax,0x0
c00184d3:	c3                   	ret    

c00184d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184d4:	83 ec 1c             	sub    esp,0x1c
c00184d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184db:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184de:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184e2:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00184e7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184ec:	83 ec 08             	sub    esp,0x8
c00184ef:	52                   	push   edx
c00184f0:	50                   	push   eax
c00184f1:	e8 62 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00184f6:	83 c4 10             	add    esp,0x10
c00184f9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184fd:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0018502:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018507:	83 ec 04             	sub    esp,0x4
c001850a:	6a 01                	push   0x1
c001850c:	52                   	push   edx
c001850d:	50                   	push   eax
c001850e:	e8 5b 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018513:	83 c4 10             	add    esp,0x10
c0018516:	90                   	nop
c0018517:	83 c4 1c             	add    esp,0x1c
c001851a:	c3                   	ret    
c001851b:	90                   	nop

c001851c <ACPI::open(int, int, void*)>:
c001851c:	53                   	push   ebx
c001851d:	83 ec 28             	sub    esp,0x28
c0018520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018524:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001852b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001852f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018536:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001853b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018541:	83 e0 04             	and    eax,0x4
c0018544:	84 c0                	test   al,al
c0018546:	74 47                	je     c001858f <ACPI::open(int, int, void*)+0x73>
c0018548:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001854d:	83 ec 08             	sub    esp,0x8
c0018550:	68 48 b5 02 c0       	push   0xc002b548
c0018555:	50                   	push   eax
c0018556:	e8 3f f8 ff ff       	call   c0017d9a <findDataTable(unsigned char*, char*)>
c001855b:	83 c4 10             	add    esp,0x10
c001855e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018562:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018567:	74 26                	je     c001858f <ACPI::open(int, int, void*)+0x73>
c0018569:	83 ec 0c             	sub    esp,0xc
c001856c:	68 4d b5 02 c0       	push   0xc002b54d
c0018571:	e8 a9 aa ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018576:	83 c4 10             	add    esp,0x10
c0018579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001857d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018584:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018588:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001858f:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001859b:	8a 00                	mov    al,BYTE PTR [eax]
c001859d:	3c 01                	cmp    al,0x1
c001859f:	75 28                	jne    c00185c9 <ACPI::open(int, int, void*)+0xad>
c00185a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185b0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185b7:	83 ec 0c             	sub    esp,0xc
c00185ba:	68 5e b5 02 c0       	push   0xc002b55e
c00185bf:	e8 5b aa ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00185c4:	83 c4 10             	add    esp,0x10
c00185c7:	eb 25                	jmp    c00185ee <ACPI::open(int, int, void*)+0xd2>
c00185c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185cd:	8a 00                	mov    al,BYTE PTR [eax]
c00185cf:	3c 02                	cmp    al,0x2
c00185d1:	75 1b                	jne    c00185ee <ACPI::open(int, int, void*)+0xd2>
c00185d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185d7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185de:	83 ec 0c             	sub    esp,0xc
c00185e1:	68 66 b5 02 c0       	push   0xc002b566
c00185e6:	e8 34 aa ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00185eb:	83 c4 10             	add    esp,0x10
c00185ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185f8:	83 f0 01             	xor    eax,0x1
c00185fb:	84 c0                	test   al,al
c00185fd:	74 6a                	je     c0018669 <ACPI::open(int, int, void*)+0x14d>
c00185ff:	83 ec 0c             	sub    esp,0xc
c0018602:	68 6e b5 02 c0       	push   0xc002b56e
c0018607:	e8 13 aa ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001860c:	83 c4 10             	add    esp,0x10
c001860f:	e8 3c 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018614:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018618:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001861d:	75 28                	jne    c0018647 <ACPI::open(int, int, void*)+0x12b>
c001861f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018623:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001862a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001862e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018635:	83 ec 0c             	sub    esp,0xc
c0018638:	68 7c b5 02 c0       	push   0xc002b57c
c001863d:	e8 dd a9 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018642:	83 c4 10             	add    esp,0x10
c0018645:	eb 22                	jmp    c0018669 <ACPI::open(int, int, void*)+0x14d>
c0018647:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001864c:	75 1b                	jne    c0018669 <ACPI::open(int, int, void*)+0x14d>
c001864e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018652:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018659:	83 ec 0c             	sub    esp,0xc
c001865c:	68 86 b5 02 c0       	push   0xc002b586
c0018661:	e8 b9 a9 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001866d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018673:	84 c0                	test   al,al
c0018675:	74 13                	je     c001868a <ACPI::open(int, int, void*)+0x16e>
c0018677:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001867b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018681:	83 f0 01             	xor    eax,0x1
c0018684:	0f b6 c0             	movzx  eax,al
c0018687:	40                   	inc    eax
c0018688:	eb 05                	jmp    c001868f <ACPI::open(int, int, void*)+0x173>
c001868a:	b8 00 00 00 00       	mov    eax,0x0
c001868f:	83 ec 08             	sub    esp,0x8
c0018692:	50                   	push   eax
c0018693:	68 90 b5 02 c0       	push   0xc002b590
c0018698:	e8 82 a9 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186a4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186aa:	84 c0                	test   al,al
c00186ac:	74 67                	je     c0018715 <ACPI::open(int, int, void*)+0x1f9>
c00186ae:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00186b6:	83 ec 0c             	sub    esp,0xc
c00186b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00186bd:	e8 81 71 ff ff       	call   c000f843 <malloc>
c00186c2:	83 c4 10             	add    esp,0x10
c00186c5:	89 c3                	mov    ebx,eax
c00186c7:	83 ec 0c             	sub    esp,0xc
c00186ca:	53                   	push   ebx
c00186cb:	e8 f4 a2 00 00       	call   c00229c4 <PCI::PCI()>
c00186d0:	83 c4 10             	add    esp,0x10
c00186d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186db:	83 ec 08             	sub    esp,0x8
c00186de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186e2:	50                   	push   eax
c00186e3:	e8 5e bd ff ff       	call   c0014446 <Device::addChild(Device*)>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f1:	83 c0 08             	add    eax,0x8
c00186f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00186f6:	6a 00                	push   0x0
c00186f8:	6a 00                	push   0x0
c00186fa:	6a 00                	push   0x0
c00186fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018700:	ff d0                	call   eax
c0018702:	83 c4 10             	add    esp,0x10
c0018705:	83 ec 0c             	sub    esp,0xc
c0018708:	68 99 b5 02 c0       	push   0xc002b599
c001870d:	e8 0d a9 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018712:	83 c4 10             	add    esp,0x10
c0018715:	83 ec 0c             	sub    esp,0xc
c0018718:	68 a4 b5 02 c0       	push   0xc002b5a4
c001871d:	e8 81 46 00 00       	call   c001cda3 <Thr::loadKernelSymbolTable(char const*)>
c0018722:	83 c4 10             	add    esp,0x10
c0018725:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c001872b:	83 ec 08             	sub    esp,0x8
c001872e:	6a 01                	push   0x1
c0018730:	68 c2 b5 02 c0       	push   0xc002b5c2
c0018735:	e8 c6 50 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	83 ec 08             	sub    esp,0x8
c0018740:	53                   	push   ebx
c0018741:	50                   	push   eax
c0018742:	e8 05 53 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	8b 1d 08 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e508
c0018750:	83 ec 08             	sub    esp,0x8
c0018753:	6a 01                	push   0x1
c0018755:	68 df b5 02 c0       	push   0xc002b5df
c001875a:	e8 a1 50 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c001875f:	83 c4 10             	add    esp,0x10
c0018762:	83 ec 08             	sub    esp,0x8
c0018765:	53                   	push   ebx
c0018766:	50                   	push   eax
c0018767:	e8 e0 52 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c001876c:	83 c4 10             	add    esp,0x10
c001876f:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0018774:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001877a:	83 e0 04             	and    eax,0x4
c001877d:	84 c0                	test   al,al
c001877f:	0f 84 d2 00 00 00    	je     c0018857 <ACPI::open(int, int, void*)+0x33b>
c0018785:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001878c:	83 ec 0c             	sub    esp,0xc
c001878f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018793:	e8 ab 70 ff ff       	call   c000f843 <malloc>
c0018798:	83 c4 10             	add    esp,0x10
c001879b:	89 c3                	mov    ebx,eax
c001879d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00187a2:	83 ec 04             	sub    esp,0x4
c00187a5:	50                   	push   eax
c00187a6:	68 fc b5 02 c0       	push   0xc002b5fc
c00187ab:	53                   	push   ebx
c00187ac:	e8 c7 ad ff ff       	call   c0013578 <File::File(char const*, Process*)>
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00187b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187bd:	74 17                	je     c00187d6 <ACPI::open(int, int, void*)+0x2ba>
c00187bf:	83 ec 0c             	sub    esp,0xc
c00187c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187c6:	e8 7f b0 ff ff       	call   c001384a <File::exists()>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	84 c0                	test   al,al
c00187d0:	74 04                	je     c00187d6 <ACPI::open(int, int, void*)+0x2ba>
c00187d2:	b0 01                	mov    al,0x1
c00187d4:	eb 02                	jmp    c00187d8 <ACPI::open(int, int, void*)+0x2bc>
c00187d6:	b0 00                	mov    al,0x0
c00187d8:	84 c0                	test   al,al
c00187da:	74 22                	je     c00187fe <ACPI::open(int, int, void*)+0x2e2>
c00187dc:	83 ec 08             	sub    esp,0x8
c00187df:	6a 01                	push   0x1
c00187e1:	68 fc b5 02 c0       	push   0xc002b5fc
c00187e6:	e8 15 50 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	83 ec 08             	sub    esp,0x8
c00187f1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187f5:	50                   	push   eax
c00187f6:	e8 51 52 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018803:	74 1e                	je     c0018823 <ACPI::open(int, int, void*)+0x307>
c0018805:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001880a:	74 17                	je     c0018823 <ACPI::open(int, int, void*)+0x307>
c001880c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018810:	8b 00                	mov    eax,DWORD PTR [eax]
c0018812:	83 c0 08             	add    eax,0x8
c0018815:	8b 00                	mov    eax,DWORD PTR [eax]
c0018817:	83 ec 0c             	sub    esp,0xc
c001881a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001881e:	ff d0                	call   eax
c0018820:	83 c4 10             	add    esp,0x10
c0018823:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0018828:	83 ec 08             	sub    esp,0x8
c001882b:	68 19 b6 02 c0       	push   0xc002b619
c0018830:	50                   	push   eax
c0018831:	e8 64 f5 ff ff       	call   c0017d9a <findDataTable(unsigned char*, char*)>
c0018836:	83 c4 10             	add    esp,0x10
c0018839:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001883d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018842:	74 13                	je     c0018857 <ACPI::open(int, int, void*)+0x33b>
c0018844:	83 ec 08             	sub    esp,0x8
c0018847:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001884b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001884f:	e8 80 fc ff ff       	call   c00184d4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018854:	83 c4 10             	add    esp,0x10
c0018857:	b8 00 00 00 00       	mov    eax,0x0
c001885c:	83 c4 28             	add    esp,0x28
c001885f:	5b                   	pop    ebx
c0018860:	c3                   	ret    
c0018861:	90                   	nop

c0018862 <ACPI::sleep()>:
c0018862:	83 ec 0c             	sub    esp,0xc
c0018865:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c001886a:	85 c0                	test   eax,eax
c001886c:	74 07                	je     c0018875 <ACPI::sleep()+0x13>
c001886e:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c0018873:	ff d0                	call   eax
c0018875:	90                   	nop
c0018876:	83 c4 0c             	add    esp,0xc
c0018879:	c3                   	ret    

c001887a <CPU::close(int, int, void*)>:
c001887a:	31 c0                	xor    eax,eax
c001887c:	c3                   	ret    
c001887d:	90                   	nop

c001887e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001887e:	55                   	push   ebp
c001887f:	57                   	push   edi
c0018880:	56                   	push   esi
c0018881:	53                   	push   ebx
c0018882:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018886:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001888a:	89 ce                	mov    esi,ecx
c001888c:	89 d5                	mov    ebp,edx
c001888e:	80 f9 04             	cmp    cl,0x4
c0018891:	75 28                	jne    c00188bb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018893:	8d 42 f9             	lea    eax,[edx-0x7]
c0018896:	3c 03                	cmp    al,0x3
c0018898:	0f 86 63 01 00 00    	jbe    c0018a01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001889e:	80 fa 03             	cmp    dl,0x3
c00188a1:	0f 84 5a 01 00 00    	je     c0018a01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00188a7:	8d 7a f2             	lea    edi,[edx-0xe]
c00188aa:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c00188af:	89 fb                	mov    ebx,edi
c00188b1:	80 fb 01             	cmp    bl,0x1
c00188b4:	77 4e                	ja     c0018904 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00188b6:	e9 52 01 00 00       	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bb:	80 f9 05             	cmp    cl,0x5
c00188be:	75 4d                	jne    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00188c0:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00188c5:	80 fa 03             	cmp    dl,0x3
c00188c8:	0f 86 3f 01 00 00    	jbe    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ce:	8d 7a fa             	lea    edi,[edx-0x6]
c00188d1:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c00188d6:	89 fb                	mov    ebx,edi
c00188d8:	80 fb 01             	cmp    bl,0x1
c00188db:	0f 86 2c 01 00 00    	jbe    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188e1:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c00188e6:	80 fa 08             	cmp    dl,0x8
c00188e9:	0f 84 1e 01 00 00    	je     c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188ef:	89 d7                	mov    edi,edx
c00188f1:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c00188f6:	83 e7 fb             	and    edi,0xfffffffb
c00188f9:	89 fb                	mov    ebx,edi
c00188fb:	80 fb 09             	cmp    bl,0x9
c00188fe:	0f 84 09 01 00 00    	je     c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018904:	31 c0                	xor    eax,eax
c0018906:	89 eb                	mov    ebx,ebp
c0018908:	0f b6 fb             	movzx  edi,bl
c001890b:	eb 30                	jmp    c001893d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001890d:	31 c0                	xor    eax,eax
c001890f:	80 f9 06             	cmp    cl,0x6
c0018912:	75 f2                	jne    c0018906 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018914:	80 fa 0a             	cmp    dl,0xa
c0018917:	77 ed                	ja     c0018906 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018919:	bf de 05 00 00       	mov    edi,0x5de
c001891e:	0f a3 d7             	bt     edi,edx
c0018921:	73 e3                	jae    c0018906 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018923:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c0018928:	e9 e0 00 00 00       	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001892d:	39 c7                	cmp    edi,eax
c001892f:	0f 84 d3 00 00 00    	je     c0018a08 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018935:	40                   	inc    eax
c0018936:	3d d0 00 00 00       	cmp    eax,0xd0
c001893b:	74 09                	je     c0018946 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001893d:	89 f3                	mov    ebx,esi
c001893f:	80 fb 0f             	cmp    bl,0xf
c0018942:	75 f1                	jne    c0018935 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018944:	eb e7                	jmp    c001892d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018946:	80 f9 10             	cmp    cl,0x10
c0018949:	75 14                	jne    c001895f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001894b:	8d 42 fc             	lea    eax,[edx-0x4]
c001894e:	83 e0 fb             	and    eax,0xfffffffb
c0018951:	3c 02                	cmp    al,0x2
c0018953:	76 34                	jbe    c0018989 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018955:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c001895a:	80 fa 02             	cmp    dl,0x2
c001895d:	eb 24                	jmp    c0018983 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001895f:	80 f9 11             	cmp    cl,0x11
c0018962:	75 13                	jne    c0018977 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018964:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018969:	80 fa 03             	cmp    dl,0x3
c001896c:	0f 85 9b 00 00 00    	jne    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018972:	e9 91 00 00 00       	jmp    c0018a08 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018977:	80 f9 12             	cmp    cl,0x12
c001897a:	75 14                	jne    c0018990 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001897c:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018981:	fe ca                	dec    dl
c0018983:	0f 85 84 00 00 00    	jne    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018989:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c001898e:	eb 7d                	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018990:	80 f9 14             	cmp    cl,0x14
c0018993:	75 12                	jne    c00189a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018995:	4a                   	dec    edx
c0018996:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c001899b:	80 fa 01             	cmp    dl,0x1
c001899e:	77 6d                	ja     c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a0:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00189a5:	eb 66                	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a7:	80 f9 15             	cmp    cl,0x15
c00189aa:	75 31                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00189ac:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c00189b1:	80 fa 01             	cmp    dl,0x1
c00189b4:	74 57                	je     c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b6:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c00189bb:	80 fa 13             	cmp    dl,0x13
c00189be:	76 0c                	jbe    c00189cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00189c0:	80 fa 30             	cmp    dl,0x30
c00189c3:	75 48                	jne    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c5:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c00189ca:	eb 41                	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189cc:	b9 04 00 09 00       	mov    ecx,0x90004
c00189d1:	0f a3 d1             	bt     ecx,edx
c00189d4:	73 37                	jae    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d6:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c00189db:	eb 30                	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189dd:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c00189e2:	80 f9 16             	cmp    cl,0x16
c00189e5:	75 26                	jne    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189e7:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00189ec:	84 d2                	test   dl,dl
c00189ee:	74 1d                	je     c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189f0:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c00189f5:	80 fa 30             	cmp    dl,0x30
c00189f8:	75 13                	jne    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189fa:	b8 00 da 02 c0       	mov    eax,0xc002da00
c00189ff:	eb 0c                	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a01:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018a06:	eb 05                	jmp    c0018a0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a08:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c0018a0d:	5b                   	pop    ebx
c0018a0e:	5e                   	pop    esi
c0018a0f:	5f                   	pop    edi
c0018a10:	5d                   	pop    ebp
c0018a11:	c3                   	ret    

c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018a12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a1a:	80 f9 04             	cmp    cl,0x4
c0018a1d:	75 6b                	jne    c0018a8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018a1f:	b8 80 d7 02 c0       	mov    eax,0xc002d780
c0018a24:	80 fa 01             	cmp    dl,0x1
c0018a27:	0f 86 92 02 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a2d:	b8 90 d7 02 c0       	mov    eax,0xc002d790
c0018a32:	80 fa 02             	cmp    dl,0x2
c0018a35:	0f 84 84 02 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a3b:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a40:	80 fa 03             	cmp    dl,0x3
c0018a43:	0f 84 76 02 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a49:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a4e:	80 fa 04             	cmp    dl,0x4
c0018a51:	0f 84 68 02 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a57:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a5c:	80 fa 05             	cmp    dl,0x5
c0018a5f:	0f 84 5a 02 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a65:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c0018a6a:	80 fa 07             	cmp    dl,0x7
c0018a6d:	0f 84 4c 02 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a73:	83 ea 08             	sub    edx,0x8
c0018a76:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018a7b:	80 fa 01             	cmp    dl,0x1
c0018a7e:	0f 87 3b 02 00 00    	ja     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a84:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a89:	c3                   	ret    
c0018a8a:	80 f9 05             	cmp    cl,0x5
c0018a8d:	75 45                	jne    c0018ad4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a8f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a92:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a97:	80 f9 02             	cmp    cl,0x2
c0018a9a:	0f 86 1f 02 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aa0:	80 fa 04             	cmp    dl,0x4
c0018aa3:	0f 84 f3 01 00 00    	je     c0018c9c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018aa9:	80 fa 07             	cmp    dl,0x7
c0018aac:	0f 84 0d 02 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ab2:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018ab7:	80 fa 08             	cmp    dl,0x8
c0018aba:	0f 84 ff 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ac0:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018ac5:	80 fa 09             	cmp    dl,0x9
c0018ac8:	0f 85 f1 01 00 00    	jne    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ace:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018ad3:	c3                   	ret    
c0018ad4:	80 f9 06             	cmp    cl,0x6
c0018ad7:	0f 85 85 01 00 00    	jne    c0018c62 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018add:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018ae2:	80 fa 01             	cmp    dl,0x1
c0018ae5:	0f 84 d4 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018aeb:	8d 42 fb             	lea    eax,[edx-0x5]
c0018aee:	3c 01                	cmp    al,0x1
c0018af0:	0f 86 ac 01 00 00    	jbe    c0018ca2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018af6:	80 fa 03             	cmp    dl,0x3
c0018af9:	0f 84 a3 01 00 00    	je     c0018ca2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018aff:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018b02:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018b07:	80 f9 01             	cmp    cl,0x1
c0018b0a:	0f 86 af 01 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b10:	80 fa 09             	cmp    dl,0x9
c0018b13:	0f 84 8f 01 00 00    	je     c0018ca8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018b19:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018b1c:	80 f9 01             	cmp    cl,0x1
c0018b1f:	0f 86 9a 01 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b25:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b2a:	80 fa 0d             	cmp    dl,0xd
c0018b2d:	0f 84 8c 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b33:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018b38:	80 fa 0e             	cmp    dl,0xe
c0018b3b:	0f 84 7e 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b41:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b46:	80 fa 0f             	cmp    dl,0xf
c0018b49:	0f 84 70 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b4f:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018b54:	80 fa 15             	cmp    dl,0x15
c0018b57:	0f 84 62 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b5d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b60:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b65:	80 f9 01             	cmp    cl,0x1
c0018b68:	0f 86 51 01 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b6e:	80 fa 1a             	cmp    dl,0x1a
c0018b71:	0f 84 37 01 00 00    	je     c0018cae <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b77:	80 fa 1c             	cmp    dl,0x1c
c0018b7a:	0f 84 34 01 00 00    	je     c0018cb4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b80:	80 fa 1d             	cmp    dl,0x1d
c0018b83:	0f 84 36 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b89:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018b8e:	80 fa 25             	cmp    dl,0x25
c0018b91:	0f 84 28 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b97:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b9a:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b9f:	80 f9 01             	cmp    cl,0x1
c0018ba2:	0f 86 17 01 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba8:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bad:	80 fa 2a             	cmp    dl,0x2a
c0018bb0:	0f 84 09 01 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb6:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018bbb:	80 fa 2c             	cmp    dl,0x2c
c0018bbe:	0f 84 fb 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bc4:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bc9:	80 fa 2d             	cmp    dl,0x2d
c0018bcc:	0f 84 ed 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bd2:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018bd7:	80 fa 2e             	cmp    dl,0x2e
c0018bda:	0f 84 df 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be0:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018be5:	80 fa 2f             	cmp    dl,0x2f
c0018be8:	0f 84 d1 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bee:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bf1:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018bf6:	80 f9 01             	cmp    cl,0x1
c0018bf9:	0f 86 c0 00 00 00    	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bff:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018c04:	80 fa 37             	cmp    dl,0x37
c0018c07:	0f 84 b2 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0d:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018c12:	80 fa 3a             	cmp    dl,0x3a
c0018c15:	0f 84 a4 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c1b:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018c20:	80 fa 3c             	cmp    dl,0x3c
c0018c23:	0f 84 96 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c29:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c2e:	80 fa 3d             	cmp    dl,0x3d
c0018c31:	0f 84 88 00 00 00    	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c37:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018c3c:	80 fa 3e             	cmp    dl,0x3e
c0018c3f:	74 7e                	je     c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c41:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c44:	3c 01                	cmp    al,0x1
c0018c46:	76 72                	jbe    c0018cba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c48:	80 fa 3f             	cmp    dl,0x3f
c0018c4b:	74 6d                	je     c0018cba <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c4d:	80 fa 4a             	cmp    dl,0x4a
c0018c50:	74 0a                	je     c0018c5c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c52:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018c57:	80 fa 4d             	cmp    dl,0x4d
c0018c5a:	75 63                	jne    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5c:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018c61:	c3                   	ret    
c0018c62:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018c67:	80 f9 0b             	cmp    cl,0xb
c0018c6a:	75 0a                	jne    c0018c76 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c6c:	fe ca                	dec    dl
c0018c6e:	75 4f                	jne    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c70:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018c75:	c3                   	ret    
c0018c76:	80 f9 0f             	cmp    cl,0xf
c0018c79:	75 44                	jne    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7b:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018c80:	80 fa 02             	cmp    dl,0x2
c0018c83:	76 3a                	jbe    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c85:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c88:	3c 01                	cmp    al,0x1
c0018c8a:	76 0a                	jbe    c0018c96 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c8c:	b8 fe b9 02 c0       	mov    eax,0xc002b9fe
c0018c91:	80 fa 06             	cmp    dl,0x6
c0018c94:	75 29                	jne    c0018cbf <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c96:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018c9b:	c3                   	ret    
c0018c9c:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018ca1:	c3                   	ret    
c0018ca2:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018ca7:	c3                   	ret    
c0018ca8:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018cad:	c3                   	ret    
c0018cae:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018cb3:	c3                   	ret    
c0018cb4:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018cb9:	c3                   	ret    
c0018cba:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018cbf:	c3                   	ret    

c0018cc0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018cc0:	60                   	pusha  
c0018cc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018cc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018ccd:	9c                   	pushf  
c0018cce:	fa                   	cli    
c0018ccf:	0f 09                	wbinvd 
c0018cd1:	0f 30                	wrmsr  
c0018cd3:	9d                   	popf   
c0018cd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018cd8:	89 02                	mov    DWORD PTR [edx],eax
c0018cda:	61                   	popa   
c0018cdb:	c3                   	ret    

c0018cdc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018cdc:	60                   	pusha  
c0018cdd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ce1:	9c                   	pushf  
c0018ce2:	fa                   	cli    
c0018ce3:	0f 09                	wbinvd 
c0018ce5:	31 c0                	xor    eax,eax
c0018ce7:	31 d2                	xor    edx,edx
c0018ce9:	0f 32                	rdmsr  
c0018ceb:	9d                   	popf   
c0018cec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cf0:	89 02                	mov    DWORD PTR [edx],eax
c0018cf2:	61                   	popa   
c0018cf3:	c3                   	ret    

c0018cf4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018cf4:	56                   	push   esi
c0018cf5:	53                   	push   ebx
c0018cf6:	83 ec 10             	sub    esp,0x10
c0018cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018cfd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018d02:	75 5d                	jne    c0018d61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d04:	83 f8 08             	cmp    eax,0x8
c0018d07:	75 09                	jne    c0018d12 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018d09:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018d0e:	7e 13                	jle    c0018d23 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d10:	eb 30                	jmp    c0018d42 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d12:	83 f8 06             	cmp    eax,0x6
c0018d15:	7c 4a                	jl     c0018d61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d17:	83 f8 07             	cmp    eax,0x7
c0018d1a:	7e 07                	jle    c0018d23 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018d1c:	83 f8 09             	cmp    eax,0x9
c0018d1f:	74 21                	je     c0018d42 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018d21:	eb 3e                	jmp    c0018d61 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018d23:	89 e6                	mov    esi,esp
c0018d25:	8b 1d 48 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e548
c0018d2b:	56                   	push   esi
c0018d2c:	c1 eb 15             	shr    ebx,0x15
c0018d2f:	68 82 00 00 c0       	push   0xc0000082
c0018d34:	83 e3 7e             	and    ebx,0x7e
c0018d37:	e8 a0 ff ff ff       	call   c0018cdc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d3c:	56                   	push   esi
c0018d3d:	6a 00                	push   0x0
c0018d3f:	53                   	push   ebx
c0018d40:	eb 12                	jmp    c0018d54 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d42:	89 e3                	mov    ebx,esp
c0018d44:	53                   	push   ebx
c0018d45:	68 82 00 00 c0       	push   0xc0000082
c0018d4a:	e8 8d ff ff ff       	call   c0018cdc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d4f:	53                   	push   ebx
c0018d50:	6a 00                	push   0x0
c0018d52:	6a 00                	push   0x0
c0018d54:	68 82 00 00 c0       	push   0xc0000082
c0018d59:	e8 62 ff ff ff       	call   c0018cc0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d5e:	83 c4 18             	add    esp,0x18
c0018d61:	83 c4 10             	add    esp,0x10
c0018d64:	5b                   	pop    ebx
c0018d65:	5e                   	pop    esi
c0018d66:	c3                   	ret    
c0018d67:	90                   	nop

c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d68:	55                   	push   ebp
c0018d69:	57                   	push   edi
c0018d6a:	56                   	push   esi
c0018d6b:	53                   	push   ebx
c0018d6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d78:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d7c:	39 05 20 da 02 c0    	cmp    DWORD PTR ds:0xc002da20,eax
c0018d82:	75 23                	jne    c0018da7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d84:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c0018d89:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d8d:	89 06                	mov    DWORD PTR [esi],eax
c0018d8f:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c0018d94:	89 07                	mov    DWORD PTR [edi],eax
c0018d96:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c0018d9b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d9e:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c0018da3:	89 02                	mov    DWORD PTR [edx],eax
c0018da5:	eb 3f                	jmp    c0018de6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018da7:	31 c9                	xor    ecx,ecx
c0018da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dad:	0f a2                	cpuid  
c0018daf:	89 06                	mov    DWORD PTR [esi],eax
c0018db1:	89 1f                	mov    DWORD PTR [edi],ebx
c0018db3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018db7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018dba:	89 10                	mov    DWORD PTR [eax],edx
c0018dbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018dc0:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c0018dc5:	8b 06                	mov    eax,DWORD PTR [esi]
c0018dc7:	a3 6c 10 03 c0       	mov    ds:0xc003106c,eax
c0018dcc:	8b 07                	mov    eax,DWORD PTR [edi]
c0018dce:	a3 68 10 03 c0       	mov    ds:0xc0031068,eax
c0018dd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dd6:	a3 64 10 03 c0       	mov    ds:0xc0031064,eax
c0018ddb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018ddf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018de1:	a3 60 10 03 c0       	mov    ds:0xc0031060,eax
c0018de6:	5b                   	pop    ebx
c0018de7:	5e                   	pop    esi
c0018de8:	5f                   	pop    edi
c0018de9:	5d                   	pop    ebp
c0018dea:	c3                   	ret    
c0018deb:	90                   	nop

c0018dec <CPU::cpuidCheckEDX(unsigned int)>:
c0018dec:	83 ec 10             	sub    esp,0x10
c0018def:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df3:	50                   	push   eax
c0018df4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df8:	50                   	push   eax
c0018df9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfd:	50                   	push   eax
c0018dfe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e02:	50                   	push   eax
c0018e03:	6a 01                	push   0x1
c0018e05:	e8 5e ff ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e0a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018e12:	0f 95 c0             	setne  al
c0018e15:	83 c4 24             	add    esp,0x24
c0018e18:	c3                   	ret    
c0018e19:	90                   	nop

c0018e1a <CPU::cpuidCheckECX(unsigned int)>:
c0018e1a:	83 ec 10             	sub    esp,0x10
c0018e1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e21:	50                   	push   eax
c0018e22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e26:	50                   	push   eax
c0018e27:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2b:	50                   	push   eax
c0018e2c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e30:	50                   	push   eax
c0018e31:	6a 01                	push   0x1
c0018e33:	e8 30 ff ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e40:	0f 95 c0             	setne  al
c0018e43:	83 c4 24             	add    esp,0x24
c0018e46:	c3                   	ret    
c0018e47:	90                   	nop

c0018e48 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e48:	83 ec 10             	sub    esp,0x10
c0018e4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4f:	50                   	push   eax
c0018e50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e54:	50                   	push   eax
c0018e55:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e59:	50                   	push   eax
c0018e5a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e5e:	50                   	push   eax
c0018e5f:	6a 07                	push   0x7
c0018e61:	e8 02 ff ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e6a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e6e:	0f 95 c0             	setne  al
c0018e71:	83 c4 24             	add    esp,0x24
c0018e74:	c3                   	ret    
c0018e75:	90                   	nop

c0018e76 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e76:	83 ec 10             	sub    esp,0x10
c0018e79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e7d:	50                   	push   eax
c0018e7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e82:	50                   	push   eax
c0018e83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e87:	50                   	push   eax
c0018e88:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e8c:	50                   	push   eax
c0018e8d:	6a 07                	push   0x7
c0018e8f:	e8 d4 fe ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e98:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e9c:	0f 95 c0             	setne  al
c0018e9f:	83 c4 24             	add    esp,0x24
c0018ea2:	c3                   	ret    
c0018ea3:	90                   	nop

c0018ea4 <CPU::CPU()>:
c0018ea4:	83 ec 0c             	sub    esp,0xc
c0018ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eab:	83 ec 08             	sub    esp,0x8
c0018eae:	68 fe b9 02 c0       	push   0xc002b9fe
c0018eb3:	50                   	push   eax
c0018eb4:	e8 7d b7 ff ff       	call   c0014636 <Device::Device(char const*)>
c0018eb9:	83 c4 10             	add    esp,0x10
c0018ebc:	ba d8 ba 02 c0       	mov    edx,0xc002bad8
c0018ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ec5:	89 10                	mov    DWORD PTR [eax],edx
c0018ec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ecb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ed5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed9:	05 78 01 00 00       	add    eax,0x178
c0018ede:	83 ec 0c             	sub    esp,0xc
c0018ee1:	50                   	push   eax
c0018ee2:	e8 71 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018eee:	05 7c 09 00 00       	add    eax,0x97c
c0018ef3:	83 ec 0c             	sub    esp,0xc
c0018ef6:	50                   	push   eax
c0018ef7:	e8 be 63 ff ff       	call   c000f2ba <IDT::IDT()>
c0018efc:	83 c4 10             	add    esp,0x10
c0018eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f03:	05 7c 11 00 00       	add    eax,0x117c
c0018f08:	83 ec 0c             	sub    esp,0xc
c0018f0b:	50                   	push   eax
c0018f0c:	e8 c5 85 ff ff       	call   c00114d6 <TSS::TSS()>
c0018f11:	83 c4 10             	add    esp,0x10
c0018f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f18:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018f1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f23:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018f2d:	90                   	nop
c0018f2e:	83 c4 0c             	add    esp,0xc
c0018f31:	c3                   	ret    

c0018f32 <CPU::displayFeatures()>:
c0018f32:	53                   	push   ebx
c0018f33:	83 ec 10             	sub    esp,0x10
c0018f36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f3a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f40:	68 0c b7 02 c0       	push   0xc002b70c
c0018f45:	e8 d5 a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018f4a:	59                   	pop    ecx
c0018f4b:	58                   	pop    eax
c0018f4c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f52:	50                   	push   eax
c0018f53:	68 1d b7 02 c0       	push   0xc002b71d
c0018f58:	e8 c2 a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018f5d:	58                   	pop    eax
c0018f5e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f64:	5a                   	pop    edx
c0018f65:	c1 e8 0e             	shr    eax,0xe
c0018f68:	0f b6 c0             	movzx  eax,al
c0018f6b:	50                   	push   eax
c0018f6c:	68 2e b7 02 c0       	push   0xc002b72e
c0018f71:	e8 a9 a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018f76:	59                   	pop    ecx
c0018f77:	58                   	pop    eax
c0018f78:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7e:	66 c1 e8 06          	shr    ax,0x6
c0018f82:	0f b6 c0             	movzx  eax,al
c0018f85:	50                   	push   eax
c0018f86:	68 3f b7 02 c0       	push   0xc002b73f
c0018f8b:	e8 8f a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018f90:	c7 04 24 ec bb 02 c0 	mov    DWORD PTR [esp],0xc002bbec
c0018f97:	e8 83 a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018f9c:	83 c4 10             	add    esp,0x10
c0018f9f:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018fa4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018fab:	74 05                	je     c0018fb2 <CPU::displayFeatures()+0x80>
c0018fad:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fb2:	52                   	push   edx
c0018fb3:	52                   	push   edx
c0018fb4:	50                   	push   eax
c0018fb5:	68 50 b7 02 c0       	push   0xc002b750
c0018fba:	e8 60 a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fc7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018fce:	78 05                	js     c0018fd5 <CPU::displayFeatures()+0xa3>
c0018fd0:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018fd5:	51                   	push   ecx
c0018fd6:	51                   	push   ecx
c0018fd7:	50                   	push   eax
c0018fd8:	68 67 b7 02 c0       	push   0xc002b767
c0018fdd:	e8 3d a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0018fe2:	83 c4 10             	add    esp,0x10
c0018fe5:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0018fea:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018ff1:	75 05                	jne    c0018ff8 <CPU::displayFeatures()+0xc6>
c0018ff3:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0018ff8:	52                   	push   edx
c0018ff9:	52                   	push   edx
c0018ffa:	50                   	push   eax
c0018ffb:	68 7e b7 02 c0       	push   0xc002b77e
c0019000:	e8 1a a0 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019005:	83 c4 10             	add    esp,0x10
c0019008:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001900d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0019014:	75 05                	jne    c001901b <CPU::displayFeatures()+0xe9>
c0019016:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001901b:	51                   	push   ecx
c001901c:	51                   	push   ecx
c001901d:	50                   	push   eax
c001901e:	68 95 b7 02 c0       	push   0xc002b795
c0019023:	e8 f7 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019028:	83 c4 10             	add    esp,0x10
c001902b:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019030:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019037:	75 05                	jne    c001903e <CPU::displayFeatures()+0x10c>
c0019039:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001903e:	52                   	push   edx
c001903f:	52                   	push   edx
c0019040:	50                   	push   eax
c0019041:	68 ac b7 02 c0       	push   0xc002b7ac
c0019046:	e8 d4 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001904b:	83 c4 10             	add    esp,0x10
c001904e:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019053:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001905a:	75 05                	jne    c0019061 <CPU::displayFeatures()+0x12f>
c001905c:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019061:	51                   	push   ecx
c0019062:	51                   	push   ecx
c0019063:	50                   	push   eax
c0019064:	68 c3 b7 02 c0       	push   0xc002b7c3
c0019069:	e8 b1 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001906e:	83 c4 10             	add    esp,0x10
c0019071:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019076:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001907d:	75 05                	jne    c0019084 <CPU::displayFeatures()+0x152>
c001907f:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019084:	52                   	push   edx
c0019085:	52                   	push   edx
c0019086:	50                   	push   eax
c0019087:	68 da b7 02 c0       	push   0xc002b7da
c001908c:	e8 8e 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019091:	83 c4 10             	add    esp,0x10
c0019094:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019099:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00190a0:	75 05                	jne    c00190a7 <CPU::displayFeatures()+0x175>
c00190a2:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190a7:	51                   	push   ecx
c00190a8:	51                   	push   ecx
c00190a9:	50                   	push   eax
c00190aa:	68 f1 b7 02 c0       	push   0xc002b7f1
c00190af:	e8 6b 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190bc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00190c3:	75 05                	jne    c00190ca <CPU::displayFeatures()+0x198>
c00190c5:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190ca:	52                   	push   edx
c00190cb:	52                   	push   edx
c00190cc:	50                   	push   eax
c00190cd:	68 08 b8 02 c0       	push   0xc002b808
c00190d2:	e8 48 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00190d7:	83 c4 10             	add    esp,0x10
c00190da:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c00190df:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190e6:	75 05                	jne    c00190ed <CPU::displayFeatures()+0x1bb>
c00190e8:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c00190ed:	51                   	push   ecx
c00190ee:	51                   	push   ecx
c00190ef:	50                   	push   eax
c00190f0:	68 1f b8 02 c0       	push   0xc002b81f
c00190f5:	e8 25 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00190fa:	83 c4 10             	add    esp,0x10
c00190fd:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019102:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019109:	75 05                	jne    c0019110 <CPU::displayFeatures()+0x1de>
c001910b:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019110:	52                   	push   edx
c0019111:	52                   	push   edx
c0019112:	50                   	push   eax
c0019113:	68 36 b8 02 c0       	push   0xc002b836
c0019118:	e8 02 9f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019125:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001912c:	75 05                	jne    c0019133 <CPU::displayFeatures()+0x201>
c001912e:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019133:	51                   	push   ecx
c0019134:	51                   	push   ecx
c0019135:	50                   	push   eax
c0019136:	68 4d b8 02 c0       	push   0xc002b84d
c001913b:	e8 df 9e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019140:	83 c4 10             	add    esp,0x10
c0019143:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c0019148:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001914f:	75 05                	jne    c0019156 <CPU::displayFeatures()+0x224>
c0019151:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019156:	52                   	push   edx
c0019157:	52                   	push   edx
c0019158:	50                   	push   eax
c0019159:	68 64 b8 02 c0       	push   0xc002b864
c001915e:	e8 bc 9e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019163:	83 c4 10             	add    esp,0x10
c0019166:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001916b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019172:	78 05                	js     c0019179 <CPU::displayFeatures()+0x247>
c0019174:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c0019179:	51                   	push   ecx
c001917a:	51                   	push   ecx
c001917b:	50                   	push   eax
c001917c:	68 7b b8 02 c0       	push   0xc002b87b
c0019181:	e8 99 9e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019186:	83 c4 10             	add    esp,0x10
c0019189:	b8 f2 a0 02 c0       	mov    eax,0xc002a0f2
c001918e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019195:	75 05                	jne    c001919c <CPU::displayFeatures()+0x26a>
c0019197:	b8 f6 a0 02 c0       	mov    eax,0xc002a0f6
c001919c:	52                   	push   edx
c001919d:	52                   	push   edx
c001919e:	50                   	push   eax
c001919f:	68 92 b8 02 c0       	push   0xc002b892
c00191a4:	e8 76 9e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00191a9:	83 c4 18             	add    esp,0x18
c00191ac:	5b                   	pop    ebx
c00191ad:	c3                   	ret    

c00191ae <CPU::detectFeatures()>:
c00191ae:	55                   	push   ebp
c00191af:	57                   	push   edi
c00191b0:	56                   	push   esi
c00191b1:	53                   	push   ebx
c00191b2:	83 ec 50             	sub    esp,0x50
c00191b5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00191b9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00191c3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00191ca:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00191d0:	6a 0d                	push   0xd
c00191d2:	6a 00                	push   0x0
c00191d4:	57                   	push   edi
c00191d5:	e8 9e 75 fe ff       	call   c0000778 <memset>
c00191da:	83 c4 10             	add    esp,0x10
c00191dd:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c00191e2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191e9:	0f 84 20 09 00 00    	je     c0019b0f <CPU::detectFeatures()+0x961>
c00191ef:	83 ec 0c             	sub    esp,0xc
c00191f2:	6a 10                	push   0x10
c00191f4:	e8 f3 fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c00191f9:	83 e0 01             	and    eax,0x1
c00191fc:	8d 14 00             	lea    edx,[eax+eax*1]
c00191ff:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019205:	83 e0 fd             	and    eax,0xfffffffd
c0019208:	09 d0                	or     eax,edx
c001920a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019210:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019217:	e8 d0 fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c001921c:	83 e0 01             	and    eax,0x1
c001921f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019226:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001922c:	83 e0 fb             	and    eax,0xfffffffb
c001922f:	09 d0                	or     eax,edx
c0019231:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019237:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001923e:	e8 a9 fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c0019243:	83 e0 01             	and    eax,0x1
c0019246:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001924d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019253:	83 e0 f7             	and    eax,0xfffffff7
c0019256:	09 d0                	or     eax,edx
c0019258:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001925e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019265:	e8 82 fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c001926a:	83 e0 01             	and    eax,0x1
c001926d:	c1 e0 04             	shl    eax,0x4
c0019270:	88 c2                	mov    dl,al
c0019272:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019278:	83 e0 ef             	and    eax,0xffffffef
c001927b:	09 d0                	or     eax,edx
c001927d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019283:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001928a:	e8 5d fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c001928f:	83 e0 01             	and    eax,0x1
c0019292:	c1 e0 05             	shl    eax,0x5
c0019295:	88 c2                	mov    dl,al
c0019297:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001929d:	83 e0 df             	and    eax,0xffffffdf
c00192a0:	09 d0                	or     eax,edx
c00192a2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00192af:	e8 38 fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c00192b4:	83 e0 01             	and    eax,0x1
c00192b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00192ba:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00192c0:	83 e0 fd             	and    eax,0xfffffffd
c00192c3:	09 d0                	or     eax,edx
c00192c5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00192cb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192d2:	e8 15 fb ff ff       	call   c0018dec <CPU::cpuidCheckEDX(unsigned int)>
c00192d7:	83 e0 01             	and    eax,0x1
c00192da:	c1 e0 06             	shl    eax,0x6
c00192dd:	88 c2                	mov    dl,al
c00192df:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192e5:	83 e0 bf             	and    eax,0xffffffbf
c00192e8:	09 d0                	or     eax,edx
c00192ea:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192f0:	58                   	pop    eax
c00192f1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192f5:	56                   	push   esi
c00192f6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192fa:	55                   	push   ebp
c00192fb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192ff:	50                   	push   eax
c0019300:	8d 54 24 28          	lea    edx,[esp+0x28]
c0019304:	52                   	push   edx
c0019305:	6a 00                	push   0x0
c0019307:	e8 5c fa ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001930c:	83 c4 1c             	add    esp,0x1c
c001930f:	6a 04                	push   0x4
c0019311:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019315:	50                   	push   eax
c0019316:	57                   	push   edi
c0019317:	e8 28 74 fe ff       	call   c0000744 <memcpy>
c001931c:	83 c4 0c             	add    esp,0xc
c001931f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0019325:	6a 04                	push   0x4
c0019327:	56                   	push   esi
c0019328:	50                   	push   eax
c0019329:	e8 16 74 fe ff       	call   c0000744 <memcpy>
c001932e:	83 c4 0c             	add    esp,0xc
c0019331:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019337:	6a 04                	push   0x4
c0019339:	55                   	push   ebp
c001933a:	50                   	push   eax
c001933b:	e8 04 74 fe ff       	call   c0000744 <memcpy>
c0019340:	58                   	pop    eax
c0019341:	5a                   	pop    edx
c0019342:	68 a9 b8 02 c0       	push   0xc002b8a9
c0019347:	57                   	push   edi
c0019348:	e8 73 75 fe ff       	call   c00008c0 <strcmp>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	85 c0                	test   eax,eax
c0019352:	75 0f                	jne    c0019363 <CPU::detectFeatures()+0x1b5>
c0019354:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001935e:	e9 22 02 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c0019363:	50                   	push   eax
c0019364:	50                   	push   eax
c0019365:	68 b6 b8 02 c0       	push   0xc002b8b6
c001936a:	57                   	push   edi
c001936b:	e8 50 75 fe ff       	call   c00008c0 <strcmp>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	85 c0                	test   eax,eax
c0019375:	74 dd                	je     c0019354 <CPU::detectFeatures()+0x1a6>
c0019377:	51                   	push   ecx
c0019378:	51                   	push   ecx
c0019379:	68 c3 b8 02 c0       	push   0xc002b8c3
c001937e:	57                   	push   edi
c001937f:	e8 3c 75 fe ff       	call   c00008c0 <strcmp>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	85 c0                	test   eax,eax
c0019389:	74 2a                	je     c00193b5 <CPU::detectFeatures()+0x207>
c001938b:	52                   	push   edx
c001938c:	52                   	push   edx
c001938d:	68 d0 b8 02 c0       	push   0xc002b8d0
c0019392:	57                   	push   edi
c0019393:	e8 28 75 fe ff       	call   c00008c0 <strcmp>
c0019398:	83 c4 10             	add    esp,0x10
c001939b:	85 c0                	test   eax,eax
c001939d:	74 16                	je     c00193b5 <CPU::detectFeatures()+0x207>
c001939f:	50                   	push   eax
c00193a0:	50                   	push   eax
c00193a1:	68 dd b8 02 c0       	push   0xc002b8dd
c00193a6:	57                   	push   edi
c00193a7:	e8 14 75 fe ff       	call   c00008c0 <strcmp>
c00193ac:	83 c4 10             	add    esp,0x10
c00193af:	85 c0                	test   eax,eax
c00193b1:	74 48                	je     c00193fb <CPU::detectFeatures()+0x24d>
c00193b3:	eb 0f                	jmp    c00193c4 <CPU::detectFeatures()+0x216>
c00193b5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00193bf:	e9 c1 01 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c00193c4:	50                   	push   eax
c00193c5:	50                   	push   eax
c00193c6:	68 ea b8 02 c0       	push   0xc002b8ea
c00193cb:	57                   	push   edi
c00193cc:	e8 ef 74 fe ff       	call   c00008c0 <strcmp>
c00193d1:	83 c4 10             	add    esp,0x10
c00193d4:	85 c0                	test   eax,eax
c00193d6:	74 23                	je     c00193fb <CPU::detectFeatures()+0x24d>
c00193d8:	50                   	push   eax
c00193d9:	50                   	push   eax
c00193da:	68 f7 b8 02 c0       	push   0xc002b8f7
c00193df:	57                   	push   edi
c00193e0:	e8 db 74 fe ff       	call   c00008c0 <strcmp>
c00193e5:	83 c4 10             	add    esp,0x10
c00193e8:	85 c0                	test   eax,eax
c00193ea:	75 1e                	jne    c001940a <CPU::detectFeatures()+0x25c>
c00193ec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193f6:	e9 8a 01 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c00193fb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019405:	e9 7b 01 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c001940a:	50                   	push   eax
c001940b:	50                   	push   eax
c001940c:	68 04 b9 02 c0       	push   0xc002b904
c0019411:	57                   	push   edi
c0019412:	e8 a9 74 fe ff       	call   c00008c0 <strcmp>
c0019417:	83 c4 10             	add    esp,0x10
c001941a:	85 c0                	test   eax,eax
c001941c:	75 0f                	jne    c001942d <CPU::detectFeatures()+0x27f>
c001941e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019428:	e9 58 01 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c001942d:	50                   	push   eax
c001942e:	50                   	push   eax
c001942f:	68 c3 b8 02 c0       	push   0xc002b8c3
c0019434:	57                   	push   edi
c0019435:	e8 86 74 fe ff       	call   c00008c0 <strcmp>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	85 c0                	test   eax,eax
c001943f:	75 0f                	jne    c0019450 <CPU::detectFeatures()+0x2a2>
c0019441:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001944b:	e9 35 01 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c0019450:	50                   	push   eax
c0019451:	50                   	push   eax
c0019452:	68 11 b9 02 c0       	push   0xc002b911
c0019457:	57                   	push   edi
c0019458:	e8 63 74 fe ff       	call   c00008c0 <strcmp>
c001945d:	83 c4 10             	add    esp,0x10
c0019460:	85 c0                	test   eax,eax
c0019462:	75 0f                	jne    c0019473 <CPU::detectFeatures()+0x2c5>
c0019464:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001946e:	e9 12 01 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c0019473:	51                   	push   ecx
c0019474:	51                   	push   ecx
c0019475:	68 1e b9 02 c0       	push   0xc002b91e
c001947a:	57                   	push   edi
c001947b:	e8 40 74 fe ff       	call   c00008c0 <strcmp>
c0019480:	83 c4 10             	add    esp,0x10
c0019483:	85 c0                	test   eax,eax
c0019485:	75 0f                	jne    c0019496 <CPU::detectFeatures()+0x2e8>
c0019487:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019491:	e9 ef 00 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c0019496:	52                   	push   edx
c0019497:	52                   	push   edx
c0019498:	68 2b b9 02 c0       	push   0xc002b92b
c001949d:	57                   	push   edi
c001949e:	e8 1d 74 fe ff       	call   c00008c0 <strcmp>
c00194a3:	83 c4 10             	add    esp,0x10
c00194a6:	85 c0                	test   eax,eax
c00194a8:	75 0f                	jne    c00194b9 <CPU::detectFeatures()+0x30b>
c00194aa:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00194b4:	e9 cc 00 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c00194b9:	50                   	push   eax
c00194ba:	50                   	push   eax
c00194bb:	68 38 b9 02 c0       	push   0xc002b938
c00194c0:	57                   	push   edi
c00194c1:	e8 fa 73 fe ff       	call   c00008c0 <strcmp>
c00194c6:	83 c4 10             	add    esp,0x10
c00194c9:	85 c0                	test   eax,eax
c00194cb:	75 0f                	jne    c00194dc <CPU::detectFeatures()+0x32e>
c00194cd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00194d7:	e9 a9 00 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c00194dc:	50                   	push   eax
c00194dd:	50                   	push   eax
c00194de:	68 45 b9 02 c0       	push   0xc002b945
c00194e3:	57                   	push   edi
c00194e4:	e8 d7 73 fe ff       	call   c00008c0 <strcmp>
c00194e9:	83 c4 10             	add    esp,0x10
c00194ec:	85 c0                	test   eax,eax
c00194ee:	75 0f                	jne    c00194ff <CPU::detectFeatures()+0x351>
c00194f0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194fa:	e9 86 00 00 00       	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c00194ff:	50                   	push   eax
c0019500:	50                   	push   eax
c0019501:	68 52 b9 02 c0       	push   0xc002b952
c0019506:	57                   	push   edi
c0019507:	e8 b4 73 fe ff       	call   c00008c0 <strcmp>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	85 c0                	test   eax,eax
c0019511:	75 0c                	jne    c001951f <CPU::detectFeatures()+0x371>
c0019513:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001951d:	eb 66                	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c001951f:	50                   	push   eax
c0019520:	50                   	push   eax
c0019521:	68 5f b9 02 c0       	push   0xc002b95f
c0019526:	57                   	push   edi
c0019527:	e8 94 73 fe ff       	call   c00008c0 <strcmp>
c001952c:	83 c4 10             	add    esp,0x10
c001952f:	85 c0                	test   eax,eax
c0019531:	75 0c                	jne    c001953f <CPU::detectFeatures()+0x391>
c0019533:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001953d:	eb 46                	jmp    c0019585 <CPU::detectFeatures()+0x3d7>
c001953f:	50                   	push   eax
c0019540:	50                   	push   eax
c0019541:	68 6c b9 02 c0       	push   0xc002b96c
c0019546:	57                   	push   edi
c0019547:	e8 74 73 fe ff       	call   c00008c0 <strcmp>
c001954c:	83 c4 10             	add    esp,0x10
c001954f:	85 c0                	test   eax,eax
c0019551:	74 e0                	je     c0019533 <CPU::detectFeatures()+0x385>
c0019553:	50                   	push   eax
c0019554:	50                   	push   eax
c0019555:	68 79 b9 02 c0       	push   0xc002b979
c001955a:	57                   	push   edi
c001955b:	e8 60 73 fe ff       	call   c00008c0 <strcmp>
c0019560:	83 c4 10             	add    esp,0x10
c0019563:	85 c0                	test   eax,eax
c0019565:	74 cc                	je     c0019533 <CPU::detectFeatures()+0x385>
c0019567:	51                   	push   ecx
c0019568:	51                   	push   ecx
c0019569:	68 86 b9 02 c0       	push   0xc002b986
c001956e:	57                   	push   edi
c001956f:	e8 4c 73 fe ff       	call   c00008c0 <strcmp>
c0019574:	83 c4 10             	add    esp,0x10
c0019577:	85 c0                	test   eax,eax
c0019579:	74 b8                	je     c0019533 <CPU::detectFeatures()+0x385>
c001957b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019585:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001958a:	0f 86 be 00 00 00    	jbe    c001964e <CPU::detectFeatures()+0x4a0>
c0019590:	83 ec 0c             	sub    esp,0xc
c0019593:	68 80 00 00 00       	push   0x80
c0019598:	e8 ab f8 ff ff       	call   c0018e48 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001959d:	83 e0 01             	and    eax,0x1
c00195a0:	c1 e0 06             	shl    eax,0x6
c00195a3:	88 c2                	mov    dl,al
c00195a5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195ab:	83 e0 bf             	and    eax,0xffffffbf
c00195ae:	09 d0                	or     eax,edx
c00195b0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195b6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00195bd:	e8 86 f8 ff ff       	call   c0018e48 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195c2:	83 e0 01             	and    eax,0x1
c00195c5:	c1 e0 04             	shl    eax,0x4
c00195c8:	88 c2                	mov    dl,al
c00195ca:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195d0:	83 e0 ef             	and    eax,0xffffffef
c00195d3:	09 d0                	or     eax,edx
c00195d5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195db:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195e2:	e8 61 f8 ff ff       	call   c0018e48 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195e7:	c1 e0 07             	shl    eax,0x7
c00195ea:	88 c2                	mov    dl,al
c00195ec:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195f2:	83 e0 7f             	and    eax,0x7f
c00195f5:	09 d0                	or     eax,edx
c00195f7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195fd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019604:	e8 6d f8 ff ff       	call   c0018e76 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019609:	83 e0 01             	and    eax,0x1
c001960c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019613:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019619:	83 e0 f7             	and    eax,0xfffffff7
c001961c:	09 d0                	or     eax,edx
c001961e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019624:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001962b:	e8 46 f8 ff ff       	call   c0018e76 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019630:	83 c4 10             	add    esp,0x10
c0019633:	83 e0 01             	and    eax,0x1
c0019636:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001963d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019643:	83 e0 fb             	and    eax,0xfffffffb
c0019646:	09 d0                	or     eax,edx
c0019648:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001964e:	83 ec 0c             	sub    esp,0xc
c0019651:	56                   	push   esi
c0019652:	55                   	push   ebp
c0019653:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019657:	57                   	push   edi
c0019658:	8d 44 24 28          	lea    eax,[esp+0x28]
c001965c:	50                   	push   eax
c001965d:	6a 01                	push   0x1
c001965f:	e8 04 f7 ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019664:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019668:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001966e:	88 ca                	mov    dl,cl
c0019670:	83 e0 f0             	and    eax,0xfffffff0
c0019673:	83 e2 0f             	and    edx,0xf
c0019676:	09 d0                	or     eax,edx
c0019678:	88 ca                	mov    dl,cl
c001967a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019680:	c0 ea 04             	shr    dl,0x4
c0019683:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019687:	0f b6 c2             	movzx  eax,dl
c001968a:	83 c4 20             	add    esp,0x20
c001968d:	c1 e0 06             	shl    eax,0x6
c0019690:	89 c5                	mov    ebp,eax
c0019692:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019698:	66 25 3f c0          	and    ax,0xc03f
c001969c:	09 e8                	or     eax,ebp
c001969e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00196a5:	89 c8                	mov    eax,ecx
c00196a7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00196ad:	c1 e8 08             	shr    eax,0x8
c00196b0:	83 e2 3f             	and    edx,0x3f
c00196b3:	83 e0 0f             	and    eax,0xf
c00196b6:	89 c5                	mov    ebp,eax
c00196b8:	c1 e5 06             	shl    ebp,0x6
c00196bb:	09 d5                	or     ebp,edx
c00196bd:	89 ea                	mov    edx,ebp
c00196bf:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00196c5:	88 c2                	mov    dl,al
c00196c7:	c0 ea 02             	shr    dl,0x2
c00196ca:	89 d5                	mov    ebp,edx
c00196cc:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00196d2:	83 e2 c0             	and    edx,0xffffffc0
c00196d5:	09 d5                	or     ebp,edx
c00196d7:	89 ea                	mov    edx,ebp
c00196d9:	89 cd                	mov    ebp,ecx
c00196db:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196e1:	c1 ed 0c             	shr    ebp,0xc
c00196e4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00196ea:	83 e5 03             	and    ebp,0x3
c00196ed:	83 e2 cf             	and    edx,0xffffffcf
c00196f0:	c1 e5 04             	shl    ebp,0x4
c00196f3:	09 d5                	or     ebp,edx
c00196f5:	3c 06                	cmp    al,0x6
c00196f7:	89 ea                	mov    edx,ebp
c00196f9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196ff:	74 04                	je     c0019705 <CPU::detectFeatures()+0x557>
c0019701:	3c 0f                	cmp    al,0xf
c0019703:	75 5c                	jne    c0019761 <CPU::detectFeatures()+0x5b3>
c0019705:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019709:	89 cd                	mov    ebp,ecx
c001970b:	c1 ed 10             	shr    ebp,0x10
c001970e:	c1 e5 04             	shl    ebp,0x4
c0019711:	09 ea                	or     edx,ebp
c0019713:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019719:	0f b6 d2             	movzx  edx,dl
c001971c:	66 81 e5 3f c0       	and    bp,0xc03f
c0019721:	c1 e2 06             	shl    edx,0x6
c0019724:	09 ea                	or     edx,ebp
c0019726:	3c 0f                	cmp    al,0xf
c0019728:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001972f:	75 30                	jne    c0019761 <CPU::detectFeatures()+0x5b3>
c0019731:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019737:	c1 e9 14             	shr    ecx,0x14
c001973a:	83 e0 3f             	and    eax,0x3f
c001973d:	83 c1 0f             	add    ecx,0xf
c0019740:	88 ca                	mov    dl,cl
c0019742:	c0 e9 02             	shr    cl,0x2
c0019745:	c1 e2 06             	shl    edx,0x6
c0019748:	09 d0                	or     eax,edx
c001974a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019750:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019756:	83 e0 c0             	and    eax,0xffffffc0
c0019759:	09 c1                	or     ecx,eax
c001975b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019761:	83 ec 0c             	sub    esp,0xc
c0019764:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001976b:	56                   	push   esi
c001976c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019770:	50                   	push   eax
c0019771:	57                   	push   edi
c0019772:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019776:	55                   	push   ebp
c0019777:	68 00 00 00 80       	push   0x80000000
c001977c:	e8 e7 f5 ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019781:	83 c4 20             	add    esp,0x20
c0019784:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001978c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019790:	76 1e                	jbe    c00197b0 <CPU::detectFeatures()+0x602>
c0019792:	83 ec 0c             	sub    esp,0xc
c0019795:	56                   	push   esi
c0019796:	50                   	push   eax
c0019797:	57                   	push   edi
c0019798:	55                   	push   ebp
c0019799:	68 01 00 00 80       	push   0x80000001
c001979e:	e8 c5 f5 ff ff       	call   c0018d68 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197a3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00197ad:	83 c4 20             	add    esp,0x20
c00197b0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00197b6:	83 f8 01             	cmp    eax,0x1
c00197b9:	75 6f                	jne    c001982a <CPU::detectFeatures()+0x67c>
c00197bb:	51                   	push   ecx
c00197bc:	51                   	push   ecx
c00197bd:	68 92 b9 02 c0       	push   0xc002b992
c00197c2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00197c6:	56                   	push   esi
c00197c7:	e8 68 70 fe ff       	call   c0000834 <strcpy>
c00197cc:	5f                   	pop    edi
c00197cd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197d3:	5d                   	pop    ebp
c00197d4:	66 c1 e8 06          	shr    ax,0x6
c00197d8:	0f b6 c0             	movzx  eax,al
c00197db:	50                   	push   eax
c00197dc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197e2:	c1 e8 0e             	shr    eax,0xe
c00197e5:	0f b6 c0             	movzx  eax,al
c00197e8:	50                   	push   eax
c00197e9:	e8 24 f2 ff ff       	call   c0018a12 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197ee:	5a                   	pop    edx
c00197ef:	59                   	pop    ecx
c00197f0:	50                   	push   eax
c00197f1:	56                   	push   esi
c00197f2:	e8 7d 71 fe ff       	call   c0000974 <strcat>
c00197f7:	5f                   	pop    edi
c00197f8:	5d                   	pop    ebp
c00197f9:	56                   	push   esi
c00197fa:	53                   	push   ebx
c00197fb:	e8 28 ae ff ff       	call   c0014628 <Device::setName(char const*)>
c0019800:	58                   	pop    eax
c0019801:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019807:	5a                   	pop    edx
c0019808:	68 99 b9 02 c0       	push   0xc002b999
c001980d:	50                   	push   eax
c001980e:	e8 ad 70 fe ff       	call   c00008c0 <strcmp>
c0019813:	83 c4 10             	add    esp,0x10
c0019816:	85 c0                	test   eax,eax
c0019818:	0f 85 71 03 00 00    	jne    c0019b8f <CPU::detectFeatures()+0x9e1>
c001981e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019825:	e9 65 03 00 00       	jmp    c0019b8f <CPU::detectFeatures()+0x9e1>
c001982a:	83 f8 02             	cmp    eax,0x2
c001982d:	0f 85 b5 00 00 00    	jne    c00198e8 <CPU::detectFeatures()+0x73a>
c0019833:	57                   	push   edi
c0019834:	57                   	push   edi
c0019835:	68 ab b9 02 c0       	push   0xc002b9ab
c001983a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001983e:	56                   	push   esi
c001983f:	e8 f0 6f fe ff       	call   c0000834 <strcpy>
c0019844:	5d                   	pop    ebp
c0019845:	58                   	pop    eax
c0019846:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001984c:	66 c1 e8 06          	shr    ax,0x6
c0019850:	0f b6 c0             	movzx  eax,al
c0019853:	50                   	push   eax
c0019854:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001985a:	c1 e8 0e             	shr    eax,0xe
c001985d:	0f b6 c0             	movzx  eax,al
c0019860:	50                   	push   eax
c0019861:	e8 18 f0 ff ff       	call   c001887e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019866:	5a                   	pop    edx
c0019867:	59                   	pop    ecx
c0019868:	50                   	push   eax
c0019869:	56                   	push   esi
c001986a:	e8 05 71 fe ff       	call   c0000974 <strcat>
c001986f:	5f                   	pop    edi
c0019870:	5d                   	pop    ebp
c0019871:	56                   	push   esi
c0019872:	53                   	push   ebx
c0019873:	e8 b0 ad ff ff       	call   c0014628 <Device::setName(char const*)>
c0019878:	58                   	pop    eax
c0019879:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001987f:	5a                   	pop    edx
c0019880:	68 b0 b9 02 c0       	push   0xc002b9b0
c0019885:	50                   	push   eax
c0019886:	e8 35 70 fe ff       	call   c00008c0 <strcmp>
c001988b:	83 c4 10             	add    esp,0x10
c001988e:	85 c0                	test   eax,eax
c0019890:	75 20                	jne    c00198b2 <CPU::detectFeatures()+0x704>
c0019892:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0019898:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001989e:	a8 01                	test   al,0x1
c00198a0:	74 10                	je     c00198b2 <CPU::detectFeatures()+0x704>
c00198a2:	83 e0 fe             	and    eax,0xfffffffe
c00198a5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00198ab:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00198b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198b8:	c1 e8 0e             	shr    eax,0xe
c00198bb:	3c 05                	cmp    al,0x5
c00198bd:	0f 85 cc 02 00 00    	jne    c0019b8f <CPU::detectFeatures()+0x9e1>
c00198c3:	56                   	push   esi
c00198c4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00198ca:	83 e0 0f             	and    eax,0xf
c00198cd:	50                   	push   eax
c00198ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198d4:	66 c1 e8 06          	shr    ax,0x6
c00198d8:	0f b6 c0             	movzx  eax,al
c00198db:	50                   	push   eax
c00198dc:	6a 05                	push   0x5
c00198de:	e8 11 f4 ff ff       	call   c0018cf4 <CPU::AMD_K6_writeback(int, int, int)>
c00198e3:	e9 1f 02 00 00       	jmp    c0019b07 <CPU::detectFeatures()+0x959>
c00198e8:	8d 50 fd             	lea    edx,[eax-0x3]
c00198eb:	83 fa 01             	cmp    edx,0x1
c00198ee:	76 09                	jbe    c00198f9 <CPU::detectFeatures()+0x74b>
c00198f0:	83 f8 06             	cmp    eax,0x6
c00198f3:	0f 85 91 01 00 00    	jne    c0019a8a <CPU::detectFeatures()+0x8dc>
c00198f9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198ff:	c1 ea 0e             	shr    edx,0xe
c0019902:	80 fa 05             	cmp    dl,0x5
c0019905:	75 7b                	jne    c0019982 <CPU::detectFeatures()+0x7d4>
c0019907:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001990d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019912:	66 81 fa 00 01       	cmp    dx,0x100
c0019917:	75 0c                	jne    c0019925 <CPU::detectFeatures()+0x777>
c0019919:	51                   	push   ecx
c001991a:	51                   	push   ecx
c001991b:	68 b7 b9 02 c0       	push   0xc002b9b7
c0019920:	e9 dc 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019925:	66 81 fa 00 02       	cmp    dx,0x200
c001992a:	75 0c                	jne    c0019938 <CPU::detectFeatures()+0x78a>
c001992c:	52                   	push   edx
c001992d:	52                   	push   edx
c001992e:	68 ca b9 02 c0       	push   0xc002b9ca
c0019933:	e9 c9 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019938:	66 81 fa 40 02       	cmp    dx,0x240
c001993d:	75 0c                	jne    c001994b <CPU::detectFeatures()+0x79d>
c001993f:	50                   	push   eax
c0019940:	50                   	push   eax
c0019941:	68 dc b9 02 c0       	push   0xc002b9dc
c0019946:	e9 b6 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c001994b:	83 f8 06             	cmp    eax,0x6
c001994e:	75 0c                	jne    c001995c <CPU::detectFeatures()+0x7ae>
c0019950:	50                   	push   eax
c0019951:	50                   	push   eax
c0019952:	68 ee b9 02 c0       	push   0xc002b9ee
c0019957:	e9 a5 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c001995c:	83 f8 04             	cmp    eax,0x4
c001995f:	75 0c                	jne    c001996d <CPU::detectFeatures()+0x7bf>
c0019961:	50                   	push   eax
c0019962:	50                   	push   eax
c0019963:	68 fa b9 02 c0       	push   0xc002b9fa
c0019968:	e9 94 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c001996d:	83 f8 03             	cmp    eax,0x3
c0019970:	0f 85 19 02 00 00    	jne    c0019b8f <CPU::detectFeatures()+0x9e1>
c0019976:	50                   	push   eax
c0019977:	50                   	push   eax
c0019978:	68 02 ba 02 c0       	push   0xc002ba02
c001997d:	e9 7f 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019982:	80 fa 06             	cmp    dl,0x6
c0019985:	0f 85 db 00 00 00    	jne    c0019a66 <CPU::detectFeatures()+0x8b8>
c001998b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019991:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019996:	66 81 fa 80 01       	cmp    dx,0x180
c001999b:	75 0c                	jne    c00199a9 <CPU::detectFeatures()+0x7fb>
c001999d:	50                   	push   eax
c001999e:	50                   	push   eax
c001999f:	68 0d ba 02 c0       	push   0xc002ba0d
c00199a4:	e9 58 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c00199a9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00199af:	66 f7 c1 80 ff       	test   cx,0xff80
c00199b4:	75 0c                	jne    c00199c2 <CPU::detectFeatures()+0x814>
c00199b6:	50                   	push   eax
c00199b7:	50                   	push   eax
c00199b8:	68 1d ba 02 c0       	push   0xc002ba1d
c00199bd:	e9 3f 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c00199c2:	66 81 fa 40 02       	cmp    dx,0x240
c00199c7:	75 0c                	jne    c00199d5 <CPU::detectFeatures()+0x827>
c00199c9:	55                   	push   ebp
c00199ca:	55                   	push   ebp
c00199cb:	68 24 ba 02 c0       	push   0xc002ba24
c00199d0:	e9 2c 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c00199d5:	66 81 fa 80 02       	cmp    dx,0x280
c00199da:	75 0c                	jne    c00199e8 <CPU::detectFeatures()+0x83a>
c00199dc:	57                   	push   edi
c00199dd:	57                   	push   edi
c00199de:	68 2d ba 02 c0       	push   0xc002ba2d
c00199e3:	e9 19 01 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c00199e8:	66 81 fa 40 03       	cmp    dx,0x340
c00199ed:	74 ed                	je     c00199dc <CPU::detectFeatures()+0x82e>
c00199ef:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199f4:	75 0c                	jne    c0019a02 <CPU::detectFeatures()+0x854>
c00199f6:	56                   	push   esi
c00199f7:	56                   	push   esi
c00199f8:	68 34 ba 02 c0       	push   0xc002ba34
c00199fd:	e9 ff 00 00 00       	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019a02:	83 f8 06             	cmp    eax,0x6
c0019a05:	0f 84 45 ff ff ff    	je     c0019950 <CPU::detectFeatures()+0x7a2>
c0019a0b:	83 f8 04             	cmp    eax,0x4
c0019a0e:	0f 84 4d ff ff ff    	je     c0019961 <CPU::detectFeatures()+0x7b3>
c0019a14:	83 f8 03             	cmp    eax,0x3
c0019a17:	0f 85 72 01 00 00    	jne    c0019b8f <CPU::detectFeatures()+0x9e1>
c0019a1d:	51                   	push   ecx
c0019a1e:	51                   	push   ecx
c0019a1f:	68 3d ba 02 c0       	push   0xc002ba3d
c0019a24:	53                   	push   ebx
c0019a25:	e8 fe ab ff ff       	call   c0014628 <Device::setName(char const*)>
c0019a2a:	b1 c1                	mov    cl,0xc1
c0019a2c:	88 c8                	mov    al,cl
c0019a2e:	e6 22                	out    0x22,al
c0019a30:	e4 23                	in     al,0x23
c0019a32:	88 c2                	mov    dl,al
c0019a34:	88 c8                	mov    al,cl
c0019a36:	e6 22                	out    0x22,al
c0019a38:	88 d0                	mov    al,dl
c0019a3a:	83 c8 10             	or     eax,0x10
c0019a3d:	e6 23                	out    0x23,al
c0019a3f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a46:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a49:	89 d0                	mov    eax,edx
c0019a4b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a51:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a55:	40                   	inc    eax
c0019a56:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a5c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a61:	e9 a1 00 00 00       	jmp    c0019b07 <CPU::detectFeatures()+0x959>
c0019a66:	83 f8 06             	cmp    eax,0x6
c0019a69:	0f 84 e1 fe ff ff    	je     c0019950 <CPU::detectFeatures()+0x7a2>
c0019a6f:	83 f8 04             	cmp    eax,0x4
c0019a72:	0f 84 e9 fe ff ff    	je     c0019961 <CPU::detectFeatures()+0x7b3>
c0019a78:	83 f8 03             	cmp    eax,0x3
c0019a7b:	0f 85 0e 01 00 00    	jne    c0019b8f <CPU::detectFeatures()+0x9e1>
c0019a81:	52                   	push   edx
c0019a82:	52                   	push   edx
c0019a83:	68 48 ba 02 c0       	push   0xc002ba48
c0019a88:	eb 77                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019a8a:	83 f8 07             	cmp    eax,0x7
c0019a8d:	75 09                	jne    c0019a98 <CPU::detectFeatures()+0x8ea>
c0019a8f:	50                   	push   eax
c0019a90:	50                   	push   eax
c0019a91:	68 52 ba 02 c0       	push   0xc002ba52
c0019a96:	eb 69                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019a98:	83 f8 0a             	cmp    eax,0xa
c0019a9b:	75 09                	jne    c0019aa6 <CPU::detectFeatures()+0x8f8>
c0019a9d:	50                   	push   eax
c0019a9e:	50                   	push   eax
c0019a9f:	68 5d ba 02 c0       	push   0xc002ba5d
c0019aa4:	eb 5b                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019aa6:	83 f8 0b             	cmp    eax,0xb
c0019aa9:	75 09                	jne    c0019ab4 <CPU::detectFeatures()+0x906>
c0019aab:	50                   	push   eax
c0019aac:	50                   	push   eax
c0019aad:	68 65 ba 02 c0       	push   0xc002ba65
c0019ab2:	eb 4d                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019ab4:	83 f8 08             	cmp    eax,0x8
c0019ab7:	75 09                	jne    c0019ac2 <CPU::detectFeatures()+0x914>
c0019ab9:	50                   	push   eax
c0019aba:	50                   	push   eax
c0019abb:	68 6e ba 02 c0       	push   0xc002ba6e
c0019ac0:	eb 3f                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019ac2:	83 f8 09             	cmp    eax,0x9
c0019ac5:	75 09                	jne    c0019ad0 <CPU::detectFeatures()+0x922>
c0019ac7:	50                   	push   eax
c0019ac8:	50                   	push   eax
c0019ac9:	68 76 ba 02 c0       	push   0xc002ba76
c0019ace:	eb 31                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019ad0:	83 f8 05             	cmp    eax,0x5
c0019ad3:	75 09                	jne    c0019ade <CPU::detectFeatures()+0x930>
c0019ad5:	50                   	push   eax
c0019ad6:	50                   	push   eax
c0019ad7:	68 7e ba 02 c0       	push   0xc002ba7e
c0019adc:	eb 23                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019ade:	83 f8 0c             	cmp    eax,0xc
c0019ae1:	75 09                	jne    c0019aec <CPU::detectFeatures()+0x93e>
c0019ae3:	55                   	push   ebp
c0019ae4:	55                   	push   ebp
c0019ae5:	68 8c ba 02 c0       	push   0xc002ba8c
c0019aea:	eb 15                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019aec:	83 f8 0d             	cmp    eax,0xd
c0019aef:	75 09                	jne    c0019afa <CPU::detectFeatures()+0x94c>
c0019af1:	57                   	push   edi
c0019af2:	57                   	push   edi
c0019af3:	68 97 ba 02 c0       	push   0xc002ba97
c0019af8:	eb 07                	jmp    c0019b01 <CPU::detectFeatures()+0x953>
c0019afa:	56                   	push   esi
c0019afb:	56                   	push   esi
c0019afc:	68 ab ba 02 c0       	push   0xc002baab
c0019b01:	53                   	push   ebx
c0019b02:	e8 21 ab ff ff       	call   c0014628 <Device::setName(char const*)>
c0019b07:	83 c4 10             	add    esp,0x10
c0019b0a:	e9 80 00 00 00       	jmp    c0019b8f <CPU::detectFeatures()+0x9e1>
c0019b0f:	51                   	push   ecx
c0019b10:	51                   	push   ecx
c0019b11:	68 f7 b8 02 c0       	push   0xc002b8f7
c0019b16:	57                   	push   edi
c0019b17:	e8 18 6d fe ff       	call   c0000834 <strcpy>
c0019b1c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019b26:	e8 83 67 fe ff       	call   c00002ae <is486>
c0019b2b:	83 c4 10             	add    esp,0x10
c0019b2e:	85 c0                	test   eax,eax
c0019b30:	74 2b                	je     c0019b5d <CPU::detectFeatures()+0x9af>
c0019b32:	52                   	push   edx
c0019b33:	52                   	push   edx
c0019b34:	68 b7 ba 02 c0       	push   0xc002bab7
c0019b39:	53                   	push   ebx
c0019b3a:	e8 e9 aa ff ff       	call   c0014628 <Device::setName(char const*)>
c0019b3f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b46:	0f 20 c0             	mov    eax,cr0
c0019b49:	83 e0 14             	and    eax,0x14
c0019b4c:	83 c4 10             	add    esp,0x10
c0019b4f:	83 f8 04             	cmp    eax,0x4
c0019b52:	75 1f                	jne    c0019b73 <CPU::detectFeatures()+0x9c5>
c0019b54:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b5b:	eb 32                	jmp    c0019b8f <CPU::detectFeatures()+0x9e1>
c0019b5d:	50                   	push   eax
c0019b5e:	50                   	push   eax
c0019b5f:	68 c2 ba 02 c0       	push   0xc002bac2
c0019b64:	53                   	push   ebx
c0019b65:	e8 be aa ff ff       	call   c0014628 <Device::setName(char const*)>
c0019b6a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b71:	eb d3                	jmp    c0019b46 <CPU::detectFeatures()+0x998>
c0019b73:	e8 11 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b78:	83 e0 01             	and    eax,0x1
c0019b7b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b7e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b84:	83 e0 fd             	and    eax,0xfffffffd
c0019b87:	09 d0                	or     eax,edx
c0019b89:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b8f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b96:	83 c4 4c             	add    esp,0x4c
c0019b99:	5b                   	pop    ebx
c0019b9a:	5e                   	pop    esi
c0019b9b:	5f                   	pop    edi
c0019b9c:	5d                   	pop    ebp
c0019b9d:	c3                   	ret    

c0019b9e <CPU::setupSMEP()>:
c0019b9e:	0f 20 e0             	mov    eax,cr4
c0019ba1:	0d 00 00 10 00       	or     eax,0x100000
c0019ba6:	0f 22 e0             	mov    cr4,eax
c0019ba9:	c3                   	ret    

c0019baa <CPU::setupUMIP()>:
c0019baa:	0f 20 e0             	mov    eax,cr4
c0019bad:	80 cc 08             	or     ah,0x8
c0019bb0:	0f 22 e0             	mov    cr4,eax
c0019bb3:	c3                   	ret    

c0019bb4 <CPU::setupTSC()>:
c0019bb4:	0f 20 e0             	mov    eax,cr4
c0019bb7:	83 c8 04             	or     eax,0x4
c0019bba:	0f 22 e0             	mov    cr4,eax
c0019bbd:	c3                   	ret    

c0019bbe <CPU::setupLargePages()>:
c0019bbe:	0f 20 e0             	mov    eax,cr4
c0019bc1:	83 c8 10             	or     eax,0x10
c0019bc4:	0f 22 e0             	mov    cr4,eax
c0019bc7:	c3                   	ret    

c0019bc8 <CPU::setupPAT()>:
c0019bc8:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0019bcd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bd4:	74 2c                	je     c0019c02 <CPU::setupPAT()+0x3a>
c0019bd6:	53                   	push   ebx
c0019bd7:	83 ec 10             	sub    esp,0x10
c0019bda:	68 77 02 00 00       	push   0x277
c0019bdf:	50                   	push   eax
c0019be0:	e8 03 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019be5:	83 e2 f8             	and    edx,0xfffffff8
c0019be8:	83 ca 01             	or     edx,0x1
c0019beb:	52                   	push   edx
c0019bec:	50                   	push   eax
c0019bed:	68 77 02 00 00       	push   0x277
c0019bf2:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c0019bf8:	e8 17 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bfd:	83 c4 28             	add    esp,0x28
c0019c00:	5b                   	pop    ebx
c0019c01:	c3                   	ret    
c0019c02:	c3                   	ret    
c0019c03:	90                   	nop

c0019c04 <CPU::setupMTRR()>:
c0019c04:	c3                   	ret    
c0019c05:	90                   	nop

c0019c06 <CPU::setupGlobalPages()>:
c0019c06:	0f 20 e0             	mov    eax,cr4
c0019c09:	0c 80                	or     al,0x80
c0019c0b:	0f 22 e0             	mov    cr4,eax
c0019c0e:	c3                   	ret    
c0019c0f:	90                   	nop

c0019c10 <CPU::allowUsermodeDataAccess()>:
c0019c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c14:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c1b:	74 03                	je     c0019c20 <CPU::allowUsermodeDataAccess()+0x10>
c0019c1d:	0f 01 cb             	stac   
c0019c20:	c3                   	ret    
c0019c21:	90                   	nop

c0019c22 <CPU::prohibitUsermodeDataAccess()>:
c0019c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c26:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019c2d:	74 03                	je     c0019c32 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019c2f:	0f 01 ca             	clac   
c0019c32:	c3                   	ret    
c0019c33:	90                   	nop

c0019c34 <CPU::setupSMAP()>:
c0019c34:	0f 20 e0             	mov    eax,cr4
c0019c37:	0d 00 00 20 00       	or     eax,0x200000
c0019c3c:	0f 22 e0             	mov    cr4,eax
c0019c3f:	eb e1                	jmp    c0019c22 <CPU::prohibitUsermodeDataAccess()>
c0019c41:	90                   	nop

c0019c42 <CPU::setupFeatures()>:
c0019c42:	83 ec 0c             	sub    esp,0xc
c0019c45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c49:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c50:	74 07                	je     c0019c59 <CPU::setupFeatures()+0x17>
c0019c52:	52                   	push   edx
c0019c53:	e8 46 ff ff ff       	call   c0019b9e <CPU::setupSMEP()>
c0019c58:	58                   	pop    eax
c0019c59:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c60:	74 07                	je     c0019c69 <CPU::setupFeatures()+0x27>
c0019c62:	52                   	push   edx
c0019c63:	e8 cc ff ff ff       	call   c0019c34 <CPU::setupSMAP()>
c0019c68:	58                   	pop    eax
c0019c69:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c70:	74 07                	je     c0019c79 <CPU::setupFeatures()+0x37>
c0019c72:	52                   	push   edx
c0019c73:	e8 32 ff ff ff       	call   c0019baa <CPU::setupUMIP()>
c0019c78:	58                   	pop    eax
c0019c79:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c80:	74 07                	je     c0019c89 <CPU::setupFeatures()+0x47>
c0019c82:	52                   	push   edx
c0019c83:	e8 2c ff ff ff       	call   c0019bb4 <CPU::setupTSC()>
c0019c88:	58                   	pop    eax
c0019c89:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c90:	74 07                	je     c0019c99 <CPU::setupFeatures()+0x57>
c0019c92:	52                   	push   edx
c0019c93:	e8 26 ff ff ff       	call   c0019bbe <CPU::setupLargePages()>
c0019c98:	59                   	pop    ecx
c0019c99:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ca0:	74 07                	je     c0019ca9 <CPU::setupFeatures()+0x67>
c0019ca2:	52                   	push   edx
c0019ca3:	e8 5e ff ff ff       	call   c0019c06 <CPU::setupGlobalPages()>
c0019ca8:	58                   	pop    eax
c0019ca9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019cb0:	74 0c                	je     c0019cbe <CPU::setupFeatures()+0x7c>
c0019cb2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019cb6:	83 c4 0c             	add    esp,0xc
c0019cb9:	e9 0a ff ff ff       	jmp    c0019bc8 <CPU::setupPAT()>
c0019cbe:	83 c4 0c             	add    esp,0xc
c0019cc1:	c3                   	ret    

c0019cc2 <CPU::open(int, int, void*)>:
c0019cc2:	57                   	push   edi
c0019cc3:	56                   	push   esi
c0019cc4:	53                   	push   ebx
c0019cc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cc9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ccd:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019cd3:	83 ec 0c             	sub    esp,0xc
c0019cd6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cdc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019ce2:	50                   	push   eax
c0019ce3:	e8 ec 53 ff ff       	call   c000f0d4 <GDT::setup()>
c0019ce8:	83 c4 0c             	add    esp,0xc
c0019ceb:	6a 00                	push   0x0
c0019ced:	68 ef be ad de       	push   0xdeadbeef
c0019cf2:	57                   	push   edi
c0019cf3:	e8 1e 78 ff ff       	call   c0011516 <TSS::setup(unsigned long, unsigned long)>
c0019cf8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cfb:	e8 f6 77 ff ff       	call   c00114f6 <TSS::flush()>
c0019d00:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019d06:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d09:	e8 22 56 ff ff       	call   c000f330 <IDT::setup()>
c0019d0e:	b8 00 04 00 00       	mov    eax,0x400
c0019d13:	0f 23 f8             	mov    db7,eax
c0019d16:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019d20:	e8 c0 61 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019d25:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019d2b:	89 30                	mov    DWORD PTR [eax],esi
c0019d2d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d33:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d36:	58                   	pop    eax
c0019d37:	5a                   	pop    edx
c0019d38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d3e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d42:	e8 0d 89 ff ff       	call   c0012654 <VAS::setCPUSpecific(unsigned long)>
c0019d47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4a:	e8 5f f4 ff ff       	call   c00191ae <CPU::detectFeatures()>
c0019d4f:	e8 ce bc ff ff       	call   c0015a22 <setupInterruptController()>
c0019d54:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d5a:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c0019d5f:	83 e0 10             	and    eax,0x10
c0019d62:	83 f8 01             	cmp    eax,0x1
c0019d65:	19 c0                	sbb    eax,eax
c0019d67:	83 e0 46             	and    eax,0x46
c0019d6a:	83 c0 1e             	add    eax,0x1e
c0019d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d70:	e8 bb d1 ff ff       	call   c0016f30 <setupTimer(int)>
c0019d75:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d7e:	e8 bf fe ff ff       	call   c0019c42 <CPU::setupFeatures()>
c0019d83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d86:	e8 a7 f1 ff ff       	call   c0018f32 <CPU::displayFeatures()>
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	31 c0                	xor    eax,eax
c0019d90:	5b                   	pop    ebx
c0019d91:	5e                   	pop    esi
c0019d92:	5f                   	pop    edi
c0019d93:	c3                   	ret    

c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d94:	57                   	push   edi
c0019d95:	56                   	push   esi
c0019d96:	53                   	push   ebx
c0019d97:	51                   	push   ecx
c0019d98:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d9c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d9f:	0f 02 c0             	lar    eax,ax
c0019da2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019da5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019da9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019dac:	88 ca                	mov    dl,cl
c0019dae:	c0 ea 06             	shr    dl,0x6
c0019db1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019db5:	89 ca                	mov    edx,ecx
c0019db7:	66 c1 ea 03          	shr    dx,0x3
c0019dbb:	83 e2 07             	and    edx,0x7
c0019dbe:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019dc3:	88 17                	mov    BYTE PTR [edi],dl
c0019dc5:	0f 84 a6 01 00 00    	je     c0019f71 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019dcb:	83 e1 07             	and    ecx,0x7
c0019dce:	80 f9 04             	cmp    cl,0x4
c0019dd1:	0f 84 98 00 00 00    	je     c0019e6f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019dd7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ddc:	0f 95 c0             	setne  al
c0019ddf:	80 f9 05             	cmp    cl,0x5
c0019de2:	0f 95 c2             	setne  dl
c0019de5:	08 c2                	or     dl,al
c0019de7:	74 79                	je     c0019e62 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019de9:	84 c9                	test   cl,cl
c0019deb:	75 05                	jne    c0019df2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019ded:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019df0:	eb 3c                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df2:	80 f9 01             	cmp    cl,0x1
c0019df5:	75 05                	jne    c0019dfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019df7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dfa:	eb 32                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dfc:	80 f9 02             	cmp    cl,0x2
c0019dff:	75 05                	jne    c0019e06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019e01:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019e04:	eb 28                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e06:	31 c0                	xor    eax,eax
c0019e08:	80 f9 03             	cmp    cl,0x3
c0019e0b:	75 05                	jne    c0019e12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019e0d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019e10:	eb 1c                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e12:	80 f9 05             	cmp    cl,0x5
c0019e15:	75 05                	jne    c0019e1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019e17:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019e1a:	eb 12                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e1c:	80 f9 06             	cmp    cl,0x6
c0019e1f:	75 05                	jne    c0019e26 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019e21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019e24:	eb 08                	jmp    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e26:	80 f9 07             	cmp    cl,0x7
c0019e29:	75 03                	jne    c0019e2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019e2b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019e2e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e33:	75 10                	jne    c0019e45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e35:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e39:	b9 03 00 00 00       	mov    ecx,0x3
c0019e3e:	01 d0                	add    eax,edx
c0019e40:	e9 37 01 00 00       	jmp    c0019f7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e45:	b9 02 00 00 00       	mov    ecx,0x2
c0019e4a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e4f:	0f 85 27 01 00 00    	jne    c0019f7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e55:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e58:	b9 06 00 00 00       	mov    ecx,0x6
c0019e5d:	e9 1a 01 00 00       	jmp    c0019f7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e62:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e65:	b9 06 00 00 00       	mov    ecx,0x6
c0019e6a:	e9 0f 01 00 00       	jmp    c0019f7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e6f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e72:	88 ca                	mov    dl,cl
c0019e74:	c0 ea 06             	shr    dl,0x6
c0019e77:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e7b:	89 ca                	mov    edx,ecx
c0019e7d:	66 c1 ea 03          	shr    dx,0x3
c0019e81:	83 e2 07             	and    edx,0x7
c0019e84:	80 e1 07             	and    cl,0x7
c0019e87:	75 05                	jne    c0019e8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e89:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e8c:	eb 4c                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8e:	80 f9 01             	cmp    cl,0x1
c0019e91:	75 05                	jne    c0019e98 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e93:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e96:	eb 42                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e98:	80 f9 02             	cmp    cl,0x2
c0019e9b:	75 05                	jne    c0019ea2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e9d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019ea0:	eb 38                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea2:	80 f9 03             	cmp    cl,0x3
c0019ea5:	75 05                	jne    c0019eac <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019ea7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019eaa:	eb 2e                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019eac:	80 f9 04             	cmp    cl,0x4
c0019eaf:	75 12                	jne    c0019ec3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019eb1:	f6 c4 60             	test   ah,0x60
c0019eb4:	75 08                	jne    c0019ebe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019eb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019eb9:	8d 78 14             	lea    edi,[eax+0x14]
c0019ebc:	eb 1c                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ebe:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ec1:	eb 17                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ec3:	80 f9 05             	cmp    cl,0x5
c0019ec6:	75 05                	jne    c0019ecd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019ec8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019ecb:	eb 0d                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ecd:	80 f9 06             	cmp    cl,0x6
c0019ed0:	75 05                	jne    c0019ed7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ed2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ed5:	eb 03                	jmp    c0019eda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ed7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019eda:	84 d2                	test   dl,dl
c0019edc:	75 05                	jne    c0019ee3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ede:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019ee1:	eb 3c                	jmp    c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee3:	80 fa 01             	cmp    dl,0x1
c0019ee6:	75 05                	jne    c0019eed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019ee8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019eeb:	eb 32                	jmp    c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eed:	80 fa 02             	cmp    dl,0x2
c0019ef0:	75 05                	jne    c0019ef7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ef2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ef5:	eb 28                	jmp    c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ef7:	80 fa 03             	cmp    dl,0x3
c0019efa:	75 05                	jne    c0019f01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019efc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019eff:	eb 1e                	jmp    c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f01:	31 c0                	xor    eax,eax
c0019f03:	80 fa 04             	cmp    dl,0x4
c0019f06:	74 17                	je     c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f08:	80 fa 05             	cmp    dl,0x5
c0019f0b:	75 05                	jne    c0019f12 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019f0d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f10:	eb 0d                	jmp    c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f12:	80 fa 06             	cmp    dl,0x6
c0019f15:	75 05                	jne    c0019f1c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019f17:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f1a:	eb 03                	jmp    c0019f1f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019f1c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f1f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f24:	0f 94 c2             	sete   dl
c0019f27:	80 f9 05             	cmp    cl,0x5
c0019f2a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019f2e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f33:	d3 e0                	shl    eax,cl
c0019f35:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f39:	74 0a                	je     c0019f45 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f3b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f3e:	b9 07 00 00 00       	mov    ecx,0x7
c0019f43:	eb 37                	jmp    c0019f7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f45:	01 f8                	add    eax,edi
c0019f47:	b9 03 00 00 00       	mov    ecx,0x3
c0019f4c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f51:	74 2b                	je     c0019f7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f53:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f58:	75 0d                	jne    c0019f67 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f5a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f5e:	01 c8                	add    eax,ecx
c0019f60:	b9 04 00 00 00       	mov    ecx,0x4
c0019f65:	eb 17                	jmp    c0019f7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f67:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f6a:	b9 07 00 00 00       	mov    ecx,0x7
c0019f6f:	eb 0d                	jmp    c0019f7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f71:	b9 02 00 00 00       	mov    ecx,0x2
c0019f76:	b2 01                	mov    dl,0x1
c0019f78:	31 c0                	xor    eax,eax
c0019f7a:	eb 02                	jmp    c0019f7e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f7c:	31 d2                	xor    edx,edx
c0019f7e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f82:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f88:	88 11                	mov    BYTE PTR [ecx],dl
c0019f8a:	5a                   	pop    edx
c0019f8b:	5b                   	pop    ebx
c0019f8c:	5e                   	pop    esi
c0019f8d:	5f                   	pop    edi
c0019f8e:	c3                   	ret    

c0019f8f <Krnl::smpEntry()>:
c0019f8f:	eb fe                	jmp    c0019f8f <Krnl::smpEntry()>

c0019f91 <Krnl::startCPU(int)>:
c0019f91:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0019f96:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f9d:	0f 84 36 01 00 00    	je     c001a0d9 <Krnl::startCPU(int)+0x148>
c0019fa3:	53                   	push   ebx
c0019fa4:	83 ec 08             	sub    esp,0x8
c0019fa7:	e8 14 3f 00 00       	call   c001dec0 <lockScheduler()>
c0019fac:	52                   	push   edx
c0019fad:	52                   	push   edx
c0019fae:	6a 1b                	push   0x1b
c0019fb0:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c0019fb6:	e8 2d 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019fbb:	59                   	pop    ecx
c0019fbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019fc1:	89 c3                	mov    ebx,eax
c0019fc3:	58                   	pop    eax
c0019fc4:	53                   	push   ebx
c0019fc5:	68 fc ba 02 c0       	push   0xc002bafc
c0019fca:	e8 50 90 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0019fcf:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fdd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fe7:	c1 e0 18             	shl    eax,0x18
c0019fea:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019ff0:	83 c4 10             	add    esp,0x10
c0019ff3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019ff9:	09 c2                	or     edx,eax
c0019ffb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a001:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a007:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a00d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a013:	80 cd c5             	or     ch,0xc5
c001a016:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a01c:	f3 90                	pause  
c001a01e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a020:	0f ba e1 0c          	bt     ecx,0xc
c001a024:	72 f6                	jb     c001a01c <Krnl::startCPU(int)+0x8b>
c001a026:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a02c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a032:	09 c1                	or     ecx,eax
c001a034:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a03a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a040:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a046:	80 cd 85             	or     ch,0x85
c001a049:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a04f:	f3 90                	pause  
c001a051:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a053:	0f ba e1 0c          	bt     ecx,0xc
c001a057:	72 f6                	jb     c001a04f <Krnl::startCPU(int)+0xbe>
c001a059:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a063:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a069:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a06f:	09 c1                	or     ecx,eax
c001a071:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a077:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a07d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a083:	81 c9 02 06 00 00    	or     ecx,0x602
c001a089:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a08f:	f3 90                	pause  
c001a091:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a093:	0f ba e1 0c          	bt     ecx,0xc
c001a097:	72 f6                	jb     c001a08f <Krnl::startCPU(int)+0xfe>
c001a099:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a0a3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a0a9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a0af:	09 c8                	or     eax,ecx
c001a0b1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a0b7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a0bd:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a0c2:	0d 02 06 00 00       	or     eax,0x602
c001a0c7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a0cd:	f3 90                	pause  
c001a0cf:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0d1:	0f ba e0 0c          	bt     eax,0xc
c001a0d5:	72 f6                	jb     c001a0cd <Krnl::startCPU(int)+0x13c>
c001a0d7:	eb fe                	jmp    c001a0d7 <Krnl::startCPU(int)+0x146>
c001a0d9:	c3                   	ret    

c001a0da <Krnl::startCPUs()>:
c001a0da:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001a0df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0e5:	88 c2                	mov    dl,al
c001a0e7:	83 e2 0a             	and    edx,0xa
c001a0ea:	80 fa 0a             	cmp    dl,0xa
c001a0ed:	75 09                	jne    c001a0f8 <Krnl::startCPUs()+0x1e>
c001a0ef:	a8 01                	test   al,0x1
c001a0f1:	74 05                	je     c001a0f8 <Krnl::startCPUs()+0x1e>
c001a0f3:	e9 a3 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0f8:	c3                   	ret    
c001a0f9:	90                   	nop

c001a0fa <EnvVarContainer::getEnv(char const*)>:
c001a0fa:	57                   	push   edi
c001a0fb:	56                   	push   esi
c001a0fc:	53                   	push   ebx
c001a0fd:	31 db                	xor    ebx,ebx
c001a0ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a103:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a105:	7e 2b                	jle    c001a132 <EnvVarContainer::getEnv(char const*)+0x38>
c001a107:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a10e:	50                   	push   eax
c001a10f:	50                   	push   eax
c001a110:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a113:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a116:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a11a:	e8 a1 67 fe ff       	call   c00008c0 <strcmp>
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	85 c0                	test   eax,eax
c001a124:	75 09                	jne    c001a12f <EnvVarContainer::getEnv(char const*)+0x35>
c001a126:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a129:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a12d:	eb 05                	jmp    c001a134 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a12f:	43                   	inc    ebx
c001a130:	eb d1                	jmp    c001a103 <EnvVarContainer::getEnv(char const*)+0x9>
c001a132:	31 c0                	xor    eax,eax
c001a134:	5b                   	pop    ebx
c001a135:	5e                   	pop    esi
c001a136:	5f                   	pop    edi
c001a137:	c3                   	ret    

c001a138 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a138:	57                   	push   edi
c001a139:	56                   	push   esi
c001a13a:	53                   	push   ebx
c001a13b:	83 ec 1c             	sub    esp,0x1c
c001a13e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a142:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a146:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a14a:	57                   	push   edi
c001a14b:	e8 44 66 fe ff       	call   c0000794 <strlen>
c001a150:	40                   	inc    eax
c001a151:	89 04 24             	mov    DWORD PTR [esp],eax
c001a154:	e8 ea 56 ff ff       	call   c000f843 <malloc>
c001a159:	89 34 24             	mov    DWORD PTR [esp],esi
c001a15c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a160:	e8 2f 66 fe ff       	call   c0000794 <strlen>
c001a165:	40                   	inc    eax
c001a166:	89 04 24             	mov    DWORD PTR [esp],eax
c001a169:	e8 d5 56 ff ff       	call   c000f843 <malloc>
c001a16e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a171:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a175:	e8 1a 66 fe ff       	call   c0000794 <strlen>
c001a17a:	83 c4 0c             	add    esp,0xc
c001a17d:	40                   	inc    eax
c001a17e:	50                   	push   eax
c001a17f:	6a 00                	push   0x0
c001a181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a185:	e8 ee 65 fe ff       	call   c0000778 <memset>
c001a18a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a18d:	e8 02 66 fe ff       	call   c0000794 <strlen>
c001a192:	83 c4 0c             	add    esp,0xc
c001a195:	40                   	inc    eax
c001a196:	50                   	push   eax
c001a197:	57                   	push   edi
c001a198:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a19c:	e8 a3 65 fe ff       	call   c0000744 <memcpy>
c001a1a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1a4:	e8 eb 65 fe ff       	call   c0000794 <strlen>
c001a1a9:	83 c4 0c             	add    esp,0xc
c001a1ac:	40                   	inc    eax
c001a1ad:	50                   	push   eax
c001a1ae:	6a 00                	push   0x0
c001a1b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1b4:	e8 bf 65 fe ff       	call   c0000778 <memset>
c001a1b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a1bc:	e8 d3 65 fe ff       	call   c0000794 <strlen>
c001a1c1:	83 c4 0c             	add    esp,0xc
c001a1c4:	40                   	inc    eax
c001a1c5:	50                   	push   eax
c001a1c6:	56                   	push   esi
c001a1c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1cb:	e8 74 65 fe ff       	call   c0000744 <memcpy>
c001a1d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1d2:	40                   	inc    eax
c001a1d3:	89 03                	mov    DWORD PTR [ebx],eax
c001a1d5:	c1 e0 03             	shl    eax,0x3
c001a1d8:	5a                   	pop    edx
c001a1d9:	59                   	pop    ecx
c001a1da:	50                   	push   eax
c001a1db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1de:	e8 4c 56 ff ff       	call   c000f82f <realloc>
c001a1e3:	83 c4 0c             	add    esp,0xc
c001a1e6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1e9:	6a 08                	push   0x8
c001a1eb:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1ef:	52                   	push   edx
c001a1f0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1f2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1f6:	50                   	push   eax
c001a1f7:	e8 48 65 fe ff       	call   c0000744 <memcpy>
c001a1fc:	83 c4 20             	add    esp,0x20
c001a1ff:	5b                   	pop    ebx
c001a200:	5e                   	pop    esi
c001a201:	5f                   	pop    edi
c001a202:	c3                   	ret    
c001a203:	90                   	nop

c001a204 <EnvVarContainer::deleteEnv(char const*)>:
c001a204:	c3                   	ret    
c001a205:	90                   	nop

c001a206 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a206:	55                   	push   ebp
c001a207:	57                   	push   edi
c001a208:	56                   	push   esi
c001a209:	53                   	push   ebx
c001a20a:	81 ec 38 01 00 00    	sub    esp,0x138
c001a210:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a217:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a21e:	68 14 01 00 00       	push   0x114
c001a223:	e8 1b 56 ff ff       	call   c000f843 <malloc>
c001a228:	83 c4 0c             	add    esp,0xc
c001a22b:	89 c7                	mov    edi,eax
c001a22d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a230:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a237:	50                   	push   eax
c001a238:	e8 3b 93 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001a23d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a240:	e8 05 96 ff ff       	call   c001384a <File::exists()>
c001a245:	83 c4 10             	add    esp,0x10
c001a248:	84 c0                	test   al,al
c001a24a:	75 31                	jne    c001a27d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a24c:	51                   	push   ecx
c001a24d:	51                   	push   ecx
c001a24e:	6a 12                	push   0x12
c001a250:	57                   	push   edi
c001a251:	e8 86 93 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001a256:	8b 07                	mov    eax,DWORD PTR [edi]
c001a258:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a25b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a25e:	e8 31 65 fe ff       	call   c0000794 <strlen>
c001a263:	5a                   	pop    edx
c001a264:	31 d2                	xor    edx,edx
c001a266:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a26a:	51                   	push   ecx
c001a26b:	55                   	push   ebp
c001a26c:	52                   	push   edx
c001a26d:	50                   	push   eax
c001a26e:	57                   	push   edi
c001a26f:	ff d3                	call   ebx
c001a271:	83 c4 14             	add    esp,0x14
c001a274:	57                   	push   edi
c001a275:	e8 c0 93 ff ff       	call   c001363a <File::close()>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	31 db                	xor    ebx,ebx
c001a27f:	50                   	push   eax
c001a280:	31 ed                	xor    ebp,ebp
c001a282:	68 00 01 00 00       	push   0x100
c001a287:	6a 00                	push   0x0
c001a289:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a28d:	50                   	push   eax
c001a28e:	e8 e5 64 fe ff       	call   c0000778 <memset>
c001a293:	58                   	pop    eax
c001a294:	5a                   	pop    edx
c001a295:	6a 01                	push   0x1
c001a297:	57                   	push   edi
c001a298:	e8 3f 93 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001a29d:	83 c4 10             	add    esp,0x10
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	8b 07                	mov    eax,DWORD PTR [edi]
c001a2a5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a2a9:	51                   	push   ecx
c001a2aa:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a2ae:	52                   	push   edx
c001a2af:	6a 00                	push   0x0
c001a2b1:	6a 01                	push   0x1
c001a2b3:	57                   	push   edi
c001a2b4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a2b7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a2bb:	83 c4 20             	add    esp,0x20
c001a2be:	3c 0d                	cmp    al,0xd
c001a2c0:	0f 84 12 01 00 00    	je     c001a3d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a2c6:	85 db                	test   ebx,ebx
c001a2c8:	0f 84 fd 00 00 00    	je     c001a3cb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2ce:	3c 0a                	cmp    al,0xa
c001a2d0:	74 13                	je     c001a2e5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2d2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2d7:	74 0c                	je     c001a2e5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2d9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2df:	0f 8e e6 00 00 00    	jle    c001a3cb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2e5:	83 ec 0c             	sub    esp,0xc
c001a2e8:	8d 53 01             	lea    edx,[ebx+0x1]
c001a2eb:	29 dd                	sub    ebp,ebx
c001a2ed:	52                   	push   edx
c001a2ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2f2:	e8 4c 55 ff ff       	call   c000f843 <malloc>
c001a2f7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2fe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a301:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a305:	e8 39 55 ff ff       	call   c000f843 <malloc>
c001a30a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a30e:	83 c4 0c             	add    esp,0xc
c001a311:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a315:	52                   	push   edx
c001a316:	6a 00                	push   0x0
c001a318:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a31c:	e8 57 64 fe ff       	call   c0000778 <memset>
c001a321:	83 c4 0c             	add    esp,0xc
c001a324:	53                   	push   ebx
c001a325:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a329:	55                   	push   ebp
c001a32a:	01 eb                	add    ebx,ebp
c001a32c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a330:	e8 0f 64 fe ff       	call   c0000744 <memcpy>
c001a335:	83 c4 0c             	add    esp,0xc
c001a338:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a33c:	51                   	push   ecx
c001a33d:	6a 00                	push   0x0
c001a33f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a343:	e8 30 64 fe ff       	call   c0000778 <memset>
c001a348:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a34b:	e8 44 64 fe ff       	call   c0000794 <strlen>
c001a350:	83 c4 0c             	add    esp,0xc
c001a353:	50                   	push   eax
c001a354:	53                   	push   ebx
c001a355:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a359:	e8 e6 63 fe ff       	call   c0000744 <memcpy>
c001a35e:	5b                   	pop    ebx
c001a35f:	58                   	pop    eax
c001a360:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a364:	68 0d bb 02 c0       	push   0xc002bb0d
c001a369:	e8 b1 8c ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a36e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a370:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a373:	40                   	inc    eax
c001a374:	83 c4 10             	add    esp,0x10
c001a377:	89 06                	mov    DWORD PTR [esi],eax
c001a379:	85 d2                	test   edx,edx
c001a37b:	75 0c                	jne    c001a389 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a37d:	83 ec 0c             	sub    esp,0xc
c001a380:	6a 08                	push   0x8
c001a382:	e8 bc 54 ff ff       	call   c000f843 <malloc>
c001a387:	eb 0c                	jmp    c001a395 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a389:	c1 e0 03             	shl    eax,0x3
c001a38c:	51                   	push   ecx
c001a38d:	51                   	push   ecx
c001a38e:	50                   	push   eax
c001a38f:	52                   	push   edx
c001a390:	e8 9a 54 ff ff       	call   c000f82f <realloc>
c001a395:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a398:	83 c4 10             	add    esp,0x10
c001a39b:	31 db                	xor    ebx,ebx
c001a39d:	52                   	push   edx
c001a39e:	6a 08                	push   0x8
c001a3a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a3a4:	50                   	push   eax
c001a3a5:	8b 16                	mov    edx,DWORD PTR [esi]
c001a3a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a3aa:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3ae:	50                   	push   eax
c001a3af:	e8 90 63 fe ff       	call   c0000744 <memcpy>
c001a3b4:	83 c4 0c             	add    esp,0xc
c001a3b7:	68 00 01 00 00       	push   0x100
c001a3bc:	6a 00                	push   0x0
c001a3be:	55                   	push   ebp
c001a3bf:	31 ed                	xor    ebp,ebp
c001a3c1:	e8 b2 63 fe ff       	call   c0000778 <memset>
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	eb 0d                	jmp    c001a3d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3cb:	3c 3d                	cmp    al,0x3d
c001a3cd:	74 07                	je     c001a3d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a3cf:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a3d3:	45                   	inc    ebp
c001a3d4:	eb 02                	jmp    c001a3d8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3d6:	89 eb                	mov    ebx,ebp
c001a3d8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3dd:	0f 85 bd fe ff ff    	jne    c001a2a0 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3e3:	50                   	push   eax
c001a3e4:	50                   	push   eax
c001a3e5:	ff 36                	push   DWORD PTR [esi]
c001a3e7:	68 1b bb 02 c0       	push   0xc002bb1b
c001a3ec:	e8 2e 8c ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a3f1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3f7:	5b                   	pop    ebx
c001a3f8:	5e                   	pop    esi
c001a3f9:	5f                   	pop    edi
c001a3fa:	5d                   	pop    ebp
c001a3fb:	c3                   	ret    

c001a3fc <EnvVarContainer::__loadSystem()>:
c001a3fc:	83 ec 10             	sub    esp,0x10
c001a3ff:	68 40 da 02 c0       	push   0xc002da40
c001a404:	68 46 bb 02 c0       	push   0xc002bb46
c001a409:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a40d:	e8 f4 fd ff ff       	call   c001a206 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a412:	83 c4 1c             	add    esp,0x1c
c001a415:	c3                   	ret    

c001a416 <EnvVarContainer::__loadUser()>:
c001a416:	c3                   	ret    
c001a417:	90                   	nop

c001a418 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a41c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a422:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a426:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a42a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a42d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a431:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a438:	90                   	nop
c001a439:	c3                   	ret    

c001a43a <EnvVarContainer::~EnvVarContainer()>:
c001a43a:	83 ec 0c             	sub    esp,0xc
c001a43d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a441:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a444:	85 c0                	test   eax,eax
c001a446:	74 1d                	je     c001a465 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a44c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a44e:	85 c0                	test   eax,eax
c001a450:	74 13                	je     c001a465 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a456:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a459:	83 ec 0c             	sub    esp,0xc
c001a45c:	50                   	push   eax
c001a45d:	e8 f1 53 ff ff       	call   c000f853 <free>
c001a462:	83 c4 10             	add    esp,0x10
c001a465:	90                   	nop
c001a466:	83 c4 0c             	add    esp,0xc
c001a469:	c3                   	ret    

c001a46a <Krnl::getEnv(Process*, char const*)>:
c001a46a:	53                   	push   ebx
c001a46b:	83 ec 08             	sub    esp,0x8
c001a46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a472:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a476:	39 05 94 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a94,eax
c001a47c:	74 04                	je     c001a482 <Krnl::getEnv(Process*, char const*)+0x18>
c001a47e:	85 c0                	test   eax,eax
c001a480:	75 0b                	jne    c001a48d <Krnl::getEnv(Process*, char const*)+0x23>
c001a482:	a1 74 10 03 c0       	mov    eax,ds:0xc0031074
c001a487:	85 c0                	test   eax,eax
c001a489:	75 19                	jne    c001a4a4 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a48b:	eb 27                	jmp    c001a4b4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a48d:	52                   	push   edx
c001a48e:	52                   	push   edx
c001a48f:	53                   	push   ebx
c001a490:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a496:	e8 5f fc ff ff       	call   c001a0fa <EnvVarContainer::getEnv(char const*)>
c001a49b:	83 c4 10             	add    esp,0x10
c001a49e:	85 c0                	test   eax,eax
c001a4a0:	75 28                	jne    c001a4ca <Krnl::getEnv(Process*, char const*)+0x60>
c001a4a2:	eb de                	jmp    c001a482 <Krnl::getEnv(Process*, char const*)+0x18>
c001a4a4:	52                   	push   edx
c001a4a5:	52                   	push   edx
c001a4a6:	53                   	push   ebx
c001a4a7:	50                   	push   eax
c001a4a8:	e8 4d fc ff ff       	call   c001a0fa <EnvVarContainer::getEnv(char const*)>
c001a4ad:	83 c4 10             	add    esp,0x10
c001a4b0:	85 c0                	test   eax,eax
c001a4b2:	75 16                	jne    c001a4ca <Krnl::getEnv(Process*, char const*)+0x60>
c001a4b4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a4b8:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4c1:	83 c4 08             	add    esp,0x8
c001a4c4:	5b                   	pop    ebx
c001a4c5:	e9 30 fc ff ff       	jmp    c001a0fa <EnvVarContainer::getEnv(char const*)>
c001a4ca:	83 c4 08             	add    esp,0x8
c001a4cd:	5b                   	pop    ebx
c001a4ce:	c3                   	ret    

c001a4cf <Krnl::setEnvSystem(char const*, char const*)>:
c001a4cf:	83 ec 10             	sub    esp,0x10
c001a4d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4da:	ff 35 78 10 03 c0    	push   DWORD PTR ds:0xc0031078
c001a4e0:	e8 53 fc ff ff       	call   c001a138 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4e5:	83 c4 1c             	add    esp,0x1c
c001a4e8:	c3                   	ret    

c001a4e9 <Krnl::setEnvUser(char const*, char const*)>:
c001a4e9:	a1 74 10 03 c0       	mov    eax,ds:0xc0031074
c001a4ee:	85 c0                	test   eax,eax
c001a4f0:	74 15                	je     c001a507 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4f2:	83 ec 10             	sub    esp,0x10
c001a4f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4fd:	50                   	push   eax
c001a4fe:	e8 35 fc ff ff       	call   c001a138 <EnvVarContainer::setEnv(char const*, char const*)>
c001a503:	83 c4 1c             	add    esp,0x1c
c001a506:	c3                   	ret    
c001a507:	c3                   	ret    

c001a508 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a50c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a512:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a516:	e9 1d fc ff ff       	jmp    c001a138 <EnvVarContainer::setEnv(char const*, char const*)>

c001a51b <Krnl::deleteEnvSystem(char const*)>:
c001a51b:	c3                   	ret    

c001a51c <Krnl::deleteEnvUser(char const*)>:
c001a51c:	c3                   	ret    

c001a51d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a51d:	c3                   	ret    

c001a51e <Krnl::newProcessEnv(Process*)>:
c001a51e:	83 ec 28             	sub    esp,0x28
c001a521:	6a 0c                	push   0xc
c001a523:	e8 1b 53 ff ff       	call   c000f843 <malloc>
c001a528:	5a                   	pop    edx
c001a529:	59                   	pop    ecx
c001a52a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a52e:	50                   	push   eax
c001a52f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a533:	e8 e0 fe ff ff       	call   c001a418 <EnvVarContainer::EnvVarContainer(Process*)>
c001a538:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a53c:	83 c4 2c             	add    esp,0x2c
c001a53f:	c3                   	ret    

c001a540 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a540:	56                   	push   esi
c001a541:	53                   	push   ebx
c001a542:	83 ec 10             	sub    esp,0x10
c001a545:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a549:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a54f:	6a 0c                	push   0xc
c001a551:	e8 ed 52 ff ff       	call   c000f843 <malloc>
c001a556:	89 c3                	mov    ebx,eax
c001a558:	58                   	pop    eax
c001a559:	5a                   	pop    edx
c001a55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a55e:	53                   	push   ebx
c001a55f:	e8 b4 fe ff ff       	call   c001a418 <EnvVarContainer::EnvVarContainer(Process*)>
c001a564:	8b 06                	mov    eax,DWORD PTR [esi]
c001a566:	89 03                	mov    DWORD PTR [ebx],eax
c001a568:	c1 e0 03             	shl    eax,0x3
c001a56b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a56e:	e8 d0 52 ff ff       	call   c000f843 <malloc>
c001a573:	83 c4 0c             	add    esp,0xc
c001a576:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a579:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a57b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a582:	52                   	push   edx
c001a583:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a586:	50                   	push   eax
c001a587:	e8 b8 61 fe ff       	call   c0000744 <memcpy>
c001a58c:	89 d8                	mov    eax,ebx
c001a58e:	83 c4 14             	add    esp,0x14
c001a591:	5b                   	pop    ebx
c001a592:	5e                   	pop    esi
c001a593:	c3                   	ret    

c001a594 <Krnl::loadSystemEnv()>:
c001a594:	53                   	push   ebx
c001a595:	83 ec 14             	sub    esp,0x14
c001a598:	6a 0c                	push   0xc
c001a59a:	e8 a4 52 ff ff       	call   c000f843 <malloc>
c001a59f:	89 c3                	mov    ebx,eax
c001a5a1:	58                   	pop    eax
c001a5a2:	5a                   	pop    edx
c001a5a3:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001a5a9:	53                   	push   ebx
c001a5aa:	e8 69 fe ff ff       	call   c001a418 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5b2:	89 1d 78 10 03 c0    	mov    DWORD PTR ds:0xc0031078,ebx
c001a5b8:	e8 3f fe ff ff       	call   c001a3fc <EnvVarContainer::__loadSystem()>
c001a5bd:	83 c4 18             	add    esp,0x18
c001a5c0:	5b                   	pop    ebx
c001a5c1:	c3                   	ret    

c001a5c2 <Krnl::loadUserEnv()>:
c001a5c2:	53                   	push   ebx
c001a5c3:	83 ec 14             	sub    esp,0x14
c001a5c6:	6a 0c                	push   0xc
c001a5c8:	e8 76 52 ff ff       	call   c000f843 <malloc>
c001a5cd:	89 c3                	mov    ebx,eax
c001a5cf:	58                   	pop    eax
c001a5d0:	5a                   	pop    edx
c001a5d1:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001a5d7:	53                   	push   ebx
c001a5d8:	e8 3b fe ff ff       	call   c001a418 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5dd:	89 1d 74 10 03 c0    	mov    DWORD PTR ds:0xc0031074,ebx
c001a5e3:	83 c4 18             	add    esp,0x18
c001a5e6:	5b                   	pop    ebx
c001a5e7:	c3                   	ret    

c001a5e8 <Krnl::flushEnv()>:
c001a5e8:	c3                   	ret    

c001a5e9 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ed:	8b 15 74 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031074
c001a5f3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5f9:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a5fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001a600:	03 01                	add    eax,DWORD PTR [ecx]
c001a602:	85 d2                	test   edx,edx
c001a604:	74 02                	je     c001a608 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a606:	03 02                	add    eax,DWORD PTR [edx]
c001a608:	c3                   	ret    

c001a609 <Krnl::getProcessEnvPair(Process*, int)>:
c001a609:	57                   	push   edi
c001a60a:	8b 0d 74 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031074
c001a610:	56                   	push   esi
c001a611:	85 c9                	test   ecx,ecx
c001a613:	53                   	push   ebx
c001a614:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a618:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a61c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a622:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a626:	8b 02                	mov    eax,DWORD PTR [edx]
c001a628:	75 47                	jne    c001a671 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a62a:	39 c3                	cmp    ebx,eax
c001a62c:	7c 47                	jl     c001a675 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a62e:	8b 15 78 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031078
c001a634:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a636:	01 c1                	add    ecx,eax
c001a638:	39 d9                	cmp    ecx,ebx
c001a63a:	7e 6c                	jle    c001a6a8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a63c:	51                   	push   ecx
c001a63d:	89 d9                	mov    ecx,ebx
c001a63f:	29 c1                	sub    ecx,eax
c001a641:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a644:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a648:	53                   	push   ebx
c001a649:	68 68 bb 02 c0       	push   0xc002bb68
c001a64e:	e8 cc 89 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a653:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a659:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a65b:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a663:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a667:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a66a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a66d:	89 06                	mov    DWORD PTR [esi],eax
c001a66f:	eb 51                	jmp    c001a6c2 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a671:	39 c3                	cmp    ebx,eax
c001a673:	7d 05                	jge    c001a67a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a675:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a678:	eb 20                	jmp    c001a69a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a67a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a67c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a67f:	39 da                	cmp    edx,ebx
c001a681:	7e 04                	jle    c001a687 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a683:	29 c3                	sub    ebx,eax
c001a685:	eb 10                	jmp    c001a697 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a687:	8b 0d 78 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031078
c001a68d:	03 11                	add    edx,DWORD PTR [ecx]
c001a68f:	39 da                	cmp    edx,ebx
c001a691:	7e 15                	jle    c001a6a8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a693:	29 c3                	sub    ebx,eax
c001a695:	29 fb                	sub    ebx,edi
c001a697:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a69a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a69e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a6a1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a6a4:	89 06                	mov    DWORD PTR [esi],eax
c001a6a6:	eb 1d                	jmp    c001a6c5 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a6a8:	83 ec 0c             	sub    esp,0xc
c001a6ab:	68 7c bb 02 c0       	push   0xc002bb7c
c001a6b0:	e8 18 00 00 00       	call   c001a6cd <Krnl::panic(char const*)>
c001a6b5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a6bb:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	89 f0                	mov    eax,esi
c001a6c7:	5b                   	pop    ebx
c001a6c8:	5e                   	pop    esi
c001a6c9:	5f                   	pop    edi
c001a6ca:	c2 04 00             	ret    0x4

c001a6cd <Krnl::panic(char const*)>:
c001a6cd:	55                   	push   ebp
c001a6ce:	89 e5                	mov    ebp,esp
c001a6d0:	53                   	push   ebx
c001a6d1:	83 ec 0c             	sub    esp,0xc
c001a6d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6d7:	fa                   	cli    
c001a6d8:	c6 05 84 10 03 c0 01 	mov    BYTE PTR ds:0xc0031084,0x1
c001a6df:	53                   	push   ebx
c001a6e0:	c6 05 44 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d444,0x0
c001a6e7:	68 96 bb 02 c0       	push   0xc002bb96
c001a6ec:	e8 2e 89 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a6f1:	58                   	pop    eax
c001a6f2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6fd:	e8 55 66 ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c001a702:	83 c4 0c             	add    esp,0xc
c001a705:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a70a:	6a 01                	push   0x1
c001a70c:	6a 0f                	push   0xf
c001a70e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a714:	e8 6f 60 ff ff       	call   c0010788 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a719:	58                   	pop    eax
c001a71a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a71f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a725:	e8 ce 68 ff ff       	call   c0010ff8 <VgaText::clearScreen()>
c001a72a:	58                   	pop    eax
c001a72b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a730:	5a                   	pop    edx
c001a731:	68 af bb 02 c0       	push   0xc002bbaf
c001a736:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73c:	e8 35 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a741:	59                   	pop    ecx
c001a742:	58                   	pop    eax
c001a743:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a748:	68 54 bc 02 c0       	push   0xc002bc54
c001a74d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a753:	e8 1e 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a758:	58                   	pop    eax
c001a759:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a75e:	5a                   	pop    edx
c001a75f:	68 cb bb 02 c0       	push   0xc002bbcb
c001a764:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a76a:	e8 07 6a ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a76f:	59                   	pop    ecx
c001a770:	58                   	pop    eax
c001a771:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a776:	53                   	push   ebx
c001a777:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a77d:	e8 f4 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a782:	58                   	pop    eax
c001a783:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a788:	5a                   	pop    edx
c001a789:	68 eb bb 02 c0       	push   0xc002bbeb
c001a78e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a794:	e8 dd 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a799:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001a79e:	83 c4 10             	add    esp,0x10
c001a7a1:	85 c0                	test   eax,eax
c001a7a3:	74 02                	je     c001a7a7 <Krnl::panic(char const*)+0xda>
c001a7a5:	ff d0                	call   eax
c001a7a7:	83 ec 0c             	sub    esp,0xc
c001a7aa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a7ad:	e8 fd 2f 00 00       	call   c001d7af <Thr::getDriverNameFromAddress(unsigned long)>
c001a7b2:	83 c4 10             	add    esp,0x10
c001a7b5:	89 c3                	mov    ebx,eax
c001a7b7:	85 c0                	test   eax,eax
c001a7b9:	0f 84 50 02 00 00    	je     c001aa0f <Krnl::panic(char const*)+0x342>
c001a7bf:	83 ec 08             	sub    esp,0x8
c001a7c2:	8b 15 94 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a94
c001a7c8:	68 90 bc 02 c0       	push   0xc002bc90
c001a7cd:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7d3:	e8 9e 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a7d8:	58                   	pop    eax
c001a7d9:	5a                   	pop    edx
c001a7da:	8b 15 94 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a94
c001a7e0:	68 cb bb 02 c0       	push   0xc002bbcb
c001a7e5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7eb:	e8 86 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a7f0:	59                   	pop    ecx
c001a7f1:	58                   	pop    eax
c001a7f2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7f7:	53                   	push   ebx
c001a7f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7fe:	e8 73 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a803:	83 c4 10             	add    esp,0x10
c001a806:	83 ec 08             	sub    esp,0x8
c001a809:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a80e:	68 ea bb 02 c0       	push   0xc002bbea
c001a813:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a819:	e8 58 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a81e:	58                   	pop    eax
c001a81f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a824:	5a                   	pop    edx
c001a825:	68 e8 bc 02 c0       	push   0xc002bce8
c001a82a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a830:	e8 41 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a835:	59                   	pop    ecx
c001a836:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a83b:	5b                   	pop    ebx
c001a83c:	68 28 bd 02 c0       	push   0xc002bd28
c001a841:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a847:	e8 2a 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a84c:	58                   	pop    eax
c001a84d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a852:	5a                   	pop    edx
c001a853:	68 d6 bb 02 c0       	push   0xc002bbd6
c001a858:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a85e:	e8 13 69 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a863:	59                   	pop    ecx
c001a864:	5b                   	pop    ebx
c001a865:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a868:	68 ee bb 02 c0       	push   0xc002bbee
c001a86d:	e8 ad 87 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a872:	58                   	pop    eax
c001a873:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a876:	5a                   	pop    edx
c001a877:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a87a:	68 f7 bb 02 c0       	push   0xc002bbf7
c001a87f:	e8 9b 87 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a884:	59                   	pop    ecx
c001a885:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a888:	5b                   	pop    ebx
c001a889:	8b 00                	mov    eax,DWORD PTR [eax]
c001a88b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a88e:	68 00 bc 02 c0       	push   0xc002bc00
c001a893:	e8 87 87 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001a898:	58                   	pop    eax
c001a899:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a89e:	5a                   	pop    edx
c001a89f:	68 6c bd 02 c0       	push   0xc002bd6c
c001a8a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8aa:	e8 c7 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8af:	59                   	pop    ecx
c001a8b0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8b5:	5b                   	pop    ebx
c001a8b6:	68 09 bc 02 c0       	push   0xc002bc09
c001a8bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c1:	e8 b0 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8c6:	0f 20 c0             	mov    eax,cr0
c001a8c9:	5a                   	pop    edx
c001a8ca:	59                   	pop    ecx
c001a8cb:	50                   	push   eax
c001a8cc:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d7:	e8 c0 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a8dc:	5b                   	pop    ebx
c001a8dd:	58                   	pop    eax
c001a8de:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8e3:	68 13 bc 02 c0       	push   0xc002bc13
c001a8e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ee:	e8 83 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a8f3:	0f 20 d0             	mov    eax,cr2
c001a8f6:	5a                   	pop    edx
c001a8f7:	59                   	pop    ecx
c001a8f8:	50                   	push   eax
c001a8f9:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a904:	e8 93 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a909:	5b                   	pop    ebx
c001a90a:	58                   	pop    eax
c001a90b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a910:	68 1d bc 02 c0       	push   0xc002bc1d
c001a915:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a91b:	e8 56 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a920:	0f 20 d8             	mov    eax,cr3
c001a923:	5a                   	pop    edx
c001a924:	59                   	pop    ecx
c001a925:	50                   	push   eax
c001a926:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a92b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a931:	e8 66 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a936:	5b                   	pop    ebx
c001a937:	58                   	pop    eax
c001a938:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a93d:	68 30 bc 02 c0       	push   0xc002bc30
c001a942:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a948:	e8 29 68 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a94d:	0f 20 e0             	mov    eax,cr4
c001a950:	5a                   	pop    edx
c001a951:	59                   	pop    ecx
c001a952:	50                   	push   eax
c001a953:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95e:	e8 39 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a963:	5b                   	pop    ebx
c001a964:	58                   	pop    eax
c001a965:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a96a:	68 3a bc 02 c0       	push   0xc002bc3a
c001a96f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a975:	e8 fc 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a97a:	5a                   	pop    edx
c001a97b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a980:	59                   	pop    ecx
c001a981:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a987:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a98a:	50                   	push   eax
c001a98b:	e8 0c 68 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a990:	5b                   	pop    ebx
c001a991:	58                   	pop    eax
c001a992:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a997:	68 51 bc 02 c0       	push   0xc002bc51
c001a99c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9a2:	e8 cf 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a9a7:	5a                   	pop    edx
c001a9a8:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9ad:	59                   	pop    ecx
c001a9ae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9b4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9b7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9ba:	50                   	push   eax
c001a9bb:	e8 dc 67 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a9c0:	5b                   	pop    ebx
c001a9c1:	58                   	pop    eax
c001a9c2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9c7:	68 51 bc 02 c0       	push   0xc002bc51
c001a9cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d2:	e8 9f 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001a9d7:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9e5:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9e7:	59                   	pop    ecx
c001a9e8:	5b                   	pop    ebx
c001a9e9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9ec:	50                   	push   eax
c001a9ed:	e8 aa 67 ff ff       	call   c001119c <VgaText::putx(unsigned int)>
c001a9f2:	83 c4 10             	add    esp,0x10
c001a9f5:	b2 fe                	mov    dl,0xfe
c001a9f7:	e4 60                	in     al,0x60
c001a9f9:	3c 1c                	cmp    al,0x1c
c001a9fb:	74 04                	je     c001aa01 <Krnl::panic(char const*)+0x334>
c001a9fd:	3c 5a                	cmp    al,0x5a
c001a9ff:	75 f6                	jne    c001a9f7 <Krnl::panic(char const*)+0x32a>
c001aa01:	e4 64                	in     al,0x64
c001aa03:	a8 02                	test   al,0x2
c001aa05:	75 fa                	jne    c001aa01 <Krnl::panic(char const*)+0x334>
c001aa07:	88 d0                	mov    al,dl
c001aa09:	e6 64                	out    0x64,al
c001aa0b:	fa                   	cli    
c001aa0c:	f4                   	hlt    
c001aa0d:	eb e8                	jmp    c001a9f7 <Krnl::panic(char const*)+0x32a>
c001aa0f:	50                   	push   eax
c001aa10:	50                   	push   eax
c001aa11:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001aa16:	68 bc bc 02 c0       	push   0xc002bcbc
c001aa1b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa21:	e8 50 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001aa26:	58                   	pop    eax
c001aa27:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001aa2c:	5a                   	pop    edx
c001aa2d:	68 cb bb 02 c0       	push   0xc002bbcb
c001aa32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa38:	e8 39 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001aa3d:	59                   	pop    ecx
c001aa3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa43:	5b                   	pop    ebx
c001aa44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa47:	83 c0 0c             	add    eax,0xc
c001aa4a:	50                   	push   eax
c001aa4b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001aa50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa56:	e8 1b 67 ff ff       	call   c0011176 <VgaText::puts(char const*)>
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	e9 a3 fd ff ff       	jmp    c001a806 <Krnl::panic(char const*)+0x139>

c001aa63 <Net::switchEndian16(unsigned short)>:
c001aa63:	83 ec 04             	sub    esp,0x4
c001aa66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa6a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa72:	c1 f8 08             	sar    eax,0x8
c001aa75:	89 c2                	mov    edx,eax
c001aa77:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa7b:	c1 e0 08             	shl    eax,0x8
c001aa7e:	09 d0                	or     eax,edx
c001aa80:	83 c4 04             	add    esp,0x4
c001aa83:	c3                   	ret    

c001aa84 <Net::switchEndian32(unsigned int)>:
c001aa84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa88:	c1 e8 18             	shr    eax,0x18
c001aa8b:	89 c2                	mov    edx,eax
c001aa8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa91:	c1 e0 08             	shl    eax,0x8
c001aa94:	25 00 00 ff 00       	and    eax,0xff0000
c001aa99:	09 c2                	or     edx,eax
c001aa9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa9f:	c1 e8 08             	shr    eax,0x8
c001aaa2:	25 00 ff 00 00       	and    eax,0xff00
c001aaa7:	09 c2                	or     edx,eax
c001aaa9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaad:	c1 e0 18             	shl    eax,0x18
c001aab0:	09 d0                	or     eax,edx
c001aab2:	c3                   	ret    

c001aab3 <Net::crc32Calc(unsigned char*, int)>:
c001aab3:	83 ec 10             	sub    esp,0x10
c001aab6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aabb:	75 07                	jne    c001aac4 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aabd:	b8 00 00 00 00       	mov    eax,0x0
c001aac2:	eb 7c                	jmp    c001ab40 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aac4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aac9:	7f 07                	jg     c001aad2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aacb:	b8 00 00 00 00       	mov    eax,0x0
c001aad0:	eb 6e                	jmp    c001ab40 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aad2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aada:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aae6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aaea:	7d 4e                	jge    c001ab3a <Net::crc32Calc(unsigned char*, int)+0x87>
c001aaec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aaf0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aaf4:	01 d0                	add    eax,edx
c001aaf6:	8a 00                	mov    al,BYTE PTR [eax]
c001aaf8:	0f b6 c0             	movzx  eax,al
c001aafb:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aaff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab07:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ab0c:	7f 26                	jg     c001ab34 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ab0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab12:	83 e0 01             	and    eax,0x1
c001ab15:	74 0d                	je     c001ab24 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ab17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab1b:	d1 e8                	shr    eax,1
c001ab1d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ab22:	eb 06                	jmp    c001ab2a <Net::crc32Calc(unsigned char*, int)+0x77>
c001ab24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab28:	d1 e8                	shr    eax,1
c001ab2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ab2e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab32:	eb d3                	jmp    c001ab07 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab34:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab38:	eb a8                	jmp    c001aae2 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab3e:	f7 d0                	not    eax
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	c3                   	ret    

c001ab44 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab44:	83 ec 1c             	sub    esp,0x1c
c001ab47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab57:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab5c:	7f 14                	jg     c001ab72 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab5e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab62:	8d 50 01             	lea    edx,[eax+0x1]
c001ab65:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab69:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab70:	eb e5                	jmp    c001ab57 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab76:	8d 50 01             	lea    edx,[eax+0x1]
c001ab79:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab7d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab80:	83 ec 04             	sub    esp,0x4
c001ab83:	6a 06                	push   0x6
c001ab85:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab89:	50                   	push   eax
c001ab8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab8e:	e8 b1 5b fe ff       	call   c0000744 <memcpy>
c001ab93:	83 c4 10             	add    esp,0x10
c001ab96:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab9b:	83 ec 04             	sub    esp,0x4
c001ab9e:	6a 06                	push   0x6
c001aba0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001aba4:	50                   	push   eax
c001aba5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001aba9:	e8 96 5b fe ff       	call   c0000744 <memcpy>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001abb6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001abba:	0f b7 c0             	movzx  eax,ax
c001abbd:	c1 f8 08             	sar    eax,0x8
c001abc0:	89 c1                	mov    ecx,eax
c001abc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abc6:	8d 50 01             	lea    edx,[eax+0x1]
c001abc9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001abcd:	88 ca                	mov    dl,cl
c001abcf:	88 10                	mov    BYTE PTR [eax],dl
c001abd1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001abd5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd9:	8d 48 01             	lea    ecx,[eax+0x1]
c001abdc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001abe0:	88 10                	mov    BYTE PTR [eax],dl
c001abe2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abea:	83 ec 04             	sub    esp,0x4
c001abed:	52                   	push   edx
c001abee:	50                   	push   eax
c001abef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abf3:	e8 4c 5b fe ff       	call   c0000744 <memcpy>
c001abf8:	83 c4 10             	add    esp,0x10
c001abfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abff:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001ac03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac07:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001ac0b:	83 ec 08             	sub    esp,0x8
c001ac0e:	50                   	push   eax
c001ac0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ac13:	e8 9b fe ff ff       	call   c001aab3 <Net::crc32Calc(unsigned char*, int)>
c001ac18:	83 c4 10             	add    esp,0x10
c001ac1b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac23:	c1 e8 18             	shr    eax,0x18
c001ac26:	89 c1                	mov    ecx,eax
c001ac28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac33:	88 ca                	mov    dl,cl
c001ac35:	88 10                	mov    BYTE PTR [eax],dl
c001ac37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac3b:	c1 e8 10             	shr    eax,0x10
c001ac3e:	89 c1                	mov    ecx,eax
c001ac40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac44:	8d 50 01             	lea    edx,[eax+0x1]
c001ac47:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac4b:	88 ca                	mov    dl,cl
c001ac4d:	88 10                	mov    BYTE PTR [eax],dl
c001ac4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac53:	c1 e8 08             	shr    eax,0x8
c001ac56:	89 c1                	mov    ecx,eax
c001ac58:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac5c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac63:	88 ca                	mov    dl,cl
c001ac65:	88 10                	mov    BYTE PTR [eax],dl
c001ac67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac6b:	8d 50 01             	lea    edx,[eax+0x1]
c001ac6e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac76:	88 10                	mov    BYTE PTR [eax],dl
c001ac78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac7c:	83 c4 1c             	add    esp,0x1c
c001ac7f:	c3                   	ret    

c001ac80 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac80:	83 ec 2c             	sub    esp,0x2c
c001ac83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac87:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac8b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac90:	83 ec 04             	sub    esp,0x4
c001ac93:	6a 06                	push   0x6
c001ac95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac9d:	83 c0 0e             	add    eax,0xe
c001aca0:	50                   	push   eax
c001aca1:	e8 9e 5a fe ff       	call   c0000744 <memcpy>
c001aca6:	83 c4 10             	add    esp,0x10
c001aca9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001acae:	83 ec 04             	sub    esp,0x4
c001acb1:	6a 06                	push   0x6
c001acb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001acb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001acbb:	83 c0 08             	add    eax,0x8
c001acbe:	50                   	push   eax
c001acbf:	e8 80 5a fe ff       	call   c0000744 <memcpy>
c001acc4:	83 c4 10             	add    esp,0x10
c001acc7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001accc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acd0:	8d 50 01             	lea    edx,[eax+0x1]
c001acd3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acd7:	8a 00                	mov    al,BYTE PTR [eax]
c001acd9:	0f b6 c0             	movzx  eax,al
c001acdc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001ace1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ace5:	8d 50 01             	lea    edx,[eax+0x1]
c001ace8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acec:	8a 00                	mov    al,BYTE PTR [eax]
c001acee:	0f b6 c0             	movzx  eax,al
c001acf1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001acf6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001acfb:	c1 e0 08             	shl    eax,0x8
c001acfe:	89 c2                	mov    edx,eax
c001ad00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad04:	09 d0                	or     eax,edx
c001ad06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad0a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001ad0e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ad13:	75 3a                	jne    c001ad4f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad19:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad1c:	66 3d dc 05          	cmp    ax,0x5dc
c001ad20:	77 10                	ja     c001ad32 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001ad22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ad29:	0f b7 c0             	movzx  eax,ax
c001ad2c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad30:	eb 1d                	jmp    c001ad4f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad32:	83 ec 0c             	sub    esp,0xc
c001ad35:	68 94 bd 02 c0       	push   0xc002bd94
c001ad3a:	e8 e0 82 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad46:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad4a:	e9 c0 00 00 00       	jmp    c001ae0f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad4f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad57:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad59:	83 ec 04             	sub    esp,0x4
c001ad5c:	52                   	push   edx
c001ad5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad61:	50                   	push   eax
c001ad62:	e8 dd 59 fe ff       	call   c0000744 <memcpy>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad6e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad76:	8d 50 01             	lea    edx,[eax+0x1]
c001ad79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad7d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad7f:	0f b6 c0             	movzx  eax,al
c001ad82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad91:	8a 00                	mov    al,BYTE PTR [eax]
c001ad93:	0f b6 c0             	movzx  eax,al
c001ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad9a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad9e:	8d 50 01             	lea    edx,[eax+0x1]
c001ada1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ada5:	8a 00                	mov    al,BYTE PTR [eax]
c001ada7:	0f b6 c0             	movzx  eax,al
c001adaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001adae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb2:	8d 50 01             	lea    edx,[eax+0x1]
c001adb5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001adb9:	8a 00                	mov    al,BYTE PTR [eax]
c001adbb:	0f b6 c0             	movzx  eax,al
c001adbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adc6:	c1 e0 18             	shl    eax,0x18
c001adc9:	89 c2                	mov    edx,eax
c001adcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adcf:	c1 e0 10             	shl    eax,0x10
c001add2:	09 c2                	or     edx,eax
c001add4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001add8:	c1 e0 08             	shl    eax,0x8
c001addb:	09 d0                	or     eax,edx
c001addd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001ade1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ade5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ade9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001aded:	83 e8 04             	sub    eax,0x4
c001adf0:	83 ec 08             	sub    esp,0x8
c001adf3:	50                   	push   eax
c001adf4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adf8:	e8 b6 fc ff ff       	call   c001aab3 <Net::crc32Calc(unsigned char*, int)>
c001adfd:	83 c4 10             	add    esp,0x10
c001ae00:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ae04:	0f 94 c2             	sete   dl
c001ae07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae0b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ae0e:	90                   	nop
c001ae0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae13:	83 c4 2c             	add    esp,0x2c
c001ae16:	c2 04 00             	ret    0x4

c001ae19 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ae19:	55                   	push   ebp
c001ae1a:	57                   	push   edi
c001ae1b:	56                   	push   esi
c001ae1c:	53                   	push   ebx
c001ae1d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae23:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ae2a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ae2c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ae2f:	80 fb 40             	cmp    bl,0x40
c001ae32:	75 1b                	jne    c001ae4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae34:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae36:	84 d2                	test   dl,dl
c001ae38:	0f 84 f1 00 00 00    	je     c001af2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae3e:	8d 46 01             	lea    eax,[esi+0x1]
c001ae41:	80 fa 3a             	cmp    dl,0x3a
c001ae44:	74 04                	je     c001ae4a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae46:	89 c6                	mov    esi,eax
c001ae48:	eb ea                	jmp    c001ae34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae4a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae4d:	89 c6                	mov    esi,eax
c001ae4f:	50                   	push   eax
c001ae50:	6a 40                	push   0x40
c001ae52:	6a 00                	push   0x0
c001ae54:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae58:	50                   	push   eax
c001ae59:	e8 1a 59 fe ff       	call   c0000778 <memset>
c001ae5e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae65:	31 c0                	xor    eax,eax
c001ae67:	83 c4 10             	add    esp,0x10
c001ae6a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae6c:	84 c9                	test   cl,cl
c001ae6e:	0f 84 bb 00 00 00    	je     c001af2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae74:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae79:	0f 8f b0 00 00 00    	jg     c001af2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae7f:	80 f9 0a             	cmp    cl,0xa
c001ae82:	0f 85 98 00 00 00    	jne    c001af20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae88:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae8d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae91:	a8 df                	test   al,0xdf
c001ae93:	0f 94 c1             	sete   cl
c001ae96:	3c 23                	cmp    al,0x23
c001ae98:	0f 94 c2             	sete   dl
c001ae9b:	08 d1                	or     cl,dl
c001ae9d:	75 4a                	jne    c001aee9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae9f:	8d 50 f7             	lea    edx,[eax-0x9]
c001aea2:	80 fa 01             	cmp    dl,0x1
c001aea5:	76 42                	jbe    c001aee9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aea7:	3c 5b                	cmp    al,0x5b
c001aea9:	75 42                	jne    c001aeed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001aeab:	80 fb 40             	cmp    bl,0x40
c001aeae:	75 39                	jne    c001aee9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	8d 54 24 65          	lea    edx,[esp+0x65]
c001aeb7:	52                   	push   edx
c001aeb8:	e8 d7 58 fe ff       	call   c0000794 <strlen>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	83 f8 3f             	cmp    eax,0x3f
c001aec3:	77 6a                	ja     c001af2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aec5:	50                   	push   eax
c001aec6:	50                   	push   eax
c001aec7:	8d 54 24 61          	lea    edx,[esp+0x61]
c001aecb:	52                   	push   edx
c001aecc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aed0:	52                   	push   edx
c001aed1:	e8 5e 59 fe ff       	call   c0000834 <strcpy>
c001aed6:	58                   	pop    eax
c001aed7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aedb:	52                   	push   edx
c001aedc:	e8 b3 58 fe ff       	call   c0000794 <strlen>
c001aee1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	31 d2                	xor    edx,edx
c001aeeb:	eb 3a                	jmp    c001af27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aeed:	80 fb 40             	cmp    bl,0x40
c001aef0:	74 06                	je     c001aef8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aef2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aef6:	eb 20                	jmp    c001af18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aef8:	50                   	push   eax
c001aef9:	50                   	push   eax
c001aefa:	55                   	push   ebp
c001aefb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aeff:	50                   	push   eax
c001af00:	e8 bb 59 fe ff       	call   c00008c0 <strcmp>
c001af05:	83 c4 10             	add    esp,0x10
c001af08:	85 c0                	test   eax,eax
c001af0a:	75 dd                	jne    c001aee9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af0c:	eb e4                	jmp    c001aef2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001af0e:	8d 50 01             	lea    edx,[eax+0x1]
c001af11:	80 f9 3d             	cmp    cl,0x3d
c001af14:	74 1d                	je     c001af33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001af16:	89 d0                	mov    eax,edx
c001af18:	8a 08                	mov    cl,BYTE PTR [eax]
c001af1a:	84 c9                	test   cl,cl
c001af1c:	75 f0                	jne    c001af0e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001af1e:	eb 0f                	jmp    c001af2f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001af20:	8d 50 01             	lea    edx,[eax+0x1]
c001af23:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001af27:	47                   	inc    edi
c001af28:	89 d0                	mov    eax,edx
c001af2a:	e9 3b ff ff ff       	jmp    c001ae6a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001af2f:	31 c0                	xor    eax,eax
c001af31:	eb 33                	jmp    c001af66 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af37:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af3a:	50                   	push   eax
c001af3b:	50                   	push   eax
c001af3c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af40:	50                   	push   eax
c001af41:	56                   	push   esi
c001af42:	e8 79 59 fe ff       	call   c00008c0 <strcmp>
c001af47:	83 c4 10             	add    esp,0x10
c001af4a:	85 c0                	test   eax,eax
c001af4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af50:	75 97                	jne    c001aee9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af52:	51                   	push   ecx
c001af53:	51                   	push   ecx
c001af54:	52                   	push   edx
c001af55:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af5c:	e8 d3 58 fe ff       	call   c0000834 <strcpy>
c001af61:	83 c4 10             	add    esp,0x10
c001af64:	b0 01                	mov    al,0x1
c001af66:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af6c:	5b                   	pop    ebx
c001af6d:	5e                   	pop    esi
c001af6e:	5f                   	pop    edi
c001af6f:	5d                   	pop    ebp
c001af70:	c3                   	ret    

c001af71 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af71:	57                   	push   edi
c001af72:	56                   	push   esi
c001af73:	53                   	push   ebx
c001af74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af7a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af81:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af88:	53                   	push   ebx
c001af89:	e8 06 58 fe ff       	call   c0000794 <strlen>
c001af8e:	89 34 24             	mov    DWORD PTR [esp],esi
c001af91:	89 c7                	mov    edi,eax
c001af93:	e8 fc 57 fe ff       	call   c0000794 <strlen>
c001af98:	83 c4 10             	add    esp,0x10
c001af9b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af9f:	3d ff 00 00 00       	cmp    eax,0xff
c001afa4:	0f 87 d3 00 00 00    	ja     c001b07d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afaa:	57                   	push   edi
c001afab:	57                   	push   edi
c001afac:	56                   	push   esi
c001afad:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001afb1:	56                   	push   esi
c001afb2:	e8 7d 58 fe ff       	call   c0000834 <strcpy>
c001afb7:	58                   	pop    eax
c001afb8:	5a                   	pop    edx
c001afb9:	68 f4 c2 02 c0       	push   0xc002c2f4
c001afbe:	56                   	push   esi
c001afbf:	e8 b0 59 fe ff       	call   c0000974 <strcat>
c001afc4:	59                   	pop    ecx
c001afc5:	5f                   	pop    edi
c001afc6:	53                   	push   ebx
c001afc7:	56                   	push   esi
c001afc8:	e8 a7 59 fe ff       	call   c0000974 <strcat>
c001afcd:	58                   	pop    eax
c001afce:	5a                   	pop    edx
c001afcf:	68 e0 bd 02 c0       	push   0xc002bde0
c001afd4:	56                   	push   esi
c001afd5:	e8 9a 59 fe ff       	call   c0000974 <strcat>
c001afda:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afe1:	e8 5d 48 ff ff       	call   c000f843 <malloc>
c001afe6:	83 c4 0c             	add    esp,0xc
c001afe9:	89 c3                	mov    ebx,eax
c001afeb:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001aff1:	56                   	push   esi
c001aff2:	50                   	push   eax
c001aff3:	e8 80 85 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001aff8:	83 c4 10             	add    esp,0x10
c001affb:	85 db                	test   ebx,ebx
c001affd:	74 7e                	je     c001b07d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afff:	51                   	push   ecx
c001b000:	51                   	push   ecx
c001b001:	6a 01                	push   0x1
c001b003:	53                   	push   ebx
c001b004:	e8 d3 85 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001b009:	83 c4 10             	add    esp,0x10
c001b00c:	85 c0                	test   eax,eax
c001b00e:	74 08                	je     c001b018 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b010:	83 ec 0c             	sub    esp,0xc
c001b013:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b015:	53                   	push   ebx
c001b016:	eb 5f                	jmp    c001b077 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b018:	52                   	push   edx
c001b019:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b01d:	50                   	push   eax
c001b01e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b022:	50                   	push   eax
c001b023:	53                   	push   ebx
c001b024:	e8 5f 88 ff ff       	call   c0013888 <File::stat(unsigned long long*, bool*)>
c001b029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b02d:	83 c4 10             	add    esp,0x10
c001b030:	89 c1                	mov    ecx,eax
c001b032:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b036:	74 31                	je     c001b069 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b038:	83 ec 0c             	sub    esp,0xc
c001b03b:	50                   	push   eax
c001b03c:	e8 02 48 ff ff       	call   c000f843 <malloc>
c001b041:	89 c6                	mov    esi,eax
c001b043:	58                   	pop    eax
c001b044:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b046:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b04a:	52                   	push   edx
c001b04b:	56                   	push   esi
c001b04c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b050:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b054:	53                   	push   ebx
c001b055:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b058:	83 c4 20             	add    esp,0x20
c001b05b:	85 c0                	test   eax,eax
c001b05d:	75 0a                	jne    c001b069 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b05f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b063:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b067:	74 18                	je     c001b081 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b069:	83 ec 0c             	sub    esp,0xc
c001b06c:	53                   	push   ebx
c001b06d:	e8 c8 85 ff ff       	call   c001363a <File::close()>
c001b072:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b074:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b07a:	83 c4 10             	add    esp,0x10
c001b07d:	31 c0                	xor    eax,eax
c001b07f:	eb 3b                	jmp    c001b0bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b081:	83 ec 0c             	sub    esp,0xc
c001b084:	53                   	push   ebx
c001b085:	e8 b0 85 ff ff       	call   c001363a <File::close()>
c001b08a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b08c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b08f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b092:	83 c4 0c             	add    esp,0xc
c001b095:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b09c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b0a3:	56                   	push   esi
c001b0a4:	e8 70 fd ff ff       	call   c001ae19 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b0a9:	89 34 24             	mov    DWORD PTR [esp],esi
c001b0ac:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b0b0:	e8 9e 47 ff ff       	call   c000f853 <free>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b0bc:	81 c4 20 01 00 00    	add    esp,0x120
c001b0c2:	5b                   	pop    ebx
c001b0c3:	5e                   	pop    esi
c001b0c4:	5f                   	pop    edi
c001b0c5:	c3                   	ret    

c001b0c6 <Reg::getLine(char*, char*, char*)>:
c001b0c6:	57                   	push   edi
c001b0c7:	56                   	push   esi
c001b0c8:	53                   	push   ebx
c001b0c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0d5:	57                   	push   edi
c001b0d6:	56                   	push   esi
c001b0d7:	53                   	push   ebx
c001b0d8:	68 e5 bd 02 c0       	push   0xc002bde5
c001b0dd:	e8 8f fe ff ff       	call   c001af71 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0e2:	83 c4 10             	add    esp,0x10
c001b0e5:	84 c0                	test   al,al
c001b0e7:	75 10                	jne    c001b0f9 <Reg::getLine(char*, char*, char*)+0x33>
c001b0e9:	57                   	push   edi
c001b0ea:	56                   	push   esi
c001b0eb:	53                   	push   ebx
c001b0ec:	68 0a be 02 c0       	push   0xc002be0a
c001b0f1:	e8 7b fe ff ff       	call   c001af71 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0f6:	83 c4 10             	add    esp,0x10
c001b0f9:	5b                   	pop    ebx
c001b0fa:	5e                   	pop    esi
c001b0fb:	5f                   	pop    edi
c001b0fc:	c3                   	ret    

c001b0fd <Reg::readInt(char*, char*, int*)>:
c001b0fd:	55                   	push   ebp
c001b0fe:	57                   	push   edi
c001b0ff:	56                   	push   esi
c001b100:	53                   	push   ebx
c001b101:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b107:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b10b:	57                   	push   edi
c001b10c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b113:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b11a:	e8 a7 ff ff ff       	call   c001b0c6 <Reg::getLine(char*, char*, char*)>
c001b11f:	83 c4 10             	add    esp,0x10
c001b122:	84 c0                	test   al,al
c001b124:	0f 84 b3 00 00 00    	je     c001b1dd <Reg::readInt(char*, char*, int*)+0xe0>
c001b12a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b12e:	80 fa 2b             	cmp    dl,0x2b
c001b131:	74 0c                	je     c001b13f <Reg::readInt(char*, char*, int*)+0x42>
c001b133:	80 fa 2d             	cmp    dl,0x2d
c001b136:	75 0e                	jne    c001b146 <Reg::readInt(char*, char*, int*)+0x49>
c001b138:	ba 01 00 00 00       	mov    edx,0x1
c001b13d:	eb 0b                	jmp    c001b14a <Reg::readInt(char*, char*, int*)+0x4d>
c001b13f:	ba 01 00 00 00       	mov    edx,0x1
c001b144:	eb 02                	jmp    c001b148 <Reg::readInt(char*, char*, int*)+0x4b>
c001b146:	31 d2                	xor    edx,edx
c001b148:	31 c0                	xor    eax,eax
c001b14a:	be 0a 00 00 00       	mov    esi,0xa
c001b14f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b154:	75 20                	jne    c001b176 <Reg::readInt(char*, char*, int*)+0x79>
c001b156:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b15a:	80 f9 78             	cmp    cl,0x78
c001b15d:	75 0a                	jne    c001b169 <Reg::readInt(char*, char*, int*)+0x6c>
c001b15f:	83 c2 02             	add    edx,0x2
c001b162:	be 10 00 00 00       	mov    esi,0x10
c001b167:	eb 0d                	jmp    c001b176 <Reg::readInt(char*, char*, int*)+0x79>
c001b169:	80 f9 62             	cmp    cl,0x62
c001b16c:	75 08                	jne    c001b176 <Reg::readInt(char*, char*, int*)+0x79>
c001b16e:	83 c2 02             	add    edx,0x2
c001b171:	be 02 00 00 00       	mov    esi,0x2
c001b176:	01 d7                	add    edi,edx
c001b178:	31 d2                	xor    edx,edx
c001b17a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b17c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b180:	80 fb 0d             	cmp    bl,0xd
c001b183:	0f 94 c3             	sete   bl
c001b186:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b18b:	0f 94 c1             	sete   cl
c001b18e:	08 cb                	or     bl,cl
c001b190:	75 3a                	jne    c001b1cc <Reg::readInt(char*, char*, int*)+0xcf>
c001b192:	0f af d6             	imul   edx,esi
c001b195:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b19a:	83 fe 10             	cmp    esi,0x10
c001b19d:	75 26                	jne    c001b1c5 <Reg::readInt(char*, char*, int*)+0xc8>
c001b19f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1a3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b1a6:	89 e9                	mov    ecx,ebp
c001b1a8:	80 f9 05             	cmp    cl,0x5
c001b1ab:	77 06                	ja     c001b1b3 <Reg::readInt(char*, char*, int*)+0xb6>
c001b1ad:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b1b1:	eb 16                	jmp    c001b1c9 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1b3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b1b7:	83 e9 61             	sub    ecx,0x61
c001b1ba:	80 f9 05             	cmp    cl,0x5
c001b1bd:	77 06                	ja     c001b1c5 <Reg::readInt(char*, char*, int*)+0xc8>
c001b1bf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b1c3:	eb 04                	jmp    c001b1c9 <Reg::readInt(char*, char*, int*)+0xcc>
c001b1c5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b1c9:	47                   	inc    edi
c001b1ca:	eb ae                	jmp    c001b17a <Reg::readInt(char*, char*, int*)+0x7d>
c001b1cc:	84 c0                	test   al,al
c001b1ce:	74 02                	je     c001b1d2 <Reg::readInt(char*, char*, int*)+0xd5>
c001b1d0:	f7 da                	neg    edx
c001b1d2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1d9:	89 10                	mov    DWORD PTR [eax],edx
c001b1db:	88 d8                	mov    al,bl
c001b1dd:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1e3:	5b                   	pop    ebx
c001b1e4:	5e                   	pop    esi
c001b1e5:	5f                   	pop    edi
c001b1e6:	5d                   	pop    ebp
c001b1e7:	c3                   	ret    

c001b1e8 <Reg::readString(char*, char*, char*, int)>:
c001b1e8:	57                   	push   edi
c001b1e9:	56                   	push   esi
c001b1ea:	53                   	push   ebx
c001b1eb:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1f1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1f8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1fc:	57                   	push   edi
c001b1fd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b204:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b20b:	e8 b6 fe ff ff       	call   c001b0c6 <Reg::getLine(char*, char*, char*)>
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	89 c6                	mov    esi,eax
c001b215:	84 c0                	test   al,al
c001b217:	74 44                	je     c001b25d <Reg::readString(char*, char*, char*, int)+0x75>
c001b219:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b220:	31 c0                	xor    eax,eax
c001b222:	4a                   	dec    edx
c001b223:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b226:	84 c9                	test   cl,cl
c001b228:	74 0f                	je     c001b239 <Reg::readString(char*, char*, char*, int)+0x51>
c001b22a:	39 c2                	cmp    edx,eax
c001b22c:	7e 0b                	jle    c001b239 <Reg::readString(char*, char*, char*, int)+0x51>
c001b22e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b231:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b236:	40                   	inc    eax
c001b237:	eb ea                	jmp    c001b223 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b239:	83 ec 0c             	sub    esp,0xc
c001b23c:	53                   	push   ebx
c001b23d:	e8 52 55 fe ff       	call   c0000794 <strlen>
c001b242:	83 c4 10             	add    esp,0x10
c001b245:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b24a:	75 11                	jne    c001b25d <Reg::readString(char*, char*, char*, int)+0x75>
c001b24c:	83 ec 0c             	sub    esp,0xc
c001b24f:	53                   	push   ebx
c001b250:	e8 3f 55 fe ff       	call   c0000794 <strlen>
c001b255:	83 c4 10             	add    esp,0x10
c001b258:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b25d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b263:	89 f0                	mov    eax,esi
c001b265:	5b                   	pop    ebx
c001b266:	5e                   	pop    esi
c001b267:	5f                   	pop    edi
c001b268:	c3                   	ret    

c001b269 <Reg::readBool(char*, char*, bool*)>:
c001b269:	83 ec 20             	sub    esp,0x20
c001b26c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b270:	50                   	push   eax
c001b271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b275:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b279:	e8 7f fe ff ff       	call   c001b0fd <Reg::readInt(char*, char*, int*)>
c001b27e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b283:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b287:	0f 95 02             	setne  BYTE PTR [edx]
c001b28a:	83 c4 2c             	add    esp,0x2c
c001b28d:	c3                   	ret    

c001b28e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b28e:	53                   	push   ebx
c001b28f:	83 ec 1c             	sub    esp,0x1c
c001b292:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b296:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b29a:	50                   	push   eax
c001b29b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b29f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2a3:	e8 c1 ff ff ff       	call   c001b269 <Reg::readBool(char*, char*, bool*)>
c001b2a8:	83 c4 10             	add    esp,0x10
c001b2ab:	84 c0                	test   al,al
c001b2ad:	74 04                	je     c001b2b3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b2af:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b2b3:	88 d8                	mov    al,bl
c001b2b5:	83 c4 18             	add    esp,0x18
c001b2b8:	5b                   	pop    ebx
c001b2b9:	c3                   	ret    

c001b2ba <Reg::readIntWithDefault(char*, char*, int)>:
c001b2ba:	53                   	push   ebx
c001b2bb:	83 ec 1c             	sub    esp,0x1c
c001b2be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b2c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2c6:	50                   	push   eax
c001b2c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b2cf:	e8 29 fe ff ff       	call   c001b0fd <Reg::readInt(char*, char*, int*)>
c001b2d4:	83 c4 10             	add    esp,0x10
c001b2d7:	84 c0                	test   al,al
c001b2d9:	74 04                	je     c001b2df <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2df:	89 d8                	mov    eax,ebx
c001b2e1:	83 c4 18             	add    esp,0x18
c001b2e4:	5b                   	pop    ebx
c001b2e5:	c3                   	ret    

c001b2e6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2e6:	57                   	push   edi
c001b2e7:	56                   	push   esi
c001b2e8:	53                   	push   ebx
c001b2e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2ed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2f1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2f5:	56                   	push   esi
c001b2f6:	53                   	push   ebx
c001b2f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2ff:	e8 e4 fe ff ff       	call   c001b1e8 <Reg::readString(char*, char*, char*, int)>
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	84 c0                	test   al,al
c001b309:	75 1b                	jne    c001b326 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b30b:	50                   	push   eax
c001b30c:	56                   	push   esi
c001b30d:	4e                   	dec    esi
c001b30e:	6a 00                	push   0x0
c001b310:	53                   	push   ebx
c001b311:	e8 62 54 fe ff       	call   c0000778 <memset>
c001b316:	83 c4 0c             	add    esp,0xc
c001b319:	56                   	push   esi
c001b31a:	57                   	push   edi
c001b31b:	53                   	push   ebx
c001b31c:	89 fb                	mov    ebx,edi
c001b31e:	e8 21 54 fe ff       	call   c0000744 <memcpy>
c001b323:	83 c4 10             	add    esp,0x10
c001b326:	89 d8                	mov    eax,ebx
c001b328:	5b                   	pop    ebx
c001b329:	5e                   	pop    esi
c001b32a:	5f                   	pop    edi
c001b32b:	c3                   	ret    

c001b32c <Sys::eject(regs*)>:
c001b32c:	83 ec 0c             	sub    esp,0xc
c001b32f:	83 ca ff             	or     edx,0xffffffff
c001b332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b336:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b339:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b33e:	83 e9 41             	sub    ecx,0x41
c001b341:	83 f9 19             	cmp    ecx,0x19
c001b344:	77 18                	ja     c001b35e <Sys::eject(regs*)+0x32>
c001b346:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c001b34d:	85 c9                	test   ecx,ecx
c001b34f:	74 0d                	je     c001b35e <Sys::eject(regs*)+0x32>
c001b351:	83 ec 0c             	sub    esp,0xc
c001b354:	51                   	push   ecx
c001b355:	e8 78 b4 ff ff       	call   c00167d2 <LogicalDisk::eject()>
c001b35a:	83 c4 10             	add    esp,0x10
c001b35d:	99                   	cdq    
c001b35e:	83 c4 0c             	add    esp,0xc
c001b361:	c3                   	ret    

c001b362 <Sys::exit(regs*)>:
c001b362:	83 ec 18             	sub    esp,0x18
c001b365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b369:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b36c:	e8 92 35 00 00       	call   c001e903 <terminateTask(int)>
c001b371:	83 c8 ff             	or     eax,0xffffffff
c001b374:	83 c4 1c             	add    esp,0x1c
c001b377:	89 c2                	mov    edx,eax
c001b379:	c3                   	ret    

c001b37a <Sys::getCwd(regs*)>:
c001b37a:	83 ec 10             	sub    esp,0x10
c001b37d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b381:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b384:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b387:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b38c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b38f:	e8 e6 7f ff ff       	call   c001337a <Fs::getcwd(Process*, char*, int)>
c001b394:	83 c4 1c             	add    esp,0x1c
c001b397:	99                   	cdq    
c001b398:	c3                   	ret    

c001b399 <Sys::getPID(regs*)>:
c001b399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b39e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3a3:	99                   	cdq    
c001b3a4:	c3                   	ret    

c001b3a5 <Sys::getRAMData(regs*)>:
c001b3a5:	8b 0d 54 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e554
c001b3ab:	6b 05 50 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e550,0x64
c001b3b2:	99                   	cdq    
c001b3b3:	f7 f9                	idiv   ecx
c001b3b5:	c1 e0 18             	shl    eax,0x18
c001b3b8:	09 c8                	or     eax,ecx
c001b3ba:	99                   	cdq    
c001b3bb:	c3                   	ret    

c001b3bc <Sys::loadDLL(regs*)>:
c001b3bc:	56                   	push   esi
c001b3bd:	53                   	push   ebx
c001b3be:	31 d2                	xor    edx,edx
c001b3c0:	51                   	push   ecx
c001b3c1:	b8 01 00 00 00       	mov    eax,0x1
c001b3c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3ca:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b3ce:	0f 84 8c 00 00 00    	je     c001b460 <Sys::loadDLL(regs*)+0xa4>
c001b3d4:	83 ec 0c             	sub    esp,0xc
c001b3d7:	68 14 01 00 00       	push   0x114
c001b3dc:	e8 62 44 ff ff       	call   c000f843 <malloc>
c001b3e1:	83 c4 0c             	add    esp,0xc
c001b3e4:	89 c3                	mov    ebx,eax
c001b3e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3ee:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3f1:	53                   	push   ebx
c001b3f2:	e8 81 81 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	31 d2                	xor    edx,edx
c001b3fc:	b8 02 00 00 00       	mov    eax,0x2
c001b401:	85 db                	test   ebx,ebx
c001b403:	74 5b                	je     c001b460 <Sys::loadDLL(regs*)+0xa4>
c001b405:	83 ec 0c             	sub    esp,0xc
c001b408:	53                   	push   ebx
c001b409:	e8 3c 84 ff ff       	call   c001384a <File::exists()>
c001b40e:	83 c4 10             	add    esp,0x10
c001b411:	84 c0                	test   al,al
c001b413:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b415:	75 11                	jne    c001b428 <Sys::loadDLL(regs*)+0x6c>
c001b417:	83 ec 0c             	sub    esp,0xc
c001b41a:	53                   	push   ebx
c001b41b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b41e:	83 c4 10             	add    esp,0x10
c001b421:	b8 03 00 00 00       	mov    eax,0x3
c001b426:	eb 36                	jmp    c001b45e <Sys::loadDLL(regs*)+0xa2>
c001b428:	83 ec 0c             	sub    esp,0xc
c001b42b:	53                   	push   ebx
c001b42c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b42f:	58                   	pop    eax
c001b430:	5a                   	pop    edx
c001b431:	6a 00                	push   0x0
c001b433:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b436:	e8 c5 23 00 00       	call   c001d800 <Thr::loadDLL(char const*, bool)>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	89 c1                	mov    ecx,eax
c001b440:	31 d2                	xor    edx,edx
c001b442:	b8 04 00 00 00       	mov    eax,0x4
c001b447:	85 c9                	test   ecx,ecx
c001b449:	74 15                	je     c001b460 <Sys::loadDLL(regs*)+0xa4>
c001b44b:	53                   	push   ebx
c001b44c:	53                   	push   ebx
c001b44d:	ff 35 08 e5 02 c0    	push   DWORD PTR ds:0xc002e508
c001b453:	51                   	push   ecx
c001b454:	e8 f3 25 00 00       	call   c001da4c <Thr::executeDLL(unsigned long, void*)>
c001b459:	83 c4 10             	add    esp,0x10
c001b45c:	31 c0                	xor    eax,eax
c001b45e:	31 d2                	xor    edx,edx
c001b460:	59                   	pop    ecx
c001b461:	5b                   	pop    ebx
c001b462:	5e                   	pop    esi
c001b463:	c3                   	ret    

c001b464 <Sys::read(regs*)>:
c001b464:	57                   	push   edi
c001b465:	56                   	push   esi
c001b466:	53                   	push   ebx
c001b467:	83 ec 10             	sub    esp,0x10
c001b46a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b46e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b471:	83 f8 02             	cmp    eax,0x2
c001b474:	77 10                	ja     c001b486 <Sys::read(regs*)+0x22>
c001b476:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b47b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b47e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b484:	eb 0e                	jmp    c001b494 <Sys::read(regs*)+0x30>
c001b486:	83 ec 0c             	sub    esp,0xc
c001b489:	50                   	push   eax
c001b48a:	e8 c0 65 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b48f:	83 c4 10             	add    esp,0x10
c001b492:	89 c1                	mov    ecx,eax
c001b494:	83 c8 ff             	or     eax,0xffffffff
c001b497:	85 c9                	test   ecx,ecx
c001b499:	89 c2                	mov    edx,eax
c001b49b:	74 28                	je     c001b4c5 <Sys::read(regs*)+0x61>
c001b49d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b4a5:	31 ff                	xor    edi,edi
c001b4a7:	83 ec 0c             	sub    esp,0xc
c001b4aa:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b4ac:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b4b0:	52                   	push   edx
c001b4b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4b4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b4b7:	57                   	push   edi
c001b4b8:	56                   	push   esi
c001b4b9:	51                   	push   ecx
c001b4ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b4bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b4c1:	83 c4 20             	add    esp,0x20
c001b4c4:	99                   	cdq    
c001b4c5:	83 c4 10             	add    esp,0x10
c001b4c8:	5b                   	pop    ebx
c001b4c9:	5e                   	pop    esi
c001b4ca:	5f                   	pop    edi
c001b4cb:	c3                   	ret    

c001b4cc <Sys::sbrk(regs*)>:
c001b4cc:	56                   	push   esi
c001b4cd:	53                   	push   ebx
c001b4ce:	50                   	push   eax
c001b4cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4db:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4de:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4e4:	85 db                	test   ebx,ebx
c001b4e6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b4e9:	74 02                	je     c001b4ed <Sys::sbrk(regs*)+0x21>
c001b4eb:	79 06                	jns    c001b4f3 <Sys::sbrk(regs*)+0x27>
c001b4ed:	89 f0                	mov    eax,esi
c001b4ef:	31 d2                	xor    edx,edx
c001b4f1:	eb 2a                	jmp    c001b51d <Sys::sbrk(regs*)+0x51>
c001b4f3:	83 c8 ff             	or     eax,0xffffffff
c001b4f6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b4fc:	89 c2                	mov    edx,eax
c001b4fe:	77 1d                	ja     c001b51d <Sys::sbrk(regs*)+0x51>
c001b500:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b506:	50                   	push   eax
c001b507:	c1 ea 0c             	shr    edx,0xc
c001b50a:	68 07 0c 00 00       	push   0xc07
c001b50f:	52                   	push   edx
c001b510:	51                   	push   ecx
c001b511:	e8 66 6f ff ff       	call   c001247c <VAS::allocatePages(int, int)>
c001b516:	89 f0                	mov    eax,esi
c001b518:	31 d2                	xor    edx,edx
c001b51a:	83 c4 10             	add    esp,0x10
c001b51d:	59                   	pop    ecx
c001b51e:	5b                   	pop    ebx
c001b51f:	5e                   	pop    esi
c001b520:	c3                   	ret    

c001b521 <Sys::setCwd(regs*)>:
c001b521:	83 ec 14             	sub    esp,0x14
c001b524:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b528:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b52b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b530:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b533:	e8 b1 83 ff ff       	call   c00138e9 <Fs::setcwd(Process*, char*)>
c001b538:	83 c4 1c             	add    esp,0x1c
c001b53b:	99                   	cdq    
c001b53c:	c3                   	ret    

c001b53d <Sys::setTime(regs*)>:
c001b53d:	55                   	push   ebp
c001b53e:	31 d2                	xor    edx,edx
c001b540:	57                   	push   edi
c001b541:	bf 18 00 00 00       	mov    edi,0x18
c001b546:	56                   	push   esi
c001b547:	53                   	push   ebx
c001b548:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b54d:	83 ec 30             	sub    esp,0x30
c001b550:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b554:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b557:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b55a:	f7 f3                	div    ebx
c001b55c:	89 d6                	mov    esi,edx
c001b55e:	31 d2                	xor    edx,edx
c001b560:	f7 f3                	div    ebx
c001b562:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b565:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b569:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b56e:	31 d2                	xor    edx,edx
c001b570:	f7 f3                	div    ebx
c001b572:	31 d2                	xor    edx,edx
c001b574:	bb 0c 00 00 00       	mov    ebx,0xc
c001b579:	f7 f7                	div    edi
c001b57b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b57e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b582:	0f b7 cd             	movzx  ecx,bp
c001b585:	56                   	push   esi
c001b586:	89 c7                	mov    edi,eax
c001b588:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b58c:	c1 e6 10             	shl    esi,0x10
c001b58f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b593:	83 e7 1f             	and    edi,0x1f
c001b596:	51                   	push   ecx
c001b597:	47                   	inc    edi
c001b598:	c1 e8 05             	shr    eax,0x5
c001b59b:	31 d2                	xor    edx,edx
c001b59d:	f7 f3                	div    ebx
c001b59f:	31 db                	xor    ebx,ebx
c001b5a1:	52                   	push   edx
c001b5a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b5a6:	57                   	push   edi
c001b5a7:	68 25 be 02 c0       	push   0xc002be25
c001b5ac:	e8 6e 7a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001b5b1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b5b5:	89 f8                	mov    eax,edi
c001b5b7:	31 c9                	xor    ecx,ecx
c001b5b9:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b5bd:	88 c1                	mov    cl,al
c001b5bf:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b5c5:	88 d5                	mov    ch,dl
c001b5c7:	c1 e0 10             	shl    eax,0x10
c001b5ca:	0f b7 d1             	movzx  edx,cx
c001b5cd:	09 c2                	or     edx,eax
c001b5cf:	89 d8                	mov    eax,ebx
c001b5d1:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5d6:	09 f0                	or     eax,esi
c001b5d8:	89 c3                	mov    ebx,eax
c001b5da:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5de:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5e2:	83 c4 18             	add    esp,0x18
c001b5e5:	53                   	push   ebx
c001b5e6:	52                   	push   edx
c001b5e7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5eb:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5ef:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5f3:	e8 0b 8a ff ff       	call   c0014003 <datetimeToSeconds(datetime_t)>
c001b5f8:	83 c4 0c             	add    esp,0xc
c001b5fb:	52                   	push   edx
c001b5fc:	50                   	push   eax
c001b5fd:	56                   	push   esi
c001b5fe:	e8 87 8b ff ff       	call   c001418a <secondsToDatetime(unsigned long long)>
c001b603:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b607:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b60b:	51                   	push   ecx
c001b60c:	89 d6                	mov    esi,edx
c001b60e:	51                   	push   ecx
c001b60f:	c1 ee 10             	shr    esi,0x10
c001b612:	89 f3                	mov    ebx,esi
c001b614:	0f b6 f3             	movzx  esi,bl
c001b617:	56                   	push   esi
c001b618:	0f b6 f6             	movzx  esi,dh
c001b61b:	0f b6 d2             	movzx  edx,dl
c001b61e:	56                   	push   esi
c001b61f:	52                   	push   edx
c001b620:	89 c2                	mov    edx,eax
c001b622:	c1 ea 10             	shr    edx,0x10
c001b625:	52                   	push   edx
c001b626:	0f b6 d4             	movzx  edx,ah
c001b629:	0f b6 c0             	movzx  eax,al
c001b62c:	52                   	push   edx
c001b62d:	50                   	push   eax
c001b62e:	68 41 be 02 c0       	push   0xc002be41
c001b633:	e8 e7 79 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001b638:	83 c4 2c             	add    esp,0x2c
c001b63b:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001b640:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b644:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b648:	53                   	push   ebx
c001b649:	51                   	push   ecx
c001b64a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b650:	e8 d5 8a ff ff       	call   c001412a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b655:	83 f0 01             	xor    eax,0x1
c001b658:	31 d2                	xor    edx,edx
c001b65a:	0f b6 c0             	movzx  eax,al
c001b65d:	83 c4 3c             	add    esp,0x3c
c001b660:	5b                   	pop    ebx
c001b661:	5e                   	pop    esi
c001b662:	5f                   	pop    edi
c001b663:	5d                   	pop    ebp
c001b664:	c3                   	ret    

c001b665 <Sys::timezone(regs*)>:
c001b665:	53                   	push   ebx
c001b666:	83 ec 08             	sub    esp,0x8
c001b669:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b66d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b671:	75 17                	jne    c001b68a <Sys::timezone(regs*)+0x25>
c001b673:	83 ec 0c             	sub    esp,0xc
c001b676:	68 5d be 02 c0       	push   0xc002be5d
c001b67b:	e8 9f 79 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001b680:	83 c8 ff             	or     eax,0xffffffff
c001b683:	83 c4 10             	add    esp,0x10
c001b686:	89 c2                	mov    edx,eax
c001b688:	eb 20                	jmp    c001b6aa <Sys::timezone(regs*)+0x45>
c001b68a:	83 ec 0c             	sub    esp,0xc
c001b68d:	68 95 be 02 c0       	push   0xc002be95
c001b692:	e8 88 79 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001b697:	58                   	pop    eax
c001b698:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b69b:	e8 ec 87 ff ff       	call   c0013e8c <User::loadClockSettings(int)>
c001b6a0:	83 c4 10             	add    esp,0x10
c001b6a3:	b8 01 00 00 00       	mov    eax,0x1
c001b6a8:	31 d2                	xor    edx,edx
c001b6aa:	83 c4 08             	add    esp,0x8
c001b6ad:	5b                   	pop    ebx
c001b6ae:	c3                   	ret    

c001b6af <Sys::write(regs*)>:
c001b6af:	57                   	push   edi
c001b6b0:	56                   	push   esi
c001b6b1:	53                   	push   ebx
c001b6b2:	83 ec 10             	sub    esp,0x10
c001b6b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6bc:	83 f8 02             	cmp    eax,0x2
c001b6bf:	77 10                	ja     c001b6d1 <Sys::write(regs*)+0x22>
c001b6c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6c9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6cf:	eb 0e                	jmp    c001b6df <Sys::write(regs*)+0x30>
c001b6d1:	83 ec 0c             	sub    esp,0xc
c001b6d4:	50                   	push   eax
c001b6d5:	e8 75 63 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b6da:	83 c4 10             	add    esp,0x10
c001b6dd:	89 c1                	mov    ecx,eax
c001b6df:	83 c8 ff             	or     eax,0xffffffff
c001b6e2:	85 c9                	test   ecx,ecx
c001b6e4:	89 c2                	mov    edx,eax
c001b6e6:	74 28                	je     c001b710 <Sys::write(regs*)+0x61>
c001b6e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6f0:	31 ff                	xor    edi,edi
c001b6f2:	83 ec 0c             	sub    esp,0xc
c001b6f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6f7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6fb:	52                   	push   edx
c001b6fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6ff:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b702:	57                   	push   edi
c001b703:	56                   	push   esi
c001b704:	51                   	push   ecx
c001b705:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b708:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b70c:	83 c4 20             	add    esp,0x20
c001b70f:	99                   	cdq    
c001b710:	83 c4 10             	add    esp,0x10
c001b713:	5b                   	pop    ebx
c001b714:	5e                   	pop    esi
c001b715:	5f                   	pop    edi
c001b716:	c3                   	ret    

c001b717 <Sys::wsbe(regs*)>:
c001b717:	57                   	push   edi
c001b718:	b9 0b 00 00 00       	mov    ecx,0xb
c001b71d:	56                   	push   esi
c001b71e:	be d4 be 02 c0       	mov    esi,0xc002bed4
c001b723:	53                   	push   ebx
c001b724:	83 ec 30             	sub    esp,0x30
c001b727:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b72b:	fc                   	cld    
c001b72c:	83 ec 0c             	sub    esp,0xc
c001b72f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b731:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b735:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b73a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b73d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b743:	8b 06                	mov    eax,DWORD PTR [esi]
c001b745:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b748:	57                   	push   edi
c001b749:	e8 46 50 fe ff       	call   c0000794 <strlen>
c001b74e:	5a                   	pop    edx
c001b74f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b753:	52                   	push   edx
c001b754:	31 d2                	xor    edx,edx
c001b756:	57                   	push   edi
c001b757:	52                   	push   edx
c001b758:	50                   	push   eax
c001b759:	56                   	push   esi
c001b75a:	ff d3                	call   ebx
c001b75c:	83 c4 14             	add    esp,0x14
c001b75f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b763:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b766:	e8 98 31 00 00       	call   c001e903 <terminateTask(int)>
c001b76b:	83 c4 40             	add    esp,0x40
c001b76e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b773:	5b                   	pop    ebx
c001b774:	31 d2                	xor    edx,edx
c001b776:	5e                   	pop    esi
c001b777:	5f                   	pop    edi
c001b778:	c3                   	ret    

c001b779 <Sys::yield(regs*)>:
c001b779:	57                   	push   edi
c001b77a:	56                   	push   esi
c001b77b:	53                   	push   ebx
c001b77c:	e8 3f 27 00 00       	call   c001dec0 <lockScheduler()>
c001b781:	e8 76 2a 00 00       	call   c001e1fc <schedule()>
c001b786:	e8 37 27 00 00       	call   c001dec2 <unlockScheduler()>
c001b78b:	8b 35 b0 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebb0
c001b791:	8b 3d b4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebb4
c001b797:	89 f0                	mov    eax,esi
c001b799:	89 fb                	mov    ebx,edi
c001b79b:	89 f1                	mov    ecx,esi
c001b79d:	c1 e0 07             	shl    eax,0x7
c001b7a0:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b7a4:	25 80 30 0f 00       	and    eax,0xf3080
c001b7a9:	c1 eb 17             	shr    ebx,0x17
c001b7ac:	31 c8                	xor    eax,ecx
c001b7ae:	89 da                	mov    edx,ebx
c001b7b0:	5b                   	pop    ebx
c001b7b1:	5e                   	pop    esi
c001b7b2:	5f                   	pop    edi
c001b7b3:	c3                   	ret    

c001b7b4 <sysCallSeekDir(regs*)>:
c001b7b4:	31 c0                	xor    eax,eax
c001b7b6:	31 d2                	xor    edx,edx
c001b7b8:	c3                   	ret    

c001b7b9 <sysCallTellDir(regs*)>:
c001b7b9:	31 c0                	xor    eax,eax
c001b7bb:	31 d2                	xor    edx,edx
c001b7bd:	c3                   	ret    

c001b7be <sysCallVerify(regs*)>:
c001b7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7c2:	31 d2                	xor    edx,edx
c001b7c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b7c7:	c3                   	ret    

c001b7c8 <sysFormatDisk(regs*)>:
c001b7c8:	56                   	push   esi
c001b7c9:	53                   	push   ebx
c001b7ca:	53                   	push   ebx
c001b7cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7cf:	8b 1d 98 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e698
c001b7d5:	eb 25                	jmp    c001b7fc <sysFormatDisk(regs*)+0x34>
c001b7d7:	83 ec 0c             	sub    esp,0xc
c001b7da:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7df:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7e2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7e5:	50                   	push   eax
c001b7e6:	ff 34 85 40 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14c0]
c001b7ed:	53                   	push   ebx
c001b7ee:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7f1:	83 c4 20             	add    esp,0x20
c001b7f4:	83 f8 08             	cmp    eax,0x8
c001b7f7:	75 12                	jne    c001b80b <sysFormatDisk(regs*)+0x43>
c001b7f9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7fc:	85 db                	test   ebx,ebx
c001b7fe:	75 d7                	jne    c001b7d7 <sysFormatDisk(regs*)+0xf>
c001b800:	59                   	pop    ecx
c001b801:	b8 03 00 00 00       	mov    eax,0x3
c001b806:	31 d2                	xor    edx,edx
c001b808:	5b                   	pop    ebx
c001b809:	5e                   	pop    esi
c001b80a:	c3                   	ret    
c001b80b:	85 c0                	test   eax,eax
c001b80d:	74 1b                	je     c001b82a <sysFormatDisk(regs*)+0x62>
c001b80f:	83 f8 09             	cmp    eax,0x9
c001b812:	74 0b                	je     c001b81f <sysFormatDisk(regs*)+0x57>
c001b814:	59                   	pop    ecx
c001b815:	b8 02 00 00 00       	mov    eax,0x2
c001b81a:	31 d2                	xor    edx,edx
c001b81c:	5b                   	pop    ebx
c001b81d:	5e                   	pop    esi
c001b81e:	c3                   	ret    
c001b81f:	59                   	pop    ecx
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	31 d2                	xor    edx,edx
c001b827:	5b                   	pop    ebx
c001b828:	5e                   	pop    esi
c001b829:	c3                   	ret    
c001b82a:	59                   	pop    ecx
c001b82b:	31 c0                	xor    eax,eax
c001b82d:	31 d2                	xor    edx,edx
c001b82f:	5b                   	pop    ebx
c001b830:	5e                   	pop    esi
c001b831:	c3                   	ret    

c001b832 <sysSetDiskVolumeLabel(regs*)>:
c001b832:	56                   	push   esi
c001b833:	53                   	push   ebx
c001b834:	53                   	push   ebx
c001b835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b839:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b83c:	83 f8 19             	cmp    eax,0x19
c001b83f:	77 29                	ja     c001b86a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b841:	8b 0c 85 40 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd14c0]
c001b848:	85 c9                	test   ecx,ecx
c001b84a:	74 1e                	je     c001b86a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b84c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b84f:	85 d2                	test   edx,edx
c001b851:	74 17                	je     c001b86a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b853:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b859:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b85b:	52                   	push   edx
c001b85c:	50                   	push   eax
c001b85d:	51                   	push   ecx
c001b85e:	53                   	push   ebx
c001b85f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	99                   	cdq    
c001b866:	59                   	pop    ecx
c001b867:	5b                   	pop    ebx
c001b868:	5e                   	pop    esi
c001b869:	c3                   	ret    
c001b86a:	59                   	pop    ecx
c001b86b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b870:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b875:	5b                   	pop    ebx
c001b876:	5e                   	pop    esi
c001b877:	c3                   	ret    

c001b878 <sysGetDiskVolumeLabel(regs*)>:
c001b878:	57                   	push   edi
c001b879:	56                   	push   esi
c001b87a:	53                   	push   ebx
c001b87b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b87f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b882:	83 fa 19             	cmp    edx,0x19
c001b885:	77 34                	ja     c001b8bb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b887:	8b 0c 95 40 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd14c0]
c001b88e:	85 c9                	test   ecx,ecx
c001b890:	74 29                	je     c001b8bb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b892:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b895:	85 db                	test   ebx,ebx
c001b897:	74 22                	je     c001b8bb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b899:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b89c:	85 c0                	test   eax,eax
c001b89e:	74 1b                	je     c001b8bb <sysGetDiskVolumeLabel(regs*)+0x43>
c001b8a0:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b8ab:	50                   	push   eax
c001b8ac:	53                   	push   ebx
c001b8ad:	52                   	push   edx
c001b8ae:	51                   	push   ecx
c001b8af:	56                   	push   esi
c001b8b0:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b8b3:	83 c4 20             	add    esp,0x20
c001b8b6:	99                   	cdq    
c001b8b7:	5b                   	pop    ebx
c001b8b8:	5e                   	pop    esi
c001b8b9:	5f                   	pop    edi
c001b8ba:	c3                   	ret    
c001b8bb:	5b                   	pop    ebx
c001b8bc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b8c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8c6:	5e                   	pop    esi
c001b8c7:	5f                   	pop    edi
c001b8c8:	c3                   	ret    

c001b8c9 <sysShutdown(regs*)>:
c001b8c9:	83 ec 0c             	sub    esp,0xc
c001b8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8d0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8d3:	85 c0                	test   eax,eax
c001b8d5:	74 18                	je     c001b8ef <sysShutdown(regs*)+0x26>
c001b8d7:	83 f8 01             	cmp    eax,0x1
c001b8da:	74 38                	je     c001b914 <sysShutdown(regs*)+0x4b>
c001b8dc:	83 f8 02             	cmp    eax,0x2
c001b8df:	74 24                	je     c001b905 <sysShutdown(regs*)+0x3c>
c001b8e1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8e6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8eb:	83 c4 0c             	add    esp,0xc
c001b8ee:	c3                   	ret    
c001b8ef:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001b8f4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f6:	6a 00                	push   0x0
c001b8f8:	6a 00                	push   0x0
c001b8fa:	6a 00                	push   0x0
c001b8fc:	50                   	push   eax
c001b8fd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b900:	83 c4 10             	add    esp,0x10
c001b903:	eb dc                	jmp    c001b8e1 <sysShutdown(regs*)+0x18>
c001b905:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001b90a:	8b 10                	mov    edx,DWORD PTR [eax]
c001b90c:	6a 00                	push   0x0
c001b90e:	6a 00                	push   0x0
c001b910:	6a 01                	push   0x1
c001b912:	eb e8                	jmp    c001b8fc <sysShutdown(regs*)+0x33>
c001b914:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c001b919:	85 c0                	test   eax,eax
c001b91b:	74 02                	je     c001b91f <sysShutdown(regs*)+0x56>
c001b91d:	ff d0                	call   eax
c001b91f:	31 c0                	xor    eax,eax
c001b921:	31 d2                	xor    edx,edx
c001b923:	83 c4 0c             	add    esp,0xc
c001b926:	c3                   	ret    

c001b927 <sysCallRealpath(regs*)>:
c001b927:	83 ec 0c             	sub    esp,0xc
c001b92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b931:	85 d2                	test   edx,edx
c001b933:	74 07                	je     c001b93c <sysCallRealpath(regs*)+0x15>
c001b935:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b938:	85 c0                	test   eax,eax
c001b93a:	75 0b                	jne    c001b947 <sysCallRealpath(regs*)+0x20>
c001b93c:	b8 01 00 00 00       	mov    eax,0x1
c001b941:	31 d2                	xor    edx,edx
c001b943:	83 c4 0c             	add    esp,0xc
c001b946:	c3                   	ret    
c001b947:	51                   	push   ecx
c001b948:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b94e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b951:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b957:	51                   	push   ecx
c001b958:	52                   	push   edx
c001b959:	50                   	push   eax
c001b95a:	e8 6f 7a ff ff       	call   c00133ce <Fs::standardiseFiles(char*, char const*, char const*)>
c001b95f:	83 c4 10             	add    esp,0x10
c001b962:	31 c0                	xor    eax,eax
c001b964:	31 d2                	xor    edx,edx
c001b966:	83 c4 0c             	add    esp,0xc
c001b969:	c3                   	ret    

c001b96a <sysCallGetArgc(regs*)>:
c001b96a:	83 ec 14             	sub    esp,0x14
c001b96d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b972:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b975:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b97b:	68 00 bf 02 c0       	push   0xc002bf00
c001b980:	e8 9a 76 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001b985:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98d:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b993:	83 c4 1c             	add    esp,0x1c
c001b996:	99                   	cdq    
c001b997:	c3                   	ret    

c001b998 <sysCallReadDir(regs*)>:
c001b998:	53                   	push   ebx
c001b999:	83 ec 18             	sub    esp,0x18
c001b99c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9a3:	83 f8 02             	cmp    eax,0x2
c001b9a6:	76 53                	jbe    c001b9fb <sysCallReadDir(regs*)+0x63>
c001b9a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b9ab:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b9b1:	77 4f                	ja     c001ba02 <sysCallReadDir(regs*)+0x6a>
c001b9b3:	83 ec 0c             	sub    esp,0xc
c001b9b6:	50                   	push   eax
c001b9b7:	e8 93 60 ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001b9bc:	83 c4 10             	add    esp,0x10
c001b9bf:	85 c0                	test   eax,eax
c001b9c1:	74 50                	je     c001ba13 <sysCallReadDir(regs*)+0x7b>
c001b9c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9cb:	83 ec 0c             	sub    esp,0xc
c001b9ce:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9d0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9d4:	51                   	push   ecx
c001b9d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9d8:	6a 00                	push   0x0
c001b9da:	68 10 01 00 00       	push   0x110
c001b9df:	50                   	push   eax
c001b9e0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9e3:	83 c4 20             	add    esp,0x20
c001b9e6:	85 c0                	test   eax,eax
c001b9e8:	74 38                	je     c001ba22 <sysCallReadDir(regs*)+0x8a>
c001b9ea:	83 f8 07             	cmp    eax,0x7
c001b9ed:	74 0c                	je     c001b9fb <sysCallReadDir(regs*)+0x63>
c001b9ef:	b8 02 00 00 00       	mov    eax,0x2
c001b9f4:	31 d2                	xor    edx,edx
c001b9f6:	83 c4 18             	add    esp,0x18
c001b9f9:	5b                   	pop    ebx
c001b9fa:	c3                   	ret    
c001b9fb:	b8 01 00 00 00       	mov    eax,0x1
c001ba00:	eb f2                	jmp    c001b9f4 <sysCallReadDir(regs*)+0x5c>
c001ba02:	83 ec 08             	sub    esp,0x8
c001ba05:	52                   	push   edx
c001ba06:	68 18 c0 02 c0       	push   0xc002c018
c001ba0b:	e8 0f 76 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001ba10:	83 c4 10             	add    esp,0x10
c001ba13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba18:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1d:	83 c4 18             	add    esp,0x18
c001ba20:	5b                   	pop    ebx
c001ba21:	c3                   	ret    
c001ba22:	31 c0                	xor    eax,eax
c001ba24:	eb ce                	jmp    c001b9f4 <sysCallReadDir(regs*)+0x5c>

c001ba26 <sysCallIsATTY(regs*)>:
c001ba26:	83 ec 0c             	sub    esp,0xc
c001ba29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba30:	83 f8 02             	cmp    eax,0x2
c001ba33:	76 07                	jbe    c001ba3c <sysCallIsATTY(regs*)+0x16>
c001ba35:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba3a:	75 26                	jne    c001ba62 <sysCallIsATTY(regs*)+0x3c>
c001ba3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba44:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba4a:	85 c0                	test   eax,eax
c001ba4c:	74 24                	je     c001ba72 <sysCallIsATTY(regs*)+0x4c>
c001ba4e:	83 ec 0c             	sub    esp,0xc
c001ba51:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba53:	50                   	push   eax
c001ba54:	ff 12                	call   DWORD PTR [edx]
c001ba56:	31 d2                	xor    edx,edx
c001ba58:	0f b6 c0             	movzx  eax,al
c001ba5b:	83 c4 10             	add    esp,0x10
c001ba5e:	83 c4 0c             	add    esp,0xc
c001ba61:	c3                   	ret    
c001ba62:	83 ec 0c             	sub    esp,0xc
c001ba65:	50                   	push   eax
c001ba66:	e8 e4 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001ba6b:	83 c4 10             	add    esp,0x10
c001ba6e:	85 c0                	test   eax,eax
c001ba70:	75 dc                	jne    c001ba4e <sysCallIsATTY(regs*)+0x28>
c001ba72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba77:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba7c:	83 c4 0c             	add    esp,0xc
c001ba7f:	c3                   	ret    

c001ba80 <sysCallSeek(regs*)>:
c001ba80:	53                   	push   ebx
c001ba81:	83 ec 08             	sub    esp,0x8
c001ba84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba8b:	83 f8 02             	cmp    eax,0x2
c001ba8e:	76 4a                	jbe    c001bada <sysCallSeek(regs*)+0x5a>
c001ba90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba95:	77 32                	ja     c001bac9 <sysCallSeek(regs*)+0x49>
c001ba97:	83 ec 0c             	sub    esp,0xc
c001ba9a:	50                   	push   eax
c001ba9b:	e8 af 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001baa0:	83 c4 0c             	add    esp,0xc
c001baa3:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001baa6:	31 db                	xor    ebx,ebx
c001baa8:	53                   	push   ebx
c001baa9:	51                   	push   ecx
c001baaa:	50                   	push   eax
c001baab:	e8 ea 7b ff ff       	call   c001369a <File::seek(unsigned long long)>
c001bab0:	83 c4 10             	add    esp,0x10
c001bab3:	85 c0                	test   eax,eax
c001bab5:	0f 95 c0             	setne  al
c001bab8:	31 d2                	xor    edx,edx
c001baba:	0f b6 c0             	movzx  eax,al
c001babd:	f7 d8                	neg    eax
c001babf:	83 d2 00             	adc    edx,0x0
c001bac2:	83 c4 08             	add    esp,0x8
c001bac5:	f7 da                	neg    edx
c001bac7:	5b                   	pop    ebx
c001bac8:	c3                   	ret    
c001bac9:	83 ec 08             	sub    esp,0x8
c001bacc:	50                   	push   eax
c001bacd:	68 0b bf 02 c0       	push   0xc002bf0b
c001bad2:	e8 48 75 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001badf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bae4:	83 c4 08             	add    esp,0x8
c001bae7:	5b                   	pop    ebx
c001bae8:	c3                   	ret    

c001bae9 <sysCallTell(regs*)>:
c001bae9:	53                   	push   ebx
c001baea:	83 ec 08             	sub    esp,0x8
c001baed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baf1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001baf4:	83 f8 02             	cmp    eax,0x2
c001baf7:	76 5e                	jbe    c001bb57 <sysCallTell(regs*)+0x6e>
c001baf9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bafe:	77 2d                	ja     c001bb2d <sysCallTell(regs*)+0x44>
c001bb00:	83 ec 0c             	sub    esp,0xc
c001bb03:	50                   	push   eax
c001bb04:	e8 46 5f ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bb09:	5a                   	pop    edx
c001bb0a:	59                   	pop    ecx
c001bb0b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb0e:	50                   	push   eax
c001bb0f:	e8 dc 7b ff ff       	call   c00136f0 <File::tell(unsigned long long*)>
c001bb14:	83 c4 10             	add    esp,0x10
c001bb17:	85 c0                	test   eax,eax
c001bb19:	0f 95 c0             	setne  al
c001bb1c:	31 d2                	xor    edx,edx
c001bb1e:	0f b6 c0             	movzx  eax,al
c001bb21:	f7 d8                	neg    eax
c001bb23:	83 d2 00             	adc    edx,0x0
c001bb26:	83 c4 08             	add    esp,0x8
c001bb29:	f7 da                	neg    edx
c001bb2b:	5b                   	pop    ebx
c001bb2c:	c3                   	ret    
c001bb2d:	83 ec 08             	sub    esp,0x8
c001bb30:	50                   	push   eax
c001bb31:	68 25 bf 02 c0       	push   0xc002bf25
c001bb36:	e8 e4 74 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bb3b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb47:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb4e:	31 d2                	xor    edx,edx
c001bb50:	31 c0                	xor    eax,eax
c001bb52:	83 c4 08             	add    esp,0x8
c001bb55:	5b                   	pop    ebx
c001bb56:	c3                   	ret    
c001bb57:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb5c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb61:	83 c4 08             	add    esp,0x8
c001bb64:	5b                   	pop    ebx
c001bb65:	c3                   	ret    

c001bb66 <sysCallSize(regs*)>:
c001bb66:	53                   	push   ebx
c001bb67:	83 ec 18             	sub    esp,0x18
c001bb6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb6e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb71:	83 f8 02             	cmp    eax,0x2
c001bb74:	76 64                	jbe    c001bbda <sysCallSize(regs*)+0x74>
c001bb76:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb7b:	77 33                	ja     c001bbb0 <sysCallSize(regs*)+0x4a>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	50                   	push   eax
c001bb81:	e8 c9 5e ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bb86:	83 c4 0c             	add    esp,0xc
c001bb89:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb8d:	52                   	push   edx
c001bb8e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb91:	50                   	push   eax
c001bb92:	e8 f1 7c ff ff       	call   c0013888 <File::stat(unsigned long long*, bool*)>
c001bb97:	83 c4 10             	add    esp,0x10
c001bb9a:	85 c0                	test   eax,eax
c001bb9c:	0f 95 c0             	setne  al
c001bb9f:	31 d2                	xor    edx,edx
c001bba1:	0f b6 c0             	movzx  eax,al
c001bba4:	f7 d8                	neg    eax
c001bba6:	83 d2 00             	adc    edx,0x0
c001bba9:	83 c4 18             	add    esp,0x18
c001bbac:	f7 da                	neg    edx
c001bbae:	5b                   	pop    ebx
c001bbaf:	c3                   	ret    
c001bbb0:	83 ec 08             	sub    esp,0x8
c001bbb3:	50                   	push   eax
c001bbb4:	68 3f bf 02 c0       	push   0xc002bf3f
c001bbb9:	e8 61 74 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bbbe:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bbc1:	83 c4 10             	add    esp,0x10
c001bbc4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bbd1:	31 d2                	xor    edx,edx
c001bbd3:	31 c0                	xor    eax,eax
c001bbd5:	83 c4 18             	add    esp,0x18
c001bbd8:	5b                   	pop    ebx
c001bbd9:	c3                   	ret    
c001bbda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbe4:	83 c4 18             	add    esp,0x18
c001bbe7:	5b                   	pop    ebx
c001bbe8:	c3                   	ret    

c001bbe9 <sysCallSizeFromFilename(regs*)>:
c001bbe9:	57                   	push   edi
c001bbea:	56                   	push   esi
c001bbeb:	53                   	push   ebx
c001bbec:	83 ec 20             	sub    esp,0x20
c001bbef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbf3:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbf6:	83 fb 02             	cmp    ebx,0x2
c001bbf9:	0f 86 99 00 00 00    	jbe    c001bc98 <sysCallSizeFromFilename(regs*)+0xaf>
c001bbff:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bc05:	77 65                	ja     c001bc6c <sysCallSizeFromFilename(regs*)+0x83>
c001bc07:	83 ec 0c             	sub    esp,0xc
c001bc0a:	68 14 01 00 00       	push   0x114
c001bc0f:	e8 2f 3c ff ff       	call   c000f843 <malloc>
c001bc14:	83 c4 0c             	add    esp,0xc
c001bc17:	89 c6                	mov    esi,eax
c001bc19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc1e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc21:	53                   	push   ebx
c001bc22:	56                   	push   esi
c001bc23:	e8 50 79 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001bc28:	83 c4 0c             	add    esp,0xc
c001bc2b:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bc2f:	50                   	push   eax
c001bc30:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc33:	56                   	push   esi
c001bc34:	e8 4f 7c ff ff       	call   c0013888 <File::stat(unsigned long long*, bool*)>
c001bc39:	83 c4 10             	add    esp,0x10
c001bc3c:	85 f6                	test   esi,esi
c001bc3e:	74 14                	je     c001bc54 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc44:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc46:	83 ec 0c             	sub    esp,0xc
c001bc49:	56                   	push   esi
c001bc4a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc4d:	83 c4 10             	add    esp,0x10
c001bc50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc54:	85 c0                	test   eax,eax
c001bc56:	0f 95 c0             	setne  al
c001bc59:	31 d2                	xor    edx,edx
c001bc5b:	0f b6 c0             	movzx  eax,al
c001bc5e:	f7 d8                	neg    eax
c001bc60:	83 d2 00             	adc    edx,0x0
c001bc63:	83 c4 20             	add    esp,0x20
c001bc66:	f7 da                	neg    edx
c001bc68:	5b                   	pop    ebx
c001bc69:	5e                   	pop    esi
c001bc6a:	5f                   	pop    edi
c001bc6b:	c3                   	ret    
c001bc6c:	83 ec 08             	sub    esp,0x8
c001bc6f:	53                   	push   ebx
c001bc70:	68 3f bf 02 c0       	push   0xc002bf3f
c001bc75:	e8 a5 73 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bc7a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc8d:	31 d2                	xor    edx,edx
c001bc8f:	83 c4 20             	add    esp,0x20
c001bc92:	31 c0                	xor    eax,eax
c001bc94:	5b                   	pop    ebx
c001bc95:	5e                   	pop    esi
c001bc96:	5f                   	pop    edi
c001bc97:	c3                   	ret    
c001bc98:	83 c4 20             	add    esp,0x20
c001bc9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bca0:	5b                   	pop    ebx
c001bca1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bca6:	5e                   	pop    esi
c001bca7:	5f                   	pop    edi
c001bca8:	c3                   	ret    

c001bca9 <sysCallClose(regs*)>:
c001bca9:	53                   	push   ebx
c001bcaa:	83 ec 08             	sub    esp,0x8
c001bcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcb1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcb4:	83 f8 02             	cmp    eax,0x2
c001bcb7:	76 50                	jbe    c001bd09 <sysCallClose(regs*)+0x60>
c001bcb9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcbe:	74 58                	je     c001bd18 <sysCallClose(regs*)+0x6f>
c001bcc0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcc5:	74 60                	je     c001bd27 <sysCallClose(regs*)+0x7e>
c001bcc7:	77 2f                	ja     c001bcf8 <sysCallClose(regs*)+0x4f>
c001bcc9:	83 ec 0c             	sub    esp,0xc
c001bccc:	50                   	push   eax
c001bccd:	e8 7d 5d ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bcd2:	89 c3                	mov    ebx,eax
c001bcd4:	89 04 24             	mov    DWORD PTR [esp],eax
c001bcd7:	e8 5e 79 ff ff       	call   c001363a <File::close()>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	85 db                	test   ebx,ebx
c001bce1:	74 0c                	je     c001bcef <sysCallClose(regs*)+0x46>
c001bce3:	83 ec 0c             	sub    esp,0xc
c001bce6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bce8:	53                   	push   ebx
c001bce9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcec:	83 c4 10             	add    esp,0x10
c001bcef:	31 c0                	xor    eax,eax
c001bcf1:	31 d2                	xor    edx,edx
c001bcf3:	83 c4 08             	add    esp,0x8
c001bcf6:	5b                   	pop    ebx
c001bcf7:	c3                   	ret    
c001bcf8:	83 ec 08             	sub    esp,0x8
c001bcfb:	50                   	push   eax
c001bcfc:	68 3c c0 02 c0       	push   0xc002c03c
c001bd01:	e8 19 73 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bd06:	83 c4 10             	add    esp,0x10
c001bd09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd13:	83 c4 08             	add    esp,0x8
c001bd16:	5b                   	pop    ebx
c001bd17:	c3                   	ret    
c001bd18:	83 ec 0c             	sub    esp,0xc
c001bd1b:	68 5a bf 02 c0       	push   0xc002bf5a
c001bd20:	e8 fa 72 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bd25:	eb c5                	jmp    c001bcec <sysCallClose(regs*)+0x43>
c001bd27:	83 ec 0c             	sub    esp,0xc
c001bd2a:	68 68 bf 02 c0       	push   0xc002bf68
c001bd2f:	eb ef                	jmp    c001bd20 <sysCallClose(regs*)+0x77>

c001bd31 <sysCallOpenDir(regs*)>:
c001bd31:	56                   	push   esi
c001bd32:	53                   	push   ebx
c001bd33:	53                   	push   ebx
c001bd34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd38:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd3b:	85 f6                	test   esi,esi
c001bd3d:	74 59                	je     c001bd98 <sysCallOpenDir(regs*)+0x67>
c001bd3f:	83 ec 0c             	sub    esp,0xc
c001bd42:	68 14 01 00 00       	push   0x114
c001bd47:	e8 f7 3a ff ff       	call   c000f843 <malloc>
c001bd4c:	83 c4 0c             	add    esp,0xc
c001bd4f:	89 c6                	mov    esi,eax
c001bd51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd56:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd5c:	56                   	push   esi
c001bd5d:	e8 c2 7c ff ff       	call   c0013a24 <Directory::Directory(char const*, Process*)>
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	85 f6                	test   esi,esi
c001bd67:	74 2f                	je     c001bd98 <sysCallOpenDir(regs*)+0x67>
c001bd69:	83 ec 0c             	sub    esp,0xc
c001bd6c:	56                   	push   esi
c001bd6d:	e8 16 7d ff ff       	call   c0013a88 <Directory::open()>
c001bd72:	83 c4 10             	add    esp,0x10
c001bd75:	85 c0                	test   eax,eax
c001bd77:	75 1f                	jne    c001bd98 <sysCallOpenDir(regs*)+0x67>
c001bd79:	83 ec 0c             	sub    esp,0xc
c001bd7c:	56                   	push   esi
c001bd7d:	e8 d8 59 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001bd82:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	89 02                	mov    DWORD PTR [edx],eax
c001bd8a:	c1 f8 1f             	sar    eax,0x1f
c001bd8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd90:	31 c0                	xor    eax,eax
c001bd92:	59                   	pop    ecx
c001bd93:	31 d2                	xor    edx,edx
c001bd95:	5b                   	pop    ebx
c001bd96:	5e                   	pop    esi
c001bd97:	c3                   	ret    
c001bd98:	59                   	pop    ecx
c001bd99:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd9e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bda3:	5b                   	pop    ebx
c001bda4:	5e                   	pop    esi
c001bda5:	c3                   	ret    

c001bda6 <sysCallCloseDir(regs*)>:
c001bda6:	53                   	push   ebx
c001bda7:	83 ec 08             	sub    esp,0x8
c001bdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bdb1:	83 f8 02             	cmp    eax,0x2
c001bdb4:	76 47                	jbe    c001bdfd <sysCallCloseDir(regs*)+0x57>
c001bdb6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdbb:	77 2f                	ja     c001bdec <sysCallCloseDir(regs*)+0x46>
c001bdbd:	83 ec 0c             	sub    esp,0xc
c001bdc0:	50                   	push   eax
c001bdc1:	e8 89 5c ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001bdc6:	89 c3                	mov    ebx,eax
c001bdc8:	89 04 24             	mov    DWORD PTR [esp],eax
c001bdcb:	e8 14 7d ff ff       	call   c0013ae4 <Directory::close()>
c001bdd0:	83 c4 10             	add    esp,0x10
c001bdd3:	85 db                	test   ebx,ebx
c001bdd5:	74 0c                	je     c001bde3 <sysCallCloseDir(regs*)+0x3d>
c001bdd7:	83 ec 0c             	sub    esp,0xc
c001bdda:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bddc:	53                   	push   ebx
c001bddd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bde0:	83 c4 10             	add    esp,0x10
c001bde3:	31 c0                	xor    eax,eax
c001bde5:	31 d2                	xor    edx,edx
c001bde7:	83 c4 08             	add    esp,0x8
c001bdea:	5b                   	pop    ebx
c001bdeb:	c3                   	ret    
c001bdec:	83 ec 08             	sub    esp,0x8
c001bdef:	50                   	push   eax
c001bdf0:	68 64 c0 02 c0       	push   0xc002c064
c001bdf5:	e8 25 72 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be02:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be07:	83 c4 08             	add    esp,0x8
c001be0a:	5b                   	pop    ebx
c001be0b:	c3                   	ret    

c001be0c <sysCallMakeDir(regs*)>:
c001be0c:	56                   	push   esi
c001be0d:	53                   	push   ebx
c001be0e:	83 ec 10             	sub    esp,0x10
c001be11:	68 14 01 00 00       	push   0x114
c001be16:	e8 28 3a ff ff       	call   c000f843 <malloc>
c001be1b:	83 c4 0c             	add    esp,0xc
c001be1e:	89 c3                	mov    ebx,eax
c001be20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be25:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001be2c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be2f:	53                   	push   ebx
c001be30:	e8 ef 7b ff ff       	call   c0013a24 <Directory::Directory(char const*, Process*)>
c001be35:	83 c4 10             	add    esp,0x10
c001be38:	85 db                	test   ebx,ebx
c001be3a:	74 32                	je     c001be6e <sysCallMakeDir(regs*)+0x62>
c001be3c:	83 ec 0c             	sub    esp,0xc
c001be3f:	53                   	push   ebx
c001be40:	e8 23 7e ff ff       	call   c0013c68 <Directory::create()>
c001be45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be48:	89 c6                	mov    esi,eax
c001be4a:	e8 95 7c ff ff       	call   c0013ae4 <Directory::close()>
c001be4f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be57:	83 c4 10             	add    esp,0x10
c001be5a:	31 c0                	xor    eax,eax
c001be5c:	59                   	pop    ecx
c001be5d:	85 f6                	test   esi,esi
c001be5f:	5b                   	pop    ebx
c001be60:	0f 95 c0             	setne  al
c001be63:	5e                   	pop    esi
c001be64:	31 d2                	xor    edx,edx
c001be66:	f7 d8                	neg    eax
c001be68:	83 d2 00             	adc    edx,0x0
c001be6b:	f7 da                	neg    edx
c001be6d:	c3                   	ret    
c001be6e:	59                   	pop    ecx
c001be6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be74:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be79:	5b                   	pop    ebx
c001be7a:	5e                   	pop    esi
c001be7b:	c3                   	ret    

c001be7c <sysCallWait(regs*)>:
c001be7c:	83 ec 10             	sub    esp,0x10
c001be7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be83:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be86:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be89:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be8c:	e8 e6 24 00 00       	call   c001e377 <waitTask(int, int*, int)>
c001be91:	83 c4 1c             	add    esp,0x1c
c001be94:	99                   	cdq    
c001be95:	c3                   	ret    

c001be96 <sysCallNotImpl(regs*)>:
c001be96:	83 ec 18             	sub    esp,0x18
c001be99:	68 76 bf 02 c0       	push   0xc002bf76
c001be9e:	e8 2a e8 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001bea3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bea8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bead:	83 c4 1c             	add    esp,0x1c
c001beb0:	c3                   	ret    

c001beb1 <sysPanic(regs*)>:
c001beb1:	83 ec 18             	sub    esp,0x18
c001beb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001beb8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bebb:	e8 0d e8 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001bec0:	c7 04 24 90 bf 02 c0 	mov    DWORD PTR [esp],0xc002bf90
c001bec7:	e8 01 e8 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001becc:	b8 01 00 00 00       	mov    eax,0x1
c001bed1:	31 d2                	xor    edx,edx
c001bed3:	83 c4 1c             	add    esp,0x1c
c001bed6:	c3                   	ret    

c001bed7 <sysCallRmdir(regs*)>:
c001bed7:	56                   	push   esi
c001bed8:	53                   	push   ebx
c001bed9:	83 ec 20             	sub    esp,0x20
c001bedc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bee0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bee3:	68 14 01 00 00       	push   0x114
c001bee8:	e8 56 39 ff ff       	call   c000f843 <malloc>
c001beed:	83 c4 0c             	add    esp,0xc
c001bef0:	89 c3                	mov    ebx,eax
c001bef2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bef7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001befa:	56                   	push   esi
c001befb:	53                   	push   ebx
c001befc:	e8 77 76 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001bf01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf04:	e8 4b 78 ff ff       	call   c0013754 <File::unlink()>
c001bf09:	83 c4 10             	add    esp,0x10
c001bf0c:	85 db                	test   ebx,ebx
c001bf0e:	74 14                	je     c001bf24 <sysCallRmdir(regs*)+0x4d>
c001bf10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf14:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf16:	83 ec 0c             	sub    esp,0xc
c001bf19:	53                   	push   ebx
c001bf1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf1d:	83 c4 10             	add    esp,0x10
c001bf20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf24:	85 c0                	test   eax,eax
c001bf26:	0f 95 c0             	setne  al
c001bf29:	31 d2                	xor    edx,edx
c001bf2b:	0f b6 c0             	movzx  eax,al
c001bf2e:	f7 d8                	neg    eax
c001bf30:	83 d2 00             	adc    edx,0x0
c001bf33:	83 c4 14             	add    esp,0x14
c001bf36:	f7 da                	neg    edx
c001bf38:	5b                   	pop    ebx
c001bf39:	5e                   	pop    esi
c001bf3a:	c3                   	ret    

c001bf3b <sysCallUnlink(regs*)>:
c001bf3b:	56                   	push   esi
c001bf3c:	53                   	push   ebx
c001bf3d:	83 ec 20             	sub    esp,0x20
c001bf40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf44:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf47:	68 14 01 00 00       	push   0x114
c001bf4c:	e8 f2 38 ff ff       	call   c000f843 <malloc>
c001bf51:	83 c4 0c             	add    esp,0xc
c001bf54:	89 c3                	mov    ebx,eax
c001bf56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf5b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf5e:	56                   	push   esi
c001bf5f:	53                   	push   ebx
c001bf60:	e8 13 76 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001bf65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf68:	e8 e7 77 ff ff       	call   c0013754 <File::unlink()>
c001bf6d:	83 c4 10             	add    esp,0x10
c001bf70:	85 db                	test   ebx,ebx
c001bf72:	74 14                	je     c001bf88 <sysCallUnlink(regs*)+0x4d>
c001bf74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf78:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf7a:	83 ec 0c             	sub    esp,0xc
c001bf7d:	53                   	push   ebx
c001bf7e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf81:	83 c4 10             	add    esp,0x10
c001bf84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf88:	85 c0                	test   eax,eax
c001bf8a:	0f 95 c0             	setne  al
c001bf8d:	31 d2                	xor    edx,edx
c001bf8f:	0f b6 c0             	movzx  eax,al
c001bf92:	f7 d8                	neg    eax
c001bf94:	83 d2 00             	adc    edx,0x0
c001bf97:	83 c4 14             	add    esp,0x14
c001bf9a:	f7 da                	neg    edx
c001bf9c:	5b                   	pop    ebx
c001bf9d:	5e                   	pop    esi
c001bf9e:	c3                   	ret    

c001bf9f <sysCallGetArgv(regs*)>:
c001bf9f:	83 ec 0c             	sub    esp,0xc
c001bfa2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bfa6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bfa9:	85 c0                	test   eax,eax
c001bfab:	78 2b                	js     c001bfd8 <sysCallGetArgv(regs*)+0x39>
c001bfad:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bfb3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bfb6:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bfbc:	7d 1a                	jge    c001bfd8 <sysCallGetArgv(regs*)+0x39>
c001bfbe:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bfc5:	85 c0                	test   eax,eax
c001bfc7:	74 17                	je     c001bfe0 <sysCallGetArgv(regs*)+0x41>
c001bfc9:	83 ec 08             	sub    esp,0x8
c001bfcc:	50                   	push   eax
c001bfcd:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfd0:	e8 5f 48 fe ff       	call   c0000834 <strcpy>
c001bfd5:	83 c4 10             	add    esp,0x10
c001bfd8:	31 c0                	xor    eax,eax
c001bfda:	31 d2                	xor    edx,edx
c001bfdc:	83 c4 0c             	add    esp,0xc
c001bfdf:	c3                   	ret    
c001bfe0:	b8 01 00 00 00       	mov    eax,0x1
c001bfe5:	31 d2                	xor    edx,edx
c001bfe7:	83 c4 0c             	add    esp,0xc
c001bfea:	c3                   	ret    

c001bfeb <sysCallTTYName(regs*)>:
c001bfeb:	56                   	push   esi
c001bfec:	53                   	push   ebx
c001bfed:	53                   	push   ebx
c001bfee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bff2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bff5:	85 c0                	test   eax,eax
c001bff7:	74 5f                	je     c001c058 <sysCallTTYName(regs*)+0x6d>
c001bff9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bffc:	83 f8 02             	cmp    eax,0x2
c001bfff:	77 3e                	ja     c001c03f <sysCallTTYName(regs*)+0x54>
c001c001:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c006:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c009:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c00f:	85 db                	test   ebx,ebx
c001c011:	74 45                	je     c001c058 <sysCallTTYName(regs*)+0x6d>
c001c013:	83 ec 0c             	sub    esp,0xc
c001c016:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c018:	53                   	push   ebx
c001c019:	ff 10                	call   DWORD PTR [eax]
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	84 c0                	test   al,al
c001c020:	74 41                	je     c001c063 <sysCallTTYName(regs*)+0x78>
c001c022:	83 ec 08             	sub    esp,0x8
c001c025:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001c02b:	53                   	push   ebx
c001c02c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c02f:	e8 00 48 fe ff       	call   c0000834 <strcpy>
c001c034:	83 c4 10             	add    esp,0x10
c001c037:	31 c0                	xor    eax,eax
c001c039:	59                   	pop    ecx
c001c03a:	31 d2                	xor    edx,edx
c001c03c:	5b                   	pop    ebx
c001c03d:	5e                   	pop    esi
c001c03e:	c3                   	ret    
c001c03f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c044:	74 bb                	je     c001c001 <sysCallTTYName(regs*)+0x16>
c001c046:	83 ec 0c             	sub    esp,0xc
c001c049:	50                   	push   eax
c001c04a:	e8 00 5a ff ff       	call   c0011a4f <getFromFileDescriptor(int)>
c001c04f:	83 c4 10             	add    esp,0x10
c001c052:	89 c3                	mov    ebx,eax
c001c054:	85 db                	test   ebx,ebx
c001c056:	75 bb                	jne    c001c013 <sysCallTTYName(regs*)+0x28>
c001c058:	59                   	pop    ecx
c001c059:	b8 01 00 00 00       	mov    eax,0x1
c001c05e:	31 d2                	xor    edx,edx
c001c060:	5b                   	pop    ebx
c001c061:	5e                   	pop    esi
c001c062:	c3                   	ret    
c001c063:	59                   	pop    ecx
c001c064:	b8 02 00 00 00       	mov    eax,0x2
c001c069:	31 d2                	xor    edx,edx
c001c06b:	5b                   	pop    ebx
c001c06c:	5e                   	pop    esi
c001c06d:	c3                   	ret    

c001c06e <sysCallUSleep(regs*)>:
c001c06e:	83 ec 14             	sub    esp,0x14
c001c071:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c076:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c07a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c081:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c084:	01 ca                	add    edx,ecx
c001c086:	52                   	push   edx
c001c087:	50                   	push   eax
c001c088:	e8 83 23 00 00       	call   c001e410 <nanoSleep(unsigned long long)>
c001c08d:	31 c0                	xor    eax,eax
c001c08f:	31 d2                	xor    edx,edx
c001c091:	83 c4 1c             	add    esp,0x1c
c001c094:	c3                   	ret    

c001c095 <sysCallSpawn(regs*)>:
c001c095:	56                   	push   esi
c001c096:	53                   	push   ebx
c001c097:	53                   	push   ebx
c001c098:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c09c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c09f:	85 f6                	test   esi,esi
c001c0a1:	75 08                	jne    c001c0ab <sysCallSpawn(regs*)+0x16>
c001c0a3:	59                   	pop    ecx
c001c0a4:	31 c0                	xor    eax,eax
c001c0a6:	31 d2                	xor    edx,edx
c001c0a8:	5b                   	pop    ebx
c001c0a9:	5e                   	pop    esi
c001c0aa:	c3                   	ret    
c001c0ab:	83 ec 0c             	sub    esp,0xc
c001c0ae:	68 3f 07 00 00       	push   0x73f
c001c0b3:	e8 8b 37 ff ff       	call   c000f843 <malloc>
c001c0b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c0bb:	89 c6                	mov    esi,eax
c001c0bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0c2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0c8:	56                   	push   esi
c001c0c9:	e8 42 1a 00 00       	call   c001db10 <Process::Process(char const*, Process*, char**)>
c001c0ce:	83 c4 20             	add    esp,0x20
c001c0d1:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0d8:	75 c9                	jne    c001c0a3 <sysCallSpawn(regs*)+0xe>
c001c0da:	83 ec 0c             	sub    esp,0xc
c001c0dd:	56                   	push   esi
c001c0de:	e8 f3 1f 00 00       	call   c001e0d6 <Process::createUserThread()>
c001c0e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0e5:	83 c4 10             	add    esp,0x10
c001c0e8:	99                   	cdq    
c001c0e9:	59                   	pop    ecx
c001c0ea:	5b                   	pop    ebx
c001c0eb:	5e                   	pop    esi
c001c0ec:	c3                   	ret    

c001c0ed <sysCallGetEnv(regs*)>:
c001c0ed:	55                   	push   ebp
c001c0ee:	57                   	push   edi
c001c0ef:	56                   	push   esi
c001c0f0:	53                   	push   ebx
c001c0f1:	83 ec 28             	sub    esp,0x28
c001c0f4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0f8:	68 9f bf 02 c0       	push   0xc002bf9f
c001c0fd:	e8 1d 6f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c102:	5f                   	pop    edi
c001c103:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c106:	5d                   	pop    ebp
c001c107:	53                   	push   ebx
c001c108:	68 e5 c2 02 c0       	push   0xc002c2e5
c001c10d:	e8 0d 6f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c112:	58                   	pop    eax
c001c113:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c116:	5a                   	pop    edx
c001c117:	57                   	push   edi
c001c118:	68 a8 bf 02 c0       	push   0xc002bfa8
c001c11d:	e8 fd 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c122:	59                   	pop    ecx
c001c123:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c128:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c12b:	e8 b9 e4 ff ff       	call   c001a5e9 <Krnl::getProcessTotalEnvCount(Process*)>
c001c130:	5a                   	pop    edx
c001c131:	89 c5                	mov    ebp,eax
c001c133:	59                   	pop    ecx
c001c134:	50                   	push   eax
c001c135:	68 b2 bf 02 c0       	push   0xc002bfb2
c001c13a:	e8 e0 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c13f:	83 c4 10             	add    esp,0x10
c001c142:	39 ef                	cmp    edi,ebp
c001c144:	7c 15                	jl     c001c15b <sysCallGetEnv(regs*)+0x6e>
c001c146:	85 db                	test   ebx,ebx
c001c148:	75 0c                	jne    c001c156 <sysCallGetEnv(regs*)+0x69>
c001c14a:	83 c4 1c             	add    esp,0x1c
c001c14d:	31 c0                	xor    eax,eax
c001c14f:	5b                   	pop    ebx
c001c150:	31 d2                	xor    edx,edx
c001c152:	5e                   	pop    esi
c001c153:	5f                   	pop    edi
c001c154:	5d                   	pop    ebp
c001c155:	c3                   	ret    
c001c156:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c159:	eb ef                	jmp    c001c14a <sysCallGetEnv(regs*)+0x5d>
c001c15b:	83 ec 0c             	sub    esp,0xc
c001c15e:	68 be bf 02 c0       	push   0xc002bfbe
c001c163:	e8 b7 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c168:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c16c:	83 c4 0c             	add    esp,0xc
c001c16f:	57                   	push   edi
c001c170:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c176:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c179:	50                   	push   eax
c001c17a:	e8 8a e4 ff ff       	call   c001a609 <Krnl::getProcessEnvPair(Process*, int)>
c001c17f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c183:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c187:	68 64 c3 02 c0       	push   0xc002c364
c001c18c:	e8 8e 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c191:	83 c4 10             	add    esp,0x10
c001c194:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c197:	85 f6                	test   esi,esi
c001c199:	75 47                	jne    c001c1e2 <sysCallGetEnv(regs*)+0xf5>
c001c19b:	83 ec 0c             	sub    esp,0xc
c001c19e:	55                   	push   ebp
c001c19f:	e8 f0 45 fe ff       	call   c0000794 <strlen>
c001c1a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1a7:	89 c3                	mov    ebx,eax
c001c1a9:	e8 e6 45 fe ff       	call   c0000794 <strlen>
c001c1ae:	5a                   	pop    edx
c001c1af:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1b3:	59                   	pop    ecx
c001c1b4:	50                   	push   eax
c001c1b5:	68 c1 bf 02 c0       	push   0xc002bfc1
c001c1ba:	e8 60 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c1bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c1c2:	e8 cd 45 fe ff       	call   c0000794 <strlen>
c001c1c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c1ca:	89 c3                	mov    ebx,eax
c001c1cc:	e8 c3 45 fe ff       	call   c0000794 <strlen>
c001c1d1:	83 c4 10             	add    esp,0x10
c001c1d4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1d8:	83 c4 1c             	add    esp,0x1c
c001c1db:	31 d2                	xor    edx,edx
c001c1dd:	5b                   	pop    ebx
c001c1de:	5e                   	pop    esi
c001c1df:	5f                   	pop    edi
c001c1e0:	5d                   	pop    ebp
c001c1e1:	c3                   	ret    
c001c1e2:	83 ec 0c             	sub    esp,0xc
c001c1e5:	68 7e c3 02 c0       	push   0xc002c37e
c001c1ea:	e8 30 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c1ef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1f2:	58                   	pop    eax
c001c1f3:	5a                   	pop    edx
c001c1f4:	55                   	push   ebp
c001c1f5:	53                   	push   ebx
c001c1f6:	e8 39 46 fe ff       	call   c0000834 <strcpy>
c001c1fb:	59                   	pop    ecx
c001c1fc:	5e                   	pop    esi
c001c1fd:	68 cb bf 02 c0       	push   0xc002bfcb
c001c202:	53                   	push   ebx
c001c203:	e8 6c 47 fe ff       	call   c0000974 <strcat>
c001c208:	5d                   	pop    ebp
c001c209:	58                   	pop    eax
c001c20a:	57                   	push   edi
c001c20b:	53                   	push   ebx
c001c20c:	e8 63 47 fe ff       	call   c0000974 <strcat>
c001c211:	c7 04 24 98 c3 02 c0 	mov    DWORD PTR [esp],0xc002c398
c001c218:	e8 02 6e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c21d:	83 c4 10             	add    esp,0x10
c001c220:	e9 25 ff ff ff       	jmp    c001c14a <sysCallGetEnv(regs*)+0x5d>

c001c225 <sysAppSettings(regs*)>:
c001c225:	53                   	push   ebx
c001c226:	83 ec 08             	sub    esp,0x8
c001c229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c230:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c236:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c23b:	66 3d c0 09          	cmp    ax,0x9c0
c001c23f:	75 2f                	jne    c001c270 <sysAppSettings(regs*)+0x4b>
c001c241:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c247:	83 e0 1f             	and    eax,0x1f
c001c24a:	3c 01                	cmp    al,0x1
c001c24c:	74 2e                	je     c001c27c <sysAppSettings(regs*)+0x57>
c001c24e:	3c 07                	cmp    al,0x7
c001c250:	0f 84 bd 00 00 00    	je     c001c313 <sysAppSettings(regs*)+0xee>
c001c256:	84 c0                	test   al,al
c001c258:	0f 84 dc 00 00 00    	je     c001c33a <sysAppSettings(regs*)+0x115>
c001c25e:	3c 08                	cmp    al,0x8
c001c260:	74 6d                	je     c001c2cf <sysAppSettings(regs*)+0xaa>
c001c262:	0f b6 c0             	movzx  eax,al
c001c265:	83 c4 08             	add    esp,0x8
c001c268:	05 e8 03 00 00       	add    eax,0x3e8
c001c26d:	5b                   	pop    ebx
c001c26e:	99                   	cdq    
c001c26f:	c3                   	ret    
c001c270:	b8 01 00 00 00       	mov    eax,0x1
c001c275:	31 d2                	xor    edx,edx
c001c277:	83 c4 08             	add    esp,0x8
c001c27a:	5b                   	pop    ebx
c001c27b:	c3                   	ret    
c001c27c:	51                   	push   ecx
c001c27d:	68 00 01 00 00       	push   0x100
c001c282:	6a 00                	push   0x0
c001c284:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c289:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c28c:	83 c0 0c             	add    eax,0xc
c001c28f:	50                   	push   eax
c001c290:	e8 e3 44 fe ff       	call   c0000778 <memset>
c001c295:	83 c4 0c             	add    esp,0xc
c001c298:	68 ff 00 00 00       	push   0xff
c001c29d:	53                   	push   ebx
c001c29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a6:	83 c0 0c             	add    eax,0xc
c001c2a9:	50                   	push   eax
c001c2aa:	e8 95 44 fe ff       	call   c0000744 <memcpy>
c001c2af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b4:	5b                   	pop    ebx
c001c2b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b8:	5a                   	pop    edx
c001c2b9:	8d 50 0c             	lea    edx,[eax+0xc]
c001c2bc:	52                   	push   edx
c001c2bd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2c3:	e8 02 49 ff ff       	call   c0010bca <VgaText::setTitle(char*)>
c001c2c8:	83 c4 10             	add    esp,0x10
c001c2cb:	31 c0                	xor    eax,eax
c001c2cd:	eb a6                	jmp    c001c275 <sysAppSettings(regs*)+0x50>
c001c2cf:	83 ec 08             	sub    esp,0x8
c001c2d2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2d8:	83 e0 0f             	and    eax,0xf
c001c2db:	50                   	push   eax
c001c2dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2ea:	e8 cb 48 ff ff       	call   c0010bba <VgaText::setTitleColour(VgaColour)>
c001c2ef:	58                   	pop    eax
c001c2f0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2f6:	5a                   	pop    edx
c001c2f7:	c1 e8 04             	shr    eax,0x4
c001c2fa:	83 e0 0f             	and    eax,0xf
c001c2fd:	50                   	push   eax
c001c2fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c303:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c306:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c30c:	e8 99 48 ff ff       	call   c0010baa <VgaText::setTitleTextColour(VgaColour)>
c001c311:	eb b5                	jmp    c001c2c8 <sysAppSettings(regs*)+0xa3>
c001c313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c318:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c31b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c321:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c327:	c0 e8 06             	shr    al,0x6
c001c32a:	83 e0 01             	and    eax,0x1
c001c32d:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c333:	31 c0                	xor    eax,eax
c001c335:	e9 3b ff ff ff       	jmp    c001c275 <sysAppSettings(regs*)+0x50>
c001c33a:	b8 02 00 00 00       	mov    eax,0x2
c001c33f:	e9 31 ff ff ff       	jmp    c001c275 <sysAppSettings(regs*)+0x50>

c001c344 <sysSetFatAttrib(regs*)>:
c001c344:	57                   	push   edi
c001c345:	56                   	push   esi
c001c346:	53                   	push   ebx
c001c347:	83 ec 1c             	sub    esp,0x1c
c001c34a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c34e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c351:	68 14 01 00 00       	push   0x114
c001c356:	e8 e8 34 ff ff       	call   c000f843 <malloc>
c001c35b:	83 c4 0c             	add    esp,0xc
c001c35e:	89 c3                	mov    ebx,eax
c001c360:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c365:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c368:	57                   	push   edi
c001c369:	53                   	push   ebx
c001c36a:	e8 09 72 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001c36f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c372:	83 c4 0c             	add    esp,0xc
c001c375:	0f b6 d4             	movzx  edx,ah
c001c378:	0f b6 c0             	movzx  eax,al
c001c37b:	52                   	push   edx
c001c37c:	50                   	push   eax
c001c37d:	53                   	push   ebx
c001c37e:	e8 6b 74 ff ff       	call   c00137ee <File::chfatattr(unsigned char, unsigned char)>
c001c383:	83 c4 10             	add    esp,0x10
c001c386:	85 db                	test   ebx,ebx
c001c388:	74 14                	je     c001c39e <sysSetFatAttrib(regs*)+0x5a>
c001c38a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c38e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c390:	83 ec 0c             	sub    esp,0xc
c001c393:	53                   	push   ebx
c001c394:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c397:	83 c4 10             	add    esp,0x10
c001c39a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c39e:	85 c0                	test   eax,eax
c001c3a0:	0f 95 c0             	setne  al
c001c3a3:	31 d2                	xor    edx,edx
c001c3a5:	0f b6 c0             	movzx  eax,al
c001c3a8:	f7 d8                	neg    eax
c001c3aa:	83 d2 00             	adc    edx,0x0
c001c3ad:	83 c4 10             	add    esp,0x10
c001c3b0:	f7 da                	neg    edx
c001c3b2:	5b                   	pop    ebx
c001c3b3:	5e                   	pop    esi
c001c3b4:	5f                   	pop    edi
c001c3b5:	c3                   	ret    

c001c3b6 <sysPipe(regs*)>:
c001c3b6:	57                   	push   edi
c001c3b7:	56                   	push   esi
c001c3b8:	53                   	push   ebx
c001c3b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3bd:	83 ec 0c             	sub    esp,0xc
c001c3c0:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c3c3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c3c6:	6a 20                	push   0x20
c001c3c8:	e8 76 34 ff ff       	call   c000f843 <malloc>
c001c3cd:	89 c3                	mov    ebx,eax
c001c3cf:	58                   	pop    eax
c001c3d0:	5a                   	pop    edx
c001c3d1:	68 00 50 00 00       	push   0x5000
c001c3d6:	53                   	push   ebx
c001c3d7:	e8 1e 41 ff ff       	call   c00104fa <Pipe::Pipe(int)>
c001c3dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3df:	e8 76 53 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c3e4:	89 07                	mov    DWORD PTR [edi],eax
c001c3e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3e9:	e8 6c 53 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c3ee:	83 c4 10             	add    esp,0x10
c001c3f1:	89 06                	mov    DWORD PTR [esi],eax
c001c3f3:	31 d2                	xor    edx,edx
c001c3f5:	5b                   	pop    ebx
c001c3f6:	31 c0                	xor    eax,eax
c001c3f8:	5e                   	pop    esi
c001c3f9:	5f                   	pop    edi
c001c3fa:	c3                   	ret    

c001c3fb <sysGetUnixTime(regs*)>:
c001c3fb:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001c400:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c406:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c40a:	e9 53 7b ff ff       	jmp    c0013f62 <Clock::timeInSecondsLocal()>

c001c40f <string_ends_with(char const*, char const*)>:
c001c40f:	57                   	push   edi
c001c410:	56                   	push   esi
c001c411:	53                   	push   ebx
c001c412:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c416:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c41a:	83 ec 0c             	sub    esp,0xc
c001c41d:	53                   	push   ebx
c001c41e:	e8 71 43 fe ff       	call   c0000794 <strlen>
c001c423:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c426:	89 c6                	mov    esi,eax
c001c428:	e8 67 43 fe ff       	call   c0000794 <strlen>
c001c42d:	83 c4 10             	add    esp,0x10
c001c430:	39 c6                	cmp    esi,eax
c001c432:	7d 06                	jge    c001c43a <string_ends_with(char const*, char const*)+0x2b>
c001c434:	5b                   	pop    ebx
c001c435:	31 c0                	xor    eax,eax
c001c437:	5e                   	pop    esi
c001c438:	5f                   	pop    edi
c001c439:	c3                   	ret    
c001c43a:	83 ec 08             	sub    esp,0x8
c001c43d:	29 c6                	sub    esi,eax
c001c43f:	57                   	push   edi
c001c440:	01 f3                	add    ebx,esi
c001c442:	53                   	push   ebx
c001c443:	e8 78 44 fe ff       	call   c00008c0 <strcmp>
c001c448:	83 c4 10             	add    esp,0x10
c001c44b:	85 c0                	test   eax,eax
c001c44d:	5b                   	pop    ebx
c001c44e:	0f 94 c0             	sete   al
c001c451:	5e                   	pop    esi
c001c452:	0f b6 c0             	movzx  eax,al
c001c455:	5f                   	pop    edi
c001c456:	c3                   	ret    

c001c457 <sysCallOpen(regs*)>:
c001c457:	56                   	push   esi
c001c458:	53                   	push   ebx
c001c459:	81 ec 04 01 00 00    	sub    esp,0x104
c001c45f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c466:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c469:	85 c9                	test   ecx,ecx
c001c46b:	0f 84 b3 00 00 00    	je     c001c524 <sysCallOpen(regs*)+0xcd>
c001c471:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c474:	85 c0                	test   eax,eax
c001c476:	0f 84 a8 00 00 00    	je     c001c524 <sysCallOpen(regs*)+0xcd>
c001c47c:	52                   	push   edx
c001c47d:	68 cd bf 02 c0       	push   0xc002bfcd
c001c482:	50                   	push   eax
c001c483:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c487:	56                   	push   esi
c001c488:	e8 41 6f ff ff       	call   c00133ce <Fs::standardiseFiles(char*, char const*, char const*)>
c001c48d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c490:	e8 ff 42 fe ff       	call   c0000794 <strlen>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	48                   	dec    eax
c001c499:	74 1d                	je     c001c4b8 <sysCallOpen(regs*)+0x61>
c001c49b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c49e:	eb 0f                	jmp    c001c4af <sysCallOpen(regs*)+0x58>
c001c4a0:	80 fa 3a             	cmp    dl,0x3a
c001c4a3:	74 0f                	je     c001c4b4 <sysCallOpen(regs*)+0x5d>
c001c4a5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c4a9:	48                   	dec    eax
c001c4aa:	74 0c                	je     c001c4b8 <sysCallOpen(regs*)+0x61>
c001c4ac:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c4af:	80 fa 2e             	cmp    dl,0x2e
c001c4b2:	75 ec                	jne    c001c4a0 <sysCallOpen(regs*)+0x49>
c001c4b4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c4b8:	83 ec 08             	sub    esp,0x8
c001c4bb:	68 d1 bf 02 c0       	push   0xc002bfd1
c001c4c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4c3:	e8 47 ff ff ff       	call   c001c40f <string_ends_with(char const*, char const*)>
c001c4c8:	83 c4 10             	add    esp,0x10
c001c4cb:	85 c0                	test   eax,eax
c001c4cd:	75 17                	jne    c001c4e6 <sysCallOpen(regs*)+0x8f>
c001c4cf:	83 ec 08             	sub    esp,0x8
c001c4d2:	68 f2 bf 02 c0       	push   0xc002bff2
c001c4d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4da:	e8 30 ff ff ff       	call   c001c40f <string_ends_with(char const*, char const*)>
c001c4df:	83 c4 10             	add    esp,0x10
c001c4e2:	85 c0                	test   eax,eax
c001c4e4:	74 51                	je     c001c537 <sysCallOpen(regs*)+0xe0>
c001c4e6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4e9:	83 ec 08             	sub    esp,0x8
c001c4ec:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4fc:	ff 30                	push   DWORD PTR [eax]
c001c4fe:	68 d6 bf 02 c0       	push   0xc002bfd6
c001c503:	e8 17 6b ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c508:	c7 04 24 e5 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfe5
c001c50f:	e8 0b 6b ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c514:	83 c4 10             	add    esp,0x10
c001c517:	81 c4 04 01 00 00    	add    esp,0x104
c001c51d:	31 c0                	xor    eax,eax
c001c51f:	31 d2                	xor    edx,edx
c001c521:	5b                   	pop    ebx
c001c522:	5e                   	pop    esi
c001c523:	c3                   	ret    
c001c524:	81 c4 04 01 00 00    	add    esp,0x104
c001c52a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c52f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c534:	5b                   	pop    ebx
c001c535:	5e                   	pop    esi
c001c536:	c3                   	ret    
c001c537:	83 ec 08             	sub    esp,0x8
c001c53a:	68 d2 bf 02 c0       	push   0xc002bfd2
c001c53f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c542:	e8 79 43 fe ff       	call   c00008c0 <strcmp>
c001c547:	83 c4 10             	add    esp,0x10
c001c54a:	85 c0                	test   eax,eax
c001c54c:	74 98                	je     c001c4e6 <sysCallOpen(regs*)+0x8f>
c001c54e:	83 ec 08             	sub    esp,0x8
c001c551:	68 d1 bf 02 c0       	push   0xc002bfd1
c001c556:	56                   	push   esi
c001c557:	e8 b3 fe ff ff       	call   c001c40f <string_ends_with(char const*, char const*)>
c001c55c:	83 c4 10             	add    esp,0x10
c001c55f:	85 c0                	test   eax,eax
c001c561:	75 83                	jne    c001c4e6 <sysCallOpen(regs*)+0x8f>
c001c563:	83 ec 08             	sub    esp,0x8
c001c566:	68 f7 bf 02 c0       	push   0xc002bff7
c001c56b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c56e:	e8 9c fe ff ff       	call   c001c40f <string_ends_with(char const*, char const*)>
c001c573:	83 c4 10             	add    esp,0x10
c001c576:	85 c0                	test   eax,eax
c001c578:	0f 85 d9 00 00 00    	jne    c001c657 <sysCallOpen(regs*)+0x200>
c001c57e:	83 ec 08             	sub    esp,0x8
c001c581:	68 fc bf 02 c0       	push   0xc002bffc
c001c586:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c589:	e8 81 fe ff ff       	call   c001c40f <string_ends_with(char const*, char const*)>
c001c58e:	83 c4 10             	add    esp,0x10
c001c591:	85 c0                	test   eax,eax
c001c593:	0f 85 be 00 00 00    	jne    c001c657 <sysCallOpen(regs*)+0x200>
c001c599:	83 ec 08             	sub    esp,0x8
c001c59c:	68 f8 bf 02 c0       	push   0xc002bff8
c001c5a1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5a4:	e8 17 43 fe ff       	call   c00008c0 <strcmp>
c001c5a9:	83 c4 10             	add    esp,0x10
c001c5ac:	85 c0                	test   eax,eax
c001c5ae:	0f 84 a3 00 00 00    	je     c001c657 <sysCallOpen(regs*)+0x200>
c001c5b4:	83 ec 08             	sub    esp,0x8
c001c5b7:	68 f7 bf 02 c0       	push   0xc002bff7
c001c5bc:	56                   	push   esi
c001c5bd:	e8 4d fe ff ff       	call   c001c40f <string_ends_with(char const*, char const*)>
c001c5c2:	83 c4 10             	add    esp,0x10
c001c5c5:	85 c0                	test   eax,eax
c001c5c7:	0f 85 8a 00 00 00    	jne    c001c657 <sysCallOpen(regs*)+0x200>
c001c5cd:	83 ec 0c             	sub    esp,0xc
c001c5d0:	68 14 01 00 00       	push   0x114
c001c5d5:	e8 69 32 ff ff       	call   c000f843 <malloc>
c001c5da:	83 c4 0c             	add    esp,0xc
c001c5dd:	89 c6                	mov    esi,eax
c001c5df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5e4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5e7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5ea:	56                   	push   esi
c001c5eb:	e8 88 6f ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001c5f0:	83 c4 10             	add    esp,0x10
c001c5f3:	85 f6                	test   esi,esi
c001c5f5:	0f 84 29 ff ff ff    	je     c001c524 <sysCallOpen(regs*)+0xcd>
c001c5fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5fe:	0f b6 c2             	movzx  eax,dl
c001c601:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c604:	89 d0                	mov    eax,edx
c001c606:	83 e0 01             	and    eax,0x1
c001c609:	f6 c2 02             	test   dl,0x2
c001c60c:	74 03                	je     c001c611 <sysCallOpen(regs*)+0x1ba>
c001c60e:	83 c8 02             	or     eax,0x2
c001c611:	f6 c2 04             	test   dl,0x4
c001c614:	74 03                	je     c001c619 <sysCallOpen(regs*)+0x1c2>
c001c616:	83 c8 04             	or     eax,0x4
c001c619:	f6 c2 08             	test   dl,0x8
c001c61c:	74 03                	je     c001c621 <sysCallOpen(regs*)+0x1ca>
c001c61e:	83 c8 0a             	or     eax,0xa
c001c621:	83 e2 10             	and    edx,0x10
c001c624:	74 03                	je     c001c629 <sysCallOpen(regs*)+0x1d2>
c001c626:	83 c8 12             	or     eax,0x12
c001c629:	83 ec 08             	sub    esp,0x8
c001c62c:	50                   	push   eax
c001c62d:	56                   	push   esi
c001c62e:	e8 a9 6f ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001c633:	83 c4 10             	add    esp,0x10
c001c636:	85 c0                	test   eax,eax
c001c638:	0f 85 e6 fe ff ff    	jne    c001c524 <sysCallOpen(regs*)+0xcd>
c001c63e:	83 ec 0c             	sub    esp,0xc
c001c641:	56                   	push   esi
c001c642:	e8 13 51 ff ff       	call   c001175a <UnixFile::getFileDescriptor()>
c001c647:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c64a:	89 02                	mov    DWORD PTR [edx],eax
c001c64c:	c1 f8 1f             	sar    eax,0x1f
c001c64f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c652:	e9 bd fe ff ff       	jmp    c001c514 <sysCallOpen(regs*)+0xbd>
c001c657:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c65a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c660:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c667:	e9 ab fe ff ff       	jmp    c001c517 <sysCallOpen(regs*)+0xc0>

c001c66c <Sys::loadSyscalls()>:
c001c66c:	c7 05 a0 10 03 c0 79 b7 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b779
c001c676:	c7 05 a4 10 03 c0 62 b3 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001b362
c001c680:	c7 05 a8 10 03 c0 cc b4 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001b4cc
c001c68a:	c7 05 ac 10 03 c0 af b6 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b6af
c001c694:	c7 05 b0 10 03 c0 64 b4 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001b464
c001c69e:	c7 05 b4 10 03 c0 99 b3 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001b399
c001c6a8:	c7 05 b8 10 03 c0 7a b3 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001b37a
c001c6b2:	c7 05 bc 10 03 c0 21 b5 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001b521
c001c6bc:	c7 05 c4 10 03 c0 a9 bc 01 c0 	mov    DWORD PTR ds:0xc00310c4,0xc001bca9
c001c6c6:	c7 05 c0 10 03 c0 57 c4 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001c457
c001c6d0:	c7 05 c8 10 03 c0 31 bd 01 c0 	mov    DWORD PTR ds:0xc00310c8,0xc001bd31
c001c6da:	c7 05 cc 10 03 c0 98 b9 01 c0 	mov    DWORD PTR ds:0xc00310cc,0xc001b998
c001c6e4:	c7 05 d0 10 03 c0 b4 b7 01 c0 	mov    DWORD PTR ds:0xc00310d0,0xc001b7b4
c001c6ee:	c7 05 d4 10 03 c0 b9 b7 01 c0 	mov    DWORD PTR ds:0xc00310d4,0xc001b7b9
c001c6f8:	c7 05 d8 10 03 c0 0c be 01 c0 	mov    DWORD PTR ds:0xc00310d8,0xc001be0c
c001c702:	c7 05 dc 10 03 c0 a6 bd 01 c0 	mov    DWORD PTR ds:0xc00310dc,0xc001bda6
c001c70c:	c7 05 e0 10 03 c0 80 ba 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001ba80
c001c716:	c7 05 e4 10 03 c0 e9 ba 01 c0 	mov    DWORD PTR ds:0xc00310e4,0xc001bae9
c001c720:	c7 05 e8 10 03 c0 66 bb 01 c0 	mov    DWORD PTR ds:0xc00310e8,0xc001bb66
c001c72a:	c7 05 ec 10 03 c0 be b7 01 c0 	mov    DWORD PTR ds:0xc00310ec,0xc001b7be
c001c734:	c7 05 f0 10 03 c0 7c be 01 c0 	mov    DWORD PTR ds:0xc00310f0,0xc001be7c
c001c73e:	c7 05 f4 10 03 c0 96 be 01 c0 	mov    DWORD PTR ds:0xc00310f4,0xc001be96
c001c748:	c7 05 f8 10 03 c0 96 be 01 c0 	mov    DWORD PTR ds:0xc00310f8,0xc001be96
c001c752:	c7 05 fc 10 03 c0 d7 be 01 c0 	mov    DWORD PTR ds:0xc00310fc,0xc001bed7
c001c75c:	c7 05 00 11 03 c0 3b bf 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001bf3b
c001c766:	c7 05 04 11 03 c0 6a b9 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001b96a
c001c770:	c7 05 08 11 03 c0 9f bf 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001bf9f
c001c77a:	c7 05 0c 11 03 c0 27 b9 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b927
c001c784:	c7 05 10 11 03 c0 eb bf 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001bfeb
c001c78e:	c7 05 14 11 03 c0 26 ba 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001ba26
c001c798:	c7 05 18 11 03 c0 6e c0 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001c06e
c001c7a2:	c7 05 1c 11 03 c0 e9 bb 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001bbe9
c001c7ac:	c7 05 20 11 03 c0 95 c0 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001c095
c001c7b6:	c7 05 24 11 03 c0 ed c0 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001c0ed
c001c7c0:	c7 05 28 11 03 c0 25 c2 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001c225
c001c7ca:	c7 05 2c 11 03 c0 c8 b7 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b7c8
c001c7d4:	c7 05 30 11 03 c0 32 b8 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b832
c001c7de:	c7 05 34 11 03 c0 78 b8 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b878
c001c7e8:	c7 05 38 11 03 c0 44 c3 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001c344
c001c7f2:	c7 05 3c 11 03 c0 b1 be 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001beb1
c001c7fc:	c7 05 40 11 03 c0 c9 b8 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b8c9
c001c806:	c7 05 44 11 03 c0 b6 c3 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001c3b6
c001c810:	c7 05 48 11 03 c0 fb c3 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001c3fb
c001c81a:	c7 05 4c 11 03 c0 bc b3 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b3bc
c001c824:	c7 05 50 11 03 c0 3d b5 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b53d
c001c82e:	c7 05 54 11 03 c0 65 b6 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b665
c001c838:	c7 05 58 11 03 c0 2c b3 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b32c
c001c842:	c7 05 5c 11 03 c0 17 b7 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b717
c001c84c:	c7 05 60 11 03 c0 a5 b3 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001b3a5
c001c856:	c3                   	ret    

c001c857 <Sys::systemCall(regs*, void*)>:
c001c857:	53                   	push   ebx
c001c858:	83 ec 08             	sub    esp,0x8
c001c85b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c85f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c862:	83 f8 7f             	cmp    eax,0x7f
c001c865:	77 16                	ja     c001c87d <Sys::systemCall(regs*, void*)+0x26>
c001c867:	8b 14 85 a0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef60]
c001c86e:	85 d2                	test   edx,edx
c001c870:	74 0b                	je     c001c87d <Sys::systemCall(regs*, void*)+0x26>
c001c872:	83 ec 0c             	sub    esp,0xc
c001c875:	53                   	push   ebx
c001c876:	ff d2                	call   edx
c001c878:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c87b:	eb 0d                	jmp    c001c88a <Sys::systemCall(regs*, void*)+0x33>
c001c87d:	52                   	push   edx
c001c87e:	52                   	push   edx
c001c87f:	50                   	push   eax
c001c880:	68 01 c0 02 c0       	push   0xc002c001
c001c885:	e8 95 67 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c88a:	83 c4 10             	add    esp,0x10
c001c88d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c892:	31 d2                	xor    edx,edx
c001c894:	83 c4 08             	add    esp,0x8
c001c897:	5b                   	pop    ebx
c001c898:	c3                   	ret    

c001c899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c899:	55                   	push   ebp
c001c89a:	57                   	push   edi
c001c89b:	56                   	push   esi
c001c89c:	53                   	push   ebx
c001c89d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c8a3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c8aa:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c8b1:	85 c0                	test   eax,eax
c001c8b3:	0f 95 c1             	setne  cl
c001c8b6:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c8be:	0f 94 c2             	sete   dl
c001c8c1:	84 d1                	test   cl,dl
c001c8c3:	74 23                	je     c001c8e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8c5:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c8cb:	74 1b                	je     c001c8e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c8cd:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8d3:	89 da                	mov    edx,ebx
c001c8d5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8db:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8e1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8e8:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8ef:	05 ff 0f 00 00       	add    eax,0xfff
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8fb:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c901:	c1 e8 0c             	shr    eax,0xc
c001c904:	89 ef                	mov    edi,ebp
c001c906:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c90a:	c1 ef 0c             	shr    edi,0xc
c001c90d:	6a 01                	push   0x1
c001c90f:	e8 91 52 ff ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c001c914:	89 c6                	mov    esi,eax
c001c916:	58                   	pop    eax
c001c917:	5a                   	pop    edx
c001c918:	57                   	push   edi
c001c919:	68 87 c0 02 c0       	push   0xc002c087
c001c91e:	e8 fc 66 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c923:	59                   	pop    ecx
c001c924:	58                   	pop    eax
c001c925:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c929:	68 99 c0 02 c0       	push   0xc002c099
c001c92e:	e8 ec 66 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c933:	83 c4 10             	add    esp,0x10
c001c936:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c93c:	0f 86 24 01 00 00    	jbe    c001ca66 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c942:	c1 e7 0c             	shl    edi,0xc
c001c945:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c948:	89 df                	mov    edi,ebx
c001c94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c94e:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c955:	01 dd                	add    ebp,ebx
c001c957:	29 fd                	sub    ebp,edi
c001c959:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c95d:	0f 84 01 01 00 00    	je     c001ca64 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c963:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c969:	76 05                	jbe    c001c970 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c96b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c970:	83 ec 0c             	sub    esp,0xc
c001c973:	31 d2                	xor    edx,edx
c001c975:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c97c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c97e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c982:	50                   	push   eax
c001c983:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c987:	50                   	push   eax
c001c988:	52                   	push   edx
c001c989:	55                   	push   ebp
c001c98a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c991:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c994:	83 c4 20             	add    esp,0x20
c001c997:	85 c0                	test   eax,eax
c001c999:	74 0a                	je     c001c9a5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c99b:	53                   	push   ebx
c001c99c:	53                   	push   ebx
c001c99d:	50                   	push   eax
c001c99e:	68 ab c0 02 c0       	push   0xc002c0ab
c001c9a3:	eb 0f                	jmp    c001c9b4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c9a5:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c9a9:	74 20                	je     c001c9cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c9ab:	51                   	push   ecx
c001c9ac:	51                   	push   ecx
c001c9ad:	6a 00                	push   0x0
c001c9af:	68 d6 c0 02 c0       	push   0xc002c0d6
c001c9b4:	e8 66 66 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001c9b9:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9bc:	e8 54 56 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9c1:	83 c4 10             	add    esp,0x10
c001c9c4:	31 c0                	xor    eax,eax
c001c9c6:	e9 55 01 00 00       	jmp    c001cb20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c9cb:	e8 f0 14 00 00       	call   c001dec0 <lockScheduler()>
c001c9d0:	e8 10 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c9d5:	6a 07                	push   0x7
c001c9d7:	89 c5                	mov    ebp,eax
c001c9d9:	56                   	push   esi
c001c9da:	50                   	push   eax
c001c9db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9e9:	e8 8e 59 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9ee:	83 c4 0c             	add    esp,0xc
c001c9f1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9f8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9fe:	6a 00                	push   0x0
c001ca00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca05:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca08:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0e:	e8 d3 57 ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca13:	58                   	pop    eax
c001ca14:	5a                   	pop    edx
c001ca15:	68 07 0c 00 00       	push   0xc07
c001ca1a:	57                   	push   edi
c001ca1b:	81 c7 00 10 00 00    	add    edi,0x1000
c001ca21:	55                   	push   ebp
c001ca22:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca29:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca2f:	6a 00                	push   0x0
c001ca31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca39:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca3f:	e8 f2 5c ff ff       	call   c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca44:	83 c4 1c             	add    esp,0x1c
c001ca47:	68 00 10 00 00       	push   0x1000
c001ca4c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca50:	50                   	push   eax
c001ca51:	56                   	push   esi
c001ca52:	e8 ed 3c fe ff       	call   c0000744 <memcpy>
c001ca57:	e8 66 14 00 00       	call   c001dec2 <unlockScheduler()>
c001ca5c:	83 c4 10             	add    esp,0x10
c001ca5f:	e9 ea fe ff ff       	jmp    c001c94e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca64:	89 fb                	mov    ebx,edi
c001ca66:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca6e:	0f 86 9e 00 00 00    	jbe    c001cb12 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca74:	e8 47 14 00 00       	call   c001dec0 <lockScheduler()>
c001ca79:	51                   	push   ecx
c001ca7a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca81:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca87:	6a 00                	push   0x0
c001ca89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca8e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca91:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca97:	e8 4a 57 ff ff       	call   c00121e6 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca9c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001caa0:	c1 e7 0c             	shl    edi,0xc
c001caa3:	01 df                	add    edi,ebx
c001caa5:	83 c4 10             	add    esp,0x10
c001caa8:	39 fb                	cmp    ebx,edi
c001caaa:	74 61                	je     c001cb0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001caac:	e8 34 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001cab1:	6a 07                	push   0x7
c001cab3:	89 c5                	mov    ebp,eax
c001cab5:	56                   	push   esi
c001cab6:	50                   	push   eax
c001cab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cabc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cabf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cac5:	e8 b2 58 ff ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c001caca:	58                   	pop    eax
c001cacb:	5a                   	pop    edx
c001cacc:	68 07 0c 00 00       	push   0xc07
c001cad1:	53                   	push   ebx
c001cad2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cad8:	55                   	push   ebp
c001cad9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cae0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cae6:	6a 00                	push   0x0
c001cae8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caf0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caf6:	e8 3b 5c ff ff       	call   c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cafb:	83 c4 1c             	add    esp,0x1c
c001cafe:	68 00 10 00 00       	push   0x1000
c001cb03:	6a 00                	push   0x0
c001cb05:	56                   	push   esi
c001cb06:	e8 6d 3c fe ff       	call   c0000778 <memset>
c001cb0b:	eb 98                	jmp    c001caa5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cb0d:	e8 b0 13 00 00       	call   c001dec2 <unlockScheduler()>
c001cb12:	83 ec 0c             	sub    esp,0xc
c001cb15:	56                   	push   esi
c001cb16:	e8 fa 54 ff ff       	call   c0012015 <Virt::freeKernelVirtualPages(unsigned long)>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	b0 01                	mov    al,0x1
c001cb20:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cb26:	5b                   	pop    ebx
c001cb27:	5e                   	pop    esi
c001cb28:	5f                   	pop    edi
c001cb29:	5d                   	pop    ebp
c001cb2a:	c3                   	ret    

c001cb2b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cb2b:	55                   	push   ebp
c001cb2c:	57                   	push   edi
c001cb2d:	56                   	push   esi
c001cb2e:	53                   	push   ebx
c001cb2f:	83 ec 48             	sub    esp,0x48
c001cb32:	68 14 01 00 00       	push   0x114
c001cb37:	e8 07 2d ff ff       	call   c000f843 <malloc>
c001cb3c:	83 c4 0c             	add    esp,0xc
c001cb3f:	89 c6                	mov    esi,eax
c001cb41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb45:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb49:	50                   	push   eax
c001cb4a:	e8 29 6a ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001cb4f:	58                   	pop    eax
c001cb50:	5a                   	pop    edx
c001cb51:	6a 01                	push   0x1
c001cb53:	56                   	push   esi
c001cb54:	e8 83 6a ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	85 c0                	test   eax,eax
c001cb5e:	0f 85 47 01 00 00    	jne    c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb64:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb6c:	83 ec 0c             	sub    esp,0xc
c001cb6f:	6a 34                	push   0x34
c001cb71:	e8 cd 2c ff ff       	call   c000f843 <malloc>
c001cb76:	89 c3                	mov    ebx,eax
c001cb78:	58                   	pop    eax
c001cb79:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb7b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb7f:	57                   	push   edi
c001cb80:	53                   	push   ebx
c001cb81:	6a 00                	push   0x0
c001cb83:	6a 34                	push   0x34
c001cb85:	56                   	push   esi
c001cb86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb89:	83 c4 20             	add    esp,0x20
c001cb8c:	85 c0                	test   eax,eax
c001cb8e:	0f 85 17 01 00 00    	jne    c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb94:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb9a:	0f 85 0b 01 00 00    	jne    c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cba0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cba3:	85 c0                	test   eax,eax
c001cba5:	0f 84 00 01 00 00    	je     c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbab:	31 d2                	xor    edx,edx
c001cbad:	55                   	push   ebp
c001cbae:	52                   	push   edx
c001cbaf:	50                   	push   eax
c001cbb0:	56                   	push   esi
c001cbb1:	e8 e4 6a ff ff       	call   c001369a <File::seek(unsigned long long)>
c001cbb6:	83 c4 10             	add    esp,0x10
c001cbb9:	85 c0                	test   eax,eax
c001cbbb:	0f 85 ea 00 00 00    	jne    c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbc1:	83 ec 0c             	sub    esp,0xc
c001cbc4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cbc7:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbcb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbcf:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbd3:	0f af c2             	imul   eax,edx
c001cbd6:	50                   	push   eax
c001cbd7:	e8 67 2c ff ff       	call   c000f843 <malloc>
c001cbdc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbde:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbe2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbe5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbe9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbed:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbf1:	0f af c2             	imul   eax,edx
c001cbf4:	99                   	cdq    
c001cbf5:	52                   	push   edx
c001cbf6:	50                   	push   eax
c001cbf7:	56                   	push   esi
c001cbf8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbfb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbfe:	83 c4 20             	add    esp,0x20
c001cc01:	85 c0                	test   eax,eax
c001cc03:	0f 84 a2 00 00 00    	je     c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc09:	31 d2                	xor    edx,edx
c001cc0b:	51                   	push   ecx
c001cc0c:	52                   	push   edx
c001cc0d:	50                   	push   eax
c001cc0e:	56                   	push   esi
c001cc0f:	e8 86 6a ff ff       	call   c001369a <File::seek(unsigned long long)>
c001cc14:	83 c4 10             	add    esp,0x10
c001cc17:	85 c0                	test   eax,eax
c001cc19:	0f 85 8c 00 00 00    	jne    c001ccab <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cc1f:	83 ec 0c             	sub    esp,0xc
c001cc22:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc26:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc2a:	31 ed                	xor    ebp,ebp
c001cc2c:	0f af c2             	imul   eax,edx
c001cc2f:	50                   	push   eax
c001cc30:	e8 0e 2c ff ff       	call   c000f843 <malloc>
c001cc35:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc3b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc42:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc46:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc4a:	0f af c2             	imul   eax,edx
c001cc4d:	99                   	cdq    
c001cc4e:	52                   	push   edx
c001cc4f:	50                   	push   eax
c001cc50:	56                   	push   esi
c001cc51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc54:	83 c4 20             	add    esp,0x20
c001cc57:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc5f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc63:	0f 86 80 00 00 00    	jbe    c001cce9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc69:	0f b7 fd             	movzx  edi,bp
c001cc6c:	c1 e7 05             	shl    edi,0x5
c001cc6f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc73:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc76:	75 6b                	jne    c001cce3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc78:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc7f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc86:	52                   	push   edx
c001cc87:	31 d2                	xor    edx,edx
c001cc89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc8c:	52                   	push   edx
c001cc8d:	50                   	push   eax
c001cc8e:	56                   	push   esi
c001cc8f:	e8 06 6a ff ff       	call   c001369a <File::seek(unsigned long long)>
c001cc94:	83 c4 10             	add    esp,0x10
c001cc97:	85 c0                	test   eax,eax
c001cc99:	74 17                	je     c001ccb2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc9b:	83 ec 0c             	sub    esp,0xc
c001cc9e:	68 02 c1 02 c0       	push   0xc002c102
c001cca3:	e8 77 63 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001cca8:	83 c4 10             	add    esp,0x10
c001ccab:	31 c0                	xor    eax,eax
c001ccad:	e9 87 00 00 00       	jmp    c001cd39 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001ccb2:	83 ec 0c             	sub    esp,0xc
c001ccb5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001ccb8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001ccbb:	50                   	push   eax
c001ccbc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccc4:	56                   	push   esi
c001ccc5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001ccc9:	e8 cb fb ff ff       	call   c001c899 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001ccce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ccd2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001ccd6:	83 c4 20             	add    esp,0x20
c001ccd9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccdd:	73 04                	jae    c001cce3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cce3:	45                   	inc    ebp
c001cce4:	e9 76 ff ff ff       	jmp    c001cc5f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cce9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cced:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccf5:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ccfb:	83 ec 0c             	sub    esp,0xc
c001ccfe:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cd04:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cd09:	05 00 10 00 00       	add    eax,0x1000
c001cd0e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cd11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd15:	e8 39 2b ff ff       	call   c000f853 <free>
c001cd1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cd1d:	e8 31 2b ff ff       	call   c000f853 <free>
c001cd22:	58                   	pop    eax
c001cd23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd27:	e8 27 2b ff ff       	call   c000f853 <free>
c001cd2c:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd2f:	e8 06 69 ff ff       	call   c001363a <File::close()>
c001cd34:	83 c4 10             	add    esp,0x10
c001cd37:	b0 01                	mov    al,0x1
c001cd39:	83 c4 3c             	add    esp,0x3c
c001cd3c:	5b                   	pop    ebx
c001cd3d:	5e                   	pop    esi
c001cd3e:	5f                   	pop    edi
c001cd3f:	5d                   	pop    ebp
c001cd40:	c3                   	ret    

c001cd41 <Thr::runtimeReferenceHelper()>:
c001cd41:	83 ec 18             	sub    esp,0x18
c001cd44:	68 0a c1 02 c0       	push   0xc002c10a
c001cd49:	e8 d1 62 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001cd4e:	fa                   	cli    
c001cd4f:	83 c4 10             	add    esp,0x10
c001cd52:	eb fe                	jmp    c001cd52 <Thr::runtimeReferenceHelper()+0x11>

c001cd54 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd54:	57                   	push   edi
c001cd55:	56                   	push   esi
c001cd56:	53                   	push   ebx
c001cd57:	31 db                	xor    ebx,ebx
c001cd59:	39 1d 40 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a40,ebx
c001cd5f:	7e 3c                	jle    c001cd9d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd61:	8b 34 9d c0 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce640]
c001cd68:	31 ff                	xor    edi,edi
c001cd6a:	39 3c 9d c0 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce740],edi
c001cd71:	7e 27                	jle    c001cd9a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd73:	50                   	push   eax
c001cd74:	50                   	push   eax
c001cd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd79:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd7b:	03 04 9d 40 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce6c0]
c001cd82:	50                   	push   eax
c001cd83:	e8 38 3b fe ff       	call   c00008c0 <strcmp>
c001cd88:	83 c4 10             	add    esp,0x10
c001cd8b:	85 c0                	test   eax,eax
c001cd8d:	75 05                	jne    c001cd94 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd8f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd92:	eb 0b                	jmp    c001cd9f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd94:	83 c6 10             	add    esi,0x10
c001cd97:	47                   	inc    edi
c001cd98:	eb d0                	jmp    c001cd6a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd9a:	43                   	inc    ebx
c001cd9b:	eb bc                	jmp    c001cd59 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd9d:	31 c0                	xor    eax,eax
c001cd9f:	5b                   	pop    ebx
c001cda0:	5e                   	pop    esi
c001cda1:	5f                   	pop    edi
c001cda2:	c3                   	ret    

c001cda3 <Thr::loadKernelSymbolTable(char const*)>:
c001cda3:	55                   	push   ebp
c001cda4:	57                   	push   edi
c001cda5:	56                   	push   esi
c001cda6:	53                   	push   ebx
c001cda7:	83 ec 68             	sub    esp,0x68
c001cdaa:	8b 35 94 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031a94
c001cdb0:	68 14 01 00 00       	push   0x114
c001cdb5:	e8 89 2a ff ff       	call   c000f843 <malloc>
c001cdba:	83 c4 0c             	add    esp,0xc
c001cdbd:	89 c3                	mov    ebx,eax
c001cdbf:	56                   	push   esi
c001cdc0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cdc4:	50                   	push   eax
c001cdc5:	e8 ae 67 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001cdca:	5e                   	pop    esi
c001cdcb:	5f                   	pop    edi
c001cdcc:	6a 01                	push   0x1
c001cdce:	53                   	push   ebx
c001cdcf:	e8 08 68 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001cdd4:	83 c4 10             	add    esp,0x10
c001cdd7:	85 c0                	test   eax,eax
c001cdd9:	74 0a                	je     c001cde5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cddb:	83 ec 0c             	sub    esp,0xc
c001cdde:	68 2c c1 02 c0       	push   0xc002c12c
c001cde3:	eb 34                	jmp    c001ce19 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cde5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cded:	83 ec 0c             	sub    esp,0xc
c001cdf0:	6a 34                	push   0x34
c001cdf2:	e8 4c 2a ff ff       	call   c000f843 <malloc>
c001cdf7:	59                   	pop    ecx
c001cdf8:	89 c7                	mov    edi,eax
c001cdfa:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce00:	56                   	push   esi
c001ce01:	57                   	push   edi
c001ce02:	6a 00                	push   0x0
c001ce04:	6a 34                	push   0x34
c001ce06:	53                   	push   ebx
c001ce07:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce0a:	83 c4 20             	add    esp,0x20
c001ce0d:	85 c0                	test   eax,eax
c001ce0f:	74 17                	je     c001ce28 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	68 43 c1 02 c0       	push   0xc002c143
c001ce19:	e8 af d8 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001ce1e:	83 c4 10             	add    esp,0x10
c001ce21:	31 c0                	xor    eax,eax
c001ce23:	e9 31 02 00 00       	jmp    c001d059 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001ce28:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001ce2e:	75 e1                	jne    c001ce11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce30:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce33:	85 c0                	test   eax,eax
c001ce35:	74 da                	je     c001ce11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce37:	52                   	push   edx
c001ce38:	31 d2                	xor    edx,edx
c001ce3a:	52                   	push   edx
c001ce3b:	50                   	push   eax
c001ce3c:	53                   	push   ebx
c001ce3d:	e8 58 68 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001ce42:	83 c4 10             	add    esp,0x10
c001ce45:	85 c0                	test   eax,eax
c001ce47:	75 c8                	jne    c001ce11 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce49:	83 ec 0c             	sub    esp,0xc
c001ce4c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce54:	31 ed                	xor    ebp,ebp
c001ce56:	0f af c2             	imul   eax,edx
c001ce59:	50                   	push   eax
c001ce5a:	e8 e4 29 ff ff       	call   c000f843 <malloc>
c001ce5f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce65:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce6c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce70:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce74:	0f af c2             	imul   eax,edx
c001ce77:	99                   	cdq    
c001ce78:	52                   	push   edx
c001ce79:	50                   	push   eax
c001ce7a:	53                   	push   ebx
c001ce7b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce7e:	83 c4 20             	add    esp,0x20
c001ce81:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce89:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce91:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cea1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cea5:	0f 86 aa 00 00 00    	jbe    c001cf55 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ceab:	0f b7 f5             	movzx  esi,bp
c001ceae:	6b f6 28             	imul   esi,esi,0x28
c001ceb1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ceb5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ceb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cebc:	50                   	push   eax
c001cebd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cec1:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cec5:	8b 16                	mov    edx,DWORD PTR [esi]
c001cec7:	6b c0 28             	imul   eax,eax,0x28
c001ceca:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cece:	89 d0                	mov    eax,edx
c001ced0:	31 d2                	xor    edx,edx
c001ced2:	52                   	push   edx
c001ced3:	50                   	push   eax
c001ced4:	53                   	push   ebx
c001ced5:	e8 c0 67 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001ceda:	83 c4 0c             	add    esp,0xc
c001cedd:	6a 20                	push   0x20
c001cedf:	6a 00                	push   0x0
c001cee1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cee5:	52                   	push   edx
c001cee6:	e8 8d 38 fe ff       	call   c0000778 <memset>
c001ceeb:	58                   	pop    eax
c001ceec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ceee:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cef2:	51                   	push   ecx
c001cef3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cef7:	52                   	push   edx
c001cef8:	6a 00                	push   0x0
c001cefa:	6a 1f                	push   0x1f
c001cefc:	53                   	push   ebx
c001cefd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf00:	83 c4 18             	add    esp,0x18
c001cf03:	68 5a c1 02 c0       	push   0xc002c15a
c001cf08:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cf0c:	52                   	push   edx
c001cf0d:	e8 ae 39 fe ff       	call   c00008c0 <strcmp>
c001cf12:	83 c4 10             	add    esp,0x10
c001cf15:	85 c0                	test   eax,eax
c001cf17:	75 0f                	jne    c001cf28 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cf19:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cf20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cf28:	50                   	push   eax
c001cf29:	50                   	push   eax
c001cf2a:	68 62 c1 02 c0       	push   0xc002c162
c001cf2f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf33:	50                   	push   eax
c001cf34:	e8 87 39 fe ff       	call   c00008c0 <strcmp>
c001cf39:	83 c4 10             	add    esp,0x10
c001cf3c:	85 c0                	test   eax,eax
c001cf3e:	75 0f                	jne    c001cf4f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf40:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf47:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf4f:	45                   	inc    ebp
c001cf50:	e9 4c ff ff ff       	jmp    c001cea1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf55:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf5a:	75 10                	jne    c001cf6c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf5c:	83 ec 0c             	sub    esp,0xc
c001cf5f:	68 6a c1 02 c0       	push   0xc002c16a
c001cf64:	e8 64 d7 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001cf69:	83 c4 10             	add    esp,0x10
c001cf6c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf71:	75 10                	jne    c001cf83 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf73:	83 ec 0c             	sub    esp,0xc
c001cf76:	68 6a c1 02 c0       	push   0xc002c16a
c001cf7b:	e8 4d d7 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001cf80:	83 c4 10             	add    esp,0x10
c001cf83:	31 d2                	xor    edx,edx
c001cf85:	50                   	push   eax
c001cf86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf8a:	52                   	push   edx
c001cf8b:	50                   	push   eax
c001cf8c:	53                   	push   ebx
c001cf8d:	e8 08 67 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001cf92:	5a                   	pop    edx
c001cf93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf97:	e8 a7 28 ff ff       	call   c000f843 <malloc>
c001cf9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cfa0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cfa4:	31 c9                	xor    ecx,ecx
c001cfa6:	5e                   	pop    esi
c001cfa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfa9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cfad:	55                   	push   ebp
c001cfae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfb2:	51                   	push   ecx
c001cfb3:	52                   	push   edx
c001cfb4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cfb8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cfbc:	53                   	push   ebx
c001cfbd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfc0:	83 c4 14             	add    esp,0x14
c001cfc3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cfc7:	e8 77 28 ff ff       	call   c000f843 <malloc>
c001cfcc:	89 c6                	mov    esi,eax
c001cfce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfd0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfd3:	56                   	push   esi
c001cfd4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfdc:	51                   	push   ecx
c001cfdd:	52                   	push   edx
c001cfde:	53                   	push   ebx
c001cfdf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfe2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfe6:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c001cfec:	83 c4 1c             	add    esp,0x1c
c001cfef:	c1 e8 04             	shr    eax,0x4
c001cff2:	89 04 95 c0 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce740],eax
c001cff9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cffd:	31 d2                	xor    edx,edx
c001cfff:	52                   	push   edx
c001d000:	50                   	push   eax
c001d001:	53                   	push   ebx
c001d002:	e8 93 66 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d007:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d009:	31 d2                	xor    edx,edx
c001d00b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d00e:	56                   	push   esi
c001d00f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d013:	52                   	push   edx
c001d014:	50                   	push   eax
c001d015:	53                   	push   ebx
c001d016:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d019:	83 c4 14             	add    esp,0x14
c001d01c:	53                   	push   ebx
c001d01d:	e8 18 66 ff ff       	call   c001363a <File::close()>
c001d022:	5d                   	pop    ebp
c001d023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d027:	e8 27 28 ff ff       	call   c000f853 <free>
c001d02c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d02f:	e8 1f 28 ff ff       	call   c000f853 <free>
c001d034:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c001d039:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d03d:	8d 50 01             	lea    edx,[eax+0x1]
c001d040:	89 0c 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],ecx
c001d047:	89 34 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],esi
c001d04e:	89 15 40 1a 03 c0    	mov    DWORD PTR ds:0xc0031a40,edx
c001d054:	83 c4 10             	add    esp,0x10
c001d057:	b0 01                	mov    al,0x1
c001d059:	83 c4 5c             	add    esp,0x5c
c001d05c:	5b                   	pop    ebx
c001d05d:	5e                   	pop    esi
c001d05e:	5f                   	pop    edi
c001d05f:	5d                   	pop    ebp
c001d060:	c3                   	ret    

c001d061 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d061:	55                   	push   ebp
c001d062:	57                   	push   edi
c001d063:	56                   	push   esi
c001d064:	53                   	push   ebx
c001d065:	81 ec 68 03 00 00    	sub    esp,0x368
c001d06b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d072:	8b 1d 94 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a94
c001d078:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d07c:	68 14 01 00 00       	push   0x114
c001d081:	e8 bd 27 ff ff       	call   c000f843 <malloc>
c001d086:	83 c4 0c             	add    esp,0xc
c001d089:	89 c5                	mov    ebp,eax
c001d08b:	53                   	push   ebx
c001d08c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d093:	50                   	push   eax
c001d094:	e8 df 64 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001d099:	5e                   	pop    esi
c001d09a:	5f                   	pop    edi
c001d09b:	6a 01                	push   0x1
c001d09d:	55                   	push   ebp
c001d09e:	e8 39 65 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001d0a3:	83 c4 10             	add    esp,0x10
c001d0a6:	85 c0                	test   eax,eax
c001d0a8:	0f 85 8d 06 00 00    	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0ae:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d0b6:	83 ec 0c             	sub    esp,0xc
c001d0b9:	6a 34                	push   0x34
c001d0bb:	e8 83 27 ff ff       	call   c000f843 <malloc>
c001d0c0:	5b                   	pop    ebx
c001d0c1:	89 c7                	mov    edi,eax
c001d0c3:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d0c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d0ca:	53                   	push   ebx
c001d0cb:	57                   	push   edi
c001d0cc:	6a 00                	push   0x0
c001d0ce:	6a 34                	push   0x34
c001d0d0:	55                   	push   ebp
c001d0d1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0d4:	83 c4 20             	add    esp,0x20
c001d0d7:	85 c0                	test   eax,eax
c001d0d9:	0f 85 5c 06 00 00    	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0df:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0e5:	0f 85 50 06 00 00    	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0eb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0ee:	85 c0                	test   eax,eax
c001d0f0:	0f 84 45 06 00 00    	je     c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0f6:	31 d2                	xor    edx,edx
c001d0f8:	51                   	push   ecx
c001d0f9:	52                   	push   edx
c001d0fa:	50                   	push   eax
c001d0fb:	55                   	push   ebp
c001d0fc:	e8 99 65 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	85 c0                	test   eax,eax
c001d106:	0f 85 2f 06 00 00    	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d112:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d116:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d11a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d11e:	0f af c2             	imul   eax,edx
c001d121:	50                   	push   eax
c001d122:	e8 1c 27 ff ff       	call   c000f843 <malloc>
c001d127:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d12a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d12e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d131:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d135:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d139:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d13d:	0f af c2             	imul   eax,edx
c001d140:	99                   	cdq    
c001d141:	52                   	push   edx
c001d142:	50                   	push   eax
c001d143:	55                   	push   ebp
c001d144:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d147:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d14a:	83 c4 20             	add    esp,0x20
c001d14d:	85 c0                	test   eax,eax
c001d14f:	0f 84 e6 05 00 00    	je     c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d155:	52                   	push   edx
c001d156:	31 d2                	xor    edx,edx
c001d158:	52                   	push   edx
c001d159:	50                   	push   eax
c001d15a:	55                   	push   ebp
c001d15b:	e8 3a 65 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d160:	83 c4 10             	add    esp,0x10
c001d163:	85 c0                	test   eax,eax
c001d165:	0f 85 d0 05 00 00    	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d16b:	83 ec 0c             	sub    esp,0xc
c001d16e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d172:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d176:	31 f6                	xor    esi,esi
c001d178:	0f af c2             	imul   eax,edx
c001d17b:	50                   	push   eax
c001d17c:	e8 c2 26 ff ff       	call   c000f843 <malloc>
c001d181:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d184:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d188:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d18b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d18f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d193:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d197:	0f af c2             	imul   eax,edx
c001d19a:	99                   	cdq    
c001d19b:	52                   	push   edx
c001d19c:	50                   	push   eax
c001d19d:	55                   	push   ebp
c001d19e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1a1:	83 c4 20             	add    esp,0x20
c001d1a4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d1a8:	0f 86 8a 00 00 00    	jbe    c001d238 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d1ae:	0f b7 de             	movzx  ebx,si
c001d1b1:	c1 e3 05             	shl    ebx,0x5
c001d1b4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d1b8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d1bb:	75 75                	jne    c001d232 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d1bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1c0:	31 d2                	xor    edx,edx
c001d1c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1cd:	50                   	push   eax
c001d1ce:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1d1:	52                   	push   edx
c001d1d2:	50                   	push   eax
c001d1d3:	55                   	push   ebp
c001d1d4:	e8 c1 64 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d1d9:	83 c4 10             	add    esp,0x10
c001d1dc:	85 c0                	test   eax,eax
c001d1de:	0f 85 57 05 00 00    	jne    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1e4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1eb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1ee:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1f2:	31 d2                	xor    edx,edx
c001d1f4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d206:	50                   	push   eax
c001d207:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d20f:	52                   	push   edx
c001d210:	50                   	push   eax
c001d211:	55                   	push   ebp
c001d212:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d215:	83 c4 1c             	add    esp,0x1c
c001d218:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d21b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d21e:	50                   	push   eax
c001d21f:	6a 00                	push   0x0
c001d221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d225:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d229:	50                   	push   eax
c001d22a:	e8 49 35 fe ff       	call   c0000778 <memset>
c001d22f:	83 c4 10             	add    esp,0x10
c001d232:	46                   	inc    esi
c001d233:	e9 6c ff ff ff       	jmp    c001d1a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d238:	53                   	push   ebx
c001d239:	31 db                	xor    ebx,ebx
c001d23b:	68 00 01 00 00       	push   0x100
c001d240:	6a 00                	push   0x0
c001d242:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d246:	50                   	push   eax
c001d247:	e8 2c 35 fe ff       	call   c0000778 <memset>
c001d24c:	83 c4 0c             	add    esp,0xc
c001d24f:	68 00 01 00 00       	push   0x100
c001d254:	6a 00                	push   0x0
c001d256:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d25d:	50                   	push   eax
c001d25e:	e8 15 35 fe ff       	call   c0000778 <memset>
c001d263:	83 c4 10             	add    esp,0x10
c001d266:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d26e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d276:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d27e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d286:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d28e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d292:	0f 86 30 01 00 00    	jbe    c001d3c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d298:	0f b7 f3             	movzx  esi,bx
c001d29b:	6b f6 28             	imul   esi,esi,0x28
c001d29e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d2a2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2a9:	52                   	push   edx
c001d2aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2ae:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d2b2:	8b 06                	mov    eax,DWORD PTR [esi]
c001d2b4:	6b d2 28             	imul   edx,edx,0x28
c001d2b7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d2bb:	31 d2                	xor    edx,edx
c001d2bd:	52                   	push   edx
c001d2be:	50                   	push   eax
c001d2bf:	55                   	push   ebp
c001d2c0:	e8 d5 63 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d2c5:	83 c4 0c             	add    esp,0xc
c001d2c8:	6a 20                	push   0x20
c001d2ca:	6a 00                	push   0x0
c001d2cc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2d3:	51                   	push   ecx
c001d2d4:	e8 9f 34 fe ff       	call   c0000778 <memset>
c001d2d9:	59                   	pop    ecx
c001d2da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2dd:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2e1:	52                   	push   edx
c001d2e2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2e9:	51                   	push   ecx
c001d2ea:	6a 00                	push   0x0
c001d2ec:	6a 1f                	push   0x1f
c001d2ee:	55                   	push   ebp
c001d2ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2f2:	83 c4 1c             	add    esp,0x1c
c001d2f5:	6a 09                	push   0x9
c001d2f7:	68 84 c1 02 c0       	push   0xc002c184
c001d2fc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d303:	51                   	push   ecx
c001d304:	e8 37 33 fe ff       	call   c0000640 <memcmp>
c001d309:	83 c4 10             	add    esp,0x10
c001d30c:	85 c0                	test   eax,eax
c001d30e:	75 21                	jne    c001d331 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d314:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d318:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d31c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d320:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d323:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d32a:	89 d0                	mov    eax,edx
c001d32c:	40                   	inc    eax
c001d32d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d331:	50                   	push   eax
c001d332:	6a 09                	push   0x9
c001d334:	68 8e c1 02 c0       	push   0xc002c18e
c001d339:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d340:	50                   	push   eax
c001d341:	e8 fa 32 fe ff       	call   c0000640 <memcmp>
c001d346:	83 c4 10             	add    esp,0x10
c001d349:	85 c0                	test   eax,eax
c001d34b:	75 21                	jne    c001d36e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d34d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d351:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d355:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d359:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d35d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d360:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d367:	89 d0                	mov    eax,edx
c001d369:	40                   	inc    eax
c001d36a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d36e:	50                   	push   eax
c001d36f:	50                   	push   eax
c001d370:	68 5a c1 02 c0       	push   0xc002c15a
c001d375:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d37c:	50                   	push   eax
c001d37d:	e8 3e 35 fe ff       	call   c00008c0 <strcmp>
c001d382:	83 c4 10             	add    esp,0x10
c001d385:	85 c0                	test   eax,eax
c001d387:	75 0f                	jne    c001d398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d389:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d38c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d390:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d394:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d398:	50                   	push   eax
c001d399:	50                   	push   eax
c001d39a:	68 62 c1 02 c0       	push   0xc002c162
c001d39f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3a6:	50                   	push   eax
c001d3a7:	e8 14 35 fe ff       	call   c00008c0 <strcmp>
c001d3ac:	83 c4 10             	add    esp,0x10
c001d3af:	85 c0                	test   eax,eax
c001d3b1:	75 0f                	jne    c001d3c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d3b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3be:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d3c2:	43                   	inc    ebx
c001d3c3:	e9 c6 fe ff ff       	jmp    c001d28e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d3c8:	31 d2                	xor    edx,edx
c001d3ca:	50                   	push   eax
c001d3cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d3cf:	52                   	push   edx
c001d3d0:	50                   	push   eax
c001d3d1:	55                   	push   ebp
c001d3d2:	e8 c3 62 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d3d7:	58                   	pop    eax
c001d3d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3dc:	e8 62 24 ff ff       	call   c000f843 <malloc>
c001d3e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3e8:	31 d2                	xor    edx,edx
c001d3ea:	58                   	pop    eax
c001d3eb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3ef:	53                   	push   ebx
c001d3f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3f8:	52                   	push   edx
c001d3f9:	50                   	push   eax
c001d3fa:	55                   	push   ebp
c001d3fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3fe:	83 c4 14             	add    esp,0x14
c001d401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d405:	e8 39 24 ff ff       	call   c000f843 <malloc>
c001d40a:	31 d2                	xor    edx,edx
c001d40c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d410:	83 c4 0c             	add    esp,0xc
c001d413:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d417:	52                   	push   edx
c001d418:	50                   	push   eax
c001d419:	55                   	push   ebp
c001d41a:	e8 7b 62 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d41f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d422:	31 d2                	xor    edx,edx
c001d424:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d427:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d42b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d42f:	52                   	push   edx
c001d430:	50                   	push   eax
c001d431:	55                   	push   ebp
c001d432:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d435:	83 c4 20             	add    esp,0x20
c001d438:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d440:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d444:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d448:	0f 84 f1 02 00 00    	je     c001d73f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d44e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d455:	31 d2                	xor    edx,edx
c001d457:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d45b:	c1 e8 03             	shr    eax,0x3
c001d45e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d462:	51                   	push   ecx
c001d463:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d467:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d46b:	52                   	push   edx
c001d46c:	50                   	push   eax
c001d46d:	55                   	push   ebp
c001d46e:	e8 27 62 ff ff       	call   c001369a <File::seek(unsigned long long)>
c001d473:	5b                   	pop    ebx
c001d474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d478:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d47f:	e8 bf 23 ff ff       	call   c000f843 <malloc>
c001d484:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d487:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d48b:	31 d2                	xor    edx,edx
c001d48d:	5e                   	pop    esi
c001d48e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d492:	50                   	push   eax
c001d493:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d497:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d49b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d4a2:	52                   	push   edx
c001d4a3:	50                   	push   eax
c001d4a4:	55                   	push   ebp
c001d4a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4a8:	83 c4 20             	add    esp,0x20
c001d4ab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d4b3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d4b7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d4bb:	0f 8d 62 02 00 00    	jge    c001d723 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d4c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c9:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d4ce:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4d9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4dd:	89 d8                	mov    eax,ebx
c001d4df:	c1 e8 08             	shr    eax,0x8
c001d4e2:	89 c6                	mov    esi,eax
c001d4e4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4e8:	c1 e6 04             	shl    esi,0x4
c001d4eb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4ef:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4f2:	85 d2                	test   edx,edx
c001d4f4:	0f 85 bf 00 00 00    	jne    c001d5b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4fa:	83 ec 0c             	sub    esp,0xc
c001d4fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d501:	03 06                	add    eax,DWORD PTR [esi]
c001d503:	50                   	push   eax
c001d504:	e8 4b f8 ff ff       	call   c001cd54 <Thr::getAddressOfKernelSymbol(char const*)>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	89 c2                	mov    edx,eax
c001d50e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d513:	85 c0                	test   eax,eax
c001d515:	0f 85 9e 00 00 00    	jne    c001d5b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d51b:	83 ec 0c             	sub    esp,0xc
c001d51e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d522:	03 06                	add    eax,DWORD PTR [esi]
c001d524:	50                   	push   eax
c001d525:	e8 cb 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	89 c2                	mov    edx,eax
c001d52f:	85 c0                	test   eax,eax
c001d531:	0f 85 82 00 00 00    	jne    c001d5b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d537:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d53b:	50                   	push   eax
c001d53c:	50                   	push   eax
c001d53d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d541:	03 06                	add    eax,DWORD PTR [esi]
c001d543:	50                   	push   eax
c001d544:	68 98 c1 02 c0       	push   0xc002c198
c001d549:	e8 d1 5a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001d54e:	58                   	pop    eax
c001d54f:	5a                   	pop    edx
c001d550:	68 b2 c1 02 c0       	push   0xc002c1b2
c001d555:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d55c:	50                   	push   eax
c001d55d:	e8 d2 32 fe ff       	call   c0000834 <strcpy>
c001d562:	59                   	pop    ecx
c001d563:	58                   	pop    eax
c001d564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d568:	03 06                	add    eax,DWORD PTR [esi]
c001d56a:	50                   	push   eax
c001d56b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d572:	50                   	push   eax
c001d573:	e8 fc 33 fe ff       	call   c0000974 <strcat>
c001d578:	58                   	pop    eax
c001d579:	5a                   	pop    edx
c001d57a:	68 48 c2 02 c0       	push   0xc002c248
c001d57f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d586:	50                   	push   eax
c001d587:	e8 e8 33 fe ff       	call   c0000974 <strcat>
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d594:	0f 84 43 01 00 00    	je     c001d6dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5a4:	50                   	push   eax
c001d5a5:	e8 23 d1 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d5aa:	83 c4 10             	add    esp,0x10
c001d5ad:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d5b1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d5b5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d5b9:	80 fb 01             	cmp    bl,0x1
c001d5bc:	75 7d                	jne    c001d63b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d5be:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d5c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5c9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d5cd:	01 ce                	add    esi,ecx
c001d5cf:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5d5:	0f 94 c0             	sete   al
c001d5d8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5de:	0f 94 c3             	sete   bl
c001d5e1:	09 c3                	or     ebx,eax
c001d5e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5e5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5ea:	74 36                	je     c001d622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5ec:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5ef:	84 db                	test   bl,bl
c001d5f1:	75 0a                	jne    c001d5fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5f7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5fb:	76 37                	jbe    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5fd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d601:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d606:	0f 84 d1 00 00 00    	je     c001d6dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d60c:	83 ec 0c             	sub    esp,0xc
c001d60f:	68 c9 c1 02 c0       	push   0xc002c1c9
c001d614:	e8 b4 d0 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d620:	eb 12                	jmp    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d622:	01 c1                	add    ecx,eax
c001d624:	84 db                	test   bl,bl
c001d626:	75 0c                	jne    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d628:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d62c:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d630:	77 02                	ja     c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d632:	01 d1                	add    ecx,edx
c001d634:	89 0e                	mov    DWORD PTR [esi],ecx
c001d636:	e9 df 00 00 00       	jmp    c001d71a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d63b:	80 fb 02             	cmp    bl,0x2
c001d63e:	75 71                	jne    c001d6b1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d640:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d647:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d64b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d64f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d655:	74 15                	je     c001d66c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d657:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d65d:	74 0d                	je     c001d66c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d65f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d663:	83 e8 04             	sub    eax,0x4
c001d666:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d66a:	76 1f                	jbe    c001d68b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d66c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d670:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d675:	74 66                	je     c001d6dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	68 e5 c1 02 c0       	push   0xc002c1e5
c001d67f:	e8 49 d0 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d68b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d68d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d692:	74 13                	je     c001d6a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d694:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d698:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d69f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d6a3:	01 c8                	add    eax,ecx
c001d6a5:	eb 04                	jmp    c001d6ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d6a7:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d6ab:	01 c2                	add    edx,eax
c001d6ad:	89 16                	mov    DWORD PTR [esi],edx
c001d6af:	eb 69                	jmp    c001d71a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6b1:	0f b6 db             	movzx  ebx,bl
c001d6b4:	50                   	push   eax
c001d6b5:	50                   	push   eax
c001d6b6:	53                   	push   ebx
c001d6b7:	68 01 c2 02 c0       	push   0xc002c201
c001d6bc:	e8 5e 59 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001d6c1:	83 c4 10             	add    esp,0x10
c001d6c4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6c9:	74 12                	je     c001d6dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d6cb:	83 ec 0c             	sub    esp,0xc
c001d6ce:	68 0c c2 02 c0       	push   0xc002c20c
c001d6d3:	e8 f5 cf ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d6d8:	83 c4 10             	add    esp,0x10
c001d6db:	eb 3d                	jmp    c001d71a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6dd:	83 ec 0c             	sub    esp,0xc
c001d6e0:	55                   	push   ebp
c001d6e1:	e8 54 5f ff ff       	call   c001363a <File::close()>
c001d6e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6ef:	59                   	pop    ecx
c001d6f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6f4:	e8 5a 21 ff ff       	call   c000f853 <free>
c001d6f9:	5b                   	pop    ebx
c001d6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6fe:	e8 50 21 ff ff       	call   c000f853 <free>
c001d703:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d706:	e8 48 21 ff ff       	call   c000f853 <free>
c001d70b:	5e                   	pop    esi
c001d70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d710:	e8 3e 21 ff ff       	call   c000f853 <free>
c001d715:	83 c4 10             	add    esp,0x10
c001d718:	eb 21                	jmp    c001d73b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d71a:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d71e:	e9 90 fd ff ff       	jmp    c001d4b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d723:	83 ec 0c             	sub    esp,0xc
c001d726:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d72a:	e8 24 21 ff ff       	call   c000f853 <free>
c001d72f:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d733:	83 c4 10             	add    esp,0x10
c001d736:	e9 05 fd ff ff       	jmp    c001d440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d73b:	31 c0                	xor    eax,eax
c001d73d:	eb 33                	jmp    c001d772 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d73f:	83 ec 0c             	sub    esp,0xc
c001d742:	55                   	push   ebp
c001d743:	e8 f2 5e ff ff       	call   c001363a <File::close()>
c001d748:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d74b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d74e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d751:	58                   	pop    eax
c001d752:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d756:	e8 f8 20 ff ff       	call   c000f853 <free>
c001d75b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d75e:	e8 f0 20 ff ff       	call   c000f853 <free>
c001d763:	5a                   	pop    edx
c001d764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d768:	e8 e6 20 ff ff       	call   c000f853 <free>
c001d76d:	83 c4 10             	add    esp,0x10
c001d770:	b0 01                	mov    al,0x1
c001d772:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d778:	5b                   	pop    ebx
c001d779:	5e                   	pop    esi
c001d77a:	5f                   	pop    edi
c001d77b:	5d                   	pop    ebp
c001d77c:	c3                   	ret    

c001d77d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d77d:	56                   	push   esi
c001d77e:	31 d2                	xor    edx,edx
c001d780:	53                   	push   ebx
c001d781:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001d787:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d78b:	39 d3                	cmp    ebx,edx
c001d78d:	7e 1b                	jle    c001d7aa <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d78f:	8b 04 95 c0 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceb40]
c001d796:	39 c8                	cmp    eax,ecx
c001d798:	77 0d                	ja     c001d7a7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d79a:	8b 34 95 c0 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffced40]
c001d7a1:	01 c6                	add    esi,eax
c001d7a3:	39 ce                	cmp    esi,ecx
c001d7a5:	77 05                	ja     c001d7ac <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d7a7:	42                   	inc    edx
c001d7a8:	eb e1                	jmp    c001d78b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d7aa:	31 c0                	xor    eax,eax
c001d7ac:	5b                   	pop    ebx
c001d7ad:	5e                   	pop    esi
c001d7ae:	c3                   	ret    

c001d7af <Thr::getDriverNameFromAddress(unsigned long)>:
c001d7af:	53                   	push   ebx
c001d7b0:	31 c0                	xor    eax,eax
c001d7b2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7b6:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001d7bc:	39 c3                	cmp    ebx,eax
c001d7be:	7e 22                	jle    c001d7e2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d7c0:	8b 14 85 c0 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceb40]
c001d7c7:	39 ca                	cmp    edx,ecx
c001d7c9:	77 14                	ja     c001d7df <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7cb:	03 14 85 c0 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffced40]
c001d7d2:	39 ca                	cmp    edx,ecx
c001d7d4:	76 09                	jbe    c001d7df <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7d6:	8b 04 85 c0 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce940]
c001d7dd:	eb 05                	jmp    c001d7e4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7df:	40                   	inc    eax
c001d7e0:	eb da                	jmp    c001d7bc <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7e2:	31 c0                	xor    eax,eax
c001d7e4:	5b                   	pop    ebx
c001d7e5:	c3                   	ret    

c001d7e6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7e6:	53                   	push   ebx
c001d7e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7eb:	53                   	push   ebx
c001d7ec:	e8 8c ff ff ff       	call   c001d77d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7f1:	5a                   	pop    edx
c001d7f2:	31 d2                	xor    edx,edx
c001d7f4:	85 c0                	test   eax,eax
c001d7f6:	74 04                	je     c001d7fc <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7f8:	89 da                	mov    edx,ebx
c001d7fa:	29 c2                	sub    edx,eax
c001d7fc:	89 d0                	mov    eax,edx
c001d7fe:	5b                   	pop    ebx
c001d7ff:	c3                   	ret    

c001d800 <Thr::loadDLL(char const*, bool)>:
c001d800:	55                   	push   ebp
c001d801:	57                   	push   edi
c001d802:	56                   	push   esi
c001d803:	53                   	push   ebx
c001d804:	81 ec 34 01 00 00    	sub    esp,0x134
c001d80a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d811:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d818:	56                   	push   esi
c001d819:	68 24 c2 02 c0       	push   0xc002c224
c001d81e:	e8 fc 57 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001d823:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d82a:	e8 14 20 ff ff       	call   c000f843 <malloc>
c001d82f:	83 c4 0c             	add    esp,0xc
c001d832:	89 c3                	mov    ebx,eax
c001d834:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001d83a:	56                   	push   esi
c001d83b:	50                   	push   eax
c001d83c:	e8 37 5d ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001d841:	83 c4 10             	add    esp,0x10
c001d844:	85 db                	test   ebx,ebx
c001d846:	75 3c                	jne    c001d884 <Thr::loadDLL(char const*, bool)+0x84>
c001d848:	89 e8                	mov    eax,ebp
c001d84a:	84 c0                	test   al,al
c001d84c:	0f 84 ed 01 00 00    	je     c001da3f <Thr::loadDLL(char const*, bool)+0x23f>
c001d852:	50                   	push   eax
c001d853:	50                   	push   eax
c001d854:	68 35 c2 02 c0       	push   0xc002c235
c001d859:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d85d:	57                   	push   edi
c001d85e:	e8 d1 2f fe ff       	call   c0000834 <strcpy>
c001d863:	58                   	pop    eax
c001d864:	5a                   	pop    edx
c001d865:	56                   	push   esi
c001d866:	57                   	push   edi
c001d867:	e8 08 31 fe ff       	call   c0000974 <strcat>
c001d86c:	59                   	pop    ecx
c001d86d:	58                   	pop    eax
c001d86e:	68 48 c2 02 c0       	push   0xc002c248
c001d873:	57                   	push   edi
c001d874:	e8 fb 30 fe ff       	call   c0000974 <strcat>
c001d879:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d87c:	e8 4c ce ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d881:	83 c4 10             	add    esp,0x10
c001d884:	50                   	push   eax
c001d885:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d889:	50                   	push   eax
c001d88a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d88e:	50                   	push   eax
c001d88f:	53                   	push   ebx
c001d890:	e8 f3 5f ff ff       	call   c0013888 <File::stat(unsigned long long*, bool*)>
c001d895:	83 c4 10             	add    esp,0x10
c001d898:	85 db                	test   ebx,ebx
c001d89a:	74 0c                	je     c001d8a8 <Thr::loadDLL(char const*, bool)+0xa8>
c001d89c:	83 ec 0c             	sub    esp,0xc
c001d89f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d8a1:	53                   	push   ebx
c001d8a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d8a5:	83 c4 10             	add    esp,0x10
c001d8a8:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d8ad:	75 0a                	jne    c001d8b9 <Thr::loadDLL(char const*, bool)+0xb9>
c001d8af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d8b3:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d8b7:	75 3c                	jne    c001d8f5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d8b9:	89 e8                	mov    eax,ebp
c001d8bb:	84 c0                	test   al,al
c001d8bd:	0f 84 64 01 00 00    	je     c001da27 <Thr::loadDLL(char const*, bool)+0x227>
c001d8c3:	50                   	push   eax
c001d8c4:	50                   	push   eax
c001d8c5:	68 35 c2 02 c0       	push   0xc002c235
c001d8ca:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8ce:	53                   	push   ebx
c001d8cf:	e8 60 2f fe ff       	call   c0000834 <strcpy>
c001d8d4:	58                   	pop    eax
c001d8d5:	5a                   	pop    edx
c001d8d6:	56                   	push   esi
c001d8d7:	53                   	push   ebx
c001d8d8:	e8 97 30 fe ff       	call   c0000974 <strcat>
c001d8dd:	59                   	pop    ecx
c001d8de:	5f                   	pop    edi
c001d8df:	68 48 c2 02 c0       	push   0xc002c248
c001d8e4:	53                   	push   ebx
c001d8e5:	e8 8a 30 fe ff       	call   c0000974 <strcat>
c001d8ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8ed:	e8 db cd ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d8f2:	83 c4 10             	add    esp,0x10
c001d8f5:	e8 46 45 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001d8fa:	51                   	push   ecx
c001d8fb:	6a 03                	push   0x3
c001d8fd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d901:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d905:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d90b:	83 d3 00             	adc    ebx,0x0
c001d90e:	89 ca                	mov    edx,ecx
c001d910:	89 d1                	mov    ecx,edx
c001d912:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d916:	51                   	push   ecx
c001d917:	50                   	push   eax
c001d918:	e8 5f 4b ff ff       	call   c001247c <VAS::allocatePages(int, int)>
c001d91d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d921:	89 c3                	mov    ebx,eax
c001d923:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d927:	05 ff 0f 00 00       	add    eax,0xfff
c001d92c:	83 d2 00             	adc    edx,0x0
c001d92f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d933:	c1 ea 0c             	shr    edx,0xc
c001d936:	52                   	push   edx
c001d937:	50                   	push   eax
c001d938:	53                   	push   ebx
c001d939:	68 4a c2 02 c0       	push   0xc002c24a
c001d93e:	e8 dc 56 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001d943:	83 c4 14             	add    esp,0x14
c001d946:	56                   	push   esi
c001d947:	e8 48 2e fe ff       	call   c0000794 <strlen>
c001d94c:	8b 3d a0 12 03 c0    	mov    edi,DWORD PTR ds:0xc00312a0
c001d952:	40                   	inc    eax
c001d953:	89 04 24             	mov    DWORD PTR [esp],eax
c001d956:	e8 e8 1e ff ff       	call   c000f843 <malloc>
c001d95b:	89 04 bd c0 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce940],eax
c001d962:	5f                   	pop    edi
c001d963:	58                   	pop    eax
c001d964:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c001d969:	56                   	push   esi
c001d96a:	ff 34 85 c0 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce940]
c001d971:	e8 be 2e fe ff       	call   c0000834 <strcpy>
c001d976:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c001d97b:	8d 50 01             	lea    edx,[eax+0x1]
c001d97e:	89 1c 85 c0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb40],ebx
c001d985:	89 15 a0 12 03 c0    	mov    DWORD PTR ds:0xc00312a0,edx
c001d98b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d98f:	83 c4 0c             	add    esp,0xc
c001d992:	89 14 85 c0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced40],edx
c001d999:	6a 01                	push   0x1
c001d99b:	53                   	push   ebx
c001d99c:	56                   	push   esi
c001d99d:	e8 bf f6 ff ff       	call   c001d061 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d9a2:	83 c4 10             	add    esp,0x10
c001d9a5:	89 c7                	mov    edi,eax
c001d9a7:	84 c0                	test   al,al
c001d9a9:	0f 85 8c 00 00 00    	jne    c001da3b <Thr::loadDLL(char const*, bool)+0x23b>
c001d9af:	89 e8                	mov    eax,ebp
c001d9b1:	84 c0                	test   al,al
c001d9b3:	74 76                	je     c001da2b <Thr::loadDLL(char const*, bool)+0x22b>
c001d9b5:	83 ec 0c             	sub    esp,0xc
c001d9b8:	68 6e c2 02 c0       	push   0xc002c26e
c001d9bd:	e8 0b cd ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001d9c2:	83 c4 10             	add    esp,0x10
c001d9c5:	eb 64                	jmp    c001da2b <Thr::loadDLL(char const*, bool)+0x22b>
c001d9c7:	e8 74 44 ff ff       	call   c0011e40 <Virt::getAKernelVAS()>
c001d9cc:	89 f5                	mov    ebp,esi
c001d9ce:	c1 e5 0c             	shl    ebp,0xc
c001d9d1:	52                   	push   edx
c001d9d2:	01 dd                	add    ebp,ebx
c001d9d4:	52                   	push   edx
c001d9d5:	55                   	push   ebp
c001d9d6:	50                   	push   eax
c001d9d7:	e8 1a 46 ff ff       	call   c0011ff6 <VAS::getPageTableEntry(unsigned long)>
c001d9dc:	83 c4 10             	add    esp,0x10
c001d9df:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9e2:	75 0c                	jne    c001d9f0 <Thr::loadDLL(char const*, bool)+0x1f0>
c001d9e4:	83 ec 0c             	sub    esp,0xc
c001d9e7:	55                   	push   ebp
c001d9e8:	e8 6e 24 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d9ed:	83 c4 10             	add    esp,0x10
c001d9f0:	46                   	inc    esi
c001d9f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9f9:	05 ff 0f 00 00       	add    eax,0xfff
c001d9fe:	83 d2 00             	adc    edx,0x0
c001da01:	0f ac d0 0c          	shrd   eax,edx,0xc
c001da05:	c1 ea 0c             	shr    edx,0xc
c001da08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001da10:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001da14:	ba 00 00 00 00       	mov    edx,0x0
c001da19:	89 d0                	mov    eax,edx
c001da1b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001da1f:	72 a6                	jb     c001d9c7 <Thr::loadDLL(char const*, bool)+0x1c7>
c001da21:	89 f8                	mov    eax,edi
c001da23:	84 c0                	test   al,al
c001da25:	75 18                	jne    c001da3f <Thr::loadDLL(char const*, bool)+0x23f>
c001da27:	31 db                	xor    ebx,ebx
c001da29:	eb 14                	jmp    c001da3f <Thr::loadDLL(char const*, bool)+0x23f>
c001da2b:	83 ec 0c             	sub    esp,0xc
c001da2e:	68 8d c2 02 c0       	push   0xc002c28d
c001da33:	e8 95 cc ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001da38:	83 c4 10             	add    esp,0x10
c001da3b:	31 f6                	xor    esi,esi
c001da3d:	eb b2                	jmp    c001d9f1 <Thr::loadDLL(char const*, bool)+0x1f1>
c001da3f:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da45:	89 d8                	mov    eax,ebx
c001da47:	5b                   	pop    ebx
c001da48:	5e                   	pop    esi
c001da49:	5f                   	pop    edi
c001da4a:	5d                   	pop    ebp
c001da4b:	c3                   	ret    

c001da4c <Thr::executeDLL(unsigned long, void*)>:
c001da4c:	56                   	push   esi
c001da4d:	53                   	push   ebx
c001da4e:	52                   	push   edx
c001da4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da53:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da57:	85 db                	test   ebx,ebx
c001da59:	75 10                	jne    c001da6b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da5b:	83 ec 0c             	sub    esp,0xc
c001da5e:	68 a9 c2 02 c0       	push   0xc002c2a9
c001da63:	e8 65 cc ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001da68:	83 c4 10             	add    esp,0x10
c001da6b:	50                   	push   eax
c001da6c:	50                   	push   eax
c001da6d:	53                   	push   ebx
c001da6e:	68 d3 c2 02 c0       	push   0xc002c2d3
c001da73:	e8 a7 55 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001da78:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da7c:	89 d8                	mov    eax,ebx
c001da7e:	83 c4 14             	add    esp,0x14
c001da81:	5b                   	pop    ebx
c001da82:	5e                   	pop    esi
c001da83:	ff e0                	jmp    eax
c001da85:	90                   	nop

c001da86 <changeTSS>:
c001da86:	83 ec 14             	sub    esp,0x14
c001da89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da8e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da91:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da96:	c1 e2 15             	shl    edx,0x15
c001da99:	29 d0                	sub    eax,edx
c001da9b:	50                   	push   eax
c001da9c:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001daa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001daa7:	05 7c 11 00 00       	add    eax,0x117c
c001daac:	50                   	push   eax
c001daad:	e8 32 3a ff ff       	call   c00114e4 <TSS::setESP(unsigned long)>
c001dab2:	83 c4 1c             	add    esp,0x1c
c001dab5:	c3                   	ret    

c001dab6 <Process::addArgs(char**)>:
c001dab6:	57                   	push   edi
c001dab7:	56                   	push   esi
c001dab8:	53                   	push   ebx
c001dab9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dabd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dac1:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001dacb:	85 ff                	test   edi,edi
c001dacd:	74 3d                	je     c001db0c <Process::addArgs(char**)+0x56>
c001dacf:	8b 07                	mov    eax,DWORD PTR [edi]
c001dad1:	85 c0                	test   eax,eax
c001dad3:	74 37                	je     c001db0c <Process::addArgs(char**)+0x56>
c001dad5:	31 db                	xor    ebx,ebx
c001dad7:	83 ec 0c             	sub    esp,0xc
c001dada:	50                   	push   eax
c001dadb:	e8 b4 2c fe ff       	call   c0000794 <strlen>
c001dae0:	40                   	inc    eax
c001dae1:	89 04 24             	mov    DWORD PTR [esp],eax
c001dae4:	e8 5a 1d ff ff       	call   c000f843 <malloc>
c001dae9:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001daf0:	5a                   	pop    edx
c001daf1:	59                   	pop    ecx
c001daf2:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001daf5:	43                   	inc    ebx
c001daf6:	50                   	push   eax
c001daf7:	e8 38 2d fe ff       	call   c0000834 <strcpy>
c001dafc:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db08:	85 c0                	test   eax,eax
c001db0a:	75 cb                	jne    c001dad7 <Process::addArgs(char**)+0x21>
c001db0c:	5b                   	pop    ebx
c001db0d:	5e                   	pop    esi
c001db0e:	5f                   	pop    edi
c001db0f:	c3                   	ret    

c001db10 <Process::Process(char const*, Process*, char**)>:
c001db10:	56                   	push   esi
c001db11:	53                   	push   ebx
c001db12:	83 ec 14             	sub    esp,0x14
c001db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db19:	05 0c 02 00 00       	add    eax,0x20c
c001db1e:	bb 07 00 00 00       	mov    ebx,0x7
c001db23:	89 c6                	mov    esi,eax
c001db25:	85 db                	test   ebx,ebx
c001db27:	78 12                	js     c001db3b <Process::Process(char const*, Process*, char**)+0x2b>
c001db29:	83 ec 0c             	sub    esp,0xc
c001db2c:	56                   	push   esi
c001db2d:	e8 20 b2 00 00       	call   c0028d52 <ThreadControlBlock::ThreadControlBlock()>
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	83 c6 63             	add    esi,0x63
c001db38:	4b                   	dec    ebx
c001db39:	eb ea                	jmp    c001db25 <Process::Process(char const*, Process*, char**)+0x15>
c001db3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db46:	83 ec 0c             	sub    esp,0xc
c001db49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db4d:	e8 cc c9 ff ff       	call   c001a51e <Krnl::newProcessEnv(Process*)>
c001db52:	83 c4 10             	add    esp,0x10
c001db55:	89 c2                	mov    edx,eax
c001db57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db65:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db6e:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c001db73:	8d 50 01             	lea    edx,[eax+0x1]
c001db76:	89 15 90 da 02 c0    	mov    DWORD PTR ds:0xc002da90,edx
c001db7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db80:	89 02                	mov    DWORD PTR [edx],eax
c001db82:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001db8a:	83 ec 0c             	sub    esp,0xc
c001db8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db91:	e8 ad 1c ff ff       	call   c000f843 <malloc>
c001db96:	83 c4 10             	add    esp,0x10
c001db99:	89 c3                	mov    ebx,eax
c001db9b:	83 ec 08             	sub    esp,0x8
c001db9e:	6a 00                	push   0x0
c001dba0:	53                   	push   ebx
c001dba1:	e8 7e 4c ff ff       	call   c0012824 <VAS::VAS(bool)>
c001dba6:	83 c4 10             	add    esp,0x10
c001dba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbad:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dbc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dbc9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd9:	85 c0                	test   eax,eax
c001dbdb:	74 42                	je     c001dc1f <Process::Process(char const*, Process*, char**)+0x10f>
c001dbdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbe7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbfb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc01:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0b:	05 0c 01 00 00       	add    eax,0x10c
c001dc10:	83 ec 08             	sub    esp,0x8
c001dc13:	52                   	push   edx
c001dc14:	50                   	push   eax
c001dc15:	e8 1a 2c fe ff       	call   c0000834 <strcpy>
c001dc1a:	83 c4 10             	add    esp,0x10
c001dc1d:	eb 63                	jmp    c001dc82 <Process::Process(char const*, Process*, char**)+0x172>
c001dc1f:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dc27:	83 ec 0c             	sub    esp,0xc
c001dc2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc2e:	e8 10 1c ff ff       	call   c000f843 <malloc>
c001dc33:	83 c4 10             	add    esp,0x10
c001dc36:	89 c3                	mov    ebx,eax
c001dc38:	83 ec 08             	sub    esp,0x8
c001dc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3f:	53                   	push   ebx
c001dc40:	e8 9d 35 ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c001dc45:	83 c4 10             	add    esp,0x10
c001dc48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc4c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc56:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc5c:	83 ec 0c             	sub    esp,0xc
c001dc5f:	50                   	push   eax
c001dc60:	e8 70 29 ff ff       	call   c00105d5 <addToTerminalCycle(VgaText*)>
c001dc65:	83 c4 10             	add    esp,0x10
c001dc68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc6c:	05 0c 01 00 00       	add    eax,0x10c
c001dc71:	83 ec 08             	sub    esp,0x8
c001dc74:	68 f2 c2 02 c0       	push   0xc002c2f2
c001dc79:	50                   	push   eax
c001dc7a:	e8 b5 2b fe ff       	call   c0000834 <strcpy>
c001dc7f:	83 c4 10             	add    esp,0x10
c001dc82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc86:	83 c0 0c             	add    eax,0xc
c001dc89:	83 ec 08             	sub    esp,0x8
c001dc8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc90:	50                   	push   eax
c001dc91:	e8 9e 2b fe ff       	call   c0000834 <strcpy>
c001dc96:	83 c4 10             	add    esp,0x10
c001dc99:	83 ec 08             	sub    esp,0x8
c001dc9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dca0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dca4:	e8 0d fe ff ff       	call   c001dab6 <Process::addArgs(char**)>
c001dca9:	83 c4 10             	add    esp,0x10
c001dcac:	83 ec 08             	sub    esp,0x8
c001dcaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcb7:	e8 6f ee ff ff       	call   c001cb2b <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dcbc:	83 c4 10             	add    esp,0x10
c001dcbf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dcc3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dcc7:	83 f0 01             	xor    eax,0x1
c001dcca:	88 c2                	mov    dl,al
c001dccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd0:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dcd6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcdb:	83 ec 08             	sub    esp,0x8
c001dcde:	50                   	push   eax
c001dcdf:	68 f0 c3 02 c0       	push   0xc002c3f0
c001dce4:	e8 36 53 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	90                   	nop
c001dced:	83 c4 14             	add    esp,0x14
c001dcf0:	5b                   	pop    ebx
c001dcf1:	5e                   	pop    esi
c001dcf2:	c3                   	ret    
c001dcf3:	90                   	nop

c001dcf4 <Process::Process(bool, char const*, Process*, char**)>:
c001dcf4:	56                   	push   esi
c001dcf5:	53                   	push   ebx
c001dcf6:	83 ec 24             	sub    esp,0x24
c001dcf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcfd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd05:	05 0c 02 00 00       	add    eax,0x20c
c001dd0a:	bb 07 00 00 00       	mov    ebx,0x7
c001dd0f:	89 c6                	mov    esi,eax
c001dd11:	85 db                	test   ebx,ebx
c001dd13:	78 12                	js     c001dd27 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd15:	83 ec 0c             	sub    esp,0xc
c001dd18:	56                   	push   esi
c001dd19:	e8 34 b0 00 00       	call   c0028d52 <ThreadControlBlock::ThreadControlBlock()>
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	83 c6 63             	add    esi,0x63
c001dd24:	4b                   	dec    ebx
c001dd25:	eb ea                	jmp    c001dd11 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dd27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd32:	83 ec 0c             	sub    esp,0xc
c001dd35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd39:	e8 e0 c7 ff ff       	call   c001a51e <Krnl::newProcessEnv(Process*)>
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	89 c2                	mov    edx,eax
c001dd43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd47:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd51:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd5a:	a1 90 da 02 c0       	mov    eax,ds:0xc002da90
c001dd5f:	8d 50 01             	lea    edx,[eax+0x1]
c001dd62:	89 15 90 da 02 c0    	mov    DWORD PTR ds:0xc002da90,edx
c001dd68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd6c:	89 02                	mov    DWORD PTR [edx],eax
c001dd6e:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001dd76:	83 ec 0c             	sub    esp,0xc
c001dd79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd7d:	e8 c1 1a ff ff       	call   c000f843 <malloc>
c001dd82:	83 c4 10             	add    esp,0x10
c001dd85:	89 c3                	mov    ebx,eax
c001dd87:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd8c:	83 ec 08             	sub    esp,0x8
c001dd8f:	50                   	push   eax
c001dd90:	53                   	push   ebx
c001dd91:	e8 8e 4a ff ff       	call   c0012824 <VAS::VAS(bool)>
c001dd96:	83 c4 10             	add    esp,0x10
c001dd99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd9d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dda3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda7:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ddb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddb9:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ddbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddc9:	85 c0                	test   eax,eax
c001ddcb:	74 42                	je     c001de0f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001ddcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddd7:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde1:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dde7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddeb:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddf1:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfb:	05 0c 01 00 00       	add    eax,0x10c
c001de00:	83 ec 08             	sub    esp,0x8
c001de03:	52                   	push   edx
c001de04:	50                   	push   eax
c001de05:	e8 2a 2a fe ff       	call   c0000834 <strcpy>
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	eb 63                	jmp    c001de72 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de0f:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001de17:	83 ec 0c             	sub    esp,0xc
c001de1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001de1e:	e8 20 1a ff ff       	call   c000f843 <malloc>
c001de23:	83 c4 10             	add    esp,0x10
c001de26:	89 c3                	mov    ebx,eax
c001de28:	83 ec 08             	sub    esp,0x8
c001de2b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de2f:	53                   	push   ebx
c001de30:	e8 ad 33 ff ff       	call   c00111e2 <VgaText::VgaText(char const*)>
c001de35:	83 c4 10             	add    esp,0x10
c001de38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de3c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de46:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de4c:	83 ec 0c             	sub    esp,0xc
c001de4f:	50                   	push   eax
c001de50:	e8 80 27 ff ff       	call   c00105d5 <addToTerminalCycle(VgaText*)>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de5c:	05 0c 01 00 00       	add    eax,0x10c
c001de61:	83 ec 08             	sub    esp,0x8
c001de64:	68 f2 c2 02 c0       	push   0xc002c2f2
c001de69:	50                   	push   eax
c001de6a:	e8 c5 29 fe ff       	call   c0000834 <strcpy>
c001de6f:	83 c4 10             	add    esp,0x10
c001de72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de76:	83 c0 0c             	add    eax,0xc
c001de79:	83 ec 08             	sub    esp,0x8
c001de7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de80:	50                   	push   eax
c001de81:	e8 ae 29 fe ff       	call   c0000834 <strcpy>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	83 ec 08             	sub    esp,0x8
c001de8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de94:	e8 1d fc ff ff       	call   c001dab6 <Process::addArgs(char**)>
c001de99:	83 c4 10             	add    esp,0x10
c001de9c:	90                   	nop
c001de9d:	83 c4 24             	add    esp,0x24
c001dea0:	5b                   	pop    ebx
c001dea1:	5e                   	pop    esi
c001dea2:	c3                   	ret    

c001dea3 <disableIRQs()>:
c001dea3:	fa                   	cli    
c001dea4:	ff 05 6c 1a 03 c0    	inc    DWORD PTR ds:0xc0031a6c
c001deaa:	c3                   	ret    

c001deab <getIRQNestingLevel()>:
c001deab:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001deb0:	c3                   	ret    

c001deb1 <enableIRQs()>:
c001deb1:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001deb6:	48                   	dec    eax
c001deb7:	a3 6c 1a 03 c0       	mov    ds:0xc0031a6c,eax
c001debc:	75 01                	jne    c001debf <enableIRQs()+0xe>
c001debe:	fb                   	sti    
c001debf:	c3                   	ret    

c001dec0 <lockScheduler()>:
c001dec0:	eb e1                	jmp    c001dea3 <disableIRQs()>

c001dec2 <unlockScheduler()>:
c001dec2:	eb ed                	jmp    c001deb1 <enableIRQs()>

c001dec4 <userModeEntryPoint(void*)>:
c001dec4:	83 ec 0c             	sub    esp,0xc
c001dec7:	e8 f6 ff ff ff       	call   c001dec2 <unlockScheduler()>
c001decc:	fb                   	sti    
c001decd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ded5:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dedb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dedf:	83 c4 0c             	add    esp,0xc
c001dee2:	e9 43 24 fe ff       	jmp    c000032a <goToUsermode>

c001dee7 <lockStuff()>:
c001dee7:	e8 b7 ff ff ff       	call   c001dea3 <disableIRQs()>
c001deec:	ff 05 68 1a 03 c0    	inc    DWORD PTR ds:0xc0031a68
c001def2:	c3                   	ret    

c001def3 <taskStartupFunction>:
c001def3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001defb:	c3                   	ret    

c001defc <updateTimeUsed()>:
c001defc:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c001df01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df07:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001df0e:	74 50                	je     c001df60 <updateTimeUsed()+0x64>
c001df10:	57                   	push   edi
c001df11:	56                   	push   esi
c001df12:	53                   	push   ebx
c001df13:	0f 31                	rdtsc  
c001df15:	89 c1                	mov    ecx,eax
c001df17:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c001df1c:	2b 0d 98 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031a98
c001df22:	89 d3                	mov    ebx,edx
c001df24:	89 0d a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,ecx
c001df2a:	1b 1d 9c 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031a9c
c001df30:	a3 98 1a 03 c0       	mov    ds:0xc0031a98,eax
c001df35:	89 1d a4 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa4,ebx
c001df3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df40:	89 15 ac 1a 03 c0    	mov    DWORD PTR ds:0xc0031aac,edx
c001df46:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df49:	89 15 9c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a9c,edx
c001df4f:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df52:	01 f1                	add    ecx,esi
c001df54:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df57:	11 fb                	adc    ebx,edi
c001df59:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df5c:	5b                   	pop    ebx
c001df5d:	5e                   	pop    esi
c001df5e:	5f                   	pop    edi
c001df5f:	c3                   	ret    
c001df60:	c3                   	ret    

c001df61 <switchToThread(ThreadControlBlock*)>:
c001df61:	53                   	push   ebx
c001df62:	83 ec 08             	sub    esp,0x8
c001df65:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001df6a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df6e:	85 c0                	test   eax,eax
c001df70:	75 30                	jne    c001dfa2 <switchToThread(ThreadControlBlock*)+0x41>
c001df72:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df75:	3c ff                	cmp    al,0xff
c001df77:	74 25                	je     c001df9e <switchToThread(ThreadControlBlock*)+0x3d>
c001df79:	0f b6 d0             	movzx  edx,al
c001df7c:	b8 84 03 00 00       	mov    eax,0x384
c001df81:	29 d0                	sub    eax,edx
c001df83:	c1 e0 10             	shl    eax,0x10
c001df86:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df89:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df8c:	e8 6b ff ff ff       	call   c001defc <updateTimeUsed()>
c001df91:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df95:	83 c4 08             	add    esp,0x8
c001df98:	5b                   	pop    ebx
c001df99:	e9 c4 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df9e:	31 c0                	xor    eax,eax
c001dfa0:	eb e7                	jmp    c001df89 <switchToThread(ThreadControlBlock*)+0x28>
c001dfa2:	c7 05 64 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x1
c001dfac:	83 c4 08             	add    esp,0x8
c001dfaf:	5b                   	pop    ebx
c001dfb0:	c3                   	ret    
c001dfb1:	90                   	nop

c001dfb2 <Semaphore::Semaphore(int)>:
c001dfb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dfba:	89 10                	mov    DWORD PTR [eax],edx
c001dfbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfc0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001dfc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfcb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfd6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfdd:	90                   	nop
c001dfde:	c3                   	ret    
c001dfdf:	90                   	nop

c001dfe0 <Mutex::Mutex()>:
c001dfe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfe4:	6a 01                	push   0x1
c001dfe6:	50                   	push   eax
c001dfe7:	e8 c6 ff ff ff       	call   c001dfb2 <Semaphore::Semaphore(int)>
c001dfec:	83 c4 08             	add    esp,0x8
c001dfef:	90                   	nop
c001dff0:	c3                   	ret    
c001dff1:	90                   	nop

c001dff2 <Process::createThread(void (*)(void*), void*, int)>:
c001dff2:	55                   	push   ebp
c001dff3:	31 c9                	xor    ecx,ecx
c001dff5:	57                   	push   edi
c001dff6:	56                   	push   esi
c001dff7:	53                   	push   ebx
c001dff8:	83 ec 1c             	sub    esp,0x1c
c001dffb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfff:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e006:	89 f2                	mov    edx,esi
c001e008:	0f b7 c2             	movzx  eax,dx
c001e00b:	83 e2 01             	and    edx,0x1
c001e00e:	74 14                	je     c001e024 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001e010:	d1 f8                	sar    eax,1
c001e012:	41                   	inc    ecx
c001e013:	89 c2                	mov    edx,eax
c001e015:	83 f9 10             	cmp    ecx,0x10
c001e018:	75 ee                	jne    c001e008 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e01a:	83 c4 1c             	add    esp,0x1c
c001e01d:	31 c0                	xor    eax,eax
c001e01f:	5b                   	pop    ebx
c001e020:	5e                   	pop    esi
c001e021:	5f                   	pop    edi
c001e022:	5d                   	pop    ebp
c001e023:	c3                   	ret    
c001e024:	83 ec 08             	sub    esp,0x8
c001e027:	b8 01 00 00 00       	mov    eax,0x1
c001e02c:	d3 e0                	shl    eax,cl
c001e02e:	09 c6                	or     esi,eax
c001e030:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e036:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e03d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e040:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e043:	01 ce                	add    esi,ecx
c001e045:	89 f0                	mov    eax,esi
c001e047:	c1 e0 05             	shl    eax,0x5
c001e04a:	01 c6                	add    esi,eax
c001e04c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e04f:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e055:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e05b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e05f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e065:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e06b:	89 ca                	mov    edx,ecx
c001e06d:	f7 da                	neg    edx
c001e06f:	c1 e2 15             	shl    edx,0x15
c001e072:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e078:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e07e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e082:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e08c:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e092:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e096:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e09c:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e0a6:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e0b0:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e0b7:	50                   	push   eax
c001e0b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e0bc:	68 88 1a 03 c0       	push   0xc0031a88
c001e0c1:	e8 1a ab 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0c6:	83 c4 10             	add    esp,0x10
c001e0c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0cd:	83 c4 1c             	add    esp,0x1c
c001e0d0:	5b                   	pop    ebx
c001e0d1:	5e                   	pop    esi
c001e0d2:	5f                   	pop    edi
c001e0d3:	5d                   	pop    ebp
c001e0d4:	c3                   	ret    
c001e0d5:	90                   	nop

c001e0d6 <Process::createUserThread()>:
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	68 80 00 00 00       	push   0x80
c001e0de:	6a 00                	push   0x0
c001e0e0:	68 c4 de 01 c0       	push   0xc001dec4
c001e0e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0e9:	e8 04 ff ff ff       	call   c001dff2 <Process::createThread(void (*)(void*), void*, int)>
c001e0ee:	83 c4 1c             	add    esp,0x1c
c001e0f1:	c3                   	ret    

c001e0f2 <setupMultitasking(void (*)())>:
c001e0f2:	56                   	push   esi
c001e0f3:	53                   	push   ebx
c001e0f4:	53                   	push   ebx
c001e0f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0f9:	eb 10                	jmp    c001e10b <setupMultitasking(void (*)())+0x19>
c001e0fb:	83 ec 0c             	sub    esp,0xc
c001e0fe:	68 88 1a 03 c0       	push   0xc0031a88
c001e103:	e8 2a aa 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e108:	83 c4 10             	add    esp,0x10
c001e10b:	83 ec 0c             	sub    esp,0xc
c001e10e:	68 88 1a 03 c0       	push   0xc0031a88
c001e113:	e8 fe a9 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e118:	83 c4 10             	add    esp,0x10
c001e11b:	84 c0                	test   al,al
c001e11d:	74 dc                	je     c001e0fb <setupMultitasking(void (*)())+0x9>
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	68 3f 07 00 00       	push   0x73f
c001e127:	e8 17 17 ff ff       	call   c000f843 <malloc>
c001e12c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e133:	89 c3                	mov    ebx,eax
c001e135:	6a 00                	push   0x0
c001e137:	68 f6 c2 02 c0       	push   0xc002c2f6
c001e13c:	6a 01                	push   0x1
c001e13e:	50                   	push   eax
c001e13f:	e8 b0 fb ff ff       	call   c001dcf4 <Process::Process(bool, char const*, Process*, char**)>
c001e144:	83 c4 18             	add    esp,0x18
c001e147:	89 1d 94 1a 03 c0    	mov    DWORD PTR ds:0xc0031a94,ebx
c001e14d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e153:	68 18 c4 02 c0       	push   0xc002c418
c001e158:	e8 c2 4e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e15d:	58                   	pop    eax
c001e15e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e164:	e8 ee 2b ff ff       	call   c0010d57 <setActiveTerminal(VgaText*)>
c001e169:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e171:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e177:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e17a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e184:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e18a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e190:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e19a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e1a4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e1ae:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e1b4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e1ba:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e1c4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e1ca:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1d4:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1da:	5a                   	pop    edx
c001e1db:	59                   	pop    ecx
c001e1dc:	68 f2 c2 02 c0       	push   0xc002c2f2
c001e1e1:	50                   	push   eax
c001e1e2:	e8 4d 26 fe ff       	call   c0000834 <strcpy>
c001e1e7:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1ee:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1f2:	83 c4 14             	add    esp,0x14
c001e1f5:	5b                   	pop    ebx
c001e1f6:	5e                   	pop    esi
c001e1f7:	e9 58 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1fc <schedule()>:
c001e1fc:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001e201:	85 c0                	test   eax,eax
c001e203:	74 0b                	je     c001e210 <schedule()+0x14>
c001e205:	c7 05 64 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x1
c001e20f:	c3                   	ret    
c001e210:	53                   	push   ebx
c001e211:	83 ec 14             	sub    esp,0x14
c001e214:	68 88 1a 03 c0       	push   0xc0031a88
c001e219:	e8 f8 a8 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e21e:	83 c4 10             	add    esp,0x10
c001e221:	84 c0                	test   al,al
c001e223:	75 38                	jne    c001e25d <schedule()+0x61>
c001e225:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e22a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e22d:	4a                   	dec    edx
c001e22e:	74 32                	je     c001e262 <schedule()+0x66>
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	68 88 1a 03 c0       	push   0xc0031a88
c001e238:	e8 d1 a8 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e23d:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e244:	89 c3                	mov    ebx,eax
c001e246:	e8 e7 a8 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e24b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e252:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e255:	e8 07 fd ff ff       	call   c001df61 <switchToThread(ThreadControlBlock*)>
c001e25a:	83 c4 10             	add    esp,0x10
c001e25d:	83 c4 08             	add    esp,0x8
c001e260:	5b                   	pop    ebx
c001e261:	c3                   	ret    
c001e262:	83 ec 08             	sub    esp,0x8
c001e265:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e26c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e272:	68 88 1a 03 c0       	push   0xc0031a88
c001e277:	e8 64 a9 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	eb af                	jmp    c001e230 <schedule()+0x34>

c001e281 <unlockStuff()>:
c001e281:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001e286:	48                   	dec    eax
c001e287:	a3 68 1a 03 c0       	mov    ds:0xc0031a68,eax
c001e28c:	75 09                	jne    c001e297 <unlockStuff()+0x16>
c001e28e:	a1 64 1a 03 c0       	mov    eax,ds:0xc0031a64
c001e293:	85 c0                	test   eax,eax
c001e295:	75 05                	jne    c001e29c <unlockStuff()+0x1b>
c001e297:	e9 15 fc ff ff       	jmp    c001deb1 <enableIRQs()>
c001e29c:	83 ec 0c             	sub    esp,0xc
c001e29f:	c7 05 64 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x0
c001e2a9:	e8 4e ff ff ff       	call   c001e1fc <schedule()>
c001e2ae:	83 c4 0c             	add    esp,0xc
c001e2b1:	e9 fb fb ff ff       	jmp    c001deb1 <enableIRQs()>

c001e2b6 <Semaphore::tryAcquire()>:
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bd:	e8 25 fc ff ff       	call   c001dee7 <lockStuff()>
c001e2c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e2c5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e2c7:	7c 0b                	jl     c001e2d4 <Semaphore::tryAcquire()+0x1e>
c001e2c9:	e8 b3 ff ff ff       	call   c001e281 <unlockStuff()>
c001e2ce:	31 c0                	xor    eax,eax
c001e2d0:	83 c4 0c             	add    esp,0xc
c001e2d3:	c3                   	ret    
c001e2d4:	42                   	inc    edx
c001e2d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2d8:	e8 a4 ff ff ff       	call   c001e281 <unlockStuff()>
c001e2dd:	b0 01                	mov    al,0x1
c001e2df:	83 c4 0c             	add    esp,0xc
c001e2e2:	c3                   	ret    
c001e2e3:	90                   	nop

c001e2e4 <Semaphore::assertLocked(char const*)>:
c001e2e4:	83 ec 0c             	sub    esp,0xc
c001e2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2ef:	e8 f3 fb ff ff       	call   c001dee7 <lockStuff()>
c001e2f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2f6:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2f9:	7c 05                	jl     c001e300 <Semaphore::assertLocked(char const*)+0x1c>
c001e2fb:	83 c4 0c             	add    esp,0xc
c001e2fe:	eb 81                	jmp    c001e281 <unlockStuff()>
c001e300:	83 ec 0c             	sub    esp,0xc
c001e303:	52                   	push   edx
c001e304:	e8 c4 c3 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001e309:	83 c4 10             	add    esp,0x10
c001e30c:	83 c4 0c             	add    esp,0xc
c001e30f:	e9 6d ff ff ff       	jmp    c001e281 <unlockStuff()>

c001e314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e314:	83 ec 0c             	sub    esp,0xc
c001e317:	e8 8f fb ff ff       	call   c001deab <getIRQNestingLevel()>
c001e31c:	83 ec 08             	sub    esp,0x8
c001e31f:	50                   	push   eax
c001e320:	68 4c c4 02 c0       	push   0xc002c44c
c001e325:	e8 f5 4c ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e32a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e32e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e333:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e336:	e8 c1 fe ff ff       	call   c001e1fc <schedule()>
c001e33b:	e8 82 fb ff ff       	call   c001dec2 <unlockScheduler()>
c001e340:	e8 66 fb ff ff       	call   c001deab <getIRQNestingLevel()>
c001e345:	5a                   	pop    edx
c001e346:	59                   	pop    ecx
c001e347:	50                   	push   eax
c001e348:	68 80 c4 02 c0       	push   0xc002c480
c001e34d:	e8 cd 4c ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e352:	83 c4 1c             	add    esp,0x1c
c001e355:	c3                   	ret    

c001e356 <blockTask(TaskState)>:
c001e356:	83 ec 0c             	sub    esp,0xc
c001e359:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e35d:	e8 5e fb ff ff       	call   c001dec0 <lockScheduler()>
c001e362:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e367:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e36a:	e8 8d fe ff ff       	call   c001e1fc <schedule()>
c001e36f:	83 c4 0c             	add    esp,0xc
c001e372:	e9 4b fb ff ff       	jmp    c001dec2 <unlockScheduler()>

c001e377 <waitTask(int, int*, int)>:
c001e377:	83 ec 18             	sub    esp,0x18
c001e37a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e37f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e383:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e386:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e38a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e38f:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e392:	6a 07                	push   0x7
c001e394:	e8 bd ff ff ff       	call   c001e356 <blockTask(TaskState)>
c001e399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e39e:	83 c4 10             	add    esp,0x10
c001e3a1:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e3a4:	85 d2                	test   edx,edx
c001e3a6:	74 0a                	je     c001e3b2 <waitTask(int, int*, int)+0x3b>
c001e3a8:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e3ab:	89 02                	mov    DWORD PTR [edx],eax
c001e3ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3b2:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e3b5:	83 c4 0c             	add    esp,0xc
c001e3b8:	c3                   	ret    

c001e3b9 <nanoSleepUntil(unsigned long long)>:
c001e3b9:	83 ec 0c             	sub    esp,0xc
c001e3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3c4:	3b 05 b0 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002ebb0
c001e3ca:	89 d1                	mov    ecx,edx
c001e3cc:	1b 0d b4 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ebb4
c001e3d2:	73 04                	jae    c001e3d8 <nanoSleepUntil(unsigned long long)+0x1f>
c001e3d4:	83 c4 0c             	add    esp,0xc
c001e3d7:	c3                   	ret    
c001e3d8:	e8 0a fb ff ff       	call   c001dee7 <lockStuff()>
c001e3dd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3e3:	83 ec 08             	sub    esp,0x8
c001e3e6:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3e9:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3ec:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3f2:	68 7c 1a 03 c0       	push   0xc0031a7c
c001e3f7:	e8 e4 a7 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3fc:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e403:	e8 4e ff ff ff       	call   c001e356 <blockTask(TaskState)>
c001e408:	83 c4 1c             	add    esp,0x1c
c001e40b:	e9 71 fe ff ff       	jmp    c001e281 <unlockStuff()>

c001e410 <nanoSleep(unsigned long long)>:
c001e410:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c001e415:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c001e41b:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e41f:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e423:	eb 94                	jmp    c001e3b9 <nanoSleepUntil(unsigned long long)>

c001e425 <sleep(unsigned long long)>:
c001e425:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e42d:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e432:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e436:	01 ca                	add    edx,ecx
c001e438:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e43c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e440:	eb ce                	jmp    c001e410 <nanoSleep(unsigned long long)>

c001e442 <Semaphore::acquire()>:
c001e442:	83 ec 0c             	sub    esp,0xc
c001e445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e449:	e8 99 fa ff ff       	call   c001dee7 <lockStuff()>
c001e44e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e451:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e453:	7d 0c                	jge    c001e461 <Semaphore::acquire()+0x1f>
c001e455:	42                   	inc    edx
c001e456:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e459:	83 c4 0c             	add    esp,0xc
c001e45c:	e9 20 fe ff ff       	jmp    c001e281 <unlockStuff()>
c001e461:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e467:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e46e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e471:	85 d2                	test   edx,edx
c001e473:	74 2a                	je     c001e49f <Semaphore::acquire()+0x5d>
c001e475:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e478:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e47e:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e481:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e487:	83 ec 0c             	sub    esp,0xc
c001e48a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e48d:	6a 05                	push   0x5
c001e48f:	e8 c2 fe ff ff       	call   c001e356 <blockTask(TaskState)>
c001e494:	83 c4 10             	add    esp,0x10
c001e497:	83 c4 0c             	add    esp,0xc
c001e49a:	e9 e2 fd ff ff       	jmp    c001e281 <unlockStuff()>
c001e49f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4a8:	eb d7                	jmp    c001e481 <Semaphore::acquire()+0x3f>

c001e4aa <taskReturned>:
c001e4aa:	83 ec 18             	sub    esp,0x18
c001e4ad:	68 b4 c4 02 c0       	push   0xc002c4b4
c001e4b2:	e8 16 c2 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001e4b7:	83 c4 10             	add    esp,0x10
c001e4ba:	83 ec 0c             	sub    esp,0xc
c001e4bd:	6a 02                	push   0x2
c001e4bf:	e8 92 fe ff ff       	call   c001e356 <blockTask(TaskState)>
c001e4c4:	e8 f7 f9 ff ff       	call   c001dec0 <lockScheduler()>
c001e4c9:	e8 2e fd ff ff       	call   c001e1fc <schedule()>
c001e4ce:	e8 ef f9 ff ff       	call   c001dec2 <unlockScheduler()>
c001e4d3:	83 c4 10             	add    esp,0x10
c001e4d6:	eb e2                	jmp    c001e4ba <taskReturned+0x10>

c001e4d8 <unblockTask(ThreadControlBlock*)>:
c001e4d8:	53                   	push   ebx
c001e4d9:	83 ec 08             	sub    esp,0x8
c001e4dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4e0:	e8 db f9 ff ff       	call   c001dec0 <lockScheduler()>
c001e4e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4e8:	85 c0                	test   eax,eax
c001e4ea:	74 5c                	je     c001e548 <unblockTask(ThreadControlBlock*)+0x70>
c001e4ec:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4ef:	48                   	dec    eax
c001e4f0:	74 31                	je     c001e523 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4f2:	83 ec 0c             	sub    esp,0xc
c001e4f5:	68 88 1a 03 c0       	push   0xc0031a88
c001e4fa:	e8 0f a6 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4ff:	83 c4 10             	add    esp,0x10
c001e502:	85 c0                	test   eax,eax
c001e504:	75 17                	jne    c001e51d <unblockTask(ThreadControlBlock*)+0x45>
c001e506:	eb 65                	jmp    c001e56d <unblockTask(ThreadControlBlock*)+0x95>
c001e508:	83 ec 08             	sub    esp,0x8
c001e50b:	50                   	push   eax
c001e50c:	68 88 1a 03 c0       	push   0xc0031a88
c001e511:	e8 d2 a8 00 00       	call   c0028de8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e516:	83 c4 10             	add    esp,0x10
c001e519:	85 c0                	test   eax,eax
c001e51b:	74 50                	je     c001e56d <unblockTask(ThreadControlBlock*)+0x95>
c001e51d:	39 c3                	cmp    ebx,eax
c001e51f:	75 e7                	jne    c001e508 <unblockTask(ThreadControlBlock*)+0x30>
c001e521:	eb 1c                	jmp    c001e53f <unblockTask(ThreadControlBlock*)+0x67>
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	68 a4 c5 02 c0       	push   0xc002c5a4
c001e52b:	e8 ef 4a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e530:	c7 04 24 30 c5 02 c0 	mov    DWORD PTR [esp],0xc002c530
c001e537:	e8 e3 4a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e53c:	83 c4 10             	add    esp,0x10
c001e53f:	83 c4 08             	add    esp,0x8
c001e542:	5b                   	pop    ebx
c001e543:	e9 7a f9 ff ff       	jmp    c001dec2 <unlockScheduler()>
c001e548:	83 ec 0c             	sub    esp,0xc
c001e54b:	68 e8 c4 02 c0       	push   0xc002c4e8
c001e550:	e8 ca 4a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e555:	c7 04 24 30 c5 02 c0 	mov    DWORD PTR [esp],0xc002c530
c001e55c:	e8 be 4a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e561:	83 c4 10             	add    esp,0x10
c001e564:	83 c4 08             	add    esp,0x8
c001e567:	5b                   	pop    ebx
c001e568:	e9 55 f9 ff ff       	jmp    c001dec2 <unlockScheduler()>
c001e56d:	83 ec 08             	sub    esp,0x8
c001e570:	53                   	push   ebx
c001e571:	68 88 1a 03 c0       	push   0xc0031a88
c001e576:	e8 65 a6 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e57b:	83 c4 10             	add    esp,0x10
c001e57e:	83 c4 08             	add    esp,0x8
c001e581:	5b                   	pop    ebx
c001e582:	e9 3b f9 ff ff       	jmp    c001dec2 <unlockScheduler()>

c001e587 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e587:	55                   	push   ebp
c001e588:	57                   	push   edi
c001e589:	56                   	push   esi
c001e58a:	53                   	push   ebx
c001e58b:	83 ec 1c             	sub    esp,0x1c
c001e58e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e592:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e595:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e59b:	85 ff                	test   edi,edi
c001e59d:	7e 20                	jle    c001e5bf <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e59f:	31 f6                	xor    esi,esi
c001e5a1:	83 ec 0c             	sub    esp,0xc
c001e5a4:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5ab:	46                   	inc    esi
c001e5ac:	e8 a2 12 ff ff       	call   c000f853 <free>
c001e5b1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5b4:	83 c4 10             	add    esp,0x10
c001e5b7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e5bd:	7f e2                	jg     c001e5a1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e5bf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e5c9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5ce:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5d1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5d4:	d3 c0                	rol    eax,cl
c001e5d6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5dd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e0:	89 f7                	mov    edi,esi
c001e5e2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5ea:	0f 85 74 01 00 00    	jne    c001e764 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5f0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5f6:	85 ed                	test   ebp,ebp
c001e5f8:	74 1b                	je     c001e615 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5fa:	83 ec 0c             	sub    esp,0xc
c001e5fd:	55                   	push   ebp
c001e5fe:	e8 37 be ff ff       	call   c001a43a <EnvVarContainer::~EnvVarContainer()>
c001e603:	59                   	pop    ecx
c001e604:	5e                   	pop    esi
c001e605:	6a 0c                	push   0xc
c001e607:	55                   	push   ebp
c001e608:	e8 32 49 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c001e60d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e610:	83 c4 10             	add    esp,0x10
c001e613:	89 f7                	mov    edi,esi
c001e615:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e61b:	85 c0                	test   eax,eax
c001e61d:	0f 84 aa 00 00 00    	je     c001e6cd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e623:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e626:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e62a:	31 c9                	xor    ecx,ecx
c001e62c:	eb 10                	jmp    c001e63e <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e62e:	41                   	inc    ecx
c001e62f:	83 f9 10             	cmp    ecx,0x10
c001e632:	0f 84 95 00 00 00    	je     c001e6cd <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e638:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e63e:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e645:	d3 fa                	sar    edx,cl
c001e647:	83 e2 01             	and    edx,0x1
c001e64a:	74 e2                	je     c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e64c:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e64f:	01 ca                	add    edx,ecx
c001e651:	89 d5                	mov    ebp,edx
c001e653:	c1 e5 05             	shl    ebp,0x5
c001e656:	01 ea                	add    edx,ebp
c001e658:	01 d0                	add    eax,edx
c001e65a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e660:	83 fd 07             	cmp    ebp,0x7
c001e663:	75 c9                	jne    c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e665:	05 40 02 00 00       	add    eax,0x240
c001e66a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e66d:	83 fd ff             	cmp    ebp,0xffffffff
c001e670:	0f 8c 08 01 00 00    	jl     c001e77e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e676:	0f 84 b9 01 00 00    	je     c001e835 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e67c:	85 ed                	test   ebp,ebp
c001e67e:	0f 84 a0 01 00 00    	je     c001e824 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e684:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e686:	75 a6                	jne    c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e688:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e68e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e692:	01 d0                	add    eax,edx
c001e694:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e698:	83 ec 0c             	sub    esp,0xc
c001e69b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e6a1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6a4:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6aa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6b1:	50                   	push   eax
c001e6b2:	e8 21 fe ff ff       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6c1:	89 f7                	mov    edi,esi
c001e6c3:	41                   	inc    ecx
c001e6c4:	83 f9 10             	cmp    ecx,0x10
c001e6c7:	0f 85 6b ff ff ff    	jne    c001e638 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e6cd:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6d3:	85 c0                	test   eax,eax
c001e6d5:	74 5d                	je     c001e734 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6d7:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6dd:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6e3:	74 4f                	je     c001e734 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6e5:	83 ec 0c             	sub    esp,0xc
c001e6e8:	68 88 1a 03 c0       	push   0xc0031a88
c001e6ed:	e8 1c a4 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6f2:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e6f9:	89 c7                	mov    edi,eax
c001e6fb:	e8 16 a4 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e700:	83 c4 10             	add    esp,0x10
c001e703:	84 c0                	test   al,al
c001e705:	0f 84 e4 00 00 00    	je     c001e7ef <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e70b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e70e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e714:	85 d2                	test   edx,edx
c001e716:	74 0f                	je     c001e727 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e718:	83 ec 0c             	sub    esp,0xc
c001e71b:	8b 02                	mov    eax,DWORD PTR [edx]
c001e71d:	52                   	push   edx
c001e71e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e721:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e724:	83 c4 10             	add    esp,0x10
c001e727:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e731:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e734:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e73a:	85 db                	test   ebx,ebx
c001e73c:	74 16                	je     c001e754 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e73e:	83 ec 0c             	sub    esp,0xc
c001e741:	53                   	push   ebx
c001e742:	e8 c9 3a ff ff       	call   c0012210 <VAS::~VAS()>
c001e747:	58                   	pop    eax
c001e748:	5a                   	pop    edx
c001e749:	6a 10                	push   0x10
c001e74b:	53                   	push   ebx
c001e74c:	e8 ee 47 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c001e751:	83 c4 10             	add    esp,0x10
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 fd c2 02 c0       	push   0xc002c2fd
c001e75c:	e8 be 48 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e761:	83 c4 10             	add    esp,0x10
c001e764:	83 ec 08             	sub    esp,0x8
c001e767:	68 3f 07 00 00       	push   0x73f
c001e76c:	68 0b c3 02 c0       	push   0xc002c30b
c001e771:	e8 a9 48 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e776:	83 c4 2c             	add    esp,0x2c
c001e779:	5b                   	pop    ebx
c001e77a:	5e                   	pop    esi
c001e77b:	5f                   	pop    edi
c001e77c:	5d                   	pop    ebp
c001e77d:	c3                   	ret    
c001e77e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e782:	83 ec 0c             	sub    esp,0xc
c001e785:	68 e8 c5 02 c0       	push   0xc002c5e8
c001e78a:	e8 3e bf ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001e78f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e792:	83 c4 10             	add    esp,0x10
c001e795:	89 f7                	mov    edi,esi
c001e797:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e79b:	e9 8e fe ff ff       	jmp    c001e62e <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7a0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7a6:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7ac:	75 1c                	jne    c001e7ca <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7ae:	83 ec 0c             	sub    esp,0xc
c001e7b1:	68 50 c6 02 c0       	push   0xc002c650
c001e7b6:	e8 64 48 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e7bb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e7c2:	e8 8f fb ff ff       	call   c001e356 <blockTask(TaskState)>
c001e7c7:	83 c4 10             	add    esp,0x10
c001e7ca:	83 ec 08             	sub    esp,0x8
c001e7cd:	56                   	push   esi
c001e7ce:	68 88 1a 03 c0       	push   0xc0031a88
c001e7d3:	e8 08 a4 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7d8:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e7df:	e8 2a a3 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7e4:	83 c4 10             	add    esp,0x10
c001e7e7:	39 f8                	cmp    eax,edi
c001e7e9:	0f 84 1c ff ff ff    	je     c001e70b <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7ef:	83 ec 0c             	sub    esp,0xc
c001e7f2:	68 88 1a 03 c0       	push   0xc0031a88
c001e7f7:	e8 12 a3 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7fc:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e803:	89 c6                	mov    esi,eax
c001e805:	e8 28 a3 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e80a:	83 c4 10             	add    esp,0x10
c001e80d:	39 f3                	cmp    ebx,esi
c001e80f:	74 b9                	je     c001e7ca <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e811:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e814:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e817:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e81d:	75 ab                	jne    c001e7ca <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e81f:	e9 7c ff ff ff       	jmp    c001e7a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e824:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	68 1c c6 02 c0       	push   0xc002c61c
c001e830:	e9 55 ff ff ff       	jmp    c001e78a <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e835:	8b 36                	mov    esi,DWORD PTR [esi]
c001e837:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e83b:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e83e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e841:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e847:	01 d7                	add    edi,edx
c001e849:	89 f8                	mov    eax,edi
c001e84b:	e9 44 fe ff ff       	jmp    c001e694 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e850 <cleanerTaskFunction(void*)>:
c001e850:	53                   	push   ebx
c001e851:	83 ec 08             	sub    esp,0x8
c001e854:	e8 69 f6 ff ff       	call   c001dec2 <unlockScheduler()>
c001e859:	e8 62 f6 ff ff       	call   c001dec0 <lockScheduler()>
c001e85e:	80 3d 4c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a4c,0x0
c001e865:	0f 85 8e 00 00 00    	jne    c001e8f9 <cleanerTaskFunction(void*)+0xa9>
c001e86b:	83 ec 0c             	sub    esp,0xc
c001e86e:	6a 02                	push   0x2
c001e870:	e8 9f fa ff ff       	call   c001e314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e875:	83 c4 10             	add    esp,0x10
c001e878:	c6 05 4c 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a4c,0x0
c001e87f:	e8 63 f6 ff ff       	call   c001dee7 <lockStuff()>
c001e884:	e8 37 f6 ff ff       	call   c001dec0 <lockScheduler()>
c001e889:	83 ec 0c             	sub    esp,0xc
c001e88c:	68 70 1a 03 c0       	push   0xc0031a70
c001e891:	e8 80 a2 00 00       	call   c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e896:	83 c4 10             	add    esp,0x10
c001e899:	84 c0                	test   al,al
c001e89b:	75 40                	jne    c001e8dd <cleanerTaskFunction(void*)+0x8d>
c001e89d:	83 ec 0c             	sub    esp,0xc
c001e8a0:	68 70 1a 03 c0       	push   0xc0031a70
c001e8a5:	e8 64 a2 00 00       	call   c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8aa:	c7 04 24 70 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a70
c001e8b1:	89 c3                	mov    ebx,eax
c001e8b3:	e8 7a a2 00 00       	call   c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8b8:	c7 04 24 21 c3 02 c0 	mov    DWORD PTR [esp],0xc002c321
c001e8bf:	e8 5b 47 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e8c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e8c7:	e8 bb fc ff ff       	call   c001e587 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e8cc:	c7 04 24 3a c3 02 c0 	mov    DWORD PTR [esp],0xc002c33a
c001e8d3:	e8 47 47 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e8d8:	83 c4 10             	add    esp,0x10
c001e8db:	eb ac                	jmp    c001e889 <cleanerTaskFunction(void*)+0x39>
c001e8dd:	e8 e0 f5 ff ff       	call   c001dec2 <unlockScheduler()>
c001e8e2:	e8 9a f9 ff ff       	call   c001e281 <unlockStuff()>
c001e8e7:	e8 d4 f5 ff ff       	call   c001dec0 <lockScheduler()>
c001e8ec:	80 3d 4c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a4c,0x0
c001e8f3:	0f 84 72 ff ff ff    	je     c001e86b <cleanerTaskFunction(void*)+0x1b>
c001e8f9:	e8 c4 f5 ff ff       	call   c001dec2 <unlockScheduler()>
c001e8fe:	e9 75 ff ff ff       	jmp    c001e878 <cleanerTaskFunction(void*)+0x28>

c001e903 <terminateTask(int)>:
c001e903:	83 ec 14             	sub    esp,0x14
c001e906:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e90b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e90e:	83 c0 0c             	add    eax,0xc
c001e911:	50                   	push   eax
c001e912:	68 78 c6 02 c0       	push   0xc002c678
c001e917:	e8 03 47 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e91c:	e8 c6 f5 ff ff       	call   c001dee7 <lockStuff()>
c001e921:	e8 9a f5 ff ff       	call   c001dec0 <lockScheduler()>
c001e926:	c7 04 24 4d c3 02 c0 	mov    DWORD PTR [esp],0xc002c34d
c001e92d:	e8 ed 46 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e932:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e936:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e93b:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e93e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e943:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e946:	5a                   	pop    edx
c001e947:	59                   	pop    ecx
c001e948:	50                   	push   eax
c001e949:	68 70 1a 03 c0       	push   0xc0031a70
c001e94e:	e8 8d a2 00 00       	call   c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e958:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e95f:	c7 04 24 67 c3 02 c0 	mov    DWORD PTR [esp],0xc002c367
c001e966:	e8 b4 46 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e96b:	83 c4 10             	add    esp,0x10
c001e96e:	a1 48 1a 03 c0       	mov    eax,ds:0xc0031a48
c001e973:	85 c0                	test   eax,eax
c001e975:	74 5a                	je     c001e9d1 <terminateTask(int)+0xce>
c001e977:	83 ec 0c             	sub    esp,0xc
c001e97a:	68 81 c3 02 c0       	push   0xc002c381
c001e97f:	e8 9b 46 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e984:	58                   	pop    eax
c001e985:	c6 05 4c 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a4c,0x1
c001e98c:	ff 35 48 1a 03 c0    	push   DWORD PTR ds:0xc0031a48
c001e992:	e8 41 fb ff ff       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c001e997:	c7 04 24 9b c3 02 c0 	mov    DWORD PTR [esp],0xc002c39b
c001e99e:	e8 7c 46 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	e8 17 f5 ff ff       	call   c001dec2 <unlockScheduler()>
c001e9ab:	e8 d1 f8 ff ff       	call   c001e281 <unlockStuff()>
c001e9b0:	83 ec 0c             	sub    esp,0xc
c001e9b3:	68 d3 c3 02 c0       	push   0xc002c3d3
c001e9b8:	e8 62 46 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	e8 fb f4 ff ff       	call   c001dec0 <lockScheduler()>
c001e9c5:	e8 32 f8 ff ff       	call   c001e1fc <schedule()>
c001e9ca:	e8 f3 f4 ff ff       	call   c001dec2 <unlockScheduler()>
c001e9cf:	eb ef                	jmp    c001e9c0 <terminateTask(int)+0xbd>
c001e9d1:	83 ec 0c             	sub    esp,0xc
c001e9d4:	68 b5 c3 02 c0       	push   0xc002c3b5
c001e9d9:	e8 41 46 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001e9de:	83 c4 10             	add    esp,0x10
c001e9e1:	eb c3                	jmp    c001e9a6 <terminateTask(int)+0xa3>

c001e9e3 <Thr::terminateFromIRQ(int)>:
c001e9e3:	83 ec 18             	sub    esp,0x18
c001e9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ea:	e8 14 ff ff ff       	call   c001e903 <terminateTask(int)>
c001e9ef:	90                   	nop

c001e9f0 <Semaphore::release()>:
c001e9f0:	83 ec 0c             	sub    esp,0xc
c001e9f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f7:	e8 eb f4 ff ff       	call   c001dee7 <lockStuff()>
c001e9fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9ff:	85 d2                	test   edx,edx
c001ea01:	74 1a                	je     c001ea1d <Semaphore::release()+0x2d>
c001ea03:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001ea06:	83 ec 0c             	sub    esp,0xc
c001ea09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ea0c:	52                   	push   edx
c001ea0d:	e8 c6 fa ff ff       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c001ea12:	83 c4 10             	add    esp,0x10
c001ea15:	83 c4 0c             	add    esp,0xc
c001ea18:	e9 64 f8 ff ff       	jmp    c001e281 <unlockStuff()>
c001ea1d:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001ea20:	83 c4 0c             	add    esp,0xc
c001ea23:	e9 59 f8 ff ff       	jmp    c001e281 <unlockStuff()>

c001ea28 <__static_initialization_and_destruction_0(int, int)>:
c001ea28:	83 ec 0c             	sub    esp,0xc
c001ea2b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea30:	0f 85 88 00 00 00    	jne    c001eabe <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea36:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea3e:	75 7e                	jne    c001eabe <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea40:	83 ec 0c             	sub    esp,0xc
c001ea43:	68 88 1a 03 c0       	push   0xc0031a88
c001ea48:	e8 43 a3 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea4d:	83 c4 10             	add    esp,0x10
c001ea50:	83 ec 04             	sub    esp,0x4
c001ea53:	68 30 d4 02 c0       	push   0xc002d430
c001ea58:	68 88 1a 03 c0       	push   0xc0031a88
c001ea5d:	68 50 8d 02 c0       	push   0xc0028d50
c001ea62:	e8 52 44 ff ff       	call   c0012eb9 <__cxa_atexit>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	83 ec 0c             	sub    esp,0xc
c001ea6d:	68 7c 1a 03 c0       	push   0xc0031a7c
c001ea72:	e8 19 a3 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea77:	83 c4 10             	add    esp,0x10
c001ea7a:	83 ec 04             	sub    esp,0x4
c001ea7d:	68 30 d4 02 c0       	push   0xc002d430
c001ea82:	68 7c 1a 03 c0       	push   0xc0031a7c
c001ea87:	68 50 8d 02 c0       	push   0xc0028d50
c001ea8c:	e8 28 44 ff ff       	call   c0012eb9 <__cxa_atexit>
c001ea91:	83 c4 10             	add    esp,0x10
c001ea94:	83 ec 0c             	sub    esp,0xc
c001ea97:	68 70 1a 03 c0       	push   0xc0031a70
c001ea9c:	e8 ef a2 00 00       	call   c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eaa1:	83 c4 10             	add    esp,0x10
c001eaa4:	83 ec 04             	sub    esp,0x4
c001eaa7:	68 30 d4 02 c0       	push   0xc002d430
c001eaac:	68 70 1a 03 c0       	push   0xc0031a70
c001eab1:	68 50 8d 02 c0       	push   0xc0028d50
c001eab6:	e8 fe 43 ff ff       	call   c0012eb9 <__cxa_atexit>
c001eabb:	83 c4 10             	add    esp,0x10
c001eabe:	90                   	nop
c001eabf:	83 c4 0c             	add    esp,0xc
c001eac2:	c3                   	ret    

c001eac3 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001eac3:	83 ec 0c             	sub    esp,0xc
c001eac6:	83 ec 08             	sub    esp,0x8
c001eac9:	68 ff ff 00 00       	push   0xffff
c001eace:	6a 01                	push   0x1
c001ead0:	e8 53 ff ff ff       	call   c001ea28 <__static_initialization_and_destruction_0(int, int)>
c001ead5:	83 c4 10             	add    esp,0x10
c001ead8:	83 c4 0c             	add    esp,0xc
c001eadb:	c3                   	ret    

c001eadc <Vm::inbv(unsigned short)>:
c001eadc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eae0:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eae5:	75 06                	jne    c001eaed <Vm::inbv(unsigned short)+0x11>
c001eae7:	a0 cc 1a 03 c0       	mov    al,ds:0xc0031acc
c001eaec:	c3                   	ret    
c001eaed:	ec                   	in     al,dx
c001eaee:	c3                   	ret    

c001eaef <Vm::outbv(unsigned short, unsigned char)>:
c001eaef:	53                   	push   ebx
c001eaf0:	83 ec 08             	sub    esp,0x8
c001eaf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaf7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eafb:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eb00:	75 38                	jne    c001eb3a <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001eb02:	0f b6 c3             	movzx  eax,bl
c001eb05:	51                   	push   ecx
c001eb06:	51                   	push   ecx
c001eb07:	50                   	push   eax
c001eb08:	68 97 c6 02 c0       	push   0xc002c697
c001eb0d:	e8 0d 45 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001eb12:	8b 15 cc 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031acc
c001eb18:	83 c4 10             	add    esp,0x10
c001eb1b:	8d 42 01             	lea    eax,[edx+0x1]
c001eb1e:	88 9a e0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce520],bl
c001eb24:	a3 cc 1a 03 c0       	mov    ds:0xc0031acc,eax
c001eb29:	83 f8 20             	cmp    eax,0x20
c001eb2c:	75 0f                	jne    c001eb3d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb2e:	c7 05 cc 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x1f
c001eb38:	eb 03                	jmp    c001eb3d <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb3a:	88 d8                	mov    al,bl
c001eb3c:	ee                   	out    dx,al
c001eb3d:	83 c4 08             	add    esp,0x8
c001eb40:	5b                   	pop    ebx
c001eb41:	c3                   	ret    

c001eb42 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb4c:	c1 e0 04             	shl    eax,0x4
c001eb4f:	01 d0                	add    eax,edx
c001eb51:	c3                   	ret    

c001eb52 <Vm::getSegment(unsigned int)>:
c001eb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb56:	c1 e8 10             	shr    eax,0x10
c001eb59:	c3                   	ret    

c001eb5a <Vm::getOffset(unsigned int)>:
c001eb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb5e:	c3                   	ret    

c001eb5f <Vm::mainloop2()>:
c001eb5f:	83 ec 0c             	sub    esp,0xc
c001eb62:	e8 59 f3 ff ff       	call   c001dec0 <lockScheduler()>
c001eb67:	83 ec 0c             	sub    esp,0xc
c001eb6a:	c6 05 c5 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac5,0x1
c001eb71:	6a 02                	push   0x2
c001eb73:	e8 9c f7 ff ff       	call   c001e314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb7d:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb81:	52                   	push   edx
c001eb82:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb86:	52                   	push   edx
c001eb87:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb8b:	52                   	push   edx
c001eb8c:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb90:	50                   	push   eax
c001eb91:	e8 64 17 fe ff       	call   c00002fa <goToVM86>
c001eb96:	83 c4 2c             	add    esp,0x2c
c001eb99:	c3                   	ret    

c001eb9a <Vm::mainVm8086Loop(void*)>:
c001eb9a:	83 ec 0c             	sub    esp,0xc
c001eb9d:	e8 20 f3 ff ff       	call   c001dec2 <unlockScheduler()>
c001eba2:	83 c4 0c             	add    esp,0xc
c001eba5:	eb b8                	jmp    c001eb5f <Vm::mainloop2()>

c001eba7 <Vm::mainloop3(unsigned long)>:
c001eba7:	53                   	push   ebx
c001eba8:	83 ec 08             	sub    esp,0x8
c001ebab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ebaf:	e8 0c f3 ff ff       	call   c001dec0 <lockScheduler()>
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	89 1d c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,ebx
c001ebbd:	6a 02                	push   0x2
c001ebbf:	c6 05 c4 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac4,0x1
c001ebc6:	e8 49 f7 ff ff       	call   c001e314 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ebcb:	83 c4 18             	add    esp,0x18
c001ebce:	5b                   	pop    ebx
c001ebcf:	eb 8e                	jmp    c001eb5f <Vm::mainloop2()>

c001ebd1 <Vm::initialise8086()>:
c001ebd1:	83 ec 0c             	sub    esp,0xc
c001ebd4:	68 80 00 00 00       	push   0x80
c001ebd9:	6a 00                	push   0x0
c001ebdb:	68 9a eb 01 c0       	push   0xc001eb9a
c001ebe0:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001ebe6:	e8 07 f4 ff ff       	call   c001dff2 <Process::createThread(void (*)(void*), void*, int)>
c001ebeb:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebf2:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c001ebf7:	68 00 01 00 00       	push   0x100
c001ebfc:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001ec01:	6a 00                	push   0x0
c001ec03:	6a 00                	push   0x0
c001ec05:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ec0b:	e8 60 3a ff ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec10:	83 c4 2c             	add    esp,0x2c
c001ec13:	c3                   	ret    

c001ec14 <Vm::finish8086()>:
c001ec14:	53                   	push   ebx
c001ec15:	83 ec 08             	sub    esp,0x8
c001ec18:	e8 a3 f2 ff ff       	call   c001dec0 <lockScheduler()>
c001ec1d:	80 3d c4 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031ac4,0x0
c001ec24:	75 0c                	jne    c001ec32 <Vm::finish8086()+0x1e>
c001ec26:	e8 d1 f5 ff ff       	call   c001e1fc <schedule()>
c001ec2b:	e8 92 f2 ff ff       	call   c001dec2 <unlockScheduler()>
c001ec30:	eb e6                	jmp    c001ec18 <Vm::finish8086()+0x4>
c001ec32:	83 ec 0c             	sub    esp,0xc
c001ec35:	8b 1d c0 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ac0
c001ec3b:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001ec41:	c6 05 c4 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031ac4,0x0
c001ec48:	e8 8b f8 ff ff       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c001ec4d:	e8 70 f2 ff ff       	call   c001dec2 <unlockScheduler()>
c001ec52:	89 d8                	mov    eax,ebx
c001ec54:	83 c4 18             	add    esp,0x18
c001ec57:	5b                   	pop    ebx
c001ec58:	c3                   	ret    

c001ec59 <Vm::getOutput8086(unsigned char*)>:
c001ec59:	83 ec 10             	sub    esp,0x10
c001ec5c:	ff 35 cc 1a 03 c0    	push   DWORD PTR ds:0xc0031acc
c001ec62:	68 e0 1a 03 c0       	push   0xc0031ae0
c001ec67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec6b:	e8 d4 1a fe ff       	call   c0000744 <memcpy>
c001ec70:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001ec75:	c7 05 cc 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x0
c001ec7f:	83 c4 1c             	add    esp,0x1c
c001ec82:	c3                   	ret    

c001ec83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec83:	55                   	push   ebp
c001ec84:	57                   	push   edi
c001ec85:	56                   	push   esi
c001ec86:	53                   	push   ebx
c001ec87:	83 ec 2c             	sub    esp,0x2c
c001ec8a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec8e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec92:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec96:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec9a:	e8 21 f2 ff ff       	call   c001dec0 <lockScheduler()>
c001ec9f:	a0 c5 1a 03 c0       	mov    al,ds:0xc0031ac5
c001eca4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001eca8:	84 c0                	test   al,al
c001ecaa:	75 0c                	jne    c001ecb8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ecac:	e8 4b f5 ff ff       	call   c001e1fc <schedule()>
c001ecb1:	e8 0c f2 ff ff       	call   c001dec2 <unlockScheduler()>
c001ecb6:	eb e2                	jmp    c001ec9a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ecb8:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001ecbd:	c7 05 cc 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x0
c001ecc7:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001eccb:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eccf:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001ecd3:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001ecd7:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecdb:	50                   	push   eax
c001ecdc:	6a 20                	push   0x20
c001ecde:	6a 00                	push   0x0
c001ece0:	68 e0 1a 03 c0       	push   0xc0031ae0
c001ece5:	e8 8e 1a fe ff       	call   c0000778 <memset>
c001ecea:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecf1:	e8 4d 0b ff ff       	call   c000f843 <malloc>
c001ecf6:	83 c4 0c             	add    esp,0xc
c001ecf9:	89 c7                	mov    edi,eax
c001ecfb:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001ed01:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ed05:	50                   	push   eax
c001ed06:	e8 6d 48 ff ff       	call   c0013578 <File::File(char const*, Process*)>
c001ed0b:	83 c4 10             	add    esp,0x10
c001ed0e:	85 ff                	test   edi,edi
c001ed10:	75 0a                	jne    c001ed1c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ed12:	83 ec 0c             	sub    esp,0xc
c001ed15:	68 b3 c6 02 c0       	push   0xc002c6b3
c001ed1a:	eb 27                	jmp    c001ed43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ed1c:	50                   	push   eax
c001ed1d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ed21:	50                   	push   eax
c001ed22:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ed26:	50                   	push   eax
c001ed27:	57                   	push   edi
c001ed28:	e8 5b 4b ff ff       	call   c0013888 <File::stat(unsigned long long*, bool*)>
c001ed2d:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	89 e8                	mov    eax,ebp
c001ed37:	84 c0                	test   al,al
c001ed39:	74 19                	je     c001ed54 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed3b:	83 ec 0c             	sub    esp,0xc
c001ed3e:	68 c7 c6 02 c0       	push   0xc002c6c7
c001ed43:	e8 85 b9 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001ed48:	31 ed                	xor    ebp,ebp
c001ed4a:	e8 73 f1 ff ff       	call   c001dec2 <unlockScheduler()>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	eb 75                	jmp    c001edc9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed54:	50                   	push   eax
c001ed55:	50                   	push   eax
c001ed56:	6a 01                	push   0x1
c001ed58:	57                   	push   edi
c001ed59:	e8 7e 48 ff ff       	call   c00135dc <File::open(FileOpenMode)>
c001ed5e:	83 c4 10             	add    esp,0x10
c001ed61:	85 c0                	test   eax,eax
c001ed63:	74 17                	je     c001ed7c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed65:	83 ec 0c             	sub    esp,0xc
c001ed68:	68 e0 c6 02 c0       	push   0xc002c6e0
c001ed6d:	e8 5b b9 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001ed72:	e8 4b f1 ff ff       	call   c001dec2 <unlockScheduler()>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	eb 4d                	jmp    c001edc9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed7c:	0f b7 f6             	movzx  esi,si
c001ed7f:	50                   	push   eax
c001ed80:	0f b7 db             	movzx  ebx,bx
c001ed83:	50                   	push   eax
c001ed84:	56                   	push   esi
c001ed85:	53                   	push   ebx
c001ed86:	e8 b7 fd ff ff       	call   c001eb42 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed8b:	5a                   	pop    edx
c001ed8c:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed8e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed92:	51                   	push   ecx
c001ed93:	50                   	push   eax
c001ed94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed98:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed9c:	57                   	push   edi
c001ed9d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eda0:	83 c4 14             	add    esp,0x14
c001eda3:	57                   	push   edi
c001eda4:	e8 91 48 ff ff       	call   c001363a <File::close()>
c001eda9:	c6 05 c5 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031ac5,0x0
c001edb0:	e8 0d f1 ff ff       	call   c001dec2 <unlockScheduler()>
c001edb5:	59                   	pop    ecx
c001edb6:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001edbc:	e8 17 f7 ff ff       	call   c001e4d8 <unblockTask(ThreadControlBlock*)>
c001edc1:	83 c4 10             	add    esp,0x10
c001edc4:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001edc9:	83 c4 2c             	add    esp,0x2c
c001edcc:	89 e8                	mov    eax,ebp
c001edce:	5b                   	pop    ebx
c001edcf:	5e                   	pop    esi
c001edd0:	5f                   	pop    edi
c001edd1:	5d                   	pop    ebp
c001edd2:	c3                   	ret    

c001edd3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001edd3:	57                   	push   edi
c001edd4:	56                   	push   esi
c001edd5:	53                   	push   ebx
c001edd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ede2:	83 e8 06             	sub    eax,0x6
c001ede5:	0f b7 c0             	movzx  eax,ax
c001ede8:	50                   	push   eax
c001ede9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edee:	50                   	push   eax
c001edef:	e8 4e fd ff ff       	call   c001eb42 <Vm::realToLinear(unsigned short, unsigned short)>
c001edf4:	5a                   	pop    edx
c001edf5:	5e                   	pop    esi
c001edf6:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edf9:	8d 56 fa             	lea    edx,[esi-0x6]
c001edfc:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ee02:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ee05:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ee08:	83 c2 02             	add    edx,0x2
c001ee0b:	66 89 10             	mov    WORD PTR [eax],dx
c001ee0e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ee11:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ee15:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ee18:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ee1c:	89 d6                	mov    esi,edx
c001ee1e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ee24:	66 81 e6 ff fd       	and    si,0xfdff
c001ee29:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ee2d:	74 07                	je     c001ee36 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee2f:	89 d6                	mov    esi,edx
c001ee31:	66 81 ce 00 02       	or     si,0x200
c001ee36:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee3f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee43:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee4b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee4e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee56:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee59:	5b                   	pop    ebx
c001ee5a:	5e                   	pop    esi
c001ee5b:	5f                   	pop    edi
c001ee5c:	c3                   	ret    

c001ee5d <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee5d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee62:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee67:	c1 e0 04             	shl    eax,0x4
c001ee6a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee6d:	c3                   	ret    

c001ee6e <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee6e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee73:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee78:	c1 e0 04             	shl    eax,0x4
c001ee7b:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee7f:	c3                   	ret    

c001ee80 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee8a:	c1 e0 04             	shl    eax,0x4
c001ee8d:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee90:	c3                   	ret    

c001ee91 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee91:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee96:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee9b:	c1 e0 04             	shl    eax,0x4
c001ee9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eea2:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001eea5:	c3                   	ret    

c001eea6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001eea6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eeab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eeb0:	c1 e0 04             	shl    eax,0x4
c001eeb3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eeb7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001eebb:	c3                   	ret    

c001eebc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001eebc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eec1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eec6:	c1 e0 04             	shl    eax,0x4
c001eec9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eecd:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eed0:	c3                   	ret    

c001eed1 <Vm::faultHandler(regs*)>:
c001eed1:	55                   	push   ebp
c001eed2:	57                   	push   edi
c001eed3:	56                   	push   esi
c001eed4:	53                   	push   ebx
c001eed5:	83 ec 1c             	sub    esp,0x1c
c001eed8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eedc:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eedf:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eee2:	0f b7 c1             	movzx  eax,cx
c001eee5:	50                   	push   eax
c001eee6:	0f b7 c3             	movzx  eax,bx
c001eee9:	c1 e3 04             	shl    ebx,0x4
c001eeec:	50                   	push   eax
c001eeed:	e8 50 fc ff ff       	call   c001eb42 <Vm::realToLinear(unsigned short, unsigned short)>
c001eef2:	5a                   	pop    edx
c001eef3:	89 c5                	mov    ebp,eax
c001eef5:	5e                   	pop    esi
c001eef6:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eefa:	50                   	push   eax
c001eefb:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eeff:	50                   	push   eax
c001ef00:	e8 3d fc ff ff       	call   c001eb42 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef05:	01 cb                	add    ebx,ecx
c001ef07:	89 c6                	mov    esi,eax
c001ef09:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ef0d:	50                   	push   eax
c001ef0e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef12:	50                   	push   eax
c001ef13:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef17:	50                   	push   eax
c001ef18:	55                   	push   ebp
c001ef19:	53                   	push   ebx
c001ef1a:	b3 06                	mov    bl,0x6
c001ef1c:	68 f9 c6 02 c0       	push   0xc002c6f9
c001ef21:	e8 f9 40 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001ef26:	83 c4 20             	add    esp,0x20
c001ef29:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef2e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef33:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef37:	3c 9d                	cmp    al,0x9d
c001ef39:	0f 84 d7 02 00 00    	je     c001f216 <Vm::faultHandler(regs*)+0x345>
c001ef3f:	0f 87 a3 00 00 00    	ja     c001efe8 <Vm::faultHandler(regs*)+0x117>
c001ef45:	3c 66                	cmp    al,0x66
c001ef47:	0f 84 15 02 00 00    	je     c001f162 <Vm::faultHandler(regs*)+0x291>
c001ef4d:	77 5f                	ja     c001efae <Vm::faultHandler(regs*)+0xdd>
c001ef4f:	3c 36                	cmp    al,0x36
c001ef51:	0f 84 f1 01 00 00    	je     c001f148 <Vm::faultHandler(regs*)+0x277>
c001ef57:	77 28                	ja     c001ef81 <Vm::faultHandler(regs*)+0xb0>
c001ef59:	3c 26                	cmp    al,0x26
c001ef5b:	0f 84 99 01 00 00    	je     c001f0fa <Vm::faultHandler(regs*)+0x229>
c001ef61:	3c 2e                	cmp    al,0x2e
c001ef63:	0f 85 3b 07 00 00    	jne    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001ef69:	83 ec 0c             	sub    esp,0xc
c001ef6c:	31 db                	xor    ebx,ebx
c001ef6e:	68 0e c7 02 c0       	push   0xc002c70e
c001ef73:	e8 a7 40 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001ef78:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7b:	83 c4 10             	add    esp,0x10
c001ef7e:	45                   	inc    ebp
c001ef7f:	eb b2                	jmp    c001ef33 <Vm::faultHandler(regs*)+0x62>
c001ef81:	3c 64                	cmp    al,0x64
c001ef83:	0f 84 8b 01 00 00    	je     c001f114 <Vm::faultHandler(regs*)+0x243>
c001ef89:	0f 87 9f 01 00 00    	ja     c001f12e <Vm::faultHandler(regs*)+0x25d>
c001ef8f:	3c 3e                	cmp    al,0x3e
c001ef91:	0f 85 0d 07 00 00    	jne    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001ef97:	83 ec 0c             	sub    esp,0xc
c001ef9a:	b3 01                	mov    bl,0x1
c001ef9c:	68 12 c7 02 c0       	push   0xc002c712
c001efa1:	e8 79 40 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001efa6:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001efa9:	83 c4 10             	add    esp,0x10
c001efac:	eb d0                	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001efae:	3c 6d                	cmp    al,0x6d
c001efb0:	0f 84 af 03 00 00    	je     c001f365 <Vm::faultHandler(regs*)+0x494>
c001efb6:	77 15                	ja     c001efcd <Vm::faultHandler(regs*)+0xfc>
c001efb8:	3c 67                	cmp    al,0x67
c001efba:	0f 84 bf 01 00 00    	je     c001f17f <Vm::faultHandler(regs*)+0x2ae>
c001efc0:	3c 6c                	cmp    al,0x6c
c001efc2:	0f 84 3f 03 00 00    	je     c001f307 <Vm::faultHandler(regs*)+0x436>
c001efc8:	e9 d7 06 00 00       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001efcd:	3c 6f                	cmp    al,0x6f
c001efcf:	0f 84 a4 04 00 00    	je     c001f479 <Vm::faultHandler(regs*)+0x5a8>
c001efd5:	0f 82 11 04 00 00    	jb     c001f3ec <Vm::faultHandler(regs*)+0x51b>
c001efdb:	3c 9c                	cmp    al,0x9c
c001efdd:	0f 84 ba 01 00 00    	je     c001f19d <Vm::faultHandler(regs*)+0x2cc>
c001efe3:	e9 bc 06 00 00       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001efe8:	3c ec                	cmp    al,0xec
c001efea:	0f 84 24 06 00 00    	je     c001f614 <Vm::faultHandler(regs*)+0x743>
c001eff0:	0f 87 93 00 00 00    	ja     c001f089 <Vm::faultHandler(regs*)+0x1b8>
c001eff6:	3c e4                	cmp    al,0xe4
c001eff8:	0f 84 5c 05 00 00    	je     c001f55a <Vm::faultHandler(regs*)+0x689>
c001effe:	77 6a                	ja     c001f06a <Vm::faultHandler(regs*)+0x199>
c001f000:	3c cd                	cmp    al,0xcd
c001f002:	0f 84 7e 02 00 00    	je     c001f286 <Vm::faultHandler(regs*)+0x3b5>
c001f008:	3c cf                	cmp    al,0xcf
c001f00a:	0f 85 94 06 00 00    	jne    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001f010:	83 ec 0c             	sub    esp,0xc
c001f013:	68 56 c7 02 c0       	push   0xc002c756
c001f018:	e8 02 40 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f01d:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f020:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f023:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f027:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f02a:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f02e:	0d 00 02 02 00       	or     eax,0x20200
c001f033:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f036:	56                   	push   esi
c001f037:	53                   	push   ebx
c001f038:	52                   	push   edx
c001f039:	68 5c c7 02 c0       	push   0xc002c75c
c001f03e:	e8 dc 3f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f043:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f047:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f04d:	66 c1 e8 09          	shr    ax,0x9
c001f051:	83 e0 01             	and    eax,0x1
c001f054:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f057:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f05a:	83 c0 06             	add    eax,0x6
c001f05d:	25 ff ff 00 00       	and    eax,0xffff
c001f062:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f065:	e9 95 02 00 00       	jmp    c001f2ff <Vm::faultHandler(regs*)+0x42e>
c001f06a:	3c e6                	cmp    al,0xe6
c001f06c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f070:	0f 84 4e 05 00 00    	je     c001f5c4 <Vm::faultHandler(regs*)+0x6f3>
c001f076:	0f 82 0a 05 00 00    	jb     c001f586 <Vm::faultHandler(regs*)+0x6b5>
c001f07c:	3c e7                	cmp    al,0xe7
c001f07e:	0f 84 69 05 00 00    	je     c001f5ed <Vm::faultHandler(regs*)+0x71c>
c001f084:	e9 1b 06 00 00       	jmp    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001f089:	3c ef                	cmp    al,0xef
c001f08b:	0f 84 e6 05 00 00    	je     c001f677 <Vm::faultHandler(regs*)+0x7a6>
c001f091:	77 37                	ja     c001f0ca <Vm::faultHandler(regs*)+0x1f9>
c001f093:	3c ed                	cmp    al,0xed
c001f095:	0f 84 a3 05 00 00    	je     c001f63e <Vm::faultHandler(regs*)+0x76d>
c001f09b:	3c ee                	cmp    al,0xee
c001f09d:	0f 85 01 06 00 00    	jne    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001f0a3:	52                   	push   edx
c001f0a4:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f0a7:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f0aa:	68 f7 c7 02 c0       	push   0xc002c7f7
c001f0af:	e8 6b 3f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f0b4:	59                   	pop    ecx
c001f0b5:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f0b9:	5b                   	pop    ebx
c001f0ba:	50                   	push   eax
c001f0bb:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f0bf:	50                   	push   eax
c001f0c0:	e8 2a fa ff ff       	call   c001eaef <Vm::outbv(unsigned short, unsigned char)>
c001f0c5:	e9 a5 05 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x79e>
c001f0ca:	3c fa                	cmp    al,0xfa
c001f0cc:	0f 84 f7 01 00 00    	je     c001f2c9 <Vm::faultHandler(regs*)+0x3f8>
c001f0d2:	3c fb                	cmp    al,0xfb
c001f0d4:	0f 84 0a 02 00 00    	je     c001f2e4 <Vm::faultHandler(regs*)+0x413>
c001f0da:	3c f3                	cmp    al,0xf3
c001f0dc:	0f 85 c2 05 00 00    	jne    c001f6a4 <Vm::faultHandler(regs*)+0x7d3>
c001f0e2:	83 ec 0c             	sub    esp,0xc
c001f0e5:	68 2f c7 02 c0       	push   0xc002c72f
c001f0ea:	e8 30 3f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f0ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f2:	83 c4 10             	add    esp,0x10
c001f0f5:	e9 84 fe ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	b3 02                	mov    bl,0x2
c001f0ff:	68 0a c7 02 c0       	push   0xc002c70a
c001f104:	e8 16 3f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f109:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f10c:	83 c4 10             	add    esp,0x10
c001f10f:	e9 6a fe ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f114:	83 ec 0c             	sub    esp,0xc
c001f117:	b3 03                	mov    bl,0x3
c001f119:	68 16 c7 02 c0       	push   0xc002c716
c001f11e:	e8 fc 3e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f123:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f126:	83 c4 10             	add    esp,0x10
c001f129:	e9 50 fe ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	b3 04                	mov    bl,0x4
c001f133:	68 1a c7 02 c0       	push   0xc002c71a
c001f138:	e8 e2 3e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f13d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f140:	83 c4 10             	add    esp,0x10
c001f143:	e9 36 fe ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f148:	83 ec 0c             	sub    esp,0xc
c001f14b:	b3 05                	mov    bl,0x5
c001f14d:	68 1e c7 02 c0       	push   0xc002c71e
c001f152:	e8 c8 3e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f157:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f15a:	83 c4 10             	add    esp,0x10
c001f15d:	e9 1c fe ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	68 22 c7 02 c0       	push   0xc002c722
c001f16a:	e8 b0 3e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f16f:	83 c4 10             	add    esp,0x10
c001f172:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f175:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f17a:	e9 ff fd ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f17f:	50                   	push   eax
c001f180:	50                   	push   eax
c001f181:	6a 01                	push   0x1
c001f183:	68 27 c7 02 c0       	push   0xc002c727
c001f188:	e8 92 3e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f18d:	83 c4 10             	add    esp,0x10
c001f190:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f193:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f198:	e9 e1 fd ff ff       	jmp    c001ef7e <Vm::faultHandler(regs*)+0xad>
c001f19d:	83 ec 0c             	sub    esp,0xc
c001f1a0:	68 35 c7 02 c0       	push   0xc002c735
c001f1a5:	e8 75 3e ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f1b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1b5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f1b8:	74 2f                	je     c001f1e9 <Vm::faultHandler(regs*)+0x318>
c001f1ba:	83 ea 04             	sub    edx,0x4
c001f1bd:	25 ff 0d 00 00       	and    eax,0xdff
c001f1c2:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1c8:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1cb:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d4:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1d8:	0f 84 bf 04 00 00    	je     c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f1de:	80 cc 02             	or     ah,0x2
c001f1e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1e4:	e9 b4 04 00 00       	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f1e9:	83 ea 02             	sub    edx,0x2
c001f1ec:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1f2:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1f5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1ff:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f203:	74 05                	je     c001f20a <Vm::faultHandler(regs*)+0x339>
c001f205:	80 cc 02             	or     ah,0x2
c001f208:	eb 03                	jmp    c001f20d <Vm::faultHandler(regs*)+0x33c>
c001f20a:	80 e4 fd             	and    ah,0xfd
c001f20d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f211:	e9 87 04 00 00       	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f216:	83 ec 0c             	sub    esp,0xc
c001f219:	68 3c c7 02 c0       	push   0xc002c73c
c001f21e:	e8 fc 3d ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f223:	83 c4 10             	add    esp,0x10
c001f226:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f22b:	74 28                	je     c001f255 <Vm::faultHandler(regs*)+0x384>
c001f22d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f22f:	25 ff 0d 00 00       	and    eax,0xdff
c001f234:	0d 00 02 02 00       	or     eax,0x20200
c001f239:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f23c:	8b 06                	mov    eax,DWORD PTR [esi]
c001f23e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f244:	c1 e8 09             	shr    eax,0x9
c001f247:	83 e0 01             	and    eax,0x1
c001f24a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f24d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f250:	83 c0 04             	add    eax,0x4
c001f253:	eb 24                	jmp    c001f279 <Vm::faultHandler(regs*)+0x3a8>
c001f255:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f258:	0d 00 02 02 00       	or     eax,0x20200
c001f25d:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f260:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f263:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f269:	66 c1 e8 09          	shr    ax,0x9
c001f26d:	83 e0 01             	and    eax,0x1
c001f270:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f273:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f276:	83 c0 02             	add    eax,0x2
c001f279:	25 ff ff 00 00       	and    eax,0xffff
c001f27e:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f281:	e9 17 04 00 00       	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f286:	53                   	push   ebx
c001f287:	53                   	push   ebx
c001f288:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f28c:	50                   	push   eax
c001f28d:	68 42 c7 02 c0       	push   0xc002c742
c001f292:	e8 88 3d ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f297:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f29b:	83 c4 10             	add    esp,0x10
c001f29e:	3c ee                	cmp    al,0xee
c001f2a0:	75 10                	jne    c001f2b2 <Vm::faultHandler(regs*)+0x3e1>
c001f2a2:	83 ec 0c             	sub    esp,0xc
c001f2a5:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f2a8:	e8 fa f8 ff ff       	call   c001eba7 <Vm::mainloop3(unsigned long)>
c001f2ad:	e9 c0 03 00 00       	jmp    c001f672 <Vm::faultHandler(regs*)+0x7a1>
c001f2b2:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	53                   	push   ebx
c001f2ba:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f2be:	53                   	push   ebx
c001f2bf:	55                   	push   ebp
c001f2c0:	50                   	push   eax
c001f2c1:	57                   	push   edi
c001f2c2:	e8 0c fb ff ff       	call   c001edd3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f2c7:	eb 36                	jmp    c001f2ff <Vm::faultHandler(regs*)+0x42e>
c001f2c9:	83 ec 0c             	sub    esp,0xc
c001f2cc:	68 4c c7 02 c0       	push   0xc002c74c
c001f2d1:	e8 49 3d ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f2d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2db:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2df:	e9 8b 03 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x79e>
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	68 51 c7 02 c0       	push   0xc002c751
c001f2ec:	e8 2e 3d ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f2f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2f6:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2fa:	e9 70 03 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x79e>
c001f2ff:	83 c4 20             	add    esp,0x20
c001f302:	e9 99 03 00 00       	jmp    c001f6a0 <Vm::faultHandler(regs*)+0x7cf>
c001f307:	83 ec 0c             	sub    esp,0xc
c001f30a:	68 8f c7 02 c0       	push   0xc002c78f
c001f30f:	e8 0b 3d ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f31a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f31f:	74 0d                	je     c001f32e <Vm::faultHandler(regs*)+0x45d>
c001f321:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f328:	0f 87 9e 01 00 00    	ja     c001f4cc <Vm::faultHandler(regs*)+0x5fb>
c001f32e:	83 ec 0c             	sub    esp,0xc
c001f331:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f335:	0f b7 db             	movzx  ebx,bx
c001f338:	50                   	push   eax
c001f339:	e8 9e f7 ff ff       	call   c001eadc <Vm::inbv(unsigned short)>
c001f33e:	83 c4 0c             	add    esp,0xc
c001f341:	0f b6 c0             	movzx  eax,al
c001f344:	50                   	push   eax
c001f345:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f349:	50                   	push   eax
c001f34a:	53                   	push   ebx
c001f34b:	e8 41 fb ff ff       	call   c001ee91 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f350:	83 c4 10             	add    esp,0x10
c001f353:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f356:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f35a:	74 03                	je     c001f35f <Vm::faultHandler(regs*)+0x48e>
c001f35c:	48                   	dec    eax
c001f35d:	eb 01                	jmp    c001f360 <Vm::faultHandler(regs*)+0x48f>
c001f35f:	40                   	inc    eax
c001f360:	0f b7 c0             	movzx  eax,ax
c001f363:	eb 7f                	jmp    c001f3e4 <Vm::faultHandler(regs*)+0x513>
c001f365:	83 ec 0c             	sub    esp,0xc
c001f368:	68 c1 c7 02 c0       	push   0xc002c7c1
c001f36d:	e8 ad 3c ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f372:	83 c4 10             	add    esp,0x10
c001f375:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f378:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f37d:	74 0d                	je     c001f38c <Vm::faultHandler(regs*)+0x4bb>
c001f37f:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f386:	0f 87 40 01 00 00    	ja     c001f4cc <Vm::faultHandler(regs*)+0x5fb>
c001f38c:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f38f:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f393:	0f b7 db             	movzx  ebx,bx
c001f396:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f39b:	74 20                	je     c001f3bd <Vm::faultHandler(regs*)+0x4ec>
c001f39d:	ed                   	in     eax,dx
c001f39e:	51                   	push   ecx
c001f39f:	50                   	push   eax
c001f3a0:	56                   	push   esi
c001f3a1:	53                   	push   ebx
c001f3a2:	e8 15 fb ff ff       	call   c001eebc <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f3a7:	83 c4 10             	add    esp,0x10
c001f3aa:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3ad:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3b1:	74 05                	je     c001f3b8 <Vm::faultHandler(regs*)+0x4e7>
c001f3b3:	83 e8 04             	sub    eax,0x4
c001f3b6:	eb 27                	jmp    c001f3df <Vm::faultHandler(regs*)+0x50e>
c001f3b8:	83 c0 04             	add    eax,0x4
c001f3bb:	eb 22                	jmp    c001f3df <Vm::faultHandler(regs*)+0x50e>
c001f3bd:	66 ed                	in     ax,dx
c001f3bf:	0f b7 c0             	movzx  eax,ax
c001f3c2:	52                   	push   edx
c001f3c3:	50                   	push   eax
c001f3c4:	56                   	push   esi
c001f3c5:	53                   	push   ebx
c001f3c6:	e8 db fa ff ff       	call   c001eea6 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f3cb:	83 c4 10             	add    esp,0x10
c001f3ce:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3d1:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3d5:	74 05                	je     c001f3dc <Vm::faultHandler(regs*)+0x50b>
c001f3d7:	83 e8 02             	sub    eax,0x2
c001f3da:	eb 03                	jmp    c001f3df <Vm::faultHandler(regs*)+0x50e>
c001f3dc:	83 c0 02             	add    eax,0x2
c001f3df:	25 ff ff 00 00       	and    eax,0xffff
c001f3e4:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3e7:	e9 b1 02 00 00       	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f3ec:	83 ec 0c             	sub    esp,0xc
c001f3ef:	4b                   	dec    ebx
c001f3f0:	68 c7 c7 02 c0       	push   0xc002c7c7
c001f3f5:	e8 25 3c ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f3fa:	83 c4 10             	add    esp,0x10
c001f3fd:	80 fb 05             	cmp    bl,0x5
c001f400:	77 0a                	ja     c001f40c <Vm::faultHandler(regs*)+0x53b>
c001f402:	0f b6 db             	movzx  ebx,bl
c001f405:	ff 24 9d 38 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd37c8]
c001f40c:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f410:	eb 1b                	jmp    c001f42d <Vm::faultHandler(regs*)+0x55c>
c001f412:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f416:	eb 15                	jmp    c001f42d <Vm::faultHandler(regs*)+0x55c>
c001f418:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f41c:	eb 0f                	jmp    c001f42d <Vm::faultHandler(regs*)+0x55c>
c001f41e:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f422:	eb 09                	jmp    c001f42d <Vm::faultHandler(regs*)+0x55c>
c001f424:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f427:	eb 04                	jmp    c001f42d <Vm::faultHandler(regs*)+0x55c>
c001f429:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f42d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f432:	74 0d                	je     c001f441 <Vm::faultHandler(regs*)+0x570>
c001f434:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f43b:	0f 87 8b 00 00 00    	ja     c001f4cc <Vm::faultHandler(regs*)+0x5fb>
c001f441:	53                   	push   ebx
c001f442:	53                   	push   ebx
c001f443:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f447:	52                   	push   edx
c001f448:	50                   	push   eax
c001f449:	e8 0f fa ff ff       	call   c001ee5d <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f44e:	5e                   	pop    esi
c001f44f:	0f b6 c0             	movzx  eax,al
c001f452:	5d                   	pop    ebp
c001f453:	50                   	push   eax
c001f454:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f458:	50                   	push   eax
c001f459:	e8 91 f6 ff ff       	call   c001eaef <Vm::outbv(unsigned short, unsigned char)>
c001f45e:	83 c4 10             	add    esp,0x10
c001f461:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f464:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f468:	74 03                	je     c001f46d <Vm::faultHandler(regs*)+0x59c>
c001f46a:	48                   	dec    eax
c001f46b:	eb 01                	jmp    c001f46e <Vm::faultHandler(regs*)+0x59d>
c001f46d:	40                   	inc    eax
c001f46e:	0f b7 c0             	movzx  eax,ax
c001f471:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f474:	e9 24 02 00 00       	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f479:	83 ec 0c             	sub    esp,0xc
c001f47c:	4b                   	dec    ebx
c001f47d:	68 c7 c7 02 c0       	push   0xc002c7c7
c001f482:	e8 98 3b ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	80 fb 05             	cmp    bl,0x5
c001f48d:	77 0a                	ja     c001f499 <Vm::faultHandler(regs*)+0x5c8>
c001f48f:	0f b6 db             	movzx  ebx,bl
c001f492:	ff 24 9d 50 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd37b0]
c001f499:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f49d:	eb 1b                	jmp    c001f4ba <Vm::faultHandler(regs*)+0x5e9>
c001f49f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f4a3:	eb 15                	jmp    c001f4ba <Vm::faultHandler(regs*)+0x5e9>
c001f4a5:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f4a9:	eb 0f                	jmp    c001f4ba <Vm::faultHandler(regs*)+0x5e9>
c001f4ab:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f4af:	eb 09                	jmp    c001f4ba <Vm::faultHandler(regs*)+0x5e9>
c001f4b1:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f4b4:	eb 04                	jmp    c001f4ba <Vm::faultHandler(regs*)+0x5e9>
c001f4b6:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f4ba:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f4bd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f4c2:	74 39                	je     c001f4fd <Vm::faultHandler(regs*)+0x62c>
c001f4c4:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f4ca:	76 31                	jbe    c001f4fd <Vm::faultHandler(regs*)+0x62c>
c001f4cc:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4d0:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4d4:	51                   	push   ecx
c001f4d5:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4d9:	51                   	push   ecx
c001f4da:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4de:	51                   	push   ecx
c001f4df:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4e3:	51                   	push   ecx
c001f4e4:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4e8:	52                   	push   edx
c001f4e9:	50                   	push   eax
c001f4ea:	50                   	push   eax
c001f4eb:	68 94 c7 02 c0       	push   0xc002c794
c001f4f0:	e8 2a 3b ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f4f5:	83 c4 20             	add    esp,0x20
c001f4f8:	e9 fb 01 00 00       	jmp    c001f6f8 <Vm::faultHandler(regs*)+0x827>
c001f4fd:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f500:	0f b7 d3             	movzx  edx,bx
c001f503:	81 e6 00 04 00 00    	and    esi,0x400
c001f509:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f50c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f511:	74 1d                	je     c001f530 <Vm::faultHandler(regs*)+0x65f>
c001f513:	51                   	push   ecx
c001f514:	51                   	push   ecx
c001f515:	52                   	push   edx
c001f516:	50                   	push   eax
c001f517:	e8 64 f9 ff ff       	call   c001ee80 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f51c:	83 c4 10             	add    esp,0x10
c001f51f:	89 ea                	mov    edx,ebp
c001f521:	ef                   	out    dx,eax
c001f522:	85 f6                	test   esi,esi
c001f524:	74 05                	je     c001f52b <Vm::faultHandler(regs*)+0x65a>
c001f526:	83 eb 04             	sub    ebx,0x4
c001f529:	eb 21                	jmp    c001f54c <Vm::faultHandler(regs*)+0x67b>
c001f52b:	83 c3 04             	add    ebx,0x4
c001f52e:	eb 1c                	jmp    c001f54c <Vm::faultHandler(regs*)+0x67b>
c001f530:	51                   	push   ecx
c001f531:	51                   	push   ecx
c001f532:	52                   	push   edx
c001f533:	50                   	push   eax
c001f534:	e8 35 f9 ff ff       	call   c001ee6e <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f539:	83 c4 10             	add    esp,0x10
c001f53c:	89 ea                	mov    edx,ebp
c001f53e:	66 ef                	out    dx,ax
c001f540:	85 f6                	test   esi,esi
c001f542:	74 05                	je     c001f549 <Vm::faultHandler(regs*)+0x678>
c001f544:	83 eb 02             	sub    ebx,0x2
c001f547:	eb 03                	jmp    c001f54c <Vm::faultHandler(regs*)+0x67b>
c001f549:	83 c3 02             	add    ebx,0x2
c001f54c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f552:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f555:	e9 43 01 00 00       	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f55a:	53                   	push   ebx
c001f55b:	53                   	push   ebx
c001f55c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f560:	50                   	push   eax
c001f561:	68 cd c7 02 c0       	push   0xc002c7cd
c001f566:	e8 b4 3a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f56b:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f572:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f576:	89 04 24             	mov    DWORD PTR [esp],eax
c001f579:	e8 5e f5 ff ff       	call   c001eadc <Vm::inbv(unsigned short)>
c001f57e:	0f b6 c0             	movzx  eax,al
c001f581:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f584:	eb 5e                	jmp    c001f5e4 <Vm::faultHandler(regs*)+0x713>
c001f586:	51                   	push   ecx
c001f587:	51                   	push   ecx
c001f588:	53                   	push   ebx
c001f589:	68 d3 c7 02 c0       	push   0xc002c7d3
c001f58e:	e8 8c 3a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f593:	83 c4 10             	add    esp,0x10
c001f596:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f59b:	74 07                	je     c001f5a4 <Vm::faultHandler(regs*)+0x6d3>
c001f59d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5a1:	ed                   	in     eax,dx
c001f5a2:	eb 14                	jmp    c001f5b8 <Vm::faultHandler(regs*)+0x6e7>
c001f5a4:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f5a7:	66 31 db             	xor    bx,bx
c001f5aa:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f5ad:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5b1:	66 ed                	in     ax,dx
c001f5b3:	0f b7 c0             	movzx  eax,ax
c001f5b6:	09 d8                	or     eax,ebx
c001f5b8:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f5bb:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5bf:	e9 dc 00 00 00       	jmp    c001f6a0 <Vm::faultHandler(regs*)+0x7cf>
c001f5c4:	50                   	push   eax
c001f5c5:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c8:	53                   	push   ebx
c001f5c9:	68 d9 c7 02 c0       	push   0xc002c7d9
c001f5ce:	e8 4c 3a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f5d3:	58                   	pop    eax
c001f5d4:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5d8:	5a                   	pop    edx
c001f5d9:	50                   	push   eax
c001f5da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5de:	50                   	push   eax
c001f5df:	e8 0b f5 ff ff       	call   c001eaef <Vm::outbv(unsigned short, unsigned char)>
c001f5e4:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5e8:	e9 85 00 00 00       	jmp    c001f672 <Vm::faultHandler(regs*)+0x7a1>
c001f5ed:	50                   	push   eax
c001f5ee:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5f1:	53                   	push   ebx
c001f5f2:	68 e2 c7 02 c0       	push   0xc002c7e2
c001f5f7:	e8 23 3a ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f5fc:	83 c4 10             	add    esp,0x10
c001f5ff:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f603:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f608:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f60b:	74 03                	je     c001f610 <Vm::faultHandler(regs*)+0x73f>
c001f60d:	ef                   	out    dx,eax
c001f60e:	eb ab                	jmp    c001f5bb <Vm::faultHandler(regs*)+0x6ea>
c001f610:	66 ef                	out    dx,ax
c001f612:	eb a7                	jmp    c001f5bb <Vm::faultHandler(regs*)+0x6ea>
c001f614:	55                   	push   ebp
c001f615:	55                   	push   ebp
c001f616:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f619:	68 eb c7 02 c0       	push   0xc002c7eb
c001f61e:	e8 fc 39 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f623:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f62a:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f62e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f631:	e8 a6 f4 ff ff       	call   c001eadc <Vm::inbv(unsigned short)>
c001f636:	0f b6 c0             	movzx  eax,al
c001f639:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f63c:	eb 31                	jmp    c001f66f <Vm::faultHandler(regs*)+0x79e>
c001f63e:	56                   	push   esi
c001f63f:	56                   	push   esi
c001f640:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f643:	68 f1 c7 02 c0       	push   0xc002c7f1
c001f648:	e8 d2 39 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f64d:	83 c4 10             	add    esp,0x10
c001f650:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f653:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f658:	74 03                	je     c001f65d <Vm::faultHandler(regs*)+0x78c>
c001f65a:	ed                   	in     eax,dx
c001f65b:	eb 0d                	jmp    c001f66a <Vm::faultHandler(regs*)+0x799>
c001f65d:	66 ed                	in     ax,dx
c001f65f:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f662:	0f b7 c0             	movzx  eax,ax
c001f665:	66 31 d2             	xor    dx,dx
c001f668:	09 d0                	or     eax,edx
c001f66a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f66d:	eb 2e                	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f66f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f672:	83 c4 10             	add    esp,0x10
c001f675:	eb 29                	jmp    c001f6a0 <Vm::faultHandler(regs*)+0x7cf>
c001f677:	50                   	push   eax
c001f678:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f67b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f67e:	68 00 c8 02 c0       	push   0xc002c800
c001f683:	e8 97 39 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f688:	83 c4 10             	add    esp,0x10
c001f68b:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f68e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f693:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f696:	74 03                	je     c001f69b <Vm::faultHandler(regs*)+0x7ca>
c001f698:	ef                   	out    dx,eax
c001f699:	eb 02                	jmp    c001f69d <Vm::faultHandler(regs*)+0x7cc>
c001f69b:	66 ef                	out    dx,ax
c001f69d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6a0:	b0 01                	mov    al,0x1
c001f6a2:	eb 56                	jmp    c001f6fa <Vm::faultHandler(regs*)+0x829>
c001f6a4:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f6a8:	51                   	push   ecx
c001f6a9:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f6ad:	51                   	push   ecx
c001f6ae:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f6b2:	51                   	push   ecx
c001f6b3:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f6b7:	51                   	push   ecx
c001f6b8:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f6bc:	52                   	push   edx
c001f6bd:	50                   	push   eax
c001f6be:	50                   	push   eax
c001f6bf:	68 09 c8 02 c0       	push   0xc002c809
c001f6c4:	e8 56 39 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c001f6c9:	83 c4 20             	add    esp,0x20
c001f6cc:	83 ec 0c             	sub    esp,0xc
c001f6cf:	6a 60                	push   0x60
c001f6d1:	e8 06 f4 ff ff       	call   c001eadc <Vm::inbv(unsigned short)>
c001f6d6:	83 c4 10             	add    esp,0x10
c001f6d9:	3c 1c                	cmp    al,0x1c
c001f6db:	74 04                	je     c001f6e1 <Vm::faultHandler(regs*)+0x810>
c001f6dd:	3c 5a                	cmp    al,0x5a
c001f6df:	75 eb                	jne    c001f6cc <Vm::faultHandler(regs*)+0x7fb>
c001f6e1:	3c 1c                	cmp    al,0x1c
c001f6e3:	74 04                	je     c001f6e9 <Vm::faultHandler(regs*)+0x818>
c001f6e5:	3c 5a                	cmp    al,0x5a
c001f6e7:	75 0f                	jne    c001f6f8 <Vm::faultHandler(regs*)+0x827>
c001f6e9:	83 ec 0c             	sub    esp,0xc
c001f6ec:	6a 60                	push   0x60
c001f6ee:	e8 e9 f3 ff ff       	call   c001eadc <Vm::inbv(unsigned short)>
c001f6f3:	83 c4 10             	add    esp,0x10
c001f6f6:	eb e9                	jmp    c001f6e1 <Vm::faultHandler(regs*)+0x810>
c001f6f8:	31 c0                	xor    eax,eax
c001f6fa:	83 c4 1c             	add    esp,0x1c
c001f6fd:	5b                   	pop    ebx
c001f6fe:	5e                   	pop    esi
c001f6ff:	5f                   	pop    edi
c001f700:	5d                   	pop    ebp
c001f701:	c3                   	ret    

c001f702 <Vm::fpuInternalTo32(unsigned long long)>:
c001f702:	57                   	push   edi
c001f703:	56                   	push   esi
c001f704:	53                   	push   ebx
c001f705:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f70d:	89 d6                	mov    esi,edx
c001f70f:	89 d7                	mov    edi,edx
c001f711:	89 c1                	mov    ecx,eax
c001f713:	c1 ef 14             	shr    edi,0x14
c001f716:	89 d3                	mov    ebx,edx
c001f718:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f71e:	31 d2                	xor    edx,edx
c001f720:	89 f8                	mov    eax,edi
c001f722:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f728:	bf ff 00 00 00       	mov    edi,0xff
c001f72d:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f732:	83 d2 ff             	adc    edx,0xffffffff
c001f735:	39 c7                	cmp    edi,eax
c001f737:	bf 00 00 00 00       	mov    edi,0x0
c001f73c:	19 d7                	sbb    edi,edx
c001f73e:	72 15                	jb     c001f755 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f740:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f744:	c1 e0 17             	shl    eax,0x17
c001f747:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f74d:	09 f1                	or     ecx,esi
c001f74f:	09 c1                	or     ecx,eax
c001f751:	89 cf                	mov    edi,ecx
c001f753:	eb 02                	jmp    c001f757 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f755:	31 ff                	xor    edi,edi
c001f757:	89 f8                	mov    eax,edi
c001f759:	5b                   	pop    ebx
c001f75a:	5e                   	pop    esi
c001f75b:	5f                   	pop    edi
c001f75c:	c3                   	ret    

c001f75d <Vm::fpuInternalTo64(unsigned long long)>:
c001f75d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f761:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f765:	c3                   	ret    

c001f766 <Vm::fpu32ToInternal(unsigned int)>:
c001f766:	57                   	push   edi
c001f767:	31 ff                	xor    edi,edi
c001f769:	56                   	push   esi
c001f76a:	53                   	push   ebx
c001f76b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f76f:	89 cb                	mov    ebx,ecx
c001f771:	89 ce                	mov    esi,ecx
c001f773:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f779:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f77f:	c1 e9 17             	shr    ecx,0x17
c001f782:	89 f0                	mov    eax,esi
c001f784:	0f b6 d1             	movzx  edx,cl
c001f787:	81 c2 80 03 00 00    	add    edx,0x380
c001f78d:	89 d1                	mov    ecx,edx
c001f78f:	89 fa                	mov    edx,edi
c001f791:	c1 e1 14             	shl    ecx,0x14
c001f794:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f798:	c1 e0 1d             	shl    eax,0x1d
c001f79b:	89 d7                	mov    edi,edx
c001f79d:	89 c6                	mov    esi,eax
c001f79f:	89 ca                	mov    edx,ecx
c001f7a1:	89 f0                	mov    eax,esi
c001f7a3:	09 fa                	or     edx,edi
c001f7a5:	09 da                	or     edx,ebx
c001f7a7:	5b                   	pop    ebx
c001f7a8:	5e                   	pop    esi
c001f7a9:	5f                   	pop    edi
c001f7aa:	c3                   	ret    

c001f7ab <Vm::fpu64ToInternal(unsigned long long)>:
c001f7ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7b3:	c3                   	ret    

c001f7b4 <Vm::fpuFloatToLong(unsigned long long)>:
c001f7b4:	57                   	push   edi
c001f7b5:	31 c0                	xor    eax,eax
c001f7b7:	56                   	push   esi
c001f7b8:	31 d2                	xor    edx,edx
c001f7ba:	53                   	push   ebx
c001f7bb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7c3:	89 d9                	mov    ecx,ebx
c001f7c5:	c1 e9 14             	shr    ecx,0x14
c001f7c8:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7ce:	89 cf                	mov    edi,ecx
c001f7d0:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7d6:	78 33                	js     c001f80b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7d8:	89 d9                	mov    ecx,ebx
c001f7da:	89 f0                	mov    eax,esi
c001f7dc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7e2:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7e8:	89 ca                	mov    edx,ecx
c001f7ea:	b9 34 00 00 00       	mov    ecx,0x34
c001f7ef:	29 f9                	sub    ecx,edi
c001f7f1:	0f ad d0             	shrd   eax,edx,cl
c001f7f4:	d3 fa                	sar    edx,cl
c001f7f6:	f6 c1 20             	test   cl,0x20
c001f7f9:	74 05                	je     c001f800 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7fb:	89 d0                	mov    eax,edx
c001f7fd:	c1 fa 1f             	sar    edx,0x1f
c001f800:	85 db                	test   ebx,ebx
c001f802:	79 07                	jns    c001f80b <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f804:	f7 d8                	neg    eax
c001f806:	83 d2 00             	adc    edx,0x0
c001f809:	f7 da                	neg    edx
c001f80b:	5b                   	pop    ebx
c001f80c:	5e                   	pop    esi
c001f80d:	5f                   	pop    edi
c001f80e:	c3                   	ret    

c001f80f <Vm::fpuULongToFloat(unsigned long long)>:
c001f80f:	57                   	push   edi
c001f810:	31 c9                	xor    ecx,ecx
c001f812:	56                   	push   esi
c001f813:	53                   	push   ebx
c001f814:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f81c:	0f ba e7 14          	bt     edi,0x14
c001f820:	72 07                	jb     c001f829 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f822:	01 f6                	add    esi,esi
c001f824:	11 ff                	adc    edi,edi
c001f826:	41                   	inc    ecx
c001f827:	eb f3                	jmp    c001f81c <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f829:	89 fa                	mov    edx,edi
c001f82b:	89 f0                	mov    eax,esi
c001f82d:	bb 33 04 00 00       	mov    ebx,0x433
c001f832:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f838:	29 cb                	sub    ebx,ecx
c001f83a:	89 d9                	mov    ecx,ebx
c001f83c:	5b                   	pop    ebx
c001f83d:	c1 e1 14             	shl    ecx,0x14
c001f840:	5e                   	pop    esi
c001f841:	09 ca                	or     edx,ecx
c001f843:	5f                   	pop    edi
c001f844:	c3                   	ret    

c001f845 <Vm::fpuLongToFloat(long long)>:
c001f845:	56                   	push   esi
c001f846:	31 c0                	xor    eax,eax
c001f848:	53                   	push   ebx
c001f849:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f84d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f851:	39 c8                	cmp    eax,ecx
c001f853:	19 d8                	sbb    eax,ebx
c001f855:	7d 04                	jge    c001f85b <Vm::fpuLongToFloat(long long)+0x16>
c001f857:	31 f6                	xor    esi,esi
c001f859:	eb 0c                	jmp    c001f867 <Vm::fpuLongToFloat(long long)+0x22>
c001f85b:	f7 d9                	neg    ecx
c001f85d:	be 01 00 00 00       	mov    esi,0x1
c001f862:	83 d3 00             	adc    ebx,0x0
c001f865:	f7 db                	neg    ebx
c001f867:	31 c0                	xor    eax,eax
c001f869:	0f ba e3 14          	bt     ebx,0x14
c001f86d:	72 07                	jb     c001f876 <Vm::fpuLongToFloat(long long)+0x31>
c001f86f:	01 c9                	add    ecx,ecx
c001f871:	11 db                	adc    ebx,ebx
c001f873:	40                   	inc    eax
c001f874:	eb f3                	jmp    c001f869 <Vm::fpuLongToFloat(long long)+0x24>
c001f876:	ba 33 04 00 00       	mov    edx,0x433
c001f87b:	29 c2                	sub    edx,eax
c001f87d:	89 c8                	mov    eax,ecx
c001f87f:	c1 e2 14             	shl    edx,0x14
c001f882:	89 d9                	mov    ecx,ebx
c001f884:	89 f3                	mov    ebx,esi
c001f886:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f88c:	09 ca                	or     edx,ecx
c001f88e:	84 db                	test   bl,bl
c001f890:	74 06                	je     c001f898 <Vm::fpuLongToFloat(long long)+0x53>
c001f892:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f898:	5b                   	pop    ebx
c001f899:	5e                   	pop    esi
c001f89a:	c3                   	ret    

c001f89b <Vm::fpuGet0()>:
c001f89b:	31 c0                	xor    eax,eax
c001f89d:	31 d2                	xor    edx,edx
c001f89f:	c3                   	ret    

c001f8a0 <Vm::fpuGet1()>:
c001f8a0:	b8 01 00 00 00       	mov    eax,0x1
c001f8a5:	31 d2                	xor    edx,edx
c001f8a7:	c3                   	ret    

c001f8a8 <Vm::fpuGetPi()>:
c001f8a8:	b8 03 00 00 00       	mov    eax,0x3
c001f8ad:	31 d2                	xor    edx,edx
c001f8af:	c3                   	ret    

c001f8b0 <Vm::fpuGetLog2E()>:
c001f8b0:	83 ec 18             	sub    esp,0x18
c001f8b3:	68 68 c8 02 c0       	push   0xc002c868
c001f8b8:	e8 10 ae ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001f8bd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c2:	31 d2                	xor    edx,edx
c001f8c4:	83 c4 1c             	add    esp,0x1c
c001f8c7:	c3                   	ret    

c001f8c8 <Vm::fpuGetLogE2()>:
c001f8c8:	83 ec 18             	sub    esp,0x18
c001f8cb:	68 74 c8 02 c0       	push   0xc002c874
c001f8d0:	e8 f8 ad ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001f8d5:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8da:	31 d2                	xor    edx,edx
c001f8dc:	83 c4 1c             	add    esp,0x1c
c001f8df:	c3                   	ret    

c001f8e0 <Vm::fpuGetLog210()>:
c001f8e0:	83 ec 18             	sub    esp,0x18
c001f8e3:	68 80 c8 02 c0       	push   0xc002c880
c001f8e8:	e8 e0 ad ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001f8ed:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8f2:	31 d2                	xor    edx,edx
c001f8f4:	83 c4 1c             	add    esp,0x1c
c001f8f7:	c3                   	ret    

c001f8f8 <Vm::fpuGetLog102()>:
c001f8f8:	83 ec 18             	sub    esp,0x18
c001f8fb:	68 8d c8 02 c0       	push   0xc002c88d
c001f900:	e8 c8 ad ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001f905:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f90a:	31 d2                	xor    edx,edx
c001f90c:	83 c4 1c             	add    esp,0x1c
c001f90f:	c3                   	ret    

c001f910 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f914:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f918:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f91c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f920:	0f 92 c0             	setb   al
c001f923:	c3                   	ret    

c001f924 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f930:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f934:	09 c2                	or     edx,eax
c001f936:	0f 94 c0             	sete   al
c001f939:	c3                   	ret    

c001f93a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f93a:	57                   	push   edi
c001f93b:	56                   	push   esi
c001f93c:	53                   	push   ebx
c001f93d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f941:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f945:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f949:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f94d:	57                   	push   edi
c001f94e:	56                   	push   esi
c001f94f:	53                   	push   ebx
c001f950:	51                   	push   ecx
c001f951:	e8 ce ff ff ff       	call   c001f924 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f956:	83 c4 10             	add    esp,0x10
c001f959:	88 c2                	mov    dl,al
c001f95b:	31 c0                	xor    eax,eax
c001f95d:	84 d2                	test   dl,dl
c001f95f:	75 0c                	jne    c001f96d <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f961:	57                   	push   edi
c001f962:	56                   	push   esi
c001f963:	53                   	push   ebx
c001f964:	51                   	push   ecx
c001f965:	e8 a6 ff ff ff       	call   c001f910 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f96a:	83 c4 10             	add    esp,0x10
c001f96d:	83 e0 01             	and    eax,0x1
c001f970:	5b                   	pop    ebx
c001f971:	88 c1                	mov    cl,al
c001f973:	83 e2 01             	and    edx,0x1
c001f976:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001f97b:	c1 e2 06             	shl    edx,0x6
c001f97e:	83 e0 ba             	and    eax,0xffffffba
c001f981:	5e                   	pop    esi
c001f982:	09 c8                	or     eax,ecx
c001f984:	5f                   	pop    edi
c001f985:	09 d0                	or     eax,edx
c001f987:	a2 01 1b 03 c0       	mov    ds:0xc0031b01,al
c001f98c:	c3                   	ret    

c001f98d <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f98d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f991:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f995:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f999:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f99d:	c3                   	ret    

c001f99e <Vm::fpuAbs(unsigned long long)>:
c001f99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9a6:	c3                   	ret    

c001f9a7 <Vm::fpuChs(unsigned long long)>:
c001f9a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9af:	f7 d8                	neg    eax
c001f9b1:	83 d2 00             	adc    edx,0x0
c001f9b4:	f7 da                	neg    edx
c001f9b6:	c3                   	ret    

c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9b7:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9bb:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9c0:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9c4:	eb c7                	jmp    c001f98d <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9c6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9c6:	53                   	push   ebx
c001f9c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9cf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9d3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9d7:	0f af ca             	imul   ecx,edx
c001f9da:	0f af d8             	imul   ebx,eax
c001f9dd:	f7 e2                	mul    edx
c001f9df:	01 d9                	add    ecx,ebx
c001f9e1:	5b                   	pop    ebx
c001f9e2:	01 ca                	add    edx,ecx
c001f9e4:	c3                   	ret    

c001f9e5 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9e5:	83 ec 0c             	sub    esp,0xc
c001f9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9f8:	e8 9f 70 00 00       	call   c0026a9c <__udivdi3>
c001f9fd:	83 c4 1c             	add    esp,0x1c
c001fa00:	c3                   	ret    

c001fa01 <Vm::fpuSquare(unsigned long long)>:
c001fa01:	50                   	push   eax
c001fa02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa0a:	52                   	push   edx
c001fa0b:	50                   	push   eax
c001fa0c:	52                   	push   edx
c001fa0d:	50                   	push   eax
c001fa0e:	e8 b3 ff ff ff       	call   c001f9c6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa13:	83 c4 14             	add    esp,0x14
c001fa16:	c3                   	ret    

c001fa17 <Vm::fpuGetReg(int)>:
c001fa17:	83 ec 0c             	sub    esp,0xc
c001fa1a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa1f:	76 10                	jbe    c001fa31 <Vm::fpuGetReg(int)+0x1a>
c001fa21:	83 ec 0c             	sub    esp,0xc
c001fa24:	68 9a c8 02 c0       	push   0xc002c89a
c001fa29:	e8 9f ac ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001fa2e:	83 c4 10             	add    esp,0x10
c001fa31:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa36:	b9 08 00 00 00       	mov    ecx,0x8
c001fa3b:	c0 e8 03             	shr    al,0x3
c001fa3e:	83 e0 07             	and    eax,0x7
c001fa41:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa45:	99                   	cdq    
c001fa46:	f7 f9                	idiv   ecx
c001fa48:	8b 04 d5 04 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce4fc]
c001fa4f:	8b 14 d5 08 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce4f8]
c001fa56:	83 c4 0c             	add    esp,0xc
c001fa59:	c3                   	ret    

c001fa5a <Vm::fpuSetReg(int, unsigned long long)>:
c001fa5a:	57                   	push   edi
c001fa5b:	56                   	push   esi
c001fa5c:	52                   	push   edx
c001fa5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa61:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa65:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa6a:	76 10                	jbe    c001fa7c <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa6c:	83 ec 0c             	sub    esp,0xc
c001fa6f:	68 ad c8 02 c0       	push   0xc002c8ad
c001fa74:	e8 54 ac ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c001fa79:	83 c4 10             	add    esp,0x10
c001fa7c:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa81:	b9 08 00 00 00       	mov    ecx,0x8
c001fa86:	c0 e8 03             	shr    al,0x3
c001fa89:	83 e0 07             	and    eax,0x7
c001fa8c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa90:	99                   	cdq    
c001fa91:	f7 f9                	idiv   ecx
c001fa93:	89 34 d5 04 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4fc],esi
c001fa9a:	89 3c d5 08 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4f8],edi
c001faa1:	58                   	pop    eax
c001faa2:	5e                   	pop    esi
c001faa3:	5f                   	pop    edi
c001faa4:	c3                   	ret    

c001faa5 <Vm::fpuPush(unsigned long long)>:
c001faa5:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001faaa:	c0 e8 03             	shr    al,0x3
c001faad:	83 e0 07             	and    eax,0x7
c001fab0:	83 c0 07             	add    eax,0x7
c001fab3:	88 c2                	mov    dl,al
c001fab5:	83 e0 07             	and    eax,0x7
c001fab8:	83 e2 07             	and    edx,0x7
c001fabb:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fac2:	8a 15 01 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b01
c001fac8:	83 e2 c7             	and    edx,0xffffffc7
c001facb:	09 ca                	or     edx,ecx
c001facd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fad1:	88 15 01 1b 03 c0    	mov    BYTE PTR ds:0xc0031b01,dl
c001fad7:	89 0c c5 08 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4f8],ecx
c001fade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fae2:	89 14 c5 04 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4fc],edx
c001fae9:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c001faee:	83 f8 08             	cmp    eax,0x8
c001faf1:	75 08                	jne    c001fafb <Vm::fpuPush(unsigned long long)+0x56>
c001faf3:	80 0d 00 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b00,0x40
c001fafa:	c3                   	ret    
c001fafb:	40                   	inc    eax
c001fafc:	a3 44 1b 03 c0       	mov    ds:0xc0031b44,eax
c001fb01:	c3                   	ret    

c001fb02 <Vm::fpuPop()>:
c001fb02:	8a 0d 01 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b01
c001fb08:	53                   	push   ebx
c001fb09:	c0 e9 03             	shr    cl,0x3
c001fb0c:	8a 1d 01 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b01
c001fb12:	83 e1 07             	and    ecx,0x7
c001fb15:	83 e3 c7             	and    ebx,0xffffffc7
c001fb18:	8b 04 cd 04 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce4fc]
c001fb1f:	8b 14 cd 08 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce4f8]
c001fb26:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb2d:	83 e1 38             	and    ecx,0x38
c001fb30:	09 d9                	or     ecx,ebx
c001fb32:	88 0d 01 1b 03 c0    	mov    BYTE PTR ds:0xc0031b01,cl
c001fb38:	8b 0d 44 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b44
c001fb3e:	85 c9                	test   ecx,ecx
c001fb40:	74 09                	je     c001fb4b <Vm::fpuPop()+0x49>
c001fb42:	49                   	dec    ecx
c001fb43:	89 0d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ecx
c001fb49:	eb 07                	jmp    c001fb52 <Vm::fpuPop()+0x50>
c001fb4b:	80 0d 00 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b00,0x40
c001fb52:	5b                   	pop    ebx
c001fb53:	c3                   	ret    

c001fb54 <Vm::x87Handler(regs*)>:
c001fb54:	55                   	push   ebp
c001fb55:	57                   	push   edi
c001fb56:	56                   	push   esi
c001fb57:	53                   	push   ebx
c001fb58:	83 ec 1c             	sub    esp,0x1c
c001fb5b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb5f:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb64:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb67:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb6f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb73:	50                   	push   eax
c001fb74:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb78:	50                   	push   eax
c001fb79:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb7d:	50                   	push   eax
c001fb7e:	53                   	push   ebx
c001fb7f:	e8 10 a2 ff ff       	call   c0019d94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb84:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb87:	83 c4 10             	add    esp,0x10
c001fb8a:	89 c6                	mov    esi,eax
c001fb8c:	80 fa d9             	cmp    dl,0xd9
c001fb8f:	0f 85 52 01 00 00    	jne    c001fce7 <Vm::x87Handler(regs*)+0x193>
c001fb95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb99:	8d 50 20             	lea    edx,[eax+0x20]
c001fb9c:	80 fa 0e             	cmp    dl,0xe
c001fb9f:	0f 87 86 00 00 00    	ja     c001fc2b <Vm::x87Handler(regs*)+0xd7>
c001fba5:	0f b6 d2             	movzx  edx,dl
c001fba8:	ff 24 95 c0 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3740]
c001fbaf:	e8 e7 fc ff ff       	call   c001f89b <Vm::fpuGet0()>
c001fbb4:	eb 05                	jmp    c001fbbb <Vm::x87Handler(regs*)+0x67>
c001fbb6:	e8 e5 fc ff ff       	call   c001f8a0 <Vm::fpuGet1()>
c001fbbb:	57                   	push   edi
c001fbbc:	57                   	push   edi
c001fbbd:	52                   	push   edx
c001fbbe:	50                   	push   eax
c001fbbf:	e8 e1 fe ff ff       	call   c001faa5 <Vm::fpuPush(unsigned long long)>
c001fbc4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbc8:	83 c4 10             	add    esp,0x10
c001fbcb:	b0 01                	mov    al,0x1
c001fbcd:	e9 e3 09 00 00       	jmp    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c001fbd2:	83 ec 0c             	sub    esp,0xc
c001fbd5:	6a 00                	push   0x0
c001fbd7:	e8 3b fe ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fbdc:	59                   	pop    ecx
c001fbdd:	5e                   	pop    esi
c001fbde:	52                   	push   edx
c001fbdf:	50                   	push   eax
c001fbe0:	e8 c2 fd ff ff       	call   c001f9a7 <Vm::fpuChs(unsigned long long)>
c001fbe5:	eb 13                	jmp    c001fbfa <Vm::x87Handler(regs*)+0xa6>
c001fbe7:	83 ec 0c             	sub    esp,0xc
c001fbea:	6a 00                	push   0x0
c001fbec:	e8 26 fe ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fbf1:	5f                   	pop    edi
c001fbf2:	5d                   	pop    ebp
c001fbf3:	52                   	push   edx
c001fbf4:	50                   	push   eax
c001fbf5:	e8 a4 fd ff ff       	call   c001f99e <Vm::fpuAbs(unsigned long long)>
c001fbfa:	83 c4 0c             	add    esp,0xc
c001fbfd:	52                   	push   edx
c001fbfe:	50                   	push   eax
c001fbff:	6a 00                	push   0x0
c001fc01:	e8 54 fe ff ff       	call   c001fa5a <Vm::fpuSetReg(int, unsigned long long)>
c001fc06:	eb bc                	jmp    c001fbc4 <Vm::x87Handler(regs*)+0x70>
c001fc08:	e8 d3 fc ff ff       	call   c001f8e0 <Vm::fpuGetLog210()>
c001fc0d:	eb ac                	jmp    c001fbbb <Vm::x87Handler(regs*)+0x67>
c001fc0f:	e8 9c fc ff ff       	call   c001f8b0 <Vm::fpuGetLog2E()>
c001fc14:	eb a5                	jmp    c001fbbb <Vm::x87Handler(regs*)+0x67>
c001fc16:	e8 8d fc ff ff       	call   c001f8a8 <Vm::fpuGetPi()>
c001fc1b:	eb 9e                	jmp    c001fbbb <Vm::x87Handler(regs*)+0x67>
c001fc1d:	e8 d6 fc ff ff       	call   c001f8f8 <Vm::fpuGetLog102()>
c001fc22:	eb 97                	jmp    c001fbbb <Vm::x87Handler(regs*)+0x67>
c001fc24:	e8 9f fc ff ff       	call   c001f8c8 <Vm::fpuGetLogE2()>
c001fc29:	eb 90                	jmp    c001fbbb <Vm::x87Handler(regs*)+0x67>
c001fc2b:	8d 50 40             	lea    edx,[eax+0x40]
c001fc2e:	80 fa 07             	cmp    dl,0x7
c001fc31:	77 15                	ja     c001fc48 <Vm::x87Handler(regs*)+0xf4>
c001fc33:	83 ec 0c             	sub    esp,0xc
c001fc36:	2d c0 00 00 00       	sub    eax,0xc0
c001fc3b:	50                   	push   eax
c001fc3c:	e8 d6 fd ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fc41:	59                   	pop    ecx
c001fc42:	5e                   	pop    esi
c001fc43:	e9 75 ff ff ff       	jmp    c001fbbd <Vm::x87Handler(regs*)+0x69>
c001fc48:	8d 50 38             	lea    edx,[eax+0x38]
c001fc4b:	80 fa 07             	cmp    dl,0x7
c001fc4e:	77 3c                	ja     c001fc8c <Vm::x87Handler(regs*)+0x138>
c001fc50:	83 ec 0c             	sub    esp,0xc
c001fc53:	2d c8 00 00 00       	sub    eax,0xc8
c001fc58:	50                   	push   eax
c001fc59:	e8 b9 fd ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fc5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc65:	89 c6                	mov    esi,eax
c001fc67:	89 d7                	mov    edi,edx
c001fc69:	e8 a9 fd ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fc6e:	83 c4 0c             	add    esp,0xc
c001fc71:	52                   	push   edx
c001fc72:	50                   	push   eax
c001fc73:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc77:	2d c8 00 00 00       	sub    eax,0xc8
c001fc7c:	50                   	push   eax
c001fc7d:	e8 d8 fd ff ff       	call   c001fa5a <Vm::fpuSetReg(int, unsigned long long)>
c001fc82:	83 c4 0c             	add    esp,0xc
c001fc85:	57                   	push   edi
c001fc86:	56                   	push   esi
c001fc87:	e9 73 ff ff ff       	jmp    c001fbff <Vm::x87Handler(regs*)+0xab>
c001fc8c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc90:	84 d2                	test   dl,dl
c001fc92:	75 0f                	jne    c001fca3 <Vm::x87Handler(regs*)+0x14f>
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	ff 36                	push   DWORD PTR [esi]
c001fc99:	e8 c8 fa ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c001fc9e:	e9 bf 00 00 00       	jmp    c001fd62 <Vm::x87Handler(regs*)+0x20e>
c001fca3:	80 fa 03             	cmp    dl,0x3
c001fca6:	75 13                	jne    c001fcbb <Vm::x87Handler(regs*)+0x167>
c001fca8:	e8 55 fe ff ff       	call   c001fb02 <Vm::fpuPop()>
c001fcad:	55                   	push   ebp
c001fcae:	55                   	push   ebp
c001fcaf:	52                   	push   edx
c001fcb0:	50                   	push   eax
c001fcb1:	e8 4c fa ff ff       	call   c001f702 <Vm::fpuInternalTo32(unsigned long long)>
c001fcb6:	e9 88 00 00 00       	jmp    c001fd43 <Vm::x87Handler(regs*)+0x1ef>
c001fcbb:	80 fa 05             	cmp    dl,0x5
c001fcbe:	75 0e                	jne    c001fcce <Vm::x87Handler(regs*)+0x17a>
c001fcc0:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fcc3:	66 a3 02 1b 03 c0    	mov    ds:0xc0031b02,ax
c001fcc9:	e9 df 00 00 00       	jmp    c001fdad <Vm::x87Handler(regs*)+0x259>
c001fcce:	31 c0                	xor    eax,eax
c001fcd0:	80 fa 07             	cmp    dl,0x7
c001fcd3:	0f 85 dc 08 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c001fcd9:	66 a1 02 1b 03 c0    	mov    ax,ds:0xc0031b02
c001fcdf:	66 89 06             	mov    WORD PTR [esi],ax
c001fce2:	e9 c6 00 00 00       	jmp    c001fdad <Vm::x87Handler(regs*)+0x259>
c001fce7:	80 fa d8             	cmp    dl,0xd8
c001fcea:	0f 84 c9 00 00 00    	je     c001fdb9 <Vm::x87Handler(regs*)+0x265>
c001fcf0:	80 fa dc             	cmp    dl,0xdc
c001fcf3:	0f 84 0d 02 00 00    	je     c001ff06 <Vm::x87Handler(regs*)+0x3b2>
c001fcf9:	80 fa de             	cmp    dl,0xde
c001fcfc:	0f 84 cd 02 00 00    	je     c001ffcf <Vm::x87Handler(regs*)+0x47b>
c001fd02:	80 fa dd             	cmp    dl,0xdd
c001fd05:	0f 84 5f 04 00 00    	je     c002016a <Vm::x87Handler(regs*)+0x616>
c001fd0b:	80 fa da             	cmp    dl,0xda
c001fd0e:	0f 84 24 05 00 00    	je     c0020238 <Vm::x87Handler(regs*)+0x6e4>
c001fd14:	80 fa df             	cmp    dl,0xdf
c001fd17:	0f 84 68 05 00 00    	je     c0020285 <Vm::x87Handler(regs*)+0x731>
c001fd1d:	31 c0                	xor    eax,eax
c001fd1f:	80 fa db             	cmp    dl,0xdb
c001fd22:	0f 85 8d 08 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c001fd28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd2c:	80 fa 03             	cmp    dl,0x3
c001fd2f:	0f 85 70 06 00 00    	jne    c00203a5 <Vm::x87Handler(regs*)+0x851>
c001fd35:	e8 c8 fd ff ff       	call   c001fb02 <Vm::fpuPop()>
c001fd3a:	55                   	push   ebp
c001fd3b:	55                   	push   ebp
c001fd3c:	52                   	push   edx
c001fd3d:	50                   	push   eax
c001fd3e:	e8 71 fa ff ff       	call   c001f7b4 <Vm::fpuFloatToLong(unsigned long long)>
c001fd43:	83 c4 10             	add    esp,0x10
c001fd46:	89 06                	mov    DWORD PTR [esi],eax
c001fd48:	eb 63                	jmp    c001fdad <Vm::x87Handler(regs*)+0x259>
c001fd4a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd4e:	84 d2                	test   dl,dl
c001fd50:	0f 85 e6 05 00 00    	jne    c002033c <Vm::x87Handler(regs*)+0x7e8>
c001fd56:	57                   	push   edi
c001fd57:	57                   	push   edi
c001fd58:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd5b:	ff 36                	push   DWORD PTR [esi]
c001fd5d:	e8 49 fa ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c001fd62:	5e                   	pop    esi
c001fd63:	5f                   	pop    edi
c001fd64:	52                   	push   edx
c001fd65:	50                   	push   eax
c001fd66:	e8 3a fd ff ff       	call   c001faa5 <Vm::fpuPush(unsigned long long)>
c001fd6b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd6f:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd72:	e9 51 fe ff ff       	jmp    c001fbc8 <Vm::x87Handler(regs*)+0x74>
c001fd77:	80 fa 03             	cmp    dl,0x3
c001fd7a:	0f 85 d7 06 00 00    	jne    c0020457 <Vm::x87Handler(regs*)+0x903>
c001fd80:	57                   	push   edi
c001fd81:	57                   	push   edi
c001fd82:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd85:	ff 36                	push   DWORD PTR [esi]
c001fd87:	e8 1f fa ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c001fd8c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd93:	89 c6                	mov    esi,eax
c001fd95:	89 d7                	mov    edi,edx
c001fd97:	e8 7b fc ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fd9c:	57                   	push   edi
c001fd9d:	56                   	push   esi
c001fd9e:	52                   	push   edx
c001fd9f:	50                   	push   eax
c001fda0:	e8 95 fb ff ff       	call   c001f93a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fda5:	83 c4 20             	add    esp,0x20
c001fda8:	e8 55 fd ff ff       	call   c001fb02 <Vm::fpuPop()>
c001fdad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fdb1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fdb4:	e9 12 fe ff ff       	jmp    c001fbcb <Vm::x87Handler(regs*)+0x77>
c001fdb9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fdbd:	8d 50 40             	lea    edx,[eax+0x40]
c001fdc0:	80 fa 07             	cmp    dl,0x7
c001fdc3:	77 29                	ja     c001fdee <Vm::x87Handler(regs*)+0x29a>
c001fdc5:	83 ec 0c             	sub    esp,0xc
c001fdc8:	2d c0 00 00 00       	sub    eax,0xc0
c001fdcd:	50                   	push   eax
c001fdce:	e8 44 fc ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fdd3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdda:	89 c6                	mov    esi,eax
c001fddc:	89 d7                	mov    edi,edx
c001fdde:	e8 34 fc ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fde3:	57                   	push   edi
c001fde4:	56                   	push   esi
c001fde5:	52                   	push   edx
c001fde6:	50                   	push   eax
c001fde7:	e8 a1 fb ff ff       	call   c001f98d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdec:	eb 2f                	jmp    c001fe1d <Vm::x87Handler(regs*)+0x2c9>
c001fdee:	8d 50 38             	lea    edx,[eax+0x38]
c001fdf1:	80 fa 07             	cmp    dl,0x7
c001fdf4:	77 2f                	ja     c001fe25 <Vm::x87Handler(regs*)+0x2d1>
c001fdf6:	83 ec 0c             	sub    esp,0xc
c001fdf9:	2d c8 00 00 00       	sub    eax,0xc8
c001fdfe:	50                   	push   eax
c001fdff:	e8 13 fc ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fe04:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe0b:	89 c6                	mov    esi,eax
c001fe0d:	89 d7                	mov    edi,edx
c001fe0f:	e8 03 fc ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fe14:	57                   	push   edi
c001fe15:	56                   	push   esi
c001fe16:	52                   	push   edx
c001fe17:	50                   	push   eax
c001fe18:	e8 a9 fb ff ff       	call   c001f9c6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe1d:	83 c4 1c             	add    esp,0x1c
c001fe20:	e9 d8 fd ff ff       	jmp    c001fbfd <Vm::x87Handler(regs*)+0xa9>
c001fe25:	8d 50 30             	lea    edx,[eax+0x30]
c001fe28:	80 fa 07             	cmp    dl,0x7
c001fe2b:	77 0d                	ja     c001fe3a <Vm::x87Handler(regs*)+0x2e6>
c001fe2d:	83 ec 0c             	sub    esp,0xc
c001fe30:	2d d0 00 00 00       	sub    eax,0xd0
c001fe35:	e9 99 03 00 00       	jmp    c00201d3 <Vm::x87Handler(regs*)+0x67f>
c001fe3a:	8d 50 28             	lea    edx,[eax+0x28]
c001fe3d:	80 fa 07             	cmp    dl,0x7
c001fe40:	77 0d                	ja     c001fe4f <Vm::x87Handler(regs*)+0x2fb>
c001fe42:	83 ec 0c             	sub    esp,0xc
c001fe45:	2d d8 00 00 00       	sub    eax,0xd8
c001fe4a:	e9 c0 03 00 00       	jmp    c002020f <Vm::x87Handler(regs*)+0x6bb>
c001fe4f:	8d 50 20             	lea    edx,[eax+0x20]
c001fe52:	80 fa 07             	cmp    dl,0x7
c001fe55:	77 1b                	ja     c001fe72 <Vm::x87Handler(regs*)+0x31e>
c001fe57:	83 ec 0c             	sub    esp,0xc
c001fe5a:	2d e0 00 00 00       	sub    eax,0xe0
c001fe5f:	50                   	push   eax
c001fe60:	e8 b2 fb ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fe65:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe6c:	89 c6                	mov    esi,eax
c001fe6e:	89 d7                	mov    edi,edx
c001fe70:	eb 22                	jmp    c001fe94 <Vm::x87Handler(regs*)+0x340>
c001fe72:	8d 50 18             	lea    edx,[eax+0x18]
c001fe75:	80 fa 07             	cmp    dl,0x7
c001fe78:	77 2d                	ja     c001fea7 <Vm::x87Handler(regs*)+0x353>
c001fe7a:	83 ec 0c             	sub    esp,0xc
c001fe7d:	6a 00                	push   0x0
c001fe7f:	e8 93 fb ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fe84:	89 c6                	mov    esi,eax
c001fe86:	89 d7                	mov    edi,edx
c001fe88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe8c:	2d e8 00 00 00       	sub    eax,0xe8
c001fe91:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe94:	e8 7e fb ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fe99:	57                   	push   edi
c001fe9a:	56                   	push   esi
c001fe9b:	52                   	push   edx
c001fe9c:	50                   	push   eax
c001fe9d:	e8 15 fb ff ff       	call   c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fea2:	e9 76 ff ff ff       	jmp    c001fe1d <Vm::x87Handler(regs*)+0x2c9>
c001fea7:	8d 50 10             	lea    edx,[eax+0x10]
c001feaa:	80 fa 07             	cmp    dl,0x7
c001fead:	77 1b                	ja     c001feca <Vm::x87Handler(regs*)+0x376>
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	2d f0 00 00 00       	sub    eax,0xf0
c001feb7:	50                   	push   eax
c001feb8:	e8 5a fb ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001febd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fec4:	89 c6                	mov    esi,eax
c001fec6:	89 d7                	mov    edi,edx
c001fec8:	eb 22                	jmp    c001feec <Vm::x87Handler(regs*)+0x398>
c001feca:	3c f7                	cmp    al,0xf7
c001fecc:	0f 86 d1 03 00 00    	jbe    c00202a3 <Vm::x87Handler(regs*)+0x74f>
c001fed2:	83 ec 0c             	sub    esp,0xc
c001fed5:	6a 00                	push   0x0
c001fed7:	e8 3b fb ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fedc:	89 c6                	mov    esi,eax
c001fede:	89 d7                	mov    edi,edx
c001fee0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee4:	2d f8 00 00 00       	sub    eax,0xf8
c001fee9:	89 04 24             	mov    DWORD PTR [esp],eax
c001feec:	e8 26 fb ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fef1:	57                   	push   edi
c001fef2:	56                   	push   esi
c001fef3:	52                   	push   edx
c001fef4:	50                   	push   eax
c001fef5:	e8 eb fa ff ff       	call   c001f9e5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fefa:	83 c4 1c             	add    esp,0x1c
c001fefd:	52                   	push   edx
c001fefe:	50                   	push   eax
c001feff:	6a 00                	push   0x0
c001ff01:	e9 51 02 00 00       	jmp    c0020157 <Vm::x87Handler(regs*)+0x603>
c001ff06:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0a:	8d 50 40             	lea    edx,[eax+0x40]
c001ff0d:	80 fa 07             	cmp    dl,0x7
c001ff10:	77 37                	ja     c001ff49 <Vm::x87Handler(regs*)+0x3f5>
c001ff12:	83 ec 0c             	sub    esp,0xc
c001ff15:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1a:	50                   	push   eax
c001ff1b:	e8 f7 fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ff20:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff27:	89 c6                	mov    esi,eax
c001ff29:	89 d7                	mov    edi,edx
c001ff2b:	e8 e7 fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ff30:	57                   	push   edi
c001ff31:	56                   	push   esi
c001ff32:	52                   	push   edx
c001ff33:	50                   	push   eax
c001ff34:	e8 54 fa ff ff       	call   c001f98d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff39:	83 c4 1c             	add    esp,0x1c
c001ff3c:	52                   	push   edx
c001ff3d:	50                   	push   eax
c001ff3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff42:	2d c0 00 00 00       	sub    eax,0xc0
c001ff47:	eb 3d                	jmp    c001ff86 <Vm::x87Handler(regs*)+0x432>
c001ff49:	8d 50 38             	lea    edx,[eax+0x38]
c001ff4c:	80 fa 07             	cmp    dl,0x7
c001ff4f:	77 3b                	ja     c001ff8c <Vm::x87Handler(regs*)+0x438>
c001ff51:	83 ec 0c             	sub    esp,0xc
c001ff54:	2d c8 00 00 00       	sub    eax,0xc8
c001ff59:	50                   	push   eax
c001ff5a:	e8 b8 fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ff5f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff66:	89 c6                	mov    esi,eax
c001ff68:	89 d7                	mov    edi,edx
c001ff6a:	e8 a8 fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ff6f:	57                   	push   edi
c001ff70:	56                   	push   esi
c001ff71:	52                   	push   edx
c001ff72:	50                   	push   eax
c001ff73:	e8 4e fa ff ff       	call   c001f9c6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff78:	83 c4 1c             	add    esp,0x1c
c001ff7b:	52                   	push   edx
c001ff7c:	50                   	push   eax
c001ff7d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff81:	2d c8 00 00 00       	sub    eax,0xc8
c001ff86:	50                   	push   eax
c001ff87:	e9 75 fc ff ff       	jmp    c001fc01 <Vm::x87Handler(regs*)+0xad>
c001ff8c:	83 c0 18             	add    eax,0x18
c001ff8f:	3c 07                	cmp    al,0x7
c001ff91:	0f 87 3b 04 00 00    	ja     c00203d2 <Vm::x87Handler(regs*)+0x87e>
c001ff97:	83 ec 0c             	sub    esp,0xc
c001ff9a:	6a 00                	push   0x0
c001ff9c:	e8 76 fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ffa1:	89 c6                	mov    esi,eax
c001ffa3:	89 d7                	mov    edi,edx
c001ffa5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa9:	2d e8 00 00 00       	sub    eax,0xe8
c001ffae:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffb1:	e8 61 fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ffb6:	57                   	push   edi
c001ffb7:	56                   	push   esi
c001ffb8:	52                   	push   edx
c001ffb9:	50                   	push   eax
c001ffba:	e8 f8 f9 ff ff       	call   c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffbf:	83 c4 1c             	add    esp,0x1c
c001ffc2:	52                   	push   edx
c001ffc3:	50                   	push   eax
c001ffc4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffc8:	2d e8 00 00 00       	sub    eax,0xe8
c001ffcd:	eb b7                	jmp    c001ff86 <Vm::x87Handler(regs*)+0x432>
c001ffcf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd3:	8d 50 40             	lea    edx,[eax+0x40]
c001ffd6:	80 fa 07             	cmp    dl,0x7
c001ffd9:	77 3a                	ja     c0020015 <Vm::x87Handler(regs*)+0x4c1>
c001ffdb:	83 ec 0c             	sub    esp,0xc
c001ffde:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe3:	50                   	push   eax
c001ffe4:	e8 2e fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001ffe9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fff0:	89 c6                	mov    esi,eax
c001fff2:	89 d7                	mov    edi,edx
c001fff4:	e8 1e fa ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c001fff9:	57                   	push   edi
c001fffa:	56                   	push   esi
c001fffb:	52                   	push   edx
c001fffc:	50                   	push   eax
c001fffd:	e8 8b f9 ff ff       	call   c001f98d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020002:	83 c4 1c             	add    esp,0x1c
c0020005:	52                   	push   edx
c0020006:	50                   	push   eax
c0020007:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000b:	2d c0 00 00 00       	sub    eax,0xc0
c0020010:	e9 9e 01 00 00       	jmp    c00201b3 <Vm::x87Handler(regs*)+0x65f>
c0020015:	8d 50 20             	lea    edx,[eax+0x20]
c0020018:	80 fa 07             	cmp    dl,0x7
c002001b:	77 3a                	ja     c0020057 <Vm::x87Handler(regs*)+0x503>
c002001d:	83 ec 0c             	sub    esp,0xc
c0020020:	2d e0 00 00 00       	sub    eax,0xe0
c0020025:	50                   	push   eax
c0020026:	e8 ec f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002002b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020032:	89 c6                	mov    esi,eax
c0020034:	89 d7                	mov    edi,edx
c0020036:	e8 dc f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002003b:	57                   	push   edi
c002003c:	56                   	push   esi
c002003d:	52                   	push   edx
c002003e:	50                   	push   eax
c002003f:	e8 73 f9 ff ff       	call   c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020044:	83 c4 1c             	add    esp,0x1c
c0020047:	52                   	push   edx
c0020048:	50                   	push   eax
c0020049:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002004d:	2d e0 00 00 00       	sub    eax,0xe0
c0020052:	e9 5c 01 00 00       	jmp    c00201b3 <Vm::x87Handler(regs*)+0x65f>
c0020057:	8d 50 18             	lea    edx,[eax+0x18]
c002005a:	80 fa 07             	cmp    dl,0x7
c002005d:	77 3b                	ja     c002009a <Vm::x87Handler(regs*)+0x546>
c002005f:	83 ec 0c             	sub    esp,0xc
c0020062:	6a 00                	push   0x0
c0020064:	e8 ae f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c0020069:	89 c6                	mov    esi,eax
c002006b:	89 d7                	mov    edi,edx
c002006d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020071:	2d e8 00 00 00       	sub    eax,0xe8
c0020076:	89 04 24             	mov    DWORD PTR [esp],eax
c0020079:	e8 99 f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002007e:	57                   	push   edi
c002007f:	56                   	push   esi
c0020080:	52                   	push   edx
c0020081:	50                   	push   eax
c0020082:	e8 30 f9 ff ff       	call   c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020087:	83 c4 1c             	add    esp,0x1c
c002008a:	52                   	push   edx
c002008b:	50                   	push   eax
c002008c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020090:	2d e8 00 00 00       	sub    eax,0xe8
c0020095:	e9 19 01 00 00       	jmp    c00201b3 <Vm::x87Handler(regs*)+0x65f>
c002009a:	8d 50 38             	lea    edx,[eax+0x38]
c002009d:	80 fa 07             	cmp    dl,0x7
c00200a0:	77 37                	ja     c00200d9 <Vm::x87Handler(regs*)+0x585>
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	2d c8 00 00 00       	sub    eax,0xc8
c00200aa:	50                   	push   eax
c00200ab:	e8 67 f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00200b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200b7:	89 c6                	mov    esi,eax
c00200b9:	89 d7                	mov    edi,edx
c00200bb:	e8 57 f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00200c0:	57                   	push   edi
c00200c1:	56                   	push   esi
c00200c2:	52                   	push   edx
c00200c3:	50                   	push   eax
c00200c4:	e8 fd f8 ff ff       	call   c001f9c6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200c9:	83 c4 1c             	add    esp,0x1c
c00200cc:	52                   	push   edx
c00200cd:	50                   	push   eax
c00200ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d2:	2d c8 00 00 00       	sub    eax,0xc8
c00200d7:	eb 7d                	jmp    c0020156 <Vm::x87Handler(regs*)+0x602>
c00200d9:	3c f7                	cmp    al,0xf7
c00200db:	76 38                	jbe    c0020115 <Vm::x87Handler(regs*)+0x5c1>
c00200dd:	83 ec 0c             	sub    esp,0xc
c00200e0:	6a 00                	push   0x0
c00200e2:	e8 30 f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00200e7:	89 c6                	mov    esi,eax
c00200e9:	89 d7                	mov    edi,edx
c00200eb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ef:	2d f8 00 00 00       	sub    eax,0xf8
c00200f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00200f7:	e8 1b f9 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00200fc:	57                   	push   edi
c00200fd:	56                   	push   esi
c00200fe:	52                   	push   edx
c00200ff:	50                   	push   eax
c0020100:	e8 e0 f8 ff ff       	call   c001f9e5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020105:	83 c4 1c             	add    esp,0x1c
c0020108:	52                   	push   edx
c0020109:	50                   	push   eax
c002010a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002010e:	2d f8 00 00 00       	sub    eax,0xf8
c0020113:	eb 41                	jmp    c0020156 <Vm::x87Handler(regs*)+0x602>
c0020115:	8d 50 10             	lea    edx,[eax+0x10]
c0020118:	80 fa 07             	cmp    dl,0x7
c002011b:	0f 87 5a 01 00 00    	ja     c002027b <Vm::x87Handler(regs*)+0x727>
c0020121:	83 ec 0c             	sub    esp,0xc
c0020124:	2d f0 00 00 00       	sub    eax,0xf0
c0020129:	50                   	push   eax
c002012a:	e8 e8 f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002012f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020136:	89 c6                	mov    esi,eax
c0020138:	89 d7                	mov    edi,edx
c002013a:	e8 d8 f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002013f:	57                   	push   edi
c0020140:	56                   	push   esi
c0020141:	52                   	push   edx
c0020142:	50                   	push   eax
c0020143:	e8 9d f8 ff ff       	call   c001f9e5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020148:	83 c4 1c             	add    esp,0x1c
c002014b:	52                   	push   edx
c002014c:	50                   	push   eax
c002014d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020151:	2d f0 00 00 00       	sub    eax,0xf0
c0020156:	50                   	push   eax
c0020157:	e8 fe f8 ff ff       	call   c001fa5a <Vm::fpuSetReg(int, unsigned long long)>
c002015c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020160:	e8 9d f9 ff ff       	call   c001fb02 <Vm::fpuPop()>
c0020165:	e9 5e fa ff ff       	jmp    c001fbc8 <Vm::x87Handler(regs*)+0x74>
c002016a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002016e:	8d 50 30             	lea    edx,[eax+0x30]
c0020171:	80 fa 07             	cmp    dl,0x7
c0020174:	77 1d                	ja     c0020193 <Vm::x87Handler(regs*)+0x63f>
c0020176:	83 ec 0c             	sub    esp,0xc
c0020179:	6a 00                	push   0x0
c002017b:	e8 97 f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c0020180:	83 c4 0c             	add    esp,0xc
c0020183:	52                   	push   edx
c0020184:	50                   	push   eax
c0020185:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020189:	2d d0 00 00 00       	sub    eax,0xd0
c002018e:	e9 f3 fd ff ff       	jmp    c001ff86 <Vm::x87Handler(regs*)+0x432>
c0020193:	8d 50 28             	lea    edx,[eax+0x28]
c0020196:	80 fa 07             	cmp    dl,0x7
c0020199:	77 28                	ja     c00201c3 <Vm::x87Handler(regs*)+0x66f>
c002019b:	83 ec 0c             	sub    esp,0xc
c002019e:	6a 00                	push   0x0
c00201a0:	e8 72 f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00201a5:	83 c4 0c             	add    esp,0xc
c00201a8:	52                   	push   edx
c00201a9:	50                   	push   eax
c00201aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201ae:	2d d8 00 00 00       	sub    eax,0xd8
c00201b3:	50                   	push   eax
c00201b4:	e8 a1 f8 ff ff       	call   c001fa5a <Vm::fpuSetReg(int, unsigned long long)>
c00201b9:	e8 44 f9 ff ff       	call   c001fb02 <Vm::fpuPop()>
c00201be:	e9 01 fa ff ff       	jmp    c001fbc4 <Vm::x87Handler(regs*)+0x70>
c00201c3:	8d 50 20             	lea    edx,[eax+0x20]
c00201c6:	80 fa 07             	cmp    dl,0x7
c00201c9:	77 30                	ja     c00201fb <Vm::x87Handler(regs*)+0x6a7>
c00201cb:	83 ec 0c             	sub    esp,0xc
c00201ce:	2d e0 00 00 00       	sub    eax,0xe0
c00201d3:	50                   	push   eax
c00201d4:	e8 3e f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00201d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e0:	89 c6                	mov    esi,eax
c00201e2:	89 d7                	mov    edi,edx
c00201e4:	e8 2e f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00201e9:	57                   	push   edi
c00201ea:	56                   	push   esi
c00201eb:	52                   	push   edx
c00201ec:	50                   	push   eax
c00201ed:	e8 48 f7 ff ff       	call   c001f93a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201f2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201f6:	e9 54 02 00 00       	jmp    c002044f <Vm::x87Handler(regs*)+0x8fb>
c00201fb:	8d 50 18             	lea    edx,[eax+0x18]
c00201fe:	80 fa 07             	cmp    dl,0x7
c0020201:	0f 87 43 fb ff ff    	ja     c001fd4a <Vm::x87Handler(regs*)+0x1f6>
c0020207:	83 ec 0c             	sub    esp,0xc
c002020a:	2d e8 00 00 00       	sub    eax,0xe8
c002020f:	50                   	push   eax
c0020210:	e8 02 f8 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c0020215:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002021c:	89 c6                	mov    esi,eax
c002021e:	89 d7                	mov    edi,edx
c0020220:	e8 f2 f7 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c0020225:	57                   	push   edi
c0020226:	56                   	push   esi
c0020227:	52                   	push   edx
c0020228:	50                   	push   eax
c0020229:	e8 0c f7 ff ff       	call   c001f93a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002022e:	83 c4 20             	add    esp,0x20
c0020231:	e8 cc f8 ff ff       	call   c001fb02 <Vm::fpuPop()>
c0020236:	eb 62                	jmp    c002029a <Vm::x87Handler(regs*)+0x746>
c0020238:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002023c:	0f 85 0f 01 00 00    	jne    c0020351 <Vm::x87Handler(regs*)+0x7fd>
c0020242:	83 ec 0c             	sub    esp,0xc
c0020245:	6a 01                	push   0x1
c0020247:	e8 cb f7 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002024c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020253:	89 c6                	mov    esi,eax
c0020255:	89 d7                	mov    edi,edx
c0020257:	e8 bb f7 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002025c:	57                   	push   edi
c002025d:	56                   	push   esi
c002025e:	52                   	push   edx
c002025f:	50                   	push   eax
c0020260:	e8 d5 f6 ff ff       	call   c001f93a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020265:	83 c4 20             	add    esp,0x20
c0020268:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002026c:	e8 91 f8 ff ff       	call   c001fb02 <Vm::fpuPop()>
c0020271:	e8 8c f8 ff ff       	call   c001fb02 <Vm::fpuPop()>
c0020276:	e9 50 f9 ff ff       	jmp    c001fbcb <Vm::x87Handler(regs*)+0x77>
c002027b:	3c d9                	cmp    al,0xd9
c002027d:	0f 85 b5 02 00 00    	jne    c0020538 <Vm::x87Handler(regs*)+0x9e4>
c0020283:	eb bd                	jmp    c0020242 <Vm::x87Handler(regs*)+0x6ee>
c0020285:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020289:	0f 85 ea 02 00 00    	jne    c0020579 <Vm::x87Handler(regs*)+0xa25>
c002028f:	0f b7 05 00 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b00
c0020296:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002029a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002029e:	e9 28 f9 ff ff       	jmp    c001fbcb <Vm::x87Handler(regs*)+0x77>
c00202a3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a7:	84 d2                	test   dl,dl
c00202a9:	75 0f                	jne    c00202ba <Vm::x87Handler(regs*)+0x766>
c00202ab:	83 ec 0c             	sub    esp,0xc
c00202ae:	ff 36                	push   DWORD PTR [esi]
c00202b0:	e8 b1 f4 ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c00202b5:	e9 2c 01 00 00       	jmp    c00203e6 <Vm::x87Handler(regs*)+0x892>
c00202ba:	80 fa 01             	cmp    dl,0x1
c00202bd:	75 0f                	jne    c00202ce <Vm::x87Handler(regs*)+0x77a>
c00202bf:	83 ec 0c             	sub    esp,0xc
c00202c2:	ff 36                	push   DWORD PTR [esi]
c00202c4:	e8 9d f4 ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c00202c9:	e9 81 02 00 00       	jmp    c002054f <Vm::x87Handler(regs*)+0x9fb>
c00202ce:	80 fa 04             	cmp    dl,0x4
c00202d1:	75 0f                	jne    c00202e2 <Vm::x87Handler(regs*)+0x78e>
c00202d3:	83 ec 0c             	sub    esp,0xc
c00202d6:	ff 36                	push   DWORD PTR [esi]
c00202d8:	e8 89 f4 ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c00202dd:	e9 86 01 00 00       	jmp    c0020468 <Vm::x87Handler(regs*)+0x914>
c00202e2:	80 fa 05             	cmp    dl,0x5
c00202e5:	75 1b                	jne    c0020302 <Vm::x87Handler(regs*)+0x7ae>
c00202e7:	83 ec 0c             	sub    esp,0xc
c00202ea:	6a 00                	push   0x0
c00202ec:	e8 26 f7 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00202f1:	89 c7                	mov    edi,eax
c00202f3:	89 d5                	mov    ebp,edx
c00202f5:	58                   	pop    eax
c00202f6:	ff 36                	push   DWORD PTR [esi]
c00202f8:	e8 69 f4 ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c00202fd:	e9 a3 01 00 00       	jmp    c00204a5 <Vm::x87Handler(regs*)+0x951>
c0020302:	80 fa 06             	cmp    dl,0x6
c0020305:	75 0f                	jne    c0020316 <Vm::x87Handler(regs*)+0x7c2>
c0020307:	83 ec 0c             	sub    esp,0xc
c002030a:	ff 36                	push   DWORD PTR [esi]
c002030c:	e8 55 f4 ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c0020311:	e9 ae 01 00 00       	jmp    c00204c4 <Vm::x87Handler(regs*)+0x970>
c0020316:	31 c0                	xor    eax,eax
c0020318:	80 fa 07             	cmp    dl,0x7
c002031b:	0f 85 94 02 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c0020321:	83 ec 0c             	sub    esp,0xc
c0020324:	6a 00                	push   0x0
c0020326:	e8 ec f6 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002032b:	89 c7                	mov    edi,eax
c002032d:	89 d5                	mov    ebp,edx
c002032f:	58                   	pop    eax
c0020330:	ff 36                	push   DWORD PTR [esi]
c0020332:	e8 2f f4 ff ff       	call   c001f766 <Vm::fpu32ToInternal(unsigned int)>
c0020337:	e9 cb 01 00 00       	jmp    c0020507 <Vm::x87Handler(regs*)+0x9b3>
c002033c:	80 fa 03             	cmp    dl,0x3
c002033f:	0f 85 d3 01 00 00    	jne    c0020518 <Vm::x87Handler(regs*)+0x9c4>
c0020345:	e8 b8 f7 ff ff       	call   c001fb02 <Vm::fpuPop()>
c002034a:	51                   	push   ecx
c002034b:	51                   	push   ecx
c002034c:	e9 de 01 00 00       	jmp    c002052f <Vm::x87Handler(regs*)+0x9db>
c0020351:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020355:	80 fa 01             	cmp    dl,0x1
c0020358:	75 09                	jne    c0020363 <Vm::x87Handler(regs*)+0x80f>
c002035a:	57                   	push   edi
c002035b:	57                   	push   edi
c002035c:	8b 06                	mov    eax,DWORD PTR [esi]
c002035e:	e9 e3 01 00 00       	jmp    c0020546 <Vm::x87Handler(regs*)+0x9f2>
c0020363:	80 fa 04             	cmp    dl,0x4
c0020366:	75 12                	jne    c002037a <Vm::x87Handler(regs*)+0x826>
c0020368:	31 d2                	xor    edx,edx
c002036a:	51                   	push   ecx
c002036b:	51                   	push   ecx
c002036c:	8b 06                	mov    eax,DWORD PTR [esi]
c002036e:	52                   	push   edx
c002036f:	50                   	push   eax
c0020370:	e8 d0 f4 ff ff       	call   c001f845 <Vm::fpuLongToFloat(long long)>
c0020375:	e9 ee 00 00 00       	jmp    c0020468 <Vm::x87Handler(regs*)+0x914>
c002037a:	31 c0                	xor    eax,eax
c002037c:	80 fa 07             	cmp    dl,0x7
c002037f:	0f 85 30 02 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c0020385:	83 ec 0c             	sub    esp,0xc
c0020388:	6a 00                	push   0x0
c002038a:	e8 88 f6 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002038f:	89 c7                	mov    edi,eax
c0020391:	89 d5                	mov    ebp,edx
c0020393:	58                   	pop    eax
c0020394:	8b 06                	mov    eax,DWORD PTR [esi]
c0020396:	5a                   	pop    edx
c0020397:	31 d2                	xor    edx,edx
c0020399:	52                   	push   edx
c002039a:	50                   	push   eax
c002039b:	e8 a5 f4 ff ff       	call   c001f845 <Vm::fpuLongToFloat(long long)>
c00203a0:	e9 62 01 00 00       	jmp    c0020507 <Vm::x87Handler(regs*)+0x9b3>
c00203a5:	84 d2                	test   dl,dl
c00203a7:	75 0d                	jne    c00203b6 <Vm::x87Handler(regs*)+0x862>
c00203a9:	31 d2                	xor    edx,edx
c00203ab:	55                   	push   ebp
c00203ac:	55                   	push   ebp
c00203ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00203af:	52                   	push   edx
c00203b0:	50                   	push   eax
c00203b1:	e9 d3 01 00 00       	jmp    c0020589 <Vm::x87Handler(regs*)+0xa35>
c00203b6:	31 c0                	xor    eax,eax
c00203b8:	80 fa 02             	cmp    dl,0x2
c00203bb:	0f 85 f4 01 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c00203c1:	83 ec 0c             	sub    esp,0xc
c00203c4:	6a 00                	push   0x0
c00203c6:	e8 4c f6 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00203cb:	59                   	pop    ecx
c00203cc:	5f                   	pop    edi
c00203cd:	e9 6a f9 ff ff       	jmp    c001fd3c <Vm::x87Handler(regs*)+0x1e8>
c00203d2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203d6:	84 d2                	test   dl,dl
c00203d8:	75 2a                	jne    c0020404 <Vm::x87Handler(regs*)+0x8b0>
c00203da:	50                   	push   eax
c00203db:	50                   	push   eax
c00203dc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203df:	ff 36                	push   DWORD PTR [esi]
c00203e1:	e8 c5 f3 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c00203e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203ed:	89 c6                	mov    esi,eax
c00203ef:	89 d7                	mov    edi,edx
c00203f1:	e8 21 f6 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00203f6:	57                   	push   edi
c00203f7:	56                   	push   esi
c00203f8:	52                   	push   edx
c00203f9:	50                   	push   eax
c00203fa:	e8 8e f5 ff ff       	call   c001f98d <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203ff:	e9 64 01 00 00       	jmp    c0020568 <Vm::x87Handler(regs*)+0xa14>
c0020404:	80 fa 01             	cmp    dl,0x1
c0020407:	75 11                	jne    c002041a <Vm::x87Handler(regs*)+0x8c6>
c0020409:	50                   	push   eax
c002040a:	50                   	push   eax
c002040b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002040e:	ff 36                	push   DWORD PTR [esi]
c0020410:	e8 96 f3 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c0020415:	e9 35 01 00 00       	jmp    c002054f <Vm::x87Handler(regs*)+0x9fb>
c002041a:	80 fa 02             	cmp    dl,0x2
c002041d:	0f 85 54 f9 ff ff    	jne    c001fd77 <Vm::x87Handler(regs*)+0x223>
c0020423:	55                   	push   ebp
c0020424:	55                   	push   ebp
c0020425:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020428:	ff 36                	push   DWORD PTR [esi]
c002042a:	e8 7c f3 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c002042f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020436:	89 c6                	mov    esi,eax
c0020438:	89 d7                	mov    edi,edx
c002043a:	e8 d8 f5 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002043f:	57                   	push   edi
c0020440:	56                   	push   esi
c0020441:	52                   	push   edx
c0020442:	50                   	push   eax
c0020443:	e8 f2 f4 ff ff       	call   c001f93a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020448:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002044c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002044f:	83 c4 20             	add    esp,0x20
c0020452:	e9 74 f7 ff ff       	jmp    c001fbcb <Vm::x87Handler(regs*)+0x77>
c0020457:	80 fa 04             	cmp    dl,0x4
c002045a:	75 2a                	jne    c0020486 <Vm::x87Handler(regs*)+0x932>
c002045c:	51                   	push   ecx
c002045d:	51                   	push   ecx
c002045e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020461:	ff 36                	push   DWORD PTR [esi]
c0020463:	e8 43 f3 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c0020468:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002046f:	89 c6                	mov    esi,eax
c0020471:	89 d7                	mov    edi,edx
c0020473:	e8 9f f5 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c0020478:	57                   	push   edi
c0020479:	56                   	push   esi
c002047a:	52                   	push   edx
c002047b:	50                   	push   eax
c002047c:	e8 36 f5 ff ff       	call   c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020481:	e9 e2 00 00 00       	jmp    c0020568 <Vm::x87Handler(regs*)+0xa14>
c0020486:	80 fa 05             	cmp    dl,0x5
c0020489:	75 28                	jne    c00204b3 <Vm::x87Handler(regs*)+0x95f>
c002048b:	83 ec 0c             	sub    esp,0xc
c002048e:	6a 00                	push   0x0
c0020490:	e8 82 f5 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c0020495:	89 c7                	mov    edi,eax
c0020497:	89 d5                	mov    ebp,edx
c0020499:	58                   	pop    eax
c002049a:	5a                   	pop    edx
c002049b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002049e:	ff 36                	push   DWORD PTR [esi]
c00204a0:	e8 06 f3 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	55                   	push   ebp
c00204a9:	57                   	push   edi
c00204aa:	52                   	push   edx
c00204ab:	50                   	push   eax
c00204ac:	e8 06 f5 ff ff       	call   c001f9b7 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204b1:	eb 60                	jmp    c0020513 <Vm::x87Handler(regs*)+0x9bf>
c00204b3:	80 fa 06             	cmp    dl,0x6
c00204b6:	75 2a                	jne    c00204e2 <Vm::x87Handler(regs*)+0x98e>
c00204b8:	51                   	push   ecx
c00204b9:	51                   	push   ecx
c00204ba:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204bd:	ff 36                	push   DWORD PTR [esi]
c00204bf:	e8 e7 f2 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c00204c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204cb:	89 c6                	mov    esi,eax
c00204cd:	89 d7                	mov    edi,edx
c00204cf:	e8 43 f5 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00204d4:	57                   	push   edi
c00204d5:	56                   	push   esi
c00204d6:	52                   	push   edx
c00204d7:	50                   	push   eax
c00204d8:	e8 08 f5 ff ff       	call   c001f9e5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204dd:	e9 86 00 00 00       	jmp    c0020568 <Vm::x87Handler(regs*)+0xa14>
c00204e2:	31 c0                	xor    eax,eax
c00204e4:	80 fa 07             	cmp    dl,0x7
c00204e7:	0f 85 c8 00 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c00204ed:	83 ec 0c             	sub    esp,0xc
c00204f0:	6a 00                	push   0x0
c00204f2:	e8 20 f5 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c00204f7:	89 c7                	mov    edi,eax
c00204f9:	89 d5                	mov    ebp,edx
c00204fb:	58                   	pop    eax
c00204fc:	5a                   	pop    edx
c00204fd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020500:	ff 36                	push   DWORD PTR [esi]
c0020502:	e8 a4 f2 ff ff       	call   c001f7ab <Vm::fpu64ToInternal(unsigned long long)>
c0020507:	83 c4 10             	add    esp,0x10
c002050a:	55                   	push   ebp
c002050b:	57                   	push   edi
c002050c:	52                   	push   edx
c002050d:	50                   	push   eax
c002050e:	e8 d2 f4 ff ff       	call   c001f9e5 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020513:	83 c4 0c             	add    esp,0xc
c0020516:	eb 53                	jmp    c002056b <Vm::x87Handler(regs*)+0xa17>
c0020518:	31 c0                	xor    eax,eax
c002051a:	80 fa 02             	cmp    dl,0x2
c002051d:	0f 85 92 00 00 00    	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c0020523:	83 ec 0c             	sub    esp,0xc
c0020526:	6a 00                	push   0x0
c0020528:	e8 ea f4 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002052d:	59                   	pop    ecx
c002052e:	5f                   	pop    edi
c002052f:	52                   	push   edx
c0020530:	50                   	push   eax
c0020531:	e8 27 f2 ff ff       	call   c001f75d <Vm::fpuInternalTo64(unsigned long long)>
c0020536:	eb 70                	jmp    c00205a8 <Vm::x87Handler(regs*)+0xa54>
c0020538:	31 c0                	xor    eax,eax
c002053a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002053f:	75 74                	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c0020541:	50                   	push   eax
c0020542:	50                   	push   eax
c0020543:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020546:	31 d2                	xor    edx,edx
c0020548:	52                   	push   edx
c0020549:	50                   	push   eax
c002054a:	e8 f6 f2 ff ff       	call   c001f845 <Vm::fpuLongToFloat(long long)>
c002054f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020556:	89 c6                	mov    esi,eax
c0020558:	89 d7                	mov    edi,edx
c002055a:	e8 b8 f4 ff ff       	call   c001fa17 <Vm::fpuGetReg(int)>
c002055f:	57                   	push   edi
c0020560:	56                   	push   esi
c0020561:	52                   	push   edx
c0020562:	50                   	push   eax
c0020563:	e8 5e f4 ff ff       	call   c001f9c6 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020568:	83 c4 1c             	add    esp,0x1c
c002056b:	52                   	push   edx
c002056c:	50                   	push   eax
c002056d:	6a 00                	push   0x0
c002056f:	e8 e6 f4 ff ff       	call   c001fa5a <Vm::fpuSetReg(int, unsigned long long)>
c0020574:	e9 f2 f7 ff ff       	jmp    c001fd6b <Vm::x87Handler(regs*)+0x217>
c0020579:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002057d:	80 fa 05             	cmp    dl,0x5
c0020580:	75 11                	jne    c0020593 <Vm::x87Handler(regs*)+0xa3f>
c0020582:	55                   	push   ebp
c0020583:	55                   	push   ebp
c0020584:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020587:	ff 36                	push   DWORD PTR [esi]
c0020589:	e8 81 f2 ff ff       	call   c001f80f <Vm::fpuULongToFloat(unsigned long long)>
c002058e:	e9 cf f7 ff ff       	jmp    c001fd62 <Vm::x87Handler(regs*)+0x20e>
c0020593:	31 c0                	xor    eax,eax
c0020595:	80 fa 07             	cmp    dl,0x7
c0020598:	75 1b                	jne    c00205b5 <Vm::x87Handler(regs*)+0xa61>
c002059a:	e8 63 f5 ff ff       	call   c001fb02 <Vm::fpuPop()>
c002059f:	51                   	push   ecx
c00205a0:	51                   	push   ecx
c00205a1:	52                   	push   edx
c00205a2:	50                   	push   eax
c00205a3:	e8 0c f2 ff ff       	call   c001f7b4 <Vm::fpuFloatToLong(unsigned long long)>
c00205a8:	83 c4 10             	add    esp,0x10
c00205ab:	89 06                	mov    DWORD PTR [esi],eax
c00205ad:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205b0:	e9 f8 f7 ff ff       	jmp    c001fdad <Vm::x87Handler(regs*)+0x259>
c00205b5:	83 c4 1c             	add    esp,0x1c
c00205b8:	5b                   	pop    ebx
c00205b9:	5e                   	pop    esi
c00205ba:	5f                   	pop    edi
c00205bb:	5d                   	pop    ebp
c00205bc:	c3                   	ret    

c00205bd <__static_initialization_and_destruction_0(int, int)>:
c00205bd:	83 ec 0c             	sub    esp,0xc
c00205c0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205c5:	75 1a                	jne    c00205e1 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205c7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205cf:	75 10                	jne    c00205e1 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205d1:	83 ec 0c             	sub    esp,0xc
c00205d4:	68 00 1b 03 c0       	push   0xc0031b00
c00205d9:	e8 12 88 00 00       	call   c0028df0 <Vm::_FPUState::_FPUState()>
c00205de:	83 c4 10             	add    esp,0x10
c00205e1:	90                   	nop
c00205e2:	83 c4 0c             	add    esp,0xc
c00205e5:	c3                   	ret    

c00205e6 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205e6:	83 ec 0c             	sub    esp,0xc
c00205e9:	83 ec 08             	sub    esp,0x8
c00205ec:	68 ff ff 00 00       	push   0xffff
c00205f1:	6a 01                	push   0x1
c00205f3:	e8 c5 ff ff ff       	call   c00205bd <__static_initialization_and_destruction_0(int, int)>
c00205f8:	83 c4 10             	add    esp,0x10
c00205fb:	83 c4 0c             	add    esp,0xc
c00205fe:	c3                   	ret    
c00205ff:	90                   	nop

c0020600 <FAT::getName()>:
c0020600:	b8 fc c8 02 c0       	mov    eax,0xc002c8fc
c0020605:	c3                   	ret    

c0020606 <FAT::tell(void*, unsigned long long*)>:
c0020606:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002060b:	75 06                	jne    c0020613 <FAT::tell(void*, unsigned long long*)+0xd>
c002060d:	b8 04 00 00 00       	mov    eax,0x4
c0020612:	c3                   	ret    
c0020613:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020618:	75 06                	jne    c0020620 <FAT::tell(void*, unsigned long long*)+0x1a>
c002061a:	b8 04 00 00 00       	mov    eax,0x4
c002061f:	c3                   	ret    
c0020620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020624:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020627:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002062a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002062e:	89 01                	mov    DWORD PTR [ecx],eax
c0020630:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020633:	b8 00 00 00 00       	mov    eax,0x0
c0020638:	c3                   	ret    
c0020639:	90                   	nop

c002063a <FAT::stat(void*, unsigned long long*)>:
c002063a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002063f:	75 06                	jne    c0020647 <FAT::stat(void*, unsigned long long*)+0xd>
c0020641:	b8 04 00 00 00       	mov    eax,0x4
c0020646:	c3                   	ret    
c0020647:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002064c:	75 06                	jne    c0020654 <FAT::stat(void*, unsigned long long*)+0x1a>
c002064e:	b8 04 00 00 00       	mov    eax,0x4
c0020653:	c3                   	ret    
c0020654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002065b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002065e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020662:	89 01                	mov    DWORD PTR [ecx],eax
c0020664:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020667:	b8 00 00 00 00       	mov    eax,0x0
c002066c:	c3                   	ret    
c002066d:	90                   	nop

c002066e <FAT::~FAT()>:
c002066e:	83 ec 0c             	sub    esp,0xc
c0020671:	ba 80 c9 02 c0       	mov    edx,0xc002c980
c0020676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067a:	89 10                	mov    DWORD PTR [eax],edx
c002067c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020680:	83 ec 0c             	sub    esp,0xc
c0020683:	50                   	push   eax
c0020684:	e8 bf 2c ff ff       	call   c0013348 <Filesystem::~Filesystem()>
c0020689:	83 c4 10             	add    esp,0x10
c002068c:	90                   	nop
c002068d:	83 c4 0c             	add    esp,0xc
c0020690:	c3                   	ret    
c0020691:	90                   	nop

c0020692 <FAT::~FAT()>:
c0020692:	83 ec 0c             	sub    esp,0xc
c0020695:	83 ec 0c             	sub    esp,0xc
c0020698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002069c:	e8 cd ff ff ff       	call   c002066e <FAT::~FAT()>
c00206a1:	83 c4 10             	add    esp,0x10
c00206a4:	83 ec 08             	sub    esp,0x8
c00206a7:	6a 08                	push   0x8
c00206a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ad:	e8 8d 28 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00206b2:	83 c4 10             	add    esp,0x10
c00206b5:	83 c4 0c             	add    esp,0xc
c00206b8:	c3                   	ret    
c00206b9:	90                   	nop

c00206ba <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206ba:	83 ec 1c             	sub    esp,0x1c
c00206bd:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206c4:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206cd:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00206d4:	83 f8 ff             	cmp    eax,0xffffffff
c00206d7:	75 34                	jne    c002070d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206d9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206dd:	88 c2                	mov    dl,al
c00206df:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00206e4:	01 d0                	add    eax,edx
c00206e6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206ea:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c00206f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f4:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c00206fb:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020700:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020704:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002070b:	eb 17                	jmp    c0020724 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002070d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020711:	88 c2                	mov    dl,al
c0020713:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020717:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c002071e:	01 d0                	add    eax,edx
c0020720:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020724:	83 ec 04             	sub    esp,0x4
c0020727:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002072b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002072f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020733:	50                   	push   eax
c0020734:	e8 ff 65 fe ff       	call   c0006d38 <f_getlabel>
c0020739:	83 c4 10             	add    esp,0x10
c002073c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020740:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020745:	75 07                	jne    c002074e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020747:	b8 00 00 00 00       	mov    eax,0x0
c002074c:	eb 05                	jmp    c0020753 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c002074e:	b8 01 00 00 00       	mov    eax,0x1
c0020753:	83 c4 1c             	add    esp,0x1c
c0020756:	c3                   	ret    
c0020757:	90                   	nop

c0020758 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020758:	57                   	push   edi
c0020759:	83 ec 58             	sub    esp,0x58
c002075c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020764:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020768:	b9 0f 00 00 00       	mov    ecx,0xf
c002076d:	b8 00 00 00 00       	mov    eax,0x0
c0020772:	fc                   	cld    
c0020773:	89 d7                	mov    edi,edx
c0020775:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020777:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002077b:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020782:	83 f8 ff             	cmp    eax,0xffffffff
c0020785:	75 34                	jne    c00207bb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020787:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002078b:	88 c2                	mov    dl,al
c002078d:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020792:	01 d0                	add    eax,edx
c0020794:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020798:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c002079e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207a2:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c00207a9:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00207ae:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207b2:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00207b9:	eb 17                	jmp    c00207d2 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207bb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207bf:	88 c2                	mov    dl,al
c00207c1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207c5:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00207cc:	01 d0                	add    eax,edx
c00207ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207d2:	83 ec 08             	sub    esp,0x8
c00207d5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207dd:	50                   	push   eax
c00207de:	e8 91 01 fe ff       	call   c0000974 <strcat>
c00207e3:	83 c4 10             	add    esp,0x10
c00207e6:	83 ec 0c             	sub    esp,0xc
c00207e9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207ed:	50                   	push   eax
c00207ee:	e8 33 67 fe ff       	call   c0006f26 <f_setlabel>
c00207f3:	83 c4 10             	add    esp,0x10
c00207f6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207fa:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207ff:	75 07                	jne    c0020808 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020801:	b8 00 00 00 00       	mov    eax,0x0
c0020806:	eb 05                	jmp    c002080d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020808:	b8 01 00 00 00       	mov    eax,0x1
c002080d:	83 c4 58             	add    esp,0x58
c0020810:	5f                   	pop    edi
c0020811:	c3                   	ret    

c0020812 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020812:	83 ec 2c             	sub    esp,0x2c
c0020815:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002081d:	83 ec 08             	sub    esp,0x8
c0020820:	68 20 c9 02 c0       	push   0xc002c920
c0020825:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020829:	e8 92 00 fe ff       	call   c00008c0 <strcmp>
c002082e:	83 c4 10             	add    esp,0x10
c0020831:	85 c0                	test   eax,eax
c0020833:	0f 94 c0             	sete   al
c0020836:	84 c0                	test   al,al
c0020838:	74 0d                	je     c0020847 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002083a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020842:	e9 a6 00 00 00       	jmp    c00208ed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020847:	83 ec 08             	sub    esp,0x8
c002084a:	68 12 c9 02 c0       	push   0xc002c912
c002084f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020853:	e8 68 00 fe ff       	call   c00008c0 <strcmp>
c0020858:	83 c4 10             	add    esp,0x10
c002085b:	85 c0                	test   eax,eax
c002085d:	0f 94 c0             	sete   al
c0020860:	84 c0                	test   al,al
c0020862:	74 0a                	je     c002086e <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020864:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002086c:	eb 7f                	jmp    c00208ed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002086e:	83 ec 08             	sub    esp,0x8
c0020871:	68 18 c9 02 c0       	push   0xc002c918
c0020876:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002087a:	e8 41 00 fe ff       	call   c00008c0 <strcmp>
c002087f:	83 c4 10             	add    esp,0x10
c0020882:	85 c0                	test   eax,eax
c0020884:	0f 94 c0             	sete   al
c0020887:	84 c0                	test   al,al
c0020889:	74 0a                	je     c0020895 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002088b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020893:	eb 58                	jmp    c00208ed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020895:	83 ec 08             	sub    esp,0x8
c0020898:	68 4c 95 02 c0       	push   0xc002954c
c002089d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208a1:	e8 1a 00 fe ff       	call   c00008c0 <strcmp>
c00208a6:	83 c4 10             	add    esp,0x10
c00208a9:	85 c0                	test   eax,eax
c00208ab:	0f 94 c0             	sete   al
c00208ae:	84 c0                	test   al,al
c00208b0:	74 0a                	je     c00208bc <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208b2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208ba:	eb 31                	jmp    c00208ed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208bc:	83 ec 08             	sub    esp,0x8
c00208bf:	68 1e c9 02 c0       	push   0xc002c91e
c00208c4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208c8:	e8 f3 ff fd ff       	call   c00008c0 <strcmp>
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	85 c0                	test   eax,eax
c00208d2:	0f 94 c0             	sete   al
c00208d5:	84 c0                	test   al,al
c00208d7:	74 0a                	je     c00208e3 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208d9:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208e1:	eb 0a                	jmp    c00208ed <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208e3:	b8 08 00 00 00       	mov    eax,0x8
c00208e8:	e9 04 01 00 00       	jmp    c00209f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208ed:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208f4:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208fd:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020904:	83 f8 ff             	cmp    eax,0xffffffff
c0020907:	75 34                	jne    c002093d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020909:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002090d:	88 c2                	mov    dl,al
c002090f:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020914:	01 d0                	add    eax,edx
c0020916:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002091a:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c0020920:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020924:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c002092b:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020930:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020934:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002093b:	eb 17                	jmp    c0020954 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002093d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020941:	88 c2                	mov    dl,al
c0020943:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020947:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c002094e:	01 d0                	add    eax,edx
c0020950:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020954:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020958:	88 04 24             	mov    BYTE PTR [esp],al
c002095b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002095f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020963:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002096b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020970:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020978:	83 ec 0c             	sub    esp,0xc
c002097b:	68 00 20 00 00       	push   0x2000
c0020980:	e8 be ee fe ff       	call   c000f843 <malloc>
c0020985:	83 c4 10             	add    esp,0x10
c0020988:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002098c:	68 00 20 00 00       	push   0x2000
c0020991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020995:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020999:	50                   	push   eax
c002099a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c002099e:	50                   	push   eax
c002099f:	e8 cd 69 fe ff       	call   c0007371 <f_mkfs>
c00209a4:	83 c4 10             	add    esp,0x10
c00209a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209b0:	75 07                	jne    c00209b9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209b2:	b8 00 00 00 00       	mov    eax,0x0
c00209b7:	eb 38                	jmp    c00209f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209b9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209be:	75 17                	jne    c00209d7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209c0:	83 ec 0c             	sub    esp,0xc
c00209c3:	68 50 c9 02 c0       	push   0xc002c950
c00209c8:	e8 52 26 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00209cd:	83 c4 10             	add    esp,0x10
c00209d0:	b8 09 00 00 00       	mov    eax,0x9
c00209d5:	eb 1a                	jmp    c00209f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209db:	83 ec 08             	sub    esp,0x8
c00209de:	50                   	push   eax
c00209df:	68 24 c9 02 c0       	push   0xc002c924
c00209e4:	e8 36 26 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00209e9:	83 c4 10             	add    esp,0x10
c00209ec:	b8 01 00 00 00       	mov    eax,0x1
c00209f1:	83 c4 2c             	add    esp,0x2c
c00209f4:	c3                   	ret    
c00209f5:	90                   	nop

c00209f6 <FAT::tryMount(LogicalDisk*, int)>:
c00209f6:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209fc:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020a01:	83 f8 14             	cmp    eax,0x14
c0020a04:	75 17                	jne    c0020a1d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a06:	83 ec 0c             	sub    esp,0xc
c0020a09:	68 36 c9 02 c0       	push   0xc002c936
c0020a0e:	e8 ba 9c ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	b0 00                	mov    al,0x0
c0020a18:	e9 d7 01 00 00       	jmp    c0020bf4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a1d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a24:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a2a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a30:	3d 00 02 00 00       	cmp    eax,0x200
c0020a35:	74 07                	je     c0020a3e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a37:	b0 00                	mov    al,0x0
c0020a39:	e9 b6 01 00 00       	jmp    c0020bf4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a3e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a46:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a4d:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020a54:	83 f8 ff             	cmp    eax,0xffffffff
c0020a57:	74 07                	je     c0020a60 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a59:	b0 01                	mov    al,0x1
c0020a5b:	e9 94 01 00 00       	jmp    c0020bf4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a60:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a6a:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a72:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a79:	88 c2                	mov    dl,al
c0020a7b:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020a80:	01 d0                	add    eax,edx
c0020a82:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a89:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c0020a8f:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a96:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0020a9d:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020aa2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020aa9:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c0020ab0:	83 ec 0c             	sub    esp,0xc
c0020ab3:	68 54 02 00 00       	push   0x254
c0020ab8:	e8 86 ed fe ff       	call   c000f843 <malloc>
c0020abd:	83 c4 10             	add    esp,0x10
c0020ac0:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020ac7:	83 ec 04             	sub    esp,0x4
c0020aca:	6a 00                	push   0x0
c0020acc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ad3:	50                   	push   eax
c0020ad4:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020adb:	e8 4f 44 fe ff       	call   c0004f2f <f_mount>
c0020ae0:	83 c4 10             	add    esp,0x10
c0020ae3:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020aea:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020af2:	74 19                	je     c0020b0d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020af4:	83 ec 0c             	sub    esp,0xc
c0020af7:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020afe:	e8 60 ed fe ff       	call   c000f863 <rfree>
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	b0 00                	mov    al,0x0
c0020b08:	e9 e7 00 00 00       	jmp    c0020bf4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b0d:	83 ec 04             	sub    esp,0x4
c0020b10:	68 00 01 00 00       	push   0x100
c0020b15:	6a 00                	push   0x0
c0020b17:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b1e:	50                   	push   eax
c0020b1f:	e8 54 fc fd ff       	call   c0000778 <memset>
c0020b24:	83 c4 10             	add    esp,0x10
c0020b27:	83 ec 08             	sub    esp,0x8
c0020b2a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b31:	50                   	push   eax
c0020b32:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b39:	50                   	push   eax
c0020b3a:	e8 35 fe fd ff       	call   c0000974 <strcat>
c0020b3f:	83 c4 10             	add    esp,0x10
c0020b42:	83 ec 08             	sub    esp,0x8
c0020b45:	68 44 c9 02 c0       	push   0xc002c944
c0020b4a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b51:	50                   	push   eax
c0020b52:	e8 1d fe fd ff       	call   c0000974 <strcat>
c0020b57:	83 c4 10             	add    esp,0x10
c0020b5a:	83 ec 04             	sub    esp,0x4
c0020b5d:	6a 01                	push   0x1
c0020b5f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b66:	50                   	push   eax
c0020b67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b6b:	50                   	push   eax
c0020b6c:	e8 20 44 fe ff       	call   c0004f91 <f_open>
c0020b71:	83 c4 10             	add    esp,0x10
c0020b74:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b7b:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b82:	85 c0                	test   eax,eax
c0020b84:	74 0a                	je     c0020b90 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b86:	78 2d                	js     c0020bb5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b88:	83 e8 04             	sub    eax,0x4
c0020b8b:	83 f8 01             	cmp    eax,0x1
c0020b8e:	77 25                	ja     c0020bb5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b90:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b98:	83 ec 0c             	sub    esp,0xc
c0020b9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b9f:	50                   	push   eax
c0020ba0:	e8 3e 4f fe ff       	call   c0005ae3 <f_close>
c0020ba5:	83 c4 10             	add    esp,0x10
c0020ba8:	90                   	nop
c0020ba9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bb1:	74 3a                	je     c0020bed <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bb3:	eb 2d                	jmp    c0020be2 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bb5:	83 ec 0c             	sub    esp,0xc
c0020bb8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020bbf:	e8 9f ec fe ff       	call   c000f863 <rfree>
c0020bc4:	83 c4 10             	add    esp,0x10
c0020bc7:	83 ec 04             	sub    esp,0x4
c0020bca:	6a 00                	push   0x0
c0020bcc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bd3:	50                   	push   eax
c0020bd4:	6a 00                	push   0x0
c0020bd6:	e8 54 43 fe ff       	call   c0004f2f <f_mount>
c0020bdb:	83 c4 10             	add    esp,0x10
c0020bde:	b0 00                	mov    al,0x0
c0020be0:	eb 12                	jmp    c0020bf4 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020be2:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020be7:	40                   	inc    eax
c0020be8:	a3 60 1b 03 c0       	mov    ds:0xc0031b60,eax
c0020bed:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bf4:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bfa:	c3                   	ret    
c0020bfb:	90                   	nop

c0020bfc <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bfc:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020c02:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020c0a:	74 0a                	je     c0020c16 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020c0c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020c14:	75 0a                	jne    c0020c20 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020c16:	b8 04 00 00 00       	mov    eax,0x4
c0020c1b:	e9 db 00 00 00       	jmp    c0020cfb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020c20:	83 ec 08             	sub    esp,0x8
c0020c23:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c2a:	50                   	push   eax
c0020c2b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c32:	e8 b6 54 fe ff       	call   c00060ed <f_readdir>
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c41:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c47:	83 ec 0c             	sub    esp,0xc
c0020c4a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c51:	83 c0 1a             	add    eax,0x1a
c0020c54:	50                   	push   eax
c0020c55:	e8 3a fb fd ff       	call   c0000794 <strlen>
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	ba 00 00 00 00       	mov    edx,0x0
c0020c62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c66:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c6a:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c71:	0f b6 c0             	movzx  eax,al
c0020c74:	83 e0 10             	and    eax,0x10
c0020c77:	74 07                	je     c0020c80 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c79:	b8 02 00 00 00       	mov    eax,0x2
c0020c7e:	eb 05                	jmp    c0020c85 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c80:	b8 01 00 00 00       	mov    eax,0x1
c0020c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c89:	83 ec 08             	sub    esp,0x8
c0020c8c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c93:	83 c0 1a             	add    eax,0x1a
c0020c96:	50                   	push   eax
c0020c97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c9b:	83 c0 10             	add    eax,0x10
c0020c9e:	50                   	push   eax
c0020c9f:	e8 90 fb fd ff       	call   c0000834 <strcpy>
c0020ca4:	83 c4 10             	add    esp,0x10
c0020ca7:	83 ec 04             	sub    esp,0x4
c0020caa:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020cb1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cb5:	50                   	push   eax
c0020cb6:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020cbd:	e8 82 fa fd ff       	call   c0000744 <memcpy>
c0020cc2:	83 c4 10             	add    esp,0x10
c0020cc5:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020ccc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020cd2:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cd9:	84 c0                	test   al,al
c0020cdb:	75 07                	jne    c0020ce4 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020cdd:	b8 07 00 00 00       	mov    eax,0x7
c0020ce2:	eb 17                	jmp    c0020cfb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020ce4:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020ceb:	85 c0                	test   eax,eax
c0020ced:	75 07                	jne    c0020cf6 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cef:	b8 00 00 00 00       	mov    eax,0x0
c0020cf4:	eb 05                	jmp    c0020cfb <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cf6:	b8 01 00 00 00       	mov    eax,0x1
c0020cfb:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020d01:	c3                   	ret    

c0020d02 <FAT::read(void*, unsigned long, void*, int*)>:
c0020d02:	83 ec 1c             	sub    esp,0x1c
c0020d05:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d0a:	74 07                	je     c0020d13 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020d0c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d11:	75 07                	jne    c0020d1a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020d13:	b8 04 00 00 00       	mov    eax,0x4
c0020d18:	eb 3d                	jmp    c0020d57 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d1a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d1e:	50                   	push   eax
c0020d1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d2b:	e8 9d 46 fe ff       	call   c00053cd <f_read>
c0020d30:	83 c4 10             	add    esp,0x10
c0020d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d3b:	89 c2                	mov    edx,eax
c0020d3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d41:	89 10                	mov    DWORD PTR [eax],edx
c0020d43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d47:	85 c0                	test   eax,eax
c0020d49:	75 07                	jne    c0020d52 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d4b:	b8 00 00 00 00       	mov    eax,0x0
c0020d50:	eb 05                	jmp    c0020d57 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d52:	b8 01 00 00 00       	mov    eax,0x1
c0020d57:	83 c4 1c             	add    esp,0x1c
c0020d5a:	c3                   	ret    
c0020d5b:	90                   	nop

c0020d5c <FAT::write(void*, unsigned long, void*, int*)>:
c0020d5c:	83 ec 1c             	sub    esp,0x1c
c0020d5f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d64:	74 07                	je     c0020d6d <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d66:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d6b:	75 07                	jne    c0020d74 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d6d:	b8 04 00 00 00       	mov    eax,0x4
c0020d72:	eb 3d                	jmp    c0020db1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d78:	50                   	push   eax
c0020d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d85:	e8 c3 48 fe ff       	call   c000564d <f_write>
c0020d8a:	83 c4 10             	add    esp,0x10
c0020d8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d95:	89 c2                	mov    edx,eax
c0020d97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d9b:	89 10                	mov    DWORD PTR [eax],edx
c0020d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020da1:	85 c0                	test   eax,eax
c0020da3:	75 07                	jne    c0020dac <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020da5:	b8 00 00 00 00       	mov    eax,0x0
c0020daa:	eb 05                	jmp    c0020db1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020dac:	b8 01 00 00 00       	mov    eax,0x1
c0020db1:	83 c4 1c             	add    esp,0x1c
c0020db4:	c3                   	ret    
c0020db5:	90                   	nop

c0020db6 <FAT::close(void*)>:
c0020db6:	83 ec 1c             	sub    esp,0x1c
c0020db9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020dbe:	75 07                	jne    c0020dc7 <FAT::close(void*)+0x11>
c0020dc0:	b8 04 00 00 00       	mov    eax,0x4
c0020dc5:	eb 36                	jmp    c0020dfd <FAT::close(void*)+0x47>
c0020dc7:	83 ec 0c             	sub    esp,0xc
c0020dca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dce:	e8 10 4d fe ff       	call   c0005ae3 <f_close>
c0020dd3:	83 c4 10             	add    esp,0x10
c0020dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dda:	83 ec 0c             	sub    esp,0xc
c0020ddd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020de1:	e8 6d ea fe ff       	call   c000f853 <free>
c0020de6:	83 c4 10             	add    esp,0x10
c0020de9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ded:	85 c0                	test   eax,eax
c0020def:	75 07                	jne    c0020df8 <FAT::close(void*)+0x42>
c0020df1:	b8 00 00 00 00       	mov    eax,0x0
c0020df6:	eb 05                	jmp    c0020dfd <FAT::close(void*)+0x47>
c0020df8:	b8 01 00 00 00       	mov    eax,0x1
c0020dfd:	83 c4 1c             	add    esp,0x1c
c0020e00:	c3                   	ret    
c0020e01:	90                   	nop

c0020e02 <FAT::closeDir(void*)>:
c0020e02:	83 ec 1c             	sub    esp,0x1c
c0020e05:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e0a:	75 07                	jne    c0020e13 <FAT::closeDir(void*)+0x11>
c0020e0c:	b8 04 00 00 00       	mov    eax,0x4
c0020e11:	eb 36                	jmp    c0020e49 <FAT::closeDir(void*)+0x47>
c0020e13:	83 ec 0c             	sub    esp,0xc
c0020e16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e1a:	e8 ac 52 fe ff       	call   c00060cb <f_closedir>
c0020e1f:	83 c4 10             	add    esp,0x10
c0020e22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e26:	83 ec 0c             	sub    esp,0xc
c0020e29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e2d:	e8 21 ea fe ff       	call   c000f853 <free>
c0020e32:	83 c4 10             	add    esp,0x10
c0020e35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e39:	85 c0                	test   eax,eax
c0020e3b:	75 07                	jne    c0020e44 <FAT::closeDir(void*)+0x42>
c0020e3d:	b8 00 00 00 00       	mov    eax,0x0
c0020e42:	eb 05                	jmp    c0020e49 <FAT::closeDir(void*)+0x47>
c0020e44:	b8 01 00 00 00       	mov    eax,0x1
c0020e49:	83 c4 1c             	add    esp,0x1c
c0020e4c:	c3                   	ret    
c0020e4d:	90                   	nop

c0020e4e <FAT::seek(void*, unsigned long long)>:
c0020e4e:	83 ec 2c             	sub    esp,0x2c
c0020e51:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e55:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e59:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e61:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e66:	75 07                	jne    c0020e6f <FAT::seek(void*, unsigned long long)+0x21>
c0020e68:	b8 04 00 00 00       	mov    eax,0x4
c0020e6d:	eb 2f                	jmp    c0020e9e <FAT::seek(void*, unsigned long long)+0x50>
c0020e6f:	83 ec 04             	sub    esp,0x4
c0020e72:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e76:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e7a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e7e:	e8 8f 4c fe ff       	call   c0005b12 <f_lseek>
c0020e83:	83 c4 10             	add    esp,0x10
c0020e86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e8e:	85 c0                	test   eax,eax
c0020e90:	75 07                	jne    c0020e99 <FAT::seek(void*, unsigned long long)+0x4b>
c0020e92:	b8 00 00 00 00       	mov    eax,0x0
c0020e97:	eb 05                	jmp    c0020e9e <FAT::seek(void*, unsigned long long)+0x50>
c0020e99:	b8 01 00 00 00       	mov    eax,0x1
c0020e9e:	83 c4 2c             	add    esp,0x2c
c0020ea1:	c3                   	ret    

c0020ea2 <fatWrapperReadDisk>:
c0020ea2:	83 ec 1c             	sub    esp,0x1c
c0020ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ea9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ead:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eb1:	89 04 24             	mov    DWORD PTR [esp],eax
c0020eb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020eb8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ebc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ec1:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020ec8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ecc:	83 ec 0c             	sub    esp,0xc
c0020ecf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ed3:	52                   	push   edx
c0020ed4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ed8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020edc:	50                   	push   eax
c0020edd:	e8 5a 59 ff ff       	call   c001683c <LogicalDisk::read(unsigned long long, int, void*)>
c0020ee2:	83 c4 20             	add    esp,0x20
c0020ee5:	83 c4 1c             	add    esp,0x1c
c0020ee8:	c3                   	ret    

c0020ee9 <fatWrapperWriteDisk>:
c0020ee9:	83 ec 1c             	sub    esp,0x1c
c0020eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ef0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ef8:	89 04 24             	mov    DWORD PTR [esp],eax
c0020efb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020eff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020f03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f08:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f0f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f13:	83 ec 0c             	sub    esp,0xc
c0020f16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f1a:	52                   	push   edx
c0020f1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020f23:	50                   	push   eax
c0020f24:	e8 7f 59 ff ff       	call   c00168a8 <LogicalDisk::write(unsigned long long, int, void*)>
c0020f29:	83 c4 20             	add    esp,0x20
c0020f2c:	83 c4 1c             	add    esp,0x1c
c0020f2f:	c3                   	ret    

c0020f30 <fatWrapperIoctl>:
c0020f30:	53                   	push   ebx
c0020f31:	83 ec 28             	sub    esp,0x28
c0020f34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f38:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f3c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f44:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f49:	75 31                	jne    c0020f7c <fatWrapperIoctl+0x4c>
c0020f4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f53:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f58:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f65:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f6f:	66 89 02             	mov    WORD PTR [edx],ax
c0020f72:	b8 00 00 00 00       	mov    eax,0x0
c0020f77:	e9 b2 00 00 00       	jmp    c002102e <fatWrapperIoctl+0xfe>
c0020f7c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f81:	75 6a                	jne    c0020fed <fatWrapperIoctl+0xbd>
c0020f83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f8b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f90:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f97:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f9d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020fa3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020fa9:	89 c8                	mov    eax,ecx
c0020fab:	89 da                	mov    edx,ebx
c0020fad:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020fb1:	c1 e0 0a             	shl    eax,0xa
c0020fb4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020fb9:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0020fc0:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020fc6:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020fcc:	89 cb                	mov    ebx,ecx
c0020fce:	c1 fb 1f             	sar    ebx,0x1f
c0020fd1:	53                   	push   ebx
c0020fd2:	51                   	push   ecx
c0020fd3:	52                   	push   edx
c0020fd4:	50                   	push   eax
c0020fd5:	e8 c2 5a 00 00       	call   c0026a9c <__udivdi3>
c0020fda:	83 c4 10             	add    esp,0x10
c0020fdd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fe1:	89 01                	mov    DWORD PTR [ecx],eax
c0020fe3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fe6:	b8 00 00 00 00       	mov    eax,0x0
c0020feb:	eb 41                	jmp    c002102e <fatWrapperIoctl+0xfe>
c0020fed:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020ff2:	75 07                	jne    c0020ffb <fatWrapperIoctl+0xcb>
c0020ff4:	b8 00 00 00 00       	mov    eax,0x0
c0020ff9:	eb 33                	jmp    c002102e <fatWrapperIoctl+0xfe>
c0020ffb:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021000:	75 19                	jne    c002101b <fatWrapperIoctl+0xeb>
c0021002:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021006:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002100a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002100e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021014:	b8 00 00 00 00       	mov    eax,0x0
c0021019:	eb 13                	jmp    c002102e <fatWrapperIoctl+0xfe>
c002101b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021020:	75 07                	jne    c0021029 <fatWrapperIoctl+0xf9>
c0021022:	b8 00 00 00 00       	mov    eax,0x0
c0021027:	eb 05                	jmp    c002102e <fatWrapperIoctl+0xfe>
c0021029:	b8 04 00 00 00       	mov    eax,0x4
c002102e:	83 c4 28             	add    esp,0x28
c0021031:	5b                   	pop    ebx
c0021032:	c3                   	ret    
c0021033:	90                   	nop

c0021034 <FAT::FAT()>:
c0021034:	83 ec 1c             	sub    esp,0x1c
c0021037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002103b:	83 ec 0c             	sub    esp,0xc
c002103e:	50                   	push   eax
c002103f:	e8 e0 22 ff ff       	call   c0013324 <Filesystem::Filesystem()>
c0021044:	83 c4 10             	add    esp,0x10
c0021047:	ba 80 c9 02 c0       	mov    edx,0xc002c980
c002104c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021050:	89 10                	mov    DWORD PTR [eax],edx
c0021052:	c7 05 60 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b60,0x0
c002105c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021064:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021069:	7f 15                	jg     c0021080 <FAT::FAT()+0x4c>
c002106b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002106f:	c7 04 85 80 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce480],0xffffffff
c002107a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002107e:	eb e4                	jmp    c0021064 <FAT::FAT()+0x30>
c0021080:	90                   	nop
c0021081:	83 c4 1c             	add    esp,0x1c
c0021084:	c3                   	ret    
c0021085:	90                   	nop

c0021086 <FAT::fixFilepath(char*)>:
c0021086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002108a:	8a 00                	mov    al,BYTE PTR [eax]
c002108c:	3c 40                	cmp    al,0x40
c002108e:	7e 2c                	jle    c00210bc <FAT::fixFilepath(char*)+0x36>
c0021090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021094:	8a 00                	mov    al,BYTE PTR [eax]
c0021096:	83 e8 41             	sub    eax,0x41
c0021099:	88 c2                	mov    dl,al
c002109b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002109f:	88 10                	mov    BYTE PTR [eax],dl
c00210a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210a5:	8a 00                	mov    al,BYTE PTR [eax]
c00210a7:	0f be c0             	movsx  eax,al
c00210aa:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00210b1:	83 c0 30             	add    eax,0x30
c00210b4:	88 c2                	mov    dl,al
c00210b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00210ba:	88 10                	mov    BYTE PTR [eax],dl
c00210bc:	90                   	nop
c00210bd:	c3                   	ret    

c00210be <FAT::open(char const*, void**, FileOpenMode)>:
c00210be:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210c4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00210cc:	74 0a                	je     c00210d8 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210ce:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210d6:	75 0a                	jne    c00210e2 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210d8:	b8 04 00 00 00       	mov    eax,0x4
c00210dd:	e9 fd 00 00 00       	jmp    c00211df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210e2:	83 ec 08             	sub    esp,0x8
c00210e5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210f0:	50                   	push   eax
c00210f1:	e8 3e f7 fd ff       	call   c0000834 <strcpy>
c00210f6:	83 c4 10             	add    esp,0x10
c00210f9:	83 ec 08             	sub    esp,0x8
c00210fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021100:	50                   	push   eax
c0021101:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021108:	e8 79 ff ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c002110d:	83 c4 10             	add    esp,0x10
c0021110:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021118:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002111f:	83 e0 01             	and    eax,0x1
c0021122:	74 08                	je     c002112c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021124:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002112c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021133:	83 e0 04             	and    eax,0x4
c0021136:	74 10                	je     c0021148 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021138:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021140:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021148:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002114f:	83 e0 02             	and    eax,0x2
c0021152:	74 08                	je     c002115c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021154:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002115c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021163:	83 e0 08             	and    eax,0x8
c0021166:	74 08                	je     c0021170 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021168:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021170:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021177:	83 e0 10             	and    eax,0x10
c002117a:	74 08                	je     c0021184 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002117c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021184:	83 ec 0c             	sub    esp,0xc
c0021187:	68 50 02 00 00       	push   0x250
c002118c:	e8 b2 e6 fe ff       	call   c000f843 <malloc>
c0021191:	83 c4 10             	add    esp,0x10
c0021194:	89 c2                	mov    edx,eax
c0021196:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002119d:	89 10                	mov    DWORD PTR [eax],edx
c002119f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00211a7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00211ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00211b0:	83 ec 04             	sub    esp,0x4
c00211b3:	52                   	push   edx
c00211b4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00211b8:	52                   	push   edx
c00211b9:	50                   	push   eax
c00211ba:	e8 d2 3d fe ff       	call   c0004f91 <f_open>
c00211bf:	83 c4 10             	add    esp,0x10
c00211c2:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00211c9:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211d1:	74 07                	je     c00211da <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211d3:	b8 01 00 00 00       	mov    eax,0x1
c00211d8:	eb 05                	jmp    c00211df <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211da:	b8 00 00 00 00       	mov    eax,0x0
c00211df:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211e5:	c3                   	ret    

c00211e6 <FAT::openDir(char const*, void**)>:
c00211e6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211ec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211f4:	74 0a                	je     c0021200 <FAT::openDir(char const*, void**)+0x1a>
c00211f6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211fe:	75 07                	jne    c0021207 <FAT::openDir(char const*, void**)+0x21>
c0021200:	b8 04 00 00 00       	mov    eax,0x4
c0021205:	eb 7d                	jmp    c0021284 <FAT::openDir(char const*, void**)+0x9e>
c0021207:	83 ec 08             	sub    esp,0x8
c002120a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021211:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021215:	50                   	push   eax
c0021216:	e8 19 f6 fd ff       	call   c0000834 <strcpy>
c002121b:	83 c4 10             	add    esp,0x10
c002121e:	83 ec 08             	sub    esp,0x8
c0021221:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021225:	50                   	push   eax
c0021226:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002122d:	e8 54 fe ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c0021232:	83 c4 10             	add    esp,0x10
c0021235:	83 ec 0c             	sub    esp,0xc
c0021238:	6a 4c                	push   0x4c
c002123a:	e8 04 e6 fe ff       	call   c000f843 <malloc>
c002123f:	83 c4 10             	add    esp,0x10
c0021242:	89 c2                	mov    edx,eax
c0021244:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002124b:	89 10                	mov    DWORD PTR [eax],edx
c002124d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021254:	8b 00                	mov    eax,DWORD PTR [eax]
c0021256:	83 ec 08             	sub    esp,0x8
c0021259:	8d 54 24 14          	lea    edx,[esp+0x14]
c002125d:	52                   	push   edx
c002125e:	50                   	push   eax
c002125f:	e8 65 4d fe ff       	call   c0005fc9 <f_opendir>
c0021264:	83 c4 10             	add    esp,0x10
c0021267:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002126e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021276:	74 07                	je     c002127f <FAT::openDir(char const*, void**)+0x99>
c0021278:	b8 01 00 00 00       	mov    eax,0x1
c002127d:	eb 05                	jmp    c0021284 <FAT::openDir(char const*, void**)+0x9e>
c002127f:	b8 00 00 00 00       	mov    eax,0x0
c0021284:	81 c4 1c 01 00 00    	add    esp,0x11c
c002128a:	c3                   	ret    
c002128b:	90                   	nop

c002128c <FAT::stat(char const*, unsigned long long*, bool*)>:
c002128c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021292:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002129a:	75 0a                	jne    c00212a6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002129c:	b8 04 00 00 00       	mov    eax,0x4
c00212a1:	e9 c9 00 00 00       	jmp    c002136f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00212ae:	75 0a                	jne    c00212ba <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00212b0:	b8 04 00 00 00       	mov    eax,0x4
c00212b5:	e9 b5 00 00 00       	jmp    c002136f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ba:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00212c2:	75 0a                	jne    c00212ce <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00212c4:	b8 04 00 00 00       	mov    eax,0x4
c00212c9:	e9 a1 00 00 00       	jmp    c002136f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212ce:	83 ec 08             	sub    esp,0x8
c00212d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212d8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212df:	50                   	push   eax
c00212e0:	e8 4f f5 fd ff       	call   c0000834 <strcpy>
c00212e5:	83 c4 10             	add    esp,0x10
c00212e8:	83 ec 08             	sub    esp,0x8
c00212eb:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212f2:	50                   	push   eax
c00212f3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212fa:	e8 87 fd ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c00212ff:	83 c4 10             	add    esp,0x10
c0021302:	83 ec 08             	sub    esp,0x8
c0021305:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021309:	50                   	push   eax
c002130a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021311:	50                   	push   eax
c0021312:	e8 71 4e fe ff       	call   c0006188 <f_stat>
c0021317:	83 c4 10             	add    esp,0x10
c002131a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021321:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021328:	85 c0                	test   eax,eax
c002132a:	74 07                	je     c0021333 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002132c:	83 f8 04             	cmp    eax,0x4
c002132f:	74 32                	je     c0021363 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021331:	eb 37                	jmp    c002136a <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021333:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021337:	0f b6 c0             	movzx  eax,al
c002133a:	83 e0 10             	and    eax,0x10
c002133d:	0f 95 c2             	setne  dl
c0021340:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021347:	88 10                	mov    BYTE PTR [eax],dl
c0021349:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002134c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021350:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021357:	89 01                	mov    DWORD PTR [ecx],eax
c0021359:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002135c:	b8 00 00 00 00       	mov    eax,0x0
c0021361:	eb 0c                	jmp    c002136f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021363:	b8 02 00 00 00       	mov    eax,0x2
c0021368:	eb 05                	jmp    c002136f <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002136a:	b8 01 00 00 00       	mov    eax,0x1
c002136f:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021375:	c3                   	ret    

c0021376 <FAT::unlink(char const*)>:
c0021376:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002137c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021384:	75 07                	jne    c002138d <FAT::unlink(char const*)+0x17>
c0021386:	b8 04 00 00 00       	mov    eax,0x4
c002138b:	eb 5c                	jmp    c00213e9 <FAT::unlink(char const*)+0x73>
c002138d:	83 ec 08             	sub    esp,0x8
c0021390:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021397:	8d 44 24 18          	lea    eax,[esp+0x18]
c002139b:	50                   	push   eax
c002139c:	e8 93 f4 fd ff       	call   c0000834 <strcpy>
c00213a1:	83 c4 10             	add    esp,0x10
c00213a4:	83 ec 08             	sub    esp,0x8
c00213a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ab:	50                   	push   eax
c00213ac:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00213b3:	e8 ce fc ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c00213b8:	83 c4 10             	add    esp,0x10
c00213bb:	83 ec 0c             	sub    esp,0xc
c00213be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00213c2:	50                   	push   eax
c00213c3:	e8 12 51 fe ff       	call   c00064da <f_unlink>
c00213c8:	83 c4 10             	add    esp,0x10
c00213cb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213d2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213d9:	85 c0                	test   eax,eax
c00213db:	75 07                	jne    c00213e4 <FAT::unlink(char const*)+0x6e>
c00213dd:	b8 00 00 00 00       	mov    eax,0x0
c00213e2:	eb 05                	jmp    c00213e9 <FAT::unlink(char const*)+0x73>
c00213e4:	b8 01 00 00 00       	mov    eax,0x1
c00213e9:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213ef:	c3                   	ret    

c00213f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213f0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213f6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213fd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021404:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021408:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002140c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021414:	75 0a                	jne    c0021420 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021416:	b8 04 00 00 00       	mov    eax,0x4
c002141b:	e9 1c 01 00 00       	jmp    c002153c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021420:	83 ec 08             	sub    esp,0x8
c0021423:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002142a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002142e:	50                   	push   eax
c002142f:	e8 00 f4 fd ff       	call   c0000834 <strcpy>
c0021434:	83 c4 10             	add    esp,0x10
c0021437:	83 ec 08             	sub    esp,0x8
c002143a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002143e:	50                   	push   eax
c002143f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021446:	e8 3b fc ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c002144b:	83 c4 10             	add    esp,0x10
c002144e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021456:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002145e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021463:	83 e0 01             	and    eax,0x1
c0021466:	74 08                	je     c0021470 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021468:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021470:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021475:	83 e0 02             	and    eax,0x2
c0021478:	74 08                	je     c0021482 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002147a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021482:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021487:	83 e0 04             	and    eax,0x4
c002148a:	74 08                	je     c0021494 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002148c:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021494:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021499:	83 e0 08             	and    eax,0x8
c002149c:	74 08                	je     c00214a6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002149e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00214a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214ab:	83 e0 01             	and    eax,0x1
c00214ae:	74 08                	je     c00214b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00214b0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00214b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214bd:	83 e0 02             	and    eax,0x2
c00214c0:	74 08                	je     c00214ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00214c2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00214ca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214cf:	83 e0 04             	and    eax,0x4
c00214d2:	74 08                	je     c00214dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214d4:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214e1:	83 e0 08             	and    eax,0x8
c00214e4:	74 08                	je     c00214ee <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214e6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214ee:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214f5:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214fc:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021504:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002150c:	83 ec 04             	sub    esp,0x4
c002150f:	52                   	push   edx
c0021510:	50                   	push   eax
c0021511:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021515:	50                   	push   eax
c0021516:	e8 61 56 fe ff       	call   c0006b7c <f_chmod>
c002151b:	83 c4 10             	add    esp,0x10
c002151e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021525:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002152c:	85 c0                	test   eax,eax
c002152e:	75 07                	jne    c0021537 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021530:	b8 00 00 00 00       	mov    eax,0x0
c0021535:	eb 05                	jmp    c002153c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021537:	b8 01 00 00 00       	mov    eax,0x1
c002153c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021542:	c3                   	ret    
c0021543:	90                   	nop

c0021544 <FAT::rename(char const*, char const*)>:
c0021544:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002154a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021552:	74 0a                	je     c002155e <FAT::rename(char const*, char const*)+0x1a>
c0021554:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002155c:	75 0a                	jne    c0021568 <FAT::rename(char const*, char const*)+0x24>
c002155e:	b8 04 00 00 00       	mov    eax,0x4
c0021563:	e9 98 00 00 00       	jmp    c0021600 <FAT::rename(char const*, char const*)+0xbc>
c0021568:	83 ec 08             	sub    esp,0x8
c002156b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021572:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021579:	50                   	push   eax
c002157a:	e8 b5 f2 fd ff       	call   c0000834 <strcpy>
c002157f:	83 c4 10             	add    esp,0x10
c0021582:	83 ec 08             	sub    esp,0x8
c0021585:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002158c:	50                   	push   eax
c002158d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021594:	e8 ed fa ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c0021599:	83 c4 10             	add    esp,0x10
c002159c:	83 ec 08             	sub    esp,0x8
c002159f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00215a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215aa:	50                   	push   eax
c00215ab:	e8 84 f2 fd ff       	call   c0000834 <strcpy>
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	83 ec 08             	sub    esp,0x8
c00215b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215ba:	50                   	push   eax
c00215bb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00215c2:	e8 bf fa ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c00215c7:	83 c4 10             	add    esp,0x10
c00215ca:	83 ec 08             	sub    esp,0x8
c00215cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215d1:	50                   	push   eax
c00215d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215d9:	50                   	push   eax
c00215da:	e8 aa 52 fe ff       	call   c0006889 <f_rename>
c00215df:	83 c4 10             	add    esp,0x10
c00215e2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215e9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215f0:	85 c0                	test   eax,eax
c00215f2:	75 07                	jne    c00215fb <FAT::rename(char const*, char const*)+0xb7>
c00215f4:	b8 00 00 00 00       	mov    eax,0x0
c00215f9:	eb 05                	jmp    c0021600 <FAT::rename(char const*, char const*)+0xbc>
c00215fb:	b8 01 00 00 00       	mov    eax,0x1
c0021600:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021606:	c3                   	ret    
c0021607:	90                   	nop

c0021608 <FAT::mkdir(char const*)>:
c0021608:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002160e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021616:	75 07                	jne    c002161f <FAT::mkdir(char const*)+0x17>
c0021618:	b8 04 00 00 00       	mov    eax,0x4
c002161d:	eb 5c                	jmp    c002167b <FAT::mkdir(char const*)+0x73>
c002161f:	83 ec 08             	sub    esp,0x8
c0021622:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021629:	8d 44 24 18          	lea    eax,[esp+0x18]
c002162d:	50                   	push   eax
c002162e:	e8 01 f2 fd ff       	call   c0000834 <strcpy>
c0021633:	83 c4 10             	add    esp,0x10
c0021636:	83 ec 08             	sub    esp,0x8
c0021639:	8d 44 24 14          	lea    eax,[esp+0x14]
c002163d:	50                   	push   eax
c002163e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021645:	e8 3c fa ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c002164a:	83 c4 10             	add    esp,0x10
c002164d:	83 ec 0c             	sub    esp,0xc
c0021650:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021654:	50                   	push   eax
c0021655:	e8 03 50 fe ff       	call   c000665d <f_mkdir>
c002165a:	83 c4 10             	add    esp,0x10
c002165d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021664:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002166b:	85 c0                	test   eax,eax
c002166d:	75 07                	jne    c0021676 <FAT::mkdir(char const*)+0x6e>
c002166f:	b8 00 00 00 00       	mov    eax,0x0
c0021674:	eb 05                	jmp    c002167b <FAT::mkdir(char const*)+0x73>
c0021676:	b8 01 00 00 00       	mov    eax,0x1
c002167b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021681:	c3                   	ret    

c0021682 <FAT::exists(char const*)>:
c0021682:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021688:	83 ec 08             	sub    esp,0x8
c002168b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021692:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021696:	50                   	push   eax
c0021697:	e8 98 f1 fd ff       	call   c0000834 <strcpy>
c002169c:	83 c4 10             	add    esp,0x10
c002169f:	83 ec 08             	sub    esp,0x8
c00216a2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216a6:	50                   	push   eax
c00216a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00216ae:	e8 d3 f9 ff ff       	call   c0021086 <FAT::fixFilepath(char*)>
c00216b3:	83 c4 10             	add    esp,0x10
c00216b6:	83 ec 08             	sub    esp,0x8
c00216b9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00216c0:	50                   	push   eax
c00216c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00216c5:	50                   	push   eax
c00216c6:	e8 bd 4a fe ff       	call   c0006188 <f_stat>
c00216cb:	83 c4 10             	add    esp,0x10
c00216ce:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216d5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216dc:	85 c0                	test   eax,eax
c00216de:	75 04                	jne    c00216e4 <FAT::exists(char const*)+0x62>
c00216e0:	b0 01                	mov    al,0x1
c00216e2:	eb 02                	jmp    c00216e6 <FAT::exists(char const*)+0x64>
c00216e4:	b0 00                	mov    al,0x0
c00216e6:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216ec:	c3                   	ret    
c00216ed:	90                   	nop

c00216ee <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216ee:	b8 08 00 00 00       	mov    eax,0x8
c00216f3:	c3                   	ret    

c00216f4 <ISO9660::seek(void*, unsigned long long)>:
c00216f4:	53                   	push   ebx
c00216f5:	b8 04 00 00 00       	mov    eax,0x4
c00216fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021702:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021706:	85 d2                	test   edx,edx
c0021708:	74 17                	je     c0021721 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002170a:	89 c8                	mov    eax,ecx
c002170c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002170f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021712:	b8 01 00 00 00       	mov    eax,0x1
c0021717:	73 08                	jae    c0021721 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021719:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002171c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002171f:	31 c0                	xor    eax,eax
c0021721:	5b                   	pop    ebx
c0021722:	c3                   	ret    
c0021723:	90                   	nop

c0021724 <ISO9660::tell(void*, unsigned long long*)>:
c0021724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002172c:	85 d2                	test   edx,edx
c002172e:	74 12                	je     c0021742 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021730:	85 c0                	test   eax,eax
c0021732:	74 0e                	je     c0021742 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021734:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021737:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002173a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002173d:	89 10                	mov    DWORD PTR [eax],edx
c002173f:	31 c0                	xor    eax,eax
c0021741:	c3                   	ret    
c0021742:	b8 04 00 00 00       	mov    eax,0x4
c0021747:	c3                   	ret    

c0021748 <ISO9660::getName()>:
c0021748:	b8 dc c9 02 c0       	mov    eax,0xc002c9dc
c002174d:	c3                   	ret    

c002174e <ISO9660::stat(void*, unsigned long long*)>:
c002174e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021752:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021756:	85 d2                	test   edx,edx
c0021758:	74 12                	je     c002176c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002175a:	85 c0                	test   eax,eax
c002175c:	74 0e                	je     c002176c <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002175e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021761:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021764:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021767:	89 10                	mov    DWORD PTR [eax],edx
c0021769:	31 c0                	xor    eax,eax
c002176b:	c3                   	ret    
c002176c:	b8 04 00 00 00       	mov    eax,0x4
c0021771:	c3                   	ret    

c0021772 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021772:	b8 01 00 00 00       	mov    eax,0x1
c0021777:	c3                   	ret    

c0021778 <ISO9660::unlink(char const*)>:
c0021778:	b8 01 00 00 00       	mov    eax,0x1
c002177d:	c3                   	ret    

c002177e <ISO9660::write(void*, unsigned long, void*, int*)>:
c002177e:	b8 01 00 00 00       	mov    eax,0x1
c0021783:	c3                   	ret    

c0021784 <ISO9660::rename(char const*, char const*)>:
c0021784:	b8 01 00 00 00       	mov    eax,0x1
c0021789:	c3                   	ret    

c002178a <ISO9660::mkdir(char const*)>:
c002178a:	b8 01 00 00 00       	mov    eax,0x1
c002178f:	c3                   	ret    

c0021790 <ISO9660::close(void*)>:
c0021790:	83 ec 0c             	sub    esp,0xc
c0021793:	b8 04 00 00 00       	mov    eax,0x4
c0021798:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002179c:	85 d2                	test   edx,edx
c002179e:	74 0e                	je     c00217ae <ISO9660::close(void*)+0x1e>
c00217a0:	83 ec 0c             	sub    esp,0xc
c00217a3:	52                   	push   edx
c00217a4:	e8 aa e0 fe ff       	call   c000f853 <free>
c00217a9:	83 c4 10             	add    esp,0x10
c00217ac:	31 c0                	xor    eax,eax
c00217ae:	83 c4 0c             	add    esp,0xc
c00217b1:	c3                   	ret    

c00217b2 <ISO9660::closeDir(void*)>:
c00217b2:	83 ec 0c             	sub    esp,0xc
c00217b5:	b8 04 00 00 00       	mov    eax,0x4
c00217ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217be:	85 d2                	test   edx,edx
c00217c0:	74 0e                	je     c00217d0 <ISO9660::closeDir(void*)+0x1e>
c00217c2:	83 ec 0c             	sub    esp,0xc
c00217c5:	52                   	push   edx
c00217c6:	e8 88 e0 fe ff       	call   c000f853 <free>
c00217cb:	83 c4 10             	add    esp,0x10
c00217ce:	31 c0                	xor    eax,eax
c00217d0:	83 c4 0c             	add    esp,0xc
c00217d3:	c3                   	ret    

c00217d4 <ISO9660::~ISO9660()>:
c00217d4:	83 ec 0c             	sub    esp,0xc
c00217d7:	ba 40 ca 02 c0       	mov    edx,0xc002ca40
c00217dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e0:	89 10                	mov    DWORD PTR [eax],edx
c00217e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e6:	83 ec 0c             	sub    esp,0xc
c00217e9:	50                   	push   eax
c00217ea:	e8 59 1b ff ff       	call   c0013348 <Filesystem::~Filesystem()>
c00217ef:	83 c4 10             	add    esp,0x10
c00217f2:	90                   	nop
c00217f3:	83 c4 0c             	add    esp,0xc
c00217f6:	c3                   	ret    
c00217f7:	90                   	nop

c00217f8 <ISO9660::~ISO9660()>:
c00217f8:	83 ec 0c             	sub    esp,0xc
c00217fb:	83 ec 0c             	sub    esp,0xc
c00217fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021802:	e8 cd ff ff ff       	call   c00217d4 <ISO9660::~ISO9660()>
c0021807:	83 c4 10             	add    esp,0x10
c002180a:	83 ec 08             	sub    esp,0x8
c002180d:	6a 08                	push   0x8
c002180f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021813:	e8 27 17 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0021818:	83 c4 10             	add    esp,0x10
c002181b:	83 c4 0c             	add    esp,0xc
c002181e:	c3                   	ret    

c002181f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002181f:	55                   	push   ebp
c0021820:	31 c9                	xor    ecx,ecx
c0021822:	57                   	push   edi
c0021823:	56                   	push   esi
c0021824:	53                   	push   ebx
c0021825:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021829:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002182d:	89 eb                	mov    ebx,ebp
c002182f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021833:	39 ce                	cmp    esi,ecx
c0021835:	7e 17                	jle    c002184e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021837:	31 d2                	xor    edx,edx
c0021839:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002183d:	7d 13                	jge    c0021852 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002183f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021843:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021846:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021849:	75 0d                	jne    c0021858 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002184b:	42                   	inc    edx
c002184c:	eb eb                	jmp    c0021839 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002184e:	31 c0                	xor    eax,eax
c0021850:	eb 0a                	jmp    c002185c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021852:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021856:	eb 04                	jmp    c002185c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021858:	41                   	inc    ecx
c0021859:	43                   	inc    ebx
c002185a:	eb d7                	jmp    c0021833 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002185c:	5b                   	pop    ebx
c002185d:	5e                   	pop    esi
c002185e:	5f                   	pop    edi
c002185f:	5d                   	pop    ebp
c0021860:	c3                   	ret    

c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021861:	56                   	push   esi
c0021862:	53                   	push   ebx
c0021863:	52                   	push   edx
c0021864:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021868:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002186c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021870:	39 0d 60 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c60,ecx
c0021876:	75 08                	jne    c0021880 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021878:	38 05 94 da 02 c0    	cmp    BYTE PTR ds:0xc002da94,al
c002187e:	74 2b                	je     c00218ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021880:	83 ec 0c             	sub    esp,0xc
c0021883:	a2 94 da 02 c0       	mov    ds:0xc002da94,al
c0021888:	68 80 1c 03 c0       	push   0xc0031c80
c002188d:	0f be c0             	movsx  eax,al
c0021890:	6a 01                	push   0x1
c0021892:	89 0d 60 1c 03 c0    	mov    DWORD PTR ds:0xc0031c60,ecx
c0021898:	31 db                	xor    ebx,ebx
c002189a:	53                   	push   ebx
c002189b:	51                   	push   ecx
c002189c:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c00218a3:	e8 94 4f ff ff       	call   c001683c <LogicalDisk::read(unsigned long long, int, void*)>
c00218a8:	83 c4 20             	add    esp,0x20
c00218ab:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c00218b3:	c7 44 24 14 80 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031c80
c00218bb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00218bf:	58                   	pop    eax
c00218c0:	5b                   	pop    ebx
c00218c1:	5e                   	pop    esi
c00218c2:	e9 7d ee fd ff       	jmp    c0000744 <memcpy>
c00218c7:	90                   	nop

c00218c8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00218c8:	81 ec 10 08 00 00    	sub    esp,0x810
c00218ce:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218d5:	83 c0 41             	add    eax,0x41
c00218d8:	0f be c0             	movsx  eax,al
c00218db:	50                   	push   eax
c00218dc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218e0:	50                   	push   eax
c00218e1:	6a 10                	push   0x10
c00218e3:	e8 79 ff ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218e8:	83 c4 10             	add    esp,0x10
c00218eb:	31 c0                	xor    eax,eax
c00218ed:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218f2:	75 1d                	jne    c0021911 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218f4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218f9:	75 16                	jne    c0021911 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218fb:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021900:	75 0f                	jne    c0021911 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021902:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021907:	75 08                	jne    c0021911 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021909:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c002190e:	0f 94 c0             	sete   al
c0021911:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021917:	c3                   	ret    

c0021918 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021918:	55                   	push   ebp
c0021919:	57                   	push   edi
c002191a:	56                   	push   esi
c002191b:	53                   	push   ebx
c002191c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021922:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021929:	85 ed                	test   ebp,ebp
c002192b:	0f 84 d6 01 00 00    	je     c0021b07 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021931:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021939:	0f 84 c8 01 00 00    	je     c0021b07 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002193f:	b8 01 00 00 00       	mov    eax,0x1
c0021944:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021948:	0f 85 be 01 00 00    	jne    c0021b0c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002194e:	31 d2                	xor    edx,edx
c0021950:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021957:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002195a:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002195d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021961:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021964:	89 04 24             	mov    DWORD PTR [esp],eax
c0021967:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002196b:	01 f0                	add    eax,esi
c002196d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021970:	11 fa                	adc    edx,edi
c0021972:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021976:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002197a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002197e:	19 d1                	sbb    ecx,edx
c0021980:	72 0a                	jb     c002198c <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021982:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021986:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002198a:	eb 13                	jmp    c002199f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002198c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021990:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021994:	29 f0                	sub    eax,esi
c0021996:	19 fa                	sbb    edx,edi
c0021998:	89 04 24             	mov    DWORD PTR [esp],eax
c002199b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002199f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00219a2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00219a5:	0f a4 c2 0b          	shld   edx,eax,0xb
c00219a9:	51                   	push   ecx
c00219aa:	c1 e0 0b             	shl    eax,0xb
c00219ad:	01 c6                	add    esi,eax
c00219af:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00219b3:	11 d7                	adc    edi,edx
c00219b5:	50                   	push   eax
c00219b6:	89 fa                	mov    edx,edi
c00219b8:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c00219bc:	89 f0                	mov    eax,esi
c00219be:	53                   	push   ebx
c00219bf:	0f ac d0 0b          	shrd   eax,edx,0xb
c00219c3:	50                   	push   eax
c00219c4:	e8 98 fe ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219cd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219d0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219d4:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219da:	83 c4 10             	add    esp,0x10
c00219dd:	b8 00 08 00 00       	mov    eax,0x800
c00219e2:	29 d0                	sub    eax,edx
c00219e4:	39 c1                	cmp    ecx,eax
c00219e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219ea:	83 d9 00             	sbb    ecx,0x0
c00219ed:	7d 1c                	jge    c0021a0b <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219ef:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219f4:	75 12                	jne    c0021a08 <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219f6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021a03:	e9 fb 00 00 00       	jmp    c0021b03 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0021a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021a0b:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021a0e:	31 d2                	xor    edx,edx
c0021a10:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021a14:	39 c2                	cmp    edx,eax
c0021a16:	7d 14                	jge    c0021a2c <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0021a18:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021a1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021a23:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021a26:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021a29:	42                   	inc    edx
c0021a2a:	eb e8                	jmp    c0021a14 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0021a2c:	89 c3                	mov    ebx,eax
c0021a2e:	85 c0                	test   eax,eax
c0021a30:	79 02                	jns    c0021a34 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a32:	31 db                	xor    ebx,ebx
c0021a34:	99                   	cdq    
c0021a35:	01 c3                	add    ebx,eax
c0021a37:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a3e:	01 c6                	add    esi,eax
c0021a40:	11 d7                	adc    edi,edx
c0021a42:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a46:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a4a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a4d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a51:	29 c6                	sub    esi,eax
c0021a53:	19 d7                	sbb    edi,edx
c0021a55:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a58:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a5c:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a61:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a64:	b8 00 00 00 00       	mov    eax,0x0
c0021a69:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a6d:	7d 3e                	jge    c0021aad <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a6f:	52                   	push   edx
c0021a70:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a74:	50                   	push   eax
c0021a75:	53                   	push   ebx
c0021a76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a7a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a7e:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a82:	50                   	push   eax
c0021a83:	e8 d9 fd ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a88:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a90:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a95:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a9b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021aa3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021aa8:	83 c4 10             	add    esp,0x10
c0021aab:	eb af                	jmp    c0021a5c <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021aad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ab1:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021ab4:	74 32                	je     c0021ae8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021ab6:	50                   	push   eax
c0021ab7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021abb:	50                   	push   eax
c0021abc:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ac0:	50                   	push   eax
c0021ac1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021ac5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021ac9:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021acd:	56                   	push   esi
c0021ace:	e8 8e fd ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ad3:	83 c4 0c             	add    esp,0xc
c0021ad6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021ada:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ade:	50                   	push   eax
c0021adf:	53                   	push   ebx
c0021ae0:	e8 5f ec fd ff       	call   c0000744 <memcpy>
c0021ae5:	83 c4 10             	add    esp,0x10
c0021ae8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021aef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021af3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021af7:	89 38                	mov    DWORD PTR [eax],edi
c0021af9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021afd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021b00:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021b03:	31 c0                	xor    eax,eax
c0021b05:	eb 05                	jmp    c0021b0c <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021b07:	b8 04 00 00 00       	mov    eax,0x4
c0021b0c:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021b12:	5b                   	pop    ebx
c0021b13:	5e                   	pop    esi
c0021b14:	5f                   	pop    edi
c0021b15:	5d                   	pop    ebp
c0021b16:	c3                   	ret    
c0021b17:	90                   	nop

c0021b18 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021b18:	55                   	push   ebp
c0021b19:	57                   	push   edi
c0021b1a:	56                   	push   esi
c0021b1b:	53                   	push   ebx
c0021b1c:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021b22:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021b29:	85 f6                	test   esi,esi
c0021b2b:	0f 84 64 02 00 00    	je     c0021d95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b31:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b39:	0f 84 56 02 00 00    	je     c0021d95 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b3f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b42:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b45:	75 0a                	jne    c0021b51 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b47:	b8 07 00 00 00       	mov    eax,0x7
c0021b4c:	e9 49 02 00 00       	jmp    c0021d9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b51:	50                   	push   eax
c0021b52:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b56:	50                   	push   eax
c0021b57:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b5e:	53                   	push   ebx
c0021b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b61:	c1 e0 0b             	shl    eax,0xb
c0021b64:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b67:	c1 e8 0b             	shr    eax,0xb
c0021b6a:	50                   	push   eax
c0021b6b:	e8 f1 fc ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b70:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	89 c1                	mov    ecx,eax
c0021b78:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b7b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b81:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b84:	84 db                	test   bl,bl
c0021b86:	0f 85 90 00 00 00    	jne    c0021c1c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b8c:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b92:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b98:	29 c7                	sub    edi,eax
c0021b9a:	89 fb                	mov    ebx,edi
c0021b9c:	c1 fb 1f             	sar    ebx,0x1f
c0021b9f:	01 f8                	add    eax,edi
c0021ba1:	11 da                	adc    edx,ebx
c0021ba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ba7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021bae:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021bb1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021bb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021bb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0021bba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021bbe:	89 d8                	mov    eax,ebx
c0021bc0:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021bc3:	ba 00 00 00 00       	mov    edx,0x0
c0021bc8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021bcc:	b8 00 00 00 00       	mov    eax,0x0
c0021bd1:	73 0b                	jae    c0021bde <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021bd3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bda:	29 f8                	sub    eax,edi
c0021bdc:	19 da                	sbb    edx,ebx
c0021bde:	89 d3                	mov    ebx,edx
c0021be0:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021be3:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021be6:	09 c3                	or     ebx,eax
c0021be8:	0f 84 59 ff ff ff    	je     c0021b47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bee:	55                   	push   ebp
c0021bef:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bf3:	50                   	push   eax
c0021bf4:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bfb:	53                   	push   ebx
c0021bfc:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bfe:	c1 e0 0b             	shl    eax,0xb
c0021c01:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021c05:	c1 e8 0b             	shr    eax,0xb
c0021c08:	50                   	push   eax
c0021c09:	e8 53 fc ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c0e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c11:	83 c4 10             	add    esp,0x10
c0021c14:	25 ff 07 00 00       	and    eax,0x7ff
c0021c19:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021c1c:	57                   	push   edi
c0021c1d:	6a 28                	push   0x28
c0021c1f:	6a 00                	push   0x0
c0021c21:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021c25:	50                   	push   eax
c0021c26:	e8 4d eb fd ff       	call   c0000778 <memset>
c0021c2b:	31 d2                	xor    edx,edx
c0021c2d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c30:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c36:	89 f8                	mov    eax,edi
c0021c38:	83 c0 21             	add    eax,0x21
c0021c3b:	83 d2 00             	adc    edx,0x0
c0021c3e:	89 c7                	mov    edi,eax
c0021c40:	89 d5                	mov    ebp,edx
c0021c42:	83 c4 10             	add    esp,0x10
c0021c45:	31 c9                	xor    ecx,ecx
c0021c47:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c4e:	83 f9 28             	cmp    ecx,0x28
c0021c51:	88 04 24             	mov    BYTE PTR [esp],al
c0021c54:	0f 94 c2             	sete   dl
c0021c57:	88 d0                	mov    al,dl
c0021c59:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c5e:	39 fa                	cmp    edx,edi
c0021c60:	ba 00 00 00 00       	mov    edx,0x0
c0021c65:	19 ea                	sbb    edx,ebp
c0021c67:	0f 92 c2             	setb   dl
c0021c6a:	09 c2                	or     edx,eax
c0021c6c:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c70:	0f 94 c0             	sete   al
c0021c73:	08 d0                	or     al,dl
c0021c75:	75 16                	jne    c0021c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c77:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c7b:	74 10                	je     c0021c8d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c7d:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c80:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c84:	41                   	inc    ecx
c0021c85:	83 c7 01             	add    edi,0x1
c0021c88:	83 d5 00             	adc    ebp,0x0
c0021c8b:	eb ba                	jmp    c0021c47 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c8d:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c94:	83 ec 0c             	sub    esp,0xc
c0021c97:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c9b:	57                   	push   edi
c0021c9c:	e8 f3 ea fd ff       	call   c0000794 <strlen>
c0021ca1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021ca9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cad:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021cb4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021cb7:	5a                   	pop    edx
c0021cb8:	25 ff 07 00 00       	and    eax,0x7ff
c0021cbd:	01 c8                	add    eax,ecx
c0021cbf:	59                   	pop    ecx
c0021cc0:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021cc6:	83 e0 02             	and    eax,0x2
c0021cc9:	3c 01                	cmp    al,0x1
c0021ccb:	19 c0                	sbb    eax,eax
c0021ccd:	83 c0 02             	add    eax,0x2
c0021cd0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021cd4:	57                   	push   edi
c0021cd5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cd9:	50                   	push   eax
c0021cda:	e8 55 eb fd ff       	call   c0000834 <strcpy>
c0021cdf:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021ce3:	83 c4 10             	add    esp,0x10
c0021ce6:	84 c0                	test   al,al
c0021ce8:	75 21                	jne    c0021d0b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cea:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cf2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cfa:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d02:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021d09:	eb 28                	jmp    c0021d33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d0b:	fe c8                	dec    al
c0021d0d:	75 24                	jne    c0021d33 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021d0f:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021d17:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021d1f:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021d27:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d2e:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d33:	0f b6 fb             	movzx  edi,bl
c0021d36:	31 db                	xor    ebx,ebx
c0021d38:	50                   	push   eax
c0021d39:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d40:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d44:	50                   	push   eax
c0021d45:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d4c:	e8 f3 e9 fd ff       	call   c0000744 <memcpy>
c0021d51:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d58:	89 f9                	mov    ecx,edi
c0021d5a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d60:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d63:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d66:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d69:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d6c:	83 c4 10             	add    esp,0x10
c0021d6f:	39 c7                	cmp    edi,eax
c0021d71:	89 df                	mov    edi,ebx
c0021d73:	19 d7                	sbb    edi,edx
c0021d75:	72 10                	jb     c0021d87 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d77:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d7e:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d85:	eb 0a                	jmp    c0021d91 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d87:	29 c8                	sub    eax,ecx
c0021d89:	19 da                	sbb    edx,ebx
c0021d8b:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d8e:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d91:	31 c0                	xor    eax,eax
c0021d93:	eb 05                	jmp    c0021d9a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d95:	b8 04 00 00 00       	mov    eax,0x4
c0021d9a:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021da0:	5b                   	pop    ebx
c0021da1:	5e                   	pop    esi
c0021da2:	5f                   	pop    edi
c0021da3:	5d                   	pop    ebp
c0021da4:	c3                   	ret    

c0021da5 <readRoot(unsigned int*, unsigned int*, char)>:
c0021da5:	81 ec 40 08 00 00    	sub    esp,0x840
c0021dab:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021db3:	50                   	push   eax
c0021db4:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021db8:	50                   	push   eax
c0021db9:	6a 10                	push   0x10
c0021dbb:	e8 a1 fa ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021dc0:	83 c4 0c             	add    esp,0xc
c0021dc3:	6a 22                	push   0x22
c0021dc5:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021dcc:	50                   	push   eax
c0021dcd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021dd1:	50                   	push   eax
c0021dd2:	e8 6d e9 fd ff       	call   c0000744 <memcpy>
c0021dd7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021dde:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021de2:	89 10                	mov    DWORD PTR [eax],edx
c0021de4:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021deb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021def:	89 10                	mov    DWORD PTR [eax],edx
c0021df1:	b0 01                	mov    al,0x1
c0021df3:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021df9:	c3                   	ret    

c0021dfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dfa:	55                   	push   ebp
c0021dfb:	57                   	push   edi
c0021dfc:	56                   	push   esi
c0021dfd:	53                   	push   ebx
c0021dfe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021e04:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021e0b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021e12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021e16:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021e1a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021e1e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021e22:	75 03                	jne    c0021e27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e24:	83 c3 02             	add    ebx,0x2
c0021e27:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021e2a:	75 03                	jne    c0021e2f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021e2c:	43                   	inc    ebx
c0021e2d:	eb f8                	jmp    c0021e27 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e2f:	51                   	push   ecx
c0021e30:	68 00 01 00 00       	push   0x100
c0021e35:	6a 00                	push   0x0
c0021e37:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e3b:	50                   	push   eax
c0021e3c:	e8 37 e9 fd ff       	call   c0000778 <memset>
c0021e41:	83 c4 10             	add    esp,0x10
c0021e44:	31 d2                	xor    edx,edx
c0021e46:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e49:	84 c0                	test   al,al
c0021e4b:	74 21                	je     c0021e6e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e4d:	3c 2f                	cmp    al,0x2f
c0021e4f:	75 0b                	jne    c0021e5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e51:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e55:	bd 01 00 00 00       	mov    ebp,0x1
c0021e5a:	eb 14                	jmp    c0021e70 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e5c:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e5f:	80 f9 19             	cmp    cl,0x19
c0021e62:	77 03                	ja     c0021e67 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e64:	83 e8 20             	sub    eax,0x20
c0021e67:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e6b:	42                   	inc    edx
c0021e6c:	eb d8                	jmp    c0021e46 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e6e:	31 ed                	xor    ebp,ebp
c0021e70:	83 ec 0c             	sub    esp,0xc
c0021e73:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e7a:	e8 c4 d9 fe ff       	call   c000f843 <malloc>
c0021e7f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e86:	89 c6                	mov    esi,eax
c0021e88:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e8e:	c1 ef 0b             	shr    edi,0xb
c0021e91:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e98:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e9c:	83 c4 10             	add    esp,0x10
c0021e9f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021ea4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021ea8:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021eaf:	74 28                	je     c0021ed9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021eb1:	52                   	push   edx
c0021eb2:	57                   	push   edi
c0021eb3:	50                   	push   eax
c0021eb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021eb8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021ebf:	e8 9d f9 ff ff       	call   c0021861 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ec4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ec8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ecf:	05 00 08 00 00       	add    eax,0x800
c0021ed4:	83 c4 10             	add    esp,0x10
c0021ed7:	eb cb                	jmp    c0021ea4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ed9:	83 ec 0c             	sub    esp,0xc
c0021edc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021ee0:	57                   	push   edi
c0021ee1:	e8 ae e8 fd ff       	call   c0000794 <strlen>
c0021ee6:	50                   	push   eax
c0021ee7:	57                   	push   edi
c0021ee8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021eef:	56                   	push   esi
c0021ef0:	e8 2a f9 ff ff       	call   c002181f <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ef5:	83 c4 20             	add    esp,0x20
c0021ef8:	85 c0                	test   eax,eax
c0021efa:	75 13                	jne    c0021f0f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021efc:	83 ec 0c             	sub    esp,0xc
c0021eff:	56                   	push   esi
c0021f00:	e8 4e d9 fe ff       	call   c000f853 <free>
c0021f05:	83 c4 10             	add    esp,0x10
c0021f08:	31 c0                	xor    eax,eax
c0021f0a:	e9 b3 00 00 00       	jmp    c0021fc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f0f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021f13:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021f17:	c1 e7 08             	shl    edi,0x8
c0021f1a:	c1 e2 10             	shl    edx,0x10
c0021f1d:	09 d7                	or     edi,edx
c0021f1f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021f23:	09 d7                	or     edi,edx
c0021f25:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021f29:	c1 e2 18             	shl    edx,0x18
c0021f2c:	09 d7                	or     edi,edx
c0021f2e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f32:	89 d1                	mov    ecx,edx
c0021f34:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f38:	c1 e1 08             	shl    ecx,0x8
c0021f3b:	c1 e2 10             	shl    edx,0x10
c0021f3e:	09 ca                	or     edx,ecx
c0021f40:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f44:	09 ca                	or     edx,ecx
c0021f46:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f4a:	c1 e1 18             	shl    ecx,0x18
c0021f4d:	09 ca                	or     edx,ecx
c0021f4f:	89 e9                	mov    ecx,ebp
c0021f51:	84 c9                	test   cl,cl
c0021f53:	74 3c                	je     c0021f91 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f55:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f59:	83 ec 0c             	sub    esp,0xc
c0021f5c:	56                   	push   esi
c0021f5d:	e8 f1 d8 fe ff       	call   c000f853 <free>
c0021f62:	83 c4 0c             	add    esp,0xc
c0021f65:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f6c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f71:	50                   	push   eax
c0021f72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f79:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f84:	52                   	push   edx
c0021f85:	57                   	push   edi
c0021f86:	53                   	push   ebx
c0021f87:	e8 6e fe ff ff       	call   c0021dfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f8c:	83 c4 20             	add    esp,0x20
c0021f8f:	eb 31                	jmp    c0021fc2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f91:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f94:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f9b:	d0 e8                	shr    al,1
c0021f9d:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f9f:	83 e0 01             	and    eax,0x1
c0021fa2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021fa9:	83 ec 0c             	sub    esp,0xc
c0021fac:	89 13                	mov    DWORD PTR [ebx],edx
c0021fae:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021fb5:	89 03                	mov    DWORD PTR [ebx],eax
c0021fb7:	56                   	push   esi
c0021fb8:	e8 96 d8 fe ff       	call   c000f853 <free>
c0021fbd:	83 c4 10             	add    esp,0x10
c0021fc0:	b0 01                	mov    al,0x1
c0021fc2:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021fc8:	5b                   	pop    ebx
c0021fc9:	5e                   	pop    esi
c0021fca:	5f                   	pop    edi
c0021fcb:	5d                   	pop    ebp
c0021fcc:	c3                   	ret    

c0021fcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021fcd:	55                   	push   ebp
c0021fce:	57                   	push   edi
c0021fcf:	56                   	push   esi
c0021fd0:	53                   	push   ebx
c0021fd1:	83 ec 20             	sub    esp,0x20
c0021fd4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fd8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fdc:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fe0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fe8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021ff0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021ff5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021ffb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022001:	57                   	push   edi
c0022002:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022006:	50                   	push   eax
c0022007:	8d 44 24 14          	lea    eax,[esp+0x14]
c002200b:	50                   	push   eax
c002200c:	e8 94 fd ff ff       	call   c0021da5 <readRoot(unsigned int*, unsigned int*, char)>
c0022011:	5a                   	pop    edx
c0022012:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022016:	e8 79 e7 fd ff       	call   c0000794 <strlen>
c002201b:	83 c4 10             	add    esp,0x10
c002201e:	83 f8 03             	cmp    eax,0x3
c0022021:	77 17                	ja     c002203a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022023:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022027:	89 03                	mov    DWORD PTR [ebx],eax
c0022029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002202d:	89 06                	mov    DWORD PTR [esi],eax
c002202f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022036:	b0 01                	mov    al,0x1
c0022038:	eb 19                	jmp    c0022053 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002203a:	50                   	push   eax
c002203b:	55                   	push   ebp
c002203c:	57                   	push   edi
c002203d:	56                   	push   esi
c002203e:	53                   	push   ebx
c002203f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022043:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022047:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002204b:	e8 aa fd ff ff       	call   c0021dfa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022050:	83 c4 20             	add    esp,0x20
c0022053:	83 c4 1c             	add    esp,0x1c
c0022056:	5b                   	pop    ebx
c0022057:	5e                   	pop    esi
c0022058:	5f                   	pop    edi
c0022059:	5d                   	pop    ebp
c002205a:	c3                   	ret    
c002205b:	90                   	nop

c002205c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002205c:	57                   	push   edi
c002205d:	56                   	push   esi
c002205e:	53                   	push   ebx
c002205f:	83 ec 10             	sub    esp,0x10
c0022062:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022066:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002206a:	85 ff                	test   edi,edi
c002206c:	0f 84 9d 00 00 00    	je     c002210f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022072:	85 f6                	test   esi,esi
c0022074:	0f 84 95 00 00 00    	je     c002210f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002207a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002207f:	74 17                	je     c0022098 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022081:	83 ec 0c             	sub    esp,0xc
c0022084:	68 f7 c9 02 c0       	push   0xc002c9f7
c0022089:	e8 91 0f ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c002208e:	83 c4 10             	add    esp,0x10
c0022091:	b8 03 00 00 00       	mov    eax,0x3
c0022096:	eb 7c                	jmp    c0022114 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022098:	83 ec 0c             	sub    esp,0xc
c002209b:	6a 1c                	push   0x1c
c002209d:	e8 a1 d7 fe ff       	call   c000f843 <malloc>
c00220a2:	89 07                	mov    DWORD PTR [edi],eax
c00220a4:	89 c3                	mov    ebx,eax
c00220a6:	58                   	pop    eax
c00220a7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00220ab:	50                   	push   eax
c00220ac:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00220af:	50                   	push   eax
c00220b0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b4:	50                   	push   eax
c00220b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00220b9:	50                   	push   eax
c00220ba:	56                   	push   esi
c00220bb:	e8 0d ff ff ff       	call   c0021fcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00220c0:	83 c4 20             	add    esp,0x20
c00220c3:	84 c0                	test   al,al
c00220c5:	74 07                	je     c00220ce <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00220c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00220cc:	74 0b                	je     c00220d9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220ce:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220d2:	b8 01 00 00 00       	mov    eax,0x1
c00220d7:	eb 3b                	jmp    c0022114 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220e1:	89 03                	mov    DWORD PTR [ebx],eax
c00220e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022106:	8a 06                	mov    al,BYTE PTR [esi]
c0022108:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002210b:	31 c0                	xor    eax,eax
c002210d:	eb 05                	jmp    c0022114 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002210f:	b8 04 00 00 00       	mov    eax,0x4
c0022114:	83 c4 10             	add    esp,0x10
c0022117:	5b                   	pop    ebx
c0022118:	5e                   	pop    esi
c0022119:	5f                   	pop    edi
c002211a:	c3                   	ret    
c002211b:	90                   	nop

c002211c <ISO9660::exists(char const*)>:
c002211c:	83 ec 28             	sub    esp,0x28
c002211f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022123:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022127:	52                   	push   edx
c0022128:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002212b:	52                   	push   edx
c002212c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022130:	52                   	push   edx
c0022131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022135:	52                   	push   edx
c0022136:	50                   	push   eax
c0022137:	e8 91 fe ff ff       	call   c0021fcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002213c:	83 c4 3c             	add    esp,0x3c
c002213f:	c3                   	ret    

c0022140 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022140:	56                   	push   esi
c0022141:	53                   	push   ebx
c0022142:	83 ec 14             	sub    esp,0x14
c0022145:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022149:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002214d:	85 db                	test   ebx,ebx
c002214f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022153:	0f 94 c2             	sete   dl
c0022156:	85 f6                	test   esi,esi
c0022158:	0f 94 c0             	sete   al
c002215b:	08 c2                	or     dl,al
c002215d:	75 68                	jne    c00221c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002215f:	85 c9                	test   ecx,ecx
c0022161:	74 64                	je     c00221c7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022163:	83 ec 0c             	sub    esp,0xc
c0022166:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022169:	8d 44 24 18          	lea    eax,[esp+0x18]
c002216d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022173:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002217a:	50                   	push   eax
c002217b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002217e:	50                   	push   eax
c002217f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022183:	50                   	push   eax
c0022184:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022188:	50                   	push   eax
c0022189:	51                   	push   ecx
c002218a:	e8 3e fe ff ff       	call   c0021fcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002218f:	83 c4 20             	add    esp,0x20
c0022192:	ba 01 00 00 00       	mov    edx,0x1
c0022197:	84 c0                	test   al,al
c0022199:	74 31                	je     c00221cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002219b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002219f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221a6:	89 03                	mov    DWORD PTR [ebx],eax
c00221a8:	ba 00 00 00 00       	mov    edx,0x0
c00221ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00221b1:	85 c0                	test   eax,eax
c00221b3:	0f 95 06             	setne  BYTE PTR [esi]
c00221b6:	74 14                	je     c00221cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221b8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00221be:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221c5:	eb 05                	jmp    c00221cc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00221c7:	ba 04 00 00 00       	mov    edx,0x4
c00221cc:	83 c4 14             	add    esp,0x14
c00221cf:	89 d0                	mov    eax,edx
c00221d1:	5b                   	pop    ebx
c00221d2:	5e                   	pop    esi
c00221d3:	c3                   	ret    

c00221d4 <ISO9660::openDir(char const*, void**)>:
c00221d4:	57                   	push   edi
c00221d5:	56                   	push   esi
c00221d6:	53                   	push   ebx
c00221d7:	83 ec 10             	sub    esp,0x10
c00221da:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221de:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221e2:	85 ff                	test   edi,edi
c00221e4:	0f 84 95 00 00 00    	je     c002227f <ISO9660::openDir(char const*, void**)+0xab>
c00221ea:	85 f6                	test   esi,esi
c00221ec:	0f 84 8d 00 00 00    	je     c002227f <ISO9660::openDir(char const*, void**)+0xab>
c00221f2:	83 ec 0c             	sub    esp,0xc
c00221f5:	6a 1c                	push   0x1c
c00221f7:	e8 47 d6 fe ff       	call   c000f843 <malloc>
c00221fc:	89 07                	mov    DWORD PTR [edi],eax
c00221fe:	89 c3                	mov    ebx,eax
c0022200:	59                   	pop    ecx
c0022201:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022205:	50                   	push   eax
c0022206:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022209:	50                   	push   eax
c002220a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002220e:	50                   	push   eax
c002220f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022213:	50                   	push   eax
c0022214:	56                   	push   esi
c0022215:	e8 b3 fd ff ff       	call   c0021fcd <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002221a:	83 c4 20             	add    esp,0x20
c002221d:	84 c0                	test   al,al
c002221f:	74 07                	je     c0022228 <ISO9660::openDir(char const*, void**)+0x54>
c0022221:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022226:	75 21                	jne    c0022249 <ISO9660::openDir(char const*, void**)+0x75>
c0022228:	0f b6 c0             	movzx  eax,al
c002222b:	52                   	push   edx
c002222c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022230:	50                   	push   eax
c0022231:	68 1d ca 02 c0       	push   0xc002ca1d
c0022236:	e8 e4 0d ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c002223b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002223f:	83 c4 10             	add    esp,0x10
c0022242:	b8 01 00 00 00       	mov    eax,0x1
c0022247:	eb 3b                	jmp    c0022284 <ISO9660::openDir(char const*, void**)+0xb0>
c0022249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022251:	89 03                	mov    DWORD PTR [ebx],eax
c0022253:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002225a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002225e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022265:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002226c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002226f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022276:	8a 06                	mov    al,BYTE PTR [esi]
c0022278:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002227b:	31 c0                	xor    eax,eax
c002227d:	eb 05                	jmp    c0022284 <ISO9660::openDir(char const*, void**)+0xb0>
c002227f:	b8 04 00 00 00       	mov    eax,0x4
c0022284:	83 c4 10             	add    esp,0x10
c0022287:	5b                   	pop    ebx
c0022288:	5e                   	pop    esi
c0022289:	5f                   	pop    edi
c002228a:	c3                   	ret    
c002228b:	90                   	nop

c002228c <ISO9660::ISO9660()>:
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022293:	83 ec 0c             	sub    esp,0xc
c0022296:	50                   	push   eax
c0022297:	e8 88 10 ff ff       	call   c0013324 <Filesystem::Filesystem()>
c002229c:	83 c4 10             	add    esp,0x10
c002229f:	ba 40 ca 02 c0       	mov    edx,0xc002ca40
c00222a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a8:	89 10                	mov    DWORD PTR [eax],edx
c00222aa:	90                   	nop
c00222ab:	83 c4 0c             	add    esp,0xc
c00222ae:	c3                   	ret    
c00222af:	90                   	nop

c00222b0 <SoundChannel::~SoundChannel()>:
c00222b0:	83 ec 0c             	sub    esp,0xc
c00222b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00222ba:	83 ec 0c             	sub    esp,0xc
c00222bd:	50                   	push   eax
c00222be:	e8 90 d5 fe ff       	call   c000f853 <free>
c00222c3:	83 c4 10             	add    esp,0x10
c00222c6:	90                   	nop
c00222c7:	83 c4 0c             	add    esp,0xc
c00222ca:	c3                   	ret    
c00222cb:	90                   	nop

c00222cc <SoundChannel::setSpeed(float)>:
c00222cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222d4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222d7:	c3                   	ret    

c00222d8 <SoundChannel::getSpeed()>:
c00222d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222dc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222df:	c3                   	ret    

c00222e0 <SoundChannel::setVolume(int)>:
c00222e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222e4:	83 f8 64             	cmp    eax,0x64
c00222e7:	7e 05                	jle    c00222ee <SoundChannel::setVolume(int)+0xe>
c00222e9:	b8 64 00 00 00       	mov    eax,0x64
c00222ee:	85 c0                	test   eax,eax
c00222f0:	79 02                	jns    c00222f4 <SoundChannel::setVolume(int)+0x14>
c00222f2:	31 c0                	xor    eax,eax
c00222f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222f8:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222fb:	c3                   	ret    

c00222fc <SoundChannel::getVolume()>:
c00222fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022300:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022303:	c3                   	ret    

c0022304 <SoundChannel::pause()>:
c0022304:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022308:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002230c:	c3                   	ret    
c002230d:	90                   	nop

c002230e <SoundChannel::SoundChannel(int, int, int, int)>:
c002230e:	83 ec 1c             	sub    esp,0x1c
c0022311:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022315:	e8 ea ff ff ff       	call   c0022304 <SoundChannel::pause()>
c002231a:	83 c4 04             	add    esp,0x4
c002231d:	6a 50                	push   0x50
c002231f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022323:	e8 b8 ff ff ff       	call   c00222e0 <SoundChannel::setVolume(int)>
c0022328:	83 c4 08             	add    esp,0x8
c002232b:	a1 b8 ca 02 c0       	mov    eax,ds:0xc002cab8
c0022330:	50                   	push   eax
c0022331:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022335:	e8 92 ff ff ff       	call   c00222cc <SoundChannel::setSpeed(float)>
c002233a:	83 c4 08             	add    esp,0x8
c002233d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022341:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022345:	89 10                	mov    DWORD PTR [eax],edx
c0022347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002234b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002234f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022356:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002235a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002235d:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022362:	75 23                	jne    c0022387 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022368:	8b 10                	mov    edx,DWORD PTR [eax]
c002236a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002236e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022371:	0f af c2             	imul   eax,edx
c0022374:	85 c0                	test   eax,eax
c0022376:	79 03                	jns    c002237b <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022378:	83 c0 03             	add    eax,0x3
c002237b:	c1 f8 02             	sar    eax,0x2
c002237e:	05 a0 0f 00 00       	add    eax,0xfa0
c0022383:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022387:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002238b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002238f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022396:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002239d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223a1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00223a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ac:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223af:	c1 e0 02             	shl    eax,0x2
c00223b2:	83 ec 0c             	sub    esp,0xc
c00223b5:	50                   	push   eax
c00223b6:	e8 88 d4 fe ff       	call   c000f843 <malloc>
c00223bb:	83 c4 10             	add    esp,0x10
c00223be:	89 c2                	mov    edx,eax
c00223c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00223c7:	83 ec 04             	sub    esp,0x4
c00223ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223ce:	50                   	push   eax
c00223cf:	6a 01                	push   0x1
c00223d1:	6a 04                	push   0x4
c00223d3:	e8 c7 67 fe ff       	call   c0008b9f <src_new>
c00223d8:	83 c4 10             	add    esp,0x10
c00223db:	89 c2                	mov    edx,eax
c00223dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223e8:	85 c0                	test   eax,eax
c00223ea:	74 10                	je     c00223fc <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223ec:	83 ec 0c             	sub    esp,0xc
c00223ef:	68 9c ca 02 c0       	push   0xc002ca9c
c00223f4:	e8 d4 82 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00223f9:	83 c4 10             	add    esp,0x10
c00223fc:	a0 80 28 03 c0       	mov    al,ds:0xc0032880
c0022401:	83 f0 01             	xor    eax,0x1
c0022404:	84 c0                	test   al,al
c0022406:	74 57                	je     c002245f <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022408:	a1 bc ca 02 c0       	mov    eax,ds:0xc002cabc
c002240d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022411:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022419:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022421:	7f 35                	jg     c0022458 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022423:	83 ec 0c             	sub    esp,0xc
c0022426:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002242a:	e8 98 4f 00 00       	call   c00273c7 <__floatsisf>
c002242f:	83 c4 10             	add    esp,0x10
c0022432:	8b 15 bc ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cabc
c0022438:	83 ec 08             	sub    esp,0x8
c002243b:	52                   	push   edx
c002243c:	50                   	push   eax
c002243d:	e8 97 4b 00 00       	call   c0026fd9 <__mulsf3>
c0022442:	83 c4 10             	add    esp,0x10
c0022445:	89 c2                	mov    edx,eax
c0022447:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002244b:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0022452:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022456:	eb c1                	jmp    c0022419 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022458:	c6 05 80 28 03 c0 01 	mov    BYTE PTR ds:0xc0032880,0x1
c002245f:	90                   	nop
c0022460:	83 c4 1c             	add    esp,0x1c
c0022463:	c3                   	ret    

c0022464 <SoundChannel::play()>:
c0022464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022468:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002246c:	c3                   	ret    
c002246d:	90                   	nop

c002246e <SoundChannel::paused()>:
c002246e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022472:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022475:	c3                   	ret    

c0022476 <SoundChannel::getSampleRate()>:
c0022476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002247a:	8b 00                	mov    eax,DWORD PTR [eax]
c002247c:	c3                   	ret    
c002247d:	90                   	nop

c002247e <SoundChannel::getBits()>:
c002247e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022485:	c3                   	ret    

c0022486 <SoundChannel::getBufferUsed()>:
c0022486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002248a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002248d:	c3                   	ret    

c002248e <SoundChannel::getBufferSize()>:
c002248e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022492:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022495:	c3                   	ret    

c0022496 <SoundChannel::unbuffer(float*, int, int)>:
c0022496:	56                   	push   esi
c0022497:	53                   	push   ebx
c0022498:	83 ec 40             	sub    esp,0x40
c002249b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c002249f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00224a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224a6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00224a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00224ad:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224b1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00224b5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00224b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00224bd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00224c1:	e8 01 4f 00 00       	call   c00273c7 <__floatsisf>
c00224c6:	5a                   	pop    edx
c00224c7:	89 c6                	mov    esi,eax
c00224c9:	ff 33                	push   DWORD PTR [ebx]
c00224cb:	e8 f7 4e 00 00       	call   c00273c7 <__floatsisf>
c00224d0:	59                   	pop    ecx
c00224d1:	5a                   	pop    edx
c00224d2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224d5:	50                   	push   eax
c00224d6:	e8 fe 4a 00 00       	call   c0026fd9 <__mulsf3>
c00224db:	59                   	pop    ecx
c00224dc:	5a                   	pop    edx
c00224dd:	50                   	push   eax
c00224de:	56                   	push   esi
c00224df:	e8 b8 4c 00 00       	call   c002719c <__divsf3>
c00224e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00224e7:	e8 ab 61 00 00       	call   c0028697 <__extendsfdf2>
c00224ec:	59                   	pop    ecx
c00224ed:	5e                   	pop    esi
c00224ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224f2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224f6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022502:	50                   	push   eax
c0022503:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022506:	e8 89 62 fe ff       	call   c0008794 <src_process>
c002250b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002250f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022512:	83 c4 0c             	add    esp,0xc
c0022515:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022518:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002251b:	29 d0                	sub    eax,edx
c002251d:	c1 e0 02             	shl    eax,0x2
c0022520:	50                   	push   eax
c0022521:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022524:	50                   	push   eax
c0022525:	51                   	push   ecx
c0022526:	e8 51 e1 fd ff       	call   c000067c <memmove>
c002252b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002252f:	83 c4 44             	add    esp,0x44
c0022532:	5b                   	pop    ebx
c0022533:	5e                   	pop    esi
c0022534:	c3                   	ret    
c0022535:	90                   	nop

c0022536 <SoundChannel::buffer8(unsigned char*, int)>:
c0022536:	55                   	push   ebp
c0022537:	57                   	push   edi
c0022538:	56                   	push   esi
c0022539:	53                   	push   ebx
c002253a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002253e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022542:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022545:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022549:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002254c:	74 7a                	je     c00225c8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002254e:	85 ff                	test   edi,edi
c0022550:	7e 76                	jle    c00225c8 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022552:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022556:	8d 70 01             	lea    esi,[eax+0x1]
c0022559:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002255c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002255f:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c0022566:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022569:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002256c:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002256f:	74 5e                	je     c00225cf <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022571:	83 ff 01             	cmp    edi,0x1
c0022574:	74 4b                	je     c00225c1 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022576:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002257a:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002257d:	8d 70 01             	lea    esi,[eax+0x1]
c0022580:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022583:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c002258a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002258d:	b8 02 00 00 00       	mov    eax,0x2
c0022592:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022595:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022598:	75 23                	jne    c00225bd <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002259a:	eb 27                	jmp    c00225c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002259c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00225a1:	8d 71 01             	lea    esi,[ecx+0x1]
c00225a4:	40                   	inc    eax
c00225a5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00225a8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00225ab:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c00225b2:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c00225b5:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00225b8:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00225bb:	74 06                	je     c00225c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00225bd:	39 c7                	cmp    edi,eax
c00225bf:	75 db                	jne    c002259c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c00225c1:	89 f8                	mov    eax,edi
c00225c3:	5b                   	pop    ebx
c00225c4:	5e                   	pop    esi
c00225c5:	5f                   	pop    edi
c00225c6:	5d                   	pop    ebp
c00225c7:	c3                   	ret    
c00225c8:	5b                   	pop    ebx
c00225c9:	31 c0                	xor    eax,eax
c00225cb:	5e                   	pop    esi
c00225cc:	5f                   	pop    edi
c00225cd:	5d                   	pop    ebp
c00225ce:	c3                   	ret    
c00225cf:	b8 01 00 00 00       	mov    eax,0x1
c00225d4:	eb ed                	jmp    c00225c3 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225d6 <SoundDevice::SoundDevice(char const*)>:
c00225d6:	83 ec 1c             	sub    esp,0x1c
c00225d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225dd:	83 ec 08             	sub    esp,0x8
c00225e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225e4:	50                   	push   eax
c00225e5:	e8 4c 20 ff ff       	call   c0014636 <Device::Device(char const*)>
c00225ea:	83 c4 10             	add    esp,0x10
c00225ed:	ba c8 ca 02 c0       	mov    edx,0xc002cac8
c00225f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f6:	89 10                	mov    DWORD PTR [eax],edx
c00225f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225fc:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002260a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022614:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002261c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022621:	7f 19                	jg     c002263c <SoundDevice::SoundDevice(char const*)+0x66>
c0022623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022627:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002262b:	83 c2 54             	add    edx,0x54
c002262e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022636:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002263a:	eb e0                	jmp    c002261c <SoundDevice::SoundDevice(char const*)+0x46>
c002263c:	90                   	nop
c002263d:	83 c4 1c             	add    esp,0x1c
c0022640:	c3                   	ret    
c0022641:	90                   	nop

c0022642 <SoundDevice::~SoundDevice()>:
c0022642:	53                   	push   ebx
c0022643:	83 ec 18             	sub    esp,0x18
c0022646:	ba c8 ca 02 c0       	mov    edx,0xc002cac8
c002264b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002264f:	89 10                	mov    DWORD PTR [eax],edx
c0022651:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022659:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c002265e:	7f 46                	jg     c00226a6 <SoundDevice::~SoundDevice()+0x64>
c0022660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022664:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022668:	83 c2 54             	add    edx,0x54
c002266b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c002266f:	85 c0                	test   eax,eax
c0022671:	74 2d                	je     c00226a0 <SoundDevice::~SoundDevice()+0x5e>
c0022673:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022677:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002267b:	83 c2 54             	add    edx,0x54
c002267e:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022682:	85 db                	test   ebx,ebx
c0022684:	74 1a                	je     c00226a0 <SoundDevice::~SoundDevice()+0x5e>
c0022686:	83 ec 0c             	sub    esp,0xc
c0022689:	53                   	push   ebx
c002268a:	e8 21 fc ff ff       	call   c00222b0 <SoundChannel::~SoundChannel()>
c002268f:	83 c4 10             	add    esp,0x10
c0022692:	83 ec 08             	sub    esp,0x8
c0022695:	6a 2c                	push   0x2c
c0022697:	53                   	push   ebx
c0022698:	e8 a2 08 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c002269d:	83 c4 10             	add    esp,0x10
c00226a0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00226a4:	eb b3                	jmp    c0022659 <SoundDevice::~SoundDevice()+0x17>
c00226a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00226aa:	83 ec 0c             	sub    esp,0xc
c00226ad:	50                   	push   eax
c00226ae:	e8 65 1c ff ff       	call   c0014318 <Device::~Device()>
c00226b3:	83 c4 10             	add    esp,0x10
c00226b6:	90                   	nop
c00226b7:	83 c4 18             	add    esp,0x18
c00226ba:	5b                   	pop    ebx
c00226bb:	c3                   	ret    

c00226bc <SoundDevice::~SoundDevice()>:
c00226bc:	83 ec 0c             	sub    esp,0xc
c00226bf:	83 ec 0c             	sub    esp,0xc
c00226c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226c6:	e8 77 ff ff ff       	call   c0022642 <SoundDevice::~SoundDevice()>
c00226cb:	83 c4 10             	add    esp,0x10
c00226ce:	83 ec 08             	sub    esp,0x8
c00226d1:	68 e4 01 00 00       	push   0x1e4
c00226d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226da:	e8 60 08 ff ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00226df:	83 c4 10             	add    esp,0x10
c00226e2:	83 c4 0c             	add    esp,0xc
c00226e5:	c3                   	ret    

c00226e6 <SoundDevice::getFreeChannelNum()>:
c00226e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226ea:	31 c0                	xor    eax,eax
c00226ec:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226f4:	74 09                	je     c00226ff <SoundDevice::getFreeChannelNum()+0x19>
c00226f6:	40                   	inc    eax
c00226f7:	83 f8 20             	cmp    eax,0x20
c00226fa:	75 f0                	jne    c00226ec <SoundDevice::getFreeChannelNum()+0x6>
c00226fc:	83 c8 ff             	or     eax,0xffffffff
c00226ff:	c3                   	ret    

c0022700 <SoundDevice::addChannel(SoundChannel*)>:
c0022700:	56                   	push   esi
c0022701:	53                   	push   ebx
c0022702:	51                   	push   ecx
c0022703:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022707:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002270b:	53                   	push   ebx
c002270c:	e8 d5 ff ff ff       	call   c00226e6 <SoundDevice::getFreeChannelNum()>
c0022711:	5a                   	pop    edx
c0022712:	83 f8 ff             	cmp    eax,0xffffffff
c0022715:	74 51                	je     c0022768 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022717:	85 f6                	test   esi,esi
c0022719:	74 4d                	je     c0022768 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002271b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022722:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022729:	75 30                	jne    c002275b <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002272b:	83 ec 0c             	sub    esp,0xc
c002272e:	56                   	push   esi
c002272f:	e8 42 fd ff ff       	call   c0022476 <SoundChannel::getSampleRate()>
c0022734:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002273a:	89 34 24             	mov    DWORD PTR [esp],esi
c002273d:	e8 3c fd ff ff       	call   c002247e <SoundChannel::getBits()>
c0022742:	83 c4 0c             	add    esp,0xc
c0022745:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002274b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002274d:	50                   	push   eax
c002274e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022754:	53                   	push   ebx
c0022755:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022758:	83 c4 10             	add    esp,0x10
c002275b:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022761:	b8 01 00 00 00       	mov    eax,0x1
c0022766:	eb 03                	jmp    c002276b <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022768:	83 c8 ff             	or     eax,0xffffffff
c002276b:	5a                   	pop    edx
c002276c:	5b                   	pop    ebx
c002276d:	5e                   	pop    esi
c002276e:	c3                   	ret    
c002276f:	90                   	nop

c0022770 <SoundDevice::removeChannel(int)>:
c0022770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022778:	83 fa 1f             	cmp    edx,0x1f
c002277b:	77 23                	ja     c00227a0 <SoundDevice::removeChannel(int)+0x30>
c002277d:	8d 14 90             	lea    edx,[eax+edx*4]
c0022780:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022787:	74 17                	je     c00227a0 <SoundDevice::removeChannel(int)+0x30>
c0022789:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022793:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022799:	75 05                	jne    c00227a0 <SoundDevice::removeChannel(int)+0x30>
c002279b:	8b 00                	mov    eax,DWORD PTR [eax]
c002279d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00227a0:	c3                   	ret    
c00227a1:	90                   	nop

c00227a2 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00227a2:	57                   	push   edi
c00227a3:	56                   	push   esi
c00227a4:	53                   	push   ebx
c00227a5:	31 db                	xor    ebx,ebx
c00227a7:	83 ec 10             	sub    esp,0x10
c00227aa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00227ae:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00227b2:	0f 8d cb 00 00 00    	jge    c0022883 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00227b8:	83 ec 0c             	sub    esp,0xc
c00227bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00227bf:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00227c2:	e8 d0 5e 00 00       	call   c0028697 <__extendsfdf2>
c00227c7:	83 c4 10             	add    esp,0x10
c00227ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227d2:	68 00 00 f0 3f       	push   0x3ff00000
c00227d7:	6a 00                	push   0x0
c00227d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227e1:	e8 3d 4e 00 00       	call   c0027623 <__adddf3>
c00227e6:	83 c4 10             	add    esp,0x10
c00227e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227f1:	68 00 00 e0 3f       	push   0x3fe00000
c00227f6:	6a 00                	push   0x0
c00227f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022800:	e8 9b 54 00 00       	call   c0027ca0 <__muldf3>
c0022805:	83 c4 10             	add    esp,0x10
c0022808:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002280c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022810:	68 00 00 60 40       	push   0x40600000
c0022815:	6a 00                	push   0x0
c0022817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002281b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002281f:	e8 7c 54 00 00       	call   c0027ca0 <__muldf3>
c0022824:	59                   	pop    ecx
c0022825:	5f                   	pop    edi
c0022826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002282a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002282e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022832:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022836:	e8 38 5d 00 00       	call   c0028573 <__truncdfsf2>
c002283b:	5a                   	pop    edx
c002283c:	89 c7                	mov    edi,eax
c002283e:	59                   	pop    ecx
c002283f:	68 00 00 fe 42       	push   0x42fe0000
c0022844:	50                   	push   eax
c0022845:	e8 d3 4d 00 00       	call   c002761d <__gesf2>
c002284a:	83 c4 10             	add    esp,0x10
c002284d:	85 c0                	test   eax,eax
c002284f:	78 06                	js     c0022857 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022851:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022855:	eb 26                	jmp    c002287d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022857:	50                   	push   eax
c0022858:	50                   	push   eax
c0022859:	6a 00                	push   0x0
c002285b:	57                   	push   edi
c002285c:	e8 c0 4d 00 00       	call   c0027621 <__lesf2>
c0022861:	83 c4 10             	add    esp,0x10
c0022864:	85 c0                	test   eax,eax
c0022866:	7f 06                	jg     c002286e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022868:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002286c:	eb 0f                	jmp    c002287d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002286e:	83 ec 0c             	sub    esp,0xc
c0022871:	57                   	push   edi
c0022872:	e8 b5 5e 00 00       	call   c002872c <lrintf>
c0022877:	83 c4 10             	add    esp,0x10
c002287a:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002287d:	43                   	inc    ebx
c002287e:	e9 2b ff ff ff       	jmp    c00227ae <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022883:	83 c4 10             	add    esp,0x10
c0022886:	5b                   	pop    ebx
c0022887:	5e                   	pop    esi
c0022888:	5f                   	pop    edi
c0022889:	c3                   	ret    

c002288a <SoundDevice::getAudio(int, float*, float*)>:
c002288a:	55                   	push   ebp
c002288b:	57                   	push   edi
c002288c:	56                   	push   esi
c002288d:	53                   	push   ebx
c002288e:	31 db                	xor    ebx,ebx
c0022890:	83 ec 20             	sub    esp,0x20
c0022893:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022897:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002289b:	c1 e0 02             	shl    eax,0x2
c002289e:	50                   	push   eax
c002289f:	6a 00                	push   0x0
c00228a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00228a5:	e8 ce de fd ff       	call   c0000778 <memset>
c00228aa:	83 c4 10             	add    esp,0x10
c00228ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00228b1:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c00228b8:	85 c0                	test   eax,eax
c00228ba:	0f 84 d7 00 00 00    	je     c0022997 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c0:	83 ec 0c             	sub    esp,0xc
c00228c3:	50                   	push   eax
c00228c4:	e8 a5 fb ff ff       	call   c002246e <SoundChannel::paused()>
c00228c9:	83 c4 10             	add    esp,0x10
c00228cc:	84 c0                	test   al,al
c00228ce:	0f 85 c3 00 00 00    	jne    c0022997 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228d4:	83 ec 0c             	sub    esp,0xc
c00228d7:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228de:	e8 19 fa ff ff       	call   c00222fc <SoundChannel::getVolume()>
c00228e3:	83 c4 10             	add    esp,0x10
c00228e6:	85 c0                	test   eax,eax
c00228e8:	0f 84 a9 00 00 00    	je     c0022997 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228ee:	83 ec 0c             	sub    esp,0xc
c00228f1:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228f8:	e8 ff f9 ff ff       	call   c00222fc <SoundChannel::getVolume()>
c00228fd:	83 ec 0c             	sub    esp,0xc
c0022900:	50                   	push   eax
c0022901:	e8 c1 4a 00 00       	call   c00273c7 <__floatsisf>
c0022906:	59                   	pop    ecx
c0022907:	5d                   	pop    ebp
c0022908:	31 ed                	xor    ebp,ebp
c002290a:	68 00 00 c8 42       	push   0x42c80000
c002290f:	50                   	push   eax
c0022910:	e8 87 48 00 00       	call   c002719c <__divsf3>
c0022915:	83 c4 10             	add    esp,0x10
c0022918:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002291c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022920:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022926:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002292a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022931:	e8 60 fb ff ff       	call   c0022496 <SoundChannel::unbuffer(float*, int, int)>
c0022936:	83 c4 20             	add    esp,0x20
c0022939:	89 c1                	mov    ecx,eax
c002293b:	39 cd                	cmp    ebp,ecx
c002293d:	7d 52                	jge    c0022991 <SoundDevice::getAudio(int, float*, float*)+0x107>
c002293f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022943:	50                   	push   eax
c0022944:	50                   	push   eax
c0022945:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022949:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002294c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022950:	e8 84 46 00 00       	call   c0026fd9 <__mulsf3>
c0022955:	5a                   	pop    edx
c0022956:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002295a:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022960:	e8 62 4a 00 00       	call   c00273c7 <__floatsisf>
c0022965:	59                   	pop    ecx
c0022966:	5a                   	pop    edx
c0022967:	50                   	push   eax
c0022968:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002296c:	e8 2b 48 00 00       	call   c002719c <__divsf3>
c0022971:	59                   	pop    ecx
c0022972:	5a                   	pop    edx
c0022973:	50                   	push   eax
c0022974:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022978:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002297b:	e8 36 43 00 00       	call   c0026cb6 <__addsf3>
c0022980:	83 c4 10             	add    esp,0x10
c0022983:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022987:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002298b:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c002298e:	45                   	inc    ebp
c002298f:	eb aa                	jmp    c002293b <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022991:	39 cf                	cmp    edi,ecx
c0022993:	7e 02                	jle    c0022997 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022995:	89 cf                	mov    edi,ecx
c0022997:	43                   	inc    ebx
c0022998:	83 fb 20             	cmp    ebx,0x20
c002299b:	0f 85 10 ff ff ff    	jne    c00228b1 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00229a1:	83 c4 1c             	add    esp,0x1c
c00229a4:	89 f8                	mov    eax,edi
c00229a6:	5b                   	pop    ebx
c00229a7:	5e                   	pop    esi
c00229a8:	5f                   	pop    edi
c00229a9:	5d                   	pop    ebp
c00229aa:	c3                   	ret    
c00229ab:	90                   	nop

c00229ac <PCI::open(int, int, void*)>:
c00229ac:	83 ec 18             	sub    esp,0x18
c00229af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00229b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00229b5:	50                   	push   eax
c00229b6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00229b9:	31 c0                	xor    eax,eax
c00229bb:	83 c4 1c             	add    esp,0x1c
c00229be:	c3                   	ret    
c00229bf:	90                   	nop

c00229c0 <PCI::close(int, int, void*)>:
c00229c0:	31 c0                	xor    eax,eax
c00229c2:	c3                   	ret    
c00229c3:	90                   	nop

c00229c4 <PCI::PCI()>:
c00229c4:	83 ec 0c             	sub    esp,0xc
c00229c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229cb:	83 ec 08             	sub    esp,0x8
c00229ce:	68 f8 ca 02 c0       	push   0xc002caf8
c00229d3:	50                   	push   eax
c00229d4:	e8 e1 12 ff ff       	call   c0013cba <Bus::Bus(char const*)>
c00229d9:	83 c4 10             	add    esp,0x10
c00229dc:	ba 64 cb 02 c0       	mov    edx,0xc002cb64
c00229e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e5:	89 10                	mov    DWORD PTR [eax],edx
c00229e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f1:	0f b6 d0             	movzx  edx,al
c00229f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a03:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a09:	0f b6 d0             	movzx  edx,al
c0022a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a10:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022a1f:	8d 50 01             	lea    edx,[eax+0x1]
c0022a22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a26:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022a2c:	0f b6 d0             	movzx  edx,al
c0022a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a37:	83 c9 c0             	or     ecx,0xffffffc0
c0022a3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a3e:	90                   	nop
c0022a3f:	83 c4 0c             	add    esp,0xc
c0022a42:	c3                   	ret    
c0022a43:	90                   	nop

c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a4d:	89 ca                	mov    edx,ecx
c0022a4f:	c1 e0 10             	shl    eax,0x10
c0022a52:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a58:	09 d0                	or     eax,edx
c0022a5a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a5f:	c1 e2 08             	shl    edx,0x8
c0022a62:	09 d0                	or     eax,edx
c0022a64:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a69:	c1 e2 0b             	shl    edx,0xb
c0022a6c:	09 d0                	or     eax,edx
c0022a6e:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a73:	0d 00 00 00 80       	or     eax,0x80000000
c0022a78:	ef                   	out    dx,eax
c0022a79:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a7e:	ed                   	in     eax,dx
c0022a7f:	83 e1 02             	and    ecx,0x2
c0022a82:	0f b6 c9             	movzx  ecx,cl
c0022a85:	c1 e1 03             	shl    ecx,0x3
c0022a88:	d3 e8                	shr    eax,cl
c0022a8a:	c3                   	ret    
c0022a8b:	90                   	nop

c0022a8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a8c:	6a 00                	push   0x0
c0022a8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a93:	50                   	push   eax
c0022a94:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a99:	50                   	push   eax
c0022a9a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a9f:	50                   	push   eax
c0022aa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa4:	e8 9b ff ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aa9:	83 c4 14             	add    esp,0x14
c0022aac:	c3                   	ret    
c0022aad:	90                   	nop

c0022aae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022aae:	6a 0e                	push   0xe
c0022ab0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ab5:	50                   	push   eax
c0022ab6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022abb:	50                   	push   eax
c0022abc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022ac1:	50                   	push   eax
c0022ac2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac6:	e8 79 ff ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022acb:	83 c4 14             	add    esp,0x14
c0022ace:	0f b6 c0             	movzx  eax,al
c0022ad1:	c3                   	ret    

c0022ad2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022ad2:	55                   	push   ebp
c0022ad3:	57                   	push   edi
c0022ad4:	56                   	push   esi
c0022ad5:	53                   	push   ebx
c0022ad6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022adb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ae0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022ae5:	6a 0a                	push   0xa
c0022ae7:	56                   	push   esi
c0022ae8:	55                   	push   ebp
c0022ae9:	57                   	push   edi
c0022aea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022aee:	e8 51 ff ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022af3:	6a 0a                	push   0xa
c0022af5:	89 c3                	mov    ebx,eax
c0022af7:	56                   	push   esi
c0022af8:	0f b6 db             	movzx  ebx,bl
c0022afb:	55                   	push   ebp
c0022afc:	57                   	push   edi
c0022afd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022b01:	e8 3e ff ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b06:	83 c4 28             	add    esp,0x28
c0022b09:	25 00 ff 00 00       	and    eax,0xff00
c0022b0e:	09 d8                	or     eax,ebx
c0022b10:	5b                   	pop    ebx
c0022b11:	5e                   	pop    esi
c0022b12:	5f                   	pop    edi
c0022b13:	5d                   	pop    ebp
c0022b14:	c3                   	ret    
c0022b15:	90                   	nop

c0022b16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022b16:	6a 08                	push   0x8
c0022b18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1d:	50                   	push   eax
c0022b1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b23:	50                   	push   eax
c0022b24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b29:	50                   	push   eax
c0022b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b2e:	e8 11 ff ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b33:	83 c4 14             	add    esp,0x14
c0022b36:	0f b6 c4             	movzx  eax,ah
c0022b39:	c3                   	ret    

c0022b3a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b3a:	6a 08                	push   0x8
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b47:	50                   	push   eax
c0022b48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b4d:	50                   	push   eax
c0022b4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b52:	e8 ed fe ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b57:	83 c4 14             	add    esp,0x14
c0022b5a:	c3                   	ret    
c0022b5b:	90                   	nop

c0022b5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b5c:	6a 3c                	push   0x3c
c0022b5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b63:	50                   	push   eax
c0022b64:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b69:	50                   	push   eax
c0022b6a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b6f:	50                   	push   eax
c0022b70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b74:	e8 cb fe ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b79:	83 c4 14             	add    esp,0x14
c0022b7c:	c3                   	ret    
c0022b7d:	90                   	nop

c0022b7e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b7e:	6a 18                	push   0x18
c0022b80:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b85:	50                   	push   eax
c0022b86:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b8b:	50                   	push   eax
c0022b8c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b91:	50                   	push   eax
c0022b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b96:	e8 a9 fe ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b9b:	83 c4 14             	add    esp,0x14
c0022b9e:	0f b6 c4             	movzx  eax,ah
c0022ba1:	c3                   	ret    

c0022ba2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022ba2:	55                   	push   ebp
c0022ba3:	57                   	push   edi
c0022ba4:	56                   	push   esi
c0022ba5:	53                   	push   ebx
c0022ba6:	50                   	push   eax
c0022ba7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022bab:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022bb0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022bb5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022bba:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022bc1:	8d 43 12             	lea    eax,[ebx+0x12]
c0022bc4:	83 c3 10             	add    ebx,0x10
c0022bc7:	0f b6 c0             	movzx  eax,al
c0022bca:	0f b6 db             	movzx  ebx,bl
c0022bcd:	50                   	push   eax
c0022bce:	51                   	push   ecx
c0022bcf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022bd3:	57                   	push   edi
c0022bd4:	55                   	push   ebp
c0022bd5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bd9:	e8 66 fe ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bde:	53                   	push   ebx
c0022bdf:	89 c6                	mov    esi,eax
c0022be1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022be5:	c1 e6 10             	shl    esi,0x10
c0022be8:	51                   	push   ecx
c0022be9:	57                   	push   edi
c0022bea:	55                   	push   ebp
c0022beb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bef:	e8 50 fe ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bf4:	83 c4 2c             	add    esp,0x2c
c0022bf7:	0f b7 c0             	movzx  eax,ax
c0022bfa:	5b                   	pop    ebx
c0022bfb:	09 f0                	or     eax,esi
c0022bfd:	5e                   	pop    esi
c0022bfe:	5f                   	pop    edi
c0022bff:	5d                   	pop    ebp
c0022c00:	c3                   	ret    
c0022c01:	90                   	nop

c0022c02 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022c02:	53                   	push   ebx
c0022c03:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c08:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022c11:	c1 e1 10             	shl    ecx,0x10
c0022c14:	25 fc 00 00 00       	and    eax,0xfc
c0022c19:	09 c1                	or     ecx,eax
c0022c1b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022c20:	c1 e0 08             	shl    eax,0x8
c0022c23:	09 c1                	or     ecx,eax
c0022c25:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022c2a:	c1 e0 0b             	shl    eax,0xb
c0022c2d:	09 c1                	or     ecx,eax
c0022c2f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c35:	89 c8                	mov    eax,ecx
c0022c37:	ef                   	out    dx,eax
c0022c38:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c3d:	ed                   	in     eax,dx
c0022c3e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c43:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c48:	74 0a                	je     c0022c54 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c4a:	0f b7 d8             	movzx  ebx,ax
c0022c4d:	89 d0                	mov    eax,edx
c0022c4f:	c1 e0 10             	shl    eax,0x10
c0022c52:	eb 05                	jmp    c0022c59 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c54:	66 31 c0             	xor    ax,ax
c0022c57:	89 d3                	mov    ebx,edx
c0022c59:	09 c3                	or     ebx,eax
c0022c5b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c60:	89 c8                	mov    eax,ecx
c0022c62:	ef                   	out    dx,eax
c0022c63:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c68:	89 d8                	mov    eax,ebx
c0022c6a:	ef                   	out    dx,eax
c0022c6b:	5b                   	pop    ebx
c0022c6c:	c3                   	ret    
c0022c6d:	90                   	nop

c0022c6e <PCI::checkBus(unsigned char)>:
c0022c6e:	56                   	push   esi
c0022c6f:	53                   	push   ebx
c0022c70:	31 db                	xor    ebx,ebx
c0022c72:	51                   	push   ecx
c0022c73:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c78:	52                   	push   edx
c0022c79:	53                   	push   ebx
c0022c7a:	43                   	inc    ebx
c0022c7b:	56                   	push   esi
c0022c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c80:	e8 2b 03 00 00       	call   c0022fb0 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c85:	83 c4 10             	add    esp,0x10
c0022c88:	83 fb 20             	cmp    ebx,0x20
c0022c8b:	75 eb                	jne    c0022c78 <PCI::checkBus(unsigned char)+0xa>
c0022c8d:	58                   	pop    eax
c0022c8e:	5b                   	pop    ebx
c0022c8f:	5e                   	pop    esi
c0022c90:	c3                   	ret    
c0022c91:	90                   	nop

c0022c92 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c92:	55                   	push   ebp
c0022c93:	57                   	push   edi
c0022c94:	56                   	push   esi
c0022c95:	53                   	push   ebx
c0022c96:	83 ec 1c             	sub    esp,0x1c
c0022c99:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c9d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022ca3:	0f 84 52 01 00 00    	je     c0022dfb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ca9:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022cad:	66 81 f9 06 04       	cmp    cx,0x406
c0022cb2:	75 2c                	jne    c0022ce0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022cb4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022cb9:	50                   	push   eax
c0022cba:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022cbf:	50                   	push   eax
c0022cc0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022cc5:	50                   	push   eax
c0022cc6:	56                   	push   esi
c0022cc7:	e8 b2 fe ff ff       	call   c0022b7e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022ccc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022cd0:	0f b6 c0             	movzx  eax,al
c0022cd3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022cd7:	83 c4 2c             	add    esp,0x2c
c0022cda:	5b                   	pop    ebx
c0022cdb:	5e                   	pop    esi
c0022cdc:	5f                   	pop    edi
c0022cdd:	5d                   	pop    ebp
c0022cde:	eb 8e                	jmp    c0022c6e <PCI::checkBus(unsigned char)>
c0022ce0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ce4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cf2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cf6:	88 d3                	mov    bl,dl
c0022cf8:	85 c0                	test   eax,eax
c0022cfa:	74 33                	je     c0022d2f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cfc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cff:	85 d2                	test   edx,edx
c0022d01:	74 28                	je     c0022d2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d03:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022d09:	31 ef                	xor    edi,ebp
c0022d0b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022d11:	75 18                	jne    c0022d2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022d17:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022d1d:	75 0c                	jne    c0022d2b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022d1f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022d25:	0f 84 d0 00 00 00    	je     c0022dfb <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d2d:	eb c9                	jmp    c0022cf8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d2f:	66 81 f9 01 06       	cmp    cx,0x601
c0022d34:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d38:	75 19                	jne    c0022d53 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d3a:	83 ec 0c             	sub    esp,0xc
c0022d3d:	68 64 01 00 00       	push   0x164
c0022d42:	e8 fc ca fe ff       	call   c000f843 <malloc>
c0022d47:	89 c5                	mov    ebp,eax
c0022d49:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d4c:	e8 95 0f 00 00       	call   c0023ce6 <SATABus::SATABus()>
c0022d51:	eb 1e                	jmp    c0022d71 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d53:	66 81 f9 01 01       	cmp    cx,0x101
c0022d58:	75 60                	jne    c0022dba <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d5a:	83 ec 0c             	sub    esp,0xc
c0022d5d:	68 70 02 00 00       	push   0x270
c0022d62:	e8 dc ca fe ff       	call   c000f843 <malloc>
c0022d67:	89 c5                	mov    ebp,eax
c0022d69:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d6c:	e8 03 03 00 00       	call   c0023074 <IDE::IDE()>
c0022d71:	58                   	pop    eax
c0022d72:	5a                   	pop    edx
c0022d73:	55                   	push   ebp
c0022d74:	56                   	push   esi
c0022d75:	e8 cc 16 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0022d7a:	83 ec 1c             	sub    esp,0x1c
c0022d7d:	b9 09 00 00 00       	mov    ecx,0x9
c0022d82:	fc                   	cld    
c0022d83:	89 e7                	mov    edi,esp
c0022d85:	89 de                	mov    esi,ebx
c0022d87:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d89:	55                   	push   ebp
c0022d8a:	e8 c1 15 ff ff       	call   c0014350 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d92:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d96:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d9e:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022da6:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022dae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022db1:	83 c4 4c             	add    esp,0x4c
c0022db4:	5b                   	pop    ebx
c0022db5:	5e                   	pop    esi
c0022db6:	5f                   	pop    edi
c0022db7:	5d                   	pop    ebp
c0022db8:	ff e0                	jmp    eax
c0022dba:	83 ec 0c             	sub    esp,0xc
c0022dbd:	68 58 01 00 00       	push   0x158
c0022dc2:	e8 7c ca fe ff       	call   c000f843 <malloc>
c0022dc7:	89 c5                	mov    ebp,eax
c0022dc9:	58                   	pop    eax
c0022dca:	5a                   	pop    edx
c0022dcb:	68 00 cb 02 c0       	push   0xc002cb00
c0022dd0:	55                   	push   ebp
c0022dd1:	e8 66 19 ff ff       	call   c001473c <DriverlessDevice::DriverlessDevice(char const*)>
c0022dd6:	59                   	pop    ecx
c0022dd7:	5f                   	pop    edi
c0022dd8:	55                   	push   ebp
c0022dd9:	56                   	push   esi
c0022dda:	e8 67 16 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0022ddf:	b9 09 00 00 00       	mov    ecx,0x9
c0022de4:	fc                   	cld    
c0022de5:	89 df                	mov    edi,ebx
c0022de7:	89 de                	mov    esi,ebx
c0022de9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022deb:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022def:	83 c4 2c             	add    esp,0x2c
c0022df2:	5b                   	pop    ebx
c0022df3:	5e                   	pop    esi
c0022df4:	5f                   	pop    edi
c0022df5:	5d                   	pop    ebp
c0022df6:	e9 55 15 ff ff       	jmp    c0014350 <Device::preOpenPCI(PCIDeviceInfo)>
c0022dfb:	83 c4 1c             	add    esp,0x1c
c0022dfe:	5b                   	pop    ebx
c0022dff:	5e                   	pop    esi
c0022e00:	5f                   	pop    edi
c0022e01:	5d                   	pop    ebp
c0022e02:	c3                   	ret    
c0022e03:	90                   	nop

c0022e04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022e04:	55                   	push   ebp
c0022e05:	57                   	push   edi
c0022e06:	56                   	push   esi
c0022e07:	53                   	push   ebx
c0022e08:	83 ec 5c             	sub    esp,0x5c
c0022e0b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022e0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e13:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022e17:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022e20:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022e24:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022e29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022e2d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e32:	6a 0c                	push   0xc
c0022e34:	55                   	push   ebp
c0022e35:	53                   	push   ebx
c0022e36:	57                   	push   edi
c0022e37:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e3e:	e8 01 fc ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e43:	55                   	push   ebp
c0022e44:	53                   	push   ebx
c0022e45:	57                   	push   edi
c0022e46:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e4d:	e8 80 fc ff ff       	call   c0022ad2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e52:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e57:	83 c4 24             	add    esp,0x24
c0022e5a:	55                   	push   ebp
c0022e5b:	53                   	push   ebx
c0022e5c:	57                   	push   edi
c0022e5d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e61:	e8 f6 fc ff ff       	call   c0022b5c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e66:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e6a:	6a 3c                	push   0x3c
c0022e6c:	55                   	push   ebp
c0022e6d:	53                   	push   ebx
c0022e6e:	57                   	push   edi
c0022e6f:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e76:	e8 c9 fb ff ff       	call   c0022a44 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e7b:	0f b6 c4             	movzx  eax,ah
c0022e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e82:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e86:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e8a:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0022e8f:	83 c4 24             	add    esp,0x24
c0022e92:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e98:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e9f:	74 6c                	je     c0022f0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022ea1:	31 f6                	xor    esi,esi
c0022ea3:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0022ea9:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022eaf:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022eb5:	7e 56                	jle    c0022f0d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022eb7:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022eba:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ec1:	39 cb                	cmp    ebx,ecx
c0022ec3:	75 45                	jne    c0022f0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ec5:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022ecc:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ed0:	75 38                	jne    c0022f0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ed2:	83 ec 0c             	sub    esp,0xc
c0022ed5:	68 1a cb 02 c0       	push   0xc002cb1a
c0022eda:	e8 40 01 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0022edf:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0022ee5:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022eeb:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ef3:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ef7:	52                   	push   edx
c0022ef8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022efc:	53                   	push   ebx
c0022efd:	68 3f cb 02 c0       	push   0xc002cb3f
c0022f02:	e8 18 01 ff ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0022f07:	83 c4 20             	add    esp,0x20
c0022f0a:	46                   	inc    esi
c0022f0b:	eb 96                	jmp    c0022ea3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f0d:	31 d2                	xor    edx,edx
c0022f0f:	83 ec 0c             	sub    esp,0xc
c0022f12:	55                   	push   ebp
c0022f13:	53                   	push   ebx
c0022f14:	57                   	push   edi
c0022f15:	52                   	push   edx
c0022f16:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022f1a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f21:	e8 7c fc ff ff       	call   c0022ba2 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f26:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022f2a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f2e:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f32:	42                   	inc    edx
c0022f33:	83 c4 20             	add    esp,0x20
c0022f36:	83 fa 06             	cmp    edx,0x6
c0022f39:	75 d4                	jne    c0022f0f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f3b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f3f:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f43:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f47:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f4b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f4f:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f53:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f58:	86 e0                	xchg   al,ah
c0022f5a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f5f:	55                   	push   ebp
c0022f60:	53                   	push   ebx
c0022f61:	57                   	push   edi
c0022f62:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f66:	e8 ab fb ff ff       	call   c0022b16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f6b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f6f:	55                   	push   ebp
c0022f70:	53                   	push   ebx
c0022f71:	57                   	push   edi
c0022f72:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f79:	e8 0e fb ff ff       	call   c0022a8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f7e:	83 ec 0c             	sub    esp,0xc
c0022f81:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f86:	b9 09 00 00 00       	mov    ecx,0x9
c0022f8b:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f8f:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f93:	fc                   	cld    
c0022f94:	89 e7                	mov    edi,esp
c0022f96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f98:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f9f:	e8 ee fc ff ff       	call   c0022c92 <PCI::foundDevice(PCIDeviceInfo)>
c0022fa4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022faa:	5b                   	pop    ebx
c0022fab:	5e                   	pop    esi
c0022fac:	5f                   	pop    edi
c0022fad:	5d                   	pop    ebp
c0022fae:	c3                   	ret    
c0022faf:	90                   	nop

c0022fb0 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022fb0:	55                   	push   ebp
c0022fb1:	57                   	push   edi
c0022fb2:	56                   	push   esi
c0022fb3:	53                   	push   ebx
c0022fb4:	83 ec 0c             	sub    esp,0xc
c0022fb7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022fbb:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022fc0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022fc5:	6a 00                	push   0x0
c0022fc7:	56                   	push   esi
c0022fc8:	57                   	push   edi
c0022fc9:	55                   	push   ebp
c0022fca:	e8 bd fa ff ff       	call   c0022a8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fcf:	6a 00                	push   0x0
c0022fd1:	56                   	push   esi
c0022fd2:	57                   	push   edi
c0022fd3:	55                   	push   ebp
c0022fd4:	e8 2b fe ff ff       	call   c0022e04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fd9:	83 c4 20             	add    esp,0x20
c0022fdc:	6a 00                	push   0x0
c0022fde:	56                   	push   esi
c0022fdf:	57                   	push   edi
c0022fe0:	55                   	push   ebp
c0022fe1:	e8 c8 fa ff ff       	call   c0022aae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fe6:	83 c4 10             	add    esp,0x10
c0022fe9:	84 c0                	test   al,al
c0022feb:	79 27                	jns    c0023014 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fed:	bb 01 00 00 00       	mov    ebx,0x1
c0022ff2:	53                   	push   ebx
c0022ff3:	56                   	push   esi
c0022ff4:	57                   	push   edi
c0022ff5:	55                   	push   ebp
c0022ff6:	e8 91 fa ff ff       	call   c0022a8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ffb:	83 c4 10             	add    esp,0x10
c0022ffe:	66 40                	inc    ax
c0023000:	74 0c                	je     c002300e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023002:	53                   	push   ebx
c0023003:	56                   	push   esi
c0023004:	57                   	push   edi
c0023005:	55                   	push   ebp
c0023006:	e8 f9 fd ff ff       	call   c0022e04 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	43                   	inc    ebx
c002300f:	83 fb 08             	cmp    ebx,0x8
c0023012:	75 de                	jne    c0022ff2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023014:	83 c4 0c             	add    esp,0xc
c0023017:	5b                   	pop    ebx
c0023018:	5e                   	pop    esi
c0023019:	5f                   	pop    edi
c002301a:	5d                   	pop    ebp
c002301b:	c3                   	ret    

c002301c <PCI::detect()>:
c002301c:	56                   	push   esi
c002301d:	53                   	push   ebx
c002301e:	53                   	push   ebx
c002301f:	31 db                	xor    ebx,ebx
c0023021:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023025:	6a 00                	push   0x0
c0023027:	6a 00                	push   0x0
c0023029:	6a 00                	push   0x0
c002302b:	56                   	push   esi
c002302c:	e8 7d fa ff ff       	call   c0022aae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023031:	83 c4 10             	add    esp,0x10
c0023034:	a8 80                	test   al,0x80
c0023036:	75 21                	jne    c0023059 <PCI::detect()+0x3d>
c0023038:	51                   	push   ecx
c0023039:	51                   	push   ecx
c002303a:	6a 00                	push   0x0
c002303c:	56                   	push   esi
c002303d:	e8 2c fc ff ff       	call   c0022c6e <PCI::checkBus(unsigned char)>
c0023042:	83 c4 10             	add    esp,0x10
c0023045:	eb 24                	jmp    c002306b <PCI::detect()+0x4f>
c0023047:	52                   	push   edx
c0023048:	52                   	push   edx
c0023049:	53                   	push   ebx
c002304a:	43                   	inc    ebx
c002304b:	56                   	push   esi
c002304c:	e8 1d fc ff ff       	call   c0022c6e <PCI::checkBus(unsigned char)>
c0023051:	83 c4 10             	add    esp,0x10
c0023054:	83 fb 08             	cmp    ebx,0x8
c0023057:	74 12                	je     c002306b <PCI::detect()+0x4f>
c0023059:	53                   	push   ebx
c002305a:	6a 00                	push   0x0
c002305c:	6a 00                	push   0x0
c002305e:	56                   	push   esi
c002305f:	e8 28 fa ff ff       	call   c0022a8c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023064:	83 c4 10             	add    esp,0x10
c0023067:	66 40                	inc    ax
c0023069:	74 dc                	je     c0023047 <PCI::detect()+0x2b>
c002306b:	58                   	pop    eax
c002306c:	5b                   	pop    ebx
c002306d:	5e                   	pop    esi
c002306e:	c3                   	ret    
c002306f:	90                   	nop

c0023070 <IDE::close(int, int, void*)>:
c0023070:	83 c8 ff             	or     eax,0xffffffff
c0023073:	c3                   	ret    

c0023074 <IDE::IDE()>:
c0023074:	83 ec 0c             	sub    esp,0xc
c0023077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002307b:	83 ec 08             	sub    esp,0x8
c002307e:	68 88 cb 02 c0       	push   0xc002cb88
c0023083:	50                   	push   eax
c0023084:	e8 49 17 ff ff       	call   c00147d2 <HardDiskController::HardDiskController(char const*)>
c0023089:	83 c4 10             	add    esp,0x10
c002308c:	ba c8 cd 02 c0       	mov    edx,0xc002cdc8
c0023091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023095:	89 10                	mov    DWORD PTR [eax],edx
c0023097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002309b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00230a2:	90                   	nop
c00230a3:	83 c4 0c             	add    esp,0xc
c00230a6:	c3                   	ret    
c00230a7:	90                   	nop

c00230a8 <IDE::prepareInterrupt(unsigned char)>:
c00230a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00230ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00230b1:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00230b9:	c3                   	ret    

c00230ba <selectDrive(unsigned char, unsigned char)>:
c00230ba:	c3                   	ret    
c00230bb:	90                   	nop

c00230bc <IDE::getBase(unsigned char)>:
c00230bc:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00230c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00230c5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00230cd:	c3                   	ret    

c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230ce:	55                   	push   ebp
c00230cf:	57                   	push   edi
c00230d0:	56                   	push   esi
c00230d1:	53                   	push   ebx
c00230d2:	83 ec 1c             	sub    esp,0x1c
c00230d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230dd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230e8:	80 f9 03             	cmp    cl,0x3
c00230eb:	77 51                	ja     c002313e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230f1:	0f b6 f2             	movzx  esi,dl
c00230f4:	0f b6 db             	movzx  ebx,bl
c00230f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230fa:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230fe:	83 ca 80             	or     edx,0xffffff80
c0023101:	0f b6 d2             	movzx  edx,dl
c0023104:	52                   	push   edx
c0023105:	6a 0c                	push   0xc
c0023107:	56                   	push   esi
c0023108:	57                   	push   edi
c0023109:	e8 c0 ff ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002310e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023113:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023117:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002311b:	ee                   	out    dx,al
c002311c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023121:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023125:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023129:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002312d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023135:	83 c4 2c             	add    esp,0x2c
c0023138:	5b                   	pop    ebx
c0023139:	5e                   	pop    esi
c002313a:	5f                   	pop    edi
c002313b:	5d                   	pop    ebp
c002313c:	eb 90                	jmp    c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002313e:	80 fb 07             	cmp    bl,0x7
c0023141:	77 12                	ja     c0023155 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023143:	0f b6 d2             	movzx  edx,dl
c0023146:	0f b6 db             	movzx  ebx,bl
c0023149:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023151:	89 da                	mov    edx,ebx
c0023153:	eb 2f                	jmp    c0023184 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023155:	80 fb 0d             	cmp    bl,0xd
c0023158:	77 13                	ja     c002316d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002315a:	0f b6 d2             	movzx  edx,dl
c002315d:	0f b6 db             	movzx  ebx,bl
c0023160:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023167:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002316b:	eb 17                	jmp    c0023184 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002316d:	80 fb 15             	cmp    bl,0x15
c0023170:	77 13                	ja     c0023185 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023172:	0f b6 d2             	movzx  edx,dl
c0023175:	0f b6 db             	movzx  ebx,bl
c0023178:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023180:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023184:	ee                   	out    dx,al
c0023185:	83 c4 1c             	add    esp,0x1c
c0023188:	5b                   	pop    ebx
c0023189:	5e                   	pop    esi
c002318a:	5f                   	pop    edi
c002318b:	5d                   	pop    ebp
c002318c:	c3                   	ret    
c002318d:	90                   	nop

c002318e <IDE::read(unsigned char, unsigned char)>:
c002318e:	55                   	push   ebp
c002318f:	57                   	push   edi
c0023190:	56                   	push   esi
c0023191:	53                   	push   ebx
c0023192:	83 ec 1c             	sub    esp,0x1c
c0023195:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023199:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002319d:	8d 43 f8             	lea    eax,[ebx-0x8]
c00231a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00231a4:	3c 03                	cmp    al,0x3
c00231a6:	77 43                	ja     c00231eb <IDE::read(unsigned char, unsigned char)+0x5d>
c00231a8:	0f b6 f2             	movzx  esi,dl
c00231ab:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00231ae:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00231b2:	83 c8 80             	or     eax,0xffffff80
c00231b5:	0f b6 c0             	movzx  eax,al
c00231b8:	50                   	push   eax
c00231b9:	6a 0c                	push   0xc
c00231bb:	56                   	push   esi
c00231bc:	57                   	push   edi
c00231bd:	e8 0c ff ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231c2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00231c7:	0f b6 c3             	movzx  eax,bl
c00231ca:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231ce:	ec                   	in     al,dx
c00231cf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231d3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231d8:	52                   	push   edx
c00231d9:	6a 0c                	push   0xc
c00231db:	56                   	push   esi
c00231dc:	57                   	push   edi
c00231dd:	e8 ec fe ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231e2:	83 c4 20             	add    esp,0x20
c00231e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231e9:	eb 49                	jmp    c0023234 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231eb:	80 fb 07             	cmp    bl,0x7
c00231ee:	77 12                	ja     c0023202 <IDE::read(unsigned char, unsigned char)+0x74>
c00231f0:	0f b6 d2             	movzx  edx,dl
c00231f3:	0f b6 c3             	movzx  eax,bl
c00231f6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231fe:	89 c2                	mov    edx,eax
c0023200:	eb 31                	jmp    c0023233 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023202:	80 fb 0d             	cmp    bl,0xd
c0023205:	77 13                	ja     c002321a <IDE::read(unsigned char, unsigned char)+0x8c>
c0023207:	0f b6 d2             	movzx  edx,dl
c002320a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023211:	0f b6 d3             	movzx  edx,bl
c0023214:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023218:	eb 19                	jmp    c0023233 <IDE::read(unsigned char, unsigned char)+0xa5>
c002321a:	31 c0                	xor    eax,eax
c002321c:	80 fb 15             	cmp    bl,0x15
c002321f:	77 13                	ja     c0023234 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023221:	0f b6 d2             	movzx  edx,dl
c0023224:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002322c:	0f b6 d3             	movzx  edx,bl
c002322f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023233:	ec                   	in     al,dx
c0023234:	83 c4 1c             	add    esp,0x1c
c0023237:	5b                   	pop    ebx
c0023238:	5e                   	pop    esi
c0023239:	5f                   	pop    edi
c002323a:	5d                   	pop    ebp
c002323b:	c3                   	ret    

c002323c <IDE::waitInterrupt(unsigned char)>:
c002323c:	55                   	push   ebp
c002323d:	57                   	push   edi
c002323e:	56                   	push   esi
c002323f:	53                   	push   ebx
c0023240:	31 db                	xor    ebx,ebx
c0023242:	83 ec 0c             	sub    esp,0xc
c0023245:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023249:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002324e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023256:	89 e8                	mov    eax,ebp
c0023258:	84 c0                	test   al,al
c002325a:	75 34                	jne    c0023290 <IDE::waitInterrupt(unsigned char)+0x54>
c002325c:	52                   	push   edx
c002325d:	6a 0c                	push   0xc
c002325f:	56                   	push   esi
c0023260:	57                   	push   edi
c0023261:	e8 28 ff ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023266:	83 c4 10             	add    esp,0x10
c0023269:	a8 01                	test   al,0x1
c002326b:	75 2b                	jne    c0023298 <IDE::waitInterrupt(unsigned char)+0x5c>
c002326d:	f6 c3 04             	test   bl,0x4
c0023270:	75 16                	jne    c0023288 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023272:	83 fb 32             	cmp    ebx,0x32
c0023275:	7e 11                	jle    c0023288 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023277:	50                   	push   eax
c0023278:	50                   	push   eax
c0023279:	6a 00                	push   0x0
c002327b:	68 80 96 98 00       	push   0x989680
c0023280:	e8 8b b1 ff ff       	call   c001e410 <nanoSleep(unsigned long long)>
c0023285:	83 c4 10             	add    esp,0x10
c0023288:	83 fb 3c             	cmp    ebx,0x3c
c002328b:	74 0b                	je     c0023298 <IDE::waitInterrupt(unsigned char)+0x5c>
c002328d:	43                   	inc    ebx
c002328e:	eb be                	jmp    c002324e <IDE::waitInterrupt(unsigned char)+0x12>
c0023290:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023298:	83 c4 0c             	add    esp,0xc
c002329b:	89 e8                	mov    eax,ebp
c002329d:	5b                   	pop    ebx
c002329e:	5e                   	pop    esi
c002329f:	5f                   	pop    edi
c00232a0:	5d                   	pop    ebp
c00232a1:	c3                   	ret    

c00232a2 <ideChannel0IRQHandler(regs*, void*)>:
c00232a2:	83 ec 10             	sub    esp,0x10
c00232a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00232b0:	6a 07                	push   0x7
c00232b2:	6a 00                	push   0x0
c00232b4:	50                   	push   eax
c00232b5:	e8 d4 fe ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00232ba:	83 c4 1c             	add    esp,0x1c
c00232bd:	c3                   	ret    

c00232be <ideChannel1IRQHandler(regs*, void*)>:
c00232be:	83 ec 10             	sub    esp,0x10
c00232c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00232cc:	6a 07                	push   0x7
c00232ce:	6a 01                	push   0x1
c00232d0:	50                   	push   eax
c00232d1:	e8 b8 fe ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00232d6:	83 c4 1c             	add    esp,0x1c
c00232d9:	c3                   	ret    

c00232da <IDE::enableIRQs(unsigned char, bool)>:
c00232da:	57                   	push   edi
c00232db:	56                   	push   esi
c00232dc:	be 04 00 00 00       	mov    esi,0x4
c00232e1:	53                   	push   ebx
c00232e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232f0:	0f 94 c0             	sete   al
c00232f3:	d1 e0                	shl    eax,1
c00232f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232fc:	0f b6 c0             	movzx  eax,al
c00232ff:	50                   	push   eax
c0023300:	6a 0c                	push   0xc
c0023302:	57                   	push   edi
c0023303:	53                   	push   ebx
c0023304:	e8 c5 fd ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023309:	83 c4 10             	add    esp,0x10
c002330c:	50                   	push   eax
c002330d:	6a 0c                	push   0xc
c002330f:	57                   	push   edi
c0023310:	53                   	push   ebx
c0023311:	e8 78 fe ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023316:	83 c4 10             	add    esp,0x10
c0023319:	4e                   	dec    esi
c002331a:	75 f0                	jne    c002330c <IDE::enableIRQs(unsigned char, bool)+0x32>
c002331c:	5b                   	pop    ebx
c002331d:	5e                   	pop    esi
c002331e:	5f                   	pop    edi
c002331f:	c3                   	ret    

c0023320 <IDE::open(int, int, void*)>:
c0023320:	55                   	push   ebp
c0023321:	57                   	push   edi
c0023322:	56                   	push   esi
c0023323:	53                   	push   ebx
c0023324:	83 ec 1c             	sub    esp,0x1c
c0023327:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002332b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023334:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002333d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023344:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002334b:	0f 85 b0 02 00 00    	jne    c0023601 <IDE::open(int, int, void*)+0x2e1>
c0023351:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023357:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002335b:	83 e0 7f             	and    eax,0x7f
c002335e:	3c 05                	cmp    al,0x5
c0023360:	74 04                	je     c0023366 <IDE::open(int, int, void*)+0x46>
c0023362:	3c 0f                	cmp    al,0xf
c0023364:	75 32                	jne    c0023398 <IDE::open(int, int, void*)+0x78>
c0023366:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002336c:	83 e0 fc             	and    eax,0xfffffffc
c002336f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023376:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002337c:	83 e0 fc             	and    eax,0xfffffffc
c002337f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023386:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002338c:	83 e0 fc             	and    eax,0xfffffffc
c002338f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023396:	eb 14                	jmp    c00233ac <IDE::open(int, int, void*)+0x8c>
c0023398:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00233a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00233ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00233b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00233ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00233be:	89 c6                	mov    esi,eax
c00233c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00233c5:	c1 e6 10             	shl    esi,0x10
c00233c8:	89 e8                	mov    eax,ebp
c00233ca:	89 fa                	mov    edx,edi
c00233cc:	c1 e0 0b             	shl    eax,0xb
c00233cf:	09 f0                	or     eax,esi
c00233d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233d8:	c1 e6 08             	shl    esi,0x8
c00233db:	09 c6                	or     esi,eax
c00233dd:	89 f0                	mov    eax,esi
c00233df:	0d 08 00 00 80       	or     eax,0x80000008
c00233e4:	ef                   	out    dx,eax
c00233e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233ea:	89 ca                	mov    edx,ecx
c00233ec:	ed                   	in     eax,dx
c00233ed:	c1 e8 10             	shr    eax,0x10
c00233f0:	3d ff ff 00 00       	cmp    eax,0xffff
c00233f5:	0f 84 f5 00 00 00    	je     c00234f0 <IDE::open(int, int, void*)+0x1d0>
c00233fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023401:	89 fa                	mov    edx,edi
c0023403:	89 f0                	mov    eax,esi
c0023405:	ef                   	out    dx,eax
c0023406:	b0 fe                	mov    al,0xfe
c0023408:	89 ca                	mov    edx,ecx
c002340a:	ee                   	out    dx,al
c002340b:	89 f0                	mov    eax,esi
c002340d:	89 fa                	mov    edx,edi
c002340f:	ef                   	out    dx,eax
c0023410:	89 ca                	mov    edx,ecx
c0023412:	ed                   	in     eax,dx
c0023413:	3c fe                	cmp    al,0xfe
c0023415:	0f 85 a9 00 00 00    	jne    c00234c4 <IDE::open(int, int, void*)+0x1a4>
c002341b:	8b 15 08 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e508
c0023421:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023428:	74 33                	je     c002345d <IDE::open(int, int, void*)+0x13d>
c002342a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023430:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023434:	40                   	inc    eax
c0023435:	83 ec 0c             	sub    esp,0xc
c0023438:	0f b6 c0             	movzx  eax,al
c002343b:	50                   	push   eax
c002343c:	55                   	push   ebp
c002343d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023441:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023447:	51                   	push   ecx
c0023448:	e8 d9 4e ff ff       	call   c0018326 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002344d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023452:	83 c4 1c             	add    esp,0x1c
c0023455:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002345b:	eb 0a                	jmp    c0023467 <IDE::open(int, int, void*)+0x147>
c002345d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023467:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002346e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023475:	c1 e1 10             	shl    ecx,0x10
c0023478:	c1 e0 08             	shl    eax,0x8
c002347b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023480:	09 c1                	or     ecx,eax
c0023482:	89 fa                	mov    edx,edi
c0023484:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002348b:	c1 e0 0b             	shl    eax,0xb
c002348e:	09 c1                	or     ecx,eax
c0023490:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023496:	89 c8                	mov    eax,ecx
c0023498:	ef                   	out    dx,eax
c0023499:	be fc 0c 00 00       	mov    esi,0xcfc
c002349e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00234a4:	89 f2                	mov    edx,esi
c00234a6:	ee                   	out    dx,al
c00234a7:	89 c8                	mov    eax,ecx
c00234a9:	89 fa                	mov    edx,edi
c00234ab:	ef                   	out    dx,eax
c00234ac:	89 f2                	mov    edx,esi
c00234ae:	ed                   	in     eax,dx
c00234af:	0f b6 c0             	movzx  eax,al
c00234b2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00234b8:	74 46                	je     c0023500 <IDE::open(int, int, void*)+0x1e0>
c00234ba:	83 ec 0c             	sub    esp,0xc
c00234bd:	68 a0 cb 02 c0       	push   0xc002cba0
c00234c2:	eb 34                	jmp    c00234f8 <IDE::open(int, int, void*)+0x1d8>
c00234c4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00234cd:	75 17                	jne    c00234e6 <IDE::open(int, int, void*)+0x1c6>
c00234cf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234d4:	74 07                	je     c00234dd <IDE::open(int, int, void*)+0x1bd>
c00234d6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234db:	75 09                	jne    c00234e6 <IDE::open(int, int, void*)+0x1c6>
c00234dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234e4:	eb 1a                	jmp    c0023500 <IDE::open(int, int, void*)+0x1e0>
c00234e6:	83 ec 0c             	sub    esp,0xc
c00234e9:	68 a8 cb 02 c0       	push   0xc002cba8
c00234ee:	eb 08                	jmp    c00234f8 <IDE::open(int, int, void*)+0x1d8>
c00234f0:	83 ec 0c             	sub    esp,0xc
c00234f3:	68 d9 cb 02 c0       	push   0xc002cbd9
c00234f8:	e8 d0 71 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00234fd:	83 c4 10             	add    esp,0x10
c0023500:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023507:	79 1a                	jns    c0023523 <IDE::open(int, int, void*)+0x203>
c0023509:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002350f:	83 e0 fc             	and    eax,0xfffffffc
c0023512:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023519:	83 c0 08             	add    eax,0x8
c002351c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023523:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023529:	89 c2                	mov    edx,eax
c002352b:	83 e2 0f             	and    edx,0xf
c002352e:	66 83 fa 08          	cmp    dx,0x8
c0023532:	75 0a                	jne    c002353e <IDE::open(int, int, void*)+0x21e>
c0023534:	83 e8 02             	sub    eax,0x2
c0023537:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002353e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023544:	89 c2                	mov    edx,eax
c0023546:	83 e2 0f             	and    edx,0xf
c0023549:	66 83 fa 08          	cmp    dx,0x8
c002354d:	75 0a                	jne    c0023559 <IDE::open(int, int, void*)+0x239>
c002354f:	83 e8 02             	sub    eax,0x2
c0023552:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023559:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023560:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023567:	89 d0                	mov    eax,edx
c0023569:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002356c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023570:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023574:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023577:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002357c:	0f b6 c9             	movzx  ecx,cl
c002357f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023586:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023589:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002358d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023591:	8d 50 02             	lea    edx,[eax+0x2]
c0023594:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023599:	0f b6 d2             	movzx  edx,dl
c002359c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00235a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00235ad:	8d 48 03             	lea    ecx,[eax+0x3]
c00235b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235b5:	0f b6 c9             	movzx  ecx,cl
c00235b8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00235be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00235c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00235c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00235c9:	8d 50 04             	lea    edx,[eax+0x4]
c00235cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235d2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235de:	66 85 f6             	test   si,si
c00235e1:	74 3e                	je     c0023621 <IDE::open(int, int, void*)+0x301>
c00235e3:	0f b6 d2             	movzx  edx,dl
c00235e6:	83 c0 05             	add    eax,0x5
c00235e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235f0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235ff:	eb 20                	jmp    c0023621 <IDE::open(int, int, void*)+0x301>
c0023601:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002360b:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023615:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002361c:	e9 02 ff ff ff       	jmp    c0023523 <IDE::open(int, int, void*)+0x203>
c0023621:	52                   	push   edx
c0023622:	52                   	push   edx
c0023623:	6a 00                	push   0x0
c0023625:	53                   	push   ebx
c0023626:	e8 7d fa ff ff       	call   c00230a8 <IDE::prepareInterrupt(unsigned char)>
c002362b:	59                   	pop    ecx
c002362c:	5e                   	pop    esi
c002362d:	6a 01                	push   0x1
c002362f:	53                   	push   ebx
c0023630:	e8 73 fa ff ff       	call   c00230a8 <IDE::prepareInterrupt(unsigned char)>
c0023635:	83 c4 0c             	add    esp,0xc
c0023638:	6a 00                	push   0x0
c002363a:	6a 00                	push   0x0
c002363c:	53                   	push   ebx
c002363d:	e8 98 fc ff ff       	call   c00232da <IDE::enableIRQs(unsigned char, bool)>
c0023642:	83 c4 0c             	add    esp,0xc
c0023645:	6a 00                	push   0x0
c0023647:	6a 01                	push   0x1
c0023649:	53                   	push   ebx
c002364a:	e8 8b fc ff ff       	call   c00232da <IDE::enableIRQs(unsigned char, bool)>
c002364f:	83 c4 10             	add    esp,0x10
c0023652:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023659:	74 40                	je     c002369b <IDE::open(int, int, void*)+0x37b>
c002365b:	83 ec 0c             	sub    esp,0xc
c002365e:	68 03 cc 02 c0       	push   0xc002cc03
c0023663:	e8 b7 f9 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023668:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002366b:	6a 01                	push   0x1
c002366d:	68 a2 32 02 c0       	push   0xc00232a2
c0023672:	6a 0e                	push   0xe
c0023674:	53                   	push   ebx
c0023675:	e8 50 0d ff ff       	call   c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002367a:	83 c4 14             	add    esp,0x14
c002367d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023683:	53                   	push   ebx
c0023684:	6a 01                	push   0x1
c0023686:	68 be 32 02 c0       	push   0xc00232be
c002368b:	6a 0f                	push   0xf
c002368d:	53                   	push   ebx
c002368e:	e8 37 0d ff ff       	call   c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023693:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023699:	eb 4a                	jmp    c00236e5 <IDE::open(int, int, void*)+0x3c5>
c002369b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00236a5:	50                   	push   eax
c00236a6:	6a 0f                	push   0xf
c00236a8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236ae:	68 1f cc 02 c0       	push   0xc002cc1f
c00236b3:	e8 67 f9 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c00236b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00236bb:	6a 00                	push   0x0
c00236bd:	68 a2 32 02 c0       	push   0xc00232a2
c00236c2:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00236c8:	53                   	push   ebx
c00236c9:	e8 fc 0c ff ff       	call   c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236ce:	83 c4 14             	add    esp,0x14
c00236d1:	53                   	push   ebx
c00236d2:	6a 00                	push   0x0
c00236d4:	68 be 32 02 c0       	push   0xc00232be
c00236d9:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236df:	53                   	push   ebx
c00236e0:	e8 e5 0c ff ff       	call   c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236e7:	83 c4 20             	add    esp,0x20
c00236ea:	83 ec 0c             	sub    esp,0xc
c00236ed:	53                   	push   ebx
c00236ee:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236f1:	83 c4 0c             	add    esp,0xc
c00236f4:	6a 07                	push   0x7
c00236f6:	6a 00                	push   0x0
c00236f8:	53                   	push   ebx
c00236f9:	e8 90 fa ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00236fe:	83 c4 0c             	add    esp,0xc
c0023701:	6a 07                	push   0x7
c0023703:	6a 01                	push   0x1
c0023705:	53                   	push   ebx
c0023706:	e8 83 fa ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c002370b:	83 c4 0c             	add    esp,0xc
c002370e:	6a 01                	push   0x1
c0023710:	6a 00                	push   0x0
c0023712:	53                   	push   ebx
c0023713:	e8 c2 fb ff ff       	call   c00232da <IDE::enableIRQs(unsigned char, bool)>
c0023718:	83 c4 0c             	add    esp,0xc
c002371b:	6a 01                	push   0x1
c002371d:	6a 01                	push   0x1
c002371f:	53                   	push   ebx
c0023720:	e8 b5 fb ff ff       	call   c00232da <IDE::enableIRQs(unsigned char, bool)>
c0023725:	83 c4 2c             	add    esp,0x2c
c0023728:	31 c0                	xor    eax,eax
c002372a:	5b                   	pop    ebx
c002372b:	5e                   	pop    esi
c002372c:	5f                   	pop    edi
c002372d:	5d                   	pop    ebp
c002372e:	c3                   	ret    
c002372f:	90                   	nop

c0023730 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023730:	55                   	push   ebp
c0023731:	57                   	push   edi
c0023732:	56                   	push   esi
c0023733:	53                   	push   ebx
c0023734:	83 ec 1c             	sub    esp,0x1c
c0023737:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002373b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002373f:	8d 50 f8             	lea    edx,[eax-0x8]
c0023742:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023746:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002374a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002374e:	80 fa 03             	cmp    dl,0x3
c0023751:	77 5d                	ja     c00237b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023753:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002375b:	0f b6 db             	movzx  ebx,bl
c002375e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023761:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023765:	83 ca 80             	or     edx,0xffffff80
c0023768:	0f b6 d2             	movzx  edx,dl
c002376b:	52                   	push   edx
c002376c:	6a 0c                	push   0xc
c002376e:	53                   	push   ebx
c002376f:	56                   	push   esi
c0023770:	e8 59 f9 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023775:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002377a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002377e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023782:	0f b6 c0             	movzx  eax,al
c0023785:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023789:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002378b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023790:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023794:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023798:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002379c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00237a4:	83 c4 2c             	add    esp,0x2c
c00237a7:	5b                   	pop    ebx
c00237a8:	5e                   	pop    esi
c00237a9:	5f                   	pop    edi
c00237aa:	5d                   	pop    ebp
c00237ab:	e9 1e f9 ff ff       	jmp    c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00237b0:	3c 07                	cmp    al,0x7
c00237b2:	77 10                	ja     c00237c4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00237b4:	0f b6 db             	movzx  ebx,bl
c00237b7:	0f b6 d0             	movzx  edx,al
c00237ba:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00237c2:	eb 2d                	jmp    c00237f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237c4:	3c 0d                	cmp    al,0xd
c00237c6:	77 13                	ja     c00237db <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00237c8:	0f b6 db             	movzx  ebx,bl
c00237cb:	0f b6 c0             	movzx  eax,al
c00237ce:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237d5:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237d9:	eb 16                	jmp    c00237f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237db:	3c 15                	cmp    al,0x15
c00237dd:	77 14                	ja     c00237f3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237df:	0f b6 db             	movzx  ebx,bl
c00237e2:	0f b6 c0             	movzx  eax,al
c00237e5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237ed:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237f1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237f3:	83 c4 1c             	add    esp,0x1c
c00237f6:	5b                   	pop    ebx
c00237f7:	5e                   	pop    esi
c00237f8:	5f                   	pop    edi
c00237f9:	5d                   	pop    ebp
c00237fa:	c3                   	ret    
c00237fb:	90                   	nop

c00237fc <IDE::detect()>:
c00237fc:	55                   	push   ebp
c00237fd:	57                   	push   edi
c00237fe:	56                   	push   esi
c00237ff:	53                   	push   ebx
c0023800:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023806:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002380d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023814:	0f 85 be 02 00 00    	jne    c0023ad8 <IDE::detect()+0x2dc>
c002381a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023821:	31 f6                	xor    esi,esi
c0023823:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002382b:	31 ed                	xor    ebp,ebp
c002382d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023831:	c1 e0 06             	shl    eax,0x6
c0023834:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002383c:	89 e8                	mov    eax,ebp
c002383e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023842:	c1 e0 04             	shl    eax,0x4
c0023845:	83 c8 a0             	or     eax,0xffffffa0
c0023848:	0f b6 c0             	movzx  eax,al
c002384b:	50                   	push   eax
c002384c:	6a 06                	push   0x6
c002384e:	56                   	push   esi
c002384f:	53                   	push   ebx
c0023850:	e8 79 f8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023855:	83 c4 0c             	add    esp,0xc
c0023858:	6a 0c                	push   0xc
c002385a:	56                   	push   esi
c002385b:	53                   	push   ebx
c002385c:	e8 2d f9 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023861:	83 c4 0c             	add    esp,0xc
c0023864:	6a 0c                	push   0xc
c0023866:	56                   	push   esi
c0023867:	53                   	push   ebx
c0023868:	e8 21 f9 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c002386d:	83 c4 0c             	add    esp,0xc
c0023870:	6a 0c                	push   0xc
c0023872:	56                   	push   esi
c0023873:	53                   	push   ebx
c0023874:	e8 15 f9 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023879:	83 c4 0c             	add    esp,0xc
c002387c:	6a 0c                	push   0xc
c002387e:	56                   	push   esi
c002387f:	53                   	push   ebx
c0023880:	e8 09 f9 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023885:	68 ec 00 00 00       	push   0xec
c002388a:	6a 07                	push   0x7
c002388c:	56                   	push   esi
c002388d:	53                   	push   ebx
c002388e:	e8 3b f8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023893:	83 c4 1c             	add    esp,0x1c
c0023896:	6a 0c                	push   0xc
c0023898:	56                   	push   esi
c0023899:	53                   	push   ebx
c002389a:	e8 ef f8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c002389f:	83 c4 0c             	add    esp,0xc
c00238a2:	6a 0c                	push   0xc
c00238a4:	56                   	push   esi
c00238a5:	53                   	push   ebx
c00238a6:	e8 e3 f8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00238ab:	83 c4 0c             	add    esp,0xc
c00238ae:	6a 0c                	push   0xc
c00238b0:	56                   	push   esi
c00238b1:	53                   	push   ebx
c00238b2:	e8 d7 f8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00238b7:	83 c4 0c             	add    esp,0xc
c00238ba:	6a 0c                	push   0xc
c00238bc:	56                   	push   esi
c00238bd:	53                   	push   ebx
c00238be:	e8 cb f8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00238c3:	83 c4 0c             	add    esp,0xc
c00238c6:	6a 0c                	push   0xc
c00238c8:	56                   	push   esi
c00238c9:	53                   	push   ebx
c00238ca:	e8 bf f8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00238cf:	83 c4 10             	add    esp,0x10
c00238d2:	84 c0                	test   al,al
c00238d4:	0f 84 8b 01 00 00    	je     c0023a65 <IDE::detect()+0x269>
c00238da:	31 ff                	xor    edi,edi
c00238dc:	50                   	push   eax
c00238dd:	6a 0c                	push   0xc
c00238df:	56                   	push   esi
c00238e0:	53                   	push   ebx
c00238e1:	e8 a8 f8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c00238e6:	83 c4 10             	add    esp,0x10
c00238e9:	a8 01                	test   al,0x1
c00238eb:	0f 85 8e 01 00 00    	jne    c0023a7f <IDE::detect()+0x283>
c00238f1:	84 c0                	test   al,al
c00238f3:	78 04                	js     c00238f9 <IDE::detect()+0xfd>
c00238f5:	a8 08                	test   al,0x8
c00238f7:	75 27                	jne    c0023920 <IDE::detect()+0x124>
c00238f9:	47                   	inc    edi
c00238fa:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023900:	7e da                	jle    c00238dc <IDE::detect()+0xe0>
c0023902:	50                   	push   eax
c0023903:	50                   	push   eax
c0023904:	6a 00                	push   0x0
c0023906:	68 40 4b 4c 00       	push   0x4c4b40
c002390b:	e8 00 ab ff ff       	call   c001e410 <nanoSleep(unsigned long long)>
c0023910:	83 c4 10             	add    esp,0x10
c0023913:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0023919:	75 c1                	jne    c00238dc <IDE::detect()+0xe0>
c002391b:	e9 5f 01 00 00       	jmp    c0023a7f <IDE::detect()+0x283>
c0023920:	31 c9                	xor    ecx,ecx
c0023922:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023926:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002392a:	83 ec 0c             	sub    esp,0xc
c002392d:	68 80 00 00 00       	push   0x80
c0023932:	57                   	push   edi
c0023933:	6a 00                	push   0x0
c0023935:	56                   	push   esi
c0023936:	53                   	push   ebx
c0023937:	e8 f4 fd ff ff       	call   c0023730 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002393c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023941:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023945:	89 d1                	mov    ecx,edx
c0023947:	c1 e0 06             	shl    eax,0x6
c002394a:	01 d8                	add    eax,ebx
c002394c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023953:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002395a:	89 f2                	mov    edx,esi
c002395c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023962:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023966:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002396c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023970:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023977:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002397f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023986:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002398e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023994:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002399b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00239a1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00239a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00239a9:	83 c4 20             	add    esp,0x20
c00239ac:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00239af:	83 c0 02             	add    eax,0x2
c00239b2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00239b8:	83 c7 02             	add    edi,0x2
c00239bb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00239be:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00239c4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00239c8:	75 e2                	jne    c00239ac <IDE::detect()+0x1b0>
c00239ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239ce:	c1 e0 06             	shl    eax,0x6
c00239d1:	01 d8                	add    eax,ebx
c00239d3:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239d9:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239e0:	66 c1 ea 09          	shr    dx,0x9
c00239e4:	83 e2 01             	and    edx,0x1
c00239e7:	84 c9                	test   cl,cl
c00239e9:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239ef:	75 2f                	jne    c0023a20 <IDE::detect()+0x224>
c00239f1:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239f7:	85 c0                	test   eax,eax
c00239f9:	74 66                	je     c0023a61 <IDE::detect()+0x265>
c00239fb:	50                   	push   eax
c00239fc:	55                   	push   ebp
c00239fd:	56                   	push   esi
c00239fe:	68 3b cc 02 c0       	push   0xc002cc3b
c0023a03:	e8 17 f6 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023a08:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023a0f:	e8 2f be fe ff       	call   c000f843 <malloc>
c0023a14:	89 c7                	mov    edi,eax
c0023a16:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a19:	e8 78 06 00 00       	call   c0024096 <ATA::ATA()>
c0023a1e:	eb 28                	jmp    c0023a48 <IDE::detect()+0x24c>
c0023a20:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023a26:	55                   	push   ebp
c0023a27:	56                   	push   esi
c0023a28:	68 6a cc 02 c0       	push   0xc002cc6a
c0023a2d:	e8 ed f5 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023a32:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a39:	e8 05 be fe ff       	call   c000f843 <malloc>
c0023a3e:	89 c7                	mov    edi,eax
c0023a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a43:	e8 8e 0c 00 00       	call   c00246d6 <ATAPI::ATAPI()>
c0023a48:	5a                   	pop    edx
c0023a49:	59                   	pop    ecx
c0023a4a:	57                   	push   edi
c0023a4b:	53                   	push   ebx
c0023a4c:	e8 f5 09 ff ff       	call   c0014446 <Device::addChild(Device*)>
c0023a51:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a53:	53                   	push   ebx
c0023a54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a58:	6a 00                	push   0x0
c0023a5a:	57                   	push   edi
c0023a5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a5e:	83 c4 20             	add    esp,0x20
c0023a61:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a65:	4d                   	dec    ebp
c0023a66:	74 0a                	je     c0023a72 <IDE::detect()+0x276>
c0023a68:	bd 01 00 00 00       	mov    ebp,0x1
c0023a6d:	e9 bb fd ff ff       	jmp    c002382d <IDE::detect()+0x31>
c0023a72:	4e                   	dec    esi
c0023a73:	74 63                	je     c0023ad8 <IDE::detect()+0x2dc>
c0023a75:	be 01 00 00 00       	mov    esi,0x1
c0023a7a:	e9 ac fd ff ff       	jmp    c002382b <IDE::detect()+0x2f>
c0023a7f:	50                   	push   eax
c0023a80:	6a 04                	push   0x4
c0023a82:	56                   	push   esi
c0023a83:	53                   	push   ebx
c0023a84:	e8 05 f7 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023a89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a8d:	83 c4 0c             	add    esp,0xc
c0023a90:	6a 05                	push   0x5
c0023a92:	56                   	push   esi
c0023a93:	53                   	push   ebx
c0023a94:	e8 f5 f6 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023a99:	83 c4 10             	add    esp,0x10
c0023a9c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023aa0:	80 fa 14             	cmp    dl,0x14
c0023aa3:	75 04                	jne    c0023aa9 <IDE::detect()+0x2ad>
c0023aa5:	3c eb                	cmp    al,0xeb
c0023aa7:	eb 07                	jmp    c0023ab0 <IDE::detect()+0x2b4>
c0023aa9:	3c 96                	cmp    al,0x96
c0023aab:	75 b8                	jne    c0023a65 <IDE::detect()+0x269>
c0023aad:	80 fa 69             	cmp    dl,0x69
c0023ab0:	75 b3                	jne    c0023a65 <IDE::detect()+0x269>
c0023ab2:	68 a1 00 00 00       	push   0xa1
c0023ab7:	6a 07                	push   0x7
c0023ab9:	56                   	push   esi
c0023aba:	53                   	push   ebx
c0023abb:	e8 0e f6 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ac0:	5f                   	pop    edi
c0023ac1:	58                   	pop    eax
c0023ac2:	6a 00                	push   0x0
c0023ac4:	68 40 42 0f 00       	push   0xf4240
c0023ac9:	e8 42 a9 ff ff       	call   c001e410 <nanoSleep(unsigned long long)>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	b1 01                	mov    cl,0x1
c0023ad3:	e9 4a fe ff ff       	jmp    c0023922 <IDE::detect()+0x126>
c0023ad8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ade:	5b                   	pop    ebx
c0023adf:	5e                   	pop    esi
c0023ae0:	5f                   	pop    edi
c0023ae1:	5d                   	pop    ebp
c0023ae2:	c3                   	ret    
c0023ae3:	90                   	nop

c0023ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ae4:	55                   	push   ebp
c0023ae5:	57                   	push   edi
c0023ae6:	56                   	push   esi
c0023ae7:	53                   	push   ebx
c0023ae8:	83 ec 1c             	sub    esp,0x1c
c0023aeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023aef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023af3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023af7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023afb:	88 c3                	mov    bl,al
c0023afd:	84 c0                	test   al,al
c0023aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023b03:	0f 84 67 01 00 00    	je     c0023c70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023b09:	83 ec 0c             	sub    esp,0xc
c0023b0c:	68 9b cc 02 c0       	push   0xc002cc9b
c0023b11:	e8 09 f5 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023b16:	83 c4 10             	add    esp,0x10
c0023b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023b1d:	3c 01                	cmp    al,0x1
c0023b1f:	75 17                	jne    c0023b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023b21:	83 ec 0c             	sub    esp,0xc
c0023b24:	b3 13                	mov    bl,0x13
c0023b26:	68 a7 cc 02 c0       	push   0xc002cca7
c0023b2b:	e8 ef f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023b30:	83 c4 10             	add    esp,0x10
c0023b33:	e9 25 01 00 00       	jmp    c0023c5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b38:	3c 02                	cmp    al,0x2
c0023b3a:	0f 85 ef 00 00 00    	jne    c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b40:	d1 e6                	shl    esi,1
c0023b42:	09 ee                	or     esi,ebp
c0023b44:	52                   	push   edx
c0023b45:	89 f0                	mov    eax,esi
c0023b47:	6a 01                	push   0x1
c0023b49:	0f b6 f0             	movzx  esi,al
c0023b4c:	c1 e6 06             	shl    esi,0x6
c0023b4f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b57:	50                   	push   eax
c0023b58:	57                   	push   edi
c0023b59:	e8 30 f6 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023b5e:	83 c4 10             	add    esp,0x10
c0023b61:	89 c6                	mov    esi,eax
c0023b63:	a8 01                	test   al,0x1
c0023b65:	74 12                	je     c0023b79 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b67:	83 ec 0c             	sub    esp,0xc
c0023b6a:	b3 07                	mov    bl,0x7
c0023b6c:	68 bc cc 02 c0       	push   0xc002ccbc
c0023b71:	e8 a9 f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023b76:	83 c4 10             	add    esp,0x10
c0023b79:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b7f:	74 12                	je     c0023b93 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b81:	83 ec 0c             	sub    esp,0xc
c0023b84:	b3 03                	mov    bl,0x3
c0023b86:	68 da cc 02 c0       	push   0xc002ccda
c0023b8b:	e8 8f f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023b90:	83 c4 10             	add    esp,0x10
c0023b93:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b99:	74 12                	je     c0023bad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b9b:	83 ec 0c             	sub    esp,0xc
c0023b9e:	b3 14                	mov    bl,0x14
c0023ba0:	68 fa cc 02 c0       	push   0xc002ccfa
c0023ba5:	e8 75 f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023baa:	83 c4 10             	add    esp,0x10
c0023bad:	f7 c6 08 00 00 00    	test   esi,0x8
c0023bb3:	74 12                	je     c0023bc7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023bb5:	83 ec 0c             	sub    esp,0xc
c0023bb8:	b3 03                	mov    bl,0x3
c0023bba:	68 da cc 02 c0       	push   0xc002ccda
c0023bbf:	e8 5b f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023bc4:	83 c4 10             	add    esp,0x10
c0023bc7:	f7 c6 10 00 00 00    	test   esi,0x10
c0023bcd:	74 12                	je     c0023be1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023bcf:	83 ec 0c             	sub    esp,0xc
c0023bd2:	b3 15                	mov    bl,0x15
c0023bd4:	68 12 cd 02 c0       	push   0xc002cd12
c0023bd9:	e8 41 f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023bde:	83 c4 10             	add    esp,0x10
c0023be1:	f7 c6 20 00 00 00    	test   esi,0x20
c0023be7:	74 12                	je     c0023bfb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023be9:	83 ec 0c             	sub    esp,0xc
c0023bec:	b3 03                	mov    bl,0x3
c0023bee:	68 da cc 02 c0       	push   0xc002ccda
c0023bf3:	e8 27 f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023bf8:	83 c4 10             	add    esp,0x10
c0023bfb:	f7 c6 40 00 00 00    	test   esi,0x40
c0023c01:	74 12                	je     c0023c15 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023c03:	83 ec 0c             	sub    esp,0xc
c0023c06:	b3 16                	mov    bl,0x16
c0023c08:	68 2c cd 02 c0       	push   0xc002cd2c
c0023c0d:	e8 0d f4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023c12:	83 c4 10             	add    esp,0x10
c0023c15:	89 f0                	mov    eax,esi
c0023c17:	84 c0                	test   al,al
c0023c19:	79 42                	jns    c0023c5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1b:	83 ec 0c             	sub    esp,0xc
c0023c1e:	b3 0d                	mov    bl,0xd
c0023c20:	68 4d cd 02 c0       	push   0xc002cd4d
c0023c25:	e8 f5 f3 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023c2a:	83 c4 10             	add    esp,0x10
c0023c2d:	eb 2e                	jmp    c0023c5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c2f:	3c 03                	cmp    al,0x3
c0023c31:	75 14                	jne    c0023c47 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c33:	83 ec 0c             	sub    esp,0xc
c0023c36:	b3 17                	mov    bl,0x17
c0023c38:	68 61 cd 02 c0       	push   0xc002cd61
c0023c3d:	e8 dd f3 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023c42:	83 c4 10             	add    esp,0x10
c0023c45:	eb 16                	jmp    c0023c5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c47:	3c 04                	cmp    al,0x4
c0023c49:	75 12                	jne    c0023c5d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c4b:	83 ec 0c             	sub    esp,0xc
c0023c4e:	b3 08                	mov    bl,0x8
c0023c50:	68 77 cd 02 c0       	push   0xc002cd77
c0023c55:	e8 c5 f3 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023c5a:	83 c4 10             	add    esp,0x10
c0023c5d:	50                   	push   eax
c0023c5e:	50                   	push   eax
c0023c5f:	0f b6 c3             	movzx  eax,bl
c0023c62:	50                   	push   eax
c0023c63:	68 8f cd 02 c0       	push   0xc002cd8f
c0023c68:	e8 b2 f3 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023c6d:	83 c4 10             	add    esp,0x10
c0023c70:	83 c4 1c             	add    esp,0x1c
c0023c73:	88 d8                	mov    al,bl
c0023c75:	5b                   	pop    ebx
c0023c76:	5e                   	pop    esi
c0023c77:	5f                   	pop    edi
c0023c78:	5d                   	pop    ebp
c0023c79:	c3                   	ret    

c0023c7a <IDE::polling(unsigned char, unsigned int)>:
c0023c7a:	57                   	push   edi
c0023c7b:	56                   	push   esi
c0023c7c:	53                   	push   ebx
c0023c7d:	bb 04 00 00 00       	mov    ebx,0x4
c0023c82:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c86:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c8b:	52                   	push   edx
c0023c8c:	6a 0c                	push   0xc
c0023c8e:	56                   	push   esi
c0023c8f:	57                   	push   edi
c0023c90:	e8 f9 f4 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023c95:	83 c4 10             	add    esp,0x10
c0023c98:	4b                   	dec    ebx
c0023c99:	75 f0                	jne    c0023c8b <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c9b:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023ca0:	50                   	push   eax
c0023ca1:	6a 0c                	push   0xc
c0023ca3:	56                   	push   esi
c0023ca4:	57                   	push   edi
c0023ca5:	e8 e4 f4 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0023caa:	83 c4 10             	add    esp,0x10
c0023cad:	a8 01                	test   al,0x1
c0023caf:	74 12                	je     c0023cc3 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023cb1:	83 ec 0c             	sub    esp,0xc
c0023cb4:	68 a9 cd 02 c0       	push   0xc002cda9
c0023cb9:	e8 61 f3 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023cbe:	83 c4 10             	add    esp,0x10
c0023cc1:	eb 17                	jmp    c0023cda <IDE::polling(unsigned char, unsigned int)+0x60>
c0023cc3:	a8 20                	test   al,0x20
c0023cc5:	75 0f                	jne    c0023cd6 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023cc7:	4b                   	dec    ebx
c0023cc8:	74 10                	je     c0023cda <IDE::polling(unsigned char, unsigned int)+0x60>
c0023cca:	84 c0                	test   al,al
c0023ccc:	78 d2                	js     c0023ca0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cce:	a8 08                	test   al,0x8
c0023cd0:	74 ce                	je     c0023ca0 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023cd2:	31 c0                	xor    eax,eax
c0023cd4:	eb 06                	jmp    c0023cdc <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cd6:	b0 01                	mov    al,0x1
c0023cd8:	eb 02                	jmp    c0023cdc <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cda:	b0 02                	mov    al,0x2
c0023cdc:	5b                   	pop    ebx
c0023cdd:	5e                   	pop    esi
c0023cde:	5f                   	pop    edi
c0023cdf:	c3                   	ret    

c0023ce0 <SATABus::close(int, int, void*)>:
c0023ce0:	31 c0                	xor    eax,eax
c0023ce2:	c3                   	ret    
c0023ce3:	90                   	nop

c0023ce4 <SATABus::detect()>:
c0023ce4:	c3                   	ret    
c0023ce5:	90                   	nop

c0023ce6 <SATABus::SATABus()>:
c0023ce6:	83 ec 0c             	sub    esp,0xc
c0023ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ced:	83 ec 08             	sub    esp,0x8
c0023cf0:	68 ec cd 02 c0       	push   0xc002cdec
c0023cf5:	50                   	push   eax
c0023cf6:	e8 d7 0a ff ff       	call   c00147d2 <HardDiskController::HardDiskController(char const*)>
c0023cfb:	83 c4 10             	add    esp,0x10
c0023cfe:	ba a8 ce 02 c0       	mov    edx,0xc002cea8
c0023d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d07:	89 10                	mov    DWORD PTR [eax],edx
c0023d09:	83 ec 0c             	sub    esp,0xc
c0023d0c:	6a 50                	push   0x50
c0023d0e:	e8 18 c3 fe ff       	call   c001002b <Phys::allocateContiguousPages(int)>
c0023d13:	83 c4 10             	add    esp,0x10
c0023d16:	89 c2                	mov    edx,eax
c0023d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d1c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023d22:	83 ec 0c             	sub    esp,0xc
c0023d25:	6a 50                	push   0x50
c0023d27:	e8 79 de fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0023d2c:	83 c4 10             	add    esp,0x10
c0023d2f:	89 c2                	mov    edx,eax
c0023d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d3b:	e8 00 e1 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0023d40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d44:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d54:	83 ec 0c             	sub    esp,0xc
c0023d57:	6a 03                	push   0x3
c0023d59:	6a 50                	push   0x50
c0023d5b:	51                   	push   ecx
c0023d5c:	52                   	push   edx
c0023d5d:	50                   	push   eax
c0023d5e:	e8 0d e9 fe ff       	call   c0012670 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d63:	83 c4 20             	add    esp,0x20
c0023d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d6a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d74:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d7a:	83 ec 04             	sub    esp,0x4
c0023d7d:	52                   	push   edx
c0023d7e:	50                   	push   eax
c0023d7f:	68 10 ce 02 c0       	push   0xc002ce10
c0023d84:	e8 96 f2 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023d89:	83 c4 10             	add    esp,0x10
c0023d8c:	90                   	nop
c0023d8d:	83 c4 0c             	add    esp,0xc
c0023d90:	c3                   	ret    
c0023d91:	90                   	nop

c0023d92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d92:	83 ec 0c             	sub    esp,0xc
c0023d95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d99:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d9f:	09 c2                	or     edx,eax
c0023da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023da5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023dab:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023dad:	31 c0                	xor    eax,eax
c0023daf:	c1 e9 08             	shr    ecx,0x8
c0023db2:	83 e1 0f             	and    ecx,0xf
c0023db5:	39 c8                	cmp    eax,ecx
c0023db7:	74 0a                	je     c0023dc3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023db9:	f6 c2 01             	test   dl,0x1
c0023dbc:	74 18                	je     c0023dd6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dbe:	d1 ea                	shr    edx,1
c0023dc0:	40                   	inc    eax
c0023dc1:	eb f2                	jmp    c0023db5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023dc3:	83 ec 0c             	sub    esp,0xc
c0023dc6:	68 34 ce 02 c0       	push   0xc002ce34
c0023dcb:	e8 fd 68 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0023dd0:	83 c4 10             	add    esp,0x10
c0023dd3:	83 c8 ff             	or     eax,0xffffffff
c0023dd6:	83 c4 0c             	add    esp,0xc
c0023dd9:	c3                   	ret    

c0023dda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023dda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023dde:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023de1:	89 c2                	mov    edx,eax
c0023de3:	c1 ea 08             	shr    edx,0x8
c0023de6:	83 e2 0f             	and    edx,0xf
c0023de9:	fe ca                	dec    dl
c0023deb:	75 31                	jne    c0023e1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ded:	83 e0 0f             	and    eax,0xf
c0023df0:	3c 03                	cmp    al,0x3
c0023df2:	75 2a                	jne    c0023e1e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023df4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023df7:	b8 02 00 00 00       	mov    eax,0x2
c0023dfc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023e02:	74 1c                	je     c0023e20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e04:	b8 04 00 00 00       	mov    eax,0x4
c0023e09:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023e0f:	74 0f                	je     c0023e20 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023e11:	31 c0                	xor    eax,eax
c0023e13:	83 fa 03             	cmp    edx,0x3
c0023e16:	0f 94 c0             	sete   al
c0023e19:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023e1d:	c3                   	ret    
c0023e1e:	31 c0                	xor    eax,eax
c0023e20:	c3                   	ret    
c0023e21:	90                   	nop

c0023e22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e29:	0f ba e2 0f          	bt     edx,0xf
c0023e2d:	72 f7                	jb     c0023e26 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e2f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e32:	83 ca 10             	or     edx,0x10
c0023e35:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e38:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e3b:	83 ca 01             	or     edx,0x1
c0023e3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e41:	c3                   	ret    

c0023e42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e46:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e49:	83 e2 fe             	and    edx,0xfffffffe
c0023e4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e4f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e52:	83 e2 ef             	and    edx,0xffffffef
c0023e55:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e5b:	0f ba e2 0e          	bt     edx,0xe
c0023e5f:	72 f7                	jb     c0023e58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e61:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e64:	0f ba e2 0f          	bt     edx,0xf
c0023e68:	72 ee                	jb     c0023e58 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e6a:	c3                   	ret    
c0023e6b:	90                   	nop

c0023e6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e6c:	55                   	push   ebp
c0023e6d:	57                   	push   edi
c0023e6e:	56                   	push   esi
c0023e6f:	53                   	push   ebx
c0023e70:	83 ec 1c             	sub    esp,0x1c
c0023e73:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e77:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e7f:	53                   	push   ebx
c0023e80:	89 fd                	mov    ebp,edi
c0023e82:	56                   	push   esi
c0023e83:	c1 e5 0a             	shl    ebp,0xa
c0023e86:	e8 b7 ff ff ff       	call   c0023e42 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e8b:	83 ec 0c             	sub    esp,0xc
c0023e8e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e94:	01 e8                	add    eax,ebp
c0023e96:	89 03                	mov    DWORD PTR [ebx],eax
c0023e98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e9a:	68 00 04 00 00       	push   0x400
c0023e9f:	6a 00                	push   0x0
c0023ea1:	50                   	push   eax
c0023ea2:	e8 d1 c8 fd ff       	call   c0000778 <memset>
c0023ea7:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ead:	89 fa                	mov    edx,edi
c0023eaf:	01 e8                	add    eax,ebp
c0023eb1:	c1 e7 0d             	shl    edi,0xd
c0023eb4:	89 03                	mov    DWORD PTR [ebx],eax
c0023eb6:	c1 e2 08             	shl    edx,0x8
c0023eb9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023ec0:	81 c2 00 80 00 00    	add    edx,0x8000
c0023ec6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023eca:	89 d0                	mov    eax,edx
c0023ecc:	83 c4 1c             	add    esp,0x1c
c0023ecf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ed5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023ed8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023edb:	68 00 01 00 00       	push   0x100
c0023ee0:	6a 00                	push   0x0
c0023ee2:	50                   	push   eax
c0023ee3:	e8 90 c8 fd ff       	call   c0000778 <memset>
c0023ee8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023eec:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ef2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023ef8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023efc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023eff:	83 c4 10             	add    esp,0x10
c0023f02:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023f09:	31 ff                	xor    edi,edi
c0023f0b:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023f11:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023f17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f1b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023f21:	83 c5 20             	add    ebp,0x20
c0023f24:	01 f8                	add    eax,edi
c0023f26:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f29:	52                   	push   edx
c0023f2a:	68 00 01 00 00       	push   0x100
c0023f2f:	6a 00                	push   0x0
c0023f31:	50                   	push   eax
c0023f32:	e8 41 c8 fd ff       	call   c0000778 <memset>
c0023f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f3b:	83 c4 10             	add    esp,0x10
c0023f3e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f44:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f4b:	01 f8                	add    eax,edi
c0023f4d:	81 c7 00 01 00 00    	add    edi,0x100
c0023f53:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f56:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f5c:	75 b3                	jne    c0023f11 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f5e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f62:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f66:	83 c4 1c             	add    esp,0x1c
c0023f69:	5b                   	pop    ebx
c0023f6a:	5e                   	pop    esi
c0023f6b:	5f                   	pop    edi
c0023f6c:	5d                   	pop    ebp
c0023f6d:	e9 b0 fe ff ff       	jmp    c0023e22 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f72 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f72:	55                   	push   ebp
c0023f73:	57                   	push   edi
c0023f74:	56                   	push   esi
c0023f75:	53                   	push   ebx
c0023f76:	31 db                	xor    ebx,ebx
c0023f78:	83 ec 0c             	sub    esp,0xc
c0023f7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f7f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f83:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f86:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f8c:	0f 84 aa 00 00 00    	je     c002403c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f92:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f96:	89 d8                	mov    eax,ebx
c0023f98:	c1 e0 07             	shl    eax,0x7
c0023f9b:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023fa2:	55                   	push   ebp
c0023fa3:	56                   	push   esi
c0023fa4:	e8 31 fe ff ff       	call   c0023dda <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023fa9:	5a                   	pop    edx
c0023faa:	83 f8 01             	cmp    eax,0x1
c0023fad:	59                   	pop    ecx
c0023fae:	75 30                	jne    c0023fe0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023fb0:	50                   	push   eax
c0023fb1:	50                   	push   eax
c0023fb2:	53                   	push   ebx
c0023fb3:	68 59 ce 02 c0       	push   0xc002ce59
c0023fb8:	e8 62 f0 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023fbd:	83 c4 0c             	add    esp,0xc
c0023fc0:	53                   	push   ebx
c0023fc1:	55                   	push   ebp
c0023fc2:	56                   	push   esi
c0023fc3:	e8 a4 fe ff ff       	call   c0023e6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fc8:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fcf:	e8 6f b8 fe ff       	call   c000f843 <malloc>
c0023fd4:	89 c5                	mov    ebp,eax
c0023fd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fd9:	e8 60 0d 00 00       	call   c0024d3e <SATA::SATA()>
c0023fde:	eb 33                	jmp    c0024013 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fe0:	83 f8 04             	cmp    eax,0x4
c0023fe3:	75 47                	jne    c002402c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fe5:	50                   	push   eax
c0023fe6:	50                   	push   eax
c0023fe7:	53                   	push   ebx
c0023fe8:	68 70 ce 02 c0       	push   0xc002ce70
c0023fed:	e8 2d f0 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0023ff2:	83 c4 0c             	add    esp,0xc
c0023ff5:	53                   	push   ebx
c0023ff6:	55                   	push   ebp
c0023ff7:	56                   	push   esi
c0023ff8:	e8 6f fe ff ff       	call   c0023e6c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023ffd:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024004:	e8 3a b8 fe ff       	call   c000f843 <malloc>
c0024009:	89 c5                	mov    ebp,eax
c002400b:	89 04 24             	mov    DWORD PTR [esp],eax
c002400e:	e8 d7 10 00 00       	call   c00250ea <SATAPI::SATAPI()>
c0024013:	5a                   	pop    edx
c0024014:	59                   	pop    ecx
c0024015:	55                   	push   ebp
c0024016:	56                   	push   esi
c0024017:	e8 2a 04 ff ff       	call   c0014446 <Device::addChild(Device*)>
c002401c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002401f:	56                   	push   esi
c0024020:	6a 00                	push   0x0
c0024022:	53                   	push   ebx
c0024023:	55                   	push   ebp
c0024024:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024027:	83 c4 20             	add    esp,0x20
c002402a:	eb 10                	jmp    c002403c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002402c:	50                   	push   eax
c002402d:	50                   	push   eax
c002402e:	53                   	push   ebx
c002402f:	68 89 ce 02 c0       	push   0xc002ce89
c0024034:	e8 e6 ef fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0024039:	83 c4 10             	add    esp,0x10
c002403c:	d1 ef                	shr    edi,1
c002403e:	43                   	inc    ebx
c002403f:	83 fb 20             	cmp    ebx,0x20
c0024042:	0f 85 3e ff ff ff    	jne    c0023f86 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024048:	83 c4 0c             	add    esp,0xc
c002404b:	5b                   	pop    ebx
c002404c:	5e                   	pop    esi
c002404d:	5f                   	pop    edi
c002404e:	5d                   	pop    ebp
c002404f:	c3                   	ret    

c0024050 <SATABus::open(int, int, void*)>:
c0024050:	83 ec 14             	sub    esp,0x14
c0024053:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024057:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002405d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024063:	52                   	push   edx
c0024064:	50                   	push   eax
c0024065:	e8 08 ff ff ff       	call   c0023f72 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002406a:	31 c0                	xor    eax,eax
c002406c:	83 c4 1c             	add    esp,0x1c
c002406f:	c3                   	ret    

c0024070 <ATA::close(int, int, void*)>:
c0024070:	83 ec 0c             	sub    esp,0xc
c0024073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024077:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002407d:	85 c0                	test   eax,eax
c002407f:	74 0c                	je     c002408d <ATA::close(int, int, void*)+0x1d>
c0024081:	83 ec 0c             	sub    esp,0xc
c0024084:	8b 10                	mov    edx,DWORD PTR [eax]
c0024086:	50                   	push   eax
c0024087:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002408a:	83 c4 10             	add    esp,0x10
c002408d:	31 c0                	xor    eax,eax
c002408f:	83 c4 0c             	add    esp,0xc
c0024092:	c3                   	ret    
c0024093:	90                   	nop

c0024094 <ATA::powerSaving(PowerSavingLevel)>:
c0024094:	c3                   	ret    
c0024095:	90                   	nop

c0024096 <ATA::ATA()>:
c0024096:	83 ec 0c             	sub    esp,0xc
c0024099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002409d:	83 ec 04             	sub    esp,0x4
c00240a0:	68 00 02 00 00       	push   0x200
c00240a5:	68 71 cf 02 c0       	push   0xc002cf71
c00240aa:	50                   	push   eax
c00240ab:	e8 ba 07 ff ff       	call   c001486a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00240b0:	83 c4 10             	add    esp,0x10
c00240b3:	ba f4 ce 02 c0       	mov    edx,0xc002cef4
c00240b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240bc:	89 10                	mov    DWORD PTR [eax],edx
c00240be:	90                   	nop
c00240bf:	83 c4 0c             	add    esp,0xc
c00240c2:	c3                   	ret    
c00240c3:	90                   	nop

c00240c4 <ATA::flush(bool)>:
c00240c4:	53                   	push   ebx
c00240c5:	83 ec 08             	sub    esp,0x8
c00240c8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00240cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240d1:	19 c0                	sbb    eax,eax
c00240d3:	83 e0 fd             	and    eax,0xfffffffd
c00240d6:	05 ea 00 00 00       	add    eax,0xea
c00240db:	50                   	push   eax
c00240dc:	6a 07                	push   0x7
c00240de:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240e5:	50                   	push   eax
c00240e6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240ec:	e8 dd ef ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240f1:	83 c4 0c             	add    esp,0xc
c00240f4:	6a 00                	push   0x0
c00240f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240fd:	50                   	push   eax
c00240fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024104:	e8 71 fb ff ff       	call   c0023c7a <IDE::polling(unsigned char, unsigned int)>
c0024109:	83 c4 18             	add    esp,0x18
c002410c:	5b                   	pop    ebx
c002410d:	c3                   	ret    

c002410e <ATA::readyForCommand()>:
c002410e:	56                   	push   esi
c002410f:	53                   	push   ebx
c0024110:	31 db                	xor    ebx,ebx
c0024112:	50                   	push   eax
c0024113:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024117:	50                   	push   eax
c0024118:	6a 0c                	push   0xc
c002411a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024121:	50                   	push   eax
c0024122:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024128:	e8 61 f0 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c002412d:	83 c4 10             	add    esp,0x10
c0024130:	a8 88                	test   al,0x88
c0024132:	74 23                	je     c0024157 <ATA::readyForCommand()+0x49>
c0024134:	43                   	inc    ebx
c0024135:	83 fb 63             	cmp    ebx,0x63
c0024138:	7e dd                	jle    c0024117 <ATA::readyForCommand()+0x9>
c002413a:	51                   	push   ecx
c002413b:	51                   	push   ecx
c002413c:	6a 00                	push   0x0
c002413e:	68 40 42 0f 00       	push   0xf4240
c0024143:	e8 c8 a2 ff ff       	call   c001e410 <nanoSleep(unsigned long long)>
c0024148:	83 c4 10             	add    esp,0x10
c002414b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024151:	75 c4                	jne    c0024117 <ATA::readyForCommand()+0x9>
c0024153:	31 c0                	xor    eax,eax
c0024155:	eb 02                	jmp    c0024159 <ATA::readyForCommand()+0x4b>
c0024157:	b0 01                	mov    al,0x1
c0024159:	5a                   	pop    edx
c002415a:	5b                   	pop    ebx
c002415b:	5e                   	pop    esi
c002415c:	c3                   	ret    
c002415d:	90                   	nop

c002415e <ATA::access(unsigned long long, int, void*, bool)>:
c002415e:	55                   	push   ebp
c002415f:	57                   	push   edi
c0024160:	56                   	push   esi
c0024161:	53                   	push   ebx
c0024162:	83 ec 2c             	sub    esp,0x2c
c0024165:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024169:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002416d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024175:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024179:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002417d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024181:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024187:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002418b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024191:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024195:	c1 e0 06             	shl    eax,0x6
c0024198:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00241a0:	74 5d                	je     c00241ff <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00241a2:	89 fa                	mov    edx,edi
c00241a4:	89 f0                	mov    eax,esi
c00241a6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00241aa:	c1 ea 1c             	shr    edx,0x1c
c00241ad:	89 d1                	mov    ecx,edx
c00241af:	09 c1                	or     ecx,eax
c00241b1:	74 25                	je     c00241d8 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00241b3:	31 ed                	xor    ebp,ebp
c00241b5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00241bc:	89 fa                	mov    edx,edi
c00241be:	89 f0                	mov    eax,esi
c00241c0:	0f ad d0             	shrd   eax,edx,cl
c00241c3:	d3 ea                	shr    edx,cl
c00241c5:	f6 c1 20             	test   cl,0x20
c00241c8:	74 02                	je     c00241cc <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00241ca:	89 d0                	mov    eax,edx
c00241cc:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241d0:	45                   	inc    ebp
c00241d1:	83 fd 06             	cmp    ebp,0x6
c00241d4:	75 df                	jne    c00241b5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241d6:	eb 76                	jmp    c002424e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241d8:	89 f0                	mov    eax,esi
c00241da:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241df:	89 fa                	mov    edx,edi
c00241e1:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241e8:	0f ac d0 10          	shrd   eax,edx,0x10
c00241ec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241f1:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241f5:	c1 ee 18             	shr    esi,0x18
c00241f8:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241fd:	eb 56                	jmp    c0024255 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241ff:	6a 00                	push   0x0
c0024201:	6a 3f                	push   0x3f
c0024203:	57                   	push   edi
c0024204:	56                   	push   esi
c0024205:	e8 92 29 00 00       	call   c0026b9c <__umoddi3>
c002420a:	83 c4 10             	add    esp,0x10
c002420d:	40                   	inc    eax
c002420e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024212:	6a 00                	push   0x0
c0024214:	68 f0 03 00 00       	push   0x3f0
c0024219:	57                   	push   edi
c002421a:	56                   	push   esi
c002421b:	e8 7c 28 00 00       	call   c0026a9c <__udivdi3>
c0024220:	83 c4 10             	add    esp,0x10
c0024223:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024228:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002422f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024234:	6a 00                	push   0x0
c0024236:	6a 3f                	push   0x3f
c0024238:	57                   	push   edi
c0024239:	56                   	push   esi
c002423a:	e8 5d 28 00 00       	call   c0026a9c <__udivdi3>
c002423f:	83 c4 10             	add    esp,0x10
c0024242:	89 c6                	mov    esi,eax
c0024244:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024249:	83 e6 0f             	and    esi,0xf
c002424c:	eb 07                	jmp    c0024255 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002424e:	31 f6                	xor    esi,esi
c0024250:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024255:	bf 01 00 00 00       	mov    edi,0x1
c002425a:	50                   	push   eax
c002425b:	6a 00                	push   0x0
c002425d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024264:	50                   	push   eax
c0024265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024269:	e8 6c f0 ff ff       	call   c00232da <IDE::enableIRQs(unsigned char, bool)>
c002426e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024271:	e8 98 fe ff ff       	call   c002410e <ATA::readyForCommand()>
c0024276:	83 c4 10             	add    esp,0x10
c0024279:	84 c0                	test   al,al
c002427b:	0f 84 5a 02 00 00    	je     c00244db <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024281:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024287:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002428d:	c1 e0 04             	shl    eax,0x4
c0024290:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024297:	09 c6                	or     esi,eax
c0024299:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002429e:	75 05                	jne    c00242a5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00242a0:	83 ce a0             	or     esi,0xffffffa0
c00242a3:	eb 03                	jmp    c00242a8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00242a5:	83 ce e0             	or     esi,0xffffffe0
c00242a8:	89 f0                	mov    eax,esi
c00242aa:	0f b6 f0             	movzx  esi,al
c00242ad:	56                   	push   esi
c00242ae:	6a 06                	push   0x6
c00242b0:	51                   	push   ecx
c00242b1:	52                   	push   edx
c00242b2:	e8 17 ee ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242b7:	83 c4 10             	add    esp,0x10
c00242ba:	6a 00                	push   0x0
c00242bc:	6a 01                	push   0x1
c00242be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242c5:	50                   	push   eax
c00242c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242cc:	e8 fd ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d1:	83 c4 10             	add    esp,0x10
c00242d4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242d9:	75 6e                	jne    c0024349 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242db:	6a 00                	push   0x0
c00242dd:	6a 08                	push   0x8
c00242df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242e6:	50                   	push   eax
c00242e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242ed:	e8 dc ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242f2:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242f7:	50                   	push   eax
c00242f8:	6a 09                	push   0x9
c00242fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024301:	50                   	push   eax
c0024302:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024308:	e8 c1 ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430d:	83 c4 20             	add    esp,0x20
c0024310:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024315:	50                   	push   eax
c0024316:	6a 0a                	push   0xa
c0024318:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002431f:	50                   	push   eax
c0024320:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024326:	e8 a3 ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002432b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024330:	50                   	push   eax
c0024331:	6a 0b                	push   0xb
c0024333:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002433a:	50                   	push   eax
c002433b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024341:	e8 88 ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024346:	83 c4 20             	add    esp,0x20
c0024349:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002434e:	50                   	push   eax
c002434f:	6a 02                	push   0x2
c0024351:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024358:	50                   	push   eax
c0024359:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002435f:	e8 6a ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024364:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024369:	50                   	push   eax
c002436a:	6a 03                	push   0x3
c002436c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024373:	50                   	push   eax
c0024374:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002437a:	e8 4f ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002437f:	83 c4 20             	add    esp,0x20
c0024382:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024387:	50                   	push   eax
c0024388:	6a 04                	push   0x4
c002438a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024391:	50                   	push   eax
c0024392:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024398:	e8 31 ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002439d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00243a2:	50                   	push   eax
c00243a3:	6a 05                	push   0x5
c00243a5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243ac:	50                   	push   eax
c00243ad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243b3:	e8 16 ed ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243b8:	83 c4 20             	add    esp,0x20
c00243bb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00243c0:	0f 94 c0             	sete   al
c00243c3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00243c8:	74 09                	je     c00243d3 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c00243ca:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243d1:	eb 07                	jmp    c00243da <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243d3:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243da:	0f b6 c0             	movzx  eax,al
c00243dd:	50                   	push   eax
c00243de:	6a 07                	push   0x7
c00243e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243e7:	50                   	push   eax
c00243e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243ee:	e8 db ec ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243f3:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243f7:	83 c4 10             	add    esp,0x10
c00243fa:	85 f6                	test   esi,esi
c00243fc:	0f 84 ba 00 00 00    	je     c00244bc <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024402:	50                   	push   eax
c0024403:	6a 01                	push   0x1
c0024405:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002440c:	50                   	push   eax
c002440d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024413:	e8 62 f8 ff ff       	call   c0023c7a <IDE::polling(unsigned char, unsigned int)>
c0024418:	83 c4 10             	add    esp,0x10
c002441b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024421:	84 c0                	test   al,al
c0024423:	74 2c                	je     c0024451 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024425:	0f b6 f8             	movzx  edi,al
c0024428:	0f b6 d2             	movzx  edx,dl
c002442b:	57                   	push   edi
c002442c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024433:	50                   	push   eax
c0024434:	52                   	push   edx
c0024435:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002443b:	e8 a4 f6 ff ff       	call   c0023ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024440:	c7 04 24 cc ce 02 c0 	mov    DWORD PTR [esp],0xc002cecc
c0024447:	e8 d3 eb fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c002444c:	e9 87 00 00 00       	jmp    c00244d8 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024451:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024456:	74 33                	je     c002448b <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024458:	31 ed                	xor    ebp,ebp
c002445a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002445e:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024462:	50                   	push   eax
c0024463:	50                   	push   eax
c0024464:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002446b:	50                   	push   eax
c002446c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024472:	e8 45 ec ff ff       	call   c00230bc <IDE::getBase(unsigned char)>
c0024477:	89 c2                	mov    edx,eax
c0024479:	89 f8                	mov    eax,edi
c002447b:	66 ef                	out    dx,ax
c002447d:	45                   	inc    ebp
c002447e:	83 c4 10             	add    esp,0x10
c0024481:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024487:	75 d1                	jne    c002445a <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024489:	eb 23                	jmp    c00244ae <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002448b:	0f b6 d2             	movzx  edx,dl
c002448e:	51                   	push   ecx
c002448f:	51                   	push   ecx
c0024490:	52                   	push   edx
c0024491:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024497:	e8 20 ec ff ff       	call   c00230bc <IDE::getBase(unsigned char)>
c002449c:	b9 00 01 00 00       	mov    ecx,0x100
c00244a1:	89 c2                	mov    edx,eax
c00244a3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00244a7:	fc                   	cld    
c00244a8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00244ab:	83 c4 10             	add    esp,0x10
c00244ae:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00244b6:	4e                   	dec    esi
c00244b7:	e9 3e ff ff ff       	jmp    c00243fa <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c00244bc:	31 ff                	xor    edi,edi
c00244be:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00244c3:	74 16                	je     c00244db <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00244c5:	50                   	push   eax
c00244c6:	50                   	push   eax
c00244c7:	31 c0                	xor    eax,eax
c00244c9:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244ce:	0f 94 c0             	sete   al
c00244d1:	50                   	push   eax
c00244d2:	53                   	push   ebx
c00244d3:	e8 ec fb ff ff       	call   c00240c4 <ATA::flush(bool)>
c00244d8:	83 c4 10             	add    esp,0x10
c00244db:	83 c4 2c             	add    esp,0x2c
c00244de:	89 f8                	mov    eax,edi
c00244e0:	5b                   	pop    ebx
c00244e1:	5e                   	pop    esi
c00244e2:	5f                   	pop    edi
c00244e3:	5d                   	pop    ebp
c00244e4:	c3                   	ret    
c00244e5:	90                   	nop

c00244e6 <ATA::read(unsigned long long, int, void*)>:
c00244e6:	57                   	push   edi
c00244e7:	b8 04 00 00 00       	mov    eax,0x4
c00244ec:	56                   	push   esi
c00244ed:	53                   	push   ebx
c00244ee:	83 ec 10             	sub    esp,0x10
c00244f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244f9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024500:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024504:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002450a:	77 3b                	ja     c0024547 <ATA::read(unsigned long long, int, void*)+0x61>
c002450c:	b8 06 00 00 00       	mov    eax,0x6
c0024511:	85 d2                	test   edx,edx
c0024513:	74 32                	je     c0024547 <ATA::read(unsigned long long, int, void*)+0x61>
c0024515:	50                   	push   eax
c0024516:	50                   	push   eax
c0024517:	6a 00                	push   0x0
c0024519:	52                   	push   edx
c002451a:	53                   	push   ebx
c002451b:	57                   	push   edi
c002451c:	56                   	push   esi
c002451d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024521:	e8 38 fc ff ff       	call   c002415e <ATA::access(unsigned long long, int, void*, bool)>
c0024526:	83 c4 20             	add    esp,0x20
c0024529:	85 c0                	test   eax,eax
c002452b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002452f:	75 11                	jne    c0024542 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024531:	01 1d 88 28 03 c0    	add    DWORD PTR ds:0xc0032888,ebx
c0024537:	e8 be c4 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c002453c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024540:	eb 05                	jmp    c0024547 <ATA::read(unsigned long long, int, void*)+0x61>
c0024542:	b8 01 00 00 00       	mov    eax,0x1
c0024547:	83 c4 10             	add    esp,0x10
c002454a:	5b                   	pop    ebx
c002454b:	5e                   	pop    esi
c002454c:	5f                   	pop    edi
c002454d:	c3                   	ret    

c002454e <ATA::write(unsigned long long, int, void*)>:
c002454e:	57                   	push   edi
c002454f:	b8 04 00 00 00       	mov    eax,0x4
c0024554:	56                   	push   esi
c0024555:	53                   	push   ebx
c0024556:	83 ec 10             	sub    esp,0x10
c0024559:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002455d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024561:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024564:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024568:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002456c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024572:	77 3b                	ja     c00245af <ATA::write(unsigned long long, int, void*)+0x61>
c0024574:	b8 06 00 00 00       	mov    eax,0x6
c0024579:	85 d2                	test   edx,edx
c002457b:	74 32                	je     c00245af <ATA::write(unsigned long long, int, void*)+0x61>
c002457d:	50                   	push   eax
c002457e:	50                   	push   eax
c002457f:	6a 01                	push   0x1
c0024581:	52                   	push   edx
c0024582:	53                   	push   ebx
c0024583:	57                   	push   edi
c0024584:	56                   	push   esi
c0024585:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024589:	e8 d0 fb ff ff       	call   c002415e <ATA::access(unsigned long long, int, void*, bool)>
c002458e:	83 c4 20             	add    esp,0x20
c0024591:	85 c0                	test   eax,eax
c0024593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024597:	75 11                	jne    c00245aa <ATA::write(unsigned long long, int, void*)+0x5c>
c0024599:	01 1d 84 28 03 c0    	add    DWORD PTR ds:0xc0032884,ebx
c002459f:	e8 56 c4 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c00245a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00245a8:	eb 05                	jmp    c00245af <ATA::write(unsigned long long, int, void*)+0x61>
c00245aa:	b8 01 00 00 00       	mov    eax,0x1
c00245af:	83 c4 10             	add    esp,0x10
c00245b2:	5b                   	pop    ebx
c00245b3:	5e                   	pop    esi
c00245b4:	5f                   	pop    edi
c00245b5:	c3                   	ret    

c00245b6 <ATA::detectCHS()>:
c00245b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00245ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00245c0:	c1 e0 06             	shl    eax,0x6
c00245c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00245c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245d3:	c7 44 24 04 d7 ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ced7
c00245db:	e9 ed 60 ff ff       	jmp    c001a6cd <Krnl::panic(char const*)>

c00245e0 <ATA::open(int, int, void*)>:
c00245e0:	53                   	push   ebx
c00245e1:	83 ec 08             	sub    esp,0x8
c00245e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245fc:	c1 e0 06             	shl    eax,0x6
c00245ff:	01 d0                	add    eax,edx
c0024601:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024608:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002460e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024615:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002461f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024625:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002462c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024633:	75 0c                	jne    c0024641 <ATA::open(int, int, void*)+0x61>
c0024635:	83 ec 0c             	sub    esp,0xc
c0024638:	53                   	push   ebx
c0024639:	e8 78 ff ff ff       	call   c00245b6 <ATA::detectCHS()>
c002463e:	83 c4 10             	add    esp,0x10
c0024641:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024647:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002464d:	c1 e0 06             	shl    eax,0x6
c0024650:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024657:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024661:	d1 e8                	shr    eax,1
c0024663:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024669:	6a 04                	push   0x4
c002466b:	6a 0c                	push   0xc
c002466d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024674:	50                   	push   eax
c0024675:	52                   	push   edx
c0024676:	e8 53 ea ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002467b:	90                   	nop
c002467c:	90                   	nop
c002467d:	6a 00                	push   0x0
c002467f:	6a 0c                	push   0xc
c0024681:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024688:	50                   	push   eax
c0024689:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002468f:	e8 3a ea ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024694:	83 c4 14             	add    esp,0x14
c0024697:	53                   	push   ebx
c0024698:	e8 35 02 ff ff       	call   c00148d2 <PhysicalDisk::startCache()>
c002469d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00246a0:	e8 af 23 ff ff       	call   c0016a54 <createPartitionsForDisk(PhysicalDisk*)>
c00246a5:	31 c0                	xor    eax,eax
c00246a7:	83 c4 18             	add    esp,0x18
c00246aa:	5b                   	pop    ebx
c00246ab:	c3                   	ret    

c00246ac <ATAPI::write(unsigned long long, int, void*)>:
c00246ac:	b8 03 00 00 00       	mov    eax,0x3
c00246b1:	c3                   	ret    

c00246b2 <ATAPI::close(int, int, void*)>:
c00246b2:	83 ec 0c             	sub    esp,0xc
c00246b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00246bf:	85 c0                	test   eax,eax
c00246c1:	74 0c                	je     c00246cf <ATAPI::close(int, int, void*)+0x1d>
c00246c3:	83 ec 0c             	sub    esp,0xc
c00246c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00246c8:	50                   	push   eax
c00246c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00246cc:	83 c4 10             	add    esp,0x10
c00246cf:	31 c0                	xor    eax,eax
c00246d1:	83 c4 0c             	add    esp,0xc
c00246d4:	c3                   	ret    
c00246d5:	90                   	nop

c00246d6 <ATAPI::ATAPI()>:
c00246d6:	83 ec 0c             	sub    esp,0xc
c00246d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246dd:	83 ec 04             	sub    esp,0x4
c00246e0:	68 00 08 00 00       	push   0x800
c00246e5:	68 11 d0 02 c0       	push   0xc002d011
c00246ea:	50                   	push   eax
c00246eb:	e8 7a 01 ff ff       	call   c001486a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246f0:	83 c4 10             	add    esp,0x10
c00246f3:	ba 2c cf 02 c0       	mov    edx,0xc002cf2c
c00246f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246fc:	89 10                	mov    DWORD PTR [eax],edx
c00246fe:	90                   	nop
c00246ff:	83 c4 0c             	add    esp,0xc
c0024702:	c3                   	ret    
c0024703:	90                   	nop

c0024704 <ATAPI::readyForCommand()>:
c0024704:	56                   	push   esi
c0024705:	53                   	push   ebx
c0024706:	31 db                	xor    ebx,ebx
c0024708:	50                   	push   eax
c0024709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002470d:	50                   	push   eax
c002470e:	6a 0c                	push   0xc
c0024710:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024717:	50                   	push   eax
c0024718:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002471e:	e8 6b ea ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0024723:	83 c4 10             	add    esp,0x10
c0024726:	a8 88                	test   al,0x88
c0024728:	74 23                	je     c002474d <ATAPI::readyForCommand()+0x49>
c002472a:	43                   	inc    ebx
c002472b:	83 fb 63             	cmp    ebx,0x63
c002472e:	7e dd                	jle    c002470d <ATAPI::readyForCommand()+0x9>
c0024730:	51                   	push   ecx
c0024731:	51                   	push   ecx
c0024732:	6a 00                	push   0x0
c0024734:	68 40 42 0f 00       	push   0xf4240
c0024739:	e8 d2 9c ff ff       	call   c001e410 <nanoSleep(unsigned long long)>
c002473e:	83 c4 10             	add    esp,0x10
c0024741:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024747:	75 c4                	jne    c002470d <ATAPI::readyForCommand()+0x9>
c0024749:	31 c0                	xor    eax,eax
c002474b:	eb 02                	jmp    c002474f <ATAPI::readyForCommand()+0x4b>
c002474d:	b0 01                	mov    al,0x1
c002474f:	5a                   	pop    edx
c0024750:	5b                   	pop    ebx
c0024751:	5e                   	pop    esi
c0024752:	c3                   	ret    
c0024753:	90                   	nop

c0024754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024754:	55                   	push   ebp
c0024755:	57                   	push   edi
c0024756:	56                   	push   esi
c0024757:	53                   	push   ebx
c0024758:	83 ec 20             	sub    esp,0x20
c002475b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002475f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024763:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024767:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002476b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002476f:	6a 01                	push   0x1
c0024771:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024778:	50                   	push   eax
c0024779:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002477f:	e8 56 eb ff ff       	call   c00232da <IDE::enableIRQs(unsigned char, bool)>
c0024784:	5e                   	pop    esi
c0024785:	58                   	pop    eax
c0024786:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002478d:	50                   	push   eax
c002478e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024794:	e8 0f e9 ff ff       	call   c00230a8 <IDE::prepareInterrupt(unsigned char)>
c0024799:	89 3c 24             	mov    DWORD PTR [esp],edi
c002479c:	e8 63 ff ff ff       	call   c0024704 <ATAPI::readyForCommand()>
c00247a1:	83 c4 10             	add    esp,0x10
c00247a4:	84 c0                	test   al,al
c00247a6:	75 0a                	jne    c00247b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00247a8:	bb 01 00 00 00       	mov    ebx,0x1
c00247ad:	e9 57 02 00 00       	jmp    c0024a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00247b2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00247b8:	c1 e0 04             	shl    eax,0x4
c00247bb:	0f b6 c0             	movzx  eax,al
c00247be:	50                   	push   eax
c00247bf:	6a 06                	push   0x6
c00247c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247c8:	50                   	push   eax
c00247c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247cf:	e8 fa e8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247d4:	6a 00                	push   0x0
c00247d6:	6a 01                	push   0x1
c00247d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247df:	50                   	push   eax
c00247e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247e6:	e8 e3 e8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247eb:	83 c4 20             	add    esp,0x20
c00247ee:	0f b6 c3             	movzx  eax,bl
c00247f1:	0f b6 df             	movzx  ebx,bh
c00247f4:	50                   	push   eax
c00247f5:	6a 04                	push   0x4
c00247f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247fe:	50                   	push   eax
c00247ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024805:	e8 c4 e8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002480a:	53                   	push   ebx
c002480b:	6a 05                	push   0x5
c002480d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024814:	50                   	push   eax
c0024815:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002481b:	e8 ae e8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024820:	83 c4 20             	add    esp,0x20
c0024823:	68 a0 00 00 00       	push   0xa0
c0024828:	6a 07                	push   0x7
c002482a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024831:	50                   	push   eax
c0024832:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024838:	e8 91 e8 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c002483d:	83 c4 0c             	add    esp,0xc
c0024840:	6a 01                	push   0x1
c0024842:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024849:	50                   	push   eax
c002484a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024850:	e8 25 f4 ff ff       	call   c0023c7a <IDE::polling(unsigned char, unsigned int)>
c0024855:	83 c4 10             	add    esp,0x10
c0024858:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002485e:	84 c0                	test   al,al
c0024860:	74 23                	je     c0024885 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024862:	0f b6 d8             	movzx  ebx,al
c0024865:	0f b6 d2             	movzx  edx,dl
c0024868:	53                   	push   ebx
c0024869:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024870:	50                   	push   eax
c0024871:	52                   	push   edx
c0024872:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024878:	e8 67 f2 ff ff       	call   c0023ae4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002487d:	83 c4 10             	add    esp,0x10
c0024880:	e9 84 01 00 00       	jmp    c0024a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024885:	0f b6 d2             	movzx  edx,dl
c0024888:	53                   	push   ebx
c0024889:	53                   	push   ebx
c002488a:	52                   	push   edx
c002488b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024891:	e8 26 e8 ff ff       	call   c00230bc <IDE::getBase(unsigned char)>
c0024896:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002489a:	b9 06 00 00 00       	mov    ecx,0x6
c002489f:	89 c2                	mov    edx,eax
c00248a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00248a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00248a8:	83 c4 10             	add    esp,0x10
c00248ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00248b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00248b8:	85 db                	test   ebx,ebx
c00248ba:	0f 84 ec 00 00 00    	je     c00249ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00248c0:	51                   	push   ecx
c00248c1:	51                   	push   ecx
c00248c2:	52                   	push   edx
c00248c3:	50                   	push   eax
c00248c4:	e8 73 e9 ff ff       	call   c002323c <IDE::waitInterrupt(unsigned char)>
c00248c9:	83 c4 10             	add    esp,0x10
c00248cc:	84 c0                	test   al,al
c00248ce:	0f 84 d4 fe ff ff    	je     c00247a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248d4:	56                   	push   esi
c00248d5:	56                   	push   esi
c00248d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248dd:	50                   	push   eax
c00248de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e4:	e8 bf e7 ff ff       	call   c00230a8 <IDE::prepareInterrupt(unsigned char)>
c00248e9:	83 c4 0c             	add    esp,0xc
c00248ec:	6a 04                	push   0x4
c00248ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248f5:	50                   	push   eax
c00248f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248fc:	e8 8d e8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c0024901:	83 c4 0c             	add    esp,0xc
c0024904:	89 c6                	mov    esi,eax
c0024906:	6a 05                	push   0x5
c0024908:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002490f:	50                   	push   eax
c0024910:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024916:	e8 73 e8 ff ff       	call   c002318e <IDE::read(unsigned char, unsigned char)>
c002491b:	89 f1                	mov    ecx,esi
c002491d:	0f b6 c0             	movzx  eax,al
c0024920:	0f b6 f1             	movzx  esi,cl
c0024923:	c1 e0 08             	shl    eax,0x8
c0024926:	09 c6                	or     esi,eax
c0024928:	d1 fe                	sar    esi,1
c002492a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002492e:	83 c4 10             	add    esp,0x10
c0024931:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024936:	74 41                	je     c0024979 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024938:	31 c9                	xor    ecx,ecx
c002493a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024940:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024947:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002494b:	75 0a                	jne    c0024957 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002494d:	01 c9                	add    ecx,ecx
c002494f:	01 cd                	add    ebp,ecx
c0024951:	4b                   	dec    ebx
c0024952:	e9 54 ff ff ff       	jmp    c00248ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024957:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002495c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024960:	51                   	push   ecx
c0024961:	51                   	push   ecx
c0024962:	52                   	push   edx
c0024963:	50                   	push   eax
c0024964:	e8 53 e7 ff ff       	call   c00230bc <IDE::getBase(unsigned char)>
c0024969:	89 c2                	mov    edx,eax
c002496b:	89 f0                	mov    eax,esi
c002496d:	66 ef                	out    dx,ax
c002496f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024973:	83 c4 10             	add    esp,0x10
c0024976:	41                   	inc    ecx
c0024977:	eb c1                	jmp    c002493a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024979:	31 f6                	xor    esi,esi
c002497b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024981:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024988:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002498c:	75 06                	jne    c0024994 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002498e:	01 f6                	add    esi,esi
c0024990:	01 f5                	add    ebp,esi
c0024992:	eb bd                	jmp    c0024951 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024994:	51                   	push   ecx
c0024995:	51                   	push   ecx
c0024996:	52                   	push   edx
c0024997:	50                   	push   eax
c0024998:	e8 1f e7 ff ff       	call   c00230bc <IDE::getBase(unsigned char)>
c002499d:	89 c2                	mov    edx,eax
c002499f:	66 ed                	in     ax,dx
c00249a1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00249a6:	83 c4 10             	add    esp,0x10
c00249a9:	46                   	inc    esi
c00249aa:	eb cf                	jmp    c002497b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00249ac:	51                   	push   ecx
c00249ad:	51                   	push   ecx
c00249ae:	52                   	push   edx
c00249af:	50                   	push   eax
c00249b0:	e8 87 e8 ff ff       	call   c002323c <IDE::waitInterrupt(unsigned char)>
c00249b5:	83 c4 10             	add    esp,0x10
c00249b8:	84 c0                	test   al,al
c00249ba:	0f 84 e8 fd ff ff    	je     c00247a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00249c0:	bb a0 86 01 00       	mov    ebx,0x186a0
c00249c5:	52                   	push   edx
c00249c6:	52                   	push   edx
c00249c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249ce:	50                   	push   eax
c00249cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249d5:	e8 ce e6 ff ff       	call   c00230a8 <IDE::prepareInterrupt(unsigned char)>
c00249da:	83 c4 10             	add    esp,0x10
c00249dd:	50                   	push   eax
c00249de:	50                   	push   eax
c00249df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249e6:	50                   	push   eax
c00249e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249ed:	e8 ca e6 ff ff       	call   c00230bc <IDE::getBase(unsigned char)>
c00249f2:	8d 50 07             	lea    edx,[eax+0x7]
c00249f5:	ec                   	in     al,dx
c00249f6:	83 c4 10             	add    esp,0x10
c00249f9:	a8 88                	test   al,0x88
c00249fb:	74 0a                	je     c0024a07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249fd:	4b                   	dec    ebx
c00249fe:	75 dd                	jne    c00249dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024a00:	bb 02 00 00 00       	mov    ebx,0x2
c0024a05:	eb 02                	jmp    c0024a09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024a07:	31 db                	xor    ebx,ebx
c0024a09:	83 c4 1c             	add    esp,0x1c
c0024a0c:	89 d8                	mov    eax,ebx
c0024a0e:	5b                   	pop    ebx
c0024a0f:	5e                   	pop    esi
c0024a10:	5f                   	pop    edi
c0024a11:	5d                   	pop    ebp
c0024a12:	c3                   	ret    
c0024a13:	90                   	nop

c0024a14 <ATAPI::diskRemoved()>:
c0024a14:	83 ec 18             	sub    esp,0x18
c0024a17:	68 1d d0 02 c0       	push   0xc002d01d
c0024a1c:	e8 fe e5 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0024a21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024a25:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0024a2c:	83 c4 1c             	add    esp,0x1c
c0024a2f:	c3                   	ret    

c0024a30 <ATAPI::eject()>:
c0024a30:	57                   	push   edi
c0024a31:	b9 03 00 00 00       	mov    ecx,0x3
c0024a36:	53                   	push   ebx
c0024a37:	83 ec 14             	sub    esp,0x14
c0024a3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a3e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a42:	fc                   	cld    
c0024a43:	31 c0                	xor    eax,eax
c0024a45:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a47:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a4c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a51:	50                   	push   eax
c0024a52:	50                   	push   eax
c0024a53:	6a 00                	push   0x0
c0024a55:	6a 00                	push   0x0
c0024a57:	6a 00                	push   0x0
c0024a59:	6a 02                	push   0x2
c0024a5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a5f:	50                   	push   eax
c0024a60:	53                   	push   ebx
c0024a61:	e8 ee fc ff ff       	call   c0024754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a66:	83 c4 14             	add    esp,0x14
c0024a69:	53                   	push   ebx
c0024a6a:	e8 a5 ff ff ff       	call   c0024a14 <ATAPI::diskRemoved()>
c0024a6f:	83 c4 24             	add    esp,0x24
c0024a72:	31 c0                	xor    eax,eax
c0024a74:	5b                   	pop    ebx
c0024a75:	5f                   	pop    edi
c0024a76:	c3                   	ret    
c0024a77:	90                   	nop

c0024a78 <ATAPI::diskInserted()>:
c0024a78:	53                   	push   ebx
c0024a79:	83 ec 14             	sub    esp,0x14
c0024a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a80:	68 34 d0 02 c0       	push   0xc002d034
c0024a85:	e8 95 e5 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0024a8a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a94:	e8 39 fe fe ff       	call   c00148d2 <PhysicalDisk::startCache()>
c0024a99:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a9d:	83 c4 18             	add    esp,0x18
c0024aa0:	5b                   	pop    ebx
c0024aa1:	e9 ae 1f ff ff       	jmp    c0016a54 <createPartitionsForDisk(PhysicalDisk*)>

c0024aa6 <ATAPI::detectMedia()>:
c0024aa6:	56                   	push   esi
c0024aa7:	53                   	push   ebx
c0024aa8:	83 ec 28             	sub    esp,0x28
c0024aab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024aaf:	6a 0c                	push   0xc
c0024ab1:	6a 00                	push   0x0
c0024ab3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024ab7:	56                   	push   esi
c0024ab8:	e8 bb bc fd ff       	call   c0000778 <memset>
c0024abd:	58                   	pop    eax
c0024abe:	5a                   	pop    edx
c0024abf:	6a 00                	push   0x0
c0024ac1:	6a 00                	push   0x0
c0024ac3:	6a 00                	push   0x0
c0024ac5:	6a 00                	push   0x0
c0024ac7:	56                   	push   esi
c0024ac8:	53                   	push   ebx
c0024ac9:	e8 86 fc ff ff       	call   c0024754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024ace:	83 c4 1c             	add    esp,0x1c
c0024ad1:	6a 0c                	push   0xc
c0024ad3:	6a 00                	push   0x0
c0024ad5:	56                   	push   esi
c0024ad6:	e8 9d bc fd ff       	call   c0000778 <memset>
c0024adb:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ae0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ae5:	59                   	pop    ecx
c0024ae6:	58                   	pop    eax
c0024ae7:	6a 01                	push   0x1
c0024ae9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024aed:	50                   	push   eax
c0024aee:	6a 00                	push   0x0
c0024af0:	6a 12                	push   0x12
c0024af2:	56                   	push   esi
c0024af3:	53                   	push   ebx
c0024af4:	e8 5b fc ff ff       	call   c0024754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024af9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024afd:	83 c4 20             	add    esp,0x20
c0024b00:	83 e0 7f             	and    eax,0x7f
c0024b03:	3c 70                	cmp    al,0x70
c0024b05:	74 15                	je     c0024b1c <ATAPI::detectMedia()+0x76>
c0024b07:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b0e:	75 0c                	jne    c0024b1c <ATAPI::detectMedia()+0x76>
c0024b10:	83 ec 0c             	sub    esp,0xc
c0024b13:	53                   	push   ebx
c0024b14:	e8 5f ff ff ff       	call   c0024a78 <ATAPI::diskInserted()>
c0024b19:	83 c4 10             	add    esp,0x10
c0024b1c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024b20:	83 e0 0f             	and    eax,0xf
c0024b23:	3c 02                	cmp    al,0x2
c0024b25:	75 1b                	jne    c0024b42 <ATAPI::detectMedia()+0x9c>
c0024b27:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024b2c:	75 2d                	jne    c0024b5b <ATAPI::detectMedia()+0xb5>
c0024b2e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b35:	74 24                	je     c0024b5b <ATAPI::detectMedia()+0xb5>
c0024b37:	83 ec 0c             	sub    esp,0xc
c0024b3a:	53                   	push   ebx
c0024b3b:	e8 d4 fe ff ff       	call   c0024a14 <ATAPI::diskRemoved()>
c0024b40:	eb 16                	jmp    c0024b58 <ATAPI::detectMedia()+0xb2>
c0024b42:	84 c0                	test   al,al
c0024b44:	75 15                	jne    c0024b5b <ATAPI::detectMedia()+0xb5>
c0024b46:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b4d:	75 0c                	jne    c0024b5b <ATAPI::detectMedia()+0xb5>
c0024b4f:	83 ec 0c             	sub    esp,0xc
c0024b52:	53                   	push   ebx
c0024b53:	e8 20 ff ff ff       	call   c0024a78 <ATAPI::diskInserted()>
c0024b58:	83 c4 10             	add    esp,0x10
c0024b5b:	83 c4 24             	add    esp,0x24
c0024b5e:	5b                   	pop    ebx
c0024b5f:	5e                   	pop    esi
c0024b60:	c3                   	ret    
c0024b61:	90                   	nop

c0024b62 <ATAPI::open(int, int, void*)>:
c0024b62:	53                   	push   ebx
c0024b63:	83 ec 08             	sub    esp,0x8
c0024b66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b6a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b72:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b78:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b7e:	c1 e0 06             	shl    eax,0x6
c0024b81:	01 d0                	add    eax,edx
c0024b83:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b8a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b90:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b97:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ba1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024ba7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024bae:	6a 04                	push   0x4
c0024bb0:	6a 0c                	push   0xc
c0024bb2:	51                   	push   ecx
c0024bb3:	52                   	push   edx
c0024bb4:	e8 15 e5 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bb9:	90                   	nop
c0024bba:	90                   	nop
c0024bbb:	6a 00                	push   0x0
c0024bbd:	6a 0c                	push   0xc
c0024bbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bc6:	50                   	push   eax
c0024bc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bcd:	e8 fc e4 ff ff       	call   c00230ce <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bd9:	83 c4 14             	add    esp,0x14
c0024bdc:	53                   	push   ebx
c0024bdd:	e8 c4 fe ff ff       	call   c0024aa6 <ATAPI::detectMedia()>
c0024be2:	31 c0                	xor    eax,eax
c0024be4:	83 c4 18             	add    esp,0x18
c0024be7:	5b                   	pop    ebx
c0024be8:	c3                   	ret    
c0024be9:	90                   	nop

c0024bea <ATAPI::read(unsigned long long, int, void*)>:
c0024bea:	55                   	push   ebp
c0024beb:	57                   	push   edi
c0024bec:	56                   	push   esi
c0024bed:	53                   	push   ebx
c0024bee:	83 ec 1c             	sub    esp,0x1c
c0024bf1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bf5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bf9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bfd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c04:	74 41                	je     c0024c47 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024c06:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024c0a:	b9 03 00 00 00       	mov    ecx,0x3
c0024c0f:	fc                   	cld    
c0024c10:	31 c0                	xor    eax,eax
c0024c12:	86 fb                	xchg   bl,bh
c0024c14:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024c16:	c1 c3 10             	rol    ebx,0x10
c0024c19:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024c1e:	89 e8                	mov    eax,ebp
c0024c20:	86 fb                	xchg   bl,bh
c0024c22:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024c26:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024c2a:	50                   	push   eax
c0024c2b:	50                   	push   eax
c0024c2c:	55                   	push   ebp
c0024c2d:	c1 e5 0b             	shl    ebp,0xb
c0024c30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c34:	6a 00                	push   0x0
c0024c36:	55                   	push   ebp
c0024c37:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c3b:	50                   	push   eax
c0024c3c:	56                   	push   esi
c0024c3d:	e8 12 fb ff ff       	call   c0024754 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c42:	83 c4 20             	add    esp,0x20
c0024c45:	eb 1a                	jmp    c0024c61 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c47:	83 ec 0c             	sub    esp,0xc
c0024c4a:	56                   	push   esi
c0024c4b:	e8 56 fe ff ff       	call   c0024aa6 <ATAPI::detectMedia()>
c0024c50:	83 c4 10             	add    esp,0x10
c0024c53:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c5a:	75 aa                	jne    c0024c06 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c5c:	b8 02 00 00 00       	mov    eax,0x2
c0024c61:	83 c4 1c             	add    esp,0x1c
c0024c64:	5b                   	pop    ebx
c0024c65:	5e                   	pop    esi
c0024c66:	5f                   	pop    edi
c0024c67:	5d                   	pop    ebp
c0024c68:	c3                   	ret    
c0024c69:	90                   	nop

c0024c6a <SATA::close(int, int, void*)>:
c0024c6a:	83 ec 0c             	sub    esp,0xc
c0024c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c71:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c77:	85 c0                	test   eax,eax
c0024c79:	74 0c                	je     c0024c87 <SATA::close(int, int, void*)+0x1d>
c0024c7b:	83 ec 0c             	sub    esp,0xc
c0024c7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c80:	50                   	push   eax
c0024c81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c84:	83 c4 10             	add    esp,0x10
c0024c87:	31 c0                	xor    eax,eax
c0024c89:	83 c4 0c             	add    esp,0xc
c0024c8c:	c3                   	ret    
c0024c8d:	90                   	nop

c0024c8e <SATA::powerSaving(PowerSavingLevel)>:
c0024c8e:	c3                   	ret    
c0024c8f:	90                   	nop

c0024c90 <SATA::open(int, int, void*)>:
c0024c90:	56                   	push   esi
c0024c91:	53                   	push   ebx
c0024c92:	50                   	push   eax
c0024c93:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c9b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024ca5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024cab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024cb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024cb9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024cc3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024cc9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024cd0:	e8 10 b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024cd5:	89 c6                	mov    esi,eax
c0024cd7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024cdd:	81 c6 00 10 00 00    	add    esi,0x1000
c0024ce3:	e8 fd b1 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024ce8:	39 c6                	cmp    esi,eax
c0024cea:	74 10                	je     c0024cfc <SATA::open(int, int, void*)+0x6c>
c0024cec:	83 ec 0c             	sub    esp,0xc
c0024cef:	68 5c cf 02 c0       	push   0xc002cf5c
c0024cf4:	e8 d4 59 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0024cf9:	83 c4 10             	add    esp,0x10
c0024cfc:	83 ec 0c             	sub    esp,0xc
c0024cff:	6a 02                	push   0x2
c0024d01:	e8 9f ce fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c0024d06:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d0c:	e8 2f d1 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c0024d11:	6a 03                	push   0x3
c0024d13:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024d19:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024d1f:	50                   	push   eax
c0024d20:	e8 57 d6 fe ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024d25:	83 c4 14             	add    esp,0x14
c0024d28:	53                   	push   ebx
c0024d29:	e8 a4 fb fe ff       	call   c00148d2 <PhysicalDisk::startCache()>
c0024d2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d31:	e8 1e 1d ff ff       	call   c0016a54 <createPartitionsForDisk(PhysicalDisk*)>
c0024d36:	83 c4 14             	add    esp,0x14
c0024d39:	31 c0                	xor    eax,eax
c0024d3b:	5b                   	pop    ebx
c0024d3c:	5e                   	pop    esi
c0024d3d:	c3                   	ret    

c0024d3e <SATA::SATA()>:
c0024d3e:	83 ec 0c             	sub    esp,0xc
c0024d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d45:	83 ec 04             	sub    esp,0x4
c0024d48:	68 00 02 00 00       	push   0x200
c0024d4d:	68 70 cf 02 c0       	push   0xc002cf70
c0024d52:	50                   	push   eax
c0024d53:	e8 12 fb fe ff       	call   c001486a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d58:	83 c4 10             	add    esp,0x10
c0024d5b:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0024d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d64:	89 10                	mov    DWORD PTR [eax],edx
c0024d66:	90                   	nop
c0024d67:	83 c4 0c             	add    esp,0xc
c0024d6a:	c3                   	ret    
c0024d6b:	90                   	nop

c0024d6c <SATA::access(unsigned long long, int, void*, bool)>:
c0024d6c:	55                   	push   ebp
c0024d6d:	57                   	push   edi
c0024d6e:	56                   	push   esi
c0024d6f:	53                   	push   ebx
c0024d70:	83 ec 2c             	sub    esp,0x2c
c0024d73:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d77:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d7f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d83:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d87:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d8c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d90:	7e 10                	jle    c0024da2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d92:	83 ec 0c             	sub    esp,0xc
c0024d95:	68 80 cf 02 c0       	push   0xc002cf80
c0024d9a:	e8 2e 59 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0024d9f:	83 c4 10             	add    esp,0x10
c0024da2:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024da8:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024dae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024db4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024db8:	89 f0                	mov    eax,esi
c0024dba:	c1 e0 07             	shl    eax,0x7
c0024dbd:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024dc1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024dcb:	53                   	push   ebx
c0024dcc:	8d 46 02             	lea    eax,[esi+0x2]
c0024dcf:	53                   	push   ebx
c0024dd0:	c1 e0 07             	shl    eax,0x7
c0024dd3:	bb 01 00 00 00       	mov    ebx,0x1
c0024dd8:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024ddc:	50                   	push   eax
c0024ddd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024de3:	e8 aa ef ff ff       	call   c0023d92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024de8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024dec:	83 c4 10             	add    esp,0x10
c0024def:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024df4:	0f 84 ce 01 00 00    	je     c0024fc8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dfa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dfe:	c1 e0 09             	shl    eax,0x9
c0024e01:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024e06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024e0a:	74 17                	je     c0024e23 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024e0c:	51                   	push   ecx
c0024e0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024e11:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024e15:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024e1b:	e8 24 b9 fd ff       	call   c0000744 <memcpy>
c0024e20:	83 c4 10             	add    esp,0x10
c0024e23:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e29:	8d 46 02             	lea    eax,[esi+0x2]
c0024e2c:	c1 e0 07             	shl    eax,0x7
c0024e2f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e35:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e3b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e45:	c1 e1 05             	shl    ecx,0x5
c0024e48:	01 c8                	add    eax,ecx
c0024e4a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e4e:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e50:	83 e1 01             	and    ecx,0x1
c0024e53:	83 e3 bf             	and    ebx,0xffffffbf
c0024e56:	c1 e1 06             	shl    ecx,0x6
c0024e59:	09 d9                	or     ecx,ebx
c0024e5b:	88 08                	mov    BYTE PTR [eax],cl
c0024e5d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e5f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e65:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e6b:	89 08                	mov    DWORD PTR [eax],ecx
c0024e6d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e73:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e79:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e7f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e82:	52                   	push   edx
c0024e83:	68 90 00 00 00       	push   0x90
c0024e88:	6a 00                	push   0x0
c0024e8a:	53                   	push   ebx
c0024e8b:	e8 e8 b8 fd ff       	call   c0000778 <memset>
c0024e90:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e96:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e9a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024ea0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024ea4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ea8:	83 c4 10             	add    esp,0x10
c0024eab:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024eae:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024eb4:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024eba:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024ebf:	09 c8                	or     eax,ecx
c0024ec1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ec7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024eca:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ed1:	66 25 00 7f          	and    ax,0x7f00
c0024ed5:	66 0d 27 80          	or     ax,0x8027
c0024ed9:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024ede:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ee1:	19 c0                	sbb    eax,eax
c0024ee3:	83 e0 f0             	and    eax,0xfffffff0
c0024ee6:	83 c0 35             	add    eax,0x35
c0024ee9:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024eec:	89 f8                	mov    eax,edi
c0024eee:	c1 e8 10             	shr    eax,0x10
c0024ef1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ef4:	89 f8                	mov    eax,edi
c0024ef6:	c1 e8 18             	shr    eax,0x18
c0024ef9:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024efc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024f00:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024f03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f07:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024f0a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024f0e:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f12:	89 f3                	mov    ebx,esi
c0024f14:	31 c0                	xor    eax,eax
c0024f16:	c1 e3 07             	shl    ebx,0x7
c0024f19:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024f1d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024f23:	80 e1 88             	and    cl,0x88
c0024f26:	74 0a                	je     c0024f32 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024f28:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f2d:	74 0a                	je     c0024f39 <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f2f:	40                   	inc    eax
c0024f30:	eb eb                	jmp    c0024f1d <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f32:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f37:	75 0a                	jne    c0024f43 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f39:	83 ec 0c             	sub    esp,0xc
c0024f3c:	68 b9 cf 02 c0       	push   0xc002cfb9
c0024f41:	eb 56                	jmp    c0024f99 <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f43:	b8 01 00 00 00       	mov    eax,0x1
c0024f48:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f4c:	c1 e6 07             	shl    esi,0x7
c0024f4f:	d3 e0                	shl    eax,cl
c0024f51:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f55:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f5b:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f61:	85 c8                	test   eax,ecx
c0024f63:	74 20                	je     c0024f85 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f65:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f6b:	0f ba e1 1e          	bt     ecx,0x1e
c0024f6f:	73 ea                	jae    c0024f5b <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f71:	83 ec 0c             	sub    esp,0xc
c0024f74:	31 db                	xor    ebx,ebx
c0024f76:	68 c7 cf 02 c0       	push   0xc002cfc7
c0024f7b:	e8 4d 57 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0024f80:	83 c4 10             	add    esp,0x10
c0024f83:	eb 43                	jmp    c0024fc8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f85:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f8b:	0f ba e0 1e          	bt     eax,0x1e
c0024f8f:	73 17                	jae    c0024fa8 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f91:	83 ec 0c             	sub    esp,0xc
c0024f94:	68 c7 cf 02 c0       	push   0xc002cfc7
c0024f99:	e8 2f 57 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0024f9e:	bb 01 00 00 00       	mov    ebx,0x1
c0024fa3:	83 c4 10             	add    esp,0x10
c0024fa6:	eb 20                	jmp    c0024fc8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fa8:	31 db                	xor    ebx,ebx
c0024faa:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024faf:	75 17                	jne    c0024fc8 <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024fb1:	50                   	push   eax
c0024fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024fb6:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024fbc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024fc0:	e8 7f b7 fd ff       	call   c0000744 <memcpy>
c0024fc5:	83 c4 10             	add    esp,0x10
c0024fc8:	83 c4 2c             	add    esp,0x2c
c0024fcb:	89 d8                	mov    eax,ebx
c0024fcd:	5b                   	pop    ebx
c0024fce:	5e                   	pop    esi
c0024fcf:	5f                   	pop    edi
c0024fd0:	5d                   	pop    ebp
c0024fd1:	c3                   	ret    

c0024fd2 <SATA::read(unsigned long long, int, void*)>:
c0024fd2:	57                   	push   edi
c0024fd3:	b8 04 00 00 00       	mov    eax,0x4
c0024fd8:	56                   	push   esi
c0024fd9:	53                   	push   ebx
c0024fda:	83 ec 10             	sub    esp,0x10
c0024fdd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fe1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fe5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fe8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ff0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024ff6:	77 3b                	ja     c0025033 <SATA::read(unsigned long long, int, void*)+0x61>
c0024ff8:	b8 06 00 00 00       	mov    eax,0x6
c0024ffd:	85 d2                	test   edx,edx
c0024fff:	74 32                	je     c0025033 <SATA::read(unsigned long long, int, void*)+0x61>
c0025001:	50                   	push   eax
c0025002:	50                   	push   eax
c0025003:	6a 00                	push   0x0
c0025005:	52                   	push   edx
c0025006:	53                   	push   ebx
c0025007:	57                   	push   edi
c0025008:	56                   	push   esi
c0025009:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002500d:	e8 5a fd ff ff       	call   c0024d6c <SATA::access(unsigned long long, int, void*, bool)>
c0025012:	83 c4 20             	add    esp,0x20
c0025015:	85 c0                	test   eax,eax
c0025017:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002501b:	75 11                	jne    c002502e <SATA::read(unsigned long long, int, void*)+0x5c>
c002501d:	01 1d 88 28 03 c0    	add    DWORD PTR ds:0xc0032888,ebx
c0025023:	e8 d2 b9 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c0025028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002502c:	eb 05                	jmp    c0025033 <SATA::read(unsigned long long, int, void*)+0x61>
c002502e:	b8 01 00 00 00       	mov    eax,0x1
c0025033:	83 c4 10             	add    esp,0x10
c0025036:	5b                   	pop    ebx
c0025037:	5e                   	pop    esi
c0025038:	5f                   	pop    edi
c0025039:	c3                   	ret    

c002503a <SATA::write(unsigned long long, int, void*)>:
c002503a:	55                   	push   ebp
c002503b:	b8 04 00 00 00       	mov    eax,0x4
c0025040:	57                   	push   edi
c0025041:	56                   	push   esi
c0025042:	53                   	push   ebx
c0025043:	83 ec 1c             	sub    esp,0x1c
c0025046:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002504a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002504e:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025051:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025055:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025059:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002505f:	77 56                	ja     c00250b7 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025061:	b8 06 00 00 00       	mov    eax,0x6
c0025066:	85 ff                	test   edi,edi
c0025068:	74 4d                	je     c00250b7 <SATA::write(unsigned long long, int, void*)+0x7d>
c002506a:	89 ee                	mov    esi,ebp
c002506c:	c1 e6 09             	shl    esi,0x9
c002506f:	01 fe                	add    esi,edi
c0025071:	89 c8                	mov    eax,ecx
c0025073:	89 da                	mov    edx,ebx
c0025075:	83 c0 01             	add    eax,0x1
c0025078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002507c:	83 d2 00             	adc    edx,0x0
c002507f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025083:	50                   	push   eax
c0025084:	50                   	push   eax
c0025085:	6a 01                	push   0x1
c0025087:	57                   	push   edi
c0025088:	81 c7 00 02 00 00    	add    edi,0x200
c002508e:	6a 01                	push   0x1
c0025090:	53                   	push   ebx
c0025091:	51                   	push   ecx
c0025092:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025096:	e8 d1 fc ff ff       	call   c0024d6c <SATA::access(unsigned long long, int, void*, bool)>
c002509b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002509f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250a3:	83 c4 20             	add    esp,0x20
c00250a6:	39 f7                	cmp    edi,esi
c00250a8:	75 c7                	jne    c0025071 <SATA::write(unsigned long long, int, void*)+0x37>
c00250aa:	01 2d 84 28 03 c0    	add    DWORD PTR ds:0xc0032884,ebp
c00250b0:	e8 45 b9 fe ff       	call   c00109fa <VgaText::updateDiskUsage()>
c00250b5:	31 c0                	xor    eax,eax
c00250b7:	83 c4 1c             	add    esp,0x1c
c00250ba:	5b                   	pop    ebx
c00250bb:	5e                   	pop    esi
c00250bc:	5f                   	pop    edi
c00250bd:	5d                   	pop    ebp
c00250be:	c3                   	ret    
c00250bf:	90                   	nop

c00250c0 <SATAPI::write(unsigned long long, int, void*)>:
c00250c0:	b8 03 00 00 00       	mov    eax,0x3
c00250c5:	c3                   	ret    

c00250c6 <SATAPI::close(int, int, void*)>:
c00250c6:	83 ec 0c             	sub    esp,0xc
c00250c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250d3:	85 c0                	test   eax,eax
c00250d5:	74 0c                	je     c00250e3 <SATAPI::close(int, int, void*)+0x1d>
c00250d7:	83 ec 0c             	sub    esp,0xc
c00250da:	8b 10                	mov    edx,DWORD PTR [eax]
c00250dc:	50                   	push   eax
c00250dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250e0:	83 c4 10             	add    esp,0x10
c00250e3:	31 c0                	xor    eax,eax
c00250e5:	83 c4 0c             	add    esp,0xc
c00250e8:	c3                   	ret    
c00250e9:	90                   	nop

c00250ea <SATAPI::SATAPI()>:
c00250ea:	83 ec 0c             	sub    esp,0xc
c00250ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250f1:	83 ec 04             	sub    esp,0x4
c00250f4:	68 00 08 00 00       	push   0x800
c00250f9:	68 10 d0 02 c0       	push   0xc002d010
c00250fe:	50                   	push   eax
c00250ff:	e8 66 f7 fe ff       	call   c001486a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025104:	83 c4 10             	add    esp,0x10
c0025107:	ba bc d0 02 c0       	mov    edx,0xc002d0bc
c002510c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025110:	89 10                	mov    DWORD PTR [eax],edx
c0025112:	90                   	nop
c0025113:	83 c4 0c             	add    esp,0xc
c0025116:	c3                   	ret    
c0025117:	90                   	nop

c0025118 <SATAPI::diskRemoved()>:
c0025118:	83 ec 18             	sub    esp,0x18
c002511b:	68 1c d0 02 c0       	push   0xc002d01c
c0025120:	e8 fa de fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0025125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025129:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025130:	83 c4 1c             	add    esp,0x1c
c0025133:	c3                   	ret    

c0025134 <SATAPI::diskInserted()>:
c0025134:	53                   	push   ebx
c0025135:	83 ec 14             	sub    esp,0x14
c0025138:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002513c:	68 33 d0 02 c0       	push   0xc002d033
c0025141:	e8 d9 de fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0025146:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002514d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025150:	e8 7d f7 fe ff       	call   c00148d2 <PhysicalDisk::startCache()>
c0025155:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025159:	83 c4 18             	add    esp,0x18
c002515c:	5b                   	pop    ebx
c002515d:	e9 f2 18 ff ff       	jmp    c0016a54 <createPartitionsForDisk(PhysicalDisk*)>

c0025162 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025162:	55                   	push   ebp
c0025163:	57                   	push   edi
c0025164:	56                   	push   esi
c0025165:	53                   	push   ebx
c0025166:	83 ec 24             	sub    esp,0x24
c0025169:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002516d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025171:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025177:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002517b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002517f:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025185:	8d 5f 02             	lea    ebx,[edi+0x2]
c0025188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002518e:	c1 e3 07             	shl    ebx,0x7
c0025191:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025195:	89 f8                	mov    eax,edi
c0025197:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002519b:	c1 e0 07             	shl    eax,0x7
c002519e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00251a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00251a6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00251b0:	53                   	push   ebx
c00251b1:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00251b7:	e8 d6 eb ff ff       	call   c0023d92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00251bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00251c0:	83 c4 10             	add    esp,0x10
c00251c3:	b8 01 00 00 00       	mov    eax,0x1
c00251c8:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00251cd:	0f 84 8a 01 00 00    	je     c002535d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251d3:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251db:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251e1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251eb:	c1 e1 05             	shl    ecx,0x5
c00251ee:	01 c8                	add    eax,ecx
c00251f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251f2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251f8:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251fe:	89 08                	mov    DWORD PTR [eax],ecx
c0025200:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0025206:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002520c:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025212:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025215:	52                   	push   edx
c0025216:	68 90 00 00 00       	push   0x90
c002521b:	6a 00                	push   0x0
c002521d:	53                   	push   ebx
c002521e:	e8 55 b5 fd ff       	call   c0000778 <memset>
c0025223:	83 c4 0c             	add    esp,0xc
c0025226:	8d 43 40             	lea    eax,[ebx+0x40]
c0025229:	6a 0c                	push   0xc
c002522b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002522f:	50                   	push   eax
c0025230:	e8 0f b5 fd ff       	call   c0000744 <memcpy>
c0025235:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002523b:	89 ea                	mov    edx,ebp
c002523d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025243:	c1 ea 18             	shr    edx,0x18
c0025246:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002524a:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002524d:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025250:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025254:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002525a:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025260:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025265:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0025269:	09 c8                	or     eax,ecx
c002526b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002526f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025275:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025278:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002527f:	66 25 00 7f          	and    ax,0x7f00
c0025283:	66 0d 27 80          	or     ax,0x8027
c0025287:	66 89 03             	mov    WORD PTR [ebx],ax
c002528a:	89 e8                	mov    eax,ebp
c002528c:	c1 e8 10             	shr    eax,0x10
c002528f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025292:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025296:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025299:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002529d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00252a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00252a4:	83 c4 10             	add    esp,0x10
c00252a7:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00252ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00252af:	31 c0                	xor    eax,eax
c00252b1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00252b7:	80 e1 88             	and    cl,0x88
c00252ba:	74 0a                	je     c00252c6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00252bc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252c1:	74 0a                	je     c00252cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00252c3:	40                   	inc    eax
c00252c4:	eb eb                	jmp    c00252b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00252c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00252cb:	75 0f                	jne    c00252dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00252cd:	83 ec 0c             	sub    esp,0xc
c00252d0:	68 b9 cf 02 c0       	push   0xc002cfb9
c00252d5:	e8 f3 53 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00252da:	eb 3a                	jmp    c0025316 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252dc:	b8 01 00 00 00       	mov    eax,0x1
c00252e1:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252e5:	c1 e7 07             	shl    edi,0x7
c00252e8:	d3 e0                	shl    eax,cl
c00252ea:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252ed:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252f3:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252f9:	85 d0                	test   eax,edx
c00252fb:	74 23                	je     c0025320 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252fd:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025303:	0f ba e2 1e          	bt     edx,0x1e
c0025307:	73 ea                	jae    c00252f3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025309:	83 ec 0c             	sub    esp,0xc
c002530c:	68 4b d0 02 c0       	push   0xc002d04b
c0025311:	e8 09 dd fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0025316:	83 c4 10             	add    esp,0x10
c0025319:	b8 01 00 00 00       	mov    eax,0x1
c002531e:	eb 3d                	jmp    c002535d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025320:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025326:	0f ba e0 1e          	bt     eax,0x1e
c002532a:	73 0a                	jae    c0025336 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	68 5e d0 02 c0       	push   0xc002d05e
c0025334:	eb db                	jmp    c0025311 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025336:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002533b:	74 1e                	je     c002535b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002533d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025342:	74 17                	je     c002535b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025344:	50                   	push   eax
c0025345:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025349:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c002534f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025353:	e8 ec b3 fd ff       	call   c0000744 <memcpy>
c0025358:	83 c4 10             	add    esp,0x10
c002535b:	31 c0                	xor    eax,eax
c002535d:	83 c4 1c             	add    esp,0x1c
c0025360:	5b                   	pop    ebx
c0025361:	5e                   	pop    esi
c0025362:	5f                   	pop    edi
c0025363:	5d                   	pop    ebp
c0025364:	c3                   	ret    
c0025365:	90                   	nop

c0025366 <SATAPI::eject()>:
c0025366:	57                   	push   edi
c0025367:	b9 03 00 00 00       	mov    ecx,0x3
c002536c:	53                   	push   ebx
c002536d:	83 ec 14             	sub    esp,0x14
c0025370:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025374:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025378:	fc                   	cld    
c0025379:	31 c0                	xor    eax,eax
c002537b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002537d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025382:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025387:	50                   	push   eax
c0025388:	6a 00                	push   0x0
c002538a:	6a 00                	push   0x0
c002538c:	6a 00                	push   0x0
c002538e:	6a 00                	push   0x0
c0025390:	6a 02                	push   0x2
c0025392:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025396:	50                   	push   eax
c0025397:	53                   	push   ebx
c0025398:	e8 c5 fd ff ff       	call   c0025162 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002539d:	83 c4 14             	add    esp,0x14
c00253a0:	53                   	push   ebx
c00253a1:	e8 72 fd ff ff       	call   c0025118 <SATAPI::diskRemoved()>
c00253a6:	83 c4 24             	add    esp,0x24
c00253a9:	31 c0                	xor    eax,eax
c00253ab:	5b                   	pop    ebx
c00253ac:	5f                   	pop    edi
c00253ad:	c3                   	ret    

c00253ae <SATAPI::detectMedia()>:
c00253ae:	56                   	push   esi
c00253af:	53                   	push   ebx
c00253b0:	83 ec 28             	sub    esp,0x28
c00253b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00253b7:	6a 0c                	push   0xc
c00253b9:	6a 00                	push   0x0
c00253bb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00253bf:	56                   	push   esi
c00253c0:	e8 b3 b3 fd ff       	call   c0000778 <memset>
c00253c5:	83 c4 0c             	add    esp,0xc
c00253c8:	6a 00                	push   0x0
c00253ca:	6a 00                	push   0x0
c00253cc:	6a 00                	push   0x0
c00253ce:	6a 00                	push   0x0
c00253d0:	6a 00                	push   0x0
c00253d2:	56                   	push   esi
c00253d3:	53                   	push   ebx
c00253d4:	e8 89 fd ff ff       	call   c0025162 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253d9:	83 c4 1c             	add    esp,0x1c
c00253dc:	6a 0c                	push   0xc
c00253de:	6a 00                	push   0x0
c00253e0:	56                   	push   esi
c00253e1:	e8 92 b3 fd ff       	call   c0000778 <memset>
c00253e6:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253eb:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253f0:	83 c4 0c             	add    esp,0xc
c00253f3:	6a 01                	push   0x1
c00253f5:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253f9:	50                   	push   eax
c00253fa:	6a 00                	push   0x0
c00253fc:	6a 00                	push   0x0
c00253fe:	6a 12                	push   0x12
c0025400:	56                   	push   esi
c0025401:	53                   	push   ebx
c0025402:	e8 5b fd ff ff       	call   c0025162 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025407:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002540b:	83 c4 20             	add    esp,0x20
c002540e:	83 e0 7f             	and    eax,0x7f
c0025411:	3c 70                	cmp    al,0x70
c0025413:	74 15                	je     c002542a <SATAPI::detectMedia()+0x7c>
c0025415:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002541c:	75 0c                	jne    c002542a <SATAPI::detectMedia()+0x7c>
c002541e:	83 ec 0c             	sub    esp,0xc
c0025421:	53                   	push   ebx
c0025422:	e8 0d fd ff ff       	call   c0025134 <SATAPI::diskInserted()>
c0025427:	83 c4 10             	add    esp,0x10
c002542a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002542e:	83 e0 0f             	and    eax,0xf
c0025431:	3c 02                	cmp    al,0x2
c0025433:	75 1b                	jne    c0025450 <SATAPI::detectMedia()+0xa2>
c0025435:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002543a:	75 2d                	jne    c0025469 <SATAPI::detectMedia()+0xbb>
c002543c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025443:	74 24                	je     c0025469 <SATAPI::detectMedia()+0xbb>
c0025445:	83 ec 0c             	sub    esp,0xc
c0025448:	53                   	push   ebx
c0025449:	e8 ca fc ff ff       	call   c0025118 <SATAPI::diskRemoved()>
c002544e:	eb 16                	jmp    c0025466 <SATAPI::detectMedia()+0xb8>
c0025450:	84 c0                	test   al,al
c0025452:	75 15                	jne    c0025469 <SATAPI::detectMedia()+0xbb>
c0025454:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002545b:	75 0c                	jne    c0025469 <SATAPI::detectMedia()+0xbb>
c002545d:	83 ec 0c             	sub    esp,0xc
c0025460:	53                   	push   ebx
c0025461:	e8 ce fc ff ff       	call   c0025134 <SATAPI::diskInserted()>
c0025466:	83 c4 10             	add    esp,0x10
c0025469:	83 c4 24             	add    esp,0x24
c002546c:	5b                   	pop    ebx
c002546d:	5e                   	pop    esi
c002546e:	c3                   	ret    
c002546f:	90                   	nop

c0025470 <SATAPI::open(int, int, void*)>:
c0025470:	56                   	push   esi
c0025471:	53                   	push   ebx
c0025472:	50                   	push   eax
c0025473:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002547b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025485:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002548b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025495:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025499:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00254a3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00254a9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00254b0:	e8 30 aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c00254b5:	89 c6                	mov    esi,eax
c00254b7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00254bd:	81 c6 00 10 00 00    	add    esi,0x1000
c00254c3:	e8 1d aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c00254c8:	39 c6                	cmp    esi,eax
c00254ca:	74 10                	je     c00254dc <SATAPI::open(int, int, void*)+0x6c>
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	68 73 d0 02 c0       	push   0xc002d073
c00254d4:	e8 f4 51 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	83 ec 0c             	sub    esp,0xc
c00254df:	6a 02                	push   0x2
c00254e1:	e8 bf c6 fe ff       	call   c0011ba5 <Virt::allocateKernelVirtualPages(int)>
c00254e6:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254ec:	e8 4f c9 fe ff       	call   c0011e40 <Virt::getAKernelVAS()>
c00254f1:	6a 03                	push   0x3
c00254f3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254f9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254ff:	50                   	push   eax
c0025500:	e8 77 ce fe ff       	call   c001237c <VAS::mapPage(unsigned long, unsigned long, int)>
c0025505:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002550c:	83 c4 14             	add    esp,0x14
c002550f:	53                   	push   ebx
c0025510:	e8 99 fe ff ff       	call   c00253ae <SATAPI::detectMedia()>
c0025515:	83 c4 14             	add    esp,0x14
c0025518:	31 c0                	xor    eax,eax
c002551a:	5b                   	pop    ebx
c002551b:	5e                   	pop    esi
c002551c:	c3                   	ret    
c002551d:	90                   	nop

c002551e <SATAPI::read(unsigned long long, int, void*)>:
c002551e:	55                   	push   ebp
c002551f:	57                   	push   edi
c0025520:	56                   	push   esi
c0025521:	53                   	push   ebx
c0025522:	83 ec 1c             	sub    esp,0x1c
c0025525:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025529:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002552d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025531:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025538:	74 19                	je     c0025553 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002553a:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002553f:	7e 2e                	jle    c002556f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025541:	83 ec 0c             	sub    esp,0xc
c0025544:	68 89 d0 02 c0       	push   0xc002d089
c0025549:	e8 7f 51 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c002554e:	83 c4 10             	add    esp,0x10
c0025551:	eb 1c                	jmp    c002556f <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025553:	83 ec 0c             	sub    esp,0xc
c0025556:	55                   	push   ebp
c0025557:	e8 52 fe ff ff       	call   c00253ae <SATAPI::detectMedia()>
c002555c:	83 c4 10             	add    esp,0x10
c002555f:	b8 02 00 00 00       	mov    eax,0x2
c0025564:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002556b:	75 cd                	jne    c002553a <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002556d:	eb 49                	jmp    c00255b8 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c002556f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025573:	b9 03 00 00 00       	mov    ecx,0x3
c0025578:	fc                   	cld    
c0025579:	31 c0                	xor    eax,eax
c002557b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002557d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025582:	89 d8                	mov    eax,ebx
c0025584:	86 e0                	xchg   al,ah
c0025586:	c1 c0 10             	rol    eax,0x10
c0025589:	86 e0                	xchg   al,ah
c002558b:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c002558f:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025593:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025597:	50                   	push   eax
c0025598:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002559c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00255a0:	56                   	push   esi
c00255a1:	53                   	push   ebx
c00255a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00255a6:	c1 e0 0b             	shl    eax,0xb
c00255a9:	50                   	push   eax
c00255aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255ae:	50                   	push   eax
c00255af:	55                   	push   ebp
c00255b0:	e8 ad fb ff ff       	call   c0025162 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00255b5:	83 c4 20             	add    esp,0x20
c00255b8:	83 c4 1c             	add    esp,0x1c
c00255bb:	5b                   	pop    ebx
c00255bc:	5e                   	pop    esi
c00255bd:	5f                   	pop    edi
c00255be:	5d                   	pop    ebp
c00255bf:	c3                   	ret    

c00255c0 <AVX::open(int, int, void*)>:
c00255c0:	83 ec 0c             	sub    esp,0xc
c00255c3:	e8 40 11 00 00       	call   c0026708 <avxInit>
c00255c8:	b8 00 00 00 00       	mov    eax,0x0
c00255cd:	83 c4 0c             	add    esp,0xc
c00255d0:	c3                   	ret    
c00255d1:	90                   	nop

c00255d2 <AVX::close(int, int, void*)>:
c00255d2:	83 ec 0c             	sub    esp,0xc
c00255d5:	e8 2f 11 00 00       	call   c0026709 <avxClose>
c00255da:	b8 00 00 00 00       	mov    eax,0x0
c00255df:	83 c4 0c             	add    esp,0xc
c00255e2:	c3                   	ret    
c00255e3:	90                   	nop

c00255e4 <AVX::available()>:
c00255e4:	83 ec 0c             	sub    esp,0xc
c00255e7:	e8 14 11 00 00       	call   c0026700 <avxDetect>
c00255ec:	85 c0                	test   eax,eax
c00255ee:	0f 95 c0             	setne  al
c00255f1:	83 c4 0c             	add    esp,0xc
c00255f4:	c3                   	ret    
c00255f5:	90                   	nop

c00255f6 <AVX::save(void*)>:
c00255f6:	83 ec 0c             	sub    esp,0xc
c00255f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255fd:	83 ec 0c             	sub    esp,0xc
c0025600:	50                   	push   eax
c0025601:	e8 00 11 00 00       	call   c0026706 <avxSave>
c0025606:	83 c4 10             	add    esp,0x10
c0025609:	90                   	nop
c002560a:	83 c4 0c             	add    esp,0xc
c002560d:	c3                   	ret    

c002560e <AVX::load(void*)>:
c002560e:	83 ec 0c             	sub    esp,0xc
c0025611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025615:	83 ec 0c             	sub    esp,0xc
c0025618:	50                   	push   eax
c0025619:	e8 e9 10 00 00       	call   c0026707 <avxLoad>
c002561e:	83 c4 10             	add    esp,0x10
c0025621:	90                   	nop
c0025622:	83 c4 0c             	add    esp,0xc
c0025625:	c3                   	ret    

c0025626 <AVX::AVX()>:
c0025626:	83 ec 0c             	sub    esp,0xc
c0025629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002562d:	83 ec 08             	sub    esp,0x8
c0025630:	68 ec d0 02 c0       	push   0xc002d0ec
c0025635:	50                   	push   eax
c0025636:	e8 0d f3 fe ff       	call   c0014948 <FPU::FPU(char const*)>
c002563b:	83 c4 10             	add    esp,0x10
c002563e:	ba fc d0 02 c0       	mov    edx,0xc002d0fc
c0025643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025647:	89 10                	mov    DWORD PTR [eax],edx
c0025649:	90                   	nop
c002564a:	83 c4 0c             	add    esp,0xc
c002564d:	c3                   	ret    

c002564e <MMX::available()>:
c002564e:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0025653:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025659:	83 e0 20             	and    eax,0x20
c002565c:	84 c0                	test   al,al
c002565e:	0f 95 c0             	setne  al
c0025661:	c3                   	ret    

c0025662 <MMX::open(int, int, void*)>:
c0025662:	83 ec 0c             	sub    esp,0xc
c0025665:	e8 22 11 00 00       	call   c002678c <x87Init>
c002566a:	b8 00 00 00 00       	mov    eax,0x0
c002566f:	83 c4 0c             	add    esp,0xc
c0025672:	c3                   	ret    
c0025673:	90                   	nop

c0025674 <MMX::close(int, int, void*)>:
c0025674:	83 ec 0c             	sub    esp,0xc
c0025677:	e8 2a 11 00 00       	call   c00267a6 <x87Close>
c002567c:	b8 00 00 00 00       	mov    eax,0x0
c0025681:	83 c4 0c             	add    esp,0xc
c0025684:	c3                   	ret    
c0025685:	90                   	nop

c0025686 <MMX::save(void*)>:
c0025686:	83 ec 0c             	sub    esp,0xc
c0025689:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002568d:	83 ec 0c             	sub    esp,0xc
c0025690:	50                   	push   eax
c0025691:	e8 eb 10 00 00       	call   c0026781 <x87Save>
c0025696:	83 c4 10             	add    esp,0x10
c0025699:	90                   	nop
c002569a:	83 c4 0c             	add    esp,0xc
c002569d:	c3                   	ret    

c002569e <MMX::load(void*)>:
c002569e:	83 ec 0c             	sub    esp,0xc
c00256a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256a5:	83 ec 0c             	sub    esp,0xc
c00256a8:	50                   	push   eax
c00256a9:	e8 d9 10 00 00       	call   c0026787 <x87Load>
c00256ae:	83 c4 10             	add    esp,0x10
c00256b1:	90                   	nop
c00256b2:	83 c4 0c             	add    esp,0xc
c00256b5:	c3                   	ret    

c00256b6 <MMX::MMX()>:
c00256b6:	83 ec 0c             	sub    esp,0xc
c00256b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256bd:	83 ec 08             	sub    esp,0x8
c00256c0:	68 2c d1 02 c0       	push   0xc002d12c
c00256c5:	50                   	push   eax
c00256c6:	e8 7d f2 fe ff       	call   c0014948 <FPU::FPU(char const*)>
c00256cb:	83 c4 10             	add    esp,0x10
c00256ce:	ba 3c d1 02 c0       	mov    edx,0xc002d13c
c00256d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256d7:	89 10                	mov    DWORD PTR [eax],edx
c00256d9:	90                   	nop
c00256da:	83 c4 0c             	add    esp,0xc
c00256dd:	c3                   	ret    

c00256de <SSE::open(int, int, void*)>:
c00256de:	83 ec 0c             	sub    esp,0xc
c00256e1:	e8 5e 10 00 00       	call   c0026744 <sseInit>
c00256e6:	b8 00 00 00 00       	mov    eax,0x0
c00256eb:	83 c4 0c             	add    esp,0xc
c00256ee:	c3                   	ret    
c00256ef:	90                   	nop

c00256f0 <SSE::close(int, int, void*)>:
c00256f0:	83 ec 0c             	sub    esp,0xc
c00256f3:	e8 5c 10 00 00       	call   c0026754 <sseClose>
c00256f8:	b8 00 00 00 00       	mov    eax,0x0
c00256fd:	83 c4 0c             	add    esp,0xc
c0025700:	c3                   	ret    
c0025701:	90                   	nop

c0025702 <SSE::available()>:
c0025702:	83 ec 1c             	sub    esp,0x1c
c0025705:	e8 16 10 00 00       	call   c0026720 <absolutelyNoChanceInHell>
c002570a:	85 c0                	test   eax,eax
c002570c:	0f 95 c0             	setne  al
c002570f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025713:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025717:	83 c4 1c             	add    esp,0x1c
c002571a:	c3                   	ret    
c002571b:	90                   	nop

c002571c <SSE::save(void*)>:
c002571c:	83 ec 0c             	sub    esp,0xc
c002571f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025723:	83 ec 0c             	sub    esp,0xc
c0025726:	50                   	push   eax
c0025727:	e8 0c 10 00 00       	call   c0026738 <sseSave>
c002572c:	83 c4 10             	add    esp,0x10
c002572f:	90                   	nop
c0025730:	83 c4 0c             	add    esp,0xc
c0025733:	c3                   	ret    

c0025734 <SSE::load(void*)>:
c0025734:	83 ec 0c             	sub    esp,0xc
c0025737:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002573b:	83 ec 0c             	sub    esp,0xc
c002573e:	50                   	push   eax
c002573f:	e8 fa 0f 00 00       	call   c002673e <sseLoad>
c0025744:	83 c4 10             	add    esp,0x10
c0025747:	90                   	nop
c0025748:	83 c4 0c             	add    esp,0xc
c002574b:	c3                   	ret    

c002574c <SSE::SSE()>:
c002574c:	83 ec 0c             	sub    esp,0xc
c002574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025753:	83 ec 08             	sub    esp,0x8
c0025756:	68 6c d1 02 c0       	push   0xc002d16c
c002575b:	50                   	push   eax
c002575c:	e8 e7 f1 fe ff       	call   c0014948 <FPU::FPU(char const*)>
c0025761:	83 c4 10             	add    esp,0x10
c0025764:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c0025769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002576d:	89 10                	mov    DWORD PTR [eax],edx
c002576f:	90                   	nop
c0025770:	83 c4 0c             	add    esp,0xc
c0025773:	c3                   	ret    

c0025774 <x87::open(int, int, void*)>:
c0025774:	83 ec 0c             	sub    esp,0xc
c0025777:	e8 10 10 00 00       	call   c002678c <x87Init>
c002577c:	b8 00 00 00 00       	mov    eax,0x0
c0025781:	83 c4 0c             	add    esp,0xc
c0025784:	c3                   	ret    
c0025785:	90                   	nop

c0025786 <x87::close(int, int, void*)>:
c0025786:	83 ec 0c             	sub    esp,0xc
c0025789:	e8 18 10 00 00       	call   c00267a6 <x87Close>
c002578e:	b8 00 00 00 00       	mov    eax,0x0
c0025793:	83 c4 0c             	add    esp,0xc
c0025796:	c3                   	ret    
c0025797:	90                   	nop

c0025798 <x87::available()>:
c0025798:	83 ec 0c             	sub    esp,0xc
c002579b:	e8 c6 0f 00 00       	call   c0026766 <x87Detect>
c00257a0:	85 c0                	test   eax,eax
c00257a2:	0f 95 c0             	setne  al
c00257a5:	83 c4 0c             	add    esp,0xc
c00257a8:	c3                   	ret    
c00257a9:	90                   	nop

c00257aa <x87::save(void*)>:
c00257aa:	83 ec 0c             	sub    esp,0xc
c00257ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257b1:	83 ec 0c             	sub    esp,0xc
c00257b4:	50                   	push   eax
c00257b5:	e8 c7 0f 00 00       	call   c0026781 <x87Save>
c00257ba:	83 c4 10             	add    esp,0x10
c00257bd:	90                   	nop
c00257be:	83 c4 0c             	add    esp,0xc
c00257c1:	c3                   	ret    

c00257c2 <x87::load(void*)>:
c00257c2:	83 ec 0c             	sub    esp,0xc
c00257c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00257c9:	83 ec 0c             	sub    esp,0xc
c00257cc:	50                   	push   eax
c00257cd:	e8 b5 0f 00 00       	call   c0026787 <x87Load>
c00257d2:	83 c4 10             	add    esp,0x10
c00257d5:	90                   	nop
c00257d6:	83 c4 0c             	add    esp,0xc
c00257d9:	c3                   	ret    

c00257da <x87::x87()>:
c00257da:	83 ec 0c             	sub    esp,0xc
c00257dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e1:	83 ec 08             	sub    esp,0x8
c00257e4:	68 ac d1 02 c0       	push   0xc002d1ac
c00257e9:	50                   	push   eax
c00257ea:	e8 59 f1 fe ff       	call   c0014948 <FPU::FPU(char const*)>
c00257ef:	83 c4 10             	add    esp,0x10
c00257f2:	ba bc d1 02 c0       	mov    edx,0xc002d1bc
c00257f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257fb:	89 10                	mov    DWORD PTR [eax],edx
c00257fd:	90                   	nop
c00257fe:	83 c4 0c             	add    esp,0xc
c0025801:	c3                   	ret    

c0025802 <APIC::disable()>:
c0025802:	90                   	nop
c0025803:	c3                   	ret    

c0025804 <APIC::close(int, int, void*)>:
c0025804:	55                   	push   ebp
c0025805:	89 e5                	mov    ebp,esp
c0025807:	83 ec 08             	sub    esp,0x8
c002580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002580d:	8b 00                	mov    eax,DWORD PTR [eax]
c002580f:	83 c0 3c             	add    eax,0x3c
c0025812:	8b 00                	mov    eax,DWORD PTR [eax]
c0025814:	83 ec 0c             	sub    esp,0xc
c0025817:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002581a:	ff d0                	call   eax
c002581c:	83 c4 10             	add    esp,0x10
c002581f:	b8 00 00 00 00       	mov    eax,0x0
c0025824:	c9                   	leave  
c0025825:	c3                   	ret    

c0025826 <IOAPIC::close(int, int, void*)>:
c0025826:	b8 00 00 00 00       	mov    eax,0x0
c002582b:	c3                   	ret    

c002582c <APIC::io_wait()>:
c002582c:	eb 00                	jmp    c002582e <APIC::io_wait()+0x2>
c002582e:	eb 00                	jmp    c0025830 <APIC::io_wait()+0x4>
c0025830:	90                   	nop
c0025831:	c3                   	ret    

c0025832 <APIC::getBase()>:
c0025832:	55                   	push   ebp
c0025833:	89 e5                	mov    ebp,esp
c0025835:	83 ec 18             	sub    esp,0x18
c0025838:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c002583d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025843:	83 e0 08             	and    eax,0x8
c0025846:	84 c0                	test   al,al
c0025848:	75 07                	jne    c0025851 <APIC::getBase()+0x1f>
c002584a:	b8 00 00 00 00       	mov    eax,0x0
c002584f:	eb 21                	jmp    c0025872 <APIC::getBase()+0x40>
c0025851:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0025856:	83 ec 08             	sub    esp,0x8
c0025859:	6a 1b                	push   0x1b
c002585b:	50                   	push   eax
c002585c:	e8 87 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025861:	83 c4 10             	add    esp,0x10
c0025864:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025867:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002586a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002586d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025872:	c9                   	leave  
c0025873:	c3                   	ret    

c0025874 <APIC::eoi(unsigned char)>:
c0025874:	55                   	push   ebp
c0025875:	89 e5                	mov    ebp,esp
c0025877:	83 ec 28             	sub    esp,0x28
c002587a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002587d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025880:	83 ec 0c             	sub    esp,0xc
c0025883:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025886:	e8 a7 ff ff ff       	call   c0025832 <APIC::getBase()>
c002588b:	83 c4 10             	add    esp,0x10
c002588e:	05 b0 00 00 00       	add    eax,0xb0
c0025893:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025896:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025899:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002589f:	90                   	nop
c00258a0:	c9                   	leave  
c00258a1:	c3                   	ret    

c00258a2 <APIC::open(int, int, void*)>:
c00258a2:	55                   	push   ebp
c00258a3:	89 e5                	mov    ebp,esp
c00258a5:	57                   	push   edi
c00258a6:	56                   	push   esi
c00258a7:	53                   	push   ebx
c00258a8:	83 ec 2c             	sub    esp,0x2c
c00258ab:	83 ec 0c             	sub    esp,0xc
c00258ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258b1:	e8 7c ff ff ff       	call   c0025832 <APIC::getBase()>
c00258b6:	83 c4 10             	add    esp,0x10
c00258b9:	89 c2                	mov    edx,eax
c00258bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258be:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258c4:	0f b6 f8             	movzx  edi,al
c00258c7:	89 d0                	mov    eax,edx
c00258c9:	ba 00 00 00 00       	mov    edx,0x0
c00258ce:	89 c1                	mov    ecx,eax
c00258d0:	80 e5 ff             	and    ch,0xff
c00258d3:	89 cb                	mov    ebx,ecx
c00258d5:	0f b6 f2             	movzx  esi,dl
c00258d8:	89 d8                	mov    eax,ebx
c00258da:	89 f2                	mov    edx,esi
c00258dc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258df:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258e2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258e6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258ea:	83 e0 00             	and    eax,0x0
c00258ed:	09 d0                	or     eax,edx
c00258ef:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258f6:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258fc:	8d 50 01             	lea    edx,[eax+0x1]
c00258ff:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025902:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025908:	0f b6 d0             	movzx  edx,al
c002590b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002590e:	83 c2 08             	add    edx,0x8
c0025911:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025915:	0f b6 c9             	movzx  ecx,cl
c0025918:	81 c9 00 00 01 00    	or     ecx,0x10000
c002591e:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025922:	83 ec 0c             	sub    esp,0xc
c0025925:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025928:	e8 05 ff ff ff       	call   c0025832 <APIC::getBase()>
c002592d:	83 c4 10             	add    esp,0x10
c0025930:	05 f0 00 00 00       	add    eax,0xf0
c0025935:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025938:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002593b:	8b 00                	mov    eax,DWORD PTR [eax]
c002593d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025940:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025947:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002594e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025951:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025954:	89 10                	mov    DWORD PTR [eax],edx
c0025956:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002595d:	a1 10 0e 03 c0       	mov    eax,ds:0xc0030e10
c0025962:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025965:	7d 7c                	jge    c00259e3 <APIC::open(int, int, void*)+0x141>
c0025967:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002596a:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025971:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025974:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025977:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c002597e:	c1 e8 08             	shr    eax,0x8
c0025981:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025985:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025988:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c002598f:	c1 e8 18             	shr    eax,0x18
c0025992:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025995:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0025999:	75 40                	jne    c00259db <APIC::open(int, int, void*)+0x139>
c002599b:	83 ec 0c             	sub    esp,0xc
c002599e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259a1:	e8 8c fe ff ff       	call   c0025832 <APIC::getBase()>
c00259a6:	83 c4 10             	add    esp,0x10
c00259a9:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00259ad:	75 07                	jne    c00259b6 <APIC::open(int, int, void*)+0x114>
c00259af:	ba 60 03 00 00       	mov    edx,0x360
c00259b4:	eb 05                	jmp    c00259bb <APIC::open(int, int, void*)+0x119>
c00259b6:	ba 50 03 00 00       	mov    edx,0x350
c00259bb:	01 d0                	add    eax,edx
c00259bd:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00259c0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00259c5:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00259c8:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259cf:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259d3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259d6:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259d9:	89 10                	mov    DWORD PTR [eax],edx
c00259db:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259de:	e9 7a ff ff ff       	jmp    c002595d <APIC::open(int, int, void*)+0xbb>
c00259e3:	b8 00 00 00 00       	mov    eax,0x0
c00259e8:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259eb:	5b                   	pop    ebx
c00259ec:	5e                   	pop    esi
c00259ed:	5f                   	pop    edi
c00259ee:	5d                   	pop    ebp
c00259ef:	c3                   	ret    

c00259f0 <IOAPIC::IOAPIC()>:
c00259f0:	83 ec 0c             	sub    esp,0xc
c00259f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259f7:	83 ec 08             	sub    esp,0x8
c00259fa:	68 ec d1 02 c0       	push   0xc002d1ec
c00259ff:	50                   	push   eax
c0025a00:	e8 31 ec fe ff       	call   c0014636 <Device::Device(char const*)>
c0025a05:	83 c4 10             	add    esp,0x10
c0025a08:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c0025a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a11:	89 10                	mov    DWORD PTR [eax],edx
c0025a13:	90                   	nop
c0025a14:	83 c4 0c             	add    esp,0xc
c0025a17:	c3                   	ret    

c0025a18 <APIC::APIC()>:
c0025a18:	53                   	push   ebx
c0025a19:	83 ec 18             	sub    esp,0x18
c0025a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a20:	83 ec 08             	sub    esp,0x8
c0025a23:	68 f4 d1 02 c0       	push   0xc002d1f4
c0025a28:	50                   	push   eax
c0025a29:	e8 74 f3 fe ff       	call   c0014da2 <InterruptController::InterruptController(char const*)>
c0025a2e:	83 c4 10             	add    esp,0x10
c0025a31:	ba cc d2 02 c0       	mov    edx,0xc002d2cc
c0025a36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a3a:	89 10                	mov    DWORD PTR [eax],edx
c0025a3c:	a0 e0 28 03 c0       	mov    al,ds:0xc00328e0
c0025a41:	83 f0 01             	xor    eax,0x1
c0025a44:	84 c0                	test   al,al
c0025a46:	0f 84 a1 00 00 00    	je     c0025aed <APIC::APIC()+0xd5>
c0025a4c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a51:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0025a56:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a5a:	0f 83 86 00 00 00    	jae    c0025ae6 <APIC::APIC()+0xce>
c0025a60:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a68:	83 ec 0c             	sub    esp,0xc
c0025a6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a6f:	e8 cf 9d fe ff       	call   c000f843 <malloc>
c0025a74:	83 c4 10             	add    esp,0x10
c0025a77:	89 c3                	mov    ebx,eax
c0025a79:	83 ec 0c             	sub    esp,0xc
c0025a7c:	53                   	push   ebx
c0025a7d:	e8 6e ff ff ff       	call   c00259f0 <IOAPIC::IOAPIC()>
c0025a82:	83 c4 10             	add    esp,0x10
c0025a85:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a89:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a92:	89 14 85 c0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd740],edx
c0025a99:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025a9e:	40                   	inc    eax
c0025a9f:	a3 a0 28 03 c0       	mov    ds:0xc00328a0,eax
c0025aa4:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c0025aa9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025aaf:	83 ec 08             	sub    esp,0x8
c0025ab2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025ab6:	50                   	push   eax
c0025ab7:	e8 8a e9 fe ff       	call   c0014446 <Device::addChild(Device*)>
c0025abc:	83 c4 10             	add    esp,0x10
c0025abf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ac5:	83 c0 08             	add    eax,0x8
c0025ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aca:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025acf:	6a 00                	push   0x0
c0025ad1:	6a 00                	push   0x0
c0025ad3:	52                   	push   edx
c0025ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025ad8:	ff d0                	call   eax
c0025ada:	83 c4 10             	add    esp,0x10
c0025add:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ae1:	e9 6b ff ff ff       	jmp    c0025a51 <APIC::APIC()+0x39>
c0025ae6:	c6 05 e0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328e0,0x1
c0025aed:	90                   	nop
c0025aee:	83 c4 18             	add    esp,0x18
c0025af1:	5b                   	pop    ebx
c0025af2:	c3                   	ret    
c0025af3:	90                   	nop

c0025af4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025af4:	55                   	push   ebp
c0025af5:	89 e5                	mov    ebp,esp
c0025af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025afa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025b00:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b03:	72 1d                	jb     c0025b22 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b08:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b11:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025b17:	01 d0                	add    eax,edx
c0025b19:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025b1c:	73 04                	jae    c0025b22 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025b1e:	b0 01                	mov    al,0x1
c0025b20:	eb 02                	jmp    c0025b24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025b22:	b0 00                	mov    al,0x0
c0025b24:	5d                   	pop    ebp
c0025b25:	c3                   	ret    

c0025b26 <IOAPIC::read(int)>:
c0025b26:	55                   	push   ebp
c0025b27:	89 e5                	mov    ebp,esp
c0025b29:	83 ec 10             	sub    esp,0x10
c0025b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b2f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b35:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b3b:	0f b6 d0             	movzx  edx,al
c0025b3e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b41:	89 10                	mov    DWORD PTR [eax],edx
c0025b43:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b46:	83 c0 10             	add    eax,0x10
c0025b49:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b4b:	c9                   	leave  
c0025b4c:	c3                   	ret    
c0025b4d:	90                   	nop

c0025b4e <IOAPIC::open(int, int, void*)>:
c0025b4e:	55                   	push   ebp
c0025b4f:	89 e5                	mov    ebp,esp
c0025b51:	57                   	push   edi
c0025b52:	56                   	push   esi
c0025b53:	53                   	push   ebx
c0025b54:	83 ec 0c             	sub    esp,0xc
c0025b57:	83 ec 0c             	sub    esp,0xc
c0025b5a:	68 1f d2 02 c0       	push   0xc002d21f
c0025b5f:	e8 bb d4 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0025b64:	83 c4 10             	add    esp,0x10
c0025b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b6a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b6d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b7c:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c0025b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b86:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b8f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b95:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c0025b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b9f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bb1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bb7:	0f b6 f8             	movzx  edi,al
c0025bba:	89 d0                	mov    eax,edx
c0025bbc:	ba 00 00 00 00       	mov    edx,0x0
c0025bc1:	89 c1                	mov    ecx,eax
c0025bc3:	80 e5 ff             	and    ch,0xff
c0025bc6:	89 cb                	mov    ebx,ecx
c0025bc8:	0f b6 f2             	movzx  esi,dl
c0025bcb:	89 d8                	mov    eax,ebx
c0025bcd:	89 f2                	mov    edx,esi
c0025bcf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bd2:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025bd5:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bd9:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025bdd:	83 e0 00             	and    eax,0x0
c0025be0:	09 d0                	or     eax,edx
c0025be2:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025be9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bef:	8d 50 01             	lea    edx,[eax+0x1]
c0025bf2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bf5:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bfb:	0f b6 d0             	movzx  edx,al
c0025bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c01:	83 c2 08             	add    edx,0x8
c0025c04:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025c08:	0f b6 c9             	movzx  ecx,cl
c0025c0b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025c11:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025c15:	83 ec 08             	sub    esp,0x8
c0025c18:	6a 01                	push   0x1
c0025c1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c1d:	e8 04 ff ff ff       	call   c0025b26 <IOAPIC::read(int)>
c0025c22:	83 c4 10             	add    esp,0x10
c0025c25:	c1 f8 10             	sar    eax,0x10
c0025c28:	0f b6 c0             	movzx  eax,al
c0025c2b:	8d 50 01             	lea    edx,[eax+0x1]
c0025c2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c31:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c37:	b8 00 00 00 00       	mov    eax,0x0
c0025c3c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c3f:	5b                   	pop    ebx
c0025c40:	5e                   	pop    esi
c0025c41:	5f                   	pop    edi
c0025c42:	5d                   	pop    ebp
c0025c43:	c3                   	ret    

c0025c44 <IOAPIC::write(int, int)>:
c0025c44:	55                   	push   ebp
c0025c45:	89 e5                	mov    ebp,esp
c0025c47:	83 ec 10             	sub    esp,0x10
c0025c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c4d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c53:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c59:	0f b6 d0             	movzx  edx,al
c0025c5c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c5f:	89 10                	mov    DWORD PTR [eax],edx
c0025c61:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c64:	8d 50 10             	lea    edx,[eax+0x10]
c0025c67:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c6a:	89 02                	mov    DWORD PTR [edx],eax
c0025c6c:	90                   	nop
c0025c6d:	c9                   	leave  
c0025c6e:	c3                   	ret    
c0025c6f:	90                   	nop

c0025c70 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c70:	55                   	push   ebp
c0025c71:	89 e5                	mov    ebp,esp
c0025c73:	53                   	push   ebx
c0025c74:	83 ec 2c             	sub    esp,0x2c
c0025c77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c7a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c7d:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c80:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c83:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c86:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c89:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c8c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c8f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c92:	88 d8                	mov    al,bl
c0025c94:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c97:	88 c8                	mov    al,cl
c0025c99:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c9c:	88 d0                	mov    al,dl
c0025c9e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025ca1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025ca5:	83 c0 08             	add    eax,0x8
c0025ca8:	01 c0                	add    eax,eax
c0025caa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025cad:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025cb1:	83 c0 08             	add    eax,0x8
c0025cb4:	01 c0                	add    eax,eax
c0025cb6:	40                   	inc    eax
c0025cb7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025cba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cbd:	50                   	push   eax
c0025cbe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cc1:	e8 60 fe ff ff       	call   c0025b26 <IOAPIC::read(int)>
c0025cc6:	83 c4 08             	add    esp,0x8
c0025cc9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025ccc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025cd3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025cd6:	c1 e0 18             	shl    eax,0x18
c0025cd9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cdc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cdf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025ce2:	52                   	push   edx
c0025ce3:	50                   	push   eax
c0025ce4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ce7:	e8 58 ff ff ff       	call   c0025c44 <IOAPIC::write(int, int)>
c0025cec:	83 c4 0c             	add    esp,0xc
c0025cef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cf2:	50                   	push   eax
c0025cf3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cf6:	e8 2b fe ff ff       	call   c0025b26 <IOAPIC::read(int)>
c0025cfb:	83 c4 08             	add    esp,0x8
c0025cfe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025d01:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025d08:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025d0f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025d16:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d1a:	74 09                	je     c0025d25 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025d1c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025d23:	eb 07                	jmp    c0025d2c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025d25:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025d2c:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d30:	74 09                	je     c0025d3b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d32:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d39:	eb 07                	jmp    c0025d42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d3b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d42:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d49:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d4d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d50:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d56:	52                   	push   edx
c0025d57:	50                   	push   eax
c0025d58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d5b:	e8 e4 fe ff ff       	call   c0025c44 <IOAPIC::write(int, int)>
c0025d60:	83 c4 0c             	add    esp,0xc
c0025d63:	90                   	nop
c0025d64:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d67:	c9                   	leave  
c0025d68:	c3                   	ret    
c0025d69:	90                   	nop

c0025d6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d6a:	55                   	push   ebp
c0025d6b:	89 e5                	mov    ebp,esp
c0025d6d:	57                   	push   edi
c0025d6e:	56                   	push   esi
c0025d6f:	53                   	push   ebx
c0025d70:	83 ec 2c             	sub    esp,0x2c
c0025d73:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d76:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d79:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d7d:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d81:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d85:	74 5a                	je     c0025de1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d87:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d8b:	7f 44                	jg     c0025dd1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d90:	05 60 d7 02 c0       	add    eax,0xc002d760
c0025d95:	8a 00                	mov    al,BYTE PTR [eax]
c0025d97:	0f b6 c0             	movzx  eax,al
c0025d9a:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025da0:	66 8b 84 00 a0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf160]
c0025da8:	0f b7 c0             	movzx  eax,ax
c0025dab:	83 e0 02             	and    eax,0x2
c0025dae:	85 c0                	test   eax,eax
c0025db0:	74 04                	je     c0025db6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025db2:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025db6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025db9:	66 8b 84 00 a0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf160]
c0025dc1:	0f b7 c0             	movzx  eax,ax
c0025dc4:	83 e0 08             	and    eax,0x8
c0025dc7:	85 c0                	test   eax,eax
c0025dc9:	74 16                	je     c0025de1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025dcb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025dcf:	eb 10                	jmp    c0025de1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025dd1:	83 ec 0c             	sub    esp,0xc
c0025dd4:	68 30 d2 02 c0       	push   0xc002d230
c0025dd9:	e8 ef 48 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0025dde:	83 c4 10             	add    esp,0x10
c0025de1:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025de5:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025dea:	83 ec 08             	sub    esp,0x8
c0025ded:	50                   	push   eax
c0025dee:	68 68 d2 02 c0       	push   0xc002d268
c0025df3:	e8 27 d2 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0025df8:	83 c4 10             	add    esp,0x10
c0025dfb:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025e02:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025e07:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025e0a:	7d 67                	jge    c0025e73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e0f:	8b 04 85 c0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd740]
c0025e16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e19:	83 ec 08             	sub    esp,0x8
c0025e1c:	52                   	push   edx
c0025e1d:	50                   	push   eax
c0025e1e:	e8 d1 fc ff ff       	call   c0025af4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025e23:	83 c4 10             	add    esp,0x10
c0025e26:	84 c0                	test   al,al
c0025e28:	74 44                	je     c0025e6e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025e2a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025e2d:	8b 1c 85 c0 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd740]
c0025e34:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e3b:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e42:	83 c0 20             	add    eax,0x20
c0025e45:	0f b6 f0             	movzx  esi,al
c0025e48:	b8 00 00 00 00       	mov    eax,0x0
c0025e4d:	99                   	cdq    
c0025e4e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e51:	0f b6 c9             	movzx  ecx,cl
c0025e54:	83 ec 04             	sub    esp,0x4
c0025e57:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e5a:	57                   	push   edi
c0025e5b:	56                   	push   esi
c0025e5c:	52                   	push   edx
c0025e5d:	50                   	push   eax
c0025e5e:	51                   	push   ecx
c0025e5f:	53                   	push   ebx
c0025e60:	e8 0b fe ff ff       	call   c0025c70 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e65:	83 c4 20             	add    esp,0x20
c0025e68:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e6c:	eb 05                	jmp    c0025e73 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e6e:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e71:	eb 8f                	jmp    c0025e02 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e73:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e76:	83 f0 01             	xor    eax,0x1
c0025e79:	84 c0                	test   al,al
c0025e7b:	74 10                	je     c0025e8d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e7d:	83 ec 0c             	sub    esp,0xc
c0025e80:	68 7f d2 02 c0       	push   0xc002d27f
c0025e85:	e8 43 48 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0025e8a:	83 c4 10             	add    esp,0x10
c0025e8d:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e91:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e98:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e9c:	7f 65                	jg     c0025f03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ea1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ea4:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025eab:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eae:	01 ca                	add    edx,ecx
c0025eb0:	83 c2 54             	add    edx,0x54
c0025eb3:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025eb7:	85 c0                	test   eax,eax
c0025eb9:	75 43                	jne    c0025efe <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025ebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ebe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025ec1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ec8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ecb:	01 ca                	add    edx,ecx
c0025ecd:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ed0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ed3:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eda:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025edd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025ee4:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025ee7:	01 ca                	add    edx,ecx
c0025ee9:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025eef:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ef2:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ef6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ef9:	83 e8 20             	sub    eax,0x20
c0025efc:	eb 1a                	jmp    c0025f18 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025efe:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025f01:	eb 95                	jmp    c0025e98 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025f03:	83 ec 0c             	sub    esp,0xc
c0025f06:	68 8c d2 02 c0       	push   0xc002d28c
c0025f0b:	e8 bd 47 ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0025f10:	83 c4 10             	add    esp,0x10
c0025f13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025f18:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025f1b:	5b                   	pop    ebx
c0025f1c:	5e                   	pop    esi
c0025f1d:	5f                   	pop    edi
c0025f1e:	5d                   	pop    ebp
c0025f1f:	c3                   	ret    

c0025f20 <PIC::disable()>:
c0025f20:	55                   	push   ebp
c0025f21:	89 e5                	mov    ebp,esp
c0025f23:	83 ec 10             	sub    esp,0x10
c0025f26:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025f2c:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f30:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f33:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f37:	ee                   	out    dx,al
c0025f38:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f3e:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f42:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f45:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f49:	ee                   	out    dx,al
c0025f4a:	90                   	nop
c0025f4b:	c9                   	leave  
c0025f4c:	c3                   	ret    
c0025f4d:	90                   	nop

c0025f4e <PIC::close(int, int, void*)>:
c0025f4e:	55                   	push   ebp
c0025f4f:	89 e5                	mov    ebp,esp
c0025f51:	83 ec 08             	sub    esp,0x8
c0025f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f57:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f59:	83 c0 3c             	add    eax,0x3c
c0025f5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f5e:	83 ec 0c             	sub    esp,0xc
c0025f61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f64:	ff d0                	call   eax
c0025f66:	83 c4 10             	add    esp,0x10
c0025f69:	b8 00 00 00 00       	mov    eax,0x0
c0025f6e:	c9                   	leave  
c0025f6f:	c3                   	ret    

c0025f70 <PIC::PIC()>:
c0025f70:	83 ec 0c             	sub    esp,0xc
c0025f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f77:	83 ec 08             	sub    esp,0x8
c0025f7a:	68 38 d3 02 c0       	push   0xc002d338
c0025f7f:	50                   	push   eax
c0025f80:	e8 1d ee fe ff       	call   c0014da2 <InterruptController::InterruptController(char const*)>
c0025f85:	83 c4 10             	add    esp,0x10
c0025f88:	ba 64 d3 02 c0       	mov    edx,0xc002d364
c0025f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f91:	89 10                	mov    DWORD PTR [eax],edx
c0025f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f9d:	0f b6 d0             	movzx  edx,al
c0025fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa4:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025faf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fb5:	0f b6 d0             	movzx  edx,al
c0025fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fbc:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fcb:	8d 50 01             	lea    edx,[eax+0x1]
c0025fce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fd2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025fd8:	0f b6 d0             	movzx  edx,al
c0025fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fdf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fe3:	83 e1 3f             	and    ecx,0x3f
c0025fe6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ff4:	0f b6 d0             	movzx  edx,al
c0025ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffb:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026006:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002600c:	0f b6 d0             	movzx  edx,al
c002600f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026013:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002601c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026022:	8d 50 01             	lea    edx,[eax+0x1]
c0026025:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026029:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002602f:	0f b6 d0             	movzx  edx,al
c0026032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026036:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002603a:	83 e1 3f             	and    ecx,0x3f
c002603d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026041:	90                   	nop
c0026042:	83 c4 0c             	add    esp,0xc
c0026045:	c3                   	ret    

c0026046 <PIC::ioWait()>:
c0026046:	eb 00                	jmp    c0026048 <PIC::ioWait()+0x2>
c0026048:	eb 00                	jmp    c002604a <PIC::ioWait()+0x4>
c002604a:	90                   	nop
c002604b:	c3                   	ret    

c002604c <PIC::getIRQReg(int)>:
c002604c:	55                   	push   ebp
c002604d:	89 e5                	mov    ebp,esp
c002604f:	83 ec 10             	sub    esp,0x10
c0026052:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026055:	0f b6 c0             	movzx  eax,al
c0026058:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002605e:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026061:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026064:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026068:	ee                   	out    dx,al
c0026069:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002606c:	0f b6 c0             	movzx  eax,al
c002606f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026075:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026078:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002607b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002607f:	ee                   	out    dx,al
c0026080:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026086:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002608a:	89 c2                	mov    edx,eax
c002608c:	ec                   	in     al,dx
c002608d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026090:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026093:	0f b6 c0             	movzx  eax,al
c0026096:	c1 e0 08             	shl    eax,0x8
c0026099:	89 c1                	mov    ecx,eax
c002609b:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00260a1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00260a5:	89 c2                	mov    edx,eax
c00260a7:	ec                   	in     al,dx
c00260a8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00260ab:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00260ae:	0f b6 c0             	movzx  eax,al
c00260b1:	09 c8                	or     eax,ecx
c00260b3:	c9                   	leave  
c00260b4:	c3                   	ret    
c00260b5:	90                   	nop

c00260b6 <PIC::eoi(unsigned char)>:
c00260b6:	55                   	push   ebp
c00260b7:	89 e5                	mov    ebp,esp
c00260b9:	83 ec 14             	sub    esp,0x14
c00260bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260bf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00260c2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260c6:	75 1e                	jne    c00260e6 <PIC::eoi(unsigned char)+0x30>
c00260c8:	6a 0b                	push   0xb
c00260ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260cd:	e8 7a ff ff ff       	call   c002604c <PIC::getIRQReg(int)>
c00260d2:	83 c4 08             	add    esp,0x8
c00260d5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260d9:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260dd:	25 80 00 00 00       	and    eax,0x80
c00260e2:	85 c0                	test   eax,eax
c00260e4:	74 5f                	je     c0026145 <PIC::eoi(unsigned char)+0x8f>
c00260e6:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260ea:	75 2d                	jne    c0026119 <PIC::eoi(unsigned char)+0x63>
c00260ec:	6a 0b                	push   0xb
c00260ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f1:	e8 56 ff ff ff       	call   c002604c <PIC::getIRQReg(int)>
c00260f6:	83 c4 08             	add    esp,0x8
c00260f9:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026100:	66 85 c0             	test   ax,ax
c0026103:	78 14                	js     c0026119 <PIC::eoi(unsigned char)+0x63>
c0026105:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002610b:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002610f:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026112:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026116:	ee                   	out    dx,al
c0026117:	eb 2d                	jmp    c0026146 <PIC::eoi(unsigned char)+0x90>
c0026119:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002611d:	76 12                	jbe    c0026131 <PIC::eoi(unsigned char)+0x7b>
c002611f:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026125:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026129:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002612c:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026130:	ee                   	out    dx,al
c0026131:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026137:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002613b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002613e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026142:	ee                   	out    dx,al
c0026143:	eb 01                	jmp    c0026146 <PIC::eoi(unsigned char)+0x90>
c0026145:	90                   	nop
c0026146:	c9                   	leave  
c0026147:	c3                   	ret    

c0026148 <PIC::remap()>:
c0026148:	55                   	push   ebp
c0026149:	89 e5                	mov    ebp,esp
c002614b:	83 ec 48             	sub    esp,0x48
c002614e:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026155:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002615c:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026162:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026165:	89 c2                	mov    edx,eax
c0026167:	ec                   	in     al,dx
c0026168:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002616b:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002616e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026171:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026177:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002617a:	89 c2                	mov    edx,eax
c002617c:	ec                   	in     al,dx
c002617d:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026180:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026183:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026186:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002618c:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026190:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026193:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026196:	ee                   	out    dx,al
c0026197:	83 ec 0c             	sub    esp,0xc
c002619a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002619d:	e8 a4 fe ff ff       	call   c0026046 <PIC::ioWait()>
c00261a2:	83 c4 10             	add    esp,0x10
c00261a5:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00261ab:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00261af:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00261b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00261b5:	ee                   	out    dx,al
c00261b6:	83 ec 0c             	sub    esp,0xc
c00261b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261bc:	e8 85 fe ff ff       	call   c0026046 <PIC::ioWait()>
c00261c1:	83 c4 10             	add    esp,0x10
c00261c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00261c7:	0f b6 c0             	movzx  eax,al
c00261ca:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261d0:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261d3:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261d6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261d9:	ee                   	out    dx,al
c00261da:	83 ec 0c             	sub    esp,0xc
c00261dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261e0:	e8 61 fe ff ff       	call   c0026046 <PIC::ioWait()>
c00261e5:	83 c4 10             	add    esp,0x10
c00261e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261eb:	0f b6 c0             	movzx  eax,al
c00261ee:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261f4:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261f7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261fa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261fd:	ee                   	out    dx,al
c00261fe:	83 ec 0c             	sub    esp,0xc
c0026201:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026204:	e8 3d fe ff ff       	call   c0026046 <PIC::ioWait()>
c0026209:	83 c4 10             	add    esp,0x10
c002620c:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026212:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026216:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026219:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002621c:	ee                   	out    dx,al
c002621d:	83 ec 0c             	sub    esp,0xc
c0026220:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026223:	e8 1e fe ff ff       	call   c0026046 <PIC::ioWait()>
c0026228:	83 c4 10             	add    esp,0x10
c002622b:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026231:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026235:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026238:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002623b:	ee                   	out    dx,al
c002623c:	83 ec 0c             	sub    esp,0xc
c002623f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026242:	e8 ff fd ff ff       	call   c0026046 <PIC::ioWait()>
c0026247:	83 c4 10             	add    esp,0x10
c002624a:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026250:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026254:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026257:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002625a:	ee                   	out    dx,al
c002625b:	83 ec 0c             	sub    esp,0xc
c002625e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026261:	e8 e0 fd ff ff       	call   c0026046 <PIC::ioWait()>
c0026266:	83 c4 10             	add    esp,0x10
c0026269:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002626f:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026273:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026276:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026279:	ee                   	out    dx,al
c002627a:	83 ec 0c             	sub    esp,0xc
c002627d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026280:	e8 c1 fd ff ff       	call   c0026046 <PIC::ioWait()>
c0026285:	83 c4 10             	add    esp,0x10
c0026288:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002628c:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026292:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026295:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026298:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002629b:	ee                   	out    dx,al
c002629c:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00262a0:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00262a6:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00262a9:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00262ac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00262af:	ee                   	out    dx,al
c00262b0:	90                   	nop
c00262b1:	c9                   	leave  
c00262b2:	c3                   	ret    
c00262b3:	90                   	nop

c00262b4 <PIC::open(int, int, void*)>:
c00262b4:	55                   	push   ebp
c00262b5:	89 e5                	mov    ebp,esp
c00262b7:	83 ec 18             	sub    esp,0x18
c00262ba:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00262c0:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00262c4:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00262c7:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00262cb:	ee                   	out    dx,al
c00262cc:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262d2:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262d6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262d9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262dd:	ee                   	out    dx,al
c00262de:	83 ec 0c             	sub    esp,0xc
c00262e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262e4:	e8 5f fe ff ff       	call   c0026148 <PIC::remap()>
c00262e9:	83 c4 10             	add    esp,0x10
c00262ec:	b8 00 00 00 00       	mov    eax,0x0
c00262f1:	c9                   	leave  
c00262f2:	c3                   	ret    
c00262f3:	90                   	nop

c00262f4 <APICTimer::close(int, int, void*)>:
c00262f4:	b8 00 00 00 00       	mov    eax,0x0
c00262f9:	c3                   	ret    

c00262fa <apicTimerHandler(regs*, void*)>:
c00262fa:	83 ec 0c             	sub    esp,0xc
c00262fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026301:	8b 00                	mov    eax,DWORD PTR [eax]
c0026303:	99                   	cdq    
c0026304:	52                   	push   edx
c0026305:	50                   	push   eax
c0026306:	6a 00                	push   0x0
c0026308:	68 00 ca 9a 3b       	push   0x3b9aca00
c002630d:	e8 8a 07 00 00       	call   c0026a9c <__udivdi3>
c0026312:	83 c4 10             	add    esp,0x10
c0026315:	83 ec 08             	sub    esp,0x8
c0026318:	52                   	push   edx
c0026319:	50                   	push   eax
c002631a:	e8 da 0a ff ff       	call   c0016df9 <timerHandler(unsigned long long)>
c002631f:	83 c4 10             	add    esp,0x10
c0026322:	90                   	nop
c0026323:	83 c4 0c             	add    esp,0xc
c0026326:	c3                   	ret    
c0026327:	90                   	nop

c0026328 <APICTimer::write(int)>:
c0026328:	53                   	push   ebx
c0026329:	83 ec 28             	sub    esp,0x28
c002632c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026330:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026334:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002633a:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c002633f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026345:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002634b:	83 ec 0c             	sub    esp,0xc
c002634e:	50                   	push   eax
c002634f:	e8 de f4 ff ff       	call   c0025832 <APIC::getBase()>
c0026354:	83 c4 10             	add    esp,0x10
c0026357:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002635b:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c0026360:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c0026366:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002636a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002636e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026372:	05 e0 03 00 00       	add    eax,0x3e0
c0026377:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002637d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026381:	05 80 03 00 00       	add    eax,0x380
c0026386:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002638c:	fb                   	sti    
c002638d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026391:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026395:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002639a:	83 d2 00             	adc    edx,0x0
c002639d:	89 c1                	mov    ecx,eax
c002639f:	89 d3                	mov    ebx,edx
c00263a1:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c00263a6:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c00263ac:	39 c8                	cmp    eax,ecx
c00263ae:	89 d0                	mov    eax,edx
c00263b0:	19 d8                	sbb    eax,ebx
c00263b2:	73 02                	jae    c00263b6 <APICTimer::write(int)+0x8e>
c00263b4:	eb d7                	jmp    c002638d <APICTimer::write(int)+0x65>
c00263b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263ba:	05 20 03 00 00       	add    eax,0x320
c00263bf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00263c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263c9:	05 90 03 00 00       	add    eax,0x390
c00263ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00263d0:	f7 d0                	not    eax
c00263d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263d6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263de:	ba 00 00 00 00       	mov    edx,0x0
c00263e3:	f7 f3                	div    ebx
c00263e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263f3:	0d 00 00 02 00       	or     eax,0x20000
c00263f8:	89 c2                	mov    edx,eax
c00263fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263fe:	05 20 03 00 00       	add    eax,0x320
c0026403:	89 10                	mov    DWORD PTR [eax],edx
c0026405:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026409:	05 e0 03 00 00       	add    eax,0x3e0
c002640e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026418:	05 80 03 00 00       	add    eax,0x380
c002641d:	89 c2                	mov    edx,eax
c002641f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026423:	89 02                	mov    DWORD PTR [edx],eax
c0026425:	90                   	nop
c0026426:	83 c4 28             	add    esp,0x28
c0026429:	5b                   	pop    ebx
c002642a:	c3                   	ret    
c002642b:	90                   	nop

c002642c <APICTimer::open(int, int, void*)>:
c002642c:	57                   	push   edi
c002642d:	56                   	push   esi
c002642e:	53                   	push   ebx
c002642f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026433:	8b 00                	mov    eax,DWORD PTR [eax]
c0026435:	83 c0 24             	add    eax,0x24
c0026438:	8b 00                	mov    eax,DWORD PTR [eax]
c002643a:	83 ec 08             	sub    esp,0x8
c002643d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026441:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026445:	ff d0                	call   eax
c0026447:	83 c4 10             	add    esp,0x10
c002644a:	a1 08 e5 02 c0       	mov    eax,ds:0xc002e508
c002644f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026455:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002645b:	83 ec 0c             	sub    esp,0xc
c002645e:	50                   	push   eax
c002645f:	e8 ce f3 ff ff       	call   c0025832 <APIC::getBase()>
c0026464:	83 c4 10             	add    esp,0x10
c0026467:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002646d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026471:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026477:	0f b6 f8             	movzx  edi,al
c002647a:	89 d0                	mov    eax,edx
c002647c:	ba 00 00 00 00       	mov    edx,0x0
c0026481:	89 c1                	mov    ecx,eax
c0026483:	80 e5 ff             	and    ch,0xff
c0026486:	89 cb                	mov    ebx,ecx
c0026488:	0f b6 f2             	movzx  esi,dl
c002648b:	89 d8                	mov    eax,ebx
c002648d:	89 f2                	mov    edx,esi
c002648f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026493:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026496:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002649a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002649e:	83 e0 00             	and    eax,0x0
c00264a1:	09 d0                	or     eax,edx
c00264a3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00264a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00264b1:	8d 50 01             	lea    edx,[eax+0x1]
c00264b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264b8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00264be:	0f b6 d0             	movzx  edx,al
c00264c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264c5:	83 c2 08             	add    edx,0x8
c00264c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00264cc:	0f b6 c9             	movzx  ecx,cl
c00264cf:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264dd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264e1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264ef:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264f9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264ff:	83 ec 0c             	sub    esp,0xc
c0026502:	51                   	push   ecx
c0026503:	6a 01                	push   0x1
c0026505:	68 fa 62 02 c0       	push   0xc00262fa
c002650a:	52                   	push   edx
c002650b:	50                   	push   eax
c002650c:	e8 b9 de fe ff       	call   c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026511:	83 c4 20             	add    esp,0x20
c0026514:	89 c2                	mov    edx,eax
c0026516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026520:	b8 00 00 00 00       	mov    eax,0x0
c0026525:	5b                   	pop    ebx
c0026526:	5e                   	pop    esi
c0026527:	5f                   	pop    edi
c0026528:	c3                   	ret    
c0026529:	90                   	nop

c002652a <APICTimer::APICTimer()>:
c002652a:	83 ec 0c             	sub    esp,0xc
c002652d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026531:	83 ec 08             	sub    esp,0x8
c0026534:	68 a4 d3 02 c0       	push   0xc002d3a4
c0026539:	50                   	push   eax
c002653a:	e8 2b 08 ff ff       	call   c0016d6a <Timer::Timer(char const*)>
c002653f:	83 c4 10             	add    esp,0x10
c0026542:	ba b8 d3 02 c0       	mov    edx,0xc002d3b8
c0026547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002654b:	89 10                	mov    DWORD PTR [eax],edx
c002654d:	90                   	nop
c002654e:	83 c4 0c             	add    esp,0xc
c0026551:	c3                   	ret    

c0026552 <PIT::write(int)>:
c0026552:	83 ec 10             	sub    esp,0x10
c0026555:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026559:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002655d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026563:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026567:	a3 e4 28 03 c0       	mov    ds:0xc00328e4,eax
c002656c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026571:	99                   	cdq    
c0026572:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026576:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002657a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026581:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026586:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002658a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002658f:	ee                   	out    dx,al
c0026590:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026594:	0f b6 c0             	movzx  eax,al
c0026597:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002659e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00265a2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00265a6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00265ab:	ee                   	out    dx,al
c00265ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00265b0:	c1 f8 08             	sar    eax,0x8
c00265b3:	0f b6 c0             	movzx  eax,al
c00265b6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00265bd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00265c1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00265c5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00265ca:	ee                   	out    dx,al
c00265cb:	90                   	nop
c00265cc:	83 c4 10             	add    esp,0x10
c00265cf:	c3                   	ret    

c00265d0 <pitHandler(regs*, void*)>:
c00265d0:	83 ec 0c             	sub    esp,0xc
c00265d3:	a1 e4 28 03 c0       	mov    eax,ds:0xc00328e4
c00265d8:	99                   	cdq    
c00265d9:	52                   	push   edx
c00265da:	50                   	push   eax
c00265db:	6a 00                	push   0x0
c00265dd:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265e2:	e8 b5 04 00 00       	call   c0026a9c <__udivdi3>
c00265e7:	83 c4 10             	add    esp,0x10
c00265ea:	83 ec 08             	sub    esp,0x8
c00265ed:	52                   	push   edx
c00265ee:	50                   	push   eax
c00265ef:	e8 05 08 ff ff       	call   c0016df9 <timerHandler(unsigned long long)>
c00265f4:	83 c4 10             	add    esp,0x10
c00265f7:	90                   	nop
c00265f8:	83 c4 0c             	add    esp,0xc
c00265fb:	c3                   	ret    

c00265fc <PIT::open(int, int, void*)>:
c00265fc:	83 ec 0c             	sub    esp,0xc
c00265ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026603:	8b 00                	mov    eax,DWORD PTR [eax]
c0026605:	83 c0 24             	add    eax,0x24
c0026608:	8b 00                	mov    eax,DWORD PTR [eax]
c002660a:	83 ec 08             	sub    esp,0x8
c002660d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026615:	ff d0                	call   eax
c0026617:	83 c4 10             	add    esp,0x10
c002661a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002661e:	83 ec 0c             	sub    esp,0xc
c0026621:	6a 00                	push   0x0
c0026623:	6a 01                	push   0x1
c0026625:	68 d0 65 02 c0       	push   0xc00265d0
c002662a:	6a 00                	push   0x0
c002662c:	50                   	push   eax
c002662d:	e8 98 dd fe ff       	call   c00143ca <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026632:	83 c4 20             	add    esp,0x20
c0026635:	89 c2                	mov    edx,eax
c0026637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002663b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026641:	b8 00 00 00 00       	mov    eax,0x0
c0026646:	83 c4 0c             	add    esp,0xc
c0026649:	c3                   	ret    

c002664a <PIT::close(int, int, void*)>:
c002664a:	83 ec 0c             	sub    esp,0xc
c002664d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026651:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002665b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002665f:	6a 01                	push   0x1
c0026661:	68 d0 65 02 c0       	push   0xc00265d0
c0026666:	6a 00                	push   0x0
c0026668:	50                   	push   eax
c0026669:	e8 9a dd fe ff       	call   c0014408 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002666e:	83 c4 10             	add    esp,0x10
c0026671:	b8 00 00 00 00       	mov    eax,0x0
c0026676:	83 c4 0c             	add    esp,0xc
c0026679:	c3                   	ret    

c002667a <PIT::PIT()>:
c002667a:	83 ec 0c             	sub    esp,0xc
c002667d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026681:	83 ec 08             	sub    esp,0x8
c0026684:	68 e0 d3 02 c0       	push   0xc002d3e0
c0026689:	50                   	push   eax
c002668a:	e8 db 06 ff ff       	call   c0016d6a <Timer::Timer(char const*)>
c002668f:	83 c4 10             	add    esp,0x10
c0026692:	ba 08 d4 02 c0       	mov    edx,0xc002d408
c0026697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669b:	89 10                	mov    DWORD PTR [eax],edx
c002669d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266a7:	0f b6 d0             	movzx  edx,al
c00266aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ae:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00266b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266bf:	0f b6 d0             	movzx  edx,al
c00266c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c6:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00266cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d5:	8d 50 01             	lea    edx,[eax+0x1]
c00266d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266dc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266e2:	0f b6 d0             	movzx  edx,al
c00266e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266ed:	83 e1 3f             	and    ecx,0x3f
c00266f0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266f4:	90                   	nop
c00266f5:	83 c4 0c             	add    esp,0xc
c00266f8:	c3                   	ret    
c00266f9:	66 90                	xchg   ax,ax
c00266fb:	66 90                	xchg   ax,ax
c00266fd:	66 90                	xchg   ax,ax
c00266ff:	90                   	nop

c0026700 <avxDetect>:
c0026700:	b8 00 00 00 00       	mov    eax,0x0
c0026705:	c3                   	ret    

c0026706 <avxSave>:
c0026706:	c3                   	ret    

c0026707 <avxLoad>:
c0026707:	c3                   	ret    

c0026708 <avxInit>:
c0026708:	c3                   	ret    

c0026709 <avxClose>:
c0026709:	c3                   	ret    

c002670a <wouldSheSayYes>:
c002670a:	c3                   	ret    
c002670b:	49                   	dec    ecx
c002670c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026710:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026714:	75 20                	jne    c0026736 <sseDetect.noSSE+0x1>
c0026716:	4e                   	dec    esi
c0026717:	79 61                	jns    c002677a <x87Detect+0x14>
c0026719:	68 2e 2e 2e 00       	push   0x2e2e2e
c002671e:	66 90                	xchg   ax,ax

c0026720 <absolutelyNoChanceInHell>:
c0026720:	b8 01 00 00 00       	mov    eax,0x1
c0026725:	0f a2                	cpuid  
c0026727:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002672d:	74 06                	je     c0026735 <sseDetect.noSSE>
c002672f:	b8 01 00 00 00       	mov    eax,0x1
c0026734:	c3                   	ret    

c0026735 <sseDetect.noSSE>:
c0026735:	31 c0                	xor    eax,eax
c0026737:	c3                   	ret    

c0026738 <sseSave>:
c0026738:	0f ae 44 24 08       	fxsave [esp+0x8]
c002673d:	c3                   	ret    

c002673e <sseLoad>:
c002673e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026743:	c3                   	ret    

c0026744 <sseInit>:
c0026744:	e8 43 00 00 00       	call   c002678c <x87Init>
c0026749:	0f 20 e0             	mov    eax,cr4
c002674c:	66 0d 00 06          	or     ax,0x600
c0026750:	0f 22 e0             	mov    cr4,eax
c0026753:	c3                   	ret    

c0026754 <sseClose>:
c0026754:	c3                   	ret    
c0026755:	66 90                	xchg   ax,ax
c0026757:	66 90                	xchg   ax,ax
c0026759:	66 90                	xchg   ax,ax
c002675b:	66 90                	xchg   ax,ax
c002675d:	66 90                	xchg   ax,ax
c002675f:	90                   	nop

c0026760 <value_37F>:
c0026760:	7f 03                	jg     c0026765 <value_37A+0x1>

c0026762 <value_37E>:
c0026762:	7e 03                	jle    c0026767 <x87Detect+0x1>

c0026764 <value_37A>:
c0026764:	7a 03                	jp     c0026769 <x87Detect+0x3>

c0026766 <x87Detect>:
c0026766:	b8 01 00 00 00       	mov    eax,0x1
c002676b:	0f a2                	cpuid  
c002676d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026773:	74 06                	je     c002677b <x87Detect.nox87>
c0026775:	b8 01 00 00 00       	mov    eax,0x1
c002677a:	c3                   	ret    

c002677b <x87Detect.nox87>:
c002677b:	b8 00 00 00 00       	mov    eax,0x0
c0026780:	c3                   	ret    

c0026781 <x87Save>:
c0026781:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026786:	c3                   	ret    

c0026787 <x87Load>:
c0026787:	dd 64 24 08          	frstor [esp+0x8]
c002678b:	c3                   	ret    

c002678c <x87Init>:
c002678c:	9b db e3             	finit  
c002678f:	0f 20 c0             	mov    eax,cr0
c0026792:	66 25 fb ff          	and    ax,0xfffb
c0026796:	66 0d 22 00          	or     ax,0x22
c002679a:	0f 22 c0             	mov    cr0,eax
c002679d:	0f 06                	clts   
c002679f:	d9 2d 64 67 02 c0    	fldcw  WORD PTR ds:0xc0026764
c00267a5:	c3                   	ret    

c00267a6 <x87Close>:
c00267a6:	c3                   	ret    
c00267a7:	90                   	nop

c00267a8 <__do_global_ctors_aux>:
c00267a8:	a1 ec 92 02 c0       	mov    eax,ds:0xc00292ec
c00267ad:	83 f8 ff             	cmp    eax,0xffffffff
c00267b0:	74 1a                	je     c00267cc <__do_global_ctors_aux+0x24>
c00267b2:	55                   	push   ebp
c00267b3:	89 e5                	mov    ebp,esp
c00267b5:	53                   	push   ebx
c00267b6:	52                   	push   edx
c00267b7:	bb ec 92 02 c0       	mov    ebx,0xc00292ec
c00267bc:	ff d0                	call   eax
c00267be:	83 eb 04             	sub    ebx,0x4
c00267c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00267c3:	83 f8 ff             	cmp    eax,0xffffffff
c00267c6:	75 f4                	jne    c00267bc <__do_global_ctors_aux+0x14>
c00267c8:	58                   	pop    eax
c00267c9:	5b                   	pop    ebx
c00267ca:	5d                   	pop    ebp
c00267cb:	c3                   	ret    
c00267cc:	c3                   	ret    
c00267cd:	66 90                	xchg   ax,ax
c00267cf:	90                   	nop

c00267d0 <__divdi3>:
c00267d0:	55                   	push   ebp
c00267d1:	57                   	push   edi
c00267d2:	56                   	push   esi
c00267d3:	53                   	push   ebx
c00267d4:	83 ec 1c             	sub    esp,0x1c
c00267d7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267df:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267e2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267ea:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267ee:	85 db                	test   ebx,ebx
c00267f0:	0f 88 8e 00 00 00    	js     c0026884 <__divdi3+0xb4>
c00267f6:	89 dd                	mov    ebp,ebx
c00267f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026800:	89 d3                	mov    ebx,edx
c0026802:	85 d2                	test   edx,edx
c0026804:	79 0d                	jns    c0026813 <__divdi3+0x43>
c0026806:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002680a:	f7 d8                	neg    eax
c002680c:	83 d2 00             	adc    edx,0x0
c002680f:	f7 da                	neg    edx
c0026811:	89 d3                	mov    ebx,edx
c0026813:	89 c7                	mov    edi,eax
c0026815:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026818:	85 db                	test   ebx,ebx
c002681a:	75 48                	jne    c0026864 <__divdi3+0x94>
c002681c:	39 ef                	cmp    edi,ebp
c002681e:	76 24                	jbe    c0026844 <__divdi3+0x74>
c0026820:	89 ea                	mov    edx,ebp
c0026822:	f7 f7                	div    edi
c0026824:	89 c1                	mov    ecx,eax
c0026826:	31 f6                	xor    esi,esi
c0026828:	89 c8                	mov    eax,ecx
c002682a:	89 f2                	mov    edx,esi
c002682c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026830:	85 c9                	test   ecx,ecx
c0026832:	74 07                	je     c002683b <__divdi3+0x6b>
c0026834:	f7 d8                	neg    eax
c0026836:	83 d2 00             	adc    edx,0x0
c0026839:	f7 da                	neg    edx
c002683b:	83 c4 1c             	add    esp,0x1c
c002683e:	5b                   	pop    ebx
c002683f:	5e                   	pop    esi
c0026840:	5f                   	pop    edi
c0026841:	5d                   	pop    ebp
c0026842:	c3                   	ret    
c0026843:	90                   	nop
c0026844:	85 ff                	test   edi,edi
c0026846:	75 0b                	jne    c0026853 <__divdi3+0x83>
c0026848:	b8 01 00 00 00       	mov    eax,0x1
c002684d:	31 d2                	xor    edx,edx
c002684f:	f7 f3                	div    ebx
c0026851:	89 c7                	mov    edi,eax
c0026853:	31 d2                	xor    edx,edx
c0026855:	89 e8                	mov    eax,ebp
c0026857:	f7 f7                	div    edi
c0026859:	89 c6                	mov    esi,eax
c002685b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002685e:	f7 f7                	div    edi
c0026860:	89 c1                	mov    ecx,eax
c0026862:	eb c4                	jmp    c0026828 <__divdi3+0x58>
c0026864:	39 eb                	cmp    ebx,ebp
c0026866:	77 3c                	ja     c00268a4 <__divdi3+0xd4>
c0026868:	0f bd f3             	bsr    esi,ebx
c002686b:	83 f6 1f             	xor    esi,0x1f
c002686e:	75 40                	jne    c00268b0 <__divdi3+0xe0>
c0026870:	39 eb                	cmp    ebx,ebp
c0026872:	72 09                	jb     c002687d <__divdi3+0xad>
c0026874:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026877:	0f 87 97 00 00 00    	ja     c0026914 <__divdi3+0x144>
c002687d:	b9 01 00 00 00       	mov    ecx,0x1
c0026882:	eb a4                	jmp    c0026828 <__divdi3+0x58>
c0026884:	f7 d9                	neg    ecx
c0026886:	83 d3 00             	adc    ebx,0x0
c0026889:	f7 db                	neg    ebx
c002688b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002688e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026892:	89 dd                	mov    ebp,ebx
c0026894:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002689c:	e9 5f ff ff ff       	jmp    c0026800 <__divdi3+0x30>
c00268a1:	8d 76 00             	lea    esi,[esi+0x0]
c00268a4:	31 f6                	xor    esi,esi
c00268a6:	31 c9                	xor    ecx,ecx
c00268a8:	e9 7b ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c00268ad:	8d 76 00             	lea    esi,[esi+0x0]
c00268b0:	b8 20 00 00 00       	mov    eax,0x20
c00268b5:	29 f0                	sub    eax,esi
c00268b7:	89 f1                	mov    ecx,esi
c00268b9:	d3 e3                	shl    ebx,cl
c00268bb:	89 fa                	mov    edx,edi
c00268bd:	88 c1                	mov    cl,al
c00268bf:	d3 ea                	shr    edx,cl
c00268c1:	09 da                	or     edx,ebx
c00268c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00268c7:	89 f1                	mov    ecx,esi
c00268c9:	d3 e7                	shl    edi,cl
c00268cb:	89 eb                	mov    ebx,ebp
c00268cd:	88 c1                	mov    cl,al
c00268cf:	d3 eb                	shr    ebx,cl
c00268d1:	89 f1                	mov    ecx,esi
c00268d3:	d3 e5                	shl    ebp,cl
c00268d5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268d8:	88 c1                	mov    cl,al
c00268da:	d3 ea                	shr    edx,cl
c00268dc:	09 d5                	or     ebp,edx
c00268de:	89 e8                	mov    eax,ebp
c00268e0:	89 da                	mov    edx,ebx
c00268e2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268e6:	89 d3                	mov    ebx,edx
c00268e8:	89 c5                	mov    ebp,eax
c00268ea:	f7 e7                	mul    edi
c00268ec:	39 d3                	cmp    ebx,edx
c00268ee:	72 18                	jb     c0026908 <__divdi3+0x138>
c00268f0:	74 0a                	je     c00268fc <__divdi3+0x12c>
c00268f2:	89 e9                	mov    ecx,ebp
c00268f4:	31 f6                	xor    esi,esi
c00268f6:	e9 2d ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c00268fb:	90                   	nop
c00268fc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268ff:	89 f1                	mov    ecx,esi
c0026901:	d3 e7                	shl    edi,cl
c0026903:	39 c7                	cmp    edi,eax
c0026905:	73 eb                	jae    c00268f2 <__divdi3+0x122>
c0026907:	90                   	nop
c0026908:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002690b:	31 f6                	xor    esi,esi
c002690d:	e9 16 ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c0026912:	66 90                	xchg   ax,ax
c0026914:	31 c9                	xor    ecx,ecx
c0026916:	e9 0d ff ff ff       	jmp    c0026828 <__divdi3+0x58>
c002691b:	90                   	nop

c002691c <__moddi3>:
c002691c:	55                   	push   ebp
c002691d:	57                   	push   edi
c002691e:	56                   	push   esi
c002691f:	53                   	push   ebx
c0026920:	83 ec 2c             	sub    esp,0x2c
c0026923:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026927:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002692b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002692f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026933:	85 db                	test   ebx,ebx
c0026935:	0f 88 85 00 00 00    	js     c00269c0 <__moddi3+0xa4>
c002693b:	89 de                	mov    esi,ebx
c002693d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026945:	89 d7                	mov    edi,edx
c0026947:	85 d2                	test   edx,edx
c0026949:	79 09                	jns    c0026954 <__moddi3+0x38>
c002694b:	f7 d8                	neg    eax
c002694d:	83 d2 00             	adc    edx,0x0
c0026950:	f7 da                	neg    edx
c0026952:	89 d7                	mov    edi,edx
c0026954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026958:	89 cd                	mov    ebp,ecx
c002695a:	85 ff                	test   edi,edi
c002695c:	75 52                	jne    c00269b0 <__moddi3+0x94>
c002695e:	89 c3                	mov    ebx,eax
c0026960:	39 f0                	cmp    eax,esi
c0026962:	76 24                	jbe    c0026988 <__moddi3+0x6c>
c0026964:	89 c8                	mov    eax,ecx
c0026966:	89 f2                	mov    edx,esi
c0026968:	f7 f3                	div    ebx
c002696a:	89 d6                	mov    esi,edx
c002696c:	89 f0                	mov    eax,esi
c002696e:	31 d2                	xor    edx,edx
c0026970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026974:	85 c9                	test   ecx,ecx
c0026976:	74 07                	je     c002697f <__moddi3+0x63>
c0026978:	f7 d8                	neg    eax
c002697a:	83 d2 00             	adc    edx,0x0
c002697d:	f7 da                	neg    edx
c002697f:	83 c4 2c             	add    esp,0x2c
c0026982:	5b                   	pop    ebx
c0026983:	5e                   	pop    esi
c0026984:	5f                   	pop    edi
c0026985:	5d                   	pop    ebp
c0026986:	c3                   	ret    
c0026987:	90                   	nop
c0026988:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002698c:	85 db                	test   ebx,ebx
c002698e:	75 0d                	jne    c002699d <__moddi3+0x81>
c0026990:	b8 01 00 00 00       	mov    eax,0x1
c0026995:	31 d2                	xor    edx,edx
c0026997:	f7 f7                	div    edi
c0026999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002699d:	89 f0                	mov    eax,esi
c002699f:	31 d2                	xor    edx,edx
c00269a1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269a5:	f7 f7                	div    edi
c00269a7:	89 e8                	mov    eax,ebp
c00269a9:	f7 f7                	div    edi
c00269ab:	89 d6                	mov    esi,edx
c00269ad:	eb bd                	jmp    c002696c <__moddi3+0x50>
c00269af:	90                   	nop
c00269b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269b4:	39 f7                	cmp    edi,esi
c00269b6:	76 20                	jbe    c00269d8 <__moddi3+0xbc>
c00269b8:	89 c8                	mov    eax,ecx
c00269ba:	89 f2                	mov    edx,esi
c00269bc:	eb b2                	jmp    c0026970 <__moddi3+0x54>
c00269be:	66 90                	xchg   ax,ax
c00269c0:	f7 d9                	neg    ecx
c00269c2:	83 d3 00             	adc    ebx,0x0
c00269c5:	f7 db                	neg    ebx
c00269c7:	89 de                	mov    esi,ebx
c00269c9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269d1:	e9 6f ff ff ff       	jmp    c0026945 <__moddi3+0x29>
c00269d6:	66 90                	xchg   ax,ax
c00269d8:	0f bd c7             	bsr    eax,edi
c00269db:	83 f0 1f             	xor    eax,0x1f
c00269de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269e2:	75 24                	jne    c0026a08 <__moddi3+0xec>
c00269e4:	39 f7                	cmp    edi,esi
c00269e6:	72 06                	jb     c00269ee <__moddi3+0xd2>
c00269e8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269ec:	77 0c                	ja     c00269fa <__moddi3+0xde>
c00269ee:	89 e9                	mov    ecx,ebp
c00269f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269f4:	19 fe                	sbb    esi,edi
c00269f6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269fe:	89 f2                	mov    edx,esi
c0026a00:	e9 6b ff ff ff       	jmp    c0026970 <__moddi3+0x54>
c0026a05:	8d 76 00             	lea    esi,[esi+0x0]
c0026a08:	b8 20 00 00 00       	mov    eax,0x20
c0026a0d:	89 c2                	mov    edx,eax
c0026a0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026a13:	29 da                	sub    edx,ebx
c0026a15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026a19:	88 d9                	mov    cl,bl
c0026a1b:	d3 e7                	shl    edi,cl
c0026a1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026a21:	88 d1                	mov    cl,dl
c0026a23:	d3 e8                	shr    eax,cl
c0026a25:	09 c7                	or     edi,eax
c0026a27:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026a2b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026a2f:	89 d8                	mov    eax,ebx
c0026a31:	88 d9                	mov    cl,bl
c0026a33:	d3 e7                	shl    edi,cl
c0026a35:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a39:	89 f3                	mov    ebx,esi
c0026a3b:	88 d1                	mov    cl,dl
c0026a3d:	d3 eb                	shr    ebx,cl
c0026a3f:	89 c7                	mov    edi,eax
c0026a41:	88 c1                	mov    cl,al
c0026a43:	d3 e6                	shl    esi,cl
c0026a45:	89 e8                	mov    eax,ebp
c0026a47:	88 d1                	mov    cl,dl
c0026a49:	d3 e8                	shr    eax,cl
c0026a4b:	09 f0                	or     eax,esi
c0026a4d:	89 f9                	mov    ecx,edi
c0026a4f:	d3 e5                	shl    ebp,cl
c0026a51:	89 da                	mov    edx,ebx
c0026a53:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a57:	89 d3                	mov    ebx,edx
c0026a59:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a5d:	89 c6                	mov    esi,eax
c0026a5f:	89 d1                	mov    ecx,edx
c0026a61:	39 d3                	cmp    ebx,edx
c0026a63:	72 27                	jb     c0026a8c <__moddi3+0x170>
c0026a65:	74 21                	je     c0026a88 <__moddi3+0x16c>
c0026a67:	29 f5                	sub    ebp,esi
c0026a69:	19 cb                	sbb    ebx,ecx
c0026a6b:	89 de                	mov    esi,ebx
c0026a6d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a71:	d3 e6                	shl    esi,cl
c0026a73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a77:	89 f9                	mov    ecx,edi
c0026a79:	d3 ed                	shr    ebp,cl
c0026a7b:	09 ee                	or     esi,ebp
c0026a7d:	89 f0                	mov    eax,esi
c0026a7f:	d3 eb                	shr    ebx,cl
c0026a81:	89 da                	mov    edx,ebx
c0026a83:	e9 e8 fe ff ff       	jmp    c0026970 <__moddi3+0x54>
c0026a88:	39 c5                	cmp    ebp,eax
c0026a8a:	73 db                	jae    c0026a67 <__moddi3+0x14b>
c0026a8c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a90:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a94:	89 d1                	mov    ecx,edx
c0026a96:	89 c6                	mov    esi,eax
c0026a98:	eb cd                	jmp    c0026a67 <__moddi3+0x14b>
c0026a9a:	66 90                	xchg   ax,ax

c0026a9c <__udivdi3>:
c0026a9c:	55                   	push   ebp
c0026a9d:	57                   	push   edi
c0026a9e:	56                   	push   esi
c0026a9f:	53                   	push   ebx
c0026aa0:	83 ec 1c             	sub    esp,0x1c
c0026aa3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026aa7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026aab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026aaf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ab3:	85 d2                	test   edx,edx
c0026ab5:	75 41                	jne    c0026af8 <__udivdi3+0x5c>
c0026ab7:	39 f7                	cmp    edi,esi
c0026ab9:	76 15                	jbe    c0026ad0 <__udivdi3+0x34>
c0026abb:	89 e8                	mov    eax,ebp
c0026abd:	89 f2                	mov    edx,esi
c0026abf:	f7 f7                	div    edi
c0026ac1:	31 db                	xor    ebx,ebx
c0026ac3:	89 da                	mov    edx,ebx
c0026ac5:	83 c4 1c             	add    esp,0x1c
c0026ac8:	5b                   	pop    ebx
c0026ac9:	5e                   	pop    esi
c0026aca:	5f                   	pop    edi
c0026acb:	5d                   	pop    ebp
c0026acc:	c3                   	ret    
c0026acd:	8d 76 00             	lea    esi,[esi+0x0]
c0026ad0:	89 f9                	mov    ecx,edi
c0026ad2:	85 ff                	test   edi,edi
c0026ad4:	75 0b                	jne    c0026ae1 <__udivdi3+0x45>
c0026ad6:	b8 01 00 00 00       	mov    eax,0x1
c0026adb:	31 d2                	xor    edx,edx
c0026add:	f7 f7                	div    edi
c0026adf:	89 c1                	mov    ecx,eax
c0026ae1:	31 d2                	xor    edx,edx
c0026ae3:	89 f0                	mov    eax,esi
c0026ae5:	f7 f1                	div    ecx
c0026ae7:	89 c3                	mov    ebx,eax
c0026ae9:	89 e8                	mov    eax,ebp
c0026aeb:	f7 f1                	div    ecx
c0026aed:	89 da                	mov    edx,ebx
c0026aef:	83 c4 1c             	add    esp,0x1c
c0026af2:	5b                   	pop    ebx
c0026af3:	5e                   	pop    esi
c0026af4:	5f                   	pop    edi
c0026af5:	5d                   	pop    ebp
c0026af6:	c3                   	ret    
c0026af7:	90                   	nop
c0026af8:	39 f2                	cmp    edx,esi
c0026afa:	77 1c                	ja     c0026b18 <__udivdi3+0x7c>
c0026afc:	0f bd da             	bsr    ebx,edx
c0026aff:	83 f3 1f             	xor    ebx,0x1f
c0026b02:	75 24                	jne    c0026b28 <__udivdi3+0x8c>
c0026b04:	39 f2                	cmp    edx,esi
c0026b06:	72 08                	jb     c0026b10 <__udivdi3+0x74>
c0026b08:	39 ef                	cmp    edi,ebp
c0026b0a:	0f 87 84 00 00 00    	ja     c0026b94 <__udivdi3+0xf8>
c0026b10:	b8 01 00 00 00       	mov    eax,0x1
c0026b15:	eb ac                	jmp    c0026ac3 <__udivdi3+0x27>
c0026b17:	90                   	nop
c0026b18:	31 db                	xor    ebx,ebx
c0026b1a:	31 c0                	xor    eax,eax
c0026b1c:	89 da                	mov    edx,ebx
c0026b1e:	83 c4 1c             	add    esp,0x1c
c0026b21:	5b                   	pop    ebx
c0026b22:	5e                   	pop    esi
c0026b23:	5f                   	pop    edi
c0026b24:	5d                   	pop    ebp
c0026b25:	c3                   	ret    
c0026b26:	66 90                	xchg   ax,ax
c0026b28:	b8 20 00 00 00       	mov    eax,0x20
c0026b2d:	29 d8                	sub    eax,ebx
c0026b2f:	88 d9                	mov    cl,bl
c0026b31:	d3 e2                	shl    edx,cl
c0026b33:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b37:	89 fa                	mov    edx,edi
c0026b39:	88 c1                	mov    cl,al
c0026b3b:	d3 ea                	shr    edx,cl
c0026b3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b41:	09 d1                	or     ecx,edx
c0026b43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b47:	88 d9                	mov    cl,bl
c0026b49:	d3 e7                	shl    edi,cl
c0026b4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b4f:	89 f7                	mov    edi,esi
c0026b51:	88 c1                	mov    cl,al
c0026b53:	d3 ef                	shr    edi,cl
c0026b55:	88 d9                	mov    cl,bl
c0026b57:	d3 e6                	shl    esi,cl
c0026b59:	89 ea                	mov    edx,ebp
c0026b5b:	88 c1                	mov    cl,al
c0026b5d:	d3 ea                	shr    edx,cl
c0026b5f:	09 d6                	or     esi,edx
c0026b61:	89 f0                	mov    eax,esi
c0026b63:	89 fa                	mov    edx,edi
c0026b65:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b69:	89 d7                	mov    edi,edx
c0026b6b:	89 c6                	mov    esi,eax
c0026b6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b71:	39 d7                	cmp    edi,edx
c0026b73:	72 13                	jb     c0026b88 <__udivdi3+0xec>
c0026b75:	74 09                	je     c0026b80 <__udivdi3+0xe4>
c0026b77:	89 f0                	mov    eax,esi
c0026b79:	31 db                	xor    ebx,ebx
c0026b7b:	e9 43 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b80:	88 d9                	mov    cl,bl
c0026b82:	d3 e5                	shl    ebp,cl
c0026b84:	39 c5                	cmp    ebp,eax
c0026b86:	73 ef                	jae    c0026b77 <__udivdi3+0xdb>
c0026b88:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b8b:	31 db                	xor    ebx,ebx
c0026b8d:	e9 31 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b92:	66 90                	xchg   ax,ax
c0026b94:	31 c0                	xor    eax,eax
c0026b96:	e9 28 ff ff ff       	jmp    c0026ac3 <__udivdi3+0x27>
c0026b9b:	90                   	nop

c0026b9c <__umoddi3>:
c0026b9c:	55                   	push   ebp
c0026b9d:	57                   	push   edi
c0026b9e:	56                   	push   esi
c0026b9f:	53                   	push   ebx
c0026ba0:	83 ec 1c             	sub    esp,0x1c
c0026ba3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026ba7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026bab:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026baf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026bb3:	89 da                	mov    edx,ebx
c0026bb5:	85 c0                	test   eax,eax
c0026bb7:	75 37                	jne    c0026bf0 <__umoddi3+0x54>
c0026bb9:	39 df                	cmp    edi,ebx
c0026bbb:	76 13                	jbe    c0026bd0 <__umoddi3+0x34>
c0026bbd:	89 f0                	mov    eax,esi
c0026bbf:	f7 f7                	div    edi
c0026bc1:	89 d0                	mov    eax,edx
c0026bc3:	31 d2                	xor    edx,edx
c0026bc5:	83 c4 1c             	add    esp,0x1c
c0026bc8:	5b                   	pop    ebx
c0026bc9:	5e                   	pop    esi
c0026bca:	5f                   	pop    edi
c0026bcb:	5d                   	pop    ebp
c0026bcc:	c3                   	ret    
c0026bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0026bd0:	89 fd                	mov    ebp,edi
c0026bd2:	85 ff                	test   edi,edi
c0026bd4:	75 0b                	jne    c0026be1 <__umoddi3+0x45>
c0026bd6:	b8 01 00 00 00       	mov    eax,0x1
c0026bdb:	31 d2                	xor    edx,edx
c0026bdd:	f7 f7                	div    edi
c0026bdf:	89 c5                	mov    ebp,eax
c0026be1:	89 d8                	mov    eax,ebx
c0026be3:	31 d2                	xor    edx,edx
c0026be5:	f7 f5                	div    ebp
c0026be7:	89 f0                	mov    eax,esi
c0026be9:	f7 f5                	div    ebp
c0026beb:	89 d0                	mov    eax,edx
c0026bed:	eb d4                	jmp    c0026bc3 <__umoddi3+0x27>
c0026bef:	90                   	nop
c0026bf0:	89 f1                	mov    ecx,esi
c0026bf2:	39 d8                	cmp    eax,ebx
c0026bf4:	76 0a                	jbe    c0026c00 <__umoddi3+0x64>
c0026bf6:	89 f0                	mov    eax,esi
c0026bf8:	83 c4 1c             	add    esp,0x1c
c0026bfb:	5b                   	pop    ebx
c0026bfc:	5e                   	pop    esi
c0026bfd:	5f                   	pop    edi
c0026bfe:	5d                   	pop    ebp
c0026bff:	c3                   	ret    
c0026c00:	0f bd e8             	bsr    ebp,eax
c0026c03:	83 f5 1f             	xor    ebp,0x1f
c0026c06:	75 1c                	jne    c0026c24 <__umoddi3+0x88>
c0026c08:	39 d8                	cmp    eax,ebx
c0026c0a:	72 04                	jb     c0026c10 <__umoddi3+0x74>
c0026c0c:	39 f7                	cmp    edi,esi
c0026c0e:	77 08                	ja     c0026c18 <__umoddi3+0x7c>
c0026c10:	89 da                	mov    edx,ebx
c0026c12:	29 fe                	sub    esi,edi
c0026c14:	19 c2                	sbb    edx,eax
c0026c16:	89 f1                	mov    ecx,esi
c0026c18:	89 c8                	mov    eax,ecx
c0026c1a:	83 c4 1c             	add    esp,0x1c
c0026c1d:	5b                   	pop    ebx
c0026c1e:	5e                   	pop    esi
c0026c1f:	5f                   	pop    edi
c0026c20:	5d                   	pop    ebp
c0026c21:	c3                   	ret    
c0026c22:	66 90                	xchg   ax,ax
c0026c24:	ba 20 00 00 00       	mov    edx,0x20
c0026c29:	29 ea                	sub    edx,ebp
c0026c2b:	89 e9                	mov    ecx,ebp
c0026c2d:	d3 e0                	shl    eax,cl
c0026c2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c33:	89 f8                	mov    eax,edi
c0026c35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c39:	88 d1                	mov    cl,dl
c0026c3b:	d3 e8                	shr    eax,cl
c0026c3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c41:	09 c1                	or     ecx,eax
c0026c43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c47:	89 e9                	mov    ecx,ebp
c0026c49:	d3 e7                	shl    edi,cl
c0026c4b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c4f:	89 d8                	mov    eax,ebx
c0026c51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c55:	88 d1                	mov    cl,dl
c0026c57:	d3 e8                	shr    eax,cl
c0026c59:	89 c7                	mov    edi,eax
c0026c5b:	89 e9                	mov    ecx,ebp
c0026c5d:	d3 e3                	shl    ebx,cl
c0026c5f:	89 f0                	mov    eax,esi
c0026c61:	88 d1                	mov    cl,dl
c0026c63:	d3 e8                	shr    eax,cl
c0026c65:	09 d8                	or     eax,ebx
c0026c67:	89 e9                	mov    ecx,ebp
c0026c69:	d3 e6                	shl    esi,cl
c0026c6b:	89 f3                	mov    ebx,esi
c0026c6d:	89 fa                	mov    edx,edi
c0026c6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c73:	89 d1                	mov    ecx,edx
c0026c75:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c79:	89 c6                	mov    esi,eax
c0026c7b:	89 d7                	mov    edi,edx
c0026c7d:	39 d1                	cmp    ecx,edx
c0026c7f:	72 27                	jb     c0026ca8 <__umoddi3+0x10c>
c0026c81:	74 21                	je     c0026ca4 <__umoddi3+0x108>
c0026c83:	89 ca                	mov    edx,ecx
c0026c85:	29 f3                	sub    ebx,esi
c0026c87:	19 fa                	sbb    edx,edi
c0026c89:	89 d0                	mov    eax,edx
c0026c8b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c8f:	d3 e0                	shl    eax,cl
c0026c91:	89 e9                	mov    ecx,ebp
c0026c93:	d3 eb                	shr    ebx,cl
c0026c95:	09 d8                	or     eax,ebx
c0026c97:	d3 ea                	shr    edx,cl
c0026c99:	83 c4 1c             	add    esp,0x1c
c0026c9c:	5b                   	pop    ebx
c0026c9d:	5e                   	pop    esi
c0026c9e:	5f                   	pop    edi
c0026c9f:	5d                   	pop    ebp
c0026ca0:	c3                   	ret    
c0026ca1:	8d 76 00             	lea    esi,[esi+0x0]
c0026ca4:	39 c3                	cmp    ebx,eax
c0026ca6:	73 db                	jae    c0026c83 <__umoddi3+0xe7>
c0026ca8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026cac:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026cb0:	89 d7                	mov    edi,edx
c0026cb2:	89 c6                	mov    esi,eax
c0026cb4:	eb cd                	jmp    c0026c83 <__umoddi3+0xe7>

c0026cb6 <__addsf3>:
c0026cb6:	55                   	push   ebp
c0026cb7:	89 e5                	mov    ebp,esp
c0026cb9:	57                   	push   edi
c0026cba:	56                   	push   esi
c0026cbb:	53                   	push   ebx
c0026cbc:	83 ec 08             	sub    esp,0x8
c0026cbf:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cc2:	89 fa                	mov    edx,edi
c0026cc4:	89 f8                	mov    eax,edi
c0026cc6:	c1 f8 17             	sar    eax,0x17
c0026cc9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026ccc:	c1 e2 08             	shl    edx,0x8
c0026ccf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026cd5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cd8:	89 de                	mov    esi,ebx
c0026cda:	c1 fe 17             	sar    esi,0x17
c0026cdd:	c1 e3 08             	shl    ebx,0x8
c0026ce0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ce6:	31 f0                	xor    eax,esi
c0026ce8:	0f 88 3b 01 00 00    	js     c0026e29 <__addsf3+0x173>
c0026cee:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cf1:	29 f1                	sub    ecx,esi
c0026cf3:	85 c9                	test   ecx,ecx
c0026cf5:	7e 54                	jle    c0026d4b <__addsf3+0x95>
c0026cf7:	89 f0                	mov    eax,esi
c0026cf9:	84 c0                	test   al,al
c0026cfb:	75 10                	jne    c0026d0d <__addsf3+0x57>
c0026cfd:	85 db                	test   ebx,ebx
c0026cff:	0f 84 aa 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d05:	49                   	dec    ecx
c0026d06:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d09:	74 38                	je     c0026d43 <__addsf3+0x8d>
c0026d0b:	eb 13                	jmp    c0026d20 <__addsf3+0x6a>
c0026d0d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d10:	f7 d0                	not    eax
c0026d12:	84 c0                	test   al,al
c0026d14:	0f 84 95 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d1a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026d20:	83 f9 1f             	cmp    ecx,0x1f
c0026d23:	0f 8f 86 02 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026d29:	89 de                	mov    esi,ebx
c0026d2b:	d3 ee                	shr    esi,cl
c0026d2d:	b8 20 00 00 00       	mov    eax,0x20
c0026d32:	29 c8                	sub    eax,ecx
c0026d34:	89 c1                	mov    ecx,eax
c0026d36:	d3 e3                	shl    ebx,cl
c0026d38:	31 c0                	xor    eax,eax
c0026d3a:	85 db                	test   ebx,ebx
c0026d3c:	0f 95 c0             	setne  al
c0026d3f:	09 f0                	or     eax,esi
c0026d41:	01 d0                	add    eax,edx
c0026d43:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d46:	e9 b6 00 00 00       	jmp    c0026e01 <__addsf3+0x14b>
c0026d4b:	74 5c                	je     c0026da9 <__addsf3+0xf3>
c0026d4d:	89 f1                	mov    ecx,esi
c0026d4f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d52:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d55:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d59:	75 14                	jne    c0026d6f <__addsf3+0xb9>
c0026d5b:	85 d2                	test   edx,edx
c0026d5d:	0f 84 4c 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d63:	49                   	dec    ecx
c0026d64:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d67:	0f 84 94 00 00 00    	je     c0026e01 <__addsf3+0x14b>
c0026d6d:	eb 12                	jmp    c0026d81 <__addsf3+0xcb>
c0026d6f:	89 f0                	mov    eax,esi
c0026d71:	f7 d0                	not    eax
c0026d73:	84 c0                	test   al,al
c0026d75:	0f 84 34 02 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026d7b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d84:	83 f9 1f             	cmp    ecx,0x1f
c0026d87:	0f 8f 22 02 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026d8d:	89 d7                	mov    edi,edx
c0026d8f:	d3 ef                	shr    edi,cl
c0026d91:	b8 20 00 00 00       	mov    eax,0x20
c0026d96:	29 c8                	sub    eax,ecx
c0026d98:	89 c1                	mov    ecx,eax
c0026d9a:	d3 e2                	shl    edx,cl
c0026d9c:	31 c0                	xor    eax,eax
c0026d9e:	85 d2                	test   edx,edx
c0026da0:	0f 95 c0             	setne  al
c0026da3:	09 f8                	or     eax,edi
c0026da5:	01 d8                	add    eax,ebx
c0026da7:	eb 58                	jmp    c0026e01 <__addsf3+0x14b>
c0026da9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026dac:	8d 70 01             	lea    esi,[eax+0x1]
c0026daf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026db5:	75 32                	jne    c0026de9 <__addsf3+0x133>
c0026db7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026dbb:	75 1f                	jne    c0026ddc <__addsf3+0x126>
c0026dbd:	85 d2                	test   edx,edx
c0026dbf:	0f 84 e0 01 00 00    	je     c0026fa5 <__addsf3+0x2ef>
c0026dc5:	85 db                	test   ebx,ebx
c0026dc7:	0f 84 e2 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026dcd:	89 d0                	mov    eax,edx
c0026dcf:	01 d8                	add    eax,ebx
c0026dd1:	0f 89 a9 01 00 00    	jns    c0026f80 <__addsf3+0x2ca>
c0026dd7:	e9 9d 01 00 00       	jmp    c0026f79 <__addsf3+0x2c3>
c0026ddc:	85 d2                	test   edx,edx
c0026dde:	0f 85 cb 01 00 00    	jne    c0026faf <__addsf3+0x2f9>
c0026de4:	e9 bc 01 00 00       	jmp    c0026fa5 <__addsf3+0x2ef>
c0026de9:	31 c0                	xor    eax,eax
c0026deb:	89 f1                	mov    ecx,esi
c0026ded:	f7 d1                	not    ecx
c0026def:	84 c9                	test   cl,cl
c0026df1:	0f 84 90 01 00 00    	je     c0026f87 <__addsf3+0x2d1>
c0026df7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dfa:	d1 e8                	shr    eax,1
c0026dfc:	e9 86 01 00 00       	jmp    c0026f87 <__addsf3+0x2d1>
c0026e01:	85 c0                	test   eax,eax
c0026e03:	0f 89 7e 01 00 00    	jns    c0026f87 <__addsf3+0x2d1>
c0026e09:	46                   	inc    esi
c0026e0a:	89 f2                	mov    edx,esi
c0026e0c:	f7 d2                	not    edx
c0026e0e:	84 d2                	test   dl,dl
c0026e10:	0f 84 6f 01 00 00    	je     c0026f85 <__addsf3+0x2cf>
c0026e16:	89 c2                	mov    edx,eax
c0026e18:	83 e2 01             	and    edx,0x1
c0026e1b:	d1 e8                	shr    eax,1
c0026e1d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026e22:	09 d0                	or     eax,edx
c0026e24:	e9 5e 01 00 00       	jmp    c0026f87 <__addsf3+0x2d1>
c0026e29:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026e2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e30:	89 f0                	mov    eax,esi
c0026e32:	0f b6 c0             	movzx  eax,al
c0026e35:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e38:	29 c1                	sub    ecx,eax
c0026e3a:	85 c9                	test   ecx,ecx
c0026e3c:	7e 55                	jle    c0026e93 <__addsf3+0x1dd>
c0026e3e:	85 c0                	test   eax,eax
c0026e40:	75 11                	jne    c0026e53 <__addsf3+0x19d>
c0026e42:	85 db                	test   ebx,ebx
c0026e44:	0f 84 65 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026e4a:	49                   	dec    ecx
c0026e4b:	75 19                	jne    c0026e66 <__addsf3+0x1b0>
c0026e4d:	89 d0                	mov    eax,edx
c0026e4f:	29 d8                	sub    eax,ebx
c0026e51:	eb 38                	jmp    c0026e8b <__addsf3+0x1d5>
c0026e53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e56:	f7 d0                	not    eax
c0026e58:	84 c0                	test   al,al
c0026e5a:	0f 84 4f 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026e60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e66:	83 f9 1f             	cmp    ecx,0x1f
c0026e69:	0f 8f 40 01 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026e6f:	89 de                	mov    esi,ebx
c0026e71:	d3 ee                	shr    esi,cl
c0026e73:	b8 20 00 00 00       	mov    eax,0x20
c0026e78:	29 c8                	sub    eax,ecx
c0026e7a:	89 c1                	mov    ecx,eax
c0026e7c:	d3 e3                	shl    ebx,cl
c0026e7e:	31 c0                	xor    eax,eax
c0026e80:	85 db                	test   ebx,ebx
c0026e82:	0f 95 c0             	setne  al
c0026e85:	09 f0                	or     eax,esi
c0026e87:	29 c2                	sub    edx,eax
c0026e89:	89 d0                	mov    eax,edx
c0026e8b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e8e:	e9 af 00 00 00       	jmp    c0026f42 <__addsf3+0x28c>
c0026e93:	74 5c                	je     c0026ef1 <__addsf3+0x23b>
c0026e95:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e9f:	75 14                	jne    c0026eb5 <__addsf3+0x1ff>
c0026ea1:	85 d2                	test   edx,edx
c0026ea3:	0f 84 06 01 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026ea9:	48                   	dec    eax
c0026eaa:	75 1b                	jne    c0026ec7 <__addsf3+0x211>
c0026eac:	89 d8                	mov    eax,ebx
c0026eae:	29 d0                	sub    eax,edx
c0026eb0:	e9 8d 00 00 00       	jmp    c0026f42 <__addsf3+0x28c>
c0026eb5:	89 f1                	mov    ecx,esi
c0026eb7:	f7 d1                	not    ecx
c0026eb9:	84 c9                	test   cl,cl
c0026ebb:	0f 84 ee 00 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026ec1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ec7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eca:	83 f8 1f             	cmp    eax,0x1f
c0026ecd:	0f 8f dc 00 00 00    	jg     c0026faf <__addsf3+0x2f9>
c0026ed3:	89 d7                	mov    edi,edx
c0026ed5:	88 c1                	mov    cl,al
c0026ed7:	d3 ef                	shr    edi,cl
c0026ed9:	b9 20 00 00 00       	mov    ecx,0x20
c0026ede:	29 c1                	sub    ecx,eax
c0026ee0:	d3 e2                	shl    edx,cl
c0026ee2:	31 c0                	xor    eax,eax
c0026ee4:	85 d2                	test   edx,edx
c0026ee6:	0f 95 c0             	setne  al
c0026ee9:	09 f8                	or     eax,edi
c0026eeb:	29 c3                	sub    ebx,eax
c0026eed:	89 d8                	mov    eax,ebx
c0026eef:	eb 51                	jmp    c0026f42 <__addsf3+0x28c>
c0026ef1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ef4:	40                   	inc    eax
c0026ef5:	a8 fe                	test   al,0xfe
c0026ef7:	75 3d                	jne    c0026f36 <__addsf3+0x280>
c0026ef9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026efd:	0f 85 a7 00 00 00    	jne    c0026faa <__addsf3+0x2f4>
c0026f03:	85 d2                	test   edx,edx
c0026f05:	75 12                	jne    c0026f19 <__addsf3+0x263>
c0026f07:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f0a:	85 db                	test   ebx,ebx
c0026f0c:	0f 85 9d 00 00 00    	jne    c0026faf <__addsf3+0x2f9>
c0026f12:	31 ff                	xor    edi,edi
c0026f14:	e9 96 00 00 00       	jmp    c0026faf <__addsf3+0x2f9>
c0026f19:	85 db                	test   ebx,ebx
c0026f1b:	0f 84 8e 00 00 00    	je     c0026faf <__addsf3+0x2f9>
c0026f21:	89 d0                	mov    eax,edx
c0026f23:	29 d8                	sub    eax,ebx
c0026f25:	79 06                	jns    c0026f2d <__addsf3+0x277>
c0026f27:	89 d8                	mov    eax,ebx
c0026f29:	29 d0                	sub    eax,edx
c0026f2b:	eb 5a                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f2d:	bf 00 00 00 00       	mov    edi,0x0
c0026f32:	74 7b                	je     c0026faf <__addsf3+0x2f9>
c0026f34:	eb 4a                	jmp    c0026f80 <__addsf3+0x2ca>
c0026f36:	89 d0                	mov    eax,edx
c0026f38:	29 d8                	sub    eax,ebx
c0026f3a:	79 12                	jns    c0026f4e <__addsf3+0x298>
c0026f3c:	89 d8                	mov    eax,ebx
c0026f3e:	29 d0                	sub    eax,edx
c0026f40:	eb 09                	jmp    c0026f4b <__addsf3+0x295>
c0026f42:	85 c0                	test   eax,eax
c0026f44:	79 41                	jns    c0026f87 <__addsf3+0x2d1>
c0026f46:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f4b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f4e:	31 f6                	xor    esi,esi
c0026f50:	85 c0                	test   eax,eax
c0026f52:	74 33                	je     c0026f87 <__addsf3+0x2d1>
c0026f54:	0f bd c8             	bsr    ecx,eax
c0026f57:	83 f1 1f             	xor    ecx,0x1f
c0026f5a:	d3 e0                	shl    eax,cl
c0026f5c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f60:	39 ca                	cmp    edx,ecx
c0026f62:	7f 10                	jg     c0026f74 <__addsf3+0x2be>
c0026f64:	29 d1                	sub    ecx,edx
c0026f66:	41                   	inc    ecx
c0026f67:	d3 e8                	shr    eax,cl
c0026f69:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f6c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f72:	eb 13                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f74:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f77:	29 ce                	sub    esi,ecx
c0026f79:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f7e:	eb 07                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f80:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f83:	eb 02                	jmp    c0026f87 <__addsf3+0x2d1>
c0026f85:	31 c0                	xor    eax,eax
c0026f87:	89 c2                	mov    edx,eax
c0026f89:	c1 ea 08             	shr    edx,0x8
c0026f8c:	a8 7f                	test   al,0x7f
c0026f8e:	0f 95 c1             	setne  cl
c0026f91:	09 d1                	or     ecx,edx
c0026f93:	83 e1 01             	and    ecx,0x1
c0026f96:	c1 e8 07             	shr    eax,0x7
c0026f99:	21 c8                	and    eax,ecx
c0026f9b:	c1 e6 17             	shl    esi,0x17
c0026f9e:	09 d6                	or     esi,edx
c0026fa0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026fa3:	eb 0a                	jmp    c0026faf <__addsf3+0x2f9>
c0026fa5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026fa8:	eb 05                	jmp    c0026faf <__addsf3+0x2f9>
c0026faa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026faf:	89 f8                	mov    eax,edi
c0026fb1:	5a                   	pop    edx
c0026fb2:	59                   	pop    ecx
c0026fb3:	5b                   	pop    ebx
c0026fb4:	5e                   	pop    esi
c0026fb5:	5f                   	pop    edi
c0026fb6:	5d                   	pop    ebp
c0026fb7:	c3                   	ret    

c0026fb8 <__subsf3>:
c0026fb8:	55                   	push   ebp
c0026fb9:	89 e5                	mov    ebp,esp
c0026fbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fbe:	05 00 00 00 80       	add    eax,0x80000000
c0026fc3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026fc6:	5d                   	pop    ebp
c0026fc7:	e9 ea fc ff ff       	jmp    c0026cb6 <__addsf3>

c0026fcc <__negsf2>:
c0026fcc:	55                   	push   ebp
c0026fcd:	89 e5                	mov    ebp,esp
c0026fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fd2:	05 00 00 00 80       	add    eax,0x80000000
c0026fd7:	5d                   	pop    ebp
c0026fd8:	c3                   	ret    

c0026fd9 <__mulsf3>:
c0026fd9:	55                   	push   ebp
c0026fda:	89 e5                	mov    ebp,esp
c0026fdc:	57                   	push   edi
c0026fdd:	56                   	push   esi
c0026fde:	53                   	push   ebx
c0026fdf:	83 ec 1c             	sub    esp,0x1c
c0026fe2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fe5:	89 f0                	mov    eax,esi
c0026fe7:	89 f1                	mov    ecx,esi
c0026fe9:	c1 f9 17             	sar    ecx,0x17
c0026fec:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fef:	c1 e0 08             	shl    eax,0x8
c0026ff2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026ff7:	89 c1                	mov    ecx,eax
c0026ff9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ffc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fff:	89 c7                	mov    edi,eax
c0027001:	c1 ff 17             	sar    edi,0x17
c0027004:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027008:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002700b:	89 f8                	mov    eax,edi
c002700d:	0f b6 c0             	movzx  eax,al
c0027010:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027013:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027017:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002701a:	42                   	inc    edx
c002701b:	80 e2 fe             	and    dl,0xfe
c002701e:	75 7b                	jne    c002709b <__mulsf3+0xc2>
c0027020:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027024:	74 54                	je     c002707a <__mulsf3+0xa1>
c0027026:	85 c9                	test   ecx,ecx
c0027028:	0f 85 64 01 00 00    	jne    c0027192 <__mulsf3+0x1b9>
c002702e:	8d 57 01             	lea    edx,[edi+0x1]
c0027031:	80 e2 fe             	and    dl,0xfe
c0027034:	75 1f                	jne    c0027055 <__mulsf3+0x7c>
c0027036:	85 c0                	test   eax,eax
c0027038:	b8 00 00 00 00       	mov    eax,0x0
c002703d:	74 29                	je     c0027068 <__mulsf3+0x8f>
c002703f:	53                   	push   ebx
c0027040:	53                   	push   ebx
c0027041:	50                   	push   eax
c0027042:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027045:	e8 96 05 00 00       	call   c00275e0 <__nesf2>
c002704a:	83 c4 10             	add    esp,0x10
c002704d:	85 c0                	test   eax,eax
c002704f:	0f 85 3a 01 00 00    	jne    c002718f <__mulsf3+0x1b6>
c0027055:	85 ff                	test   edi,edi
c0027057:	0f 89 35 01 00 00    	jns    c0027192 <__mulsf3+0x1b9>
c002705d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027063:	e9 2a 01 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c0027068:	51                   	push   ecx
c0027069:	51                   	push   ecx
c002706a:	50                   	push   eax
c002706b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002706e:	e8 6d 05 00 00       	call   c00275e0 <__nesf2>
c0027073:	83 c4 10             	add    esp,0x10
c0027076:	85 c0                	test   eax,eax
c0027078:	eb 15                	jmp    c002708f <__mulsf3+0xb6>
c002707a:	85 c9                	test   ecx,ecx
c002707c:	74 0b                	je     c0027089 <__mulsf3+0xb0>
c002707e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027081:	01 c9                	add    ecx,ecx
c0027083:	78 16                	js     c002709b <__mulsf3+0xc2>
c0027085:	89 d3                	mov    ebx,edx
c0027087:	eb f5                	jmp    c002707e <__mulsf3+0xa5>
c0027089:	89 f8                	mov    eax,edi
c002708b:	f7 d0                	not    eax
c002708d:	84 c0                	test   al,al
c002708f:	75 c4                	jne    c0027055 <__mulsf3+0x7c>
c0027091:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027096:	e9 f7 00 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c002709b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002709e:	c1 e6 08             	shl    esi,0x8
c00270a1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00270a7:	8d 57 01             	lea    edx,[edi+0x1]
c00270aa:	80 e2 fe             	and    dl,0xfe
c00270ad:	75 63                	jne    c0027112 <__mulsf3+0x139>
c00270af:	85 c0                	test   eax,eax
c00270b1:	74 2f                	je     c00270e2 <__mulsf3+0x109>
c00270b3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270b7:	0f 89 d2 00 00 00    	jns    c002718f <__mulsf3+0x1b6>
c00270bd:	52                   	push   edx
c00270be:	52                   	push   edx
c00270bf:	6a 00                	push   0x0
c00270c1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270c4:	e8 dc 04 00 00       	call   c00275a5 <__eqsf2>
c00270c9:	83 c4 10             	add    esp,0x10
c00270cc:	85 c0                	test   eax,eax
c00270ce:	0f 85 bb 00 00 00    	jne    c002718f <__mulsf3+0x1b6>
c00270d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270d7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270dd:	e9 b0 00 00 00       	jmp    c0027192 <__mulsf3+0x1b9>
c00270e2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270e5:	50                   	push   eax
c00270e6:	50                   	push   eax
c00270e7:	6a 00                	push   0x0
c00270e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270ec:	e8 b4 04 00 00       	call   c00275a5 <__eqsf2>
c00270f1:	83 c4 10             	add    esp,0x10
c00270f4:	85 c0                	test   eax,eax
c00270f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270f9:	75 0c                	jne    c0027107 <__mulsf3+0x12e>
c00270fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270ff:	0f 89 8a 00 00 00    	jns    c002718f <__mulsf3+0x1b6>
c0027105:	eb cd                	jmp    c00270d4 <__mulsf3+0xfb>
c0027107:	8d 43 ff             	lea    eax,[ebx-0x1]
c002710a:	01 f6                	add    esi,esi
c002710c:	78 04                	js     c0027112 <__mulsf3+0x139>
c002710e:	89 c3                	mov    ebx,eax
c0027110:	eb f5                	jmp    c0027107 <__mulsf3+0x12e>
c0027112:	89 c8                	mov    eax,ecx
c0027114:	0d 00 00 00 80       	or     eax,0x80000000
c0027119:	81 ce 00 00 00 80    	or     esi,0x80000000
c002711f:	f7 e6                	mul    esi
c0027121:	85 c0                	test   eax,eax
c0027123:	0f 95 c0             	setne  al
c0027126:	0f b6 c0             	movzx  eax,al
c0027129:	09 c2                	or     edx,eax
c002712b:	78 03                	js     c0027130 <__mulsf3+0x157>
c002712d:	01 d2                	add    edx,edx
c002712f:	4b                   	dec    ebx
c0027130:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027136:	7f 22                	jg     c002715a <__mulsf3+0x181>
c0027138:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002713e:	85 db                	test   ebx,ebx
c0027140:	7f 23                	jg     c0027165 <__mulsf3+0x18c>
c0027142:	83 fb e9             	cmp    ebx,0xffffffe9
c0027145:	7c 1a                	jl     c0027161 <__mulsf3+0x188>
c0027147:	81 ca 00 00 00 80    	or     edx,0x80000000
c002714d:	b9 01 00 00 00       	mov    ecx,0x1
c0027152:	29 d9                	sub    ecx,ebx
c0027154:	d3 ea                	shr    edx,cl
c0027156:	31 db                	xor    ebx,ebx
c0027158:	eb 0b                	jmp    c0027165 <__mulsf3+0x18c>
c002715a:	bb ff 00 00 00       	mov    ebx,0xff
c002715f:	eb 02                	jmp    c0027163 <__mulsf3+0x18a>
c0027161:	31 db                	xor    ebx,ebx
c0027163:	31 d2                	xor    edx,edx
c0027165:	89 d0                	mov    eax,edx
c0027167:	c1 e8 08             	shr    eax,0x8
c002716a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002716d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027173:	09 fb                	or     ebx,edi
c0027175:	c1 e3 17             	shl    ebx,0x17
c0027178:	09 c3                	or     ebx,eax
c002717a:	f6 c2 7f             	test   dl,0x7f
c002717d:	0f 95 c1             	setne  cl
c0027180:	09 c8                	or     eax,ecx
c0027182:	83 e0 01             	and    eax,0x1
c0027185:	c1 ea 07             	shr    edx,0x7
c0027188:	21 c2                	and    edx,eax
c002718a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002718d:	eb 03                	jmp    c0027192 <__mulsf3+0x1b9>
c002718f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027192:	89 f0                	mov    eax,esi
c0027194:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027197:	5b                   	pop    ebx
c0027198:	5e                   	pop    esi
c0027199:	5f                   	pop    edi
c002719a:	5d                   	pop    ebp
c002719b:	c3                   	ret    

c002719c <__divsf3>:
c002719c:	55                   	push   ebp
c002719d:	89 e5                	mov    ebp,esp
c002719f:	57                   	push   edi
c00271a0:	56                   	push   esi
c00271a1:	53                   	push   ebx
c00271a2:	83 ec 1c             	sub    esp,0x1c
c00271a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00271a8:	89 d8                	mov    eax,ebx
c00271aa:	89 d9                	mov    ecx,ebx
c00271ac:	c1 f9 17             	sar    ecx,0x17
c00271af:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00271b2:	c1 e0 08             	shl    eax,0x8
c00271b5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271ba:	89 c1                	mov    ecx,eax
c00271bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00271bf:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00271c2:	89 c7                	mov    edi,eax
c00271c4:	c1 ff 17             	sar    edi,0x17
c00271c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00271cb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00271ce:	89 f8                	mov    eax,edi
c00271d0:	0f b6 c0             	movzx  eax,al
c00271d3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271d6:	29 c6                	sub    esi,eax
c00271d8:	83 c6 7f             	add    esi,0x7f
c00271db:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271de:	42                   	inc    edx
c00271df:	80 e2 fe             	and    dl,0xfe
c00271e2:	0f 85 9c 00 00 00    	jne    c0027284 <__divsf3+0xe8>
c00271e8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271ec:	74 33                	je     c0027221 <__divsf3+0x85>
c00271ee:	85 c9                	test   ecx,ecx
c00271f0:	0f 85 c7 01 00 00    	jne    c00273bd <__divsf3+0x221>
c00271f6:	8d 57 01             	lea    edx,[edi+0x1]
c00271f9:	80 e2 fe             	and    dl,0xfe
c00271fc:	75 2f                	jne    c002722d <__divsf3+0x91>
c00271fe:	85 c0                	test   eax,eax
c0027200:	74 2b                	je     c002722d <__divsf3+0x91>
c0027202:	51                   	push   ecx
c0027203:	51                   	push   ecx
c0027204:	6a 00                	push   0x0
c0027206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027209:	e8 d2 03 00 00       	call   c00275e0 <__nesf2>
c002720e:	83 c4 10             	add    esp,0x10
c0027211:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027214:	85 c0                	test   eax,eax
c0027216:	0f 85 a1 01 00 00    	jne    c00273bd <__divsf3+0x221>
c002721c:	e9 92 01 00 00       	jmp    c00273b3 <__divsf3+0x217>
c0027221:	85 c9                	test   ecx,ecx
c0027223:	75 1b                	jne    c0027240 <__divsf3+0xa4>
c0027225:	8d 57 01             	lea    edx,[edi+0x1]
c0027228:	80 e2 fe             	and    dl,0xfe
c002722b:	74 1e                	je     c002724b <__divsf3+0xaf>
c002722d:	85 ff                	test   edi,edi
c002722f:	0f 89 88 01 00 00    	jns    c00273bd <__divsf3+0x221>
c0027235:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002723b:	e9 7d 01 00 00       	jmp    c00273bd <__divsf3+0x221>
c0027240:	8d 56 ff             	lea    edx,[esi-0x1]
c0027243:	01 c9                	add    ecx,ecx
c0027245:	78 3d                	js     c0027284 <__divsf3+0xe8>
c0027247:	89 d6                	mov    esi,edx
c0027249:	eb f5                	jmp    c0027240 <__divsf3+0xa4>
c002724b:	85 c0                	test   eax,eax
c002724d:	b8 00 00 00 00       	mov    eax,0x0
c0027252:	74 18                	je     c002726c <__divsf3+0xd0>
c0027254:	52                   	push   edx
c0027255:	52                   	push   edx
c0027256:	50                   	push   eax
c0027257:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002725a:	e8 81 03 00 00       	call   c00275e0 <__nesf2>
c002725f:	83 c4 10             	add    esp,0x10
c0027262:	85 c0                	test   eax,eax
c0027264:	0f 85 50 01 00 00    	jne    c00273ba <__divsf3+0x21e>
c002726a:	eb c1                	jmp    c002722d <__divsf3+0x91>
c002726c:	56                   	push   esi
c002726d:	56                   	push   esi
c002726e:	50                   	push   eax
c002726f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027272:	e8 69 03 00 00       	call   c00275e0 <__nesf2>
c0027277:	83 c4 10             	add    esp,0x10
c002727a:	85 c0                	test   eax,eax
c002727c:	0f 84 31 01 00 00    	je     c00273b3 <__divsf3+0x217>
c0027282:	eb a9                	jmp    c002722d <__divsf3+0x91>
c0027284:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027287:	c1 e3 08             	shl    ebx,0x8
c002728a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027290:	8d 57 01             	lea    edx,[edi+0x1]
c0027293:	80 e2 fe             	and    dl,0xfe
c0027296:	75 71                	jne    c0027309 <__divsf3+0x16d>
c0027298:	85 c0                	test   eax,eax
c002729a:	ba 00 00 00 00       	mov    edx,0x0
c002729f:	74 2f                	je     c00272d0 <__divsf3+0x134>
c00272a1:	51                   	push   ecx
c00272a2:	51                   	push   ecx
c00272a3:	52                   	push   edx
c00272a4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a7:	e8 f9 02 00 00       	call   c00275a5 <__eqsf2>
c00272ac:	83 c4 10             	add    esp,0x10
c00272af:	85 c0                	test   eax,eax
c00272b1:	0f 85 03 01 00 00    	jne    c00273ba <__divsf3+0x21e>
c00272b7:	31 d2                	xor    edx,edx
c00272b9:	89 d3                	mov    ebx,edx
c00272bb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00272be:	31 f8                	xor    eax,edi
c00272c0:	0f 89 f7 00 00 00    	jns    c00273bd <__divsf3+0x221>
c00272c6:	bb 00 00 00 80       	mov    ebx,0x80000000
c00272cb:	e9 ed 00 00 00       	jmp    c00273bd <__divsf3+0x221>
c00272d0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272d3:	50                   	push   eax
c00272d4:	50                   	push   eax
c00272d5:	52                   	push   edx
c00272d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272d9:	e8 c7 02 00 00       	call   c00275a5 <__eqsf2>
c00272de:	83 c4 10             	add    esp,0x10
c00272e1:	85 c0                	test   eax,eax
c00272e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272e6:	75 16                	jne    c00272fe <__divsf3+0x162>
c00272e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272eb:	31 fb                	xor    ebx,edi
c00272ed:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272f3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272f9:	e9 bf 00 00 00       	jmp    c00273bd <__divsf3+0x221>
c00272fe:	8d 46 01             	lea    eax,[esi+0x1]
c0027301:	01 db                	add    ebx,ebx
c0027303:	78 04                	js     c0027309 <__divsf3+0x16d>
c0027305:	89 c6                	mov    esi,eax
c0027307:	eb f5                	jmp    c00272fe <__divsf3+0x162>
c0027309:	89 c8                	mov    eax,ecx
c002730b:	0d 00 00 00 80       	or     eax,0x80000000
c0027310:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027316:	31 d2                	xor    edx,edx
c0027318:	39 d8                	cmp    eax,ebx
c002731a:	72 07                	jb     c0027323 <__divsf3+0x187>
c002731c:	29 d8                	sub    eax,ebx
c002731e:	ba 01 00 00 00       	mov    edx,0x1
c0027323:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002732a:	01 d2                	add    edx,edx
c002732c:	89 c1                	mov    ecx,eax
c002732e:	01 c0                	add    eax,eax
c0027330:	85 c9                	test   ecx,ecx
c0027332:	78 04                	js     c0027338 <__divsf3+0x19c>
c0027334:	39 c3                	cmp    ebx,eax
c0027336:	77 05                	ja     c002733d <__divsf3+0x1a1>
c0027338:	29 d8                	sub    eax,ebx
c002733a:	83 ca 01             	or     edx,0x1
c002733d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027340:	75 e8                	jne    c002732a <__divsf3+0x18e>
c0027342:	85 c0                	test   eax,eax
c0027344:	0f 95 c0             	setne  al
c0027347:	0f b6 c0             	movzx  eax,al
c002734a:	c1 e2 06             	shl    edx,0x6
c002734d:	09 c2                	or     edx,eax
c002734f:	78 03                	js     c0027354 <__divsf3+0x1b8>
c0027351:	01 d2                	add    edx,edx
c0027353:	4e                   	dec    esi
c0027354:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002735a:	7f 22                	jg     c002737e <__divsf3+0x1e2>
c002735c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027362:	85 f6                	test   esi,esi
c0027364:	7f 23                	jg     c0027389 <__divsf3+0x1ed>
c0027366:	83 fe e9             	cmp    esi,0xffffffe9
c0027369:	7c 1a                	jl     c0027385 <__divsf3+0x1e9>
c002736b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027371:	b9 01 00 00 00       	mov    ecx,0x1
c0027376:	29 f1                	sub    ecx,esi
c0027378:	d3 ea                	shr    edx,cl
c002737a:	31 f6                	xor    esi,esi
c002737c:	eb 0b                	jmp    c0027389 <__divsf3+0x1ed>
c002737e:	be ff 00 00 00       	mov    esi,0xff
c0027383:	eb 02                	jmp    c0027387 <__divsf3+0x1eb>
c0027385:	31 f6                	xor    esi,esi
c0027387:	31 d2                	xor    edx,edx
c0027389:	89 d0                	mov    eax,edx
c002738b:	c1 e8 08             	shr    eax,0x8
c002738e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027391:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027397:	09 fe                	or     esi,edi
c0027399:	c1 e6 17             	shl    esi,0x17
c002739c:	09 c6                	or     esi,eax
c002739e:	f6 c2 7f             	test   dl,0x7f
c00273a1:	0f 95 c1             	setne  cl
c00273a4:	09 c8                	or     eax,ecx
c00273a6:	83 e0 01             	and    eax,0x1
c00273a9:	c1 ea 07             	shr    edx,0x7
c00273ac:	21 c2                	and    edx,eax
c00273ae:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00273b1:	eb 0a                	jmp    c00273bd <__divsf3+0x221>
c00273b3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00273b8:	eb 03                	jmp    c00273bd <__divsf3+0x221>
c00273ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273bd:	89 d8                	mov    eax,ebx
c00273bf:	8d 65 f4             	lea    esp,[ebp-0xc]
c00273c2:	5b                   	pop    ebx
c00273c3:	5e                   	pop    esi
c00273c4:	5f                   	pop    edi
c00273c5:	5d                   	pop    ebp
c00273c6:	c3                   	ret    

c00273c7 <__floatsisf>:
c00273c7:	55                   	push   ebp
c00273c8:	89 e5                	mov    ebp,esp
c00273ca:	53                   	push   ebx
c00273cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273ce:	85 d2                	test   edx,edx
c00273d0:	7e 2b                	jle    c00273fd <__floatsisf+0x36>
c00273d2:	0f bd ca             	bsr    ecx,edx
c00273d5:	83 f1 1f             	xor    ecx,0x1f
c00273d8:	d3 e2                	shl    edx,cl
c00273da:	89 d0                	mov    eax,edx
c00273dc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e1:	89 c3                	mov    ebx,eax
c00273e3:	c1 eb 08             	shr    ebx,0x8
c00273e6:	80 e2 7f             	and    dl,0x7f
c00273e9:	0f 95 c2             	setne  dl
c00273ec:	09 da                	or     edx,ebx
c00273ee:	83 e2 01             	and    edx,0x1
c00273f1:	c1 e8 07             	shr    eax,0x7
c00273f4:	21 c2                	and    edx,eax
c00273f6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273fb:	eb 32                	jmp    c002742f <__floatsisf+0x68>
c00273fd:	b8 00 00 00 00       	mov    eax,0x0
c0027402:	74 34                	je     c0027438 <__floatsisf+0x71>
c0027404:	f7 da                	neg    edx
c0027406:	0f bd ca             	bsr    ecx,edx
c0027409:	83 f1 1f             	xor    ecx,0x1f
c002740c:	d3 e2                	shl    edx,cl
c002740e:	89 d0                	mov    eax,edx
c0027410:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027415:	89 c3                	mov    ebx,eax
c0027417:	c1 eb 08             	shr    ebx,0x8
c002741a:	80 e2 7f             	and    dl,0x7f
c002741d:	0f 95 c2             	setne  dl
c0027420:	09 da                	or     edx,ebx
c0027422:	83 e2 01             	and    edx,0x1
c0027425:	c1 e8 07             	shr    eax,0x7
c0027428:	21 c2                	and    edx,eax
c002742a:	b8 9e 01 00 00       	mov    eax,0x19e
c002742f:	29 c8                	sub    eax,ecx
c0027431:	c1 e0 17             	shl    eax,0x17
c0027434:	09 d8                	or     eax,ebx
c0027436:	01 d0                	add    eax,edx
c0027438:	5b                   	pop    ebx
c0027439:	5d                   	pop    ebp
c002743a:	c3                   	ret    

c002743b <__floatunsisf>:
c002743b:	55                   	push   ebp
c002743c:	89 e5                	mov    ebp,esp
c002743e:	53                   	push   ebx
c002743f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027442:	31 c0                	xor    eax,eax
c0027444:	85 d2                	test   edx,edx
c0027446:	74 32                	je     c002747a <__floatunsisf+0x3f>
c0027448:	0f bd ca             	bsr    ecx,edx
c002744b:	83 f1 1f             	xor    ecx,0x1f
c002744e:	d3 e2                	shl    edx,cl
c0027450:	89 d0                	mov    eax,edx
c0027452:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027457:	89 c3                	mov    ebx,eax
c0027459:	c1 eb 08             	shr    ebx,0x8
c002745c:	80 e2 7f             	and    dl,0x7f
c002745f:	0f 95 c2             	setne  dl
c0027462:	09 da                	or     edx,ebx
c0027464:	83 e2 01             	and    edx,0x1
c0027467:	c1 e8 07             	shr    eax,0x7
c002746a:	21 c2                	and    edx,eax
c002746c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027471:	29 c8                	sub    eax,ecx
c0027473:	c1 e0 17             	shl    eax,0x17
c0027476:	09 d8                	or     eax,ebx
c0027478:	01 d0                	add    eax,edx
c002747a:	5b                   	pop    ebx
c002747b:	5d                   	pop    ebp
c002747c:	c3                   	ret    

c002747d <__fixsfsi>:
c002747d:	55                   	push   ebp
c002747e:	89 e5                	mov    ebp,esp
c0027480:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027483:	89 d1                	mov    ecx,edx
c0027485:	c1 e1 08             	shl    ecx,0x8
c0027488:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002748e:	c1 fa 17             	sar    edx,0x17
c0027491:	78 1c                	js     c00274af <__fixsfsi+0x32>
c0027493:	83 ea 7f             	sub    edx,0x7f
c0027496:	31 c0                	xor    eax,eax
c0027498:	83 fa 1e             	cmp    edx,0x1e
c002749b:	77 40                	ja     c00274dd <__fixsfsi+0x60>
c002749d:	89 c8                	mov    eax,ecx
c002749f:	0d 00 00 00 80       	or     eax,0x80000000
c00274a4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a9:	29 d1                	sub    ecx,edx
c00274ab:	d3 e8                	shr    eax,cl
c00274ad:	eb 2e                	jmp    c00274dd <__fixsfsi+0x60>
c00274af:	31 c0                	xor    eax,eax
c00274b1:	81 c2 81 00 00 00    	add    edx,0x81
c00274b7:	78 24                	js     c00274dd <__fixsfsi+0x60>
c00274b9:	83 fa 1e             	cmp    edx,0x1e
c00274bc:	7e 09                	jle    c00274c7 <__fixsfsi+0x4a>
c00274be:	83 fa 1f             	cmp    edx,0x1f
c00274c1:	75 18                	jne    c00274db <__fixsfsi+0x5e>
c00274c3:	85 c9                	test   ecx,ecx
c00274c5:	75 14                	jne    c00274db <__fixsfsi+0x5e>
c00274c7:	89 c8                	mov    eax,ecx
c00274c9:	0d 00 00 00 80       	or     eax,0x80000000
c00274ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274d3:	29 d1                	sub    ecx,edx
c00274d5:	d3 e8                	shr    eax,cl
c00274d7:	f7 d8                	neg    eax
c00274d9:	eb 02                	jmp    c00274dd <__fixsfsi+0x60>
c00274db:	31 c0                	xor    eax,eax
c00274dd:	5d                   	pop    ebp
c00274de:	c3                   	ret    

c00274df <__fixunssfsi>:
c00274df:	55                   	push   ebp
c00274e0:	89 e5                	mov    ebp,esp
c00274e2:	53                   	push   ebx
c00274e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274e6:	89 d3                	mov    ebx,edx
c00274e8:	c1 fb 17             	sar    ebx,0x17
c00274eb:	83 eb 7f             	sub    ebx,0x7f
c00274ee:	31 c0                	xor    eax,eax
c00274f0:	83 fb 1f             	cmp    ebx,0x1f
c00274f3:	77 18                	ja     c002750d <__fixunssfsi+0x2e>
c00274f5:	89 d0                	mov    eax,edx
c00274f7:	c1 e0 08             	shl    eax,0x8
c00274fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274ff:	0d 00 00 00 80       	or     eax,0x80000000
c0027504:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027509:	29 d9                	sub    ecx,ebx
c002750b:	d3 e8                	shr    eax,cl
c002750d:	5b                   	pop    ebx
c002750e:	5d                   	pop    ebp
c002750f:	c3                   	ret    

c0027510 <__cmpsf2>:
c0027510:	55                   	push   ebp
c0027511:	89 e5                	mov    ebp,esp
c0027513:	57                   	push   edi
c0027514:	56                   	push   esi
c0027515:	53                   	push   ebx
c0027516:	83 ec 24             	sub    esp,0x24
c0027519:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002751c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002751f:	e8 4f 10 00 00       	call   c0028573 <__truncdfsf2>
c0027524:	5a                   	pop    edx
c0027525:	59                   	pop    ecx
c0027526:	89 c3                	mov    ebx,eax
c0027528:	c1 e8 17             	shr    eax,0x17
c002752b:	0f b6 f0             	movzx  esi,al
c002752e:	89 d8                	mov    eax,ebx
c0027530:	c1 e8 1f             	shr    eax,0x1f
c0027533:	31 c6                	xor    esi,eax
c0027535:	c1 e3 08             	shl    ebx,0x8
c0027538:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002753b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002753e:	e8 30 10 00 00       	call   c0028573 <__truncdfsf2>
c0027543:	83 c4 10             	add    esp,0x10
c0027546:	89 c1                	mov    ecx,eax
c0027548:	c1 e9 17             	shr    ecx,0x17
c002754b:	0f b6 c9             	movzx  ecx,cl
c002754e:	89 c7                	mov    edi,eax
c0027550:	c1 ef 1f             	shr    edi,0x1f
c0027553:	89 ca                	mov    edx,ecx
c0027555:	31 fa                	xor    edx,edi
c0027557:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002755a:	c1 e0 08             	shl    eax,0x8
c002755d:	89 c2                	mov    edx,eax
c002755f:	89 d8                	mov    eax,ebx
c0027561:	09 d0                	or     eax,edx
c0027563:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027568:	09 f0                	or     eax,esi
c002756a:	75 08                	jne    c0027574 <__cmpsf2+0x64>
c002756c:	31 c0                	xor    eax,eax
c002756e:	39 f9                	cmp    ecx,edi
c0027570:	75 0c                	jne    c002757e <__cmpsf2+0x6e>
c0027572:	eb 29                	jmp    c002759d <__cmpsf2+0x8d>
c0027574:	b8 01 00 00 00       	mov    eax,0x1
c0027579:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002757c:	7f 1f                	jg     c002759d <__cmpsf2+0x8d>
c002757e:	83 c8 ff             	or     eax,0xffffffff
c0027581:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027584:	7c 17                	jl     c002759d <__cmpsf2+0x8d>
c0027586:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002758c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027592:	b8 01 00 00 00       	mov    eax,0x1
c0027597:	39 d3                	cmp    ebx,edx
c0027599:	77 02                	ja     c002759d <__cmpsf2+0x8d>
c002759b:	19 c0                	sbb    eax,eax
c002759d:	8d 65 f4             	lea    esp,[ebp-0xc]
c00275a0:	5b                   	pop    ebx
c00275a1:	5e                   	pop    esi
c00275a2:	5f                   	pop    edi
c00275a3:	5d                   	pop    ebp
c00275a4:	c3                   	ret    

c00275a5 <__eqsf2>:
c00275a5:	55                   	push   ebp
c00275a6:	89 e5                	mov    ebp,esp
c00275a8:	83 ec 24             	sub    esp,0x24
c00275ab:	6a 01                	push   0x1
c00275ad:	83 ec 0c             	sub    esp,0xc
c00275b0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275b3:	e8 df 10 00 00       	call   c0028697 <__extendsfdf2>
c00275b8:	83 c4 10             	add    esp,0x10
c00275bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275c1:	52                   	push   edx
c00275c2:	50                   	push   eax
c00275c3:	50                   	push   eax
c00275c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275c7:	e8 cb 10 00 00       	call   c0028697 <__extendsfdf2>
c00275cc:	59                   	pop    ecx
c00275cd:	59                   	pop    ecx
c00275ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275d1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275d4:	52                   	push   edx
c00275d5:	50                   	push   eax
c00275d6:	e8 35 ff ff ff       	call   c0027510 <__cmpsf2>
c00275db:	83 c4 20             	add    esp,0x20
c00275de:	c9                   	leave  
c00275df:	c3                   	ret    

c00275e0 <__nesf2>:
c00275e0:	eb c3                	jmp    c00275a5 <__eqsf2>

c00275e2 <__gtsf2>:
c00275e2:	55                   	push   ebp
c00275e3:	89 e5                	mov    ebp,esp
c00275e5:	83 ec 24             	sub    esp,0x24
c00275e8:	6a ff                	push   0xffffffff
c00275ea:	83 ec 0c             	sub    esp,0xc
c00275ed:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275f0:	e8 a2 10 00 00       	call   c0028697 <__extendsfdf2>
c00275f5:	83 c4 10             	add    esp,0x10
c00275f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275fb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275fe:	52                   	push   edx
c00275ff:	50                   	push   eax
c0027600:	50                   	push   eax
c0027601:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027604:	e8 8e 10 00 00       	call   c0028697 <__extendsfdf2>
c0027609:	59                   	pop    ecx
c002760a:	59                   	pop    ecx
c002760b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002760e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027611:	52                   	push   edx
c0027612:	50                   	push   eax
c0027613:	e8 f8 fe ff ff       	call   c0027510 <__cmpsf2>
c0027618:	83 c4 20             	add    esp,0x20
c002761b:	c9                   	leave  
c002761c:	c3                   	ret    

c002761d <__gesf2>:
c002761d:	eb c3                	jmp    c00275e2 <__gtsf2>

c002761f <__ltsf2>:
c002761f:	eb 84                	jmp    c00275a5 <__eqsf2>

c0027621 <__lesf2>:
c0027621:	eb 82                	jmp    c00275a5 <__eqsf2>

c0027623 <__adddf3>:
c0027623:	55                   	push   ebp
c0027624:	89 e5                	mov    ebp,esp
c0027626:	57                   	push   edi
c0027627:	56                   	push   esi
c0027628:	53                   	push   ebx
c0027629:	83 ec 24             	sub    esp,0x24
c002762c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002762f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027632:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027635:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027638:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002763b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002763e:	89 c8                	mov    eax,ecx
c0027640:	89 ce                	mov    esi,ecx
c0027642:	c1 fe 14             	sar    esi,0x14
c0027645:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027648:	89 fb                	mov    ebx,edi
c002764a:	89 fa                	mov    edx,edi
c002764c:	c1 e2 0b             	shl    edx,0xb
c002764f:	c1 e0 0b             	shl    eax,0xb
c0027652:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027657:	c1 eb 15             	shr    ebx,0x15
c002765a:	09 d8                	or     eax,ebx
c002765c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002765f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027662:	c1 fe 14             	sar    esi,0x14
c0027665:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027668:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002766b:	89 f3                	mov    ebx,esi
c002766d:	c1 e3 0b             	shl    ebx,0xb
c0027670:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027673:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027676:	c1 e3 0b             	shl    ebx,0xb
c0027679:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002767f:	c1 ee 15             	shr    esi,0x15
c0027682:	09 f3                	or     ebx,esi
c0027684:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027687:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002768a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002768d:	0f 88 5f 02 00 00    	js     c00278f2 <__adddf3+0x2cf>
c0027693:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027696:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027699:	85 db                	test   ebx,ebx
c002769b:	0f 8e c7 00 00 00    	jle    c0027768 <__adddf3+0x145>
c00276a1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00276a8:	75 1a                	jne    c00276c4 <__adddf3+0xa1>
c00276aa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00276ad:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00276b0:	0f 84 b2 05 00 00    	je     c0027c68 <__adddf3+0x645>
c00276b6:	4b                   	dec    ebx
c00276b7:	75 23                	jne    c00276dc <__adddf3+0xb9>
c00276b9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00276bc:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00276bf:	e9 99 00 00 00       	jmp    c002775d <__adddf3+0x13a>
c00276c4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276c7:	f7 d6                	not    esi
c00276c9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00276cf:	0f 84 93 05 00 00    	je     c0027c68 <__adddf3+0x645>
c00276d5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276dc:	83 fb 1f             	cmp    ebx,0x1f
c00276df:	7e 42                	jle    c0027723 <__adddf3+0x100>
c00276e1:	83 fb 3f             	cmp    ebx,0x3f
c00276e4:	0f 8f 7e 05 00 00    	jg     c0027c68 <__adddf3+0x645>
c00276ea:	83 e3 1f             	and    ebx,0x1f
c00276ed:	89 d9                	mov    ecx,ebx
c00276ef:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276f2:	d3 ef                	shr    edi,cl
c00276f4:	31 db                	xor    ebx,ebx
c00276f6:	85 c9                	test   ecx,ecx
c00276f8:	74 15                	je     c002770f <__adddf3+0xec>
c00276fa:	be 20 00 00 00       	mov    esi,0x20
c00276ff:	29 ce                	sub    esi,ecx
c0027701:	89 f1                	mov    ecx,esi
c0027703:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027706:	d3 e6                	shl    esi,cl
c0027708:	31 db                	xor    ebx,ebx
c002770a:	85 f6                	test   esi,esi
c002770c:	0f 95 c3             	setne  bl
c002770f:	31 c9                	xor    ecx,ecx
c0027711:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027715:	0f 95 c1             	setne  cl
c0027718:	09 cf                	or     edi,ecx
c002771a:	09 fb                	or     ebx,edi
c002771c:	01 da                	add    edx,ebx
c002771e:	83 d0 00             	adc    eax,0x0
c0027721:	eb 3a                	jmp    c002775d <__adddf3+0x13a>
c0027723:	bf 20 00 00 00       	mov    edi,0x20
c0027728:	29 df                	sub    edi,ebx
c002772a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002772d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027730:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027733:	d3 e6                	shl    esi,cl
c0027735:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027738:	88 d9                	mov    cl,bl
c002773a:	d3 ef                	shr    edi,cl
c002773c:	09 fe                	or     esi,edi
c002773e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027741:	88 d9                	mov    cl,bl
c0027743:	d3 ef                	shr    edi,cl
c0027745:	89 fb                	mov    ebx,edi
c0027747:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002774a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002774d:	d3 e7                	shl    edi,cl
c002774f:	85 ff                	test   edi,edi
c0027751:	0f 95 c1             	setne  cl
c0027754:	0f b6 c9             	movzx  ecx,cl
c0027757:	09 ce                	or     esi,ecx
c0027759:	01 f2                	add    edx,esi
c002775b:	11 d8                	adc    eax,ebx
c002775d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027760:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027763:	e9 52 01 00 00       	jmp    c00278ba <__adddf3+0x297>
c0027768:	0f 84 d5 00 00 00    	je     c0027843 <__adddf3+0x220>
c002776e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027771:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027774:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027777:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002777a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027781:	75 20                	jne    c00277a3 <__adddf3+0x180>
c0027783:	89 d6                	mov    esi,edx
c0027785:	09 c6                	or     esi,eax
c0027787:	0f 84 db 04 00 00    	je     c0027c68 <__adddf3+0x645>
c002778d:	4b                   	dec    ebx
c002778e:	75 29                	jne    c00277b9 <__adddf3+0x196>
c0027790:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027793:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027796:	01 d1                	add    ecx,edx
c0027798:	11 c6                	adc    esi,eax
c002779a:	89 f0                	mov    eax,esi
c002779c:	89 ca                	mov    edx,ecx
c002779e:	e9 17 01 00 00       	jmp    c00278ba <__adddf3+0x297>
c00277a3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00277a6:	f7 d6                	not    esi
c00277a8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00277ae:	0f 84 b4 04 00 00    	je     c0027c68 <__adddf3+0x645>
c00277b4:	0d 00 00 00 80       	or     eax,0x80000000
c00277b9:	83 fb 1f             	cmp    ebx,0x1f
c00277bc:	7e 48                	jle    c0027806 <__adddf3+0x1e3>
c00277be:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277c1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277c4:	83 fb 3f             	cmp    ebx,0x3f
c00277c7:	0f 8f 9b 04 00 00    	jg     c0027c68 <__adddf3+0x645>
c00277cd:	83 e3 1f             	and    ebx,0x1f
c00277d0:	89 d9                	mov    ecx,ebx
c00277d2:	89 c7                	mov    edi,eax
c00277d4:	d3 ef                	shr    edi,cl
c00277d6:	31 db                	xor    ebx,ebx
c00277d8:	85 c9                	test   ecx,ecx
c00277da:	74 12                	je     c00277ee <__adddf3+0x1cb>
c00277dc:	be 20 00 00 00       	mov    esi,0x20
c00277e1:	29 ce                	sub    esi,ecx
c00277e3:	89 f1                	mov    ecx,esi
c00277e5:	d3 e0                	shl    eax,cl
c00277e7:	31 db                	xor    ebx,ebx
c00277e9:	85 c0                	test   eax,eax
c00277eb:	0f 95 c3             	setne  bl
c00277ee:	31 c0                	xor    eax,eax
c00277f0:	85 d2                	test   edx,edx
c00277f2:	0f 95 c0             	setne  al
c00277f5:	09 c7                	or     edi,eax
c00277f7:	09 fb                	or     ebx,edi
c00277f9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277ff:	01 da                	add    edx,ebx
c0027801:	83 d6 00             	adc    esi,0x0
c0027804:	eb 39                	jmp    c002783f <__adddf3+0x21c>
c0027806:	be 20 00 00 00       	mov    esi,0x20
c002780b:	29 de                	sub    esi,ebx
c002780d:	89 c7                	mov    edi,eax
c002780f:	89 f1                	mov    ecx,esi
c0027811:	d3 e7                	shl    edi,cl
c0027813:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027816:	89 d7                	mov    edi,edx
c0027818:	88 d9                	mov    cl,bl
c002781a:	d3 ef                	shr    edi,cl
c002781c:	89 f9                	mov    ecx,edi
c002781e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027821:	09 cf                	or     edi,ecx
c0027823:	88 d9                	mov    cl,bl
c0027825:	d3 e8                	shr    eax,cl
c0027827:	89 f1                	mov    ecx,esi
c0027829:	d3 e2                	shl    edx,cl
c002782b:	85 d2                	test   edx,edx
c002782d:	0f 95 c2             	setne  dl
c0027830:	0f b6 d2             	movzx  edx,dl
c0027833:	09 d7                	or     edi,edx
c0027835:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027838:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002783b:	01 fa                	add    edx,edi
c002783d:	11 c6                	adc    esi,eax
c002783f:	89 f0                	mov    eax,esi
c0027841:	eb 77                	jmp    c00278ba <__adddf3+0x297>
c0027843:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027846:	46                   	inc    esi
c0027847:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002784a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027850:	75 41                	jne    c0027893 <__adddf3+0x270>
c0027852:	89 d3                	mov    ebx,edx
c0027854:	09 c3                	or     ebx,eax
c0027856:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002785d:	75 27                	jne    c0027886 <__adddf3+0x263>
c002785f:	85 db                	test   ebx,ebx
c0027861:	0f 84 fb 03 00 00    	je     c0027c62 <__adddf3+0x63f>
c0027867:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002786a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002786d:	0f 84 f5 03 00 00    	je     c0027c68 <__adddf3+0x645>
c0027873:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027876:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027879:	85 c0                	test   eax,eax
c002787b:	0f 89 91 03 00 00    	jns    c0027c12 <__adddf3+0x5ef>
c0027881:	e9 85 03 00 00       	jmp    c0027c0b <__adddf3+0x5e8>
c0027886:	85 db                	test   ebx,ebx
c0027888:	0f 85 da 03 00 00    	jne    c0027c68 <__adddf3+0x645>
c002788e:	e9 cf 03 00 00       	jmp    c0027c62 <__adddf3+0x63f>
c0027893:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027896:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027899:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002789c:	f7 d1                	not    ecx
c002789e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278a4:	0f 84 70 03 00 00    	je     c0027c1a <__adddf3+0x5f7>
c00278aa:	d1 ea                	shr    edx,1
c00278ac:	89 c1                	mov    ecx,eax
c00278ae:	c1 e1 1f             	shl    ecx,0x1f
c00278b1:	09 ca                	or     edx,ecx
c00278b3:	d1 e8                	shr    eax,1
c00278b5:	e9 6f 03 00 00       	jmp    c0027c29 <__adddf3+0x606>
c00278ba:	85 c0                	test   eax,eax
c00278bc:	0f 89 67 03 00 00    	jns    c0027c29 <__adddf3+0x606>
c00278c2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00278c5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278c8:	f7 d1                	not    ecx
c00278ca:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278d0:	0f 84 44 03 00 00    	je     c0027c1a <__adddf3+0x5f7>
c00278d6:	89 d1                	mov    ecx,edx
c00278d8:	d1 e9                	shr    ecx,1
c00278da:	83 e2 01             	and    edx,0x1
c00278dd:	09 ca                	or     edx,ecx
c00278df:	89 c1                	mov    ecx,eax
c00278e1:	c1 e1 1f             	shl    ecx,0x1f
c00278e4:	09 ca                	or     edx,ecx
c00278e6:	d1 e8                	shr    eax,1
c00278e8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278ed:	e9 37 03 00 00       	jmp    c0027c29 <__adddf3+0x606>
c00278f2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278f5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278fb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027901:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027907:	29 de                	sub    esi,ebx
c0027909:	85 f6                	test   esi,esi
c002790b:	0f 8e bd 00 00 00    	jle    c00279ce <__adddf3+0x3ab>
c0027911:	85 db                	test   ebx,ebx
c0027913:	75 17                	jne    c002792c <__adddf3+0x309>
c0027915:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027918:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002791b:	0f 84 47 03 00 00    	je     c0027c68 <__adddf3+0x645>
c0027921:	4e                   	dec    esi
c0027922:	75 20                	jne    c0027944 <__adddf3+0x321>
c0027924:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027927:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002792a:	eb 5b                	jmp    c0027987 <__adddf3+0x364>
c002792c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002792f:	f7 d3                	not    ebx
c0027931:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027937:	0f 84 2b 03 00 00    	je     c0027c68 <__adddf3+0x645>
c002793d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027944:	83 fe 1f             	cmp    esi,0x1f
c0027947:	7e 49                	jle    c0027992 <__adddf3+0x36f>
c0027949:	83 fe 3f             	cmp    esi,0x3f
c002794c:	0f 8f 16 03 00 00    	jg     c0027c68 <__adddf3+0x645>
c0027952:	83 e6 1f             	and    esi,0x1f
c0027955:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027958:	89 f1                	mov    ecx,esi
c002795a:	d3 ef                	shr    edi,cl
c002795c:	31 db                	xor    ebx,ebx
c002795e:	85 f6                	test   esi,esi
c0027960:	74 13                	je     c0027975 <__adddf3+0x352>
c0027962:	b9 20 00 00 00       	mov    ecx,0x20
c0027967:	29 f1                	sub    ecx,esi
c0027969:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002796c:	d3 e6                	shl    esi,cl
c002796e:	31 db                	xor    ebx,ebx
c0027970:	85 f6                	test   esi,esi
c0027972:	0f 95 c3             	setne  bl
c0027975:	31 c9                	xor    ecx,ecx
c0027977:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002797b:	0f 95 c1             	setne  cl
c002797e:	09 cf                	or     edi,ecx
c0027980:	09 fb                	or     ebx,edi
c0027982:	29 da                	sub    edx,ebx
c0027984:	83 d8 00             	sbb    eax,0x0
c0027987:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002798a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002798d:	e9 aa 01 00 00       	jmp    c0027b3c <__adddf3+0x519>
c0027992:	bf 20 00 00 00       	mov    edi,0x20
c0027997:	29 f7                	sub    edi,esi
c0027999:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002799c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002799f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279a2:	d3 e3                	shl    ebx,cl
c00279a4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279a7:	89 f1                	mov    ecx,esi
c00279a9:	d3 ef                	shr    edi,cl
c00279ab:	09 fb                	or     ebx,edi
c00279ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00279b0:	89 f1                	mov    ecx,esi
c00279b2:	d3 ef                	shr    edi,cl
c00279b4:	89 fe                	mov    esi,edi
c00279b6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00279b9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00279bc:	d3 e7                	shl    edi,cl
c00279be:	85 ff                	test   edi,edi
c00279c0:	0f 95 c1             	setne  cl
c00279c3:	0f b6 c9             	movzx  ecx,cl
c00279c6:	09 cb                	or     ebx,ecx
c00279c8:	29 da                	sub    edx,ebx
c00279ca:	19 f0                	sbb    eax,esi
c00279cc:	eb b9                	jmp    c0027987 <__adddf3+0x364>
c00279ce:	0f 84 cd 00 00 00    	je     c0027aa1 <__adddf3+0x47e>
c00279d4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279d7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279da:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279dd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279e1:	75 1b                	jne    c00279fe <__adddf3+0x3db>
c00279e3:	89 d6                	mov    esi,edx
c00279e5:	09 c6                	or     esi,eax
c00279e7:	0f 84 7b 02 00 00    	je     c0027c68 <__adddf3+0x645>
c00279ed:	4b                   	dec    ebx
c00279ee:	75 24                	jne    c0027a14 <__adddf3+0x3f1>
c00279f0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279f3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279f6:	29 d1                	sub    ecx,edx
c00279f8:	19 c6                	sbb    esi,eax
c00279fa:	89 ca                	mov    edx,ecx
c00279fc:	eb 61                	jmp    c0027a5f <__adddf3+0x43c>
c00279fe:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027a01:	f7 d6                	not    esi
c0027a03:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027a09:	0f 84 59 02 00 00    	je     c0027c68 <__adddf3+0x645>
c0027a0f:	0d 00 00 00 80       	or     eax,0x80000000
c0027a14:	83 fb 1f             	cmp    ebx,0x1f
c0027a17:	7e 4d                	jle    c0027a66 <__adddf3+0x443>
c0027a19:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a1c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a1f:	83 fb 3f             	cmp    ebx,0x3f
c0027a22:	0f 8f 40 02 00 00    	jg     c0027c68 <__adddf3+0x645>
c0027a28:	83 e3 1f             	and    ebx,0x1f
c0027a2b:	89 d9                	mov    ecx,ebx
c0027a2d:	89 c7                	mov    edi,eax
c0027a2f:	d3 ef                	shr    edi,cl
c0027a31:	31 db                	xor    ebx,ebx
c0027a33:	85 c9                	test   ecx,ecx
c0027a35:	74 12                	je     c0027a49 <__adddf3+0x426>
c0027a37:	be 20 00 00 00       	mov    esi,0x20
c0027a3c:	29 ce                	sub    esi,ecx
c0027a3e:	89 f1                	mov    ecx,esi
c0027a40:	d3 e0                	shl    eax,cl
c0027a42:	31 db                	xor    ebx,ebx
c0027a44:	85 c0                	test   eax,eax
c0027a46:	0f 95 c3             	setne  bl
c0027a49:	31 c0                	xor    eax,eax
c0027a4b:	85 d2                	test   edx,edx
c0027a4d:	0f 95 c0             	setne  al
c0027a50:	09 c7                	or     edi,eax
c0027a52:	09 fb                	or     ebx,edi
c0027a54:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a57:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a5a:	29 da                	sub    edx,ebx
c0027a5c:	83 de 00             	sbb    esi,0x0
c0027a5f:	89 f0                	mov    eax,esi
c0027a61:	e9 d6 00 00 00       	jmp    c0027b3c <__adddf3+0x519>
c0027a66:	be 20 00 00 00       	mov    esi,0x20
c0027a6b:	29 de                	sub    esi,ebx
c0027a6d:	89 c7                	mov    edi,eax
c0027a6f:	89 f1                	mov    ecx,esi
c0027a71:	d3 e7                	shl    edi,cl
c0027a73:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a76:	89 d7                	mov    edi,edx
c0027a78:	88 d9                	mov    cl,bl
c0027a7a:	d3 ef                	shr    edi,cl
c0027a7c:	89 f9                	mov    ecx,edi
c0027a7e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a81:	09 cf                	or     edi,ecx
c0027a83:	88 d9                	mov    cl,bl
c0027a85:	d3 e8                	shr    eax,cl
c0027a87:	89 f1                	mov    ecx,esi
c0027a89:	d3 e2                	shl    edx,cl
c0027a8b:	85 d2                	test   edx,edx
c0027a8d:	0f 95 c2             	setne  dl
c0027a90:	0f b6 d2             	movzx  edx,dl
c0027a93:	09 d7                	or     edi,edx
c0027a95:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a98:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a9b:	29 fa                	sub    edx,edi
c0027a9d:	19 c6                	sbb    esi,eax
c0027a9f:	eb be                	jmp    c0027a5f <__adddf3+0x43c>
c0027aa1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027aa4:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027aa7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027aad:	75 6a                	jne    c0027b19 <__adddf3+0x4f6>
c0027aaf:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027ab3:	75 58                	jne    c0027b0d <__adddf3+0x4ea>
c0027ab5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027ab8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027abb:	89 d6                	mov    esi,edx
c0027abd:	09 c6                	or     esi,eax
c0027abf:	75 17                	jne    c0027ad8 <__adddf3+0x4b5>
c0027ac1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ac4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ac7:	85 db                	test   ebx,ebx
c0027ac9:	0f 85 99 01 00 00    	jne    c0027c68 <__adddf3+0x645>
c0027acf:	31 ff                	xor    edi,edi
c0027ad1:	31 c9                	xor    ecx,ecx
c0027ad3:	e9 90 01 00 00       	jmp    c0027c68 <__adddf3+0x645>
c0027ad8:	85 db                	test   ebx,ebx
c0027ada:	0f 84 88 01 00 00    	je     c0027c68 <__adddf3+0x645>
c0027ae0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ae3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ae6:	85 c0                	test   eax,eax
c0027ae8:	79 10                	jns    c0027afa <__adddf3+0x4d7>
c0027aea:	31 c9                	xor    ecx,ecx
c0027aec:	f7 da                	neg    edx
c0027aee:	0f 95 c1             	setne  cl
c0027af1:	01 c8                	add    eax,ecx
c0027af3:	f7 d8                	neg    eax
c0027af5:	e9 2f 01 00 00       	jmp    c0027c29 <__adddf3+0x606>
c0027afa:	31 ff                	xor    edi,edi
c0027afc:	31 c9                	xor    ecx,ecx
c0027afe:	89 c3                	mov    ebx,eax
c0027b00:	09 d3                	or     ebx,edx
c0027b02:	0f 84 60 01 00 00    	je     c0027c68 <__adddf3+0x645>
c0027b08:	e9 05 01 00 00       	jmp    c0027c12 <__adddf3+0x5ef>
c0027b0d:	31 ff                	xor    edi,edi
c0027b0f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b14:	e9 4f 01 00 00       	jmp    c0027c68 <__adddf3+0x645>
c0027b19:	89 c1                	mov    ecx,eax
c0027b1b:	89 d0                	mov    eax,edx
c0027b1d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027b20:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027b23:	89 ca                	mov    edx,ecx
c0027b25:	85 c9                	test   ecx,ecx
c0027b27:	79 2c                	jns    c0027b55 <__adddf3+0x532>
c0027b29:	31 c9                	xor    ecx,ecx
c0027b2b:	f7 d8                	neg    eax
c0027b2d:	0f 95 c1             	setne  cl
c0027b30:	01 ca                	add    edx,ecx
c0027b32:	f7 da                	neg    edx
c0027b34:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b37:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b3a:	eb 19                	jmp    c0027b55 <__adddf3+0x532>
c0027b3c:	85 c0                	test   eax,eax
c0027b3e:	0f 89 e5 00 00 00    	jns    c0027c29 <__adddf3+0x606>
c0027b44:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b49:	89 c1                	mov    ecx,eax
c0027b4b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b4e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b51:	89 d0                	mov    eax,edx
c0027b53:	89 ca                	mov    edx,ecx
c0027b55:	85 d2                	test   edx,edx
c0027b57:	74 59                	je     c0027bb2 <__adddf3+0x58f>
c0027b59:	0f bd da             	bsr    ebx,edx
c0027b5c:	83 f3 1f             	xor    ebx,0x1f
c0027b5f:	88 d9                	mov    cl,bl
c0027b61:	d3 e2                	shl    edx,cl
c0027b63:	bf 20 00 00 00       	mov    edi,0x20
c0027b68:	89 f9                	mov    ecx,edi
c0027b6a:	29 d9                	sub    ecx,ebx
c0027b6c:	89 c6                	mov    esi,eax
c0027b6e:	d3 ee                	shr    esi,cl
c0027b70:	09 d6                	or     esi,edx
c0027b72:	88 d9                	mov    cl,bl
c0027b74:	d3 e0                	shl    eax,cl
c0027b76:	89 c2                	mov    edx,eax
c0027b78:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b7b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b80:	39 d8                	cmp    eax,ebx
c0027b82:	7f 22                	jg     c0027ba6 <__adddf3+0x583>
c0027b84:	29 c3                	sub    ebx,eax
c0027b86:	43                   	inc    ebx
c0027b87:	88 d9                	mov    cl,bl
c0027b89:	d3 ea                	shr    edx,cl
c0027b8b:	29 df                	sub    edi,ebx
c0027b8d:	89 f9                	mov    ecx,edi
c0027b8f:	89 f0                	mov    eax,esi
c0027b91:	d3 e0                	shl    eax,cl
c0027b93:	09 c2                	or     edx,eax
c0027b95:	89 f0                	mov    eax,esi
c0027b97:	88 d9                	mov    cl,bl
c0027b99:	d3 e8                	shr    eax,cl
c0027b9b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b9e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027ba4:	eb 6f                	jmp    c0027c15 <__adddf3+0x5f2>
c0027ba6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba9:	29 d8                	sub    eax,ebx
c0027bab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bae:	89 f0                	mov    eax,esi
c0027bb0:	eb 59                	jmp    c0027c0b <__adddf3+0x5e8>
c0027bb2:	85 c0                	test   eax,eax
c0027bb4:	74 6a                	je     c0027c20 <__adddf3+0x5fd>
c0027bb6:	0f bd c8             	bsr    ecx,eax
c0027bb9:	83 f1 1f             	xor    ecx,0x1f
c0027bbc:	d3 e0                	shl    eax,cl
c0027bbe:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027bc1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027bc7:	83 c1 20             	add    ecx,0x20
c0027bca:	39 cb                	cmp    ebx,ecx
c0027bcc:	7f 35                	jg     c0027c03 <__adddf3+0x5e0>
c0027bce:	29 d9                	sub    ecx,ebx
c0027bd0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027bd3:	83 fe 1f             	cmp    esi,0x1f
c0027bd6:	7e 09                	jle    c0027be1 <__adddf3+0x5be>
c0027bd8:	83 e9 1f             	sub    ecx,0x1f
c0027bdb:	d3 e8                	shr    eax,cl
c0027bdd:	89 c3                	mov    ebx,eax
c0027bdf:	eb 11                	jmp    c0027bf2 <__adddf3+0x5cf>
c0027be1:	b9 20 00 00 00       	mov    ecx,0x20
c0027be6:	29 f1                	sub    ecx,esi
c0027be8:	89 c3                	mov    ebx,eax
c0027bea:	d3 e3                	shl    ebx,cl
c0027bec:	89 f1                	mov    ecx,esi
c0027bee:	d3 e8                	shr    eax,cl
c0027bf0:	89 c2                	mov    edx,eax
c0027bf2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bf5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bfd:	89 d0                	mov    eax,edx
c0027bff:	89 da                	mov    edx,ebx
c0027c01:	eb 26                	jmp    c0027c29 <__adddf3+0x606>
c0027c03:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c06:	29 cf                	sub    edi,ecx
c0027c08:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c10:	eb 17                	jmp    c0027c29 <__adddf3+0x606>
c0027c12:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c15:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027c18:	eb 0f                	jmp    c0027c29 <__adddf3+0x606>
c0027c1a:	31 d2                	xor    edx,edx
c0027c1c:	31 c0                	xor    eax,eax
c0027c1e:	eb 09                	jmp    c0027c29 <__adddf3+0x606>
c0027c20:	89 c2                	mov    edx,eax
c0027c22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027c29:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c2c:	c1 e1 14             	shl    ecx,0x14
c0027c2f:	89 c3                	mov    ebx,eax
c0027c31:	c1 eb 0b             	shr    ebx,0xb
c0027c34:	09 d9                	or     ecx,ebx
c0027c36:	89 d3                	mov    ebx,edx
c0027c38:	c1 eb 0b             	shr    ebx,0xb
c0027c3b:	c1 e0 15             	shl    eax,0x15
c0027c3e:	09 d8                	or     eax,ebx
c0027c40:	89 c7                	mov    edi,eax
c0027c42:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c48:	0f 95 c0             	setne  al
c0027c4b:	89 c6                	mov    esi,eax
c0027c4d:	09 f3                	or     ebx,esi
c0027c4f:	83 e3 01             	and    ebx,0x1
c0027c52:	c1 ea 0a             	shr    edx,0xa
c0027c55:	21 da                	and    edx,ebx
c0027c57:	89 f8                	mov    eax,edi
c0027c59:	01 d0                	add    eax,edx
c0027c5b:	83 d1 00             	adc    ecx,0x0
c0027c5e:	89 c7                	mov    edi,eax
c0027c60:	eb 06                	jmp    c0027c68 <__adddf3+0x645>
c0027c62:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c65:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c68:	89 f8                	mov    eax,edi
c0027c6a:	89 ca                	mov    edx,ecx
c0027c6c:	83 c4 24             	add    esp,0x24
c0027c6f:	5b                   	pop    ebx
c0027c70:	5e                   	pop    esi
c0027c71:	5f                   	pop    edi
c0027c72:	5d                   	pop    ebp
c0027c73:	c3                   	ret    

c0027c74 <__subdf3>:
c0027c74:	55                   	push   ebp
c0027c75:	89 e5                	mov    ebp,esp
c0027c77:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c7a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c7d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c83:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c86:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c89:	5d                   	pop    ebp
c0027c8a:	e9 94 f9 ff ff       	jmp    c0027623 <__adddf3>

c0027c8f <__negdf2>:
c0027c8f:	55                   	push   ebp
c0027c90:	89 e5                	mov    ebp,esp
c0027c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c95:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c9e:	5d                   	pop    ebp
c0027c9f:	c3                   	ret    

c0027ca0 <__muldf3>:
c0027ca0:	55                   	push   ebp
c0027ca1:	89 e5                	mov    ebp,esp
c0027ca3:	57                   	push   edi
c0027ca4:	56                   	push   esi
c0027ca5:	53                   	push   ebx
c0027ca6:	83 ec 24             	sub    esp,0x24
c0027ca9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027cac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027caf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027cb2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027cb5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027cb8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027cbb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cbe:	89 c8                	mov    eax,ecx
c0027cc0:	c1 f8 14             	sar    eax,0x14
c0027cc3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027cc6:	89 f8                	mov    eax,edi
c0027cc8:	89 fb                	mov    ebx,edi
c0027cca:	c1 e3 0b             	shl    ebx,0xb
c0027ccd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027cd0:	c1 e1 0b             	shl    ecx,0xb
c0027cd3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027cd9:	c1 e8 15             	shr    eax,0x15
c0027cdc:	09 c1                	or     ecx,eax
c0027cde:	89 d6                	mov    esi,edx
c0027ce0:	89 d0                	mov    eax,edx
c0027ce2:	c1 f8 14             	sar    eax,0x14
c0027ce5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027ce8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027ceb:	89 c3                	mov    ebx,eax
c0027ced:	c1 e3 0b             	shl    ebx,0xb
c0027cf0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cf3:	c1 e6 0b             	shl    esi,0xb
c0027cf6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027cfc:	c1 e8 15             	shr    eax,0x15
c0027cff:	09 c6                	or     esi,eax
c0027d01:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d04:	25 ff 07 00 00       	and    eax,0x7ff
c0027d09:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027d0c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d0f:	25 ff 07 00 00       	and    eax,0x7ff
c0027d14:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027d17:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027d1a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027d1d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027d24:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d27:	40                   	inc    eax
c0027d28:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d2d:	0f 85 8d 00 00 00    	jne    c0027dc0 <__muldf3+0x120>
c0027d33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d36:	09 c8                	or     eax,ecx
c0027d38:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d3c:	74 44                	je     c0027d82 <__muldf3+0xe2>
c0027d3e:	85 c0                	test   eax,eax
c0027d40:	0f 85 31 02 00 00    	jne    c0027f77 <__muldf3+0x2d7>
c0027d46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d49:	40                   	inc    eax
c0027d4a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d4f:	75 13                	jne    c0027d64 <__muldf3+0xc4>
c0027d51:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d54:	09 f1                	or     ecx,esi
c0027d56:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d5a:	74 22                	je     c0027d7e <__muldf3+0xde>
c0027d5c:	85 c9                	test   ecx,ecx
c0027d5e:	0f 85 0d 02 00 00    	jne    c0027f71 <__muldf3+0x2d1>
c0027d64:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d68:	0f 89 09 02 00 00    	jns    c0027f77 <__muldf3+0x2d7>
c0027d6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d71:	05 00 00 00 80       	add    eax,0x80000000
c0027d76:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d79:	e9 f9 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027d7e:	85 c9                	test   ecx,ecx
c0027d80:	eb 2e                	jmp    c0027db0 <__muldf3+0x110>
c0027d82:	85 c0                	test   eax,eax
c0027d84:	74 20                	je     c0027da6 <__muldf3+0x106>
c0027d86:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d8c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d8f:	c1 ef 1f             	shr    edi,0x1f
c0027d92:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d95:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d98:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d9b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d9e:	09 f9                	or     ecx,edi
c0027da0:	78 1e                	js     c0027dc0 <__muldf3+0x120>
c0027da2:	89 c3                	mov    ebx,eax
c0027da4:	eb e0                	jmp    c0027d86 <__muldf3+0xe6>
c0027da6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027da9:	f7 d0                	not    eax
c0027dab:	a9 ff 07 00 00       	test   eax,0x7ff
c0027db0:	75 b2                	jne    c0027d64 <__muldf3+0xc4>
c0027db2:	31 ff                	xor    edi,edi
c0027db4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027dbb:	e9 b7 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027dc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027dc3:	40                   	inc    eax
c0027dc4:	a9 fe 07 00 00       	test   eax,0x7fe
c0027dc9:	75 57                	jne    c0027e22 <__muldf3+0x182>
c0027dcb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027dce:	09 f0                	or     eax,esi
c0027dd0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027dd4:	74 23                	je     c0027df9 <__muldf3+0x159>
c0027dd6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dda:	0f 89 91 01 00 00    	jns    c0027f71 <__muldf3+0x2d1>
c0027de0:	85 c0                	test   eax,eax
c0027de2:	0f 85 89 01 00 00    	jne    c0027f71 <__muldf3+0x2d1>
c0027de8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027deb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027df1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027df4:	e9 7e 01 00 00       	jmp    c0027f77 <__muldf3+0x2d7>
c0027df9:	85 c0                	test   eax,eax
c0027dfb:	75 0c                	jne    c0027e09 <__muldf3+0x169>
c0027dfd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027e01:	0f 89 6a 01 00 00    	jns    c0027f71 <__muldf3+0x2d1>
c0027e07:	eb df                	jmp    c0027de8 <__muldf3+0x148>
c0027e09:	01 f6                	add    esi,esi
c0027e0b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027e0e:	c1 ea 1f             	shr    edx,0x1f
c0027e11:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e14:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027e1a:	09 d6                	or     esi,edx
c0027e1c:	78 04                	js     c0027e22 <__muldf3+0x182>
c0027e1e:	89 c3                	mov    ebx,eax
c0027e20:	eb e7                	jmp    c0027e09 <__muldf3+0x169>
c0027e22:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027e28:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e2e:	89 c8                	mov    eax,ecx
c0027e30:	f7 e6                	mul    esi
c0027e32:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e35:	89 c7                	mov    edi,eax
c0027e37:	89 c8                	mov    eax,ecx
c0027e39:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e3c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e3f:	89 c1                	mov    ecx,eax
c0027e41:	89 f0                	mov    eax,esi
c0027e43:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e46:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e49:	89 c6                	mov    esi,eax
c0027e4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e4e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e51:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e54:	31 c0                	xor    eax,eax
c0027e56:	01 f1                	add    ecx,esi
c0027e58:	0f 92 c0             	setb   al
c0027e5b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e5e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e61:	83 d6 00             	adc    esi,0x0
c0027e64:	01 c7                	add    edi,eax
c0027e66:	83 d6 00             	adc    esi,0x0
c0027e69:	01 ca                	add    edx,ecx
c0027e6b:	0f 92 c1             	setb   cl
c0027e6e:	0f b6 c9             	movzx  ecx,cl
c0027e71:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e74:	83 d6 00             	adc    esi,0x0
c0027e77:	01 cf                	add    edi,ecx
c0027e79:	83 d6 00             	adc    esi,0x0
c0027e7c:	31 c9                	xor    ecx,ecx
c0027e7e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e81:	0f 95 c1             	setne  cl
c0027e84:	09 cf                	or     edi,ecx
c0027e86:	85 f6                	test   esi,esi
c0027e88:	78 0c                	js     c0027e96 <__muldf3+0x1f6>
c0027e8a:	01 f6                	add    esi,esi
c0027e8c:	89 f8                	mov    eax,edi
c0027e8e:	c1 e8 1f             	shr    eax,0x1f
c0027e91:	09 c6                	or     esi,eax
c0027e93:	01 ff                	add    edi,edi
c0027e95:	4b                   	dec    ebx
c0027e96:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e9c:	0f 8f 85 00 00 00    	jg     c0027f27 <__muldf3+0x287>
c0027ea2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027ea8:	85 db                	test   ebx,ebx
c0027eaa:	0f 8f 84 00 00 00    	jg     c0027f34 <__muldf3+0x294>
c0027eb0:	83 fb cc             	cmp    ebx,0xffffffcc
c0027eb3:	7c 79                	jl     c0027f2e <__muldf3+0x28e>
c0027eb5:	ba 01 00 00 00       	mov    edx,0x1
c0027eba:	29 da                	sub    edx,ebx
c0027ebc:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027ec2:	83 fa 1f             	cmp    edx,0x1f
c0027ec5:	7e 30                	jle    c0027ef7 <__muldf3+0x257>
c0027ec7:	83 fa 20             	cmp    edx,0x20
c0027eca:	75 0b                	jne    c0027ed7 <__muldf3+0x237>
c0027ecc:	31 c0                	xor    eax,eax
c0027ece:	85 ff                	test   edi,edi
c0027ed0:	0f 95 c0             	setne  al
c0027ed3:	89 c7                	mov    edi,eax
c0027ed5:	eb 1a                	jmp    c0027ef1 <__muldf3+0x251>
c0027ed7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eda:	89 f0                	mov    eax,esi
c0027edc:	d3 e0                	shl    eax,cl
c0027ede:	09 f8                	or     eax,edi
c0027ee0:	0f 95 c0             	setne  al
c0027ee3:	0f b6 c0             	movzx  eax,al
c0027ee6:	89 c7                	mov    edi,eax
c0027ee8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027eed:	29 d9                	sub    ecx,ebx
c0027eef:	d3 ee                	shr    esi,cl
c0027ef1:	09 f7                	or     edi,esi
c0027ef3:	31 db                	xor    ebx,ebx
c0027ef5:	eb 3b                	jmp    c0027f32 <__muldf3+0x292>
c0027ef7:	83 c3 1f             	add    ebx,0x1f
c0027efa:	89 f0                	mov    eax,esi
c0027efc:	88 d9                	mov    cl,bl
c0027efe:	d3 e0                	shl    eax,cl
c0027f00:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027f03:	89 f8                	mov    eax,edi
c0027f05:	88 d1                	mov    cl,dl
c0027f07:	d3 e8                	shr    eax,cl
c0027f09:	89 c1                	mov    ecx,eax
c0027f0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027f0e:	09 c8                	or     eax,ecx
c0027f10:	88 d9                	mov    cl,bl
c0027f12:	d3 e7                	shl    edi,cl
c0027f14:	31 db                	xor    ebx,ebx
c0027f16:	85 ff                	test   edi,edi
c0027f18:	0f 95 c3             	setne  bl
c0027f1b:	89 df                	mov    edi,ebx
c0027f1d:	09 c7                	or     edi,eax
c0027f1f:	88 d1                	mov    cl,dl
c0027f21:	d3 ee                	shr    esi,cl
c0027f23:	31 db                	xor    ebx,ebx
c0027f25:	eb 0d                	jmp    c0027f34 <__muldf3+0x294>
c0027f27:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027f2c:	eb 02                	jmp    c0027f30 <__muldf3+0x290>
c0027f2e:	31 db                	xor    ebx,ebx
c0027f30:	31 ff                	xor    edi,edi
c0027f32:	31 f6                	xor    esi,esi
c0027f34:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f37:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f3a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f3f:	09 c3                	or     ebx,eax
c0027f41:	c1 e3 14             	shl    ebx,0x14
c0027f44:	89 f0                	mov    eax,esi
c0027f46:	c1 e8 0b             	shr    eax,0xb
c0027f49:	09 c3                	or     ebx,eax
c0027f4b:	89 f8                	mov    eax,edi
c0027f4d:	c1 e8 0b             	shr    eax,0xb
c0027f50:	c1 e6 15             	shl    esi,0x15
c0027f53:	09 c6                	or     esi,eax
c0027f55:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f5b:	0f 95 c1             	setne  cl
c0027f5e:	09 c8                	or     eax,ecx
c0027f60:	83 e0 01             	and    eax,0x1
c0027f63:	c1 ef 0a             	shr    edi,0xa
c0027f66:	21 c7                	and    edi,eax
c0027f68:	01 f7                	add    edi,esi
c0027f6a:	83 d3 00             	adc    ebx,0x0
c0027f6d:	89 da                	mov    edx,ebx
c0027f6f:	eb 03                	jmp    c0027f74 <__muldf3+0x2d4>
c0027f71:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f74:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f77:	89 f8                	mov    eax,edi
c0027f79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f7c:	83 c4 24             	add    esp,0x24
c0027f7f:	5b                   	pop    ebx
c0027f80:	5e                   	pop    esi
c0027f81:	5f                   	pop    edi
c0027f82:	5d                   	pop    ebp
c0027f83:	c3                   	ret    

c0027f84 <__divdf3>:
c0027f84:	55                   	push   ebp
c0027f85:	89 e5                	mov    ebp,esp
c0027f87:	57                   	push   edi
c0027f88:	56                   	push   esi
c0027f89:	53                   	push   ebx
c0027f8a:	83 ec 2c             	sub    esp,0x2c
c0027f8d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f90:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f96:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f99:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f9c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f9f:	89 ce                	mov    esi,ecx
c0027fa1:	89 c8                	mov    eax,ecx
c0027fa3:	c1 f8 14             	sar    eax,0x14
c0027fa6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027fa9:	89 f8                	mov    eax,edi
c0027fab:	89 fb                	mov    ebx,edi
c0027fad:	c1 e3 0b             	shl    ebx,0xb
c0027fb0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027fb3:	c1 e6 0b             	shl    esi,0xb
c0027fb6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027fbc:	c1 e8 15             	shr    eax,0x15
c0027fbf:	09 c6                	or     esi,eax
c0027fc1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027fc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027fc7:	89 c2                	mov    edx,eax
c0027fc9:	c1 fa 14             	sar    edx,0x14
c0027fcc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027fcf:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fd2:	89 de                	mov    esi,ebx
c0027fd4:	c1 e6 0b             	shl    esi,0xb
c0027fd7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027fda:	c1 e0 0b             	shl    eax,0xb
c0027fdd:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fe2:	c1 eb 15             	shr    ebx,0x15
c0027fe5:	09 d8                	or     eax,ebx
c0027fe7:	89 c2                	mov    edx,eax
c0027fe9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fec:	25 ff 07 00 00       	and    eax,0x7ff
c0027ff1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027ff4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027ff7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ffd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028000:	29 d8                	sub    eax,ebx
c0028002:	05 ff 03 00 00       	add    eax,0x3ff
c0028007:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002800a:	46                   	inc    esi
c002800b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028011:	0f 85 a5 00 00 00    	jne    c00280bc <__divdf3+0x138>
c0028017:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002801a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002801d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028021:	74 2a                	je     c002804d <__divdf3+0xc9>
c0028023:	85 f6                	test   esi,esi
c0028025:	0f 85 cc 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c002802b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002802e:	40                   	inc    eax
c002802f:	a9 fe 07 00 00       	test   eax,0x7fe
c0028034:	75 26                	jne    c002805c <__divdf3+0xd8>
c0028036:	85 db                	test   ebx,ebx
c0028038:	74 22                	je     c002805c <__divdf3+0xd8>
c002803a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002803d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028040:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028043:	09 d0                	or     eax,edx
c0028045:	0f 85 ac 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c002804b:	eb 63                	jmp    c00280b0 <__divdf3+0x12c>
c002804d:	85 f6                	test   esi,esi
c002804f:	75 22                	jne    c0028073 <__divdf3+0xef>
c0028051:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028054:	40                   	inc    eax
c0028055:	a9 fe 07 00 00       	test   eax,0x7fe
c002805a:	74 36                	je     c0028092 <__divdf3+0x10e>
c002805c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028060:	0f 89 91 02 00 00    	jns    c00282f7 <__divdf3+0x373>
c0028066:	89 f8                	mov    eax,edi
c0028068:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002806e:	e9 80 02 00 00       	jmp    c00282f3 <__divdf3+0x36f>
c0028073:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028076:	01 f6                	add    esi,esi
c0028078:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002807b:	c1 ef 1f             	shr    edi,0x1f
c002807e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028081:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028084:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028087:	09 f7                	or     edi,esi
c0028089:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002808c:	78 2e                	js     c00280bc <__divdf3+0x138>
c002808e:	89 c8                	mov    eax,ecx
c0028090:	eb e1                	jmp    c0028073 <__divdf3+0xef>
c0028092:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028095:	09 d0                	or     eax,edx
c0028097:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002809b:	74 0f                	je     c00280ac <__divdf3+0x128>
c002809d:	85 c0                	test   eax,eax
c002809f:	74 bb                	je     c002805c <__divdf3+0xd8>
c00280a1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280a4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280a7:	e9 4b 02 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280ac:	85 c0                	test   eax,eax
c00280ae:	75 ac                	jne    c002805c <__divdf3+0xd8>
c00280b0:	31 ff                	xor    edi,edi
c00280b2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00280b7:	e9 3b 02 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280bc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280bf:	8d 4f 01             	lea    ecx,[edi+0x1]
c00280c2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00280c8:	75 6b                	jne    c0028135 <__divdf3+0x1b1>
c00280ca:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280cd:	09 d6                	or     esi,edx
c00280cf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280d3:	74 28                	je     c00280fd <__divdf3+0x179>
c00280d5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280d8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280db:	85 f6                	test   esi,esi
c00280dd:	0f 85 14 02 00 00    	jne    c00282f7 <__divdf3+0x373>
c00280e3:	31 ff                	xor    edi,edi
c00280e5:	31 c9                	xor    ecx,ecx
c00280e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ea:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280ed:	0f 89 04 02 00 00    	jns    c00282f7 <__divdf3+0x373>
c00280f3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280f8:	e9 fa 01 00 00       	jmp    c00282f7 <__divdf3+0x373>
c00280fd:	85 f6                	test   esi,esi
c00280ff:	75 1b                	jne    c002811c <__divdf3+0x198>
c0028101:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028104:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028107:	25 00 00 00 80       	and    eax,0x80000000
c002810c:	31 c9                	xor    ecx,ecx
c002810e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028113:	89 cf                	mov    edi,ecx
c0028115:	89 c1                	mov    ecx,eax
c0028117:	e9 db 01 00 00       	jmp    c00282f7 <__divdf3+0x373>
c002811c:	01 d2                	add    edx,edx
c002811e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028121:	c1 eb 1f             	shr    ebx,0x1f
c0028124:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028127:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c002812a:	8d 48 01             	lea    ecx,[eax+0x1]
c002812d:	09 da                	or     edx,ebx
c002812f:	78 04                	js     c0028135 <__divdf3+0x1b1>
c0028131:	89 c8                	mov    eax,ecx
c0028133:	eb e7                	jmp    c002811c <__divdf3+0x198>
c0028135:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028138:	81 ce 00 00 00 80    	or     esi,0x80000000
c002813e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028144:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028147:	39 d6                	cmp    esi,edx
c0028149:	77 0d                	ja     c0028158 <__divdf3+0x1d4>
c002814b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002814e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028151:	72 1b                	jb     c002816e <__divdf3+0x1ea>
c0028153:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028156:	75 16                	jne    c002816e <__divdf3+0x1ea>
c0028158:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002815b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002815e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028161:	83 de 00             	sbb    esi,0x0
c0028164:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028167:	ba 01 00 00 00       	mov    edx,0x1
c002816c:	eb 02                	jmp    c0028170 <__divdf3+0x1ec>
c002816e:	31 d2                	xor    edx,edx
c0028170:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028177:	31 ff                	xor    edi,edi
c0028179:	01 ff                	add    edi,edi
c002817b:	89 d1                	mov    ecx,edx
c002817d:	c1 e9 1f             	shr    ecx,0x1f
c0028180:	09 cf                	or     edi,ecx
c0028182:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028185:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028188:	89 da                	mov    edx,ebx
c002818a:	89 f3                	mov    ebx,esi
c002818c:	8d 34 36             	lea    esi,[esi+esi*1]
c002818f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028192:	c1 e9 1f             	shr    ecx,0x1f
c0028195:	09 ce                	or     esi,ecx
c0028197:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002819a:	01 c9                	add    ecx,ecx
c002819c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002819f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281a2:	85 db                	test   ebx,ebx
c00281a4:	78 29                	js     c00281cf <__divdf3+0x24b>
c00281a6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00281a9:	72 07                	jb     c00281b2 <__divdf3+0x22e>
c00281ab:	75 3c                	jne    c00281e9 <__divdf3+0x265>
c00281ad:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281b0:	77 37                	ja     c00281e9 <__divdf3+0x265>
c00281b2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281b5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00281b8:	31 d2                	xor    edx,edx
c00281ba:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00281bd:	0f 97 c2             	seta   dl
c00281c0:	29 d6                	sub    esi,edx
c00281c2:	89 d9                	mov    ecx,ebx
c00281c4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00281c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00281ca:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00281cd:	eb 17                	jmp    c00281e6 <__divdf3+0x262>
c00281cf:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281d2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281d8:	0f 97 c1             	seta   cl
c00281db:	0f b6 c9             	movzx  ecx,cl
c00281de:	29 ce                	sub    esi,ecx
c00281e0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281e3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281e6:	83 ca 01             	or     edx,0x1
c00281e9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281ec:	75 8b                	jne    c0028179 <__divdf3+0x1f5>
c00281ee:	c1 e7 09             	shl    edi,0x9
c00281f1:	89 d1                	mov    ecx,edx
c00281f3:	c1 e9 17             	shr    ecx,0x17
c00281f6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281f9:	09 f3                	or     ebx,esi
c00281fb:	0f 95 c3             	setne  bl
c00281fe:	0f b6 db             	movzx  ebx,bl
c0028201:	c1 e2 09             	shl    edx,0x9
c0028204:	09 d3                	or     ebx,edx
c0028206:	89 ca                	mov    edx,ecx
c0028208:	09 fa                	or     edx,edi
c002820a:	78 0c                	js     c0028218 <__divdf3+0x294>
c002820c:	01 d2                	add    edx,edx
c002820e:	89 d9                	mov    ecx,ebx
c0028210:	c1 e9 1f             	shr    ecx,0x1f
c0028213:	09 ca                	or     edx,ecx
c0028215:	01 db                	add    ebx,ebx
c0028217:	48                   	dec    eax
c0028218:	3d fe 07 00 00       	cmp    eax,0x7fe
c002821d:	0f 8f 83 00 00 00    	jg     c00282a6 <__divdf3+0x322>
c0028223:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028229:	85 c0                	test   eax,eax
c002822b:	0f 8f 82 00 00 00    	jg     c00282b3 <__divdf3+0x32f>
c0028231:	83 f8 cc             	cmp    eax,0xffffffcc
c0028234:	7c 77                	jl     c00282ad <__divdf3+0x329>
c0028236:	be 01 00 00 00       	mov    esi,0x1
c002823b:	29 c6                	sub    esi,eax
c002823d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028243:	83 fe 1f             	cmp    esi,0x1f
c0028246:	7e 2f                	jle    c0028277 <__divdf3+0x2f3>
c0028248:	83 fe 20             	cmp    esi,0x20
c002824b:	75 0a                	jne    c0028257 <__divdf3+0x2d3>
c002824d:	85 db                	test   ebx,ebx
c002824f:	0f 95 c3             	setne  bl
c0028252:	0f b6 db             	movzx  ebx,bl
c0028255:	eb 1a                	jmp    c0028271 <__divdf3+0x2ed>
c0028257:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002825a:	89 d7                	mov    edi,edx
c002825c:	d3 e7                	shl    edi,cl
c002825e:	89 f9                	mov    ecx,edi
c0028260:	09 d9                	or     ecx,ebx
c0028262:	0f 95 c3             	setne  bl
c0028265:	0f b6 db             	movzx  ebx,bl
c0028268:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002826d:	29 c1                	sub    ecx,eax
c002826f:	d3 ea                	shr    edx,cl
c0028271:	09 d3                	or     ebx,edx
c0028273:	31 c0                	xor    eax,eax
c0028275:	eb 3a                	jmp    c00282b1 <__divdf3+0x32d>
c0028277:	83 c0 1f             	add    eax,0x1f
c002827a:	89 d7                	mov    edi,edx
c002827c:	88 c1                	mov    cl,al
c002827e:	d3 e7                	shl    edi,cl
c0028280:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028283:	89 df                	mov    edi,ebx
c0028285:	89 f1                	mov    ecx,esi
c0028287:	d3 ef                	shr    edi,cl
c0028289:	89 f9                	mov    ecx,edi
c002828b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002828e:	09 cf                	or     edi,ecx
c0028290:	88 c1                	mov    cl,al
c0028292:	d3 e3                	shl    ebx,cl
c0028294:	85 db                	test   ebx,ebx
c0028296:	0f 95 c3             	setne  bl
c0028299:	0f b6 db             	movzx  ebx,bl
c002829c:	09 fb                	or     ebx,edi
c002829e:	89 f1                	mov    ecx,esi
c00282a0:	d3 ea                	shr    edx,cl
c00282a2:	31 c0                	xor    eax,eax
c00282a4:	eb 0d                	jmp    c00282b3 <__divdf3+0x32f>
c00282a6:	b8 ff 07 00 00       	mov    eax,0x7ff
c00282ab:	eb 02                	jmp    c00282af <__divdf3+0x32b>
c00282ad:	31 c0                	xor    eax,eax
c00282af:	31 db                	xor    ebx,ebx
c00282b1:	31 d2                	xor    edx,edx
c00282b3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00282b6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00282b9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00282bf:	09 c8                	or     eax,ecx
c00282c1:	c1 e0 14             	shl    eax,0x14
c00282c4:	89 d1                	mov    ecx,edx
c00282c6:	c1 e9 0b             	shr    ecx,0xb
c00282c9:	09 c8                	or     eax,ecx
c00282cb:	89 c6                	mov    esi,eax
c00282cd:	89 d9                	mov    ecx,ebx
c00282cf:	c1 e9 0b             	shr    ecx,0xb
c00282d2:	c1 e2 15             	shl    edx,0x15
c00282d5:	09 ca                	or     edx,ecx
c00282d7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282dd:	0f 95 c0             	setne  al
c00282e0:	09 c1                	or     ecx,eax
c00282e2:	83 e1 01             	and    ecx,0x1
c00282e5:	c1 eb 0a             	shr    ebx,0xa
c00282e8:	21 cb                	and    ebx,ecx
c00282ea:	01 d3                	add    ebx,edx
c00282ec:	89 d8                	mov    eax,ebx
c00282ee:	83 d6 00             	adc    esi,0x0
c00282f1:	89 f2                	mov    edx,esi
c00282f3:	89 c7                	mov    edi,eax
c00282f5:	89 d1                	mov    ecx,edx
c00282f7:	89 f8                	mov    eax,edi
c00282f9:	89 ca                	mov    edx,ecx
c00282fb:	83 c4 2c             	add    esp,0x2c
c00282fe:	5b                   	pop    ebx
c00282ff:	5e                   	pop    esi
c0028300:	5f                   	pop    edi
c0028301:	5d                   	pop    ebp
c0028302:	c3                   	ret    

c0028303 <__floatsidf>:
c0028303:	55                   	push   ebp
c0028304:	89 e5                	mov    ebp,esp
c0028306:	56                   	push   esi
c0028307:	53                   	push   ebx
c0028308:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002830b:	85 db                	test   ebx,ebx
c002830d:	7e 15                	jle    c0028324 <__floatsidf+0x21>
c002830f:	0f bd cb             	bsr    ecx,ebx
c0028312:	83 f1 1f             	xor    ecx,0x1f
c0028315:	d3 e3                	shl    ebx,cl
c0028317:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002831d:	b8 1e 04 00 00       	mov    eax,0x41e
c0028322:	eb 21                	jmp    c0028345 <__floatsidf+0x42>
c0028324:	b8 00 00 00 00       	mov    eax,0x0
c0028329:	ba 00 00 00 00       	mov    edx,0x0
c002832e:	74 2a                	je     c002835a <__floatsidf+0x57>
c0028330:	f7 db                	neg    ebx
c0028332:	0f bd cb             	bsr    ecx,ebx
c0028335:	83 f1 1f             	xor    ecx,0x1f
c0028338:	d3 e3                	shl    ebx,cl
c002833a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028340:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028345:	29 c8                	sub    eax,ecx
c0028347:	c1 e0 14             	shl    eax,0x14
c002834a:	89 c1                	mov    ecx,eax
c002834c:	89 de                	mov    esi,ebx
c002834e:	c1 ee 0b             	shr    esi,0xb
c0028351:	09 f1                	or     ecx,esi
c0028353:	89 ca                	mov    edx,ecx
c0028355:	c1 e3 15             	shl    ebx,0x15
c0028358:	89 d8                	mov    eax,ebx
c002835a:	5b                   	pop    ebx
c002835b:	5e                   	pop    esi
c002835c:	5d                   	pop    ebp
c002835d:	c3                   	ret    

c002835e <__floatunsidf>:
c002835e:	55                   	push   ebp
c002835f:	89 e5                	mov    ebp,esp
c0028361:	56                   	push   esi
c0028362:	53                   	push   ebx
c0028363:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028366:	85 db                	test   ebx,ebx
c0028368:	74 2a                	je     c0028394 <__floatunsidf+0x36>
c002836a:	0f bd cb             	bsr    ecx,ebx
c002836d:	83 f1 1f             	xor    ecx,0x1f
c0028370:	d3 e3                	shl    ebx,cl
c0028372:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028378:	b8 1e 04 00 00       	mov    eax,0x41e
c002837d:	29 c8                	sub    eax,ecx
c002837f:	c1 e0 14             	shl    eax,0x14
c0028382:	89 c1                	mov    ecx,eax
c0028384:	89 de                	mov    esi,ebx
c0028386:	c1 ee 0b             	shr    esi,0xb
c0028389:	09 f1                	or     ecx,esi
c002838b:	89 ca                	mov    edx,ecx
c002838d:	c1 e3 15             	shl    ebx,0x15
c0028390:	89 d8                	mov    eax,ebx
c0028392:	eb 04                	jmp    c0028398 <__floatunsidf+0x3a>
c0028394:	31 c0                	xor    eax,eax
c0028396:	31 d2                	xor    edx,edx
c0028398:	5b                   	pop    ebx
c0028399:	5e                   	pop    esi
c002839a:	5d                   	pop    ebp
c002839b:	c3                   	ret    

c002839c <__fixdfsi>:
c002839c:	55                   	push   ebp
c002839d:	89 e5                	mov    ebp,esp
c002839f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283a2:	89 d1                	mov    ecx,edx
c00283a4:	c1 e1 0b             	shl    ecx,0xb
c00283a7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283b0:	c1 e8 15             	shr    eax,0x15
c00283b3:	09 c1                	or     ecx,eax
c00283b5:	c1 fa 14             	sar    edx,0x14
c00283b8:	78 1f                	js     c00283d9 <__fixdfsi+0x3d>
c00283ba:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00283c0:	31 c0                	xor    eax,eax
c00283c2:	83 fa 1e             	cmp    edx,0x1e
c00283c5:	77 40                	ja     c0028407 <__fixdfsi+0x6b>
c00283c7:	89 c8                	mov    eax,ecx
c00283c9:	0d 00 00 00 80       	or     eax,0x80000000
c00283ce:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283d3:	29 d1                	sub    ecx,edx
c00283d5:	d3 e8                	shr    eax,cl
c00283d7:	eb 2e                	jmp    c0028407 <__fixdfsi+0x6b>
c00283d9:	31 c0                	xor    eax,eax
c00283db:	81 c2 01 04 00 00    	add    edx,0x401
c00283e1:	78 24                	js     c0028407 <__fixdfsi+0x6b>
c00283e3:	83 fa 1e             	cmp    edx,0x1e
c00283e6:	7e 09                	jle    c00283f1 <__fixdfsi+0x55>
c00283e8:	83 fa 1f             	cmp    edx,0x1f
c00283eb:	75 18                	jne    c0028405 <__fixdfsi+0x69>
c00283ed:	85 c9                	test   ecx,ecx
c00283ef:	75 14                	jne    c0028405 <__fixdfsi+0x69>
c00283f1:	89 c8                	mov    eax,ecx
c00283f3:	0d 00 00 00 80       	or     eax,0x80000000
c00283f8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283fd:	29 d1                	sub    ecx,edx
c00283ff:	d3 e8                	shr    eax,cl
c0028401:	f7 d8                	neg    eax
c0028403:	eb 02                	jmp    c0028407 <__fixdfsi+0x6b>
c0028405:	31 c0                	xor    eax,eax
c0028407:	5d                   	pop    ebp
c0028408:	c3                   	ret    

c0028409 <__fixunsdfsi>:
c0028409:	55                   	push   ebp
c002840a:	89 e5                	mov    ebp,esp
c002840c:	53                   	push   ebx
c002840d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028410:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028413:	89 d3                	mov    ebx,edx
c0028415:	c1 fb 14             	sar    ebx,0x14
c0028418:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002841e:	31 c0                	xor    eax,eax
c0028420:	83 fb 1f             	cmp    ebx,0x1f
c0028423:	77 1d                	ja     c0028442 <__fixunsdfsi+0x39>
c0028425:	89 d0                	mov    eax,edx
c0028427:	c1 e0 0b             	shl    eax,0xb
c002842a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002842f:	c1 e9 15             	shr    ecx,0x15
c0028432:	09 c8                	or     eax,ecx
c0028434:	0d 00 00 00 80       	or     eax,0x80000000
c0028439:	b9 1f 00 00 00       	mov    ecx,0x1f
c002843e:	29 d9                	sub    ecx,ebx
c0028440:	d3 e8                	shr    eax,cl
c0028442:	5b                   	pop    ebx
c0028443:	5d                   	pop    ebp
c0028444:	c3                   	ret    

c0028445 <__cmpdf2>:
c0028445:	55                   	push   ebp
c0028446:	89 e5                	mov    ebp,esp
c0028448:	57                   	push   edi
c0028449:	56                   	push   esi
c002844a:	53                   	push   ebx
c002844b:	83 ec 0c             	sub    esp,0xc
c002844e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028451:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028454:	89 ca                	mov    edx,ecx
c0028456:	c1 ea 14             	shr    edx,0x14
c0028459:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002845f:	89 cb                	mov    ebx,ecx
c0028461:	c1 fb 1f             	sar    ebx,0x1f
c0028464:	31 da                	xor    edx,ebx
c0028466:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028469:	89 df                	mov    edi,ebx
c002846b:	c1 e7 0b             	shl    edi,0xb
c002846e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028471:	c1 e1 0b             	shl    ecx,0xb
c0028474:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002847a:	c1 eb 15             	shr    ebx,0x15
c002847d:	09 d9                	or     ecx,ebx
c002847f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028482:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028485:	89 ce                	mov    esi,ecx
c0028487:	c1 ee 14             	shr    esi,0x14
c002848a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028490:	89 cb                	mov    ebx,ecx
c0028492:	c1 fb 1f             	sar    ebx,0x1f
c0028495:	31 de                	xor    esi,ebx
c0028497:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002849a:	89 df                	mov    edi,ebx
c002849c:	c1 e7 0b             	shl    edi,0xb
c002849f:	c1 e1 0b             	shl    ecx,0xb
c00284a2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00284a8:	c1 eb 15             	shr    ebx,0x15
c00284ab:	09 d9                	or     ecx,ebx
c00284ad:	89 d3                	mov    ebx,edx
c00284af:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284b5:	43                   	inc    ebx
c00284b6:	83 fb 01             	cmp    ebx,0x1
c00284b9:	77 08                	ja     c00284c3 <__cmpdf2+0x7e>
c00284bb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00284be:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00284c1:	75 68                	jne    c002852b <__cmpdf2+0xe6>
c00284c3:	89 f3                	mov    ebx,esi
c00284c5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00284cb:	43                   	inc    ebx
c00284cc:	83 fb 01             	cmp    ebx,0x1
c00284cf:	77 06                	ja     c00284d7 <__cmpdf2+0x92>
c00284d1:	89 fb                	mov    ebx,edi
c00284d3:	09 cb                	or     ebx,ecx
c00284d5:	75 54                	jne    c002852b <__cmpdf2+0xe6>
c00284d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284da:	09 f8                	or     eax,edi
c00284dc:	09 c8                	or     eax,ecx
c00284de:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284e1:	75 12                	jne    c00284f5 <__cmpdf2+0xb0>
c00284e3:	8d 42 01             	lea    eax,[edx+0x1]
c00284e6:	83 f8 01             	cmp    eax,0x1
c00284e9:	77 0a                	ja     c00284f5 <__cmpdf2+0xb0>
c00284eb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284ee:	31 c0                	xor    eax,eax
c00284f0:	83 fb 01             	cmp    ebx,0x1
c00284f3:	76 36                	jbe    c002852b <__cmpdf2+0xe6>
c00284f5:	b8 01 00 00 00       	mov    eax,0x1
c00284fa:	39 f2                	cmp    edx,esi
c00284fc:	7f 2d                	jg     c002852b <__cmpdf2+0xe6>
c00284fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028503:	7c 26                	jl     c002852b <__cmpdf2+0xe6>
c0028505:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028508:	77 07                	ja     c0028511 <__cmpdf2+0xcc>
c002850a:	72 16                	jb     c0028522 <__cmpdf2+0xdd>
c002850c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002850f:	76 0a                	jbe    c002851b <__cmpdf2+0xd6>
c0028511:	89 d0                	mov    eax,edx
c0028513:	c1 f8 1f             	sar    eax,0x1f
c0028516:	83 c8 01             	or     eax,0x1
c0028519:	eb 10                	jmp    c002852b <__cmpdf2+0xe6>
c002851b:	b8 00 00 00 00       	mov    eax,0x0
c0028520:	73 09                	jae    c002852b <__cmpdf2+0xe6>
c0028522:	89 d0                	mov    eax,edx
c0028524:	c1 f8 1f             	sar    eax,0x1f
c0028527:	83 e0 02             	and    eax,0x2
c002852a:	48                   	dec    eax
c002852b:	83 c4 0c             	add    esp,0xc
c002852e:	5b                   	pop    ebx
c002852f:	5e                   	pop    esi
c0028530:	5f                   	pop    edi
c0028531:	5d                   	pop    ebp
c0028532:	c3                   	ret    

c0028533 <__eqdf2>:
c0028533:	55                   	push   ebp
c0028534:	89 e5                	mov    ebp,esp
c0028536:	50                   	push   eax
c0028537:	6a 01                	push   0x1
c0028539:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002853c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002853f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028542:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028545:	e8 fb fe ff ff       	call   c0028445 <__cmpdf2>
c002854a:	83 c4 18             	add    esp,0x18
c002854d:	c9                   	leave  
c002854e:	c3                   	ret    

c002854f <__nedf2>:
c002854f:	eb e2                	jmp    c0028533 <__eqdf2>

c0028551 <__gtdf2>:
c0028551:	55                   	push   ebp
c0028552:	89 e5                	mov    ebp,esp
c0028554:	50                   	push   eax
c0028555:	6a ff                	push   0xffffffff
c0028557:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002855a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002855d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028560:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028563:	e8 dd fe ff ff       	call   c0028445 <__cmpdf2>
c0028568:	83 c4 18             	add    esp,0x18
c002856b:	c9                   	leave  
c002856c:	c3                   	ret    

c002856d <__gedf2>:
c002856d:	eb e2                	jmp    c0028551 <__gtdf2>

c002856f <__ltdf2>:
c002856f:	eb c2                	jmp    c0028533 <__eqdf2>

c0028571 <__ledf2>:
c0028571:	eb c0                	jmp    c0028533 <__eqdf2>

c0028573 <__truncdfsf2>:
c0028573:	55                   	push   ebp
c0028574:	89 e5                	mov    ebp,esp
c0028576:	57                   	push   edi
c0028577:	56                   	push   esi
c0028578:	53                   	push   ebx
c0028579:	83 ec 0c             	sub    esp,0xc
c002857c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002857f:	89 d1                	mov    ecx,edx
c0028581:	c1 f9 14             	sar    ecx,0x14
c0028584:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028587:	89 df                	mov    edi,ebx
c0028589:	c1 e7 0b             	shl    edi,0xb
c002858c:	89 d0                	mov    eax,edx
c002858e:	c1 e0 0b             	shl    eax,0xb
c0028591:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028596:	c1 eb 15             	shr    ebx,0x15
c0028599:	09 d8                	or     eax,ebx
c002859b:	89 cb                	mov    ebx,ecx
c002859d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00285a3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00285a9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00285af:	0f 86 9e 00 00 00    	jbe    c0028653 <__truncdfsf2+0xe0>
c00285b5:	85 db                	test   ebx,ebx
c00285b7:	75 0a                	jne    c00285c3 <__truncdfsf2+0x50>
c00285b9:	c1 fa 17             	sar    edx,0x17
c00285bc:	30 d2                	xor    dl,dl
c00285be:	e9 84 00 00 00       	jmp    c0028647 <__truncdfsf2+0xd4>
c00285c3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00285c9:	83 fe 83             	cmp    esi,0xffffff83
c00285cc:	7d 4b                	jge    c0028619 <__truncdfsf2+0xa6>
c00285ce:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285d3:	29 f1                	sub    ecx,esi
c00285d5:	83 f9 1f             	cmp    ecx,0x1f
c00285d8:	7f 6b                	jg     c0028645 <__truncdfsf2+0xd2>
c00285da:	0d 00 00 00 80       	or     eax,0x80000000
c00285df:	89 c3                	mov    ebx,eax
c00285e1:	d3 eb                	shr    ebx,cl
c00285e3:	be 01 00 00 00       	mov    esi,0x1
c00285e8:	d3 e6                	shl    esi,cl
c00285ea:	4e                   	dec    esi
c00285eb:	21 f0                	and    eax,esi
c00285ed:	09 f8                	or     eax,edi
c00285ef:	0f 95 c0             	setne  al
c00285f2:	0f b6 c0             	movzx  eax,al
c00285f5:	09 c3                	or     ebx,eax
c00285f7:	89 d9                	mov    ecx,ebx
c00285f9:	c1 e9 08             	shr    ecx,0x8
c00285fc:	f6 c3 7f             	test   bl,0x7f
c00285ff:	0f 95 c0             	setne  al
c0028602:	09 c8                	or     eax,ecx
c0028604:	83 e0 01             	and    eax,0x1
c0028607:	c1 eb 07             	shr    ebx,0x7
c002860a:	21 c3                	and    ebx,eax
c002860c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028612:	09 d1                	or     ecx,edx
c0028614:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028617:	eb 76                	jmp    c002868f <__truncdfsf2+0x11c>
c0028619:	83 c6 80             	add    esi,0xffffff80
c002861c:	7e 1d                	jle    c002863b <__truncdfsf2+0xc8>
c002861e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028624:	75 0b                	jne    c0028631 <__truncdfsf2+0xbe>
c0028626:	09 f8                	or     eax,edi
c0028628:	74 09                	je     c0028633 <__truncdfsf2+0xc0>
c002862a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002862f:	eb 02                	jmp    c0028633 <__truncdfsf2+0xc0>
c0028631:	31 c0                	xor    eax,eax
c0028633:	c1 fa 17             	sar    edx,0x17
c0028636:	80 ca ff             	or     dl,0xff
c0028639:	eb 0e                	jmp    c0028649 <__truncdfsf2+0xd6>
c002863b:	c1 fa 1f             	sar    edx,0x1f
c002863e:	c1 e2 08             	shl    edx,0x8
c0028641:	09 ca                	or     edx,ecx
c0028643:	eb 04                	jmp    c0028649 <__truncdfsf2+0xd6>
c0028645:	31 d2                	xor    edx,edx
c0028647:	31 c0                	xor    eax,eax
c0028649:	c1 e2 17             	shl    edx,0x17
c002864c:	c1 e8 08             	shr    eax,0x8
c002864f:	09 d0                	or     eax,edx
c0028651:	eb 3c                	jmp    c002868f <__truncdfsf2+0x11c>
c0028653:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028659:	89 ca                	mov    edx,ecx
c002865b:	c1 fa 0b             	sar    edx,0xb
c002865e:	c1 e2 08             	shl    edx,0x8
c0028661:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028664:	31 db                	xor    ebx,ebx
c0028666:	85 ff                	test   edi,edi
c0028668:	0f 95 c3             	setne  bl
c002866b:	09 d8                	or     eax,ebx
c002866d:	89 c3                	mov    ebx,eax
c002866f:	c1 eb 08             	shr    ebx,0x8
c0028672:	a8 7f                	test   al,0x7f
c0028674:	0f 95 c2             	setne  dl
c0028677:	89 d6                	mov    esi,edx
c0028679:	09 de                	or     esi,ebx
c002867b:	83 e6 01             	and    esi,0x1
c002867e:	c1 e8 07             	shr    eax,0x7
c0028681:	21 f0                	and    eax,esi
c0028683:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028686:	09 ca                	or     edx,ecx
c0028688:	c1 e2 17             	shl    edx,0x17
c002868b:	09 da                	or     edx,ebx
c002868d:	01 d0                	add    eax,edx
c002868f:	83 c4 0c             	add    esp,0xc
c0028692:	5b                   	pop    ebx
c0028693:	5e                   	pop    esi
c0028694:	5f                   	pop    edi
c0028695:	5d                   	pop    ebp
c0028696:	c3                   	ret    

c0028697 <__extendsfdf2>:
c0028697:	55                   	push   ebp
c0028698:	89 e5                	mov    ebp,esp
c002869a:	57                   	push   edi
c002869b:	56                   	push   esi
c002869c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002869f:	89 d1                	mov    ecx,edx
c00286a1:	c1 f9 17             	sar    ecx,0x17
c00286a4:	c1 e2 08             	shl    edx,0x8
c00286a7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00286ad:	89 c8                	mov    eax,ecx
c00286af:	80 e4 f8             	and    ah,0xf8
c00286b2:	8d 71 01             	lea    esi,[ecx+0x1]
c00286b5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00286bb:	75 27                	jne    c00286e4 <__extendsfdf2+0x4d>
c00286bd:	81 e1 ff 00 00 00    	and    ecx,0xff
c00286c3:	75 18                	jne    c00286dd <__extendsfdf2+0x46>
c00286c5:	85 d2                	test   edx,edx
c00286c7:	74 20                	je     c00286e9 <__extendsfdf2+0x52>
c00286c9:	41                   	inc    ecx
c00286ca:	01 d2                	add    edx,edx
c00286cc:	79 fb                	jns    c00286c9 <__extendsfdf2+0x32>
c00286ce:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286d4:	29 c8                	sub    eax,ecx
c00286d6:	05 81 03 00 00       	add    eax,0x381
c00286db:	eb 0c                	jmp    c00286e9 <__extendsfdf2+0x52>
c00286dd:	05 00 07 00 00       	add    eax,0x700
c00286e2:	eb 05                	jmp    c00286e9 <__extendsfdf2+0x52>
c00286e4:	05 80 03 00 00       	add    eax,0x380
c00286e9:	c1 e0 14             	shl    eax,0x14
c00286ec:	89 c1                	mov    ecx,eax
c00286ee:	89 d0                	mov    eax,edx
c00286f0:	c1 e8 0b             	shr    eax,0xb
c00286f3:	09 c1                	or     ecx,eax
c00286f5:	c1 e2 15             	shl    edx,0x15
c00286f8:	89 d0                	mov    eax,edx
c00286fa:	89 ca                	mov    edx,ecx
c00286fc:	5e                   	pop    esi
c00286fd:	5f                   	pop    edi
c00286fe:	5d                   	pop    ebp
c00286ff:	c3                   	ret    

c0028700 <fabs>:
c0028700:	83 ec 0c             	sub    esp,0xc
c0028703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028707:	89 04 24             	mov    DWORD PTR [esp],eax
c002870a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002870e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028713:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028717:	dd 04 24             	fld    QWORD PTR [esp]
c002871a:	83 c4 0c             	add    esp,0xc
c002871d:	c3                   	ret    
c002871e:	66 90                	xchg   ax,ax

c0028720 <lrint>:
c0028720:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028724:	83 ec 04             	sub    esp,0x4
c0028727:	db 1c 24             	fistp  DWORD PTR [esp]
c002872a:	58                   	pop    eax
c002872b:	c3                   	ret    

c002872c <lrintf>:
c002872c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028730:	83 ec 04             	sub    esp,0x4
c0028733:	db 1c 24             	fistp  DWORD PTR [esp]
c0028736:	58                   	pop    eax
c0028737:	c3                   	ret    

Disassembly of section .init:

c0028738 <_init>:
c0028738:	55                   	push   ebp
c0028739:	89 e5                	mov    ebp,esp
c002873b:	e8 d8 79 fd ff       	call   c0000118 <frame_dummy>
c0028740:	e8 63 e0 ff ff       	call   c00267a8 <__do_global_ctors_aux>
c0028745:	5d                   	pop    ebp
c0028746:	c3                   	ret    

Disassembly of section .fini:

c0028747 <_fini>:
c0028747:	55                   	push   ebp
c0028748:	89 e5                	mov    ebp,esp
c002874a:	e8 59 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002874f:	5d                   	pop    ebp
c0028750:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028752 <Computer::~Computer()>:
c0028752:	83 ec 0c             	sub    esp,0xc
c0028755:	ba 88 a2 02 c0       	mov    edx,0xc002a288
c002875a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875e:	89 10                	mov    DWORD PTR [eax],edx
c0028760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	50                   	push   eax
c0028768:	e8 ab bb fe ff       	call   c0014318 <Device::~Device()>
c002876d:	83 c4 10             	add    esp,0x10
c0028770:	90                   	nop
c0028771:	83 c4 0c             	add    esp,0xc
c0028774:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028776 <Computer::~Computer()>:
c0028776:	83 ec 0c             	sub    esp,0xc
c0028779:	83 ec 0c             	sub    esp,0xc
c002877c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028780:	e8 cd ff ff ff       	call   c0028752 <Computer::~Computer()>
c0028785:	83 c4 10             	add    esp,0x10
c0028788:	83 ec 08             	sub    esp,0x8
c002878b:	68 ec 01 00 00       	push   0x1ec
c0028790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028794:	e8 a6 a7 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028799:	83 c4 10             	add    esp,0x10
c002879c:	83 c4 0c             	add    esp,0xc
c002879f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00287a0 <idleCommon()>:
c00287a0:	83 ec 0c             	sub    esp,0xc
c00287a3:	e8 18 57 ff ff       	call   c001dec0 <lockScheduler()>
c00287a8:	e8 4f 5a ff ff       	call   c001e1fc <schedule()>
c00287ad:	83 c4 0c             	add    esp,0xc
c00287b0:	e9 0d 57 ff ff       	jmp    c001dec2 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00287b6 <LinkedList<UnixFile>::~LinkedList()>:
c00287b6:	90                   	nop
c00287b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00287b8 <LinkedList<UnixFile>::LinkedList()>:
c00287b8:	83 ec 0c             	sub    esp,0xc
c00287bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287fb:	83 ec 0c             	sub    esp,0xc
c00287fe:	68 46 a5 02 c0       	push   0xc002a546
c0028803:	e8 17 a8 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0028808:	83 c4 10             	add    esp,0x10
c002880b:	90                   	nop
c002880c:	83 c4 0c             	add    esp,0xc
c002880f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028810 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028810:	83 ec 0c             	sub    esp,0xc
c0028813:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028818:	75 10                	jne    c002882a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002881a:	83 ec 0c             	sub    esp,0xc
c002881d:	68 60 a5 02 c0       	push   0xc002a560
c0028822:	e8 a6 1e ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028827:	83 c4 10             	add    esp,0x10
c002882a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028830:	85 c0                	test   eax,eax
c0028832:	74 34                	je     c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028838:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002883b:	85 c0                	test   eax,eax
c002883d:	74 29                	je     c0028868 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002883f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028843:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028846:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002884a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002885f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028866:	eb 65                	jmp    c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 00                	mov    eax,DWORD PTR [eax]
c002886e:	85 c0                	test   eax,eax
c0028870:	75 4b                	jne    c00288bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028876:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028879:	85 c0                	test   eax,eax
c002887b:	75 40                	jne    c00288bd <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028881:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028885:	89 10                	mov    DWORD PTR [eax],edx
c0028887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002888b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002888f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028899:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00288a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a7:	85 c0                	test   eax,eax
c00288a9:	74 22                	je     c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288ab:	83 ec 0c             	sub    esp,0xc
c00288ae:	68 82 a5 02 c0       	push   0xc002a582
c00288b3:	e8 15 1e ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00288b8:	83 c4 10             	add    esp,0x10
c00288bb:	eb 10                	jmp    c00288cd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00288bd:	83 ec 0c             	sub    esp,0xc
c00288c0:	68 8c a5 02 c0       	push   0xc002a58c
c00288c5:	e8 03 1e ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00288ca:	83 c4 10             	add    esp,0x10
c00288cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288d4:	8d 50 01             	lea    edx,[eax+0x1]
c00288d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288de:	90                   	nop
c00288df:	83 c4 0c             	add    esp,0xc
c00288e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288e4 <LinkedList<UnixFile>::getFirstElement()>:
c00288e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288ec <LinkedList<UnixFile>::removeFirst()>:
c00288ec:	83 ec 0c             	sub    esp,0xc
c00288ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288f5:	85 c0                	test   eax,eax
c00288f7:	75 12                	jne    c002890b <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288f9:	83 ec 0c             	sub    esp,0xc
c00288fc:	68 98 a5 02 c0       	push   0xc002a598
c0028901:	e8 c7 1d ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028906:	83 c4 10             	add    esp,0x10
c0028909:	eb 7e                	jmp    c0028989 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002890b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028912:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028915:	85 c0                	test   eax,eax
c0028917:	74 10                	je     c0028929 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028919:	83 ec 0c             	sub    esp,0xc
c002891c:	68 e3 a5 02 c0       	push   0xc002a5e3
c0028921:	e8 a7 1d ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028926:	83 c4 10             	add    esp,0x10
c0028929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002892d:	8b 00                	mov    eax,DWORD PTR [eax]
c002892f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028932:	85 c0                	test   eax,eax
c0028934:	75 33                	jne    c0028969 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028944:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002894b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028952:	83 f8 01             	cmp    eax,0x1
c0028955:	74 21                	je     c0028978 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028957:	83 ec 0c             	sub    esp,0xc
c002895a:	68 bc a5 02 c0       	push   0xc002a5bc
c002895f:	e8 69 1d ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028964:	83 c4 10             	add    esp,0x10
c0028967:	eb 0f                	jmp    c0028978 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896d:	8b 00                	mov    eax,DWORD PTR [eax]
c002896f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028976:	89 10                	mov    DWORD PTR [eax],edx
c0028978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002897c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002897f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028986:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028989:	83 c4 0c             	add    esp,0xc
c002898c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002898e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002898e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028992:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028995:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028996 <DriverlessDevice::~DriverlessDevice()>:
c0028996:	ba 84 ad 02 c0       	mov    edx,0xc002ad84
c002899b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002899f:	89 10                	mov    DWORD PTR [eax],edx
c00289a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00289a5:	50                   	push   eax
c00289a6:	e8 6d b9 fe ff       	call   c0014318 <Device::~Device()>
c00289ab:	83 c4 04             	add    esp,0x4
c00289ae:	90                   	nop
c00289af:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00289b0 <DriverlessDevice::~DriverlessDevice()>:
c00289b0:	83 ec 0c             	sub    esp,0xc
c00289b3:	83 ec 0c             	sub    esp,0xc
c00289b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ba:	e8 d7 ff ff ff       	call   c0028996 <DriverlessDevice::~DriverlessDevice()>
c00289bf:	83 c4 10             	add    esp,0x10
c00289c2:	83 ec 08             	sub    esp,0x8
c00289c5:	68 58 01 00 00       	push   0x158
c00289ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ce:	e8 6c a5 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00289d3:	83 c4 10             	add    esp,0x10
c00289d6:	83 c4 0c             	add    esp,0xc
c00289d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289da <LinkedList<Device>::addElement(Device*)>:
c00289da:	83 ec 0c             	sub    esp,0xc
c00289dd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289e2:	75 10                	jne    c00289f4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289e4:	83 ec 0c             	sub    esp,0xc
c00289e7:	68 60 a5 02 c0       	push   0xc002a560
c00289ec:	e8 dc 1c ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c00289f1:	83 c4 10             	add    esp,0x10
c00289f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289fa:	85 c0                	test   eax,eax
c00289fc:	74 3a                	je     c0028a38 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a05:	85 c0                	test   eax,eax
c0028a07:	74 2f                	je     c0028a38 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a14:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a2c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a36:	eb 68                	jmp    c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a3e:	85 c0                	test   eax,eax
c0028a40:	75 4e                	jne    c0028a90 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a49:	85 c0                	test   eax,eax
c0028a4b:	75 43                	jne    c0028a90 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a55:	89 10                	mov    DWORD PTR [eax],edx
c0028a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a69:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a77:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a7a:	85 c0                	test   eax,eax
c0028a7c:	74 22                	je     c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a7e:	83 ec 0c             	sub    esp,0xc
c0028a81:	68 82 a5 02 c0       	push   0xc002a582
c0028a86:	e8 42 1c ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028a8b:	83 c4 10             	add    esp,0x10
c0028a8e:	eb 10                	jmp    c0028aa0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a90:	83 ec 0c             	sub    esp,0xc
c0028a93:	68 8c a5 02 c0       	push   0xc002a58c
c0028a98:	e8 30 1c ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028a9d:	83 c4 10             	add    esp,0x10
c0028aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028aa7:	8d 50 01             	lea    edx,[eax+0x1]
c0028aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ab1:	90                   	nop
c0028ab2:	83 c4 0c             	add    esp,0xc
c0028ab5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028ab6 <LinkedList<Device>::LinkedList()>:
c0028ab6:	83 ec 0c             	sub    esp,0xc
c0028ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ad2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028add:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028af2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af9:	83 ec 0c             	sub    esp,0xc
c0028afc:	68 46 a5 02 c0       	push   0xc002a546
c0028b01:	e8 19 a5 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0028b06:	83 c4 10             	add    esp,0x10
c0028b09:	90                   	nop
c0028b0a:	83 c4 0c             	add    esp,0xc
c0028b0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028b0e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028b0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028b16 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b1c:	85 c0                	test   eax,eax
c0028b1e:	75 0e                	jne    c0028b2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b27:	85 c0                	test   eax,eax
c0028b29:	75 03                	jne    c0028b2e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028b2b:	b0 01                	mov    al,0x1
c0028b2d:	c3                   	ret    
c0028b2e:	b0 00                	mov    al,0x0
c0028b30:	90                   	nop
c0028b31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b32 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b32:	83 ec 0c             	sub    esp,0xc
c0028b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b39:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b3b:	85 c0                	test   eax,eax
c0028b3d:	75 15                	jne    c0028b54 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b3f:	83 ec 0c             	sub    esp,0xc
c0028b42:	68 98 a5 02 c0       	push   0xc002a598
c0028b47:	e8 81 1b ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028b4c:	83 c4 10             	add    esp,0x10
c0028b4f:	e9 88 00 00 00       	jmp    c0028bdc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b5e:	85 c0                	test   eax,eax
c0028b60:	0f 95 c0             	setne  al
c0028b63:	84 c0                	test   al,al
c0028b65:	74 10                	je     c0028b77 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b67:	83 ec 0c             	sub    esp,0xc
c0028b6a:	68 e3 a5 02 c0       	push   0xc002a5e3
c0028b6f:	e8 59 1b ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028b74:	83 c4 10             	add    esp,0x10
c0028b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b80:	85 c0                	test   eax,eax
c0028b82:	0f 94 c0             	sete   al
c0028b85:	84 c0                	test   al,al
c0028b87:	74 33                	je     c0028bbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba5:	83 f8 01             	cmp    eax,0x1
c0028ba8:	74 21                	je     c0028bcb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028baa:	83 ec 0c             	sub    esp,0xc
c0028bad:	68 bc a5 02 c0       	push   0xc002a5bc
c0028bb2:	e8 16 1b ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	eb 0f                	jmp    c0028bcb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bc2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bc9:	89 10                	mov    DWORD PTR [eax],edx
c0028bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bcf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028bd2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bdc:	83 c4 0c             	add    esp,0xc
c0028bdf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028be0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028be0:	83 ec 0c             	sub    esp,0xc
c0028be3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028be8:	75 10                	jne    c0028bfa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bea:	83 ec 0c             	sub    esp,0xc
c0028bed:	68 60 a5 02 c0       	push   0xc002a560
c0028bf2:	e8 d6 1a ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028bf7:	83 c4 10             	add    esp,0x10
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c00:	85 c0                	test   eax,eax
c0028c02:	74 34                	je     c0028c38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c0b:	85 c0                	test   eax,eax
c0028c0d:	74 29                	je     c0028c38 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c1a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c25:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c2f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c36:	eb 65                	jmp    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c3e:	85 c0                	test   eax,eax
c0028c40:	75 4b                	jne    c0028c8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c49:	85 c0                	test   eax,eax
c0028c4b:	75 40                	jne    c0028c8d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c55:	89 10                	mov    DWORD PTR [eax],edx
c0028c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c77:	85 c0                	test   eax,eax
c0028c79:	74 22                	je     c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c7b:	83 ec 0c             	sub    esp,0xc
c0028c7e:	68 82 a5 02 c0       	push   0xc002a582
c0028c83:	e8 45 1a ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028c88:	83 c4 10             	add    esp,0x10
c0028c8b:	eb 10                	jmp    c0028c9d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c8d:	83 ec 0c             	sub    esp,0xc
c0028c90:	68 8c a5 02 c0       	push   0xc002a58c
c0028c95:	e8 33 1a ff ff       	call   c001a6cd <Krnl::panic(char const*)>
c0028c9a:	83 c4 10             	add    esp,0x10
c0028c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ca4:	8d 50 01             	lea    edx,[eax+0x1]
c0028ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028cae:	90                   	nop
c0028caf:	83 c4 0c             	add    esp,0xc
c0028cb2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028cb4 <ACPI::~ACPI()>:
c0028cb4:	83 ec 0c             	sub    esp,0xc
c0028cb7:	ba e8 b6 02 c0       	mov    edx,0xc002b6e8
c0028cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc0:	89 10                	mov    DWORD PTR [eax],edx
c0028cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cc6:	83 ec 0c             	sub    esp,0xc
c0028cc9:	50                   	push   eax
c0028cca:	e8 49 b6 fe ff       	call   c0014318 <Device::~Device()>
c0028ccf:	83 c4 10             	add    esp,0x10
c0028cd2:	90                   	nop
c0028cd3:	83 c4 0c             	add    esp,0xc
c0028cd6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028cd8 <ACPI::~ACPI()>:
c0028cd8:	83 ec 0c             	sub    esp,0xc
c0028cdb:	83 ec 0c             	sub    esp,0xc
c0028cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ce2:	e8 cd ff ff ff       	call   c0028cb4 <ACPI::~ACPI()>
c0028ce7:	83 c4 10             	add    esp,0x10
c0028cea:	83 ec 08             	sub    esp,0x8
c0028ced:	68 68 12 00 00       	push   0x1268
c0028cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cf6:	e8 44 a2 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028cfb:	83 c4 10             	add    esp,0x10
c0028cfe:	83 c4 0c             	add    esp,0xc
c0028d01:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028d02 <CPU::~CPU()>:
c0028d02:	83 ec 0c             	sub    esp,0xc
c0028d05:	ba d8 ba 02 c0       	mov    edx,0xc002bad8
c0028d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d0e:	89 10                	mov    DWORD PTR [eax],edx
c0028d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d14:	83 ec 0c             	sub    esp,0xc
c0028d17:	50                   	push   eax
c0028d18:	e8 fb b5 fe ff       	call   c0014318 <Device::~Device()>
c0028d1d:	83 c4 10             	add    esp,0x10
c0028d20:	90                   	nop
c0028d21:	83 c4 0c             	add    esp,0xc
c0028d24:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028d26 <CPU::~CPU()>:
c0028d26:	83 ec 0c             	sub    esp,0xc
c0028d29:	83 ec 0c             	sub    esp,0xc
c0028d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d30:	e8 cd ff ff ff       	call   c0028d02 <CPU::~CPU()>
c0028d35:	83 c4 10             	add    esp,0x10
c0028d38:	83 ec 08             	sub    esp,0x8
c0028d3b:	68 98 11 00 00       	push   0x1198
c0028d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d44:	e8 f6 a1 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028d49:	83 c4 10             	add    esp,0x10
c0028d4c:	83 c4 0c             	add    esp,0xc
c0028d4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d50 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d50:	90                   	nop
c0028d51:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d52 <ThreadControlBlock::ThreadControlBlock()>:
c0028d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d56:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d61:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d6c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d77:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d82:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d8a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d8e:	90                   	nop
c0028d8f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d90 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d90:	83 ec 0c             	sub    esp,0xc
c0028d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d97:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028db7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dcc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028dd3:	83 ec 0c             	sub    esp,0xc
c0028dd6:	68 46 a5 02 c0       	push   0xc002a546
c0028ddb:	e8 3f a2 fe ff       	call   c001301f <Dbg::kprintf(char const*, ...)>
c0028de0:	83 c4 10             	add    esp,0x10
c0028de3:	90                   	nop
c0028de4:	83 c4 0c             	add    esp,0xc
c0028de7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028de8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028def:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028df0 <Vm::_FPUState::_FPUState()>:
c0028df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028df4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dfb:	90                   	nop
c0028dfc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dfe <PCI::~PCI()>:
c0028dfe:	83 ec 0c             	sub    esp,0xc
c0028e01:	ba 64 cb 02 c0       	mov    edx,0xc002cb64
c0028e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e0a:	89 10                	mov    DWORD PTR [eax],edx
c0028e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	50                   	push   eax
c0028e14:	e8 d7 ae fe ff       	call   c0013cf0 <Bus::~Bus()>
c0028e19:	83 c4 10             	add    esp,0x10
c0028e1c:	90                   	nop
c0028e1d:	83 c4 0c             	add    esp,0xc
c0028e20:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028e22 <PCI::~PCI()>:
c0028e22:	83 ec 0c             	sub    esp,0xc
c0028e25:	83 ec 0c             	sub    esp,0xc
c0028e28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e2c:	e8 cd ff ff ff       	call   c0028dfe <PCI::~PCI()>
c0028e31:	83 c4 10             	add    esp,0x10
c0028e34:	83 ec 08             	sub    esp,0x8
c0028e37:	68 58 01 00 00       	push   0x158
c0028e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e40:	e8 fa a0 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028e45:	83 c4 10             	add    esp,0x10
c0028e48:	83 c4 0c             	add    esp,0xc
c0028e4b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e4c <IDE::~IDE()>:
c0028e4c:	83 ec 0c             	sub    esp,0xc
c0028e4f:	ba c8 cd 02 c0       	mov    edx,0xc002cdc8
c0028e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e58:	89 10                	mov    DWORD PTR [eax],edx
c0028e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e5e:	83 ec 0c             	sub    esp,0xc
c0028e61:	50                   	push   eax
c0028e62:	e8 a1 b9 fe ff       	call   c0014808 <HardDiskController::~HardDiskController()>
c0028e67:	83 c4 10             	add    esp,0x10
c0028e6a:	90                   	nop
c0028e6b:	83 c4 0c             	add    esp,0xc
c0028e6e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e70 <IDE::~IDE()>:
c0028e70:	83 ec 0c             	sub    esp,0xc
c0028e73:	83 ec 0c             	sub    esp,0xc
c0028e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e7a:	e8 cd ff ff ff       	call   c0028e4c <IDE::~IDE()>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	83 ec 08             	sub    esp,0x8
c0028e85:	68 70 02 00 00       	push   0x270
c0028e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e8e:	e8 ac a0 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028e93:	83 c4 10             	add    esp,0x10
c0028e96:	83 c4 0c             	add    esp,0xc
c0028e99:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e9a <SATABus::~SATABus()>:
c0028e9a:	83 ec 0c             	sub    esp,0xc
c0028e9d:	ba a8 ce 02 c0       	mov    edx,0xc002cea8
c0028ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ea6:	89 10                	mov    DWORD PTR [eax],edx
c0028ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eac:	83 ec 0c             	sub    esp,0xc
c0028eaf:	50                   	push   eax
c0028eb0:	e8 53 b9 fe ff       	call   c0014808 <HardDiskController::~HardDiskController()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	90                   	nop
c0028eb9:	83 c4 0c             	add    esp,0xc
c0028ebc:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028ebe <SATABus::~SATABus()>:
c0028ebe:	83 ec 0c             	sub    esp,0xc
c0028ec1:	83 ec 0c             	sub    esp,0xc
c0028ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec8:	e8 cd ff ff ff       	call   c0028e9a <SATABus::~SATABus()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	83 ec 08             	sub    esp,0x8
c0028ed3:	68 64 01 00 00       	push   0x164
c0028ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028edc:	e8 5e a0 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028ee1:	83 c4 10             	add    esp,0x10
c0028ee4:	83 c4 0c             	add    esp,0xc
c0028ee7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028ee8 <ATA::~ATA()>:
c0028ee8:	83 ec 0c             	sub    esp,0xc
c0028eeb:	ba f4 ce 02 c0       	mov    edx,0xc002cef4
c0028ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef4:	89 10                	mov    DWORD PTR [eax],edx
c0028ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efa:	83 ec 0c             	sub    esp,0xc
c0028efd:	50                   	push   eax
c0028efe:	e8 f7 b9 fe ff       	call   c00148fa <PhysicalDisk::~PhysicalDisk()>
c0028f03:	83 c4 10             	add    esp,0x10
c0028f06:	90                   	nop
c0028f07:	83 c4 0c             	add    esp,0xc
c0028f0a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028f0c <ATA::~ATA()>:
c0028f0c:	83 ec 0c             	sub    esp,0xc
c0028f0f:	83 ec 0c             	sub    esp,0xc
c0028f12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f16:	e8 cd ff ff ff       	call   c0028ee8 <ATA::~ATA()>
c0028f1b:	83 c4 10             	add    esp,0x10
c0028f1e:	83 ec 08             	sub    esp,0x8
c0028f21:	68 7c 01 00 00       	push   0x17c
c0028f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2a:	e8 10 a0 fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028f2f:	83 c4 10             	add    esp,0x10
c0028f32:	83 c4 0c             	add    esp,0xc
c0028f35:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f36 <ATAPI::~ATAPI()>:
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	ba 2c cf 02 c0       	mov    edx,0xc002cf2c
c0028f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f42:	89 10                	mov    DWORD PTR [eax],edx
c0028f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f48:	83 ec 0c             	sub    esp,0xc
c0028f4b:	50                   	push   eax
c0028f4c:	e8 a9 b9 fe ff       	call   c00148fa <PhysicalDisk::~PhysicalDisk()>
c0028f51:	83 c4 10             	add    esp,0x10
c0028f54:	90                   	nop
c0028f55:	83 c4 0c             	add    esp,0xc
c0028f58:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f5a <ATAPI::~ATAPI()>:
c0028f5a:	83 ec 0c             	sub    esp,0xc
c0028f5d:	83 ec 0c             	sub    esp,0xc
c0028f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f64:	e8 cd ff ff ff       	call   c0028f36 <ATAPI::~ATAPI()>
c0028f69:	83 c4 10             	add    esp,0x10
c0028f6c:	83 ec 08             	sub    esp,0x8
c0028f6f:	68 80 01 00 00       	push   0x180
c0028f74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f78:	e8 c2 9f fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028f7d:	83 c4 10             	add    esp,0x10
c0028f80:	83 c4 0c             	add    esp,0xc
c0028f83:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f84 <SATA::~SATA()>:
c0028f84:	83 ec 0c             	sub    esp,0xc
c0028f87:	ba e0 cf 02 c0       	mov    edx,0xc002cfe0
c0028f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f90:	89 10                	mov    DWORD PTR [eax],edx
c0028f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f96:	83 ec 0c             	sub    esp,0xc
c0028f99:	50                   	push   eax
c0028f9a:	e8 5b b9 fe ff       	call   c00148fa <PhysicalDisk::~PhysicalDisk()>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	90                   	nop
c0028fa3:	83 c4 0c             	add    esp,0xc
c0028fa6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028fa8 <SATA::~SATA()>:
c0028fa8:	83 ec 0c             	sub    esp,0xc
c0028fab:	83 ec 0c             	sub    esp,0xc
c0028fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fb2:	e8 cd ff ff ff       	call   c0028f84 <SATA::~SATA()>
c0028fb7:	83 c4 10             	add    esp,0x10
c0028fba:	83 ec 08             	sub    esp,0x8
c0028fbd:	68 7c 01 00 00       	push   0x17c
c0028fc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc6:	e8 74 9f fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0028fcb:	83 c4 10             	add    esp,0x10
c0028fce:	83 c4 0c             	add    esp,0xc
c0028fd1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fd2 <SATAPI::~SATAPI()>:
c0028fd2:	83 ec 0c             	sub    esp,0xc
c0028fd5:	ba bc d0 02 c0       	mov    edx,0xc002d0bc
c0028fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fde:	89 10                	mov    DWORD PTR [eax],edx
c0028fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe4:	83 ec 0c             	sub    esp,0xc
c0028fe7:	50                   	push   eax
c0028fe8:	e8 0d b9 fe ff       	call   c00148fa <PhysicalDisk::~PhysicalDisk()>
c0028fed:	83 c4 10             	add    esp,0x10
c0028ff0:	90                   	nop
c0028ff1:	83 c4 0c             	add    esp,0xc
c0028ff4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028ff6 <SATAPI::~SATAPI()>:
c0028ff6:	83 ec 0c             	sub    esp,0xc
c0028ff9:	83 ec 0c             	sub    esp,0xc
c0028ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029000:	e8 cd ff ff ff       	call   c0028fd2 <SATAPI::~SATAPI()>
c0029005:	83 c4 10             	add    esp,0x10
c0029008:	83 ec 08             	sub    esp,0x8
c002900b:	68 80 01 00 00       	push   0x180
c0029010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029014:	e8 26 9f fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0029019:	83 c4 10             	add    esp,0x10
c002901c:	83 c4 0c             	add    esp,0xc
c002901f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029020 <AVX::~AVX()>:
c0029020:	83 ec 0c             	sub    esp,0xc
c0029023:	ba fc d0 02 c0       	mov    edx,0xc002d0fc
c0029028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902c:	89 10                	mov    DWORD PTR [eax],edx
c002902e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029032:	83 ec 0c             	sub    esp,0xc
c0029035:	50                   	push   eax
c0029036:	e8 43 b9 fe ff       	call   c001497e <FPU::~FPU()>
c002903b:	83 c4 10             	add    esp,0x10
c002903e:	90                   	nop
c002903f:	83 c4 0c             	add    esp,0xc
c0029042:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029044 <AVX::~AVX()>:
c0029044:	83 ec 0c             	sub    esp,0xc
c0029047:	83 ec 0c             	sub    esp,0xc
c002904a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002904e:	e8 cd ff ff ff       	call   c0029020 <AVX::~AVX()>
c0029053:	83 c4 10             	add    esp,0x10
c0029056:	83 ec 08             	sub    esp,0x8
c0029059:	68 58 01 00 00       	push   0x158
c002905e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029062:	e8 d8 9e fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0029067:	83 c4 10             	add    esp,0x10
c002906a:	83 c4 0c             	add    esp,0xc
c002906d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002906e <MMX::~MMX()>:
c002906e:	83 ec 0c             	sub    esp,0xc
c0029071:	ba 3c d1 02 c0       	mov    edx,0xc002d13c
c0029076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907a:	89 10                	mov    DWORD PTR [eax],edx
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	83 ec 0c             	sub    esp,0xc
c0029083:	50                   	push   eax
c0029084:	e8 f5 b8 fe ff       	call   c001497e <FPU::~FPU()>
c0029089:	83 c4 10             	add    esp,0x10
c002908c:	90                   	nop
c002908d:	83 c4 0c             	add    esp,0xc
c0029090:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029092 <MMX::~MMX()>:
c0029092:	83 ec 0c             	sub    esp,0xc
c0029095:	83 ec 0c             	sub    esp,0xc
c0029098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002909c:	e8 cd ff ff ff       	call   c002906e <MMX::~MMX()>
c00290a1:	83 c4 10             	add    esp,0x10
c00290a4:	83 ec 08             	sub    esp,0x8
c00290a7:	68 58 01 00 00       	push   0x158
c00290ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290b0:	e8 8a 9e fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00290b5:	83 c4 10             	add    esp,0x10
c00290b8:	83 c4 0c             	add    esp,0xc
c00290bb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00290bc <SSE::~SSE()>:
c00290bc:	83 ec 0c             	sub    esp,0xc
c00290bf:	ba 7c d1 02 c0       	mov    edx,0xc002d17c
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	89 10                	mov    DWORD PTR [eax],edx
c00290ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ce:	83 ec 0c             	sub    esp,0xc
c00290d1:	50                   	push   eax
c00290d2:	e8 a7 b8 fe ff       	call   c001497e <FPU::~FPU()>
c00290d7:	83 c4 10             	add    esp,0x10
c00290da:	90                   	nop
c00290db:	83 c4 0c             	add    esp,0xc
c00290de:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290e0 <SSE::~SSE()>:
c00290e0:	83 ec 0c             	sub    esp,0xc
c00290e3:	83 ec 0c             	sub    esp,0xc
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 cd ff ff ff       	call   c00290bc <SSE::~SSE()>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 ec 08             	sub    esp,0x8
c00290f5:	68 58 01 00 00       	push   0x158
c00290fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fe:	e8 3c 9e fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0029103:	83 c4 10             	add    esp,0x10
c0029106:	83 c4 0c             	add    esp,0xc
c0029109:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002910a <x87::~x87()>:
c002910a:	83 ec 0c             	sub    esp,0xc
c002910d:	ba bc d1 02 c0       	mov    edx,0xc002d1bc
c0029112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029116:	89 10                	mov    DWORD PTR [eax],edx
c0029118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	50                   	push   eax
c0029120:	e8 59 b8 fe ff       	call   c001497e <FPU::~FPU()>
c0029125:	83 c4 10             	add    esp,0x10
c0029128:	90                   	nop
c0029129:	83 c4 0c             	add    esp,0xc
c002912c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002912e <x87::~x87()>:
c002912e:	83 ec 0c             	sub    esp,0xc
c0029131:	83 ec 0c             	sub    esp,0xc
c0029134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029138:	e8 cd ff ff ff       	call   c002910a <x87::~x87()>
c002913d:	83 c4 10             	add    esp,0x10
c0029140:	83 ec 08             	sub    esp,0x8
c0029143:	68 58 01 00 00       	push   0x158
c0029148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002914c:	e8 ee 9d fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0029151:	83 c4 10             	add    esp,0x10
c0029154:	83 c4 0c             	add    esp,0xc
c0029157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029158 <IOAPIC::~IOAPIC()>:
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	ba 14 d3 02 c0       	mov    edx,0xc002d314
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	89 10                	mov    DWORD PTR [eax],edx
c0029166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916a:	83 ec 0c             	sub    esp,0xc
c002916d:	50                   	push   eax
c002916e:	e8 a5 b1 fe ff       	call   c0014318 <Device::~Device()>
c0029173:	83 c4 10             	add    esp,0x10
c0029176:	90                   	nop
c0029177:	83 c4 0c             	add    esp,0xc
c002917a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002917c <IOAPIC::~IOAPIC()>:
c002917c:	83 ec 0c             	sub    esp,0xc
c002917f:	83 ec 0c             	sub    esp,0xc
c0029182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029186:	e8 cd ff ff ff       	call   c0029158 <IOAPIC::~IOAPIC()>
c002918b:	83 c4 10             	add    esp,0x10
c002918e:	83 ec 08             	sub    esp,0x8
c0029191:	68 68 01 00 00       	push   0x168
c0029196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002919a:	e8 a0 9d fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c002919f:	83 c4 10             	add    esp,0x10
c00291a2:	83 c4 0c             	add    esp,0xc
c00291a5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00291a6 <APIC::~APIC()>:
c00291a6:	83 ec 0c             	sub    esp,0xc
c00291a9:	ba cc d2 02 c0       	mov    edx,0xc002d2cc
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	89 10                	mov    DWORD PTR [eax],edx
c00291b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b8:	83 ec 0c             	sub    esp,0xc
c00291bb:	50                   	push   eax
c00291bc:	e8 87 bc fe ff       	call   c0014e48 <InterruptController::~InterruptController()>
c00291c1:	83 c4 10             	add    esp,0x10
c00291c4:	90                   	nop
c00291c5:	83 c4 0c             	add    esp,0xc
c00291c8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00291ca <APIC::~APIC()>:
c00291ca:	83 ec 0c             	sub    esp,0xc
c00291cd:	83 ec 0c             	sub    esp,0xc
c00291d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291d4:	e8 cd ff ff ff       	call   c00291a6 <APIC::~APIC()>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	83 ec 08             	sub    esp,0x8
c00291df:	68 58 21 00 00       	push   0x2158
c00291e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291e8:	e8 52 9d fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00291ed:	83 c4 10             	add    esp,0x10
c00291f0:	83 c4 0c             	add    esp,0xc
c00291f3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291f4 <PIC::~PIC()>:
c00291f4:	83 ec 0c             	sub    esp,0xc
c00291f7:	ba 64 d3 02 c0       	mov    edx,0xc002d364
c00291fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029200:	89 10                	mov    DWORD PTR [eax],edx
c0029202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029206:	83 ec 0c             	sub    esp,0xc
c0029209:	50                   	push   eax
c002920a:	e8 39 bc fe ff       	call   c0014e48 <InterruptController::~InterruptController()>
c002920f:	83 c4 10             	add    esp,0x10
c0029212:	90                   	nop
c0029213:	83 c4 0c             	add    esp,0xc
c0029216:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029218 <PIC::~PIC()>:
c0029218:	83 ec 0c             	sub    esp,0xc
c002921b:	83 ec 0c             	sub    esp,0xc
c002921e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029222:	e8 cd ff ff ff       	call   c00291f4 <PIC::~PIC()>
c0029227:	83 c4 10             	add    esp,0x10
c002922a:	83 ec 08             	sub    esp,0x8
c002922d:	68 58 21 00 00       	push   0x2158
c0029232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029236:	e8 04 9d fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c002923b:	83 c4 10             	add    esp,0x10
c002923e:	83 c4 0c             	add    esp,0xc
c0029241:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029242 <APICTimer::~APICTimer()>:
c0029242:	83 ec 0c             	sub    esp,0xc
c0029245:	ba b8 d3 02 c0       	mov    edx,0xc002d3b8
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	89 10                	mov    DWORD PTR [eax],edx
c0029250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029254:	83 ec 0c             	sub    esp,0xc
c0029257:	50                   	push   eax
c0029258:	e8 43 db fe ff       	call   c0016da0 <Timer::~Timer()>
c002925d:	83 c4 10             	add    esp,0x10
c0029260:	90                   	nop
c0029261:	83 c4 0c             	add    esp,0xc
c0029264:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029266 <APICTimer::~APICTimer()>:
c0029266:	83 ec 0c             	sub    esp,0xc
c0029269:	83 ec 0c             	sub    esp,0xc
c002926c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029270:	e8 cd ff ff ff       	call   c0029242 <APICTimer::~APICTimer()>
c0029275:	83 c4 10             	add    esp,0x10
c0029278:	83 ec 08             	sub    esp,0x8
c002927b:	68 60 01 00 00       	push   0x160
c0029280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029284:	e8 b6 9c fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c0029289:	83 c4 10             	add    esp,0x10
c002928c:	83 c4 0c             	add    esp,0xc
c002928f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029290 <PIT::~PIT()>:
c0029290:	83 ec 0c             	sub    esp,0xc
c0029293:	ba 08 d4 02 c0       	mov    edx,0xc002d408
c0029298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002929c:	89 10                	mov    DWORD PTR [eax],edx
c002929e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a2:	83 ec 0c             	sub    esp,0xc
c00292a5:	50                   	push   eax
c00292a6:	e8 f5 da fe ff       	call   c0016da0 <Timer::~Timer()>
c00292ab:	83 c4 10             	add    esp,0x10
c00292ae:	90                   	nop
c00292af:	83 c4 0c             	add    esp,0xc
c00292b2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00292b4 <PIT::~PIT()>:
c00292b4:	83 ec 0c             	sub    esp,0xc
c00292b7:	83 ec 0c             	sub    esp,0xc
c00292ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292be:	e8 cd ff ff ff       	call   c0029290 <PIT::~PIT()>
c00292c3:	83 c4 10             	add    esp,0x10
c00292c6:	83 ec 08             	sub    esp,0x8
c00292c9:	68 5c 01 00 00       	push   0x15c
c00292ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292d2:	e8 68 9c fe ff       	call   c0012f3f <operator delete(void*, unsigned long)>
c00292d7:	83 c4 10             	add    esp,0x10
c00292da:	83 c4 0c             	add    esp,0xc
c00292dd:	c3                   	ret    
