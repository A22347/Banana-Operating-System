
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a7 78 00 00       	call   c00078c7 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 1b 02 c0       	mov    eax,0xc0021b48
c0000025:	3d 48 1b 02 c0       	cmp    eax,0xc0021b48
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 1b 02 c0       	push   0xc0021b48
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 1b 02 c0       	mov    eax,0xc0021b48
c0000051:	2d 48 1b 02 c0       	sub    eax,0xc0021b48
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 1b 02 c0       	push   0xc0021b48
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c8 ea 01 c0       	mov    ebx,0xc001eac8
c0000097:	81 eb c4 ea 01 c0    	sub    ebx,0xc001eac4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c4 ea 01 c0       	mov    esi,0xc001eac4
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 1b 02 c0       	push   0xc0021b48
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 48 1b 02 c0       	push   0xc0021b48
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 93 40 01 00       	call   c0014340 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0d a1 00 00       	call   c000a3d2 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 71 40 01 00       	call   c0014340 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 7a 45 01 00       	call   c0014868 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f1 4b 01 00       	call   c0014ee8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3b 00 01 00       	jmp    c00103ba <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	31 c0                	xor    eax,eax
c00003b0:	5b                   	pop    ebx
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c6:	31 c0                	xor    eax,eax
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 7c 00 00 00    	je     c000046c <memmove+0x9c>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	09 ce                	or     esi,ecx
c0000404:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000407:	89 f0                	mov    eax,esi
c0000409:	83 f9 0c             	cmp    ecx,0xc
c000040c:	0f 97 c1             	seta   cl
c000040f:	84 c8                	test   al,cl
c0000411:	0f 84 89 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000417:	89 e9                	mov    ecx,ebp
c0000419:	09 d9                	or     ecx,ebx
c000041b:	83 e1 03             	and    ecx,0x3
c000041e:	0f 85 7c 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000424:	89 d7                	mov    edi,edx
c0000426:	89 d9                	mov    ecx,ebx
c0000428:	83 e7 fc             	and    edi,0xfffffffc
c000042b:	89 ee                	mov    esi,ebp
c000042d:	01 df                	add    edi,ebx
c000042f:	90                   	nop
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c6 04             	add    esi,0x4
c0000435:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000438:	83 c1 04             	add    ecx,0x4
c000043b:	39 f9                	cmp    ecx,edi
c000043d:	75 f1                	jne    c0000430 <memmove+0x60>
c000043f:	89 d1                	mov    ecx,edx
c0000441:	89 d7                	mov    edi,edx
c0000443:	83 e1 fc             	and    ecx,0xfffffffc
c0000446:	29 cf                	sub    edi,ecx
c0000448:	01 cb                	add    ebx,ecx
c000044a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044e:	39 ca                	cmp    edx,ecx
c0000450:	74 1a                	je     c000046c <memmove+0x9c>
c0000452:	8a 03                	mov    al,BYTE PTR [ebx]
c0000454:	83 ff 01             	cmp    edi,0x1
c0000457:	88 06                	mov    BYTE PTR [esi],al
c0000459:	74 11                	je     c000046c <memmove+0x9c>
c000045b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045e:	83 ff 02             	cmp    edi,0x2
c0000461:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000464:	74 06                	je     c000046c <memmove+0x9c>
c0000466:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000469:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046c:	5b                   	pop    ebx
c000046d:	89 e8                	mov    eax,ebp
c000046f:	5e                   	pop    esi
c0000470:	5f                   	pop    edi
c0000471:	5d                   	pop    ebp
c0000472:	c3                   	ret    
c0000473:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 ea                	jbe    c000046c <memmove+0x9c>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e6                	je     c000046c <memmove+0x9c>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb af                	jmp    c000046c <memmove+0x9c>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	53                   	push   ebx
c00004c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004ca:	85 d2                	test   edx,edx
c00004cc:	74 1f                	je     c00004ed <memset+0x2d>
c00004ce:	31 c0                	xor    eax,eax
c00004d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004d4:	88 c4                	mov    ah,al
c00004d6:	89 c1                	mov    ecx,eax
c00004d8:	c1 e1 10             	shl    ecx,0x10
c00004db:	09 c8                	or     eax,ecx
c00004dd:	83 fa 04             	cmp    edx,0x4
c00004e0:	73 1e                	jae    c0000500 <memset+0x40>
c00004e2:	85 d2                	test   edx,edx
c00004e4:	74 07                	je     c00004ed <memset+0x2d>
c00004e6:	88 03                	mov    BYTE PTR [ebx],al
c00004e8:	f6 c2 02             	test   dl,0x2
c00004eb:	75 30                	jne    c000051d <memset+0x5d>
c00004ed:	89 d8                	mov    eax,ebx
c00004ef:	5b                   	pop    ebx
c00004f0:	5f                   	pop    edi
c00004f1:	c3                   	ret    
c00004f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000500:	89 03                	mov    DWORD PTR [ebx],eax
c0000502:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000505:	89 d9                	mov    ecx,ebx
c0000507:	83 e7 fc             	and    edi,0xfffffffc
c000050a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000050e:	29 f9                	sub    ecx,edi
c0000510:	01 d1                	add    ecx,edx
c0000512:	c1 e9 02             	shr    ecx,0x2
c0000515:	fc                   	cld    
c0000516:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000518:	89 d8                	mov    eax,ebx
c000051a:	5b                   	pop    ebx
c000051b:	5f                   	pop    edi
c000051c:	c3                   	ret    
c000051d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000522:	eb c9                	jmp    c00004ed <memset+0x2d>
c0000524:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000052a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	89 f0                	mov    eax,esi
c0000596:	5b                   	pop    ebx
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005d9:	5b                   	pop    ebx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	31 c0                	xor    eax,eax
c00005ec:	5b                   	pop    ebx
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	88 13                	mov    BYTE PTR [ebx],dl
c0000612:	41                   	inc    ecx
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062f:	85 ff                	test   edi,edi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000635:	8d 47 ff             	lea    eax,[edi-0x1]
c0000638:	8d 4a 01             	lea    ecx,[edx+0x1]
c000063b:	88 1a                	mov    BYTE PTR [edx],bl
c000063d:	84 db                	test   bl,bl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000648:	8d 47 fe             	lea    eax,[edi-0x2]
c000064b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000064e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	47                   	inc    edi
c0000661:	41                   	inc    ecx
c0000662:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	83 f8 04             	cmp    eax,0x4
c0000687:	73 17                	jae    c00006a0 <strncpy+0x80>
c0000689:	85 c0                	test   eax,eax
c000068b:	74 e4                	je     c0000671 <strncpy+0x51>
c000068d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0000690:	a8 02                	test   al,0x2
c0000692:	74 dd                	je     c0000671 <strncpy+0x51>
c0000694:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c000069b:	eb d4                	jmp    c0000671 <strncpy+0x51>
c000069d:	8d 76 00             	lea    esi,[esi+0x0]
c00006a0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006a6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006a9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006b1:	83 e7 fc             	and    edi,0xfffffffc
c00006b4:	29 f9                	sub    ecx,edi
c00006b6:	01 c1                	add    ecx,eax
c00006b8:	c1 e9 02             	shr    ecx,0x2
c00006bb:	fc                   	cld    
c00006bc:	31 c0                	xor    eax,eax
c00006be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006c0:	89 d0                	mov    eax,edx
c00006c2:	5b                   	pop    ebx
c00006c3:	5e                   	pop    esi
c00006c4:	5f                   	pop    edi
c00006c5:	c3                   	ret    
c00006c6:	8d 76 00             	lea    esi,[esi+0x0]
c00006c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006d0 <strcmp>:
c00006d0:	56                   	push   esi
c00006d1:	53                   	push   ebx
c00006d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006da:	8a 16                	mov    dl,BYTE PTR [esi]
c00006dc:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006de:	38 d1                	cmp    cl,dl
c00006e0:	75 1d                	jne    c00006ff <strcmp+0x2f>
c00006e2:	84 c9                	test   cl,cl
c00006e4:	74 2a                	je     c0000710 <strcmp+0x40>
c00006e6:	b8 01 00 00 00       	mov    eax,0x1
c00006eb:	eb 08                	jmp    c00006f5 <strcmp+0x25>
c00006ed:	8d 76 00             	lea    esi,[esi+0x0]
c00006f0:	40                   	inc    eax
c00006f1:	84 d2                	test   dl,dl
c00006f3:	74 1b                	je     c0000710 <strcmp+0x40>
c00006f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00006f8:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c00006fb:	38 ca                	cmp    dl,cl
c00006fd:	74 f1                	je     c00006f0 <strcmp+0x20>
c00006ff:	31 c0                	xor    eax,eax
c0000701:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000707:	88 d0                	mov    al,dl
c0000709:	5b                   	pop    ebx
c000070a:	29 c8                	sub    eax,ecx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	5e                   	pop    esi
c0000714:	c3                   	ret    
c0000715:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strchr>:
c0000720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000724:	8a 10                	mov    dl,BYTE PTR [eax]
c0000726:	84 d2                	test   dl,dl
c0000728:	74 21                	je     c000074b <strchr+0x2b>
c000072a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000072e:	38 ca                	cmp    dl,cl
c0000730:	75 12                	jne    c0000744 <strchr+0x24>
c0000732:	eb 1a                	jmp    c000074e <strchr+0x2e>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000740:	38 ca                	cmp    dl,cl
c0000742:	74 09                	je     c000074d <strchr+0x2d>
c0000744:	40                   	inc    eax
c0000745:	8a 10                	mov    dl,BYTE PTR [eax]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strchr+0x20>
c000074b:	31 c0                	xor    eax,eax
c000074d:	c3                   	ret    
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strncmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000075f:	85 ff                	test   edi,edi
c0000761:	74 2f                	je     c0000792 <strncmp+0x42>
c0000763:	8a 16                	mov    dl,BYTE PTR [esi]
c0000765:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000767:	38 d1                	cmp    cl,dl
c0000769:	75 35                	jne    c00007a0 <strncmp+0x50>
c000076b:	8d 46 01             	lea    eax,[esi+0x1]
c000076e:	84 c9                	test   cl,cl
c0000770:	74 20                	je     c0000792 <strncmp+0x42>
c0000772:	01 fe                	add    esi,edi
c0000774:	eb 17                	jmp    c000078d <strncmp+0x3d>
c0000776:	8d 76 00             	lea    esi,[esi+0x0]
c0000779:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000780:	8a 10                	mov    dl,BYTE PTR [eax]
c0000782:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000784:	38 ca                	cmp    dl,cl
c0000786:	75 18                	jne    c00007a0 <strncmp+0x50>
c0000788:	40                   	inc    eax
c0000789:	84 d2                	test   dl,dl
c000078b:	74 05                	je     c0000792 <strncmp+0x42>
c000078d:	43                   	inc    ebx
c000078e:	39 c6                	cmp    esi,eax
c0000790:	75 ee                	jne    c0000780 <strncmp+0x30>
c0000792:	5b                   	pop    ebx
c0000793:	31 c0                	xor    eax,eax
c0000795:	5e                   	pop    esi
c0000796:	5f                   	pop    edi
c0000797:	c3                   	ret    
c0000798:	90                   	nop
c0000799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007a0:	5b                   	pop    ebx
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007a9:	88 d0                	mov    al,dl
c00007ab:	5e                   	pop    esi
c00007ac:	29 c8                	sub    eax,ecx
c00007ae:	5f                   	pop    edi
c00007af:	c3                   	ret    

c00007b0 <strcat>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ba:	89 c3                	mov    ebx,eax
c00007bc:	eb 04                	jmp    c00007c2 <strcat+0x12>
c00007be:	66 90                	xchg   ax,ax
c00007c0:	89 d3                	mov    ebx,edx
c00007c2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007c9:	75 f5                	jne    c00007c0 <strcat+0x10>
c00007cb:	31 d2                	xor    edx,edx
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]
c00007d0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007d3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007d6:	42                   	inc    edx
c00007d7:	84 c9                	test   cl,cl
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x20>
c00007db:	5b                   	pop    ebx
c00007dc:	5e                   	pop    esi
c00007dd:	c3                   	ret    
c00007de:	66 90                	xchg   ax,ax

c00007e0 <strncat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007ee:	85 f6                	test   esi,esi
c00007f0:	74 2e                	je     c0000820 <strncat+0x40>
c00007f2:	89 c2                	mov    edx,eax
c00007f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000800:	42                   	inc    edx
c0000801:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000805:	75 f9                	jne    c0000800 <strncat+0x20>
c0000807:	01 ce                	add    esi,ecx
c0000809:	eb 0a                	jmp    c0000815 <strncat+0x35>
c000080b:	90                   	nop
c000080c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000810:	39 f1                	cmp    ecx,esi
c0000812:	74 1c                	je     c0000830 <strncat+0x50>
c0000814:	42                   	inc    edx
c0000815:	41                   	inc    ecx
c0000816:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000819:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000081c:	84 db                	test   bl,bl
c000081e:	75 f0                	jne    c0000810 <strncat+0x30>
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	c3                   	ret    
c0000823:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000830:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000833:	5b                   	pop    ebx
c0000834:	5e                   	pop    esi
c0000835:	c3                   	ret    
c0000836:	8d 76 00             	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000840 <strstr>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000847:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084b:	57                   	push   edi
c000084c:	e8 df fc ff ff       	call   c0000530 <strlen>
c0000851:	59                   	pop    ecx
c0000852:	85 c0                	test   eax,eax
c0000854:	74 3a                	je     c0000890 <strstr+0x50>
c0000856:	89 c6                	mov    esi,eax
c0000858:	eb 16                	jmp    c0000870 <strstr+0x30>
c000085a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000860:	56                   	push   esi
c0000861:	57                   	push   edi
c0000862:	53                   	push   ebx
c0000863:	e8 18 fb ff ff       	call   c0000380 <memcmp>
c0000868:	83 c4 0c             	add    esp,0xc
c000086b:	85 c0                	test   eax,eax
c000086d:	74 21                	je     c0000890 <strstr+0x50>
c000086f:	43                   	inc    ebx
c0000870:	53                   	push   ebx
c0000871:	e8 ba fc ff ff       	call   c0000530 <strlen>
c0000876:	5a                   	pop    edx
c0000877:	39 f0                	cmp    eax,esi
c0000879:	73 e5                	jae    c0000860 <strstr+0x20>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	eb 0d                	jmp    c0000890 <strstr+0x50>
c0000883:	90                   	nop
c0000884:	90                   	nop
c0000885:	90                   	nop
c0000886:	90                   	nop
c0000887:	90                   	nop
c0000888:	90                   	nop
c0000889:	90                   	nop
c000088a:	90                   	nop
c000088b:	90                   	nop
c000088c:	90                   	nop
c000088d:	90                   	nop
c000088e:	90                   	nop
c000088f:	90                   	nop
c0000890:	89 d8                	mov    eax,ebx
c0000892:	5b                   	pop    ebx
c0000893:	5e                   	pop    esi
c0000894:	5f                   	pop    edi
c0000895:	c3                   	ret    
c0000896:	8d 76 00             	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008a0 <toupper>:
c00008a0:	31 d2                	xor    edx,edx
c00008a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008a6:	88 c2                	mov    dl,al
c00008a8:	f6 82 e0 ea 01 c0 02 	test   BYTE PTR [edx-0x3ffe1520],0x2
c00008af:	74 03                	je     c00008b4 <toupper+0x14>
c00008b1:	83 e8 20             	sub    eax,0x20
c00008b4:	c3                   	ret    
c00008b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <tolower>:
c00008c0:	31 d2                	xor    edx,edx
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	88 c2                	mov    dl,al
c00008c8:	f6 82 e0 ea 01 c0 01 	test   BYTE PTR [edx-0x3ffe1520],0x1
c00008cf:	74 03                	je     c00008d4 <tolower+0x14>
c00008d1:	83 c0 20             	add    eax,0x20
c00008d4:	c3                   	ret    
c00008d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	90                   	nop
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8a 01                	mov    al,BYTE PTR [ecx]
c00008f4:	88 c2                	mov    dl,al
c00008f6:	f6 82 e0 ea 01 c0 08 	test   BYTE PTR [edx-0x3ffe1520],0x8
c00008fd:	75 04                	jne    c0000903 <simple_strtoul+0x23>
c00008ff:	3c 09                	cmp    al,0x9
c0000901:	75 0d                	jne    c0000910 <simple_strtoul+0x30>
c0000903:	41                   	inc    ecx
c0000904:	eb ea                	jmp    c00008f0 <simple_strtoul+0x10>
c0000906:	8d 76 00             	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	3c 2d                	cmp    al,0x2d
c0000912:	0f 84 48 01 00 00    	je     c0000a60 <simple_strtoul+0x180>
c0000918:	3c 2b                	cmp    al,0x2b
c000091a:	0f 84 e0 00 00 00    	je     c0000a00 <simple_strtoul+0x120>
c0000920:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000928:	85 f6                	test   esi,esi
c000092a:	0f 85 e1 00 00 00    	jne    c0000a11 <simple_strtoul+0x131>
c0000930:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000933:	80 fa 30             	cmp    dl,0x30
c0000936:	0f 84 75 01 00 00    	je     c0000ab1 <simple_strtoul+0x1d1>
c000093c:	be 0a 00 00 00       	mov    esi,0xa
c0000941:	84 d2                	test   dl,dl
c0000943:	0f 84 9f 01 00 00    	je     c0000ae8 <simple_strtoul+0x208>
c0000949:	31 ed                	xor    ebp,ebp
c000094b:	31 ff                	xor    edi,edi
c000094d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000954:	eb 35                	jmp    c000098b <simple_strtoul+0xab>
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000960:	83 eb 30             	sub    ebx,0x30
c0000963:	39 f3                	cmp    ebx,esi
c0000965:	73 59                	jae    c00009c0 <simple_strtoul+0xe0>
c0000967:	31 d2                	xor    edx,edx
c0000969:	89 d8                	mov    eax,ebx
c000096b:	f7 d0                	not    eax
c000096d:	f7 f6                	div    esi
c000096f:	39 f8                	cmp    eax,edi
c0000971:	0f 82 c9 00 00 00    	jb     c0000a40 <simple_strtoul+0x160>
c0000977:	0f af fe             	imul   edi,esi
c000097a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000981:	01 df                	add    edi,ebx
c0000983:	41                   	inc    ecx
c0000984:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000987:	84 d2                	test   dl,dl
c0000989:	74 35                	je     c00009c0 <simple_strtoul+0xe0>
c000098b:	31 db                	xor    ebx,ebx
c000098d:	88 d3                	mov    bl,dl
c000098f:	f6 83 e0 ea 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1520],0x4
c0000996:	75 c8                	jne    c0000960 <simple_strtoul+0x80>
c0000998:	52                   	push   edx
c0000999:	e8 02 ff ff ff       	call   c00008a0 <toupper>
c000099e:	31 d2                	xor    edx,edx
c00009a0:	5b                   	pop    ebx
c00009a1:	88 c2                	mov    dl,al
c00009a3:	f6 82 e0 ea 01 c0 01 	test   BYTE PTR [edx-0x3ffe1520],0x1
c00009aa:	74 14                	je     c00009c0 <simple_strtoul+0xe0>
c00009ac:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009af:	39 f3                	cmp    ebx,esi
c00009b1:	72 b4                	jb     c0000967 <simple_strtoul+0x87>
c00009b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c4:	85 c0                	test   eax,eax
c00009c6:	74 18                	je     c00009e0 <simple_strtoul+0x100>
c00009c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009cb:	09 f8                	or     eax,edi
c00009cd:	0f 85 7d 00 00 00    	jne    c0000a50 <simple_strtoul+0x170>
c00009d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009db:	31 ff                	xor    edi,edi
c00009dd:	89 30                	mov    DWORD PTR [eax],esi
c00009df:	90                   	nop
c00009e0:	4d                   	dec    ebp
c00009e1:	75 05                	jne    c00009e8 <simple_strtoul+0x108>
c00009e3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009e8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009ed:	75 02                	jne    c00009f1 <simple_strtoul+0x111>
c00009ef:	f7 df                	neg    edi
c00009f1:	83 c4 08             	add    esp,0x8
c00009f4:	89 f8                	mov    eax,edi
c00009f6:	5b                   	pop    ebx
c00009f7:	5e                   	pop    esi
c00009f8:	5f                   	pop    edi
c00009f9:	5d                   	pop    ebp
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a09:	85 f6                	test   esi,esi
c0000a0b:	0f 84 1f ff ff ff    	je     c0000930 <simple_strtoul+0x50>
c0000a11:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a14:	83 f8 22             	cmp    eax,0x22
c0000a17:	77 7b                	ja     c0000a94 <simple_strtoul+0x1b4>
c0000a19:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a1c:	83 fe 08             	cmp    esi,0x8
c0000a1f:	0f 84 b3 00 00 00    	je     c0000ad8 <simple_strtoul+0x1f8>
c0000a25:	83 fe 10             	cmp    esi,0x10
c0000a28:	0f 85 13 ff ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000a2e:	80 fa 30             	cmp    dl,0x30
c0000a31:	74 3b                	je     c0000a6e <simple_strtoul+0x18e>
c0000a33:	be 10 00 00 00       	mov    esi,0x10
c0000a38:	e9 04 ff ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a40:	bd 01 00 00 00       	mov    ebp,0x1
c0000a45:	31 ff                	xor    edi,edi
c0000a47:	e9 37 ff ff ff       	jmp    c0000983 <simple_strtoul+0xa3>
c0000a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a54:	89 08                	mov    DWORD PTR [eax],ecx
c0000a56:	eb 88                	jmp    c00009e0 <simple_strtoul+0x100>
c0000a58:	90                   	nop
c0000a59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a60:	41                   	inc    ecx
c0000a61:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a69:	e9 ba fe ff ff       	jmp    c0000928 <simple_strtoul+0x48>
c0000a6e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a72:	88 04 24             	mov    BYTE PTR [esp],al
c0000a75:	50                   	push   eax
c0000a76:	e8 45 fe ff ff       	call   c00008c0 <tolower>
c0000a7b:	5e                   	pop    esi
c0000a7c:	83 f8 78             	cmp    eax,0x78
c0000a7f:	0f 84 88 00 00 00    	je     c0000b0d <simple_strtoul+0x22d>
c0000a85:	41                   	inc    ecx
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a8f:	e9 ad fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000a98:	85 ff                	test   edi,edi
c0000a9a:	74 5e                	je     c0000afa <simple_strtoul+0x21a>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	85 c9                	test   ecx,ecx
c0000aa2:	75 50                	jne    c0000af4 <simple_strtoul+0x214>
c0000aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aaa:	31 ff                	xor    edi,edi
c0000aac:	e9 37 ff ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000ab1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab8:	50                   	push   eax
c0000ab9:	e8 02 fe ff ff       	call   c00008c0 <tolower>
c0000abe:	5d                   	pop    ebp
c0000abf:	83 f8 78             	cmp    eax,0x78
c0000ac2:	74 3d                	je     c0000b01 <simple_strtoul+0x221>
c0000ac4:	41                   	inc    ecx
c0000ac5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ac9:	80 fa 30             	cmp    dl,0x30
c0000acc:	74 13                	je     c0000ae1 <simple_strtoul+0x201>
c0000ace:	be 08 00 00 00       	mov    esi,0x8
c0000ad3:	e9 69 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000ad8:	80 fa 30             	cmp    dl,0x30
c0000adb:	0f 85 60 fe ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000ae1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000ae5:	41                   	inc    ecx
c0000ae6:	eb e6                	jmp    c0000ace <simple_strtoul+0x1ee>
c0000ae8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	74 0a                	je     c0000afa <simple_strtoul+0x21a>
c0000af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000af8:	89 30                	mov    DWORD PTR [eax],esi
c0000afa:	31 ff                	xor    edi,edi
c0000afc:	e9 e7 fe ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000b01:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b05:	83 c1 02             	add    ecx,0x2
c0000b08:	e9 21 ff ff ff       	jmp    c0000a2e <simple_strtoul+0x14e>
c0000b0d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b11:	be 10 00 00 00       	mov    esi,0x10
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>

c0000b1e <largebin_index>:
c0000b1e:	89 c2                	mov    edx,eax
c0000b20:	c1 ea 08             	shr    edx,0x8
c0000b23:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b29:	77 10                	ja     c0000b3b <largebin_index+0x1d>
c0000b2b:	0f bd d2             	bsr    edx,edx
c0000b2e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b31:	d3 e8                	shr    eax,cl
c0000b33:	83 e0 03             	and    eax,0x3
c0000b36:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b3a:	c3                   	ret    
c0000b3b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b40:	c3                   	ret    

c0000b41 <malloc_init_state>:
c0000b41:	53                   	push   ebx
c0000b42:	8d 50 34             	lea    edx,[eax+0x34]
c0000b45:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b4b:	89 d1                	mov    ecx,edx
c0000b4d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b50:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b53:	83 c2 08             	add    edx,0x8
c0000b56:	39 da                	cmp    edx,ebx
c0000b58:	75 f3                	jne    c0000b4d <malloc_init_state+0xc>
c0000b5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b5c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b66:	83 e2 03             	and    edx,0x3
c0000b69:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b73:	83 ca 48             	or     edx,0x48
c0000b76:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b80:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b8a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000b91:	89 10                	mov    DWORD PTR [eax],edx
c0000b93:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000b96:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ba0:	5b                   	pop    ebx
c0000ba1:	c3                   	ret    

c0000ba2 <malloc_consolidate>:
c0000ba2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ba4:	85 d2                	test   edx,edx
c0000ba6:	0f 84 d8 00 00 00    	je     c0000c84 <malloc_consolidate+0xe2>
c0000bac:	55                   	push   ebp
c0000bad:	83 e2 fd             	and    edx,0xfffffffd
c0000bb0:	57                   	push   edi
c0000bb1:	89 c5                	mov    ebp,eax
c0000bb3:	56                   	push   esi
c0000bb4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bb7:	53                   	push   ebx
c0000bb8:	83 ec 10             	sub    esp,0x10
c0000bbb:	89 10                	mov    DWORD PTR [eax],edx
c0000bbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bc1:	c1 ea 03             	shr    edx,0x3
c0000bc4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bc8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bcc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bcf:	85 d2                	test   edx,edx
c0000bd1:	0f 84 98 00 00 00    	je     c0000c6f <malloc_consolidate+0xcd>
c0000bd7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bde:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000be1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000be8:	89 f9                	mov    ecx,edi
c0000bea:	83 e1 fe             	and    ecx,0xfffffffe
c0000bed:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000bf0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000bf3:	83 e3 fc             	and    ebx,0xfffffffc
c0000bf6:	83 e7 01             	and    edi,0x1
c0000bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000bfc:	75 14                	jne    c0000c12 <malloc_consolidate+0x70>
c0000bfe:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c00:	29 fa                	sub    edx,edi
c0000c02:	01 f9                	add    ecx,edi
c0000c04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c07:	89 fb                	mov    ebx,edi
c0000c09:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c0c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c0f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c12:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c15:	74 40                	je     c0000c57 <malloc_consolidate+0xb5>
c0000c17:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c1a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c1d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c21:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c24:	83 e7 01             	and    edi,0x1
c0000c27:	75 0e                	jne    c0000c37 <malloc_consolidate+0x95>
c0000c29:	01 d9                	add    ecx,ebx
c0000c2b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c2e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c31:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c34:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c37:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c3a:	89 ce                	mov    esi,ecx
c0000c3c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c3f:	83 ce 01             	or     esi,0x1
c0000c42:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c45:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c48:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c4b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c4f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c52:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c55:	eb 0c                	jmp    c0000c63 <malloc_consolidate+0xc1>
c0000c57:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c5a:	83 c9 01             	or     ecx,0x1
c0000c5d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c67:	85 d2                	test   edx,edx
c0000c69:	0f 85 6f ff ff ff    	jne    c0000bde <malloc_consolidate+0x3c>
c0000c6f:	83 c5 04             	add    ebp,0x4
c0000c72:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c76:	0f 85 50 ff ff ff    	jne    c0000bcc <malloc_consolidate+0x2a>
c0000c7c:	83 c4 10             	add    esp,0x10
c0000c7f:	5b                   	pop    ebx
c0000c80:	5e                   	pop    esi
c0000c81:	5f                   	pop    edi
c0000c82:	5d                   	pop    ebp
c0000c83:	c3                   	ret    
c0000c84:	e9 b8 fe ff ff       	jmp    c0000b41 <malloc_init_state>

c0000c89 <dlfree>:
c0000c89:	57                   	push   edi
c0000c8a:	56                   	push   esi
c0000c8b:	53                   	push   ebx
c0000c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000c90:	85 db                	test   ebx,ebx
c0000c92:	0f 84 e2 00 00 00    	je     c0000d7a <dlfree+0xf1>
c0000c98:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000c9b:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000ca1:	89 f0                	mov    eax,esi
c0000ca3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ca6:	83 e0 fc             	and    eax,0xfffffffc
c0000ca9:	39 c1                	cmp    ecx,eax
c0000cab:	72 24                	jb     c0000cd1 <dlfree+0x48>
c0000cad:	83 c9 03             	or     ecx,0x3
c0000cb0:	c1 e8 03             	shr    eax,0x3
c0000cb3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cb9:	83 e8 02             	sub    eax,0x2
c0000cbc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cc3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cc5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ccc:	e9 a9 00 00 00       	jmp    c0000d7a <dlfree+0xf1>
c0000cd1:	83 e6 02             	and    esi,0x2
c0000cd4:	0f 85 a0 00 00 00    	jne    c0000d7a <dlfree+0xf1>
c0000cda:	83 c9 01             	or     ecx,0x1
c0000cdd:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ce0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000ce6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ce9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cec:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000cf0:	75 13                	jne    c0000d05 <dlfree+0x7c>
c0000cf2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000cf5:	29 da                	sub    edx,ebx
c0000cf7:	01 d8                	add    eax,ebx
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000cff:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d02:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d05:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d0b:	74 40                	je     c0000d4d <dlfree+0xc4>
c0000d0d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d11:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d14:	80 e3 01             	and    bl,0x1
c0000d17:	75 0e                	jne    c0000d27 <dlfree+0x9e>
c0000d19:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d1c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d1f:	01 c8                	add    eax,ecx
c0000d21:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d24:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d27:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d2d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d34:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d37:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d3d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d40:	89 c1                	mov    ecx,eax
c0000d42:	83 c9 01             	or     ecx,0x1
c0000d45:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d48:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d4b:	eb 10                	jmp    c0000d5d <dlfree+0xd4>
c0000d4d:	01 c8                	add    eax,ecx
c0000d4f:	89 c1                	mov    ecx,eax
c0000d51:	83 c9 01             	or     ecx,0x1
c0000d54:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d57:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d5d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d62:	76 16                	jbe    c0000d7a <dlfree+0xf1>
c0000d64:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d6b:	74 0d                	je     c0000d7a <dlfree+0xf1>
c0000d6d:	5b                   	pop    ebx
c0000d6e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d73:	5e                   	pop    esi
c0000d74:	5f                   	pop    edi
c0000d75:	e9 28 fe ff ff       	jmp    c0000ba2 <malloc_consolidate>
c0000d7a:	5b                   	pop    ebx
c0000d7b:	5e                   	pop    esi
c0000d7c:	5f                   	pop    edi
c0000d7d:	c3                   	ret    

c0000d7e <sYSMALLOc>:
c0000d7e:	55                   	push   ebp
c0000d7f:	57                   	push   edi
c0000d80:	56                   	push   esi
c0000d81:	53                   	push   ebx
c0000d82:	89 d3                	mov    ebx,edx
c0000d84:	83 ec 2c             	sub    esp,0x2c
c0000d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d8b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000d91:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000d94:	8d 42 ff             	lea    eax,[edx-0x1]
c0000d97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000d9b:	74 1f                	je     c0000dbc <sYSMALLOc+0x3e>
c0000d9d:	89 d8                	mov    eax,ebx
c0000d9f:	e8 fe fd ff ff       	call   c0000ba2 <malloc_consolidate>
c0000da4:	83 ec 0c             	sub    esp,0xc
c0000da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dab:	83 e8 07             	sub    eax,0x7
c0000dae:	50                   	push   eax
c0000daf:	e8 30 02 00 00       	call   c0000fe4 <dlmalloc>
c0000db4:	83 c4 10             	add    esp,0x10
c0000db7:	e9 20 02 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000dbc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dbf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dc8:	83 e0 fc             	and    eax,0xfffffffc
c0000dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000dd3:	83 c0 10             	add    eax,0x10
c0000dd6:	01 c1                	add    ecx,eax
c0000dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ddc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000de3:	74 04                	je     c0000de9 <sYSMALLOc+0x6b>
c0000de5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000de9:	f7 da                	neg    edx
c0000deb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000df3:	21 d1                	and    ecx,edx
c0000df5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000df9:	7f 07                	jg     c0000e02 <sYSMALLOc+0x84>
c0000dfb:	31 c0                	xor    eax,eax
c0000dfd:	e9 da 01 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000e02:	83 ec 0c             	sub    esp,0xc
c0000e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e09:	e8 36 69 00 00       	call   c0007744 <sbrk>
c0000e0e:	83 c4 10             	add    esp,0x10
c0000e11:	89 c6                	mov    esi,eax
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	74 e3                	je     c0000dfb <sYSMALLOc+0x7d>
c0000e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e20:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e23:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e29:	39 f1                	cmp    ecx,esi
c0000e2b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e31:	75 13                	jne    c0000e46 <sYSMALLOc+0xc8>
c0000e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e37:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e3b:	83 c8 01             	or     eax,0x1
c0000e3e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e41:	e9 3e 01 00 00       	jmp    c0000f84 <sYSMALLOc+0x206>
c0000e46:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e4c:	88 d0                	mov    al,dl
c0000e4e:	83 e0 01             	and    eax,0x1
c0000e51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e5a:	0f 95 c0             	setne  al
c0000e5d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e61:	39 f1                	cmp    ecx,esi
c0000e63:	76 12                	jbe    c0000e77 <sYSMALLOc+0xf9>
c0000e65:	84 c0                	test   al,al
c0000e67:	74 0e                	je     c0000e77 <sYSMALLOc+0xf9>
c0000e69:	83 e2 fe             	and    edx,0xfffffffe
c0000e6c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e72:	e9 83 00 00 00       	jmp    c0000efa <sYSMALLOc+0x17c>
c0000e77:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e7c:	74 7c                	je     c0000efa <sYSMALLOc+0x17c>
c0000e7e:	84 c0                	test   al,al
c0000e80:	74 0c                	je     c0000e8e <sYSMALLOc+0x110>
c0000e82:	89 f0                	mov    eax,esi
c0000e84:	29 c8                	sub    eax,ecx
c0000e86:	01 e8                	add    eax,ebp
c0000e88:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e8e:	89 f2                	mov    edx,esi
c0000e90:	83 e2 07             	and    edx,0x7
c0000e93:	74 0c                	je     c0000ea1 <sYSMALLOc+0x123>
c0000e95:	b8 08 00 00 00       	mov    eax,0x8
c0000e9a:	29 d0                	sub    eax,edx
c0000e9c:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000e9f:	eb 04                	jmp    c0000ea5 <sYSMALLOc+0x127>
c0000ea1:	89 f5                	mov    ebp,esi
c0000ea3:	31 c0                	xor    eax,eax
c0000ea5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ea9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000eb1:	01 c1                	add    ecx,eax
c0000eb3:	83 ec 0c             	sub    esp,0xc
c0000eb6:	01 f1                	add    ecx,esi
c0000eb8:	01 ca                	add    edx,ecx
c0000eba:	29 c8                	sub    eax,ecx
c0000ebc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ec0:	01 c2                	add    edx,eax
c0000ec2:	52                   	push   edx
c0000ec3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ec7:	e8 78 68 00 00       	call   c0007744 <sbrk>
c0000ecc:	83 c4 10             	add    esp,0x10
c0000ecf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ed6:	75 0f                	jne    c0000ee7 <sYSMALLOc+0x169>
c0000ed8:	83 ec 0c             	sub    esp,0xc
c0000edb:	6a 00                	push   0x0
c0000edd:	e8 62 68 00 00       	call   c0007744 <sbrk>
c0000ee2:	83 c4 10             	add    esp,0x10
c0000ee5:	eb 30                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000ee7:	39 c6                	cmp    esi,eax
c0000ee9:	76 33                	jbe    c0000f1e <sYSMALLOc+0x1a0>
c0000eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eef:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000ef6:	01 f0                	add    eax,esi
c0000ef8:	eb 1d                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000efa:	83 ec 0c             	sub    esp,0xc
c0000efd:	89 f5                	mov    ebp,esi
c0000eff:	6a 00                	push   0x0
c0000f01:	e8 3e 68 00 00       	call   c0007744 <sbrk>
c0000f06:	89 c2                	mov    edx,eax
c0000f08:	29 f2                	sub    edx,esi
c0000f0a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f0e:	83 c4 10             	add    esp,0x10
c0000f11:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f17:	31 d2                	xor    edx,edx
c0000f19:	83 f8 ff             	cmp    eax,0xffffffff
c0000f1c:	74 66                	je     c0000f84 <sYSMALLOc+0x206>
c0000f1e:	29 e8                	sub    eax,ebp
c0000f20:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f23:	01 d0                	add    eax,edx
c0000f25:	83 c8 01             	or     eax,0x1
c0000f28:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f2b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f36:	74 4c                	je     c0000f84 <sYSMALLOc+0x206>
c0000f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f3c:	83 e8 0c             	sub    eax,0xc
c0000f3f:	83 e0 f8             	and    eax,0xfffffff8
c0000f42:	89 c2                	mov    edx,eax
c0000f44:	83 ca 01             	or     edx,0x1
c0000f47:	83 f8 0f             	cmp    eax,0xf
c0000f4a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f4d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f55:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f5d:	76 25                	jbe    c0000f84 <sYSMALLOc+0x206>
c0000f5f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f65:	83 ec 0c             	sub    esp,0xc
c0000f68:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f72:	83 c7 08             	add    edi,0x8
c0000f75:	57                   	push   edi
c0000f76:	e8 0e fd ff ff       	call   c0000c89 <dlfree>
c0000f7b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f81:	83 c4 10             	add    esp,0x10
c0000f84:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f8a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f90:	73 06                	jae    c0000f98 <sYSMALLOc+0x21a>
c0000f92:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f98:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f9e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fa4:	73 06                	jae    c0000fac <sYSMALLOc+0x22e>
c0000fa6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fb2:	83 e2 fc             	and    edx,0xfffffffc
c0000fb5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fb9:	0f 82 3c fe ff ff    	jb     c0000dfb <sYSMALLOc+0x7d>
c0000fbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fc3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fc6:	29 fa                	sub    edx,edi
c0000fc8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fcb:	83 ca 01             	or     edx,0x1
c0000fce:	89 fb                	mov    ebx,edi
c0000fd0:	83 c0 08             	add    eax,0x8
c0000fd3:	83 cb 01             	or     ebx,0x1
c0000fd6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fd9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fdc:	83 c4 2c             	add    esp,0x2c
c0000fdf:	5b                   	pop    ebx
c0000fe0:	5e                   	pop    esi
c0000fe1:	5f                   	pop    edi
c0000fe2:	5d                   	pop    ebp
c0000fe3:	c3                   	ret    

c0000fe4 <dlmalloc>:
c0000fe4:	55                   	push   ebp
c0000fe5:	57                   	push   edi
c0000fe6:	56                   	push   esi
c0000fe7:	53                   	push   ebx
c0000fe8:	83 ec 1c             	sub    esp,0x1c
c0000feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fef:	83 f8 df             	cmp    eax,0xffffffdf
c0000ff2:	0f 87 70 03 00 00    	ja     c0001368 <dlmalloc+0x384>
c0000ff8:	83 c0 0b             	add    eax,0xb
c0000ffb:	be 10 00 00 00       	mov    esi,0x10
c0001000:	83 f8 0f             	cmp    eax,0xf
c0001003:	76 05                	jbe    c000100a <dlmalloc+0x26>
c0001005:	83 e0 f8             	and    eax,0xfffffff8
c0001008:	89 c6                	mov    esi,eax
c000100a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001010:	f7 c7 01 00 00 00    	test   edi,0x1
c0001016:	75 17                	jne    c000102f <dlmalloc+0x4b>
c0001018:	85 ff                	test   edi,edi
c000101a:	0f 85 05 03 00 00    	jne    c0001325 <dlmalloc+0x341>
c0001020:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001025:	e8 78 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c000102a:	e9 f6 02 00 00       	jmp    c0001325 <dlmalloc+0x341>
c000102f:	39 f7                	cmp    edi,esi
c0001031:	72 1f                	jb     c0001052 <dlmalloc+0x6e>
c0001033:	89 f2                	mov    edx,esi
c0001035:	c1 ea 03             	shr    edx,0x3
c0001038:	83 ea 02             	sub    edx,0x2
c000103b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001042:	85 c0                	test   eax,eax
c0001044:	74 0c                	je     c0001052 <dlmalloc+0x6e>
c0001046:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001049:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001050:	eb 30                	jmp    c0001082 <dlmalloc+0x9e>
c0001052:	89 f0                	mov    eax,esi
c0001054:	81 fe ff 00 00 00    	cmp    esi,0xff
c000105a:	77 2e                	ja     c000108a <dlmalloc+0xa6>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000106a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000106d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001070:	39 c3                	cmp    ebx,eax
c0001072:	74 2e                	je     c00010a2 <dlmalloc+0xbe>
c0001074:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001077:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000107c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000107f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001082:	83 c0 08             	add    eax,0x8
c0001085:	e9 e0 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c000108a:	e8 8f fa ff ff       	call   c0000b1e <largebin_index>
c000108f:	83 e7 02             	and    edi,0x2
c0001092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001096:	74 0a                	je     c00010a2 <dlmalloc+0xbe>
c0001098:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000109d:	e8 00 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c00010a2:	8d 46 10             	lea    eax,[esi+0x10]
c00010a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010a9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010af:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010b5:	0f 84 13 01 00 00    	je     c00011ce <dlmalloc+0x1ea>
c00010bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010c1:	83 e7 fc             	and    edi,0xfffffffc
c00010c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ca:	77 4c                	ja     c0001118 <dlmalloc+0x134>
c00010cc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010d1:	75 45                	jne    c0001118 <dlmalloc+0x134>
c00010d3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010d9:	75 3d                	jne    c0001118 <dlmalloc+0x134>
c00010db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010df:	73 37                	jae    c0001118 <dlmalloc+0x134>
c00010e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010e4:	89 fa                	mov    edx,edi
c00010e6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010eb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c00010f0:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c00010f5:	29 f2                	sub    edx,esi
c00010f7:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c00010fe:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001105:	83 ce 01             	or     esi,0x1
c0001108:	89 d1                	mov    ecx,edx
c000110a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000110d:	83 c9 01             	or     ecx,0x1
c0001110:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001113:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001116:	eb 15                	jmp    c000112d <dlmalloc+0x149>
c0001118:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000111d:	39 fe                	cmp    esi,edi
c000111f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001126:	75 0d                	jne    c0001135 <dlmalloc+0x151>
c0001128:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000112d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001130:	e9 35 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001135:	89 f8                	mov    eax,edi
c0001137:	81 ff ff 00 00 00    	cmp    edi,0xff
c000113d:	77 19                	ja     c0001158 <dlmalloc+0x174>
c000113f:	c1 e8 03             	shr    eax,0x3
c0001142:	8d 14 00             	lea    edx,[eax+eax*1]
c0001145:	83 c2 0d             	add    edx,0xd
c0001148:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000114f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001156:	eb 46                	jmp    c000119e <dlmalloc+0x1ba>
c0001158:	e8 c1 f9 ff ff       	call   c0000b1e <largebin_index>
c000115d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001160:	83 c2 0d             	add    edx,0xd
c0001163:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000116a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001171:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001174:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001178:	89 d5                	mov    ebp,edx
c000117a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000117e:	74 1e                	je     c000119e <dlmalloc+0x1ba>
c0001180:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001183:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001186:	77 12                	ja     c000119a <dlmalloc+0x1b6>
c0001188:	83 cf 01             	or     edi,0x1
c000118b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000118e:	76 05                	jbe    c0001195 <dlmalloc+0x1b1>
c0001190:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001193:	eb f6                	jmp    c000118b <dlmalloc+0x1a7>
c0001195:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001198:	eb 04                	jmp    c000119e <dlmalloc+0x1ba>
c000119a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000119e:	89 c7                	mov    edi,eax
c00011a0:	88 c1                	mov    cl,al
c00011a2:	c1 ff 05             	sar    edi,0x5
c00011a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011a9:	bf 01 00 00 00       	mov    edi,0x1
c00011ae:	d3 e7                	shl    edi,cl
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011b6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011c9:	e9 db fe ff ff       	jmp    c00010a9 <dlmalloc+0xc5>
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	76 78                	jbe    c000124e <dlmalloc+0x26a>
c00011d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011da:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011e1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	74 63                	je     c000124e <dlmalloc+0x26a>
c00011eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00011f1:	83 e3 fc             	and    ebx,0xfffffffc
c00011f4:	39 de                	cmp    esi,ebx
c00011f6:	77 52                	ja     c000124a <dlmalloc+0x266>
c00011f8:	89 df                	mov    edi,ebx
c00011fa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00011fd:	29 f7                	sub    edi,esi
c00011ff:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001202:	01 d3                	add    ebx,edx
c0001204:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001207:	83 ff 0f             	cmp    edi,0xf
c000120a:	8d 42 08             	lea    eax,[edx+0x8]
c000120d:	77 09                	ja     c0001218 <dlmalloc+0x234>
c000120f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001213:	e9 52 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001218:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000121b:	83 ce 01             	or     esi,0x1
c000121e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001224:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000122a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001231:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001238:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000123b:	89 fa                	mov    edx,edi
c000123d:	83 ca 01             	or     edx,0x1
c0001240:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001243:	89 3b                	mov    DWORD PTR [ebx],edi
c0001245:	e9 20 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c000124a:	89 c2                	mov    edx,eax
c000124c:	eb 99                	jmp    c00011e7 <dlmalloc+0x203>
c000124e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001252:	b8 01 00 00 00       	mov    eax,0x1
c0001257:	41                   	inc    ecx
c0001258:	89 cb                	mov    ebx,ecx
c000125a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001261:	c1 eb 05             	shr    ebx,0x5
c0001264:	d3 e0                	shl    eax,cl
c0001266:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000126d:	39 f8                	cmp    eax,edi
c000126f:	77 04                	ja     c0001275 <dlmalloc+0x291>
c0001271:	85 c0                	test   eax,eax
c0001273:	75 26                	jne    c000129b <dlmalloc+0x2b7>
c0001275:	43                   	inc    ebx
c0001276:	83 fb 02             	cmp    ebx,0x2
c0001279:	0f 87 a6 00 00 00    	ja     c0001325 <dlmalloc+0x341>
c000127f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001286:	85 ff                	test   edi,edi
c0001288:	74 eb                	je     c0001275 <dlmalloc+0x291>
c000128a:	89 d8                	mov    eax,ebx
c000128c:	c1 e0 06             	shl    eax,0x6
c000128f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c0001296:	b8 01 00 00 00       	mov    eax,0x1
c000129b:	85 f8                	test   eax,edi
c000129d:	75 07                	jne    c00012a6 <dlmalloc+0x2c2>
c000129f:	83 c2 08             	add    edx,0x8
c00012a2:	01 c0                	add    eax,eax
c00012a4:	eb f5                	jmp    c000129b <dlmalloc+0x2b7>
c00012a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012a9:	39 ca                	cmp    edx,ecx
c00012ab:	75 14                	jne    c00012c1 <dlmalloc+0x2dd>
c00012ad:	89 c1                	mov    ecx,eax
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	f7 d1                	not    ecx
c00012b4:	01 c0                	add    eax,eax
c00012b6:	21 cf                	and    edi,ecx
c00012b8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012bf:	eb ac                	jmp    c000126d <dlmalloc+0x289>
c00012c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012c7:	83 e0 fc             	and    eax,0xfffffffc
c00012ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012cd:	89 c3                	mov    ebx,eax
c00012cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012d2:	29 f3                	sub    ebx,esi
c00012d4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012d7:	83 fb 0f             	cmp    ebx,0xf
c00012da:	8d 41 08             	lea    eax,[ecx+0x8]
c00012dd:	77 09                	ja     c00012e8 <dlmalloc+0x304>
c00012df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012e3:	e9 82 00 00 00       	jmp    c000136a <dlmalloc+0x386>
c00012e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012f1:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c00012f7:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c00012fd:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001304:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000130b:	77 06                	ja     c0001313 <dlmalloc+0x32f>
c000130d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001319:	89 d9                	mov    ecx,ebx
c000131b:	83 c9 01             	or     ecx,0x1
c000131e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001321:	89 1a                	mov    DWORD PTR [edx],ebx
c0001323:	eb 45                	jmp    c000136a <dlmalloc+0x386>
c0001325:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000132a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000132d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001330:	83 e2 fc             	and    edx,0xfffffffc
c0001333:	39 d1                	cmp    ecx,edx
c0001335:	77 1e                	ja     c0001355 <dlmalloc+0x371>
c0001337:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000133a:	89 f3                	mov    ebx,esi
c000133c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001342:	83 cb 01             	or     ebx,0x1
c0001345:	29 f2                	sub    edx,esi
c0001347:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000134a:	83 ca 01             	or     edx,0x1
c000134d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001350:	e9 2d fd ff ff       	jmp    c0001082 <dlmalloc+0x9e>
c0001355:	83 c4 1c             	add    esp,0x1c
c0001358:	89 f0                	mov    eax,esi
c000135a:	5b                   	pop    ebx
c000135b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001360:	5e                   	pop    esi
c0001361:	5f                   	pop    edi
c0001362:	5d                   	pop    ebp
c0001363:	e9 16 fa ff ff       	jmp    c0000d7e <sYSMALLOc>
c0001368:	31 c0                	xor    eax,eax
c000136a:	83 c4 1c             	add    esp,0x1c
c000136d:	5b                   	pop    ebx
c000136e:	5e                   	pop    esi
c000136f:	5f                   	pop    edi
c0001370:	5d                   	pop    ebp
c0001371:	c3                   	ret    

c0001372 <iALLOc>:
c0001372:	55                   	push   ebp
c0001373:	89 c5                	mov    ebp,eax
c0001375:	57                   	push   edi
c0001376:	56                   	push   esi
c0001377:	53                   	push   ebx
c0001378:	83 ec 2c             	sub    esp,0x2c
c000137b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000137f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001387:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000138e:	75 12                	jne    c00013a2 <iALLOc+0x30>
c0001390:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001394:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001399:	e8 04 f8 ff ff       	call   c0000ba2 <malloc_consolidate>
c000139e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013a7:	74 12                	je     c00013bb <iALLOc+0x49>
c00013a9:	85 ed                	test   ebp,ebp
c00013ab:	0f 84 64 01 00 00    	je     c0001515 <iALLOc+0x1a3>
c00013b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013b9:	eb 33                	jmp    c00013ee <iALLOc+0x7c>
c00013bb:	85 ed                	test   ebp,ebp
c00013bd:	75 14                	jne    c00013d3 <iALLOc+0x61>
c00013bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013c7:	83 c4 2c             	add    esp,0x2c
c00013ca:	5b                   	pop    ebx
c00013cb:	5e                   	pop    esi
c00013cc:	5f                   	pop    edi
c00013cd:	5d                   	pop    ebp
c00013ce:	e9 11 fc ff ff       	jmp    c0000fe4 <dlmalloc>
c00013d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013da:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013e2:	83 f8 0f             	cmp    eax,0xf
c00013e5:	76 07                	jbe    c00013ee <iALLOc+0x7c>
c00013e7:	83 e0 f8             	and    eax,0xfffffff8
c00013ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00013f3:	75 09                	jne    c00013fe <iALLOc+0x8c>
c00013f5:	89 d0                	mov    eax,edx
c00013f7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00013fa:	31 f6                	xor    esi,esi
c00013fc:	eb 3b                	jmp    c0001439 <iALLOc+0xc7>
c00013fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001400:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001408:	83 c0 0b             	add    eax,0xb
c000140b:	83 f8 0f             	cmp    eax,0xf
c000140e:	76 07                	jbe    c0001417 <iALLOc+0xa5>
c0001410:	83 e0 f8             	and    eax,0xfffffff8
c0001413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000141b:	0f af f5             	imul   esi,ebp
c000141e:	eb 25                	jmp    c0001445 <iALLOc+0xd3>
c0001420:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001422:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001425:	bb 10 00 00 00       	mov    ebx,0x10
c000142a:	83 f9 0f             	cmp    ecx,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0xc2>
c000142f:	83 e1 f8             	and    ecx,0xfffffff8
c0001432:	89 cb                	mov    ebx,ecx
c0001434:	01 de                	add    esi,ebx
c0001436:	83 c0 04             	add    eax,0x4
c0001439:	39 c7                	cmp    edi,eax
c000143b:	75 e3                	jne    c0001420 <iALLOc+0xae>
c000143d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001445:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001449:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000144f:	83 ec 0c             	sub    esp,0xc
c0001452:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000145c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001460:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001464:	50                   	push   eax
c0001465:	e8 7a fb ff ff       	call   c0000fe4 <dlmalloc>
c000146a:	83 c4 10             	add    esp,0x10
c000146d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001473:	85 c0                	test   eax,eax
c0001475:	0f 84 92 00 00 00    	je     c000150d <iALLOc+0x19b>
c000147b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000147e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001481:	83 e3 fc             	and    ebx,0xfffffffc
c0001484:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001488:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000148d:	74 1e                	je     c00014ad <iALLOc+0x13b>
c000148f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001493:	89 d9                	mov    ecx,ebx
c0001495:	52                   	push   edx
c0001496:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000149a:	83 e9 04             	sub    ecx,0x4
c000149d:	51                   	push   ecx
c000149e:	6a 00                	push   0x0
c00014a0:	50                   	push   eax
c00014a1:	e8 1a f0 ff ff       	call   c00004c0 <memset>
c00014a6:	83 c4 10             	add    esp,0x10
c00014a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	75 14                	jne    c00014c8 <iALLOc+0x156>
c00014b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014b7:	29 f3                	sub    ebx,esi
c00014b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014bc:	83 cb 01             	or     ebx,0x1
c00014bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c6:	89 f3                	mov    ebx,esi
c00014c8:	31 c0                	xor    eax,eax
c00014ca:	4d                   	dec    ebp
c00014cb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014d2:	39 c5                	cmp    ebp,eax
c00014d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014d7:	74 2c                	je     c0001505 <iALLOc+0x193>
c00014d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014dd:	85 c9                	test   ecx,ecx
c00014df:	75 15                	jne    c00014f6 <iALLOc+0x184>
c00014e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014e7:	b9 10 00 00 00       	mov    ecx,0x10
c00014ec:	83 fe 0f             	cmp    esi,0xf
c00014ef:	76 05                	jbe    c00014f6 <iALLOc+0x184>
c00014f1:	83 e6 f8             	and    esi,0xfffffff8
c00014f4:	89 f1                	mov    ecx,esi
c00014f6:	89 ce                	mov    esi,ecx
c00014f8:	29 cb                	sub    ebx,ecx
c00014fa:	83 ce 01             	or     esi,0x1
c00014fd:	40                   	inc    eax
c00014fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001501:	01 cf                	add    edi,ecx
c0001503:	eb c6                	jmp    c00014cb <iALLOc+0x159>
c0001505:	83 cb 01             	or     ebx,0x1
c0001508:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000150b:	eb 08                	jmp    c0001515 <iALLOc+0x1a3>
c000150d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001519:	83 c4 2c             	add    esp,0x2c
c000151c:	5b                   	pop    ebx
c000151d:	5e                   	pop    esi
c000151e:	5f                   	pop    edi
c000151f:	5d                   	pop    ebp
c0001520:	c3                   	ret    

c0001521 <dlrealloc>:
c0001521:	55                   	push   ebp
c0001522:	57                   	push   edi
c0001523:	56                   	push   esi
c0001524:	53                   	push   ebx
c0001525:	83 ec 1c             	sub    esp,0x1c
c0001528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000152c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001530:	85 db                	test   ebx,ebx
c0001532:	75 10                	jne    c0001544 <dlrealloc+0x23>
c0001534:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001538:	83 c4 1c             	add    esp,0x1c
c000153b:	5b                   	pop    ebx
c000153c:	5e                   	pop    esi
c000153d:	5f                   	pop    edi
c000153e:	5d                   	pop    ebp
c000153f:	e9 a0 fa ff ff       	jmp    c0000fe4 <dlmalloc>
c0001544:	83 f8 df             	cmp    eax,0xffffffdf
c0001547:	76 07                	jbe    c0001550 <dlrealloc+0x2f>
c0001549:	31 db                	xor    ebx,ebx
c000154b:	e9 6a 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c0001550:	83 c0 0b             	add    eax,0xb
c0001553:	bd 10 00 00 00       	mov    ebp,0x10
c0001558:	83 f8 0f             	cmp    eax,0xf
c000155b:	76 05                	jbe    c0001562 <dlrealloc+0x41>
c000155d:	83 e0 f8             	and    eax,0xfffffff8
c0001560:	89 c5                	mov    ebp,eax
c0001562:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001565:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001568:	89 c6                	mov    esi,eax
c000156a:	83 e6 fc             	and    esi,0xfffffffc
c000156d:	a8 02                	test   al,0x2
c000156f:	75 d8                	jne    c0001549 <dlrealloc+0x28>
c0001571:	39 f5                	cmp    ebp,esi
c0001573:	0f 86 04 01 00 00    	jbe    c000167d <dlrealloc+0x15c>
c0001579:	8d 14 37             	lea    edx,[edi+esi*1]
c000157c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000157f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001585:	75 33                	jne    c00015ba <dlrealloc+0x99>
c0001587:	83 e1 fc             	and    ecx,0xfffffffc
c000158a:	01 f1                	add    ecx,esi
c000158c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001590:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001593:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001597:	77 49                	ja     c00015e2 <dlrealloc+0xc1>
c0001599:	01 ef                	add    edi,ebp
c000159b:	83 e0 01             	and    eax,0x1
c000159e:	09 e8                	or     eax,ebp
c00015a0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015a3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ad:	29 e8                	sub    eax,ebp
c00015af:	83 c8 01             	or     eax,0x1
c00015b2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015b5:	e9 00 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c00015ba:	89 c8                	mov    eax,ecx
c00015bc:	83 e0 fe             	and    eax,0xfffffffe
c00015bf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015c4:	75 1c                	jne    c00015e2 <dlrealloc+0xc1>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	39 cd                	cmp    ebp,ecx
c00015cd:	77 13                	ja     c00015e2 <dlrealloc+0xc1>
c00015cf:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015d2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015d5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015d8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015db:	89 ce                	mov    esi,ecx
c00015dd:	e9 9b 00 00 00       	jmp    c000167d <dlrealloc+0x15c>
c00015e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015e6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015e9:	83 ec 0c             	sub    esp,0xc
c00015ec:	50                   	push   eax
c00015ed:	e8 f2 f9 ff ff       	call   c0000fe4 <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	85 c0                	test   eax,eax
c00015f7:	0f 84 4c ff ff ff    	je     c0001549 <dlrealloc+0x28>
c00015fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001604:	39 ca                	cmp    edx,ecx
c0001606:	75 0a                	jne    c0001612 <dlrealloc+0xf1>
c0001608:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000160b:	83 e0 fc             	and    eax,0xfffffffc
c000160e:	01 c6                	add    esi,eax
c0001610:	eb 6b                	jmp    c000167d <dlrealloc+0x15c>
c0001612:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001615:	83 f9 27             	cmp    ecx,0x27
c0001618:	76 08                	jbe    c0001622 <dlrealloc+0x101>
c000161a:	89 de                	mov    esi,ebx
c000161c:	89 c7                	mov    edi,eax
c000161e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001620:	eb 43                	jmp    c0001665 <dlrealloc+0x144>
c0001622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001624:	83 f9 13             	cmp    ecx,0x13
c0001627:	89 10                	mov    DWORD PTR [eax],edx
c0001629:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000162c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000162f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001635:	76 2e                	jbe    c0001665 <dlrealloc+0x144>
c0001637:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000163a:	83 f9 1b             	cmp    ecx,0x1b
c000163d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001640:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001643:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001646:	76 1d                	jbe    c0001665 <dlrealloc+0x144>
c0001648:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000164b:	83 f9 23             	cmp    ecx,0x23
c000164e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001651:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001654:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001657:	76 0c                	jbe    c0001665 <dlrealloc+0x144>
c0001659:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000165c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000165f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001662:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001669:	83 ec 0c             	sub    esp,0xc
c000166c:	53                   	push   ebx
c000166d:	e8 17 f6 ff ff       	call   c0000c89 <dlfree>
c0001672:	83 c4 10             	add    esp,0x10
c0001675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001679:	89 c3                	mov    ebx,eax
c000167b:	eb 3d                	jmp    c00016ba <dlrealloc+0x199>
c000167d:	89 f2                	mov    edx,esi
c000167f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001682:	29 ea                	sub    edx,ebp
c0001684:	83 e1 01             	and    ecx,0x1
c0001687:	8d 04 37             	lea    eax,[edi+esi*1]
c000168a:	83 fa 0f             	cmp    edx,0xf
c000168d:	77 0b                	ja     c000169a <dlrealloc+0x179>
c000168f:	09 ce                	or     esi,ecx
c0001691:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001694:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001698:	eb 20                	jmp    c00016ba <dlrealloc+0x199>
c000169a:	01 ef                	add    edi,ebp
c000169c:	83 ec 0c             	sub    esp,0xc
c000169f:	09 cd                	or     ebp,ecx
c00016a1:	83 ca 01             	or     edx,0x1
c00016a4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016a7:	83 c7 08             	add    edi,0x8
c00016aa:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ad:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b1:	57                   	push   edi
c00016b2:	e8 d2 f5 ff ff       	call   c0000c89 <dlfree>
c00016b7:	83 c4 10             	add    esp,0x10
c00016ba:	83 c4 1c             	add    esp,0x1c
c00016bd:	89 d8                	mov    eax,ebx
c00016bf:	5b                   	pop    ebx
c00016c0:	5e                   	pop    esi
c00016c1:	5f                   	pop    edi
c00016c2:	5d                   	pop    ebp
c00016c3:	c3                   	ret    

c00016c4 <dlmemalign>:
c00016c4:	55                   	push   ebp
c00016c5:	57                   	push   edi
c00016c6:	56                   	push   esi
c00016c7:	53                   	push   ebx
c00016c8:	83 ec 0c             	sub    esp,0xc
c00016cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016d3:	83 fa 08             	cmp    edx,0x8
c00016d6:	77 10                	ja     c00016e8 <dlmemalign+0x24>
c00016d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016dc:	83 c4 0c             	add    esp,0xc
c00016df:	5b                   	pop    ebx
c00016e0:	5e                   	pop    esi
c00016e1:	5f                   	pop    edi
c00016e2:	5d                   	pop    ebp
c00016e3:	e9 fc f8 ff ff       	jmp    c0000fe4 <dlmalloc>
c00016e8:	bf 10 00 00 00       	mov    edi,0x10
c00016ed:	83 fa 0f             	cmp    edx,0xf
c00016f0:	76 13                	jbe    c0001705 <dlmemalign+0x41>
c00016f2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00016f5:	85 d1                	test   ecx,edx
c00016f7:	75 04                	jne    c00016fd <dlmemalign+0x39>
c00016f9:	89 d7                	mov    edi,edx
c00016fb:	eb 08                	jmp    c0001705 <dlmemalign+0x41>
c00016fd:	39 d7                	cmp    edi,edx
c00016ff:	73 04                	jae    c0001705 <dlmemalign+0x41>
c0001701:	01 ff                	add    edi,edi
c0001703:	eb f8                	jmp    c00016fd <dlmemalign+0x39>
c0001705:	83 f8 df             	cmp    eax,0xffffffdf
c0001708:	76 07                	jbe    c0001711 <dlmemalign+0x4d>
c000170a:	31 c0                	xor    eax,eax
c000170c:	e9 ce 00 00 00       	jmp    c00017df <dlmemalign+0x11b>
c0001711:	83 c0 0b             	add    eax,0xb
c0001714:	bd 10 00 00 00       	mov    ebp,0x10
c0001719:	83 f8 0f             	cmp    eax,0xf
c000171c:	76 05                	jbe    c0001723 <dlmemalign+0x5f>
c000171e:	83 e0 f8             	and    eax,0xfffffff8
c0001721:	89 c5                	mov    ebp,eax
c0001723:	83 ec 0c             	sub    esp,0xc
c0001726:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000172a:	50                   	push   eax
c000172b:	e8 b4 f8 ff ff       	call   c0000fe4 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c1                	mov    ecx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	74 d1                	je     c000170a <dlmemalign+0x46>
c0001739:	31 d2                	xor    edx,edx
c000173b:	8d 70 f8             	lea    esi,[eax-0x8]
c000173e:	f7 f7                	div    edi
c0001740:	85 d2                	test   edx,edx
c0001742:	74 62                	je     c00017a6 <dlmemalign+0xe2>
c0001744:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001748:	89 f8                	mov    eax,edi
c000174a:	f7 d8                	neg    eax
c000174c:	21 c3                	and    ebx,eax
c000174e:	83 eb 08             	sub    ebx,0x8
c0001751:	89 d8                	mov    eax,ebx
c0001753:	29 f0                	sub    eax,esi
c0001755:	83 f8 0f             	cmp    eax,0xf
c0001758:	77 02                	ja     c000175c <dlmemalign+0x98>
c000175a:	01 fb                	add    ebx,edi
c000175c:	89 d8                	mov    eax,ebx
c000175e:	29 f0                	sub    eax,esi
c0001760:	89 c6                	mov    esi,eax
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	89 c2                	mov    edx,eax
c0001767:	83 e2 fc             	and    edx,0xfffffffc
c000176a:	29 f2                	sub    edx,esi
c000176c:	a8 02                	test   al,0x2
c000176e:	74 10                	je     c0001780 <dlmemalign+0xbc>
c0001770:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001773:	83 ca 02             	or     edx,0x2
c0001776:	8d 43 08             	lea    eax,[ebx+0x8]
c0001779:	89 33                	mov    DWORD PTR [ebx],esi
c000177b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000177e:	eb 5f                	jmp    c00017df <dlmemalign+0x11b>
c0001780:	83 ec 0c             	sub    esp,0xc
c0001783:	89 d0                	mov    eax,edx
c0001785:	83 c8 01             	or     eax,0x1
c0001788:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000178b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001790:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001793:	83 e0 01             	and    eax,0x1
c0001796:	09 f0                	or     eax,esi
c0001798:	89 de                	mov    esi,ebx
c000179a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000179d:	51                   	push   ecx
c000179e:	e8 e6 f4 ff ff       	call   c0000c89 <dlfree>
c00017a3:	83 c4 10             	add    esp,0x10
c00017a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017a9:	a8 02                	test   al,0x2
c00017ab:	75 2f                	jne    c00017dc <dlmemalign+0x118>
c00017ad:	83 e0 fc             	and    eax,0xfffffffc
c00017b0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017b3:	39 c2                	cmp    edx,eax
c00017b5:	73 25                	jae    c00017dc <dlmemalign+0x118>
c00017b7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ba:	83 ec 0c             	sub    esp,0xc
c00017bd:	29 e8                	sub    eax,ebp
c00017bf:	83 c2 08             	add    edx,0x8
c00017c2:	83 c8 01             	or     eax,0x1
c00017c5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017cb:	83 e0 01             	and    eax,0x1
c00017ce:	09 c5                	or     ebp,eax
c00017d0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017d3:	52                   	push   edx
c00017d4:	e8 b0 f4 ff ff       	call   c0000c89 <dlfree>
c00017d9:	83 c4 10             	add    esp,0x10
c00017dc:	8d 46 08             	lea    eax,[esi+0x8]
c00017df:	83 c4 0c             	add    esp,0xc
c00017e2:	5b                   	pop    ebx
c00017e3:	5e                   	pop    esi
c00017e4:	5f                   	pop    edi
c00017e5:	5d                   	pop    ebp
c00017e6:	c3                   	ret    

c00017e7 <dlcalloc>:
c00017e7:	53                   	push   ebx
c00017e8:	83 ec 14             	sub    esp,0x14
c00017eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ef:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00017f4:	50                   	push   eax
c00017f5:	e8 ea f7 ff ff       	call   c0000fe4 <dlmalloc>
c00017fa:	83 c4 10             	add    esp,0x10
c00017fd:	89 c3                	mov    ebx,eax
c00017ff:	85 c0                	test   eax,eax
c0001801:	74 77                	je     c000187a <dlcalloc+0x93>
c0001803:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001806:	89 d0                	mov    eax,edx
c0001808:	83 e0 fc             	and    eax,0xfffffffc
c000180b:	80 e2 02             	and    dl,0x2
c000180e:	75 5a                	jne    c000186a <dlcalloc+0x83>
c0001810:	83 e8 04             	sub    eax,0x4
c0001813:	83 f8 27             	cmp    eax,0x27
c0001816:	76 03                	jbe    c000181b <dlcalloc+0x34>
c0001818:	51                   	push   ecx
c0001819:	eb 53                	jmp    c000186e <dlcalloc+0x87>
c000181b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001821:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001828:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000182f:	83 f8 13             	cmp    eax,0x13
c0001832:	76 46                	jbe    c000187a <dlcalloc+0x93>
c0001834:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000183b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001842:	83 f8 1b             	cmp    eax,0x1b
c0001845:	76 33                	jbe    c000187a <dlcalloc+0x93>
c0001847:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000184e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001855:	83 f8 23             	cmp    eax,0x23
c0001858:	76 20                	jbe    c000187a <dlcalloc+0x93>
c000185a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001861:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001868:	eb 10                	jmp    c000187a <dlcalloc+0x93>
c000186a:	83 e8 08             	sub    eax,0x8
c000186d:	52                   	push   edx
c000186e:	50                   	push   eax
c000186f:	6a 00                	push   0x0
c0001871:	53                   	push   ebx
c0001872:	e8 49 ec ff ff       	call   c00004c0 <memset>
c0001877:	83 c4 10             	add    esp,0x10
c000187a:	89 d8                	mov    eax,ebx
c000187c:	83 c4 08             	add    esp,0x8
c000187f:	5b                   	pop    ebx
c0001880:	c3                   	ret    

c0001881 <dlcfree>:
c0001881:	e9 03 f4 ff ff       	jmp    c0000c89 <dlfree>

c0001886 <dlindependent_calloc>:
c0001886:	83 ec 28             	sub    esp,0x28
c0001889:	b9 03 00 00 00       	mov    ecx,0x3
c000188e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001892:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000189a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	e8 cb fa ff ff       	call   c0001372 <iALLOc>
c00018a7:	83 c4 2c             	add    esp,0x2c
c00018aa:	c3                   	ret    

c00018ab <dlindependent_comalloc>:
c00018ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018b3:	31 c9                	xor    ecx,ecx
c00018b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018bd:	e9 b0 fa ff ff       	jmp    c0001372 <iALLOc>

c00018c2 <dlvalloc>:
c00018c2:	83 ec 0c             	sub    esp,0xc
c00018c5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018cc:	75 0a                	jne    c00018d8 <dlvalloc+0x16>
c00018ce:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018d3:	e8 ca f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c00018d8:	50                   	push   eax
c00018d9:	50                   	push   eax
c00018da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018de:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018e4:	e8 db fd ff ff       	call   c00016c4 <dlmemalign>
c00018e9:	83 c4 1c             	add    esp,0x1c
c00018ec:	c3                   	ret    

c00018ed <dlpvalloc>:
c00018ed:	83 ec 0c             	sub    esp,0xc
c00018f0:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018f7:	75 0a                	jne    c0001903 <dlpvalloc+0x16>
c00018f9:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018fe:	e8 9f f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001903:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001908:	89 c1                	mov    ecx,eax
c000190a:	52                   	push   edx
c000190b:	f7 d9                	neg    ecx
c000190d:	52                   	push   edx
c000190e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001912:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001916:	21 ca                	and    edx,ecx
c0001918:	52                   	push   edx
c0001919:	50                   	push   eax
c000191a:	e8 a5 fd ff ff       	call   c00016c4 <dlmemalign>
c000191f:	83 c4 1c             	add    esp,0x1c
c0001922:	c3                   	ret    

c0001923 <dlmalloc_trim>:
c0001923:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001928:	e8 75 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000192d:	31 c0                	xor    eax,eax
c000192f:	c3                   	ret    

c0001930 <dlmalloc_usable_size>:
c0001930:	53                   	push   ebx
c0001931:	31 c0                	xor    eax,eax
c0001933:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001937:	85 c9                	test   ecx,ecx
c0001939:	74 24                	je     c000195f <dlmalloc_usable_size+0x2f>
c000193b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000193e:	f6 c2 02             	test   dl,0x2
c0001941:	74 08                	je     c000194b <dlmalloc_usable_size+0x1b>
c0001943:	83 e2 fc             	and    edx,0xfffffffc
c0001946:	8d 42 f8             	lea    eax,[edx-0x8]
c0001949:	eb 14                	jmp    c000195f <dlmalloc_usable_size+0x2f>
c000194b:	89 d3                	mov    ebx,edx
c000194d:	31 c0                	xor    eax,eax
c000194f:	83 e3 fe             	and    ebx,0xfffffffe
c0001952:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001957:	74 06                	je     c000195f <dlmalloc_usable_size+0x2f>
c0001959:	83 e2 fc             	and    edx,0xfffffffc
c000195c:	8d 42 fc             	lea    eax,[edx-0x4]
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlmallinfo>:
c0001961:	55                   	push   ebp
c0001962:	57                   	push   edi
c0001963:	56                   	push   esi
c0001964:	53                   	push   ebx
c0001965:	83 ec 08             	sub    esp,0x8
c0001968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000196c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001973:	75 0a                	jne    c000197f <dlmallinfo+0x1e>
c0001975:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000197a:	e8 23 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000197f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001984:	31 ed                	xor    ebp,ebp
c0001986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001989:	31 c9                	xor    ecx,ecx
c000198b:	83 e0 fc             	and    eax,0xfffffffc
c000198e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001992:	31 c0                	xor    eax,eax
c0001994:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c000199b:	85 d2                	test   edx,edx
c000199d:	74 0e                	je     c00019ad <dlmallinfo+0x4c>
c000199f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019a2:	45                   	inc    ebp
c00019a3:	83 e6 fc             	and    esi,0xfffffffc
c00019a6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019a9:	01 f1                	add    ecx,esi
c00019ab:	eb ee                	jmp    c000199b <dlmallinfo+0x3a>
c00019ad:	40                   	inc    eax
c00019ae:	83 f8 0a             	cmp    eax,0xa
c00019b1:	75 e1                	jne    c0001994 <dlmallinfo+0x33>
c00019b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019be:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019c1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019c6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019c9:	39 f0                	cmp    eax,esi
c00019cb:	74 10                	je     c00019dd <dlmallinfo+0x7c>
c00019cd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019d0:	ff 04 24             	inc    DWORD PTR [esp]
c00019d3:	83 e7 fc             	and    edi,0xfffffffc
c00019d6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019d9:	01 fa                	add    edx,edi
c00019db:	eb ec                	jmp    c00019c9 <dlmallinfo+0x68>
c00019dd:	83 c0 08             	add    eax,0x8
c00019e0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019e5:	75 df                	jne    c00019c6 <dlmallinfo+0x65>
c00019e7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019ea:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00019f0:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c00019f5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00019f8:	89 03                	mov    DWORD PTR [ebx],eax
c00019fa:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00019fd:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a03:	29 d0                	sub    eax,edx
c0001a05:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a08:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a0b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a15:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a18:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a1b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a21:	89 d8                	mov    eax,ebx
c0001a23:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a26:	83 c4 08             	add    esp,0x8
c0001a29:	5b                   	pop    ebx
c0001a2a:	5e                   	pop    esi
c0001a2b:	5f                   	pop    edi
c0001a2c:	5d                   	pop    ebp
c0001a2d:	c2 04 00             	ret    0x4

c0001a30 <dlmalloc_stats>:
c0001a30:	83 ec 30             	sub    esp,0x30
c0001a33:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a37:	50                   	push   eax
c0001a38:	e8 24 ff ff ff       	call   c0001961 <dlmallinfo>
c0001a3d:	83 c4 30             	add    esp,0x30
c0001a40:	c3                   	ret    

c0001a41 <dlmallopt>:
c0001a41:	56                   	push   esi
c0001a42:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a47:	53                   	push   ebx
c0001a48:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a50:	e8 4d f1 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001a55:	8d 46 04             	lea    eax,[esi+0x4]
c0001a58:	83 f8 05             	cmp    eax,0x5
c0001a5b:	77 67                	ja     c0001ac4 <dlmallopt+0x83>
c0001a5d:	ff 24 85 e4 eb 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe141c]
c0001a64:	83 fb 50             	cmp    ebx,0x50
c0001a67:	77 5b                	ja     c0001ac4 <dlmallopt+0x83>
c0001a69:	ba 08 00 00 00       	mov    edx,0x8
c0001a6e:	85 db                	test   ebx,ebx
c0001a70:	74 12                	je     c0001a84 <dlmallopt+0x43>
c0001a72:	83 c3 0b             	add    ebx,0xb
c0001a75:	ba 10 00 00 00       	mov    edx,0x10
c0001a7a:	83 fb 0f             	cmp    ebx,0xf
c0001a7d:	76 05                	jbe    c0001a84 <dlmallopt+0x43>
c0001a7f:	89 da                	mov    edx,ebx
c0001a81:	83 e2 f8             	and    edx,0xfffffff8
c0001a84:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a89:	83 e0 03             	and    eax,0x3
c0001a8c:	09 d0                	or     eax,edx
c0001a8e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001a93:	eb 31                	jmp    c0001ac6 <dlmallopt+0x85>
c0001a95:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001a9b:	eb 06                	jmp    c0001aa3 <dlmallopt+0x62>
c0001a9d:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001aa3:	be 01 00 00 00       	mov    esi,0x1
c0001aa8:	eb 1c                	jmp    c0001ac6 <dlmallopt+0x85>
c0001aaa:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ab0:	eb f1                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ab2:	31 f6                	xor    esi,esi
c0001ab4:	85 db                	test   ebx,ebx
c0001ab6:	75 0e                	jne    c0001ac6 <dlmallopt+0x85>
c0001ab8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ac2:	eb df                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ac4:	31 f6                	xor    esi,esi
c0001ac6:	89 f0                	mov    eax,esi
c0001ac8:	5b                   	pop    ebx
c0001ac9:	5e                   	pop    esi
c0001aca:	c3                   	ret    
c0001acb:	90                   	nop

c0001acc <isblank>:
c0001acc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ad1:	74 09                	je     c0001adc <isblank+0x10>
c0001ad3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ad8:	75 0a                	jne    c0001ae4 <isblank+0x18>
c0001ada:	66 90                	xchg   ax,ax
c0001adc:	b8 01 00 00 00       	mov    eax,0x1
c0001ae1:	c3                   	ret    
c0001ae2:	66 90                	xchg   ax,ax
c0001ae4:	b8 00 00 00 00       	mov    eax,0x0
c0001ae9:	c3                   	ret    
c0001aea:	66 90                	xchg   ax,ax

c0001aec <iscntrl>:
c0001aec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001af1:	7e 09                	jle    c0001afc <iscntrl+0x10>
c0001af3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001af8:	75 0a                	jne    c0001b04 <iscntrl+0x18>
c0001afa:	66 90                	xchg   ax,ax
c0001afc:	b8 01 00 00 00       	mov    eax,0x1
c0001b01:	c3                   	ret    
c0001b02:	66 90                	xchg   ax,ax
c0001b04:	b8 00 00 00 00       	mov    eax,0x0
c0001b09:	c3                   	ret    
c0001b0a:	66 90                	xchg   ax,ax

c0001b0c <isdigit>:
c0001b0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b11:	7e 0d                	jle    c0001b20 <isdigit+0x14>
c0001b13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b18:	7f 06                	jg     c0001b20 <isdigit+0x14>
c0001b1a:	b8 01 00 00 00       	mov    eax,0x1
c0001b1f:	c3                   	ret    
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <islower>:
c0001b28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b2d:	7e 0d                	jle    c0001b3c <islower+0x14>
c0001b2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b34:	7f 06                	jg     c0001b3c <islower+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <isspace>:
c0001b44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b49:	7c 19                	jl     c0001b64 <isspace+0x20>
c0001b4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b50:	7e 0a                	jle    c0001b5c <isspace+0x18>
c0001b52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b57:	75 0b                	jne    c0001b64 <isspace+0x20>
c0001b59:	8d 76 00             	lea    esi,[esi+0x0]
c0001b5c:	b8 01 00 00 00       	mov    eax,0x1
c0001b61:	c3                   	ret    
c0001b62:	66 90                	xchg   ax,ax
c0001b64:	b8 00 00 00 00       	mov    eax,0x0
c0001b69:	c3                   	ret    
c0001b6a:	66 90                	xchg   ax,ax

c0001b6c <isupper>:
c0001b6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b71:	7e 0d                	jle    c0001b80 <isupper+0x14>
c0001b73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b78:	7f 06                	jg     c0001b80 <isupper+0x14>
c0001b7a:	b8 01 00 00 00       	mov    eax,0x1
c0001b7f:	c3                   	ret    
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isalpha>:
c0001b88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b8c:	e8 db ff ff ff       	call   c0001b6c <isupper>
c0001b91:	83 c4 04             	add    esp,0x4
c0001b94:	85 c0                	test   eax,eax
c0001b96:	75 10                	jne    c0001ba8 <isalpha+0x20>
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 87 ff ff ff       	call   c0001b28 <islower>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	74 08                	je     c0001bb0 <isalpha+0x28>
c0001ba8:	b8 01 00 00 00       	mov    eax,0x1
c0001bad:	c3                   	ret    
c0001bae:	66 90                	xchg   ax,ax
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalnum>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 c7 ff ff ff       	call   c0001b88 <isalpha>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalnum+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 3b ff ff ff       	call   c0001b0c <isdigit>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalnum+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <ispunct>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalnum>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 28                	jne    c0001c20 <ispunct+0x38>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 43 ff ff ff       	call   c0001b44 <isspace>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 18                	jne    c0001c20 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 db fe ff ff       	call   c0001aec <iscntrl>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 08                	jne    c0001c20 <ispunct+0x38>
c0001c18:	b8 01 00 00 00       	mov    eax,0x1
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <isgraph>:
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 87 ff ff ff       	call   c0001bb8 <isalnum>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 10                	jne    c0001c48 <isgraph+0x20>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 a7 ff ff ff       	call   c0001be8 <ispunct>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	74 08                	je     c0001c50 <isgraph+0x28>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isprint>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 c7 ff ff ff       	call   c0001c28 <isgraph>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 08                	jne    c0001c70 <isprint+0x18>
c0001c68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c6d:	75 09                	jne    c0001c78 <isprint+0x20>
c0001c6f:	90                   	nop
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isxdigit>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 83 fe ff ff       	call   c0001b0c <isdigit>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 20                	jne    c0001cb0 <isxdigit+0x30>
c0001c90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c95:	7e 09                	jle    c0001ca0 <isxdigit+0x20>
c0001c97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001c9c:	7e 12                	jle    c0001cb0 <isxdigit+0x30>
c0001c9e:	66 90                	xchg   ax,ax
c0001ca0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ca5:	7e 11                	jle    c0001cb8 <isxdigit+0x38>
c0001ca7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cac:	7f 0a                	jg     c0001cb8 <isxdigit+0x38>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 01 00 00 00       	mov    eax,0x1
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax
c0001cb8:	b8 00 00 00 00       	mov    eax,0x0
c0001cbd:	c3                   	ret    

c0001cbe <disk_status>:
c0001cbe:	31 c0                	xor    eax,eax
c0001cc0:	c3                   	ret    

c0001cc1 <disk_initialize>:
c0001cc1:	31 c0                	xor    eax,eax
c0001cc3:	c3                   	ret    

c0001cc4 <disk_read>:
c0001cc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cc9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cd5:	e9 da 65 01 00       	jmp    c00182b4 <fatWrapperReadDisk>

c0001cda <disk_write>:
c0001cda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cdf:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ceb:	e9 08 66 01 00       	jmp    c00182f8 <fatWrapperWriteDisk>

c0001cf0 <disk_ioctl>:
c0001cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001cf9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfe:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d0a:	e9 2d 66 01 00       	jmp    c001833c <fatWrapperIoctl>

c0001d0f <ld_word>:
c0001d0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d16:	c1 e2 08             	shl    edx,0x8
c0001d19:	09 d0                	or     eax,edx
c0001d1b:	c3                   	ret    

c0001d1c <ld_dword>:
c0001d1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d20:	89 d1                	mov    ecx,edx
c0001d22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d26:	c1 e1 08             	shl    ecx,0x8
c0001d29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d2c:	09 ca                	or     edx,ecx
c0001d2e:	c1 e2 08             	shl    edx,0x8
c0001d31:	09 d0                	or     eax,edx
c0001d33:	c3                   	ret    

c0001d34 <st_word>:
c0001d34:	66 89 10             	mov    WORD PTR [eax],dx
c0001d37:	c3                   	ret    

c0001d38 <st_dword>:
c0001d38:	89 10                	mov    DWORD PTR [eax],edx
c0001d3a:	c3                   	ret    

c0001d3b <mem_cpy>:
c0001d3b:	85 c9                	test   ecx,ecx
c0001d3d:	74 10                	je     c0001d4f <mem_cpy+0x14>
c0001d3f:	57                   	push   edi
c0001d40:	01 c1                	add    ecx,eax
c0001d42:	56                   	push   esi
c0001d43:	89 c7                	mov    edi,eax
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d48:	39 f9                	cmp    ecx,edi
c0001d4a:	75 fb                	jne    c0001d47 <mem_cpy+0xc>
c0001d4c:	5e                   	pop    esi
c0001d4d:	5f                   	pop    edi
c0001d4e:	c3                   	ret    
c0001d4f:	c3                   	ret    

c0001d50 <mem_set>:
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	40                   	inc    eax
c0001d53:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d56:	39 c8                	cmp    eax,ecx
c0001d58:	75 f8                	jne    c0001d52 <mem_set+0x2>
c0001d5a:	c3                   	ret    

c0001d5b <mem_cmp>:
c0001d5b:	57                   	push   edi
c0001d5c:	56                   	push   esi
c0001d5d:	89 c6                	mov    esi,eax
c0001d5f:	53                   	push   ebx
c0001d60:	46                   	inc    esi
c0001d61:	42                   	inc    edx
c0001d62:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d66:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d6a:	29 fb                	sub    ebx,edi
c0001d6c:	89 cf                	mov    edi,ecx
c0001d6e:	29 f7                	sub    edi,esi
c0001d70:	01 c7                	add    edi,eax
c0001d72:	74 04                	je     c0001d78 <mem_cmp+0x1d>
c0001d74:	85 db                	test   ebx,ebx
c0001d76:	74 e8                	je     c0001d60 <mem_cmp+0x5>
c0001d78:	89 d8                	mov    eax,ebx
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	c3                   	ret    

c0001d7e <chk_chr>:
c0001d7e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d81:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d84:	74 07                	je     c0001d8d <chk_chr+0xf>
c0001d86:	39 d1                	cmp    ecx,edx
c0001d88:	74 03                	je     c0001d8d <chk_chr+0xf>
c0001d8a:	40                   	inc    eax
c0001d8b:	eb f1                	jmp    c0001d7e <chk_chr>
c0001d8d:	89 c8                	mov    eax,ecx
c0001d8f:	c3                   	ret    

c0001d90 <dbc_1st>:
c0001d90:	31 c0                	xor    eax,eax
c0001d92:	c3                   	ret    

c0001d93 <dbc_2nd>:
c0001d93:	31 c0                	xor    eax,eax
c0001d95:	c3                   	ret    

c0001d96 <tchar2uni>:
c0001d96:	57                   	push   edi
c0001d97:	89 c7                	mov    edi,eax
c0001d99:	56                   	push   esi
c0001d9a:	53                   	push   ebx
c0001d9b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d9f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001da2:	84 c9                	test   cl,cl
c0001da4:	78 0a                	js     c0001db0 <tchar2uni+0x1a>
c0001da6:	0f b6 d1             	movzx  edx,cl
c0001da9:	89 f3                	mov    ebx,esi
c0001dab:	e9 9f 00 00 00       	jmp    c0001e4f <tchar2uni+0xb9>
c0001db0:	88 ca                	mov    dl,cl
c0001db2:	83 e2 e0             	and    edx,0xffffffe0
c0001db5:	80 fa c0             	cmp    dl,0xc0
c0001db8:	75 0c                	jne    c0001dc6 <tchar2uni+0x30>
c0001dba:	89 ca                	mov    edx,ecx
c0001dbc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dc1:	83 e2 1f             	and    edx,0x1f
c0001dc4:	eb 2e                	jmp    c0001df4 <tchar2uni+0x5e>
c0001dc6:	88 ca                	mov    dl,cl
c0001dc8:	83 e2 f0             	and    edx,0xfffffff0
c0001dcb:	80 fa e0             	cmp    dl,0xe0
c0001dce:	75 0c                	jne    c0001ddc <tchar2uni+0x46>
c0001dd0:	89 ca                	mov    edx,ecx
c0001dd2:	b9 02 00 00 00       	mov    ecx,0x2
c0001dd7:	83 e2 0f             	and    edx,0xf
c0001dda:	eb 18                	jmp    c0001df4 <tchar2uni+0x5e>
c0001ddc:	88 ca                	mov    dl,cl
c0001dde:	83 e2 f8             	and    edx,0xfffffff8
c0001de1:	88 d0                	mov    al,dl
c0001de3:	83 ca ff             	or     edx,0xffffffff
c0001de6:	3c f0                	cmp    al,0xf0
c0001de8:	75 6c                	jne    c0001e56 <tchar2uni+0xc0>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 03 00 00 00       	mov    ecx,0x3
c0001df1:	83 e2 07             	and    edx,0x7
c0001df4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001df8:	46                   	inc    esi
c0001df9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dfc:	88 c8                	mov    al,cl
c0001dfe:	83 e0 c0             	and    eax,0xffffffc0
c0001e01:	3c 80                	cmp    al,0x80
c0001e03:	75 4e                	jne    c0001e53 <tchar2uni+0xbd>
c0001e05:	c1 e2 06             	shl    edx,0x6
c0001e08:	83 e1 3f             	and    ecx,0x3f
c0001e0b:	09 ca                	or     edx,ecx
c0001e0d:	39 de                	cmp    esi,ebx
c0001e0f:	75 e7                	jne    c0001df8 <tchar2uni+0x62>
c0001e11:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e14:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e1a:	77 37                	ja     c0001e53 <tchar2uni+0xbd>
c0001e1c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e22:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e28:	76 29                	jbe    c0001e53 <tchar2uni+0xbd>
c0001e2a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e30:	76 1d                	jbe    c0001e4f <tchar2uni+0xb9>
c0001e32:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e38:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e3e:	c1 e1 06             	shl    ecx,0x6
c0001e41:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e47:	09 ca                	or     edx,ecx
c0001e49:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e51:	eb 03                	jmp    c0001e56 <tchar2uni+0xc0>
c0001e53:	83 ca ff             	or     edx,0xffffffff
c0001e56:	5b                   	pop    ebx
c0001e57:	89 d0                	mov    eax,edx
c0001e59:	5e                   	pop    esi
c0001e5a:	5f                   	pop    edi
c0001e5b:	c3                   	ret    

c0001e5c <put_utf>:
c0001e5c:	53                   	push   ebx
c0001e5d:	83 f8 7f             	cmp    eax,0x7f
c0001e60:	89 c3                	mov    ebx,eax
c0001e62:	b0 00                	mov    al,0x0
c0001e64:	77 11                	ja     c0001e77 <put_utf+0x1b>
c0001e66:	85 c9                	test   ecx,ecx
c0001e68:	0f 84 e5 00 00 00    	je     c0001f53 <put_utf+0xf7>
c0001e6e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e70:	b0 01                	mov    al,0x1
c0001e72:	e9 dc 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001e77:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e7d:	77 23                	ja     c0001ea2 <put_utf+0x46>
c0001e7f:	83 f9 01             	cmp    ecx,0x1
c0001e82:	0f 86 cb 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001e88:	89 d8                	mov    eax,ebx
c0001e8a:	83 e3 3f             	and    ebx,0x3f
c0001e8d:	c1 e8 06             	shr    eax,0x6
c0001e90:	83 cb 80             	or     ebx,0xffffff80
c0001e93:	83 c8 c0             	or     eax,0xffffffc0
c0001e96:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e99:	88 02                	mov    BYTE PTR [edx],al
c0001e9b:	b0 02                	mov    al,0x2
c0001e9d:	e9 b1 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001ea2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ea8:	77 40                	ja     c0001eea <put_utf+0x8e>
c0001eaa:	83 f9 02             	cmp    ecx,0x2
c0001ead:	0f 86 a0 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001eb3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001eb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ebf:	0f 86 8e 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001ec5:	89 d8                	mov    eax,ebx
c0001ec7:	c1 e8 0c             	shr    eax,0xc
c0001eca:	83 c8 e0             	or     eax,0xffffffe0
c0001ecd:	88 02                	mov    BYTE PTR [edx],al
c0001ecf:	89 d8                	mov    eax,ebx
c0001ed1:	83 e3 3f             	and    ebx,0x3f
c0001ed4:	c1 e8 06             	shr    eax,0x6
c0001ed7:	83 cb 80             	or     ebx,0xffffff80
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ee0:	83 c8 80             	or     eax,0xffffff80
c0001ee3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee6:	b0 03                	mov    al,0x3
c0001ee8:	eb 69                	jmp    c0001f53 <put_utf+0xf7>
c0001eea:	83 f9 03             	cmp    ecx,0x3
c0001eed:	76 64                	jbe    c0001f53 <put_utf+0xf7>
c0001eef:	89 d9                	mov    ecx,ebx
c0001ef1:	0f b7 c3             	movzx  eax,bx
c0001ef4:	66 31 c9             	xor    cx,cx
c0001ef7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001efd:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f03:	c1 e9 06             	shr    ecx,0x6
c0001f06:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f0c:	77 43                	ja     c0001f51 <put_utf+0xf5>
c0001f0e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f14:	77 3b                	ja     c0001f51 <put_utf+0xf5>
c0001f16:	09 cb                	or     ebx,ecx
c0001f18:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f1e:	89 d8                	mov    eax,ebx
c0001f20:	c1 e8 12             	shr    eax,0x12
c0001f23:	83 c8 f0             	or     eax,0xfffffff0
c0001f26:	88 02                	mov    BYTE PTR [edx],al
c0001f28:	89 d8                	mov    eax,ebx
c0001f2a:	c1 e8 0c             	shr    eax,0xc
c0001f2d:	83 e0 3f             	and    eax,0x3f
c0001f30:	83 c8 80             	or     eax,0xffffff80
c0001f33:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f36:	89 d8                	mov    eax,ebx
c0001f38:	83 e3 3f             	and    ebx,0x3f
c0001f3b:	c1 e8 06             	shr    eax,0x6
c0001f3e:	83 cb 80             	or     ebx,0xffffff80
c0001f41:	83 e0 3f             	and    eax,0x3f
c0001f44:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f47:	83 c8 80             	or     eax,0xffffff80
c0001f4a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f4d:	b0 04                	mov    al,0x4
c0001f4f:	eb 02                	jmp    c0001f53 <put_utf+0xf7>
c0001f51:	31 c0                	xor    eax,eax
c0001f53:	5b                   	pop    ebx
c0001f54:	c3                   	ret    

c0001f55 <clst2sect>:
c0001f55:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f5b:	83 ea 02             	sub    edx,0x2
c0001f5e:	39 ca                	cmp    edx,ecx
c0001f60:	76 0d                	jbe    c0001f6f <clst2sect+0x1a>
c0001f62:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f66:	0f af d1             	imul   edx,ecx
c0001f69:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f6c:	89 d0                	mov    eax,edx
c0001f6e:	c3                   	ret    
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <pick_lfn>:
c0001f72:	55                   	push   ebp
c0001f73:	57                   	push   edi
c0001f74:	56                   	push   esi
c0001f75:	89 d6                	mov    esi,edx
c0001f77:	53                   	push   ebx
c0001f78:	89 c3                	mov    ebx,eax
c0001f7a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f7d:	e8 8d fd ff ff       	call   c0001d0f <ld_word>
c0001f82:	66 85 c0             	test   ax,ax
c0001f85:	74 04                	je     c0001f8b <pick_lfn+0x19>
c0001f87:	31 c0                	xor    eax,eax
c0001f89:	eb 5c                	jmp    c0001fe7 <pick_lfn+0x75>
c0001f8b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f8e:	bd 01 00 00 00       	mov    ebp,0x1
c0001f93:	83 e1 bf             	and    ecx,0xffffffbf
c0001f96:	31 ff                	xor    edi,edi
c0001f98:	49                   	dec    ecx
c0001f99:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f9c:	0f b6 87 40 ed 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe12c0]
c0001fa3:	01 f0                	add    eax,esi
c0001fa5:	e8 65 fd ff ff       	call   c0001d0f <ld_word>
c0001faa:	66 85 ed             	test   bp,bp
c0001fad:	74 11                	je     c0001fc0 <pick_lfn+0x4e>
c0001faf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb5:	77 d0                	ja     c0001f87 <pick_lfn+0x15>
c0001fb7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fbb:	89 c5                	mov    ebp,eax
c0001fbd:	41                   	inc    ecx
c0001fbe:	eb 04                	jmp    c0001fc4 <pick_lfn+0x52>
c0001fc0:	66 40                	inc    ax
c0001fc2:	75 c3                	jne    c0001f87 <pick_lfn+0x15>
c0001fc4:	47                   	inc    edi
c0001fc5:	83 ff 0d             	cmp    edi,0xd
c0001fc8:	75 d2                	jne    c0001f9c <pick_lfn+0x2a>
c0001fca:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fcd:	74 13                	je     c0001fe2 <pick_lfn+0x70>
c0001fcf:	66 85 ed             	test   bp,bp
c0001fd2:	74 0e                	je     c0001fe2 <pick_lfn+0x70>
c0001fd4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fda:	77 ab                	ja     c0001f87 <pick_lfn+0x15>
c0001fdc:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fe2:	b8 01 00 00 00       	mov    eax,0x1
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	5f                   	pop    edi
c0001fea:	5d                   	pop    ebp
c0001feb:	c3                   	ret    

c0001fec <put_lfn>:
c0001fec:	55                   	push   ebp
c0001fed:	31 ed                	xor    ebp,ebp
c0001fef:	57                   	push   edi
c0001ff0:	89 d7                	mov    edi,edx
c0001ff2:	56                   	push   esi
c0001ff3:	31 f6                	xor    esi,esi
c0001ff5:	53                   	push   ebx
c0001ff6:	83 ec 08             	sub    esp,0x8
c0001ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ffc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002004:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000200a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000200d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002010:	31 d2                	xor    edx,edx
c0002012:	e8 1d fd ff ff       	call   c0001d34 <st_word>
c0002017:	0f b6 d9             	movzx  ebx,cl
c000201a:	4b                   	dec    ebx
c000201b:	6b db 0d             	imul   ebx,ebx,0xd
c000201e:	66 83 fe ff          	cmp    si,0xffff
c0002022:	74 08                	je     c000202c <put_lfn+0x40>
c0002024:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002027:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000202b:	43                   	inc    ebx
c000202c:	0f b6 85 40 ed 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe12c0]
c0002033:	0f b7 d6             	movzx  edx,si
c0002036:	01 f8                	add    eax,edi
c0002038:	e8 f7 fc ff ff       	call   c0001d34 <st_word>
c000203d:	66 85 f6             	test   si,si
c0002040:	75 03                	jne    c0002045 <put_lfn+0x59>
c0002042:	83 ce ff             	or     esi,0xffffffff
c0002045:	45                   	inc    ebp
c0002046:	83 fd 0d             	cmp    ebp,0xd
c0002049:	75 d3                	jne    c000201e <put_lfn+0x32>
c000204b:	66 46                	inc    si
c000204d:	74 0a                	je     c0002059 <put_lfn+0x6d>
c000204f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002052:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002057:	75 09                	jne    c0002062 <put_lfn+0x76>
c0002059:	88 c8                	mov    al,cl
c000205b:	83 c8 40             	or     eax,0x40
c000205e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002062:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002066:	88 07                	mov    BYTE PTR [edi],al
c0002068:	83 c4 08             	add    esp,0x8
c000206b:	5b                   	pop    ebx
c000206c:	5e                   	pop    esi
c000206d:	5f                   	pop    edi
c000206e:	5d                   	pop    ebp
c000206f:	c3                   	ret    

c0002070 <gen_numname>:
c0002070:	57                   	push   edi
c0002071:	89 cf                	mov    edi,ecx
c0002073:	56                   	push   esi
c0002074:	b9 0b 00 00 00       	mov    ecx,0xb
c0002079:	53                   	push   ebx
c000207a:	89 c6                	mov    esi,eax
c000207c:	83 ec 10             	sub    esp,0x10
c000207f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002083:	e8 b3 fc ff ff       	call   c0001d3b <mem_cpy>
c0002088:	83 fb 05             	cmp    ebx,0x5
c000208b:	76 2d                	jbe    c00020ba <gen_numname+0x4a>
c000208d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002090:	66 85 c0             	test   ax,ax
c0002093:	74 25                	je     c00020ba <gen_numname+0x4a>
c0002095:	83 c7 02             	add    edi,0x2
c0002098:	ba 10 00 00 00       	mov    edx,0x10
c000209d:	01 db                	add    ebx,ebx
c000209f:	89 c1                	mov    ecx,eax
c00020a1:	66 d1 e8             	shr    ax,1
c00020a4:	83 e1 01             	and    ecx,0x1
c00020a7:	01 cb                	add    ebx,ecx
c00020a9:	0f ba e3 10          	bt     ebx,0x10
c00020ad:	73 06                	jae    c00020b5 <gen_numname+0x45>
c00020af:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b5:	4a                   	dec    edx
c00020b6:	75 e5                	jne    c000209d <gen_numname+0x2d>
c00020b8:	eb d3                	jmp    c000208d <gen_numname+0x1d>
c00020ba:	b8 07 00 00 00       	mov    eax,0x7
c00020bf:	88 d9                	mov    cl,bl
c00020c1:	83 e1 0f             	and    ecx,0xf
c00020c4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c7:	80 fa 39             	cmp    dl,0x39
c00020ca:	76 03                	jbe    c00020cf <gen_numname+0x5f>
c00020cc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020cf:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020d2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d6:	89 da                	mov    edx,ebx
c00020d8:	c1 ea 04             	shr    edx,0x4
c00020db:	83 fb 0f             	cmp    ebx,0xf
c00020de:	76 06                	jbe    c00020e6 <gen_numname+0x76>
c00020e0:	89 c8                	mov    eax,ecx
c00020e2:	89 d3                	mov    ebx,edx
c00020e4:	eb d9                	jmp    c00020bf <gen_numname+0x4f>
c00020e6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020eb:	31 d2                	xor    edx,edx
c00020ed:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020f0:	8d 04 16             	lea    eax,[esi+edx*1]
c00020f3:	39 ca                	cmp    edx,ecx
c00020f5:	73 18                	jae    c000210f <gen_numname+0x9f>
c00020f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020fa:	3c 20                	cmp    al,0x20
c00020fc:	74 11                	je     c000210f <gen_numname+0x9f>
c00020fe:	e8 8d fc ff ff       	call   c0001d90 <dbc_1st>
c0002103:	85 c0                	test   eax,eax
c0002105:	74 05                	je     c000210c <gen_numname+0x9c>
c0002107:	39 d3                	cmp    ebx,edx
c0002109:	74 04                	je     c000210f <gen_numname+0x9f>
c000210b:	42                   	inc    edx
c000210c:	42                   	inc    edx
c000210d:	eb e1                	jmp    c00020f0 <gen_numname+0x80>
c000210f:	b0 20                	mov    al,0x20
c0002111:	83 f9 07             	cmp    ecx,0x7
c0002114:	77 05                	ja     c000211b <gen_numname+0xab>
c0002116:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000211a:	41                   	inc    ecx
c000211b:	42                   	inc    edx
c000211c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002120:	83 fa 07             	cmp    edx,0x7
c0002123:	76 ea                	jbe    c000210f <gen_numname+0x9f>
c0002125:	83 c4 10             	add    esp,0x10
c0002128:	5b                   	pop    ebx
c0002129:	5e                   	pop    esi
c000212a:	5f                   	pop    edi
c000212b:	c3                   	ret    

c000212c <sum_sfn>:
c000212c:	31 c9                	xor    ecx,ecx
c000212e:	31 d2                	xor    edx,edx
c0002130:	d0 ca                	ror    dl,1
c0002132:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002135:	41                   	inc    ecx
c0002136:	83 f9 0b             	cmp    ecx,0xb
c0002139:	75 f5                	jne    c0002130 <sum_sfn+0x4>
c000213b:	88 d0                	mov    al,dl
c000213d:	c3                   	ret    

c000213e <get_ldnumber>:
c000213e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002140:	85 d2                	test   edx,edx
c0002142:	74 14                	je     c0002158 <get_ldnumber+0x1a>
c0002144:	56                   	push   esi
c0002145:	53                   	push   ebx
c0002146:	89 d3                	mov    ebx,edx
c0002148:	43                   	inc    ebx
c0002149:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214c:	80 f9 1f             	cmp    cl,0x1f
c000214f:	76 0d                	jbe    c000215e <get_ldnumber+0x20>
c0002151:	80 f9 3a             	cmp    cl,0x3a
c0002154:	75 f2                	jne    c0002148 <get_ldnumber+0xa>
c0002156:	eb 0a                	jmp    c0002162 <get_ldnumber+0x24>
c0002158:	83 c9 ff             	or     ecx,0xffffffff
c000215b:	89 c8                	mov    eax,ecx
c000215d:	c3                   	ret    
c000215e:	31 c9                	xor    ecx,ecx
c0002160:	eb 24                	jmp    c0002186 <get_ldnumber+0x48>
c0002162:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002165:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002168:	80 f9 09             	cmp    cl,0x9
c000216b:	77 16                	ja     c0002183 <get_ldnumber+0x45>
c000216d:	83 c2 02             	add    edx,0x2
c0002170:	83 c9 ff             	or     ecx,0xffffffff
c0002173:	39 d3                	cmp    ebx,edx
c0002175:	75 0f                	jne    c0002186 <get_ldnumber+0x48>
c0002177:	89 f2                	mov    edx,esi
c0002179:	89 18                	mov    DWORD PTR [eax],ebx
c000217b:	0f be ca             	movsx  ecx,dl
c000217e:	83 e9 30             	sub    ecx,0x30
c0002181:	eb 03                	jmp    c0002186 <get_ldnumber+0x48>
c0002183:	83 c9 ff             	or     ecx,0xffffffff
c0002186:	89 c8                	mov    eax,ecx
c0002188:	5b                   	pop    ebx
c0002189:	5e                   	pop    esi
c000218a:	c3                   	ret    

c000218b <validate>:
c000218b:	56                   	push   esi
c000218c:	53                   	push   ebx
c000218d:	89 d6                	mov    esi,edx
c000218f:	51                   	push   ecx
c0002190:	85 c0                	test   eax,eax
c0002192:	75 09                	jne    c000219d <validate+0x12>
c0002194:	b8 09 00 00 00       	mov    eax,0x9
c0002199:	31 c9                	xor    ecx,ecx
c000219b:	eb 2f                	jmp    c00021cc <validate+0x41>
c000219d:	89 c3                	mov    ebx,eax
c000219f:	8b 00                	mov    eax,DWORD PTR [eax]
c00021a1:	85 c0                	test   eax,eax
c00021a3:	74 ef                	je     c0002194 <validate+0x9>
c00021a5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021a8:	74 ea                	je     c0002194 <validate+0x9>
c00021aa:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021ae:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021b2:	75 e0                	jne    c0002194 <validate+0x9>
c00021b4:	83 ec 0c             	sub    esp,0xc
c00021b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021bb:	50                   	push   eax
c00021bc:	e8 fd fa ff ff       	call   c0001cbe <disk_status>
c00021c1:	83 c4 10             	add    esp,0x10
c00021c4:	a8 01                	test   al,0x1
c00021c6:	75 cc                	jne    c0002194 <validate+0x9>
c00021c8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ca:	31 c0                	xor    eax,eax
c00021cc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021ce:	5a                   	pop    edx
c00021cf:	5b                   	pop    ebx
c00021d0:	5e                   	pop    esi
c00021d1:	c3                   	ret    

c00021d2 <sync_window>:
c00021d2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021d6:	74 58                	je     c0002230 <sync_window+0x5e>
c00021d8:	56                   	push   esi
c00021d9:	53                   	push   ebx
c00021da:	8d 70 34             	lea    esi,[eax+0x34]
c00021dd:	51                   	push   ecx
c00021de:	89 c3                	mov    ebx,eax
c00021e0:	6a 01                	push   0x1
c00021e2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021e5:	56                   	push   esi
c00021e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ea:	50                   	push   eax
c00021eb:	e8 ea fa ff ff       	call   c0001cda <disk_write>
c00021f0:	83 c4 10             	add    esp,0x10
c00021f3:	ba 01 00 00 00       	mov    edx,0x1
c00021f8:	85 c0                	test   eax,eax
c00021fa:	75 2e                	jne    c000222a <sync_window+0x58>
c00021fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00021ff:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002202:	89 c1                	mov    ecx,eax
c0002204:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002208:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000220b:	39 d1                	cmp    ecx,edx
c000220d:	73 19                	jae    c0002228 <sync_window+0x56>
c000220f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002213:	75 13                	jne    c0002228 <sync_window+0x56>
c0002215:	6a 01                	push   0x1
c0002217:	01 d0                	add    eax,edx
c0002219:	50                   	push   eax
c000221a:	56                   	push   esi
c000221b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221f:	50                   	push   eax
c0002220:	e8 b5 fa ff ff       	call   c0001cda <disk_write>
c0002225:	83 c4 10             	add    esp,0x10
c0002228:	31 d2                	xor    edx,edx
c000222a:	89 d0                	mov    eax,edx
c000222c:	5a                   	pop    edx
c000222d:	5b                   	pop    ebx
c000222e:	5e                   	pop    esi
c000222f:	c3                   	ret    
c0002230:	31 d2                	xor    edx,edx
c0002232:	89 d0                	mov    eax,edx
c0002234:	c3                   	ret    

c0002235 <move_window>:
c0002235:	57                   	push   edi
c0002236:	56                   	push   esi
c0002237:	31 f6                	xor    esi,esi
c0002239:	53                   	push   ebx
c000223a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000223d:	74 32                	je     c0002271 <move_window+0x3c>
c000223f:	89 c3                	mov    ebx,eax
c0002241:	89 d7                	mov    edi,edx
c0002243:	e8 8a ff ff ff       	call   c00021d2 <sync_window>
c0002248:	89 c6                	mov    esi,eax
c000224a:	85 c0                	test   eax,eax
c000224c:	75 23                	jne    c0002271 <move_window+0x3c>
c000224e:	6a 01                	push   0x1
c0002250:	8d 43 34             	lea    eax,[ebx+0x34]
c0002253:	57                   	push   edi
c0002254:	50                   	push   eax
c0002255:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002259:	50                   	push   eax
c000225a:	e8 65 fa ff ff       	call   c0001cc4 <disk_read>
c000225f:	83 c4 10             	add    esp,0x10
c0002262:	85 c0                	test   eax,eax
c0002264:	74 08                	je     c000226e <move_window+0x39>
c0002266:	be 01 00 00 00       	mov    esi,0x1
c000226b:	83 cf ff             	or     edi,0xffffffff
c000226e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002271:	89 f0                	mov    eax,esi
c0002273:	5b                   	pop    ebx
c0002274:	5e                   	pop    esi
c0002275:	5f                   	pop    edi
c0002276:	c3                   	ret    

c0002277 <check_fs>:
c0002277:	53                   	push   ebx
c0002278:	89 c3                	mov    ebx,eax
c000227a:	83 ec 08             	sub    esp,0x8
c000227d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002281:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002288:	e8 a8 ff ff ff       	call   c0002235 <move_window>
c000228d:	ba 04 00 00 00       	mov    edx,0x4
c0002292:	85 c0                	test   eax,eax
c0002294:	75 68                	jne    c00022fe <check_fs+0x87>
c0002296:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000229c:	e8 6e fa ff ff       	call   c0001d0f <ld_word>
c00022a1:	ba 03 00 00 00       	mov    edx,0x3
c00022a6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022aa:	75 52                	jne    c00022fe <check_fs+0x87>
c00022ac:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022af:	8d 50 18             	lea    edx,[eax+0x18]
c00022b2:	80 fa 01             	cmp    dl,0x1
c00022b5:	76 09                	jbe    c00022c0 <check_fs+0x49>
c00022b7:	ba 02 00 00 00       	mov    edx,0x2
c00022bc:	3c eb                	cmp    al,0xeb
c00022be:	75 3e                	jne    c00022fe <check_fs+0x87>
c00022c0:	ba 44 0e 02 c0       	mov    edx,0xc0020e44
c00022c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022c8:	b9 03 00 00 00       	mov    ecx,0x3
c00022cd:	e8 89 fa ff ff       	call   c0001d5b <mem_cmp>
c00022d2:	31 d2                	xor    edx,edx
c00022d4:	85 c0                	test   eax,eax
c00022d6:	74 26                	je     c00022fe <check_fs+0x87>
c00022d8:	ba fc eb 01 c0       	mov    edx,0xc001ebfc
c00022dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022e3:	b9 05 00 00 00       	mov    ecx,0x5
c00022e8:	e8 6e fa ff ff       	call   c0001d5b <mem_cmp>
c00022ed:	31 d2                	xor    edx,edx
c00022ef:	85 c0                	test   eax,eax
c00022f1:	74 0b                	je     c00022fe <check_fs+0x87>
c00022f3:	31 d2                	xor    edx,edx
c00022f5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00022f9:	0f 95 c2             	setne  dl
c00022fc:	01 d2                	add    edx,edx
c00022fe:	89 d0                	mov    eax,edx
c0002300:	83 c4 08             	add    esp,0x8
c0002303:	5b                   	pop    ebx
c0002304:	c3                   	ret    

c0002305 <find_volume>:
c0002305:	55                   	push   ebp
c0002306:	57                   	push   edi
c0002307:	56                   	push   esi
c0002308:	89 c6                	mov    esi,eax
c000230a:	53                   	push   ebx
c000230b:	89 d3                	mov    ebx,edx
c000230d:	83 ec 2c             	sub    esp,0x2c
c0002310:	31 d2                	xor    edx,edx
c0002312:	e8 60 ff ff ff       	call   c0002277 <check_fs>
c0002317:	83 f8 02             	cmp    eax,0x2
c000231a:	74 06                	je     c0002322 <find_volume+0x1d>
c000231c:	77 62                	ja     c0002380 <find_volume+0x7b>
c000231e:	85 db                	test   ebx,ebx
c0002320:	74 5e                	je     c0002380 <find_volume+0x7b>
c0002322:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002326:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000232c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002336:	89 cf                	mov    edi,ecx
c0002338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000233c:	89 e8                	mov    eax,ebp
c000233e:	83 c5 10             	add    ebp,0x10
c0002341:	e8 d6 f9 ff ff       	call   c0001d1c <ld_dword>
c0002346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000234a:	89 01                	mov    DWORD PTR [ecx],eax
c000234c:	83 c1 04             	add    ecx,0x4
c000234f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002353:	75 e3                	jne    c0002338 <find_volume+0x33>
c0002355:	31 ed                	xor    ebp,ebp
c0002357:	85 db                	test   ebx,ebx
c0002359:	74 03                	je     c000235e <find_volume+0x59>
c000235b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000235e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002361:	b8 03 00 00 00       	mov    eax,0x3
c0002366:	85 d2                	test   edx,edx
c0002368:	74 0c                	je     c0002376 <find_volume+0x71>
c000236a:	89 f0                	mov    eax,esi
c000236c:	e8 06 ff ff ff       	call   c0002277 <check_fs>
c0002371:	83 f8 01             	cmp    eax,0x1
c0002374:	76 0a                	jbe    c0002380 <find_volume+0x7b>
c0002376:	85 db                	test   ebx,ebx
c0002378:	75 06                	jne    c0002380 <find_volume+0x7b>
c000237a:	45                   	inc    ebp
c000237b:	83 fd 03             	cmp    ebp,0x3
c000237e:	76 de                	jbe    c000235e <find_volume+0x59>
c0002380:	83 c4 2c             	add    esp,0x2c
c0002383:	5b                   	pop    ebx
c0002384:	5e                   	pop    esi
c0002385:	5f                   	pop    edi
c0002386:	5d                   	pop    ebp
c0002387:	c3                   	ret    

c0002388 <mount_volume>:
c0002388:	55                   	push   ebp
c0002389:	89 d5                	mov    ebp,edx
c000238b:	57                   	push   edi
c000238c:	89 cf                	mov    edi,ecx
c000238e:	56                   	push   esi
c000238f:	53                   	push   ebx
c0002390:	bb 0b 00 00 00       	mov    ebx,0xb
c0002395:	83 ec 2c             	sub    esp,0x2c
c0002398:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000239e:	e8 9b fd ff ff       	call   c000213e <get_ldnumber>
c00023a3:	85 c0                	test   eax,eax
c00023a5:	0f 88 d6 02 00 00    	js     c0002681 <mount_volume+0x2f9>
c00023ab:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023b2:	89 c2                	mov    edx,eax
c00023b4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023b9:	85 f6                	test   esi,esi
c00023bb:	0f 84 c0 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023c1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023c4:	83 e7 fe             	and    edi,0xfffffffe
c00023c7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023ca:	74 3a                	je     c0002406 <mount_volume+0x7e>
c00023cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023d0:	83 ec 0c             	sub    esp,0xc
c00023d3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023d7:	50                   	push   eax
c00023d8:	e8 e1 f8 ff ff       	call   c0001cbe <disk_status>
c00023dd:	83 c4 10             	add    esp,0x10
c00023e0:	a8 01                	test   al,0x1
c00023e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023e6:	75 1e                	jne    c0002406 <mount_volume+0x7e>
c00023e8:	31 db                	xor    ebx,ebx
c00023ea:	89 f9                	mov    ecx,edi
c00023ec:	84 c9                	test   cl,cl
c00023ee:	0f 84 8d 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023f4:	a8 04                	test   al,0x4
c00023f6:	0f 84 85 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0002401:	e9 7b 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002406:	83 ec 0c             	sub    esp,0xc
c0002409:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000240c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000240f:	0f b6 c2             	movzx  eax,dl
c0002412:	bb 03 00 00 00       	mov    ebx,0x3
c0002417:	50                   	push   eax
c0002418:	e8 a4 f8 ff ff       	call   c0001cc1 <disk_initialize>
c000241d:	83 c4 10             	add    esp,0x10
c0002420:	a8 01                	test   al,0x1
c0002422:	0f 85 59 02 00 00    	jne    c0002681 <mount_volume+0x2f9>
c0002428:	89 f9                	mov    ecx,edi
c000242a:	84 c9                	test   cl,cl
c000242c:	74 04                	je     c0002432 <mount_volume+0xaa>
c000242e:	a8 04                	test   al,0x4
c0002430:	75 ca                	jne    c00023fc <mount_volume+0x74>
c0002432:	31 d2                	xor    edx,edx
c0002434:	89 f0                	mov    eax,esi
c0002436:	bb 01 00 00 00       	mov    ebx,0x1
c000243b:	e8 c5 fe ff ff       	call   c0002305 <find_volume>
c0002440:	83 f8 04             	cmp    eax,0x4
c0002443:	0f 84 38 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c0002449:	83 f8 01             	cmp    eax,0x1
c000244c:	76 0a                	jbe    c0002458 <mount_volume+0xd0>
c000244e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002453:	e9 29 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002458:	8d 46 3f             	lea    eax,[esi+0x3f]
c000245b:	e8 af f8 ff ff       	call   c0001d0f <ld_word>
c0002460:	66 3d 00 02          	cmp    ax,0x200
c0002464:	75 e8                	jne    c000244e <mount_volume+0xc6>
c0002466:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002469:	e8 a1 f8 ff ff       	call   c0001d0f <ld_word>
c000246e:	0f b7 c0             	movzx  eax,ax
c0002471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002475:	85 c0                	test   eax,eax
c0002477:	75 0c                	jne    c0002485 <mount_volume+0xfd>
c0002479:	8d 46 58             	lea    eax,[esi+0x58]
c000247c:	e8 9b f8 ff ff       	call   c0001d1c <ld_dword>
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002488:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000248b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000248f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002493:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002496:	89 e8                	mov    eax,ebp
c0002498:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000249b:	8d 45 ff             	lea    eax,[ebp-0x1]
c000249e:	3c 01                	cmp    al,0x1
c00024a0:	77 ac                	ja     c000244e <mount_volume+0xc6>
c00024a2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024a6:	89 c3                	mov    ebx,eax
c00024a8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024ac:	66 85 c0             	test   ax,ax
c00024af:	74 9d                	je     c000244e <mount_volume+0xc6>
c00024b1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024b4:	85 d8                	test   eax,ebx
c00024b6:	75 96                	jne    c000244e <mount_volume+0xc6>
c00024b8:	8d 46 45             	lea    eax,[esi+0x45]
c00024bb:	e8 4f f8 ff ff       	call   c0001d0f <ld_word>
c00024c0:	89 c7                	mov    edi,eax
c00024c2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024c6:	a8 0f                	test   al,0xf
c00024c8:	75 84                	jne    c000244e <mount_volume+0xc6>
c00024ca:	8d 46 47             	lea    eax,[esi+0x47]
c00024cd:	e8 3d f8 ff ff       	call   c0001d0f <ld_word>
c00024d2:	0f b7 d0             	movzx  edx,ax
c00024d5:	85 d2                	test   edx,edx
c00024d7:	75 0a                	jne    c00024e3 <mount_volume+0x15b>
c00024d9:	8d 46 54             	lea    eax,[esi+0x54]
c00024dc:	e8 3b f8 ff ff       	call   c0001d1c <ld_dword>
c00024e1:	89 c2                	mov    edx,eax
c00024e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024e7:	8d 46 42             	lea    eax,[esi+0x42]
c00024ea:	e8 20 f8 ff ff       	call   c0001d0f <ld_word>
c00024ef:	66 85 c0             	test   ax,ax
c00024f2:	0f 84 56 ff ff ff    	je     c000244e <mount_volume+0xc6>
c00024f8:	89 e9                	mov    ecx,ebp
c00024fa:	0f b7 c0             	movzx  eax,ax
c00024fd:	0f b6 e9             	movzx  ebp,cl
c0002500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002508:	89 f8                	mov    eax,edi
c000250a:	0f af cd             	imul   ecx,ebp
c000250d:	66 c1 e8 04          	shr    ax,0x4
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b7 c0             	movzx  eax,ax
c0002518:	01 c8                	add    eax,ecx
c000251a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000251e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002522:	39 c2                	cmp    edx,eax
c0002524:	0f 82 24 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000252a:	29 c2                	sub    edx,eax
c000252c:	89 d5                	mov    ebp,edx
c000252e:	89 d0                	mov    eax,edx
c0002530:	31 d2                	xor    edx,edx
c0002532:	f7 f3                	div    ebx
c0002534:	39 dd                	cmp    ebp,ebx
c0002536:	0f 82 12 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000253c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002541:	0f 87 07 ff ff ff    	ja     c000244e <mount_volume+0xc6>
c0002547:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000254c:	0f 86 1f 01 00 00    	jbe    c0002671 <mount_volume+0x2e9>
c0002552:	bb 03 00 00 00       	mov    ebx,0x3
c0002557:	8d 68 02             	lea    ebp,[eax+0x2]
c000255a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002562:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002566:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002569:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000256c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002570:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002573:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002577:	83 fb 03             	cmp    ebx,0x3
c000257a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000257d:	75 21                	jne    c00025a0 <mount_volume+0x218>
c000257f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002582:	e8 88 f7 ff ff       	call   c0001d0f <ld_word>
c0002587:	66 09 c7             	or     di,ax
c000258a:	0f 85 be fe ff ff    	jne    c000244e <mount_volume+0xc6>
c0002590:	8d 46 60             	lea    eax,[esi+0x60]
c0002593:	c1 e5 02             	shl    ebp,0x2
c0002596:	e8 81 f7 ff ff       	call   c0001d1c <ld_dword>
c000259b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000259e:	eb 22                	jmp    c00025c2 <mount_volume+0x23a>
c00025a0:	66 85 ff             	test   di,di
c00025a3:	0f 84 a5 fe ff ff    	je     c000244e <mount_volume+0xc6>
c00025a9:	01 c8                	add    eax,ecx
c00025ab:	83 fb 02             	cmp    ebx,0x2
c00025ae:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b1:	75 04                	jne    c00025b7 <mount_volume+0x22f>
c00025b3:	01 ed                	add    ebp,ebp
c00025b5:	eb 0b                	jmp    c00025c2 <mount_volume+0x23a>
c00025b7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025bb:	83 e5 01             	and    ebp,0x1
c00025be:	d1 e8                	shr    eax,1
c00025c0:	01 c5                	add    ebp,eax
c00025c2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025c8:	c1 ed 09             	shr    ebp,0x9
c00025cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025cf:	0f 87 79 fe ff ff    	ja     c000244e <mount_volume+0xc6>
c00025d5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025dc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025e3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025e7:	83 fb 03             	cmp    ebx,0x3
c00025ea:	75 6e                	jne    c000265a <mount_volume+0x2d2>
c00025ec:	8d 46 64             	lea    eax,[esi+0x64]
c00025ef:	e8 1b f7 ff ff       	call   c0001d0f <ld_word>
c00025f4:	66 48                	dec    ax
c00025f6:	75 62                	jne    c000265a <mount_volume+0x2d2>
c00025f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00025fc:	89 f0                	mov    eax,esi
c00025fe:	42                   	inc    edx
c00025ff:	e8 31 fc ff ff       	call   c0002235 <move_window>
c0002604:	85 c0                	test   eax,eax
c0002606:	75 52                	jne    c000265a <mount_volume+0x2d2>
c0002608:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000260c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002612:	e8 f8 f6 ff ff       	call   c0001d0f <ld_word>
c0002617:	66 3d 55 aa          	cmp    ax,0xaa55
c000261b:	75 3d                	jne    c000265a <mount_volume+0x2d2>
c000261d:	8d 46 34             	lea    eax,[esi+0x34]
c0002620:	e8 f7 f6 ff ff       	call   c0001d1c <ld_dword>
c0002625:	3d 52 52 61 41       	cmp    eax,0x41615252
c000262a:	75 2e                	jne    c000265a <mount_volume+0x2d2>
c000262c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002632:	e8 e5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002637:	3d 72 72 41 61       	cmp    eax,0x61417272
c000263c:	75 1c                	jne    c000265a <mount_volume+0x2d2>
c000263e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002644:	e8 d3 f6 ff ff       	call   c0001d1c <ld_dword>
c0002649:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000264c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002652:	e8 c5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000265a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002660:	88 1e                	mov    BYTE PTR [esi],bl
c0002662:	40                   	inc    eax
c0002663:	31 db                	xor    ebx,ebx
c0002665:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000266b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000266f:	eb 10                	jmp    c0002681 <mount_volume+0x2f9>
c0002671:	31 db                	xor    ebx,ebx
c0002673:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002678:	0f 97 c3             	seta   bl
c000267b:	43                   	inc    ebx
c000267c:	e9 d6 fe ff ff       	jmp    c0002557 <mount_volume+0x1cf>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	89 d8                	mov    eax,ebx
c0002686:	5b                   	pop    ebx
c0002687:	5e                   	pop    esi
c0002688:	5f                   	pop    edi
c0002689:	5d                   	pop    ebp
c000268a:	c3                   	ret    

c000268b <put_fat>:
c000268b:	55                   	push   ebp
c000268c:	bd 02 00 00 00       	mov    ebp,0x2
c0002691:	57                   	push   edi
c0002692:	56                   	push   esi
c0002693:	53                   	push   ebx
c0002694:	83 ec 1c             	sub    esp,0x1c
c0002697:	83 fa 01             	cmp    edx,0x1
c000269a:	0f 86 31 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026a3:	0f 86 28 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a9:	89 c6                	mov    esi,eax
c00026ab:	89 cf                	mov    edi,ecx
c00026ad:	8a 00                	mov    al,BYTE PTR [eax]
c00026af:	89 d3                	mov    ebx,edx
c00026b1:	3c 02                	cmp    al,0x2
c00026b3:	0f 84 ac 00 00 00    	je     c0002765 <put_fat+0xda>
c00026b9:	3c 03                	cmp    al,0x3
c00026bb:	0f 84 d1 00 00 00    	je     c0002792 <put_fat+0x107>
c00026c1:	fe c8                	dec    al
c00026c3:	0f 85 08 01 00 00    	jne    c00027d1 <put_fat+0x146>
c00026c9:	89 d1                	mov    ecx,edx
c00026cb:	89 f0                	mov    eax,esi
c00026cd:	d1 e9                	shr    ecx,1
c00026cf:	01 d1                	add    ecx,edx
c00026d1:	89 ca                	mov    edx,ecx
c00026d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026d7:	c1 ea 09             	shr    edx,0x9
c00026da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026dd:	e8 53 fb ff ff       	call   c0002235 <move_window>
c00026e2:	89 c5                	mov    ebp,eax
c00026e4:	85 c0                	test   eax,eax
c00026e6:	0f 85 e5 00 00 00    	jne    c00027d1 <put_fat+0x146>
c00026ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f0:	8d 46 34             	lea    eax,[esi+0x34]
c00026f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026f7:	8d 41 01             	lea    eax,[ecx+0x1]
c00026fa:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002704:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002708:	89 f8                	mov    eax,edi
c000270a:	83 e3 01             	and    ebx,0x1
c000270d:	74 0c                	je     c000271b <put_fat+0x90>
c000270f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002711:	89 f8                	mov    eax,edi
c0002713:	83 e2 0f             	and    edx,0xf
c0002716:	c1 e0 04             	shl    eax,0x4
c0002719:	09 d0                	or     eax,edx
c000271b:	88 01                	mov    BYTE PTR [ecx],al
c000271d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002721:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002725:	c1 ea 09             	shr    edx,0x9
c0002728:	89 f0                	mov    eax,esi
c000272a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000272d:	e8 03 fb ff ff       	call   c0002235 <move_window>
c0002732:	89 c5                	mov    ebp,eax
c0002734:	85 c0                	test   eax,eax
c0002736:	0f 85 95 00 00 00    	jne    c00027d1 <put_fat+0x146>
c000273c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002740:	25 ff 01 00 00       	and    eax,0x1ff
c0002745:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002749:	85 db                	test   ebx,ebx
c000274b:	74 07                	je     c0002754 <put_fat+0xc9>
c000274d:	c1 ef 04             	shr    edi,0x4
c0002750:	89 f9                	mov    ecx,edi
c0002752:	eb 0d                	jmp    c0002761 <put_fat+0xd6>
c0002754:	8a 08                	mov    cl,BYTE PTR [eax]
c0002756:	c1 ef 08             	shr    edi,0x8
c0002759:	83 e1 f0             	and    ecx,0xfffffff0
c000275c:	83 e7 0f             	and    edi,0xf
c000275f:	09 f9                	or     ecx,edi
c0002761:	88 08                	mov    BYTE PTR [eax],cl
c0002763:	eb 27                	jmp    c000278c <put_fat+0x101>
c0002765:	c1 ea 08             	shr    edx,0x8
c0002768:	89 f0                	mov    eax,esi
c000276a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000276d:	e8 c3 fa ff ff       	call   c0002235 <move_window>
c0002772:	89 c5                	mov    ebp,eax
c0002774:	85 c0                	test   eax,eax
c0002776:	75 59                	jne    c00027d1 <put_fat+0x146>
c0002778:	01 db                	add    ebx,ebx
c000277a:	0f b7 d7             	movzx  edx,di
c000277d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002783:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002787:	e8 a8 f5 ff ff       	call   c0001d34 <st_word>
c000278c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002790:	eb 3f                	jmp    c00027d1 <put_fat+0x146>
c0002792:	c1 ea 07             	shr    edx,0x7
c0002795:	89 f0                	mov    eax,esi
c0002797:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279a:	e8 96 fa ff ff       	call   c0002235 <move_window>
c000279f:	89 c5                	mov    ebp,eax
c00027a1:	85 c0                	test   eax,eax
c00027a3:	75 2c                	jne    c00027d1 <put_fat+0x146>
c00027a5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027ab:	c1 e3 02             	shl    ebx,0x2
c00027ae:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027b4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027b8:	89 d8                	mov    eax,ebx
c00027ba:	e8 5d f5 ff ff       	call   c0001d1c <ld_dword>
c00027bf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027c4:	09 f8                	or     eax,edi
c00027c6:	89 c2                	mov    edx,eax
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 69 f5 ff ff       	call   c0001d38 <st_dword>
c00027cf:	eb bb                	jmp    c000278c <put_fat+0x101>
c00027d1:	83 c4 1c             	add    esp,0x1c
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	5b                   	pop    ebx
c00027d7:	5e                   	pop    esi
c00027d8:	5f                   	pop    edi
c00027d9:	5d                   	pop    ebp
c00027da:	c3                   	ret    

c00027db <dir_clear>:
c00027db:	55                   	push   ebp
c00027dc:	57                   	push   edi
c00027dd:	56                   	push   esi
c00027de:	89 c6                	mov    esi,eax
c00027e0:	53                   	push   ebx
c00027e1:	83 ec 1c             	sub    esp,0x1c
c00027e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027e8:	e8 e5 f9 ff ff       	call   c00021d2 <sync_window>
c00027ed:	85 c0                	test   eax,eax
c00027ef:	0f 85 c0 00 00 00    	jne    c00028b5 <dir_clear+0xda>
c00027f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f9:	89 f0                	mov    eax,esi
c00027fb:	e8 55 f7 ff ff       	call   c0001f55 <clst2sect>
c0002800:	31 d2                	xor    edx,edx
c0002802:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002805:	89 c5                	mov    ebp,eax
c0002807:	b9 00 02 00 00       	mov    ecx,0x200
c000280c:	8d 46 34             	lea    eax,[esi+0x34]
c000280f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002813:	e8 38 f5 ff ff       	call   c0001d50 <mem_set>
c0002818:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000281c:	c1 e3 09             	shl    ebx,0x9
c000281f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002825:	76 1b                	jbe    c0002842 <dir_clear+0x67>
c0002827:	bb 00 80 00 00       	mov    ebx,0x8000
c000282c:	eb 14                	jmp    c0002842 <dir_clear+0x67>
c000282e:	83 ec 0c             	sub    esp,0xc
c0002831:	53                   	push   ebx
c0002832:	e8 25 32 00 00       	call   c0005a5c <ff_memalloc>
c0002837:	83 c4 10             	add    esp,0x10
c000283a:	89 c7                	mov    edi,eax
c000283c:	85 c0                	test   eax,eax
c000283e:	75 7c                	jne    c00028bc <dir_clear+0xe1>
c0002840:	d1 eb                	shr    ebx,1
c0002842:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002848:	77 e4                	ja     c000282e <dir_clear+0x53>
c000284a:	31 db                	xor    ebx,ebx
c000284c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002850:	39 d8                	cmp    eax,ebx
c0002852:	76 53                	jbe    c00028a7 <dir_clear+0xcc>
c0002854:	6a 01                	push   0x1
c0002856:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002859:	50                   	push   eax
c000285a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000285e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002862:	50                   	push   eax
c0002863:	e8 72 f4 ff ff       	call   c0001cda <disk_write>
c0002868:	83 c4 10             	add    esp,0x10
c000286b:	85 c0                	test   eax,eax
c000286d:	75 38                	jne    c00028a7 <dir_clear+0xcc>
c000286f:	43                   	inc    ebx
c0002870:	eb da                	jmp    c000284c <dir_clear+0x71>
c0002872:	52                   	push   edx
c0002873:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002876:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000287a:	50                   	push   eax
c000287b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000287f:	57                   	push   edi
c0002880:	50                   	push   eax
c0002881:	e8 54 f4 ff ff       	call   c0001cda <disk_write>
c0002886:	83 c4 10             	add    esp,0x10
c0002889:	85 c0                	test   eax,eax
c000288b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000288f:	75 0a                	jne    c000289b <dir_clear+0xc0>
c0002891:	01 d3                	add    ebx,edx
c0002893:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002897:	39 d8                	cmp    eax,ebx
c0002899:	77 d7                	ja     c0002872 <dir_clear+0x97>
c000289b:	83 ec 0c             	sub    esp,0xc
c000289e:	57                   	push   edi
c000289f:	e8 d0 31 00 00       	call   c0005a74 <ff_memfree>
c00028a4:	83 c4 10             	add    esp,0x10
c00028a7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ab:	39 d8                	cmp    eax,ebx
c00028ad:	0f 95 c0             	setne  al
c00028b0:	0f b6 c0             	movzx  eax,al
c00028b3:	eb 19                	jmp    c00028ce <dir_clear+0xf3>
c00028b5:	b8 01 00 00 00       	mov    eax,0x1
c00028ba:	eb 12                	jmp    c00028ce <dir_clear+0xf3>
c00028bc:	89 d9                	mov    ecx,ebx
c00028be:	31 d2                	xor    edx,edx
c00028c0:	e8 8b f4 ff ff       	call   c0001d50 <mem_set>
c00028c5:	89 da                	mov    edx,ebx
c00028c7:	31 db                	xor    ebx,ebx
c00028c9:	c1 ea 09             	shr    edx,0x9
c00028cc:	eb c5                	jmp    c0002893 <dir_clear+0xb8>
c00028ce:	83 c4 1c             	add    esp,0x1c
c00028d1:	5b                   	pop    ebx
c00028d2:	5e                   	pop    esi
c00028d3:	5f                   	pop    edi
c00028d4:	5d                   	pop    ebp
c00028d5:	c3                   	ret    

c00028d6 <create_name>:
c00028d6:	55                   	push   ebp
c00028d7:	89 d5                	mov    ebp,edx
c00028d9:	57                   	push   edi
c00028da:	89 c7                	mov    edi,eax
c00028dc:	56                   	push   esi
c00028dd:	31 f6                	xor    esi,esi
c00028df:	53                   	push   ebx
c00028e0:	83 ec 3c             	sub    esp,0x3c
c00028e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00028f6:	e8 9b f4 ff ff       	call   c0001d96 <tchar2uni>
c00028fb:	89 c3                	mov    ebx,eax
c00028fd:	83 f8 ff             	cmp    eax,0xffffffff
c0002900:	75 0a                	jne    c000290c <create_name+0x36>
c0002902:	b8 06 00 00 00       	mov    eax,0x6
c0002907:	e9 9e 02 00 00       	jmp    c0002baa <create_name+0x2d4>
c000290c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002911:	76 0c                	jbe    c000291f <create_name+0x49>
c0002913:	c1 e8 10             	shr    eax,0x10
c0002916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000291a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000291e:	46                   	inc    esi
c000291f:	66 83 fb 1f          	cmp    bx,0x1f
c0002923:	76 4f                	jbe    c0002974 <create_name+0x9e>
c0002925:	66 83 fb 5c          	cmp    bx,0x5c
c0002929:	74 35                	je     c0002960 <create_name+0x8a>
c000292b:	66 83 fb 2f          	cmp    bx,0x2f
c000292f:	74 2f                	je     c0002960 <create_name+0x8a>
c0002931:	66 83 fb 7f          	cmp    bx,0x7f
c0002935:	77 11                	ja     c0002948 <create_name+0x72>
c0002937:	0f b7 d3             	movzx  edx,bx
c000293a:	b8 02 ec 01 c0       	mov    eax,0xc001ec02
c000293f:	e8 3a f4 ff ff       	call   c0001d7e <chk_chr>
c0002944:	85 c0                	test   eax,eax
c0002946:	75 ba                	jne    c0002902 <create_name+0x2c>
c0002948:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000294e:	77 b2                	ja     c0002902 <create_name+0x2c>
c0002950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002954:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002958:	46                   	inc    esi
c0002959:	eb 97                	jmp    c00028f2 <create_name+0x1c>
c000295b:	40                   	inc    eax
c000295c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	8a 10                	mov    dl,BYTE PTR [eax]
c0002966:	80 fa 2f             	cmp    dl,0x2f
c0002969:	74 f0                	je     c000295b <create_name+0x85>
c000296b:	80 fa 5c             	cmp    dl,0x5c
c000296e:	74 eb                	je     c000295b <create_name+0x85>
c0002970:	31 db                	xor    ebx,ebx
c0002972:	eb 02                	jmp    c0002976 <create_name+0xa0>
c0002974:	b3 04                	mov    bl,0x4
c0002976:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000297a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000297d:	85 f6                	test   esi,esi
c000297f:	74 18                	je     c0002999 <create_name+0xc3>
c0002981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002985:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000298a:	66 83 f8 20          	cmp    ax,0x20
c000298e:	74 06                	je     c0002996 <create_name+0xc0>
c0002990:	66 83 f8 2e          	cmp    ax,0x2e
c0002994:	75 03                	jne    c0002999 <create_name+0xc3>
c0002996:	4e                   	dec    esi
c0002997:	eb e4                	jmp    c000297d <create_name+0xa7>
c0002999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000299d:	31 ed                	xor    ebp,ebp
c000299f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029a5:	85 f6                	test   esi,esi
c00029a7:	0f 84 55 ff ff ff    	je     c0002902 <create_name+0x2c>
c00029ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029b4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029b8:	66 83 f8 20          	cmp    ax,0x20
c00029bc:	75 04                	jne    c00029c2 <create_name+0xec>
c00029be:	89 d5                	mov    ebp,edx
c00029c0:	eb eb                	jmp    c00029ad <create_name+0xd7>
c00029c2:	85 ed                	test   ebp,ebp
c00029c4:	75 06                	jne    c00029cc <create_name+0xf6>
c00029c6:	66 83 f8 2e          	cmp    ax,0x2e
c00029ca:	75 08                	jne    c00029d4 <create_name+0xfe>
c00029cc:	83 cb 03             	or     ebx,0x3
c00029cf:	eb 03                	jmp    c00029d4 <create_name+0xfe>
c00029d1:	4e                   	dec    esi
c00029d2:	74 0c                	je     c00029e0 <create_name+0x10a>
c00029d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029d8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029de:	75 f1                	jne    c00029d1 <create_name+0xfb>
c00029e0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029e5:	8d 47 20             	lea    eax,[edi+0x20]
c00029e8:	ba 20 00 00 00       	mov    edx,0x20
c00029ed:	e8 5e f3 ff ff       	call   c0001d50 <mem_set>
c00029f2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00029fa:	31 c9                	xor    ecx,ecx
c00029fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a01:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a0c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a10:	66 85 ed             	test   bp,bp
c0002a13:	0f 84 30 01 00 00    	je     c0002b49 <create_name+0x273>
c0002a19:	66 83 fd 20          	cmp    bp,0x20
c0002a1d:	74 10                	je     c0002a2f <create_name+0x159>
c0002a1f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a23:	75 13                	jne    c0002a38 <create_name+0x162>
c0002a25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a29:	0f 84 6b 01 00 00    	je     c0002b9a <create_name+0x2c4>
c0002a2f:	83 cb 03             	or     ebx,0x3
c0002a32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a36:	eb c9                	jmp    c0002a01 <create_name+0x12b>
c0002a38:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a3c:	73 0b                	jae    c0002a49 <create_name+0x173>
c0002a3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a42:	75 47                	jne    c0002a8b <create_name+0x1b5>
c0002a44:	e9 51 01 00 00       	jmp    c0002b9a <create_name+0x2c4>
c0002a49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a4e:	75 10                	jne    c0002a60 <create_name+0x18a>
c0002a50:	83 cb 03             	or     ebx,0x3
c0002a53:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a5b:	e9 e9 00 00 00       	jmp    c0002b49 <create_name+0x273>
c0002a60:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a64:	74 0d                	je     c0002a73 <create_name+0x19d>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a6d:	0f 87 d6 00 00 00    	ja     c0002b49 <create_name+0x273>
c0002a73:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a7c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a84:	b9 08 00 00 00       	mov    ecx,0x8
c0002a89:	eb a7                	jmp    c0002a32 <create_name+0x15c>
c0002a8b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a8f:	76 68                	jbe    c0002af9 <create_name+0x223>
c0002a91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002a95:	88 da                	mov    dl,bl
c0002a97:	83 ca 02             	or     edx,0x2
c0002a9a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002a9e:	50                   	push   eax
c0002a9f:	50                   	push   eax
c0002aa0:	68 b5 01 00 00       	push   0x1b5
c0002aa5:	55                   	push   ebp
c0002aa6:	e8 e1 2f 00 00       	call   c0005a8c <ff_uni2oem>
c0002aab:	83 c4 10             	add    esp,0x10
c0002aae:	89 c5                	mov    ebp,eax
c0002ab0:	a8 80                	test   al,0x80
c0002ab2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ab6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aba:	74 0c                	je     c0002ac8 <create_name+0x1f2>
c0002abc:	83 e5 7f             	and    ebp,0x7f
c0002abf:	0f b6 ad c0 ec 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1340]
c0002ac6:	eb 2a                	jmp    c0002af2 <create_name+0x21c>
c0002ac8:	66 3d ff 00          	cmp    ax,0xff
c0002acc:	76 24                	jbe    c0002af2 <create_name+0x21c>
c0002ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad2:	48                   	dec    eax
c0002ad3:	39 c8                	cmp    eax,ecx
c0002ad5:	77 0c                	ja     c0002ae3 <create_name+0x20d>
c0002ad7:	83 cb 03             	or     ebx,0x3
c0002ada:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ade:	e9 4f ff ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002ae3:	89 e8                	mov    eax,ebp
c0002ae5:	88 d3                	mov    bl,dl
c0002ae7:	66 c1 e8 08          	shr    ax,0x8
c0002aeb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aef:	41                   	inc    ecx
c0002af0:	eb 4b                	jmp    c0002b3d <create_name+0x267>
c0002af2:	88 d3                	mov    bl,dl
c0002af4:	66 85 ed             	test   bp,bp
c0002af7:	74 19                	je     c0002b12 <create_name+0x23c>
c0002af9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002afd:	0f b7 d5             	movzx  edx,bp
c0002b00:	b8 0b ec 01 c0       	mov    eax,0xc001ec0b
c0002b05:	e8 74 f2 ff ff       	call   c0001d7e <chk_chr>
c0002b0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b0e:	85 c0                	test   eax,eax
c0002b10:	74 0a                	je     c0002b1c <create_name+0x246>
c0002b12:	83 cb 03             	or     ebx,0x3
c0002b15:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b1a:	eb 21                	jmp    c0002b3d <create_name+0x267>
c0002b1c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b1f:	66 83 f8 19          	cmp    ax,0x19
c0002b23:	77 07                	ja     c0002b2c <create_name+0x256>
c0002b25:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b2a:	eb 11                	jmp    c0002b3d <create_name+0x267>
c0002b2c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 08                	ja     c0002b3d <create_name+0x267>
c0002b35:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b3a:	83 ed 20             	sub    ebp,0x20
c0002b3d:	89 e8                	mov    eax,ebp
c0002b3f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b43:	41                   	inc    ecx
c0002b44:	e9 e9 fe ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002b49:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b4d:	75 04                	jne    c0002b53 <create_name+0x27d>
c0002b4f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b53:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b58:	75 05                	jne    c0002b5f <create_name+0x289>
c0002b5a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b63:	83 e0 0c             	and    eax,0xc
c0002b66:	3c 0c                	cmp    al,0xc
c0002b68:	74 0b                	je     c0002b75 <create_name+0x29f>
c0002b6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b6e:	83 e0 03             	and    eax,0x3
c0002b71:	3c 03                	cmp    al,0x3
c0002b73:	75 05                	jne    c0002b7a <create_name+0x2a4>
c0002b75:	83 cb 02             	or     ebx,0x2
c0002b78:	eb 19                	jmp    c0002b93 <create_name+0x2bd>
c0002b7a:	f6 c3 02             	test   bl,0x2
c0002b7d:	75 14                	jne    c0002b93 <create_name+0x2bd>
c0002b7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b84:	74 03                	je     c0002b89 <create_name+0x2b3>
c0002b86:	83 cb 10             	or     ebx,0x10
c0002b89:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b8e:	74 03                	je     c0002b93 <create_name+0x2bd>
c0002b90:	83 cb 08             	or     ebx,0x8
c0002b93:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002b96:	31 c0                	xor    eax,eax
c0002b98:	eb 10                	jmp    c0002baa <create_name+0x2d4>
c0002b9a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002b9f:	0f 85 ce fe ff ff    	jne    c0002a73 <create_name+0x19d>
c0002ba5:	e9 a6 fe ff ff       	jmp    c0002a50 <create_name+0x17a>
c0002baa:	83 c4 3c             	add    esp,0x3c
c0002bad:	5b                   	pop    ebx
c0002bae:	5e                   	pop    esi
c0002baf:	5f                   	pop    edi
c0002bb0:	5d                   	pop    ebp
c0002bb1:	c3                   	ret    

c0002bb2 <cmp_lfn>:
c0002bb2:	55                   	push   ebp
c0002bb3:	57                   	push   edi
c0002bb4:	89 d7                	mov    edi,edx
c0002bb6:	56                   	push   esi
c0002bb7:	53                   	push   ebx
c0002bb8:	83 ec 1c             	sub    esp,0x1c
c0002bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bc2:	e8 48 f1 ff ff       	call   c0001d0f <ld_word>
c0002bc7:	66 85 c0             	test   ax,ax
c0002bca:	74 07                	je     c0002bd3 <cmp_lfn+0x21>
c0002bcc:	31 c0                	xor    eax,eax
c0002bce:	e9 9a 00 00 00       	jmp    c0002c6d <cmp_lfn+0xbb>
c0002bd3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bda:	83 e3 3f             	and    ebx,0x3f
c0002bdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be5:	4b                   	dec    ebx
c0002be6:	6b db 0d             	imul   ebx,ebx,0xd
c0002be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bed:	0f b6 80 40 ed 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe12c0]
c0002bf4:	01 f8                	add    eax,edi
c0002bf6:	e8 14 f1 ff ff       	call   c0001d0f <ld_word>
c0002bfb:	66 85 ed             	test   bp,bp
c0002bfe:	89 c6                	mov    esi,eax
c0002c00:	74 3c                	je     c0002c3e <cmp_lfn+0x8c>
c0002c02:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c08:	77 c2                	ja     c0002bcc <cmp_lfn+0x1a>
c0002c0a:	83 ec 0c             	sub    esp,0xc
c0002c0d:	0f b7 c0             	movzx  eax,ax
c0002c10:	50                   	push   eax
c0002c11:	e8 8e 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c16:	89 c5                	mov    ebp,eax
c0002c18:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c23:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c2a:	e8 75 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2f:	83 c4 10             	add    esp,0x10
c0002c32:	39 c5                	cmp    ebp,eax
c0002c34:	75 96                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c36:	89 f5                	mov    ebp,esi
c0002c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c3c:	eb 04                	jmp    c0002c42 <cmp_lfn+0x90>
c0002c3e:	66 46                	inc    si
c0002c40:	75 8a                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c4b:	75 9c                	jne    c0002be9 <cmp_lfn+0x37>
c0002c4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c50:	74 16                	je     c0002c68 <cmp_lfn+0xb6>
c0002c52:	66 85 ed             	test   bp,bp
c0002c55:	74 11                	je     c0002c68 <cmp_lfn+0xb6>
c0002c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c60:	0f 94 c0             	sete   al
c0002c63:	0f b6 c0             	movzx  eax,al
c0002c66:	eb 05                	jmp    c0002c6d <cmp_lfn+0xbb>
c0002c68:	b8 01 00 00 00       	mov    eax,0x1
c0002c6d:	83 c4 1c             	add    esp,0x1c
c0002c70:	5b                   	pop    ebx
c0002c71:	5e                   	pop    esi
c0002c72:	5f                   	pop    edi
c0002c73:	5d                   	pop    ebp
c0002c74:	c3                   	ret    

c0002c75 <sync_fs>:
c0002c75:	56                   	push   esi
c0002c76:	53                   	push   ebx
c0002c77:	53                   	push   ebx
c0002c78:	89 c3                	mov    ebx,eax
c0002c7a:	e8 53 f5 ff ff       	call   c00021d2 <sync_window>
c0002c7f:	85 c0                	test   eax,eax
c0002c81:	0f 85 9a 00 00 00    	jne    c0002d21 <sync_fs+0xac>
c0002c87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c8a:	75 7b                	jne    c0002d07 <sync_fs+0x92>
c0002c8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c90:	75 75                	jne    c0002d07 <sync_fs+0x92>
c0002c92:	b9 00 02 00 00       	mov    ecx,0x200
c0002c97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c9a:	31 d2                	xor    edx,edx
c0002c9c:	89 f0                	mov    eax,esi
c0002c9e:	e8 ad f0 ff ff       	call   c0001d50 <mem_set>
c0002ca3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cae:	e8 81 f0 ff ff       	call   c0001d34 <st_word>
c0002cb3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb8:	89 f0                	mov    eax,esi
c0002cba:	e8 79 f0 ff ff       	call   c0001d38 <st_dword>
c0002cbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cca:	e8 69 f0 ff ff       	call   c0001d38 <st_dword>
c0002ccf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd8:	e8 5b f0 ff ff       	call   c0001d38 <st_dword>
c0002cdd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ce0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce6:	e8 4d f0 ff ff       	call   c0001d38 <st_dword>
c0002ceb:	6a 01                	push   0x1
c0002ced:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cf0:	40                   	inc    eax
c0002cf1:	50                   	push   eax
c0002cf2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf5:	56                   	push   esi
c0002cf6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cfa:	50                   	push   eax
c0002cfb:	e8 da ef ff ff       	call   c0001cda <disk_write>
c0002d00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d04:	83 c4 10             	add    esp,0x10
c0002d07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0b:	51                   	push   ecx
c0002d0c:	6a 00                	push   0x0
c0002d0e:	6a 00                	push   0x0
c0002d10:	50                   	push   eax
c0002d11:	e8 da ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d16:	83 c4 10             	add    esp,0x10
c0002d19:	85 c0                	test   eax,eax
c0002d1b:	0f 95 c0             	setne  al
c0002d1e:	0f b6 c0             	movzx  eax,al
c0002d21:	5a                   	pop    edx
c0002d22:	5b                   	pop    ebx
c0002d23:	5e                   	pop    esi
c0002d24:	c3                   	ret    

c0002d25 <create_partition>:
c0002d25:	55                   	push   ebp
c0002d26:	0f b6 c0             	movzx  eax,al
c0002d29:	57                   	push   edi
c0002d2a:	56                   	push   esi
c0002d2b:	53                   	push   ebx
c0002d2c:	83 ec 40             	sub    esp,0x40
c0002d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d3f:	50                   	push   eax
c0002d40:	6a 01                	push   0x1
c0002d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d46:	e8 a5 ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d4b:	83 c4 10             	add    esp,0x10
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	0f 85 69 01 00 00    	jne    c0002ebf <create_partition+0x19a>
c0002d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d63:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d68:	31 d2                	xor    edx,edx
c0002d6a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d73:	f7 f3                	div    ebx
c0002d75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d7a:	76 0c                	jbe    c0002d88 <create_partition+0x63>
c0002d7c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d80:	49                   	dec    ecx
c0002d81:	75 e5                	jne    c0002d68 <create_partition+0x43>
c0002d83:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d88:	b9 00 02 00 00       	mov    ecx,0x200
c0002d8d:	31 d2                	xor    edx,edx
c0002d8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d93:	e8 b8 ef ff ff       	call   c0001d50 <mem_set>
c0002d98:	b9 64 00 00 00       	mov    ecx,0x64
c0002d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da1:	31 d2                	xor    edx,edx
c0002da3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dab:	f7 f1                	div    ecx
c0002dad:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002db2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002db6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dba:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dc0:	85 c9                	test   ecx,ecx
c0002dc2:	75 34                	jne    c0002df8 <create_partition+0xd3>
c0002dc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dcd:	05 fe 01 00 00       	add    eax,0x1fe
c0002dd2:	e8 5d ef ff ff       	call   c0001d34 <st_word>
c0002dd7:	6a 01                	push   0x1
c0002dd9:	6a 00                	push   0x0
c0002ddb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002de3:	e8 f2 ee ff ff       	call   c0001cda <disk_write>
c0002de8:	83 c4 10             	add    esp,0x10
c0002deb:	85 c0                	test   eax,eax
c0002ded:	0f 95 c0             	setne  al
c0002df0:	0f b6 c0             	movzx  eax,al
c0002df3:	e9 cc 00 00 00       	jmp    c0002ec4 <create_partition+0x19f>
c0002df8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002dfc:	76 c6                	jbe    c0002dc4 <create_partition+0x9f>
c0002dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e06:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e09:	83 fe 64             	cmp    esi,0x64
c0002e0c:	77 0d                	ja     c0002e1b <create_partition+0xf6>
c0002e0e:	74 07                	je     c0002e17 <create_partition+0xf2>
c0002e10:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e15:	eb 04                	jmp    c0002e1b <create_partition+0xf6>
c0002e17:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e1b:	31 c0                	xor    eax,eax
c0002e1d:	89 f2                	mov    edx,esi
c0002e1f:	01 ca                	add    edx,ecx
c0002e21:	0f 92 c0             	setb   al
c0002e24:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e28:	77 04                	ja     c0002e2e <create_partition+0x109>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	74 08                	je     c0002e36 <create_partition+0x111>
c0002e2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e32:	29 ce                	sub    esi,ecx
c0002e34:	eb 04                	jmp    c0002e3a <create_partition+0x115>
c0002e36:	85 f6                	test   esi,esi
c0002e38:	74 8a                	je     c0002dc4 <create_partition+0x9f>
c0002e3a:	89 ca                	mov    edx,ecx
c0002e3c:	89 d8                	mov    eax,ebx
c0002e3e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e43:	e8 f0 ee ff ff       	call   c0001d38 <st_dword>
c0002e48:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e4b:	89 f2                	mov    edx,esi
c0002e4d:	83 c3 10             	add    ebx,0x10
c0002e50:	e8 e3 ee ff ff       	call   c0001d38 <st_dword>
c0002e55:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e5a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e5e:	31 d2                	xor    edx,edx
c0002e60:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e67:	89 c8                	mov    eax,ecx
c0002e69:	01 f1                	add    ecx,esi
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d5                	mov    ebp,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	45                   	inc    ebp
c0002e72:	f7 f7                	div    edi
c0002e74:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e77:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e7a:	89 c2                	mov    edx,eax
c0002e7c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e7f:	c1 ea 02             	shr    edx,0x2
c0002e82:	83 e2 c0             	and    edx,0xffffffc0
c0002e85:	09 ea                	or     edx,ebp
c0002e87:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e8c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e8f:	31 d2                	xor    edx,edx
c0002e91:	f7 f5                	div    ebp
c0002e93:	89 d6                	mov    esi,edx
c0002e95:	31 d2                	xor    edx,edx
c0002e97:	46                   	inc    esi
c0002e98:	f7 f7                	div    edi
c0002e9a:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002e9d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ea0:	89 c7                	mov    edi,eax
c0002ea2:	c1 ef 02             	shr    edi,0x2
c0002ea5:	83 e7 c0             	and    edi,0xffffffc0
c0002ea8:	09 fe                	or     esi,edi
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002eaf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002eb4:	0f 85 06 ff ff ff    	jne    c0002dc0 <create_partition+0x9b>
c0002eba:	e9 05 ff ff ff       	jmp    c0002dc4 <create_partition+0x9f>
c0002ebf:	b8 01 00 00 00       	mov    eax,0x1
c0002ec4:	83 c4 3c             	add    esp,0x3c
c0002ec7:	5b                   	pop    ebx
c0002ec8:	5e                   	pop    esi
c0002ec9:	5f                   	pop    edi
c0002eca:	5d                   	pop    ebp
c0002ecb:	c3                   	ret    

c0002ecc <get_fileinfo>:
c0002ecc:	55                   	push   ebp
c0002ecd:	57                   	push   edi
c0002ece:	56                   	push   esi
c0002ecf:	53                   	push   ebx
c0002ed0:	83 ec 1c             	sub    esp,0x1c
c0002ed3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ed9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002edd:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee1:	0f 84 c1 01 00 00    	je     c00030a8 <get_fileinfo+0x1dc>
c0002ee7:	89 d3                	mov    ebx,edx
c0002ee9:	89 c6                	mov    esi,eax
c0002eeb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eef:	74 6a                	je     c0002f5b <get_fileinfo+0x8f>
c0002ef1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ef9:	31 ed                	xor    ebp,ebp
c0002efb:	31 ff                	xor    edi,edi
c0002efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f08:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0c:	66 85 d2             	test   dx,dx
c0002f0f:	74 3e                	je     c0002f4f <get_fileinfo+0x83>
c0002f11:	66 85 ed             	test   bp,bp
c0002f14:	75 0c                	jne    c0002f22 <get_fileinfo+0x56>
c0002f16:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f20:	76 22                	jbe    c0002f44 <get_fileinfo+0x78>
c0002f22:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f27:	89 e8                	mov    eax,ebp
c0002f29:	29 f9                	sub    ecx,edi
c0002f2b:	c1 e0 10             	shl    eax,0x10
c0002f2e:	09 d0                	or     eax,edx
c0002f30:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f34:	e8 23 ef ff ff       	call   c0001e5c <put_utf>
c0002f39:	84 c0                	test   al,al
c0002f3b:	74 10                	je     c0002f4d <get_fileinfo+0x81>
c0002f3d:	0f b6 c0             	movzx  eax,al
c0002f40:	31 d2                	xor    edx,edx
c0002f42:	01 c7                	add    edi,eax
c0002f44:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f49:	89 d5                	mov    ebp,edx
c0002f4b:	eb b0                	jmp    c0002efd <get_fileinfo+0x31>
c0002f4d:	31 ff                	xor    edi,edi
c0002f4f:	66 85 ed             	test   bp,bp
c0002f52:	74 02                	je     c0002f56 <get_fileinfo+0x8a>
c0002f54:	31 ff                	xor    edi,edi
c0002f56:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5b:	31 ff                	xor    edi,edi
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	83 f9 0a             	cmp    ecx,0xa
c0002f62:	0f 87 ad 00 00 00    	ja     c0003015 <get_fileinfo+0x149>
c0002f68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f6e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f72:	66 83 fa 20          	cmp    dx,0x20
c0002f76:	0f 84 92 00 00 00    	je     c000300e <get_fileinfo+0x142>
c0002f7c:	66 83 fa 05          	cmp    dx,0x5
c0002f80:	75 05                	jne    c0002f87 <get_fileinfo+0xbb>
c0002f82:	ba e5 00 00 00       	mov    edx,0xe5
c0002f87:	83 ff 0b             	cmp    edi,0xb
c0002f8a:	77 0b                	ja     c0002f97 <get_fileinfo+0xcb>
c0002f8c:	83 fd 09             	cmp    ebp,0x9
c0002f8f:	75 06                	jne    c0002f97 <get_fileinfo+0xcb>
c0002f91:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f96:	47                   	inc    edi
c0002f97:	0f b7 c2             	movzx  eax,dx
c0002f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f9e:	e8 ed ed ff ff       	call   c0001d90 <dbc_1st>
c0002fa3:	85 c0                	test   eax,eax
c0002fa5:	74 2f                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fa7:	83 fd 08             	cmp    ebp,0x8
c0002faa:	74 2a                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fac:	83 fd 0b             	cmp    ebp,0xb
c0002faf:	74 25                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbc:	e8 d2 ed ff ff       	call   c0001d93 <dbc_2nd>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 11                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fc9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fce:	c1 e2 08             	shl    edx,0x8
c0002fd1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fd4:	09 c2                	or     edx,eax
c0002fd6:	0f b7 d2             	movzx  edx,dx
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	52                   	push   edx
c0002fe1:	e8 46 2b 00 00       	call   c0005b2c <ff_oem2uni>
c0002fe6:	83 c4 10             	add    esp,0x10
c0002fe9:	66 85 c0             	test   ax,ax
c0002fec:	75 04                	jne    c0002ff2 <get_fileinfo+0x126>
c0002fee:	31 ff                	xor    edi,edi
c0002ff0:	eb 23                	jmp    c0003015 <get_fileinfo+0x149>
c0002ff2:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ff7:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffb:	29 f9                	sub    ecx,edi
c0002ffd:	0f b7 c0             	movzx  eax,ax
c0003000:	e8 57 ee ff ff       	call   c0001e5c <put_utf>
c0003005:	84 c0                	test   al,al
c0003007:	74 e5                	je     c0002fee <get_fileinfo+0x122>
c0003009:	0f b6 c0             	movzx  eax,al
c000300c:	01 c7                	add    edi,eax
c000300e:	89 e9                	mov    ecx,ebp
c0003010:	e9 4a ff ff ff       	jmp    c0002f5f <get_fileinfo+0x93>
c0003015:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000301e:	75 54                	jne    c0003074 <get_fileinfo+0x1a8>
c0003020:	85 ff                	test   edi,edi
c0003022:	75 0b                	jne    c000302f <get_fileinfo+0x163>
c0003024:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003028:	ba 01 00 00 00       	mov    edx,0x1
c000302d:	eb 33                	jmp    c0003062 <get_fileinfo+0x196>
c000302f:	b1 08                	mov    cl,0x8
c0003031:	31 d2                	xor    edx,edx
c0003033:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003039:	84 c0                	test   al,al
c000303b:	74 25                	je     c0003062 <get_fileinfo+0x196>
c000303d:	66 83 f8 2e          	cmp    ax,0x2e
c0003041:	74 16                	je     c0003059 <get_fileinfo+0x18d>
c0003043:	8d 78 bf             	lea    edi,[eax-0x41]
c0003046:	66 83 ff 19          	cmp    di,0x19
c000304a:	77 0f                	ja     c000305b <get_fileinfo+0x18f>
c000304c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000304f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003052:	74 07                	je     c000305b <get_fileinfo+0x18f>
c0003054:	83 c0 20             	add    eax,0x20
c0003057:	eb 02                	jmp    c000305b <get_fileinfo+0x18f>
c0003059:	b1 10                	mov    cl,0x10
c000305b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000305f:	42                   	inc    edx
c0003060:	eb d1                	jmp    c0003033 <get_fileinfo+0x167>
c0003062:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003067:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000306e:	75 04                	jne    c0003074 <get_fileinfo+0x1a8>
c0003070:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003074:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003077:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000307d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003080:	83 c0 1c             	add    eax,0x1c
c0003083:	e8 94 ec ff ff       	call   c0001d1c <ld_dword>
c0003088:	89 03                	mov    DWORD PTR [ebx],eax
c000308a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308d:	83 c0 16             	add    eax,0x16
c0003090:	e8 7a ec ff ff       	call   c0001d0f <ld_word>
c0003095:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003099:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309c:	83 c0 18             	add    eax,0x18
c000309f:	e8 6b ec ff ff       	call   c0001d0f <ld_word>
c00030a4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030a8:	83 c4 1c             	add    esp,0x1c
c00030ab:	5b                   	pop    ebx
c00030ac:	5e                   	pop    esi
c00030ad:	5f                   	pop    edi
c00030ae:	5d                   	pop    ebp
c00030af:	c3                   	ret    

c00030b0 <ld_clust.isra.0>:
c00030b0:	56                   	push   esi
c00030b1:	89 c6                	mov    esi,eax
c00030b3:	53                   	push   ebx
c00030b4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b7:	89 d3                	mov    ebx,edx
c00030b9:	e8 51 ec ff ff       	call   c0001d0f <ld_word>
c00030be:	0f b7 c8             	movzx  ecx,ax
c00030c1:	89 f0                	mov    eax,esi
c00030c3:	3c 03                	cmp    al,0x3
c00030c5:	75 0d                	jne    c00030d4 <ld_clust.isra.0+0x24>
c00030c7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030ca:	e8 40 ec ff ff       	call   c0001d0f <ld_word>
c00030cf:	c1 e0 10             	shl    eax,0x10
c00030d2:	09 c1                	or     ecx,eax
c00030d4:	89 c8                	mov    eax,ecx
c00030d6:	5b                   	pop    ebx
c00030d7:	5e                   	pop    esi
c00030d8:	c3                   	ret    

c00030d9 <st_clust.isra.1>:
c00030d9:	56                   	push   esi
c00030da:	89 c6                	mov    esi,eax
c00030dc:	53                   	push   ebx
c00030dd:	89 d3                	mov    ebx,edx
c00030df:	0f b7 d1             	movzx  edx,cx
c00030e2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e5:	e8 4a ec ff ff       	call   c0001d34 <st_word>
c00030ea:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030ed:	75 0f                	jne    c00030fe <st_clust.isra.1+0x25>
c00030ef:	c1 e9 10             	shr    ecx,0x10
c00030f2:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	5b                   	pop    ebx
c00030f8:	5e                   	pop    esi
c00030f9:	e9 36 ec ff ff       	jmp    c0001d34 <st_word>
c00030fe:	5b                   	pop    ebx
c00030ff:	5e                   	pop    esi
c0003100:	c3                   	ret    

c0003101 <get_fat.isra.2>:
c0003101:	b9 01 00 00 00       	mov    ecx,0x1
c0003106:	83 fa 01             	cmp    edx,0x1
c0003109:	0f 86 f1 00 00 00    	jbe    c0003200 <get_fat.isra.2+0xff>
c000310f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003112:	0f 83 e8 00 00 00    	jae    c0003200 <get_fat.isra.2+0xff>
c0003118:	55                   	push   ebp
c0003119:	57                   	push   edi
c000311a:	89 c7                	mov    edi,eax
c000311c:	56                   	push   esi
c000311d:	89 d6                	mov    esi,edx
c000311f:	53                   	push   ebx
c0003120:	83 ec 0c             	sub    esp,0xc
c0003123:	8a 00                	mov    al,BYTE PTR [eax]
c0003125:	3c 02                	cmp    al,0x2
c0003127:	74 78                	je     c00031a1 <get_fat.isra.2+0xa0>
c0003129:	3c 03                	cmp    al,0x3
c000312b:	0f 84 97 00 00 00    	je     c00031c8 <get_fat.isra.2+0xc7>
c0003131:	fe c8                	dec    al
c0003133:	0f 85 bd 00 00 00    	jne    c00031f6 <get_fat.isra.2+0xf5>
c0003139:	89 d3                	mov    ebx,edx
c000313b:	89 f8                	mov    eax,edi
c000313d:	d1 eb                	shr    ebx,1
c000313f:	01 d3                	add    ebx,edx
c0003141:	89 da                	mov    edx,ebx
c0003143:	c1 ea 09             	shr    edx,0x9
c0003146:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003149:	e8 e7 f0 ff ff       	call   c0002235 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	74 08                	je     c000315a <get_fat.isra.2+0x59>
c0003152:	83 c9 ff             	or     ecx,0xffffffff
c0003155:	e9 9c 00 00 00       	jmp    c00031f6 <get_fat.isra.2+0xf5>
c000315a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000315d:	89 f8                	mov    eax,edi
c000315f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003165:	89 ea                	mov    edx,ebp
c0003167:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000316b:	c1 ea 09             	shr    edx,0x9
c000316e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003171:	e8 bf f0 ff ff       	call   c0002235 <move_window>
c0003176:	85 c0                	test   eax,eax
c0003178:	75 d8                	jne    c0003152 <get_fat.isra.2+0x51>
c000317a:	0f b6 c3             	movzx  eax,bl
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003188:	c1 e3 08             	shl    ebx,0x8
c000318b:	09 c3                	or     ebx,eax
c000318d:	89 d9                	mov    ecx,ebx
c000318f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003195:	83 e6 01             	and    esi,0x1
c0003198:	74 5c                	je     c00031f6 <get_fat.isra.2+0xf5>
c000319a:	89 d9                	mov    ecx,ebx
c000319c:	c1 e9 04             	shr    ecx,0x4
c000319f:	eb 55                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031a1:	c1 ea 08             	shr    edx,0x8
c00031a4:	89 f8                	mov    eax,edi
c00031a6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a9:	e8 87 f0 ff ff       	call   c0002235 <move_window>
c00031ae:	85 c0                	test   eax,eax
c00031b0:	75 a0                	jne    c0003152 <get_fat.isra.2+0x51>
c00031b2:	01 f6                	add    esi,esi
c00031b4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ba:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031be:	e8 4c eb ff ff       	call   c0001d0f <ld_word>
c00031c3:	0f b7 c8             	movzx  ecx,ax
c00031c6:	eb 2e                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031c8:	c1 ea 07             	shr    edx,0x7
c00031cb:	89 f8                	mov    eax,edi
c00031cd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d0:	e8 60 f0 ff ff       	call   c0002235 <move_window>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	0f 85 75 ff ff ff    	jne    c0003152 <get_fat.isra.2+0x51>
c00031dd:	c1 e6 02             	shl    esi,0x2
c00031e0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ea:	e8 2d eb ff ff       	call   c0001d1c <ld_dword>
c00031ef:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f4:	89 c1                	mov    ecx,eax
c00031f6:	83 c4 0c             	add    esp,0xc
c00031f9:	89 c8                	mov    eax,ecx
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    
c0003200:	89 c8                	mov    eax,ecx
c0003202:	c3                   	ret    

c0003203 <dir_sdi>:
c0003203:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003209:	0f 87 b6 00 00 00    	ja     c00032c5 <dir_sdi+0xc2>
c000320f:	55                   	push   ebp
c0003210:	57                   	push   edi
c0003211:	56                   	push   esi
c0003212:	53                   	push   ebx
c0003213:	89 d3                	mov    ebx,edx
c0003215:	83 ec 1c             	sub    esp,0x1c
c0003218:	f6 c2 1f             	test   dl,0x1f
c000321b:	74 0a                	je     c0003227 <dir_sdi+0x24>
c000321d:	b8 02 00 00 00       	mov    eax,0x2
c0003222:	e9 96 00 00 00       	jmp    c00032bd <dir_sdi+0xba>
c0003227:	89 c6                	mov    esi,eax
c0003229:	8b 38                	mov    edi,DWORD PTR [eax]
c000322b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000322e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003231:	85 c9                	test   ecx,ecx
c0003233:	75 23                	jne    c0003258 <dir_sdi+0x55>
c0003235:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003238:	76 07                	jbe    c0003241 <dir_sdi+0x3e>
c000323a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000323d:	85 c0                	test   eax,eax
c000323f:	75 15                	jne    c0003256 <dir_sdi+0x53>
c0003241:	89 da                	mov    edx,ebx
c0003243:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003247:	c1 ea 05             	shr    edx,0x5
c000324a:	39 c2                	cmp    edx,eax
c000324c:	73 cf                	jae    c000321d <dir_sdi+0x1a>
c000324e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003251:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003254:	eb 3d                	jmp    c0003293 <dir_sdi+0x90>
c0003256:	89 c1                	mov    ecx,eax
c0003258:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325c:	c1 e5 09             	shl    ebp,0x9
c000325f:	89 ca                	mov    edx,ecx
c0003261:	39 eb                	cmp    ebx,ebp
c0003263:	72 1c                	jb     c0003281 <dir_sdi+0x7e>
c0003265:	8b 06                	mov    eax,DWORD PTR [esi]
c0003267:	e8 95 fe ff ff       	call   c0003101 <get_fat.isra.2>
c000326c:	89 c1                	mov    ecx,eax
c000326e:	83 f8 ff             	cmp    eax,0xffffffff
c0003271:	74 45                	je     c00032b8 <dir_sdi+0xb5>
c0003273:	83 f8 01             	cmp    eax,0x1
c0003276:	76 a5                	jbe    c000321d <dir_sdi+0x1a>
c0003278:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327b:	76 a0                	jbe    c000321d <dir_sdi+0x1a>
c000327d:	29 eb                	sub    ebx,ebp
c000327f:	eb de                	jmp    c000325f <dir_sdi+0x5c>
c0003281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003285:	89 f8                	mov    eax,edi
c0003287:	e8 c9 ec ff ff       	call   c0001f55 <clst2sect>
c000328c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003290:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003293:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003296:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003299:	85 d2                	test   edx,edx
c000329b:	74 80                	je     c000321d <dir_sdi+0x1a>
c000329d:	89 d8                	mov    eax,ebx
c000329f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a5:	c1 e8 09             	shr    eax,0x9
c00032a8:	01 d0                	add    eax,edx
c00032aa:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032ad:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b4:	31 c0                	xor    eax,eax
c00032b6:	eb 05                	jmp    c00032bd <dir_sdi+0xba>
c00032b8:	b8 01 00 00 00       	mov    eax,0x1
c00032bd:	83 c4 1c             	add    esp,0x1c
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    
c00032c5:	b8 02 00 00 00       	mov    eax,0x2
c00032ca:	c3                   	ret    

c00032cb <create_chain>:
c00032cb:	55                   	push   ebp
c00032cc:	89 c5                	mov    ebp,eax
c00032ce:	57                   	push   edi
c00032cf:	89 d7                	mov    edi,edx
c00032d1:	56                   	push   esi
c00032d2:	53                   	push   ebx
c00032d3:	83 ec 1c             	sub    esp,0x1c
c00032d6:	85 d2                	test   edx,edx
c00032d8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032da:	75 0e                	jne    c00032ea <create_chain+0x1f>
c00032dc:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032df:	85 c9                	test   ecx,ecx
c00032e1:	74 34                	je     c0003317 <create_chain+0x4c>
c00032e3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032e6:	77 34                	ja     c000331c <create_chain+0x51>
c00032e8:	eb 2d                	jmp    c0003317 <create_chain+0x4c>
c00032ea:	89 f0                	mov    eax,esi
c00032ec:	e8 10 fe ff ff       	call   c0003101 <get_fat.isra.2>
c00032f1:	89 c3                	mov    ebx,eax
c00032f3:	83 f8 01             	cmp    eax,0x1
c00032f6:	77 0a                	ja     c0003302 <create_chain+0x37>
c00032f8:	bb 01 00 00 00       	mov    ebx,0x1
c00032fd:	e9 f9 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003302:	83 f8 ff             	cmp    eax,0xffffffff
c0003305:	0f 84 ed 00 00 00    	je     c00033f8 <create_chain+0x12d>
c000330b:	89 f9                	mov    ecx,edi
c000330d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003310:	76 0a                	jbe    c000331c <create_chain+0x51>
c0003312:	e9 e4 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003317:	b9 01 00 00 00       	mov    ecx,0x1
c000331c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003320:	75 07                	jne    c0003329 <create_chain+0x5e>
c0003322:	31 db                	xor    ebx,ebx
c0003324:	e9 d2 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003329:	39 f9                	cmp    ecx,edi
c000332b:	75 46                	jne    c0003373 <create_chain+0xa8>
c000332d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003330:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003333:	77 05                	ja     c000333a <create_chain+0x6f>
c0003335:	bb 02 00 00 00       	mov    ebx,0x2
c000333a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000333e:	89 da                	mov    edx,ebx
c0003340:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003343:	e8 b9 fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003348:	83 f8 01             	cmp    eax,0x1
c000334b:	74 ab                	je     c00032f8 <create_chain+0x2d>
c000334d:	83 f8 ff             	cmp    eax,0xffffffff
c0003350:	0f 84 a2 00 00 00    	je     c00033f8 <create_chain+0x12d>
c0003356:	85 c0                	test   eax,eax
c0003358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335c:	74 11                	je     c000336f <create_chain+0xa4>
c000335e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003361:	83 f8 01             	cmp    eax,0x1
c0003364:	76 0d                	jbe    c0003373 <create_chain+0xa8>
c0003366:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003369:	73 08                	jae    c0003373 <create_chain+0xa8>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	eb 04                	jmp    c0003373 <create_chain+0xa8>
c000336f:	85 db                	test   ebx,ebx
c0003371:	75 3d                	jne    c00033b0 <create_chain+0xe5>
c0003373:	89 cb                	mov    ebx,ecx
c0003375:	43                   	inc    ebx
c0003376:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003379:	77 0a                	ja     c0003385 <create_chain+0xba>
c000337b:	83 f9 01             	cmp    ecx,0x1
c000337e:	76 a2                	jbe    c0003322 <create_chain+0x57>
c0003380:	bb 02 00 00 00       	mov    ebx,0x2
c0003385:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003389:	89 da                	mov    edx,ebx
c000338b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338e:	e8 6e fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003393:	85 c0                	test   eax,eax
c0003395:	74 19                	je     c00033b0 <create_chain+0xe5>
c0003397:	83 f8 01             	cmp    eax,0x1
c000339a:	0f 84 58 ff ff ff    	je     c00032f8 <create_chain+0x2d>
c00033a0:	40                   	inc    eax
c00033a1:	74 55                	je     c00033f8 <create_chain+0x12d>
c00033a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a7:	39 cb                	cmp    ebx,ecx
c00033a9:	75 ca                	jne    c0003375 <create_chain+0xaa>
c00033ab:	e9 72 ff ff ff       	jmp    c0003322 <create_chain+0x57>
c00033b0:	83 c9 ff             	or     ecx,0xffffffff
c00033b3:	89 da                	mov    edx,ebx
c00033b5:	89 f0                	mov    eax,esi
c00033b7:	e8 cf f2 ff ff       	call   c000268b <put_fat>
c00033bc:	85 c0                	test   eax,eax
c00033be:	75 31                	jne    c00033f1 <create_chain+0x126>
c00033c0:	85 ff                	test   edi,edi
c00033c2:	75 16                	jne    c00033da <create_chain+0x10f>
c00033c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033ca:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033cd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033d0:	39 d0                	cmp    eax,edx
c00033d2:	77 17                	ja     c00033eb <create_chain+0x120>
c00033d4:	48                   	dec    eax
c00033d5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033d8:	eb 11                	jmp    c00033eb <create_chain+0x120>
c00033da:	89 d9                	mov    ecx,ebx
c00033dc:	89 fa                	mov    edx,edi
c00033de:	89 f0                	mov    eax,esi
c00033e0:	e8 a6 f2 ff ff       	call   c000268b <put_fat>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 db                	je     c00033c4 <create_chain+0xf9>
c00033e9:	eb 06                	jmp    c00033f1 <create_chain+0x126>
c00033eb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ef:	eb 0a                	jmp    c00033fb <create_chain+0x130>
c00033f1:	48                   	dec    eax
c00033f2:	0f 85 00 ff ff ff    	jne    c00032f8 <create_chain+0x2d>
c00033f8:	83 cb ff             	or     ebx,0xffffffff
c00033fb:	83 c4 1c             	add    esp,0x1c
c00033fe:	89 d8                	mov    eax,ebx
c0003400:	5b                   	pop    ebx
c0003401:	5e                   	pop    esi
c0003402:	5f                   	pop    edi
c0003403:	5d                   	pop    ebp
c0003404:	c3                   	ret    

c0003405 <remove_chain>:
c0003405:	55                   	push   ebp
c0003406:	57                   	push   edi
c0003407:	56                   	push   esi
c0003408:	89 d6                	mov    esi,edx
c000340a:	53                   	push   ebx
c000340b:	83 ec 0c             	sub    esp,0xc
c000340e:	83 fa 01             	cmp    edx,0x1
c0003411:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003413:	76 65                	jbe    c000347a <remove_chain+0x75>
c0003415:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003418:	76 60                	jbe    c000347a <remove_chain+0x75>
c000341a:	89 c5                	mov    ebp,eax
c000341c:	89 ca                	mov    edx,ecx
c000341e:	85 c9                	test   ecx,ecx
c0003420:	74 0e                	je     c0003430 <remove_chain+0x2b>
c0003422:	83 c9 ff             	or     ecx,0xffffffff
c0003425:	89 d8                	mov    eax,ebx
c0003427:	e8 5f f2 ff ff       	call   c000268b <put_fat>
c000342c:	85 c0                	test   eax,eax
c000342e:	75 56                	jne    c0003486 <remove_chain+0x81>
c0003430:	89 f2                	mov    edx,esi
c0003432:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003435:	e8 c7 fc ff ff       	call   c0003101 <get_fat.isra.2>
c000343a:	89 c7                	mov    edi,eax
c000343c:	85 c0                	test   eax,eax
c000343e:	75 04                	jne    c0003444 <remove_chain+0x3f>
c0003440:	31 c0                	xor    eax,eax
c0003442:	eb 42                	jmp    c0003486 <remove_chain+0x81>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	74 31                	je     c000347a <remove_chain+0x75>
c0003449:	83 f8 ff             	cmp    eax,0xffffffff
c000344c:	74 33                	je     c0003481 <remove_chain+0x7c>
c000344e:	31 c9                	xor    ecx,ecx
c0003450:	89 f2                	mov    edx,esi
c0003452:	89 d8                	mov    eax,ebx
c0003454:	e8 32 f2 ff ff       	call   c000268b <put_fat>
c0003459:	85 c0                	test   eax,eax
c000345b:	75 29                	jne    c0003486 <remove_chain+0x81>
c000345d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003460:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003463:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003466:	39 c8                	cmp    eax,ecx
c0003468:	73 08                	jae    c0003472 <remove_chain+0x6d>
c000346a:	40                   	inc    eax
c000346b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003472:	89 fe                	mov    esi,edi
c0003474:	39 fa                	cmp    edx,edi
c0003476:	77 b8                	ja     c0003430 <remove_chain+0x2b>
c0003478:	eb c6                	jmp    c0003440 <remove_chain+0x3b>
c000347a:	b8 02 00 00 00       	mov    eax,0x2
c000347f:	eb 05                	jmp    c0003486 <remove_chain+0x81>
c0003481:	b8 01 00 00 00       	mov    eax,0x1
c0003486:	83 c4 0c             	add    esp,0xc
c0003489:	5b                   	pop    ebx
c000348a:	5e                   	pop    esi
c000348b:	5f                   	pop    edi
c000348c:	5d                   	pop    ebp
c000348d:	c3                   	ret    

c000348e <dir_next>:
c000348e:	55                   	push   ebp
c000348f:	57                   	push   edi
c0003490:	56                   	push   esi
c0003491:	53                   	push   ebx
c0003492:	83 ec 1c             	sub    esp,0x1c
c0003495:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003498:	8b 28                	mov    ebp,DWORD PTR [eax]
c000349a:	83 c7 20             	add    edi,0x20
c000349d:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a3:	76 07                	jbe    c00034ac <dir_next+0x1e>
c00034a5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ac:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034af:	b9 04 00 00 00       	mov    ecx,0x4
c00034b4:	85 f6                	test   esi,esi
c00034b6:	0f 84 cd 00 00 00    	je     c0003589 <dir_next+0xfb>
c00034bc:	89 c3                	mov    ebx,eax
c00034be:	89 d1                	mov    ecx,edx
c00034c0:	89 f8                	mov    eax,edi
c00034c2:	25 ff 01 00 00       	and    eax,0x1ff
c00034c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034cb:	0f 85 a8 00 00 00    	jne    c0003579 <dir_next+0xeb>
c00034d1:	46                   	inc    esi
c00034d2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d8:	85 d2                	test   edx,edx
c00034da:	75 22                	jne    c00034fe <dir_next+0x70>
c00034dc:	89 fa                	mov    edx,edi
c00034de:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e2:	c1 ea 05             	shr    edx,0x5
c00034e5:	39 c2                	cmp    edx,eax
c00034e7:	0f 82 8c 00 00 00    	jb     c0003579 <dir_next+0xeb>
c00034ed:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f4:	b9 04 00 00 00       	mov    ecx,0x4
c00034f9:	e9 8b 00 00 00       	jmp    c0003589 <dir_next+0xfb>
c00034fe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003502:	89 fe                	mov    esi,edi
c0003504:	48                   	dec    eax
c0003505:	c1 ee 09             	shr    esi,0x9
c0003508:	85 f0                	test   eax,esi
c000350a:	75 6d                	jne    c0003579 <dir_next+0xeb>
c000350c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003510:	89 e8                	mov    eax,ebp
c0003512:	e8 ea fb ff ff       	call   c0003101 <get_fat.isra.2>
c0003517:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351b:	89 c6                	mov    esi,eax
c000351d:	83 f8 01             	cmp    eax,0x1
c0003520:	77 07                	ja     c0003529 <dir_next+0x9b>
c0003522:	b9 02 00 00 00       	mov    ecx,0x2
c0003527:	eb 60                	jmp    c0003589 <dir_next+0xfb>
c0003529:	83 f8 ff             	cmp    eax,0xffffffff
c000352c:	75 07                	jne    c0003535 <dir_next+0xa7>
c000352e:	b9 01 00 00 00       	mov    ecx,0x1
c0003533:	eb 54                	jmp    c0003589 <dir_next+0xfb>
c0003535:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003538:	77 30                	ja     c000356a <dir_next+0xdc>
c000353a:	85 c9                	test   ecx,ecx
c000353c:	74 af                	je     c00034ed <dir_next+0x5f>
c000353e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003541:	89 d8                	mov    eax,ebx
c0003543:	e8 83 fd ff ff       	call   c00032cb <create_chain>
c0003548:	b9 07 00 00 00       	mov    ecx,0x7
c000354d:	89 c6                	mov    esi,eax
c000354f:	85 c0                	test   eax,eax
c0003551:	74 36                	je     c0003589 <dir_next+0xfb>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	74 ca                	je     c0003522 <dir_next+0x94>
c0003558:	83 f8 ff             	cmp    eax,0xffffffff
c000355b:	74 d1                	je     c000352e <dir_next+0xa0>
c000355d:	89 c2                	mov    edx,eax
c000355f:	89 e8                	mov    eax,ebp
c0003561:	e8 75 f2 ff ff       	call   c00027db <dir_clear>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 c4                	jne    c000352e <dir_next+0xa0>
c000356a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356d:	89 f2                	mov    edx,esi
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 df e9 ff ff       	call   c0001f55 <clst2sect>
c0003576:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003580:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003584:	31 c9                	xor    ecx,ecx
c0003586:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003589:	83 c4 1c             	add    esp,0x1c
c000358c:	89 c8                	mov    eax,ecx
c000358e:	5b                   	pop    ebx
c000358f:	5e                   	pop    esi
c0003590:	5f                   	pop    edi
c0003591:	5d                   	pop    ebp
c0003592:	c3                   	ret    

c0003593 <dir_alloc>:
c0003593:	55                   	push   ebp
c0003594:	89 c5                	mov    ebp,eax
c0003596:	57                   	push   edi
c0003597:	89 d7                	mov    edi,edx
c0003599:	56                   	push   esi
c000359a:	31 d2                	xor    edx,edx
c000359c:	53                   	push   ebx
c000359d:	83 ec 0c             	sub    esp,0xc
c00035a0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a2:	e8 5c fc ff ff       	call   c0003203 <dir_sdi>
c00035a7:	85 c0                	test   eax,eax
c00035a9:	75 37                	jne    c00035e2 <dir_alloc+0x4f>
c00035ab:	31 db                	xor    ebx,ebx
c00035ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035b0:	89 f0                	mov    eax,esi
c00035b2:	e8 7e ec ff ff       	call   c0002235 <move_window>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 27                	jne    c00035e2 <dir_alloc+0x4f>
c00035bb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035be:	8a 12                	mov    dl,BYTE PTR [edx]
c00035c0:	84 d2                	test   dl,dl
c00035c2:	74 05                	je     c00035c9 <dir_alloc+0x36>
c00035c4:	80 fa e5             	cmp    dl,0xe5
c00035c7:	75 07                	jne    c00035d0 <dir_alloc+0x3d>
c00035c9:	43                   	inc    ebx
c00035ca:	39 fb                	cmp    ebx,edi
c00035cc:	75 04                	jne    c00035d2 <dir_alloc+0x3f>
c00035ce:	eb 1c                	jmp    c00035ec <dir_alloc+0x59>
c00035d0:	31 db                	xor    ebx,ebx
c00035d2:	ba 01 00 00 00       	mov    edx,0x1
c00035d7:	89 e8                	mov    eax,ebp
c00035d9:	e8 b0 fe ff ff       	call   c000348e <dir_next>
c00035de:	85 c0                	test   eax,eax
c00035e0:	74 cb                	je     c00035ad <dir_alloc+0x1a>
c00035e2:	83 f8 04             	cmp    eax,0x4
c00035e5:	75 05                	jne    c00035ec <dir_alloc+0x59>
c00035e7:	b8 07 00 00 00       	mov    eax,0x7
c00035ec:	83 c4 0c             	add    esp,0xc
c00035ef:	5b                   	pop    ebx
c00035f0:	5e                   	pop    esi
c00035f1:	5f                   	pop    edi
c00035f2:	5d                   	pop    ebp
c00035f3:	c3                   	ret    

c00035f4 <dir_read>:
c00035f4:	55                   	push   ebp
c00035f5:	57                   	push   edi
c00035f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fb:	56                   	push   esi
c00035fc:	be 04 00 00 00       	mov    esi,0x4
c0003601:	53                   	push   ebx
c0003602:	89 c3                	mov    ebx,eax
c0003604:	83 ec 1c             	sub    esp,0x1c
c0003607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000360d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003612:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003615:	85 d2                	test   edx,edx
c0003617:	0f 84 d8 00 00 00    	je     c00036f5 <dir_read+0x101>
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 11 ec ff ff       	call   c0002235 <move_window>
c0003624:	89 c6                	mov    esi,eax
c0003626:	85 c0                	test   eax,eax
c0003628:	0f 85 d2 00 00 00    	jne    c0003700 <dir_read+0x10c>
c000362e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003631:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003633:	84 c9                	test   cl,cl
c0003635:	0f 84 c0 00 00 00    	je     c00036fb <dir_read+0x107>
c000363b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363e:	83 e0 3f             	and    eax,0x3f
c0003641:	80 f9 2e             	cmp    cl,0x2e
c0003644:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003648:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364b:	0f 84 8a 00 00 00    	je     c00036db <dir_read+0xe7>
c0003651:	80 f9 e5             	cmp    cl,0xe5
c0003654:	0f 84 81 00 00 00    	je     c00036db <dir_read+0xe7>
c000365a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365e:	83 e0 1f             	and    eax,0x1f
c0003661:	83 f8 08             	cmp    eax,0x8
c0003664:	0f 94 c0             	sete   al
c0003667:	0f b6 c0             	movzx  eax,al
c000366a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366e:	75 6b                	jne    c00036db <dir_read+0xe7>
c0003670:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003675:	75 44                	jne    c00036bb <dir_read+0xc7>
c0003677:	f6 c1 40             	test   cl,0x40
c000367a:	74 12                	je     c000368e <dir_read+0x9a>
c000367c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367f:	83 e1 bf             	and    ecx,0xffffffbf
c0003682:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003686:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003689:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368c:	eb 06                	jmp    c0003694 <dir_read+0xa0>
c000368e:	89 f8                	mov    eax,edi
c0003690:	38 c8                	cmp    al,cl
c0003692:	75 47                	jne    c00036db <dir_read+0xe7>
c0003694:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003698:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369d:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036a0:	75 3e                	jne    c00036e0 <dir_read+0xec>
c00036a2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a9:	e8 c4 e8 ff ff       	call   c0001f72 <pick_lfn>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 2e                	je     c00036e0 <dir_read+0xec>
c00036b2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b9:	eb 25                	jmp    c00036e0 <dir_read+0xec>
c00036bb:	89 f8                	mov    eax,edi
c00036bd:	84 c0                	test   al,al
c00036bf:	75 11                	jne    c00036d2 <dir_read+0xde>
c00036c1:	89 d0                	mov    eax,edx
c00036c3:	e8 64 ea ff ff       	call   c000212c <sum_sfn>
c00036c8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cc:	75 04                	jne    c00036d2 <dir_read+0xde>
c00036ce:	31 f6                	xor    esi,esi
c00036d0:	eb 35                	jmp    c0003707 <dir_read+0x113>
c00036d2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d9:	eb 2c                	jmp    c0003707 <dir_read+0x113>
c00036db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036e0:	31 d2                	xor    edx,edx
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 a5 fd ff ff       	call   c000348e <dir_next>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	85 c0                	test   eax,eax
c00036ed:	0f 84 1f ff ff ff    	je     c0003612 <dir_read+0x1e>
c00036f3:	eb 0b                	jmp    c0003700 <dir_read+0x10c>
c00036f5:	85 f6                	test   esi,esi
c00036f7:	74 d5                	je     c00036ce <dir_read+0xda>
c00036f9:	eb 05                	jmp    c0003700 <dir_read+0x10c>
c00036fb:	be 04 00 00 00       	mov    esi,0x4
c0003700:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003707:	83 c4 1c             	add    esp,0x1c
c000370a:	89 f0                	mov    eax,esi
c000370c:	5b                   	pop    ebx
c000370d:	5e                   	pop    esi
c000370e:	5f                   	pop    edi
c000370f:	5d                   	pop    ebp
c0003710:	c3                   	ret    

c0003711 <dir_remove>:
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	53                   	push   ebx
c0003714:	89 c3                	mov    ebx,eax
c0003716:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003719:	8b 30                	mov    esi,DWORD PTR [eax]
c000371b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371e:	83 fa ff             	cmp    edx,0xffffffff
c0003721:	74 09                	je     c000372c <dir_remove+0x1b>
c0003723:	e8 db fa ff ff       	call   c0003203 <dir_sdi>
c0003728:	85 c0                	test   eax,eax
c000372a:	75 34                	jne    c0003760 <dir_remove+0x4f>
c000372c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372f:	89 f0                	mov    eax,esi
c0003731:	e8 ff ea ff ff       	call   c0002235 <move_window>
c0003736:	85 c0                	test   eax,eax
c0003738:	75 1c                	jne    c0003756 <dir_remove+0x45>
c000373a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003740:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003744:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003747:	73 17                	jae    c0003760 <dir_remove+0x4f>
c0003749:	31 d2                	xor    edx,edx
c000374b:	89 d8                	mov    eax,ebx
c000374d:	e8 3c fd ff ff       	call   c000348e <dir_next>
c0003752:	85 c0                	test   eax,eax
c0003754:	74 d6                	je     c000372c <dir_remove+0x1b>
c0003756:	83 f8 04             	cmp    eax,0x4
c0003759:	75 05                	jne    c0003760 <dir_remove+0x4f>
c000375b:	b8 02 00 00 00       	mov    eax,0x2
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	5f                   	pop    edi
c0003763:	c3                   	ret    

c0003764 <dir_find>:
c0003764:	55                   	push   ebp
c0003765:	31 d2                	xor    edx,edx
c0003767:	57                   	push   edi
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 1c             	sub    esp,0x1c
c000376f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003775:	89 d8                	mov    eax,ebx
c0003777:	e8 87 fa ff ff       	call   c0003203 <dir_sdi>
c000377c:	89 c6                	mov    esi,eax
c000377e:	85 c0                	test   eax,eax
c0003780:	0f 85 02 01 00 00    	jne    c0003888 <dir_find+0x124>
c0003786:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003792:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003797:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000379a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379e:	e8 92 ea ff ff       	call   c0002235 <move_window>
c00037a3:	89 c6                	mov    esi,eax
c00037a5:	85 c0                	test   eax,eax
c00037a7:	0f 85 db 00 00 00    	jne    c0003888 <dir_find+0x124>
c00037ad:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037b0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 c8 00 00 00    	je     c0003883 <dir_find+0x11f>
c00037bb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037be:	88 d0                	mov    al,dl
c00037c0:	83 e0 3f             	and    eax,0x3f
c00037c3:	80 f9 e5             	cmp    cl,0xe5
c00037c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c9:	0f 84 93 00 00 00    	je     c0003862 <dir_find+0xfe>
c00037cf:	80 e2 08             	and    dl,0x8
c00037d2:	74 0a                	je     c00037de <dir_find+0x7a>
c00037d4:	3c 0f                	cmp    al,0xf
c00037d6:	0f 85 86 00 00 00    	jne    c0003862 <dir_find+0xfe>
c00037dc:	eb 04                	jmp    c00037e2 <dir_find+0x7e>
c00037de:	3c 0f                	cmp    al,0xf
c00037e0:	75 54                	jne    c0003836 <dir_find+0xd2>
c00037e2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e6:	0f 85 82 00 00 00    	jne    c000386e <dir_find+0x10a>
c00037ec:	f6 c1 40             	test   cl,0x40
c00037ef:	74 12                	je     c0003803 <dir_find+0x9f>
c00037f1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f4:	83 e1 bf             	and    ecx,0xffffffbf
c00037f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003801:	eb 06                	jmp    c0003809 <dir_find+0xa5>
c0003803:	89 f8                	mov    eax,edi
c0003805:	38 c8                	cmp    al,cl
c0003807:	75 60                	jne    c0003869 <dir_find+0x105>
c0003809:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003812:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003815:	75 57                	jne    c000386e <dir_find+0x10a>
c0003817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000381f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003822:	89 ea                	mov    edx,ebp
c0003824:	e8 89 f3 ff ff       	call   c0002bb2 <cmp_lfn>
c0003829:	85 c0                	test   eax,eax
c000382b:	74 41                	je     c000386e <dir_find+0x10a>
c000382d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003831:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003834:	eb 38                	jmp    c000386e <dir_find+0x10a>
c0003836:	89 f8                	mov    eax,edi
c0003838:	84 c0                	test   al,al
c000383a:	75 0d                	jne    c0003849 <dir_find+0xe5>
c000383c:	89 e8                	mov    eax,ebp
c000383e:	e8 e9 e8 ff ff       	call   c000212c <sum_sfn>
c0003843:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003847:	74 3f                	je     c0003888 <dir_find+0x124>
c0003849:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384d:	75 13                	jne    c0003862 <dir_find+0xfe>
c000384f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003852:	b9 0b 00 00 00       	mov    ecx,0xb
c0003857:	89 e8                	mov    eax,ebp
c0003859:	e8 fd e4 ff ff       	call   c0001d5b <mem_cmp>
c000385e:	85 c0                	test   eax,eax
c0003860:	74 26                	je     c0003888 <dir_find+0x124>
c0003862:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003869:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386e:	31 d2                	xor    edx,edx
c0003870:	89 d8                	mov    eax,ebx
c0003872:	e8 17 fc ff ff       	call   c000348e <dir_next>
c0003877:	89 c6                	mov    esi,eax
c0003879:	85 c0                	test   eax,eax
c000387b:	0f 84 16 ff ff ff    	je     c0003797 <dir_find+0x33>
c0003881:	eb 05                	jmp    c0003888 <dir_find+0x124>
c0003883:	be 04 00 00 00       	mov    esi,0x4
c0003888:	83 c4 1c             	add    esp,0x1c
c000388b:	89 f0                	mov    eax,esi
c000388d:	5b                   	pop    ebx
c000388e:	5e                   	pop    esi
c000388f:	5f                   	pop    edi
c0003890:	5d                   	pop    ebp
c0003891:	c3                   	ret    

c0003892 <follow_path>:
c0003892:	56                   	push   esi
c0003893:	53                   	push   ebx
c0003894:	89 c3                	mov    ebx,eax
c0003896:	83 ec 14             	sub    esp,0x14
c0003899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389d:	8b 30                	mov    esi,DWORD PTR [eax]
c000389f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a5:	80 fa 5c             	cmp    dl,0x5c
c00038a8:	75 07                	jne    c00038b1 <follow_path+0x1f>
c00038aa:	40                   	inc    eax
c00038ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038af:	eb ee                	jmp    c000389f <follow_path+0xd>
c00038b1:	80 fa 2f             	cmp    dl,0x2f
c00038b4:	74 f4                	je     c00038aa <follow_path+0x18>
c00038b6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038c0:	77 3e                	ja     c0003900 <follow_path+0x6e>
c00038c2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c6:	31 d2                	xor    edx,edx
c00038c8:	89 d8                	mov    eax,ebx
c00038ca:	e8 34 f9 ff ff       	call   c0003203 <dir_sdi>
c00038cf:	eb 4f                	jmp    c0003920 <follow_path+0x8e>
c00038d1:	89 d8                	mov    eax,ebx
c00038d3:	e8 8c fe ff ff       	call   c0003764 <dir_find>
c00038d8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038db:	85 c0                	test   eax,eax
c00038dd:	75 32                	jne    c0003911 <follow_path+0x7f>
c00038df:	80 e2 04             	and    dl,0x4
c00038e2:	75 3c                	jne    c0003920 <follow_path+0x8e>
c00038e4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e8:	74 31                	je     c000391b <follow_path+0x89>
c00038ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ed:	25 ff 01 00 00       	and    eax,0x1ff
c00038f2:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f6:	8a 06                	mov    al,BYTE PTR [esi]
c00038f8:	e8 b3 f7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c00038fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003900:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003904:	89 d8                	mov    eax,ebx
c0003906:	e8 cb ef ff ff       	call   c00028d6 <create_name>
c000390b:	85 c0                	test   eax,eax
c000390d:	74 c2                	je     c00038d1 <follow_path+0x3f>
c000390f:	eb 0f                	jmp    c0003920 <follow_path+0x8e>
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	75 0a                	jne    c0003920 <follow_path+0x8e>
c0003916:	80 e2 04             	and    dl,0x4
c0003919:	75 05                	jne    c0003920 <follow_path+0x8e>
c000391b:	b8 05 00 00 00       	mov    eax,0x5
c0003920:	83 c4 14             	add    esp,0x14
c0003923:	5b                   	pop    ebx
c0003924:	5e                   	pop    esi
c0003925:	c3                   	ret    

c0003926 <dir_register>:
c0003926:	55                   	push   ebp
c0003927:	57                   	push   edi
c0003928:	56                   	push   esi
c0003929:	be 06 00 00 00       	mov    esi,0x6
c000392e:	53                   	push   ebx
c000392f:	83 ec 2c             	sub    esp,0x2c
c0003932:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003936:	0f 85 65 01 00 00    	jne    c0003aa1 <dir_register+0x17b>
c000393c:	8b 38                	mov    edi,DWORD PTR [eax]
c000393e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003946:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003952:	74 06                	je     c000395a <dir_register+0x34>
c0003954:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003958:	eb ef                	jmp    c0003949 <dir_register+0x23>
c000395a:	89 c3                	mov    ebx,eax
c000395c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003961:	8d 40 20             	lea    eax,[eax+0x20]
c0003964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003968:	89 c2                	mov    edx,eax
c000396a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396e:	e8 c8 e3 ff ff       	call   c0001d3b <mem_cpy>
c0003973:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003978:	74 48                	je     c00039c2 <dir_register+0x9c>
c000397a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397e:	bd 01 00 00 00       	mov    ebp,0x1
c0003983:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003986:	55                   	push   ebp
c0003987:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398f:	e8 dc e6 ff ff       	call   c0002070 <gen_numname>
c0003994:	58                   	pop    eax
c0003995:	89 d8                	mov    eax,ebx
c0003997:	e8 c8 fd ff ff       	call   c0003764 <dir_find>
c000399c:	89 c6                	mov    esi,eax
c000399e:	85 c0                	test   eax,eax
c00039a0:	75 10                	jne    c00039b2 <dir_register+0x8c>
c00039a2:	45                   	inc    ebp
c00039a3:	83 fd 64             	cmp    ebp,0x64
c00039a6:	75 db                	jne    c0003983 <dir_register+0x5d>
c00039a8:	be 07 00 00 00       	mov    esi,0x7
c00039ad:	e9 ef 00 00 00       	jmp    c0003aa1 <dir_register+0x17b>
c00039b2:	83 f8 04             	cmp    eax,0x4
c00039b5:	0f 85 e6 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039bb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039bf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c2:	bd 01 00 00 00       	mov    ebp,0x1
c00039c7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cc:	74 13                	je     c00039e1 <dir_register+0xbb>
c00039ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d7:	83 c0 0c             	add    eax,0xc
c00039da:	31 d2                	xor    edx,edx
c00039dc:	f7 f1                	div    ecx
c00039de:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e1:	89 ea                	mov    edx,ebp
c00039e3:	89 d8                	mov    eax,ebx
c00039e5:	e8 a9 fb ff ff       	call   c0003593 <dir_alloc>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	0f 85 ad 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039f4:	4d                   	dec    ebp
c00039f5:	74 6a                	je     c0003a61 <dir_register+0x13b>
c00039f7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fa:	89 e8                	mov    eax,ebp
c00039fc:	c1 e0 05             	shl    eax,0x5
c00039ff:	29 c2                	sub    edx,eax
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 fb f7 ff ff       	call   c0003203 <dir_sdi>
c0003a08:	89 c6                	mov    esi,eax
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	0f 85 8f 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c0003a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a16:	e8 11 e7 ff ff       	call   c000212c <sum_sfn>
c0003a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a22:	89 f8                	mov    eax,edi
c0003a24:	e8 0c e8 ff ff       	call   c0002235 <move_window>
c0003a29:	89 c6                	mov    esi,eax
c0003a2b:	85 c0                	test   eax,eax
c0003a2d:	75 72                	jne    c0003aa1 <dir_register+0x17b>
c0003a2f:	83 ec 0c             	sub    esp,0xc
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a39:	0f b6 c8             	movzx  ecx,al
c0003a3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3f:	52                   	push   edx
c0003a40:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a43:	e8 a4 e5 ff ff       	call   c0001fec <put_lfn>
c0003a48:	31 d2                	xor    edx,edx
c0003a4a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 39 fa ff ff       	call   c000348e <dir_next>
c0003a55:	83 c4 10             	add    esp,0x10
c0003a58:	89 c6                	mov    esi,eax
c0003a5a:	85 c0                	test   eax,eax
c0003a5c:	75 43                	jne    c0003aa1 <dir_register+0x17b>
c0003a5e:	4d                   	dec    ebp
c0003a5f:	75 be                	jne    c0003a1f <dir_register+0xf9>
c0003a61:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a64:	89 f8                	mov    eax,edi
c0003a66:	e8 ca e7 ff ff       	call   c0002235 <move_window>
c0003a6b:	89 c6                	mov    esi,eax
c0003a6d:	85 c0                	test   eax,eax
c0003a6f:	75 30                	jne    c0003aa1 <dir_register+0x17b>
c0003a71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a74:	b9 20 00 00 00       	mov    ecx,0x20
c0003a79:	31 d2                	xor    edx,edx
c0003a7b:	e8 d0 e2 ff ff       	call   c0001d50 <mem_set>
c0003a80:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a87:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8c:	e8 aa e2 ff ff       	call   c0001d3b <mem_cpy>
c0003a91:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a94:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a97:	83 e0 18             	and    eax,0x18
c0003a9a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa1:	83 c4 2c             	add    esp,0x2c
c0003aa4:	89 f0                	mov    eax,esi
c0003aa6:	5b                   	pop    ebx
c0003aa7:	5e                   	pop    esi
c0003aa8:	5f                   	pop    edi
c0003aa9:	5d                   	pop    ebp
c0003aaa:	c3                   	ret    

c0003aab <f_mount>:
c0003aab:	53                   	push   ebx
c0003aac:	83 ec 18             	sub    esp,0x18
c0003aaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abf:	e8 7a e6 ff ff       	call   c000213e <get_ldnumber>
c0003ac4:	89 c2                	mov    edx,eax
c0003ac6:	b8 0b 00 00 00       	mov    eax,0xb
c0003acb:	85 d2                	test   edx,edx
c0003acd:	78 39                	js     c0003b08 <f_mount+0x5d>
c0003acf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad6:	85 c0                	test   eax,eax
c0003ad8:	74 03                	je     c0003add <f_mount+0x32>
c0003ada:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 03                	je     c0003ae8 <f_mount+0x3d>
c0003ae5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aec:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af3:	31 c0                	xor    eax,eax
c0003af5:	84 db                	test   bl,bl
c0003af7:	74 0f                	je     c0003b08 <f_mount+0x5d>
c0003af9:	31 c9                	xor    ecx,ecx
c0003afb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003aff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b03:	e8 80 e8 ff ff       	call   c0002388 <mount_volume>
c0003b08:	83 c4 18             	add    esp,0x18
c0003b0b:	5b                   	pop    ebx
c0003b0c:	c3                   	ret    

c0003b0d <f_open>:
c0003b0d:	55                   	push   ebp
c0003b0e:	b8 09 00 00 00       	mov    eax,0x9
c0003b13:	57                   	push   edi
c0003b14:	56                   	push   esi
c0003b15:	53                   	push   ebx
c0003b16:	83 ec 5c             	sub    esp,0x5c
c0003b19:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	0f 84 a7 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b29:	89 fe                	mov    esi,edi
c0003b2b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2f:	83 e6 3f             	and    esi,0x3f
c0003b32:	89 f0                	mov    eax,esi
c0003b34:	0f b6 c8             	movzx  ecx,al
c0003b37:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3b:	e8 48 e8 ff ff       	call   c0002388 <mount_volume>
c0003b40:	85 c0                	test   eax,eax
c0003b42:	0f 85 82 02 00 00    	jne    c0003dca <f_open+0x2bd>
c0003b48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4c:	83 ec 0c             	sub    esp,0xc
c0003b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b53:	68 00 02 00 00       	push   0x200
c0003b58:	e8 ff 1e 00 00       	call   c0005a5c <ff_memalloc>
c0003b5d:	83 c4 10             	add    esp,0x10
c0003b60:	89 c5                	mov    ebp,eax
c0003b62:	b8 11 00 00 00       	mov    eax,0x11
c0003b67:	85 ed                	test   ebp,ebp
c0003b69:	0f 84 61 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b73:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b77:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7e:	e8 0f fd ff ff       	call   c0003892 <follow_path>
c0003b83:	85 c0                	test   eax,eax
c0003b85:	75 0c                	jne    c0003b93 <f_open+0x86>
c0003b87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8c:	79 05                	jns    c0003b93 <f_open+0x86>
c0003b8e:	b8 06 00 00 00       	mov    eax,0x6
c0003b93:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b99:	0f 84 de 00 00 00    	je     c0003c7d <f_open+0x170>
c0003b9f:	85 c0                	test   eax,eax
c0003ba1:	74 1e                	je     c0003bc1 <f_open+0xb4>
c0003ba3:	83 f8 04             	cmp    eax,0x4
c0003ba6:	0f 85 06 02 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bb0:	83 ce 08             	or     esi,0x8
c0003bb3:	e8 6e fd ff ff       	call   c0003926 <dir_register>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	74 2f                	je     c0003beb <f_open+0xde>
c0003bbc:	e9 f1 01 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003bc1:	b8 07 00 00 00       	mov    eax,0x7
c0003bc6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bcb:	0f 85 e1 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bd1:	b8 08 00 00 00       	mov    eax,0x8
c0003bd6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdc:	0f 85 d0 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003be2:	83 e7 08             	and    edi,0x8
c0003be5:	0f 84 bf 00 00 00    	je     c0003caa <f_open+0x19d>
c0003beb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bf3:	89 ca                	mov    edx,ecx
c0003bf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfb:	e8 b0 f4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c04:	89 c7                	mov    edi,eax
c0003c06:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0e:	e8 25 e1 ff ff       	call   c0001d38 <st_dword>
c0003c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c17:	31 c9                	xor    ecx,ecx
c0003c19:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c25:	e8 af f4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0003c2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2e:	31 d2                	xor    edx,edx
c0003c30:	83 c0 1c             	add    eax,0x1c
c0003c33:	e8 00 e1 ff ff       	call   c0001d38 <st_dword>
c0003c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3c:	85 ff                	test   edi,edi
c0003c3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c42:	74 66                	je     c0003caa <f_open+0x19d>
c0003c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c48:	31 c9                	xor    ecx,ecx
c0003c4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4d:	89 fa                	mov    edx,edi
c0003c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c57:	e8 a9 f7 ff ff       	call   c0003405 <remove_chain>
c0003c5c:	85 c0                	test   eax,eax
c0003c5e:	0f 85 4e 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c68:	4f                   	dec    edi
c0003c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6d:	e8 c3 e5 ff ff       	call   c0002235 <move_window>
c0003c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7b:	eb 27                	jmp    c0003ca4 <f_open+0x197>
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	0f 85 2d 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c85:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c89:	b8 04 00 00 00       	mov    eax,0x4
c0003c8e:	f6 c2 10             	test   dl,0x10
c0003c91:	0f 85 1b 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c97:	83 e7 02             	and    edi,0x2
c0003c9a:	74 0e                	je     c0003caa <f_open+0x19d>
c0003c9c:	b8 07 00 00 00       	mov    eax,0x7
c0003ca1:	80 e2 01             	and    dl,0x1
c0003ca4:	0f 85 08 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003caa:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cb0:	74 03                	je     c0003cb5 <f_open+0x1a8>
c0003cb2:	83 ce 40             	or     esi,0x40
c0003cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc0:	89 fa                	mov    edx,edi
c0003cc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cc9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ccc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cce:	e8 dd f3 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003cd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd9:	e8 3e e0 ff ff       	call   c0001d1c <ld_dword>
c0003cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce7:	31 d2                	xor    edx,edx
c0003ce9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003ced:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003cfc:	89 f0                	mov    eax,esi
c0003cfe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d05:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d08:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d14:	e8 37 e0 ff ff       	call   c0001d50 <mem_set>
c0003d19:	83 e6 20             	and    esi,0x20
c0003d1c:	75 07                	jne    c0003d25 <f_open+0x218>
c0003d1e:	31 c0                	xor    eax,eax
c0003d20:	e9 8d 00 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003d25:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d28:	85 ff                	test   edi,edi
c0003d2a:	74 f2                	je     c0003d1e <f_open+0x211>
c0003d2c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d33:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d36:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d3a:	c1 e6 09             	shl    esi,0x9
c0003d3d:	39 fe                	cmp    esi,edi
c0003d3f:	73 1c                	jae    c0003d5d <f_open+0x250>
c0003d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d43:	29 f7                	sub    edi,esi
c0003d45:	e8 b7 f3 ff ff       	call   c0003101 <get_fat.isra.2>
c0003d4a:	89 c2                	mov    edx,eax
c0003d4c:	83 f8 01             	cmp    eax,0x1
c0003d4f:	76 10                	jbe    c0003d61 <f_open+0x254>
c0003d51:	83 f8 ff             	cmp    eax,0xffffffff
c0003d54:	75 e7                	jne    c0003d3d <f_open+0x230>
c0003d56:	b8 01 00 00 00       	mov    eax,0x1
c0003d5b:	eb 09                	jmp    c0003d66 <f_open+0x259>
c0003d5d:	31 c0                	xor    eax,eax
c0003d5f:	eb 05                	jmp    c0003d66 <f_open+0x259>
c0003d61:	b8 02 00 00 00       	mov    eax,0x2
c0003d66:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d69:	85 c0                	test   eax,eax
c0003d6b:	75 45                	jne    c0003db2 <f_open+0x2a5>
c0003d6d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d73:	74 a9                	je     c0003d1e <f_open+0x211>
c0003d75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d79:	89 f0                	mov    eax,esi
c0003d7b:	e8 d5 e1 ff ff       	call   c0001f55 <clst2sect>
c0003d80:	89 c2                	mov    edx,eax
c0003d82:	b8 02 00 00 00       	mov    eax,0x2
c0003d87:	85 d2                	test   edx,edx
c0003d89:	74 27                	je     c0003db2 <f_open+0x2a5>
c0003d8b:	89 f9                	mov    ecx,edi
c0003d8d:	c1 e9 09             	shr    ecx,0x9
c0003d90:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d93:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d96:	6a 01                	push   0x1
c0003d98:	50                   	push   eax
c0003d99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da1:	50                   	push   eax
c0003da2:	e8 1d df ff ff       	call   c0001cc4 <disk_read>
c0003da7:	83 c4 10             	add    esp,0x10
c0003daa:	85 c0                	test   eax,eax
c0003dac:	0f 95 c0             	setne  al
c0003daf:	0f b6 c0             	movzx  eax,al
c0003db2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db6:	83 ec 0c             	sub    esp,0xc
c0003db9:	55                   	push   ebp
c0003dba:	e8 b5 1c 00 00       	call   c0005a74 <ff_memfree>
c0003dbf:	83 c4 10             	add    esp,0x10
c0003dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc6:	85 c0                	test   eax,eax
c0003dc8:	74 06                	je     c0003dd0 <f_open+0x2c3>
c0003dca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dd0:	83 c4 5c             	add    esp,0x5c
c0003dd3:	5b                   	pop    ebx
c0003dd4:	5e                   	pop    esi
c0003dd5:	5f                   	pop    edi
c0003dd6:	5d                   	pop    ebp
c0003dd7:	c3                   	ret    

c0003dd8 <f_read>:
c0003dd8:	55                   	push   ebp
c0003dd9:	57                   	push   edi
c0003dda:	56                   	push   esi
c0003ddb:	53                   	push   ebx
c0003ddc:	83 ec 2c             	sub    esp,0x2c
c0003ddf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ded:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003df1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003df5:	89 d8                	mov    eax,ebx
c0003df7:	e8 8f e3 ff ff       	call   c000218b <validate>
c0003dfc:	89 c5                	mov    ebp,eax
c0003dfe:	85 c0                	test   eax,eax
c0003e00:	0f 85 c7 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e06:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e0a:	85 ed                	test   ebp,ebp
c0003e0c:	0f 85 bb 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e12:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e16:	0f 84 ac 01 00 00    	je     c0003fc8 <f_read+0x1f0>
c0003e1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e22:	89 c7                	mov    edi,eax
c0003e24:	39 f0                	cmp    eax,esi
c0003e26:	0f 86 ad 00 00 00    	jbe    c0003ed9 <f_read+0x101>
c0003e2c:	89 f7                	mov    edi,esi
c0003e2e:	e9 a6 00 00 00       	jmp    c0003ed9 <f_read+0x101>
c0003e33:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e36:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3c:	0f 85 5b 01 00 00    	jne    c0003f9d <f_read+0x1c5>
c0003e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e46:	89 d1                	mov    ecx,edx
c0003e48:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4c:	c1 e9 09             	shr    ecx,0x9
c0003e4f:	48                   	dec    eax
c0003e50:	21 c8                	and    eax,ecx
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	0f 84 8a 00 00 00    	je     c0003ee6 <f_read+0x10e>
c0003e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e63:	89 c8                	mov    eax,ecx
c0003e65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e69:	e8 e7 e0 ff ff       	call   c0001f55 <clst2sect>
c0003e6e:	85 c0                	test   eax,eax
c0003e70:	0f 84 88 00 00 00    	je     c0003efe <f_read+0x126>
c0003e76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e82:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e88:	0f 86 bd 00 00 00    	jbe    c0003f4b <f_read+0x173>
c0003e8e:	89 fe                	mov    esi,edi
c0003e90:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e94:	c1 ee 09             	shr    esi,0x9
c0003e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e9b:	01 f2                	add    edx,esi
c0003e9d:	39 c2                	cmp    edx,eax
c0003e9f:	76 06                	jbe    c0003ea7 <f_read+0xcf>
c0003ea1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea5:	89 c6                	mov    esi,eax
c0003ea7:	56                   	push   esi
c0003ea8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb4:	50                   	push   eax
c0003eb5:	e8 0a de ff ff       	call   c0001cc4 <disk_read>
c0003eba:	83 c4 10             	add    esp,0x10
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	75 50                	jne    c0003f11 <f_read+0x139>
c0003ec1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec5:	78 60                	js     c0003f27 <f_read+0x14f>
c0003ec7:	c1 e6 09             	shl    esi,0x9
c0003eca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ece:	29 f7                	sub    edi,esi
c0003ed0:	01 30                	add    DWORD PTR [eax],esi
c0003ed2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed9:	85 ff                	test   edi,edi
c0003edb:	0f 85 52 ff ff ff    	jne    c0003e33 <f_read+0x5b>
c0003ee1:	e9 e7 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003ee6:	85 d2                	test   edx,edx
c0003ee8:	75 05                	jne    c0003eef <f_read+0x117>
c0003eea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eed:	eb 0a                	jmp    c0003ef9 <f_read+0x121>
c0003eef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef4:	e8 08 f2 ff ff       	call   c0003101 <get_fat.isra.2>
c0003ef9:	83 f8 01             	cmp    eax,0x1
c0003efc:	77 0e                	ja     c0003f0c <f_read+0x134>
c0003efe:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f02:	bd 02 00 00 00       	mov    ebp,0x2
c0003f07:	e9 c1 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f0c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0f:	75 0e                	jne    c0003f1f <f_read+0x147>
c0003f11:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f15:	bd 01 00 00 00       	mov    ebp,0x1
c0003f1a:	e9 ae 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f1f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f22:	e9 35 ff ff ff       	jmp    c0003e5c <f_read+0x84>
c0003f27:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f2a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2e:	39 f0                	cmp    eax,esi
c0003f30:	73 95                	jae    c0003ec7 <f_read+0xef>
c0003f32:	c1 e0 09             	shl    eax,0x9
c0003f35:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f38:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f41:	e8 f5 dd ff ff       	call   c0001d3b <mem_cpy>
c0003f46:	e9 7c ff ff ff       	jmp    c0003ec7 <f_read+0xef>
c0003f4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f52:	74 42                	je     c0003f96 <f_read+0x1be>
c0003f54:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f57:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5b:	79 19                	jns    c0003f76 <f_read+0x19e>
c0003f5d:	6a 01                	push   0x1
c0003f5f:	50                   	push   eax
c0003f60:	56                   	push   esi
c0003f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f65:	50                   	push   eax
c0003f66:	e8 6f dd ff ff       	call   c0001cda <disk_write>
c0003f6b:	83 c4 10             	add    esp,0x10
c0003f6e:	85 c0                	test   eax,eax
c0003f70:	75 9f                	jne    c0003f11 <f_read+0x139>
c0003f72:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f76:	6a 01                	push   0x1
c0003f78:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7c:	56                   	push   esi
c0003f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f85:	50                   	push   eax
c0003f86:	e8 39 dd ff ff       	call   c0001cc4 <disk_read>
c0003f8b:	83 c4 10             	add    esp,0x10
c0003f8e:	85 c0                	test   eax,eax
c0003f90:	0f 85 7b ff ff ff    	jne    c0003f11 <f_read+0x139>
c0003f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fa0:	ba 00 02 00 00       	mov    edx,0x200
c0003fa5:	25 ff 01 00 00       	and    eax,0x1ff
c0003faa:	89 fe                	mov    esi,edi
c0003fac:	29 c2                	sub    edx,eax
c0003fae:	39 d7                	cmp    edi,edx
c0003fb0:	76 02                	jbe    c0003fb4 <f_read+0x1dc>
c0003fb2:	89 d6                	mov    esi,edx
c0003fb4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb8:	89 f1                	mov    ecx,esi
c0003fba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbe:	e8 78 dd ff ff       	call   c0001d3b <mem_cpy>
c0003fc3:	e9 02 ff ff ff       	jmp    c0003eca <f_read+0xf2>
c0003fc8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcd:	83 c4 2c             	add    esp,0x2c
c0003fd0:	89 e8                	mov    eax,ebp
c0003fd2:	5b                   	pop    ebx
c0003fd3:	5e                   	pop    esi
c0003fd4:	5f                   	pop    edi
c0003fd5:	5d                   	pop    ebp
c0003fd6:	c3                   	ret    

c0003fd7 <f_write>:
c0003fd7:	55                   	push   ebp
c0003fd8:	57                   	push   edi
c0003fd9:	56                   	push   esi
c0003fda:	53                   	push   ebx
c0003fdb:	83 ec 2c             	sub    esp,0x2c
c0003fde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ff0:	89 d8                	mov    eax,ebx
c0003ff2:	e8 94 e1 ff ff       	call   c000218b <validate>
c0003ff7:	89 c5                	mov    ebp,eax
c0003ff9:	85 c0                	test   eax,eax
c0003ffb:	0f 85 00 02 00 00    	jne    c0004201 <f_write+0x22a>
c0004001:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004005:	85 ed                	test   ebp,ebp
c0004007:	0f 85 f4 01 00 00    	jne    c0004201 <f_write+0x22a>
c000400d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004011:	0f 84 e5 01 00 00    	je     c00041fc <f_write+0x225>
c0004017:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000401a:	89 c7                	mov    edi,eax
c000401c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004020:	0f 83 ea 00 00 00    	jae    c0004110 <f_write+0x139>
c0004026:	f7 d0                	not    eax
c0004028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402c:	e9 df 00 00 00       	jmp    c0004110 <f_write+0x139>
c0004031:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004034:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000403a:	0f 85 8b 01 00 00    	jne    c00041cb <f_write+0x1f4>
c0004040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004044:	89 d1                	mov    ecx,edx
c0004046:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404a:	c1 e9 09             	shr    ecx,0x9
c000404d:	48                   	dec    eax
c000404e:	21 c8                	and    eax,ecx
c0004050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004054:	0f 84 c3 00 00 00    	je     c000411d <f_write+0x146>
c000405a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405e:	0f 88 18 01 00 00    	js     c000417c <f_write+0x1a5>
c0004064:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004068:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406b:	89 c8                	mov    eax,ecx
c000406d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004071:	e8 df de ff ff       	call   c0001f55 <clst2sect>
c0004076:	85 c0                	test   eax,eax
c0004078:	0f 84 c8 00 00 00    	je     c0004146 <f_write+0x16f>
c000407e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004086:	01 c7                	add    edi,eax
c0004088:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004090:	0f 86 0d 01 00 00    	jbe    c00041a3 <f_write+0x1cc>
c0004096:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000409a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000409e:	c1 ee 09             	shr    esi,0x9
c00040a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040a5:	01 f2                	add    edx,esi
c00040a7:	39 c2                	cmp    edx,eax
c00040a9:	76 06                	jbe    c00040b1 <f_write+0xda>
c00040ab:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040af:	89 c6                	mov    esi,eax
c00040b1:	56                   	push   esi
c00040b2:	57                   	push   edi
c00040b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bb:	50                   	push   eax
c00040bc:	e8 19 dc ff ff       	call   c0001cda <disk_write>
c00040c1:	83 c4 10             	add    esp,0x10
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 85 8d 00 00 00    	jne    c0004159 <f_write+0x182>
c00040cc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040cf:	29 fa                	sub    edx,edi
c00040d1:	39 f2                	cmp    edx,esi
c00040d3:	73 18                	jae    c00040ed <f_write+0x116>
c00040d5:	c1 e2 09             	shl    edx,0x9
c00040d8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040db:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040df:	b9 00 02 00 00       	mov    ecx,0x200
c00040e4:	e8 52 dc ff ff       	call   c0001d3b <mem_cpy>
c00040e9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ed:	c1 e6 09             	shl    esi,0x9
c00040f0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fc:	01 30                	add    DWORD PTR [eax],esi
c00040fe:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004101:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004104:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004107:	39 f0                	cmp    eax,esi
c0004109:	73 02                	jae    c000410d <f_write+0x136>
c000410b:	89 f0                	mov    eax,esi
c000410d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004110:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004115:	0f 85 16 ff ff ff    	jne    c0004031 <f_write+0x5a>
c000411b:	eb 1b                	jmp    c0004138 <f_write+0x161>
c000411d:	85 d2                	test   edx,edx
c000411f:	75 09                	jne    c000412a <f_write+0x153>
c0004121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004124:	85 c0                	test   eax,eax
c0004126:	75 19                	jne    c0004141 <f_write+0x16a>
c0004128:	eb 03                	jmp    c000412d <f_write+0x156>
c000412a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412d:	89 d8                	mov    eax,ebx
c000412f:	e8 97 f1 ff ff       	call   c00032cb <create_chain>
c0004134:	85 c0                	test   eax,eax
c0004136:	75 09                	jne    c0004141 <f_write+0x16a>
c0004138:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413c:	e9 c0 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004141:	83 f8 01             	cmp    eax,0x1
c0004144:	75 0e                	jne    c0004154 <f_write+0x17d>
c0004146:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000414a:	bd 02 00 00 00       	mov    ebp,0x2
c000414f:	e9 ad 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004154:	83 f8 ff             	cmp    eax,0xffffffff
c0004157:	75 0e                	jne    c0004167 <f_write+0x190>
c0004159:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415d:	bd 01 00 00 00       	mov    ebp,0x1
c0004162:	e9 9a 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004167:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000416a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416e:	0f 85 e6 fe ff ff    	jne    c000405a <f_write+0x83>
c0004174:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004177:	e9 de fe ff ff       	jmp    c000405a <f_write+0x83>
c000417c:	6a 01                	push   0x1
c000417e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004181:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004184:	50                   	push   eax
c0004185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004189:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418d:	50                   	push   eax
c000418e:	e8 47 db ff ff       	call   c0001cda <disk_write>
c0004193:	83 c4 10             	add    esp,0x10
c0004196:	85 c0                	test   eax,eax
c0004198:	75 bf                	jne    c0004159 <f_write+0x182>
c000419a:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419e:	e9 c1 fe ff ff       	jmp    c0004064 <f_write+0x8d>
c00041a3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a6:	74 20                	je     c00041c8 <f_write+0x1f1>
c00041a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ab:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ae:	76 18                	jbe    c00041c8 <f_write+0x1f1>
c00041b0:	6a 01                	push   0x1
c00041b2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b5:	57                   	push   edi
c00041b6:	50                   	push   eax
c00041b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041bb:	50                   	push   eax
c00041bc:	e8 03 db ff ff       	call   c0001cc4 <disk_read>
c00041c1:	83 c4 10             	add    esp,0x10
c00041c4:	85 c0                	test   eax,eax
c00041c6:	75 91                	jne    c0004159 <f_write+0x182>
c00041c8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ce:	ba 00 02 00 00       	mov    edx,0x200
c00041d3:	25 ff 01 00 00       	and    eax,0x1ff
c00041d8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041dc:	29 c2                	sub    edx,eax
c00041de:	39 d6                	cmp    esi,edx
c00041e0:	76 02                	jbe    c00041e4 <f_write+0x20d>
c00041e2:	89 d6                	mov    esi,edx
c00041e4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e8:	89 f1                	mov    ecx,esi
c00041ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ee:	e8 48 db ff ff       	call   c0001d3b <mem_cpy>
c00041f3:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f7:	e9 f4 fe ff ff       	jmp    c00040f0 <f_write+0x119>
c00041fc:	bd 07 00 00 00       	mov    ebp,0x7
c0004201:	83 c4 2c             	add    esp,0x2c
c0004204:	89 e8                	mov    eax,ebp
c0004206:	5b                   	pop    ebx
c0004207:	5e                   	pop    esi
c0004208:	5f                   	pop    edi
c0004209:	5d                   	pop    ebp
c000420a:	c3                   	ret    

c000420b <f_sync>:
c000420b:	56                   	push   esi
c000420c:	53                   	push   ebx
c000420d:	83 ec 14             	sub    esp,0x14
c0004210:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004214:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004218:	89 d8                	mov    eax,ebx
c000421a:	e8 6c df ff ff       	call   c000218b <validate>
c000421f:	85 c0                	test   eax,eax
c0004221:	0f 85 93 00 00 00    	jne    c00042ba <f_sync+0xaf>
c0004227:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000422a:	f6 c2 40             	test   dl,0x40
c000422d:	0f 84 87 00 00 00    	je     c00042ba <f_sync+0xaf>
c0004233:	84 d2                	test   dl,dl
c0004235:	79 29                	jns    c0004260 <f_sync+0x55>
c0004237:	6a 01                	push   0x1
c0004239:	8d 43 28             	lea    eax,[ebx+0x28]
c000423c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423f:	50                   	push   eax
c0004240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004244:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004248:	50                   	push   eax
c0004249:	e8 8c da ff ff       	call   c0001cda <disk_write>
c000424e:	83 c4 10             	add    esp,0x10
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 01 00 00 00       	mov    eax,0x1
c0004258:	85 d2                	test   edx,edx
c000425a:	75 5e                	jne    c00042ba <f_sync+0xaf>
c000425c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004260:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004267:	e8 c9 df ff ff       	call   c0002235 <move_window>
c000426c:	85 c0                	test   eax,eax
c000426e:	75 4a                	jne    c00042ba <f_sync+0xaf>
c0004270:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004273:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004277:	89 f2                	mov    edx,esi
c0004279:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427e:	e8 56 ee ff ff       	call   c00030d9 <st_clust.isra.1>
c0004283:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004286:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004289:	e8 aa da ff ff       	call   c0001d38 <st_dword>
c000428e:	8d 46 16             	lea    eax,[esi+0x16]
c0004291:	ba 00 00 21 50       	mov    edx,0x50210000
c0004296:	e8 9d da ff ff       	call   c0001d38 <st_dword>
c000429b:	8d 46 12             	lea    eax,[esi+0x12]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	e8 8f da ff ff       	call   c0001d34 <st_word>
c00042a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b1:	e8 bf e9 ff ff       	call   c0002c75 <sync_fs>
c00042b6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ba:	83 c4 14             	add    esp,0x14
c00042bd:	5b                   	pop    ebx
c00042be:	5e                   	pop    esi
c00042bf:	c3                   	ret    

c00042c0 <f_close>:
c00042c0:	53                   	push   ebx
c00042c1:	83 ec 24             	sub    esp,0x24
c00042c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c8:	53                   	push   ebx
c00042c9:	e8 3d ff ff ff       	call   c000420b <f_sync>
c00042ce:	83 c4 10             	add    esp,0x10
c00042d1:	85 c0                	test   eax,eax
c00042d3:	75 15                	jne    c00042ea <f_close+0x2a>
c00042d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d9:	89 d8                	mov    eax,ebx
c00042db:	e8 ab de ff ff       	call   c000218b <validate>
c00042e0:	85 c0                	test   eax,eax
c00042e2:	75 06                	jne    c00042ea <f_close+0x2a>
c00042e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042ea:	83 c4 18             	add    esp,0x18
c00042ed:	5b                   	pop    ebx
c00042ee:	c3                   	ret    

c00042ef <f_lseek>:
c00042ef:	55                   	push   ebp
c00042f0:	57                   	push   edi
c00042f1:	56                   	push   esi
c00042f2:	53                   	push   ebx
c00042f3:	83 ec 2c             	sub    esp,0x2c
c00042f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00042fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004302:	89 d8                	mov    eax,ebx
c0004304:	e8 82 de ff ff       	call   c000218b <validate>
c0004309:	89 c5                	mov    ebp,eax
c000430b:	85 c0                	test   eax,eax
c000430d:	0f 85 79 01 00 00    	jne    c000448c <f_lseek+0x19d>
c0004313:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004317:	85 ed                	test   ebp,ebp
c0004319:	0f 85 6d 01 00 00    	jne    c000448c <f_lseek+0x19d>
c000431f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004322:	39 f0                	cmp    eax,esi
c0004324:	73 08                	jae    c000432e <f_lseek+0x3f>
c0004326:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000432a:	75 02                	jne    c000432e <f_lseek+0x3f>
c000432c:	89 c6                	mov    esi,eax
c000432e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004331:	85 f6                	test   esi,esi
c0004333:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000433a:	75 07                	jne    c0004343 <f_lseek+0x54>
c000433c:	31 f6                	xor    esi,esi
c000433e:	e9 e2 00 00 00       	jmp    c0004425 <f_lseek+0x136>
c0004343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004347:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434b:	c1 e7 09             	shl    edi,0x9
c000434e:	85 c9                	test   ecx,ecx
c0004350:	74 28                	je     c000437a <f_lseek+0x8b>
c0004352:	49                   	dec    ecx
c0004353:	31 d2                	xor    edx,edx
c0004355:	8d 46 ff             	lea    eax,[esi-0x1]
c0004358:	f7 f7                	div    edi
c000435a:	31 d2                	xor    edx,edx
c000435c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004360:	89 c8                	mov    eax,ecx
c0004362:	f7 f7                	div    edi
c0004364:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004368:	72 10                	jb     c000437a <f_lseek+0x8b>
c000436a:	89 f8                	mov    eax,edi
c000436c:	f7 d8                	neg    eax
c000436e:	21 c1                	and    ecx,eax
c0004370:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004373:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004376:	29 ce                	sub    esi,ecx
c0004378:	eb 3c                	jmp    c00043b6 <f_lseek+0xc7>
c000437a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437d:	85 c0                	test   eax,eax
c000437f:	75 32                	jne    c00043b3 <f_lseek+0xc4>
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 d8                	mov    eax,ebx
c0004385:	e8 41 ef ff ff       	call   c00032cb <create_chain>
c000438a:	83 f8 01             	cmp    eax,0x1
c000438d:	75 0e                	jne    c000439d <f_lseek+0xae>
c000438f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004393:	bd 02 00 00 00       	mov    ebp,0x2
c0004398:	e9 ef 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c000439d:	83 f8 ff             	cmp    eax,0xffffffff
c00043a0:	75 0e                	jne    c00043b0 <f_lseek+0xc1>
c00043a2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a6:	bd 01 00 00 00       	mov    ebp,0x1
c00043ab:	e9 dc 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c00043b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b6:	85 c0                	test   eax,eax
c00043b8:	74 82                	je     c000433c <f_lseek+0x4d>
c00043ba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bd:	39 fe                	cmp    esi,edi
c00043bf:	76 3d                	jbe    c00043fe <f_lseek+0x10f>
c00043c1:	01 fa                	add    edx,edi
c00043c3:	29 fe                	sub    esi,edi
c00043c5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cc:	89 c2                	mov    edx,eax
c00043ce:	74 0d                	je     c00043dd <f_lseek+0xee>
c00043d0:	89 d8                	mov    eax,ebx
c00043d2:	e8 f4 ee ff ff       	call   c00032cb <create_chain>
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 09                	jne    c00043e4 <f_lseek+0xf5>
c00043db:	eb 1f                	jmp    c00043fc <f_lseek+0x10d>
c00043dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043df:	e8 1d ed ff ff       	call   c0003101 <get_fat.isra.2>
c00043e4:	83 f8 ff             	cmp    eax,0xffffffff
c00043e7:	74 b9                	je     c00043a2 <f_lseek+0xb3>
c00043e9:	83 f8 01             	cmp    eax,0x1
c00043ec:	76 a1                	jbe    c000438f <f_lseek+0xa0>
c00043ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f2:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f5:	76 98                	jbe    c000438f <f_lseek+0xa0>
c00043f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043fa:	eb be                	jmp    c00043ba <f_lseek+0xcb>
c00043fc:	31 f6                	xor    esi,esi
c00043fe:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004401:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004407:	0f 84 2f ff ff ff    	je     c000433c <f_lseek+0x4d>
c000440d:	89 c2                	mov    edx,eax
c000440f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004413:	e8 3d db ff ff       	call   c0001f55 <clst2sect>
c0004418:	85 c0                	test   eax,eax
c000441a:	0f 84 6f ff ff ff    	je     c000438f <f_lseek+0xa0>
c0004420:	c1 ee 09             	shr    esi,0x9
c0004423:	01 c6                	add    esi,eax
c0004425:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004428:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442b:	76 07                	jbe    c0004434 <f_lseek+0x145>
c000442d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004430:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004434:	a9 ff 01 00 00       	test   eax,0x1ff
c0004439:	74 51                	je     c000448c <f_lseek+0x19d>
c000443b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443e:	39 f0                	cmp    eax,esi
c0004440:	74 4a                	je     c000448c <f_lseek+0x19d>
c0004442:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004445:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004449:	79 21                	jns    c000446c <f_lseek+0x17d>
c000444b:	6a 01                	push   0x1
c000444d:	50                   	push   eax
c000444e:	57                   	push   edi
c000444f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004453:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004457:	50                   	push   eax
c0004458:	e8 7d d8 ff ff       	call   c0001cda <disk_write>
c000445d:	83 c4 10             	add    esp,0x10
c0004460:	85 c0                	test   eax,eax
c0004462:	0f 85 3a ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004468:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446c:	6a 01                	push   0x1
c000446e:	56                   	push   esi
c000446f:	57                   	push   edi
c0004470:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004478:	50                   	push   eax
c0004479:	e8 46 d8 ff ff       	call   c0001cc4 <disk_read>
c000447e:	83 c4 10             	add    esp,0x10
c0004481:	85 c0                	test   eax,eax
c0004483:	0f 85 19 ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004489:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448c:	83 c4 2c             	add    esp,0x2c
c000448f:	89 e8                	mov    eax,ebp
c0004491:	5b                   	pop    ebx
c0004492:	5e                   	pop    esi
c0004493:	5f                   	pop    edi
c0004494:	5d                   	pop    ebp
c0004495:	c3                   	ret    

c0004496 <f_opendir>:
c0004496:	56                   	push   esi
c0004497:	b8 09 00 00 00       	mov    eax,0x9
c000449c:	53                   	push   ebx
c000449d:	83 ec 24             	sub    esp,0x24
c00044a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a4:	85 db                	test   ebx,ebx
c00044a6:	0f 84 af 00 00 00    	je     c000455b <f_opendir+0xc5>
c00044ac:	31 c9                	xor    ecx,ecx
c00044ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b6:	e8 cd de ff ff       	call   c0002388 <mount_volume>
c00044bb:	85 c0                	test   eax,eax
c00044bd:	0f 85 92 00 00 00    	jne    c0004555 <f_opendir+0xbf>
c00044c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c7:	83 ec 0c             	sub    esp,0xc
c00044ca:	89 03                	mov    DWORD PTR [ebx],eax
c00044cc:	68 00 02 00 00       	push   0x200
c00044d1:	e8 86 15 00 00       	call   c0005a5c <ff_memalloc>
c00044d6:	83 c4 10             	add    esp,0x10
c00044d9:	89 c6                	mov    esi,eax
c00044db:	b8 11 00 00 00       	mov    eax,0x11
c00044e0:	85 f6                	test   esi,esi
c00044e2:	74 77                	je     c000455b <f_opendir+0xc5>
c00044e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044ec:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ef:	89 d8                	mov    eax,ebx
c00044f1:	e8 9c f3 ff ff       	call   c0003892 <follow_path>
c00044f6:	85 c0                	test   eax,eax
c00044f8:	75 37                	jne    c0004531 <f_opendir+0x9b>
c00044fa:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fe:	78 1c                	js     c000451c <f_opendir+0x86>
c0004500:	b8 05 00 00 00       	mov    eax,0x5
c0004505:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004509:	74 26                	je     c0004531 <f_opendir+0x9b>
c000450b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000450e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004512:	8a 00                	mov    al,BYTE PTR [eax]
c0004514:	e8 97 eb ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004520:	31 d2                	xor    edx,edx
c0004522:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004526:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000452a:	89 d8                	mov    eax,ebx
c000452c:	e8 d2 ec ff ff       	call   c0003203 <dir_sdi>
c0004531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004535:	83 ec 0c             	sub    esp,0xc
c0004538:	56                   	push   esi
c0004539:	e8 36 15 00 00       	call   c0005a74 <ff_memfree>
c000453e:	83 c4 10             	add    esp,0x10
c0004541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004545:	83 f8 04             	cmp    eax,0x4
c0004548:	74 06                	je     c0004550 <f_opendir+0xba>
c000454a:	85 c0                	test   eax,eax
c000454c:	74 0d                	je     c000455b <f_opendir+0xc5>
c000454e:	eb 05                	jmp    c0004555 <f_opendir+0xbf>
c0004550:	b8 05 00 00 00       	mov    eax,0x5
c0004555:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455b:	83 c4 24             	add    esp,0x24
c000455e:	5b                   	pop    ebx
c000455f:	5e                   	pop    esi
c0004560:	c3                   	ret    

c0004561 <f_closedir>:
c0004561:	53                   	push   ebx
c0004562:	83 ec 18             	sub    esp,0x18
c0004565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004569:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456d:	89 d8                	mov    eax,ebx
c000456f:	e8 17 dc ff ff       	call   c000218b <validate>
c0004574:	85 c0                	test   eax,eax
c0004576:	75 06                	jne    c000457e <f_closedir+0x1d>
c0004578:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457e:	83 c4 18             	add    esp,0x18
c0004581:	5b                   	pop    ebx
c0004582:	c3                   	ret    

c0004583 <f_readdir>:
c0004583:	57                   	push   edi
c0004584:	56                   	push   esi
c0004585:	53                   	push   ebx
c0004586:	83 ec 20             	sub    esp,0x20
c0004589:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004591:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004595:	89 d8                	mov    eax,ebx
c0004597:	e8 ef db ff ff       	call   c000218b <validate>
c000459c:	85 c0                	test   eax,eax
c000459e:	75 6e                	jne    c000460e <f_readdir+0x8b>
c00045a0:	85 ff                	test   edi,edi
c00045a2:	75 0b                	jne    c00045af <f_readdir+0x2c>
c00045a4:	31 d2                	xor    edx,edx
c00045a6:	89 d8                	mov    eax,ebx
c00045a8:	e8 56 ec ff ff       	call   c0003203 <dir_sdi>
c00045ad:	eb 5f                	jmp    c000460e <f_readdir+0x8b>
c00045af:	83 ec 0c             	sub    esp,0xc
c00045b2:	68 00 02 00 00       	push   0x200
c00045b7:	e8 a0 14 00 00       	call   c0005a5c <ff_memalloc>
c00045bc:	83 c4 10             	add    esp,0x10
c00045bf:	89 c6                	mov    esi,eax
c00045c1:	b8 11 00 00 00       	mov    eax,0x11
c00045c6:	85 f6                	test   esi,esi
c00045c8:	74 44                	je     c000460e <f_readdir+0x8b>
c00045ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045ce:	31 d2                	xor    edx,edx
c00045d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d3:	89 d8                	mov    eax,ebx
c00045d5:	e8 1a f0 ff ff       	call   c00035f4 <dir_read>
c00045da:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045df:	75 19                	jne    c00045fa <f_readdir+0x77>
c00045e1:	89 fa                	mov    edx,edi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 e2 e8 ff ff       	call   c0002ecc <get_fileinfo>
c00045ea:	31 d2                	xor    edx,edx
c00045ec:	89 d8                	mov    eax,ebx
c00045ee:	e8 9b ee ff ff       	call   c000348e <dir_next>
c00045f3:	83 f8 04             	cmp    eax,0x4
c00045f6:	75 02                	jne    c00045fa <f_readdir+0x77>
c00045f8:	31 c0                	xor    eax,eax
c00045fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fe:	83 ec 0c             	sub    esp,0xc
c0004601:	56                   	push   esi
c0004602:	e8 6d 14 00 00       	call   c0005a74 <ff_memfree>
c0004607:	83 c4 10             	add    esp,0x10
c000460a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460e:	83 c4 20             	add    esp,0x20
c0004611:	5b                   	pop    ebx
c0004612:	5e                   	pop    esi
c0004613:	5f                   	pop    edi
c0004614:	c3                   	ret    

c0004615 <f_stat>:
c0004615:	57                   	push   edi
c0004616:	31 c9                	xor    ecx,ecx
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 30             	sub    esp,0x30
c000461d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004621:	89 e2                	mov    edx,esp
c0004623:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004627:	e8 5c dd ff ff       	call   c0002388 <mount_volume>
c000462c:	89 c3                	mov    ebx,eax
c000462e:	85 c0                	test   eax,eax
c0004630:	75 59                	jne    c000468b <f_stat+0x76>
c0004632:	83 ec 0c             	sub    esp,0xc
c0004635:	bb 11 00 00 00       	mov    ebx,0x11
c000463a:	68 00 02 00 00       	push   0x200
c000463f:	e8 18 14 00 00       	call   c0005a5c <ff_memalloc>
c0004644:	83 c4 10             	add    esp,0x10
c0004647:	89 c6                	mov    esi,eax
c0004649:	85 c0                	test   eax,eax
c000464b:	74 3e                	je     c000468b <f_stat+0x76>
c000464d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004650:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004654:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004657:	89 e0                	mov    eax,esp
c0004659:	e8 34 f2 ff ff       	call   c0003892 <follow_path>
c000465e:	89 c3                	mov    ebx,eax
c0004660:	85 c0                	test   eax,eax
c0004662:	75 1b                	jne    c000467f <f_stat+0x6a>
c0004664:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004669:	78 0f                	js     c000467a <f_stat+0x65>
c000466b:	85 ff                	test   edi,edi
c000466d:	74 10                	je     c000467f <f_stat+0x6a>
c000466f:	89 fa                	mov    edx,edi
c0004671:	89 e0                	mov    eax,esp
c0004673:	e8 54 e8 ff ff       	call   c0002ecc <get_fileinfo>
c0004678:	eb 05                	jmp    c000467f <f_stat+0x6a>
c000467a:	bb 06 00 00 00       	mov    ebx,0x6
c000467f:	83 ec 0c             	sub    esp,0xc
c0004682:	56                   	push   esi
c0004683:	e8 ec 13 00 00       	call   c0005a74 <ff_memfree>
c0004688:	83 c4 10             	add    esp,0x10
c000468b:	83 c4 30             	add    esp,0x30
c000468e:	89 d8                	mov    eax,ebx
c0004690:	5b                   	pop    ebx
c0004691:	5e                   	pop    esi
c0004692:	5f                   	pop    edi
c0004693:	c3                   	ret    

c0004694 <f_getfree>:
c0004694:	55                   	push   ebp
c0004695:	31 c9                	xor    ecx,ecx
c0004697:	57                   	push   edi
c0004698:	56                   	push   esi
c0004699:	53                   	push   ebx
c000469a:	83 ec 2c             	sub    esp,0x2c
c000469d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a5:	e8 de dc ff ff       	call   c0002388 <mount_volume>
c00046aa:	89 c7                	mov    edi,eax
c00046ac:	85 c0                	test   eax,eax
c00046ae:	0f 85 d8 00 00 00    	jne    c000478c <f_getfree+0xf8>
c00046b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046bc:	89 30                	mov    DWORD PTR [eax],esi
c00046be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c7:	39 d0                	cmp    eax,edx
c00046c9:	77 0b                	ja     c00046d6 <f_getfree+0x42>
c00046cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046cf:	89 01                	mov    DWORD PTR [ecx],eax
c00046d1:	e9 b6 00 00 00       	jmp    c000478c <f_getfree+0xf8>
c00046d6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d9:	75 29                	jne    c0004704 <f_getfree+0x70>
c00046db:	bd 02 00 00 00       	mov    ebp,0x2
c00046e0:	31 db                	xor    ebx,ebx
c00046e2:	89 ea                	mov    edx,ebp
c00046e4:	89 f0                	mov    eax,esi
c00046e6:	e8 16 ea ff ff       	call   c0003101 <get_fat.isra.2>
c00046eb:	83 f8 ff             	cmp    eax,0xffffffff
c00046ee:	74 7b                	je     c000476b <f_getfree+0xd7>
c00046f0:	83 f8 01             	cmp    eax,0x1
c00046f3:	74 7d                	je     c0004772 <f_getfree+0xde>
c00046f5:	83 d3 00             	adc    ebx,0x0
c00046f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fc:	45                   	inc    ebp
c00046fd:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004700:	77 e0                	ja     c00046e2 <f_getfree+0x4e>
c0004702:	eb 77                	jmp    c000477b <f_getfree+0xe7>
c0004704:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004707:	31 db                	xor    ebx,ebx
c0004709:	31 f6                	xor    esi,esi
c000470b:	85 f6                	test   esi,esi
c000470d:	75 18                	jne    c0004727 <f_getfree+0x93>
c000470f:	8d 42 01             	lea    eax,[edx+0x1]
c0004712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004716:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000471a:	e8 16 db ff ff       	call   c0002235 <move_window>
c000471f:	85 c0                	test   eax,eax
c0004721:	75 56                	jne    c0004779 <f_getfree+0xe5>
c0004723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004727:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004733:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004736:	75 11                	jne    c0004749 <f_getfree+0xb5>
c0004738:	e8 d2 d5 ff ff       	call   c0001d0f <ld_word>
c000473d:	66 83 f8 01          	cmp    ax,0x1
c0004741:	83 d3 00             	adc    ebx,0x0
c0004744:	83 c6 02             	add    esi,0x2
c0004747:	eb 13                	jmp    c000475c <f_getfree+0xc8>
c0004749:	e8 ce d5 ff ff       	call   c0001d1c <ld_dword>
c000474e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004753:	83 f8 01             	cmp    eax,0x1
c0004756:	83 d3 00             	adc    ebx,0x0
c0004759:	83 c6 04             	add    esi,0x4
c000475c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	4d                   	dec    ebp
c0004767:	75 a2                	jne    c000470b <f_getfree+0x77>
c0004769:	eb 10                	jmp    c000477b <f_getfree+0xe7>
c000476b:	bf 01 00 00 00       	mov    edi,0x1
c0004770:	eb 09                	jmp    c000477b <f_getfree+0xe7>
c0004772:	bf 02 00 00 00       	mov    edi,0x2
c0004777:	eb 02                	jmp    c000477b <f_getfree+0xe7>
c0004779:	89 c7                	mov    edi,eax
c000477b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477f:	89 18                	mov    DWORD PTR [eax],ebx
c0004781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004785:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004788:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000478c:	83 c4 2c             	add    esp,0x2c
c000478f:	89 f8                	mov    eax,edi
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	5f                   	pop    edi
c0004794:	5d                   	pop    ebp
c0004795:	c3                   	ret    

c0004796 <f_truncate>:
c0004796:	56                   	push   esi
c0004797:	53                   	push   ebx
c0004798:	83 ec 14             	sub    esp,0x14
c000479b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a3:	89 d8                	mov    eax,ebx
c00047a5:	e8 e1 d9 ff ff       	call   c000218b <validate>
c00047aa:	89 c6                	mov    esi,eax
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 be 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047b4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b8:	85 f6                	test   esi,esi
c00047ba:	0f 85 b2 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047c0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c4:	0f 84 a3 00 00 00    	je     c000486d <f_truncate+0xd7>
c00047ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047d0:	0f 83 9c 00 00 00    	jae    c0004872 <f_truncate+0xdc>
c00047d6:	85 c0                	test   eax,eax
c00047d8:	75 15                	jne    c00047ef <f_truncate+0x59>
c00047da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dd:	31 c9                	xor    ecx,ecx
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 1f ec ff ff       	call   c0003405 <remove_chain>
c00047e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ed:	eb 35                	jmp    c0004824 <f_truncate+0x8e>
c00047ef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f4:	e8 08 e9 ff ff       	call   c0003101 <get_fat.isra.2>
c00047f9:	89 c2                	mov    edx,eax
c00047fb:	b8 01 00 00 00       	mov    eax,0x1
c0004800:	83 fa ff             	cmp    edx,0xffffffff
c0004803:	74 1f                	je     c0004824 <f_truncate+0x8e>
c0004805:	b8 02 00 00 00       	mov    eax,0x2
c000480a:	83 fa 01             	cmp    edx,0x1
c000480d:	74 15                	je     c0004824 <f_truncate+0x8e>
c000480f:	31 c0                	xor    eax,eax
c0004811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004815:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004818:	76 0a                	jbe    c0004824 <f_truncate+0x8e>
c000481a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481d:	89 d8                	mov    eax,ebx
c000481f:	e8 e1 eb ff ff       	call   c0003405 <remove_chain>
c0004824:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004827:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000482a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482d:	83 ca 40             	or     edx,0x40
c0004830:	85 c0                	test   eax,eax
c0004832:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004835:	75 2f                	jne    c0004866 <f_truncate+0xd0>
c0004837:	84 d2                	test   dl,dl
c0004839:	79 37                	jns    c0004872 <f_truncate+0xdc>
c000483b:	6a 01                	push   0x1
c000483d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004840:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004843:	50                   	push   eax
c0004844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004848:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484c:	50                   	push   eax
c000484d:	e8 88 d4 ff ff       	call   c0001cda <disk_write>
c0004852:	83 c4 10             	add    esp,0x10
c0004855:	85 c0                	test   eax,eax
c0004857:	75 08                	jne    c0004861 <f_truncate+0xcb>
c0004859:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485d:	31 f6                	xor    esi,esi
c000485f:	eb 11                	jmp    c0004872 <f_truncate+0xdc>
c0004861:	b8 01 00 00 00       	mov    eax,0x1
c0004866:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004869:	89 c6                	mov    esi,eax
c000486b:	eb 05                	jmp    c0004872 <f_truncate+0xdc>
c000486d:	be 07 00 00 00       	mov    esi,0x7
c0004872:	89 f0                	mov    eax,esi
c0004874:	83 c4 14             	add    esp,0x14
c0004877:	5b                   	pop    ebx
c0004878:	5e                   	pop    esi
c0004879:	c3                   	ret    

c000487a <f_unlink>:
c000487a:	55                   	push   ebp
c000487b:	b9 02 00 00 00       	mov    ecx,0x2
c0004880:	57                   	push   edi
c0004881:	56                   	push   esi
c0004882:	53                   	push   ebx
c0004883:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004889:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004894:	e8 ef da ff ff       	call   c0002388 <mount_volume>
c0004899:	85 c0                	test   eax,eax
c000489b:	0f 85 f0 00 00 00    	jne    c0004991 <f_unlink+0x117>
c00048a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a5:	83 ec 0c             	sub    esp,0xc
c00048a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ac:	68 00 02 00 00       	push   0x200
c00048b1:	e8 a6 11 00 00       	call   c0005a5c <ff_memalloc>
c00048b6:	83 c4 10             	add    esp,0x10
c00048b9:	89 c3                	mov    ebx,eax
c00048bb:	b8 11 00 00 00       	mov    eax,0x11
c00048c0:	85 db                	test   ebx,ebx
c00048c2:	0f 84 c9 00 00 00    	je     c0004991 <f_unlink+0x117>
c00048c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048da:	e8 b3 ef ff ff       	call   c0003892 <follow_path>
c00048df:	85 c0                	test   eax,eax
c00048e1:	0f 85 96 00 00 00    	jne    c000497d <f_unlink+0x103>
c00048e7:	b8 06 00 00 00       	mov    eax,0x6
c00048ec:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f1:	0f 88 86 00 00 00    	js     c000497d <f_unlink+0x103>
c00048f7:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fc:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004902:	74 07                	je     c000490b <f_unlink+0x91>
c0004904:	b8 07 00 00 00       	mov    eax,0x7
c0004909:	eb 72                	jmp    c000497d <f_unlink+0x103>
c000490b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004913:	8a 07                	mov    al,BYTE PTR [edi]
c0004915:	e8 96 e7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c000491a:	83 e5 10             	and    ebp,0x10
c000491d:	89 c6                	mov    esi,eax
c000491f:	75 0f                	jne    c0004930 <f_unlink+0xb6>
c0004921:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004925:	e8 e7 ed ff ff       	call   c0003711 <dir_remove>
c000492a:	85 c0                	test   eax,eax
c000492c:	74 2f                	je     c000495d <f_unlink+0xe3>
c000492e:	eb 4d                	jmp    c000497d <f_unlink+0x103>
c0004930:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004934:	31 d2                	xor    edx,edx
c0004936:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000493a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000493e:	e8 c0 e8 ff ff       	call   c0003203 <dir_sdi>
c0004943:	85 c0                	test   eax,eax
c0004945:	75 36                	jne    c000497d <f_unlink+0x103>
c0004947:	31 d2                	xor    edx,edx
c0004949:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494d:	e8 a2 ec ff ff       	call   c00035f4 <dir_read>
c0004952:	85 c0                	test   eax,eax
c0004954:	74 ae                	je     c0004904 <f_unlink+0x8a>
c0004956:	83 f8 04             	cmp    eax,0x4
c0004959:	75 22                	jne    c000497d <f_unlink+0x103>
c000495b:	eb c4                	jmp    c0004921 <f_unlink+0xa7>
c000495d:	85 f6                	test   esi,esi
c000495f:	75 0b                	jne    c000496c <f_unlink+0xf2>
c0004961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004965:	e8 0b e3 ff ff       	call   c0002c75 <sync_fs>
c000496a:	eb 11                	jmp    c000497d <f_unlink+0x103>
c000496c:	31 c9                	xor    ecx,ecx
c000496e:	89 f2                	mov    edx,esi
c0004970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004974:	e8 8c ea ff ff       	call   c0003405 <remove_chain>
c0004979:	85 c0                	test   eax,eax
c000497b:	74 e4                	je     c0004961 <f_unlink+0xe7>
c000497d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	53                   	push   ebx
c0004985:	e8 ea 10 00 00       	call   c0005a74 <ff_memfree>
c000498a:	83 c4 10             	add    esp,0x10
c000498d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004991:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004997:	5b                   	pop    ebx
c0004998:	5e                   	pop    esi
c0004999:	5f                   	pop    edi
c000499a:	5d                   	pop    ebp
c000499b:	c3                   	ret    

c000499c <f_mkdir>:
c000499c:	57                   	push   edi
c000499d:	b9 02 00 00 00       	mov    ecx,0x2
c00049a2:	56                   	push   esi
c00049a3:	53                   	push   ebx
c00049a4:	83 ec 50             	sub    esp,0x50
c00049a7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049ab:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049af:	e8 d4 d9 ff ff       	call   c0002388 <mount_volume>
c00049b4:	89 c3                	mov    ebx,eax
c00049b6:	85 c0                	test   eax,eax
c00049b8:	0f 85 70 01 00 00    	jne    c0004b2e <f_mkdir+0x192>
c00049be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c2:	bb 11 00 00 00       	mov    ebx,0x11
c00049c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049cb:	83 ec 0c             	sub    esp,0xc
c00049ce:	68 00 02 00 00       	push   0x200
c00049d3:	e8 84 10 00 00       	call   c0005a5c <ff_memalloc>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	89 c7                	mov    edi,eax
c00049dd:	85 c0                	test   eax,eax
c00049df:	0f 84 49 01 00 00    	je     c0004b2e <f_mkdir+0x192>
c00049e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f4:	e8 99 ee ff ff       	call   c0003892 <follow_path>
c00049f9:	89 c3                	mov    ebx,eax
c00049fb:	85 c0                	test   eax,eax
c00049fd:	74 3e                	je     c0004a3d <f_mkdir+0xa1>
c00049ff:	83 f8 04             	cmp    eax,0x4
c0004a02:	75 3e                	jne    c0004a42 <f_mkdir+0xa6>
c0004a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a12:	e8 b4 e8 ff ff       	call   c00032cb <create_chain>
c0004a17:	89 c6                	mov    esi,eax
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	74 0c                	je     c0004a29 <f_mkdir+0x8d>
c0004a1d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a22:	83 f8 01             	cmp    eax,0x1
c0004a25:	74 07                	je     c0004a2e <f_mkdir+0x92>
c0004a27:	eb 2a                	jmp    c0004a53 <f_mkdir+0xb7>
c0004a29:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2e:	31 c9                	xor    ecx,ecx
c0004a30:	89 f2                	mov    edx,esi
c0004a32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a36:	e8 ca e9 ff ff       	call   c0003405 <remove_chain>
c0004a3b:	eb 05                	jmp    c0004a42 <f_mkdir+0xa6>
c0004a3d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a42:	83 ec 0c             	sub    esp,0xc
c0004a45:	57                   	push   edi
c0004a46:	e8 29 10 00 00       	call   c0005a74 <ff_memfree>
c0004a4b:	83 c4 10             	add    esp,0x10
c0004a4e:	e9 db 00 00 00       	jmp    c0004b2e <f_mkdir+0x192>
c0004a53:	bb 01 00 00 00       	mov    ebx,0x1
c0004a58:	83 f8 ff             	cmp    eax,0xffffffff
c0004a5b:	74 d1                	je     c0004a2e <f_mkdir+0x92>
c0004a5d:	89 f2                	mov    edx,esi
c0004a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a63:	e8 73 dd ff ff       	call   c00027db <dir_clear>
c0004a68:	89 c3                	mov    ebx,eax
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	75 c0                	jne    c0004a2e <f_mkdir+0x92>
c0004a6e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	83 c0 34             	add    eax,0x34
c0004a7f:	e8 cc d2 ff ff       	call   c0001d50 <mem_set>
c0004a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a88:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a8d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004a91:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004a95:	83 c0 4a             	add    eax,0x4a
c0004a98:	e8 9b d2 ff ff       	call   c0001d38 <st_dword>
c0004a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa1:	89 f1                	mov    ecx,esi
c0004aa3:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa6:	e8 2e e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aaf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab7:	83 c0 54             	add    eax,0x54
c0004aba:	e8 7c d2 ff ff       	call   c0001d3b <mem_cpy>
c0004abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac7:	8d 50 54             	lea    edx,[eax+0x54]
c0004aca:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ace:	e8 06 e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004adb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adf:	e8 42 ee ff ff       	call   c0003926 <dir_register>
c0004ae4:	89 c3                	mov    ebx,eax
c0004ae6:	85 c0                	test   eax,eax
c0004ae8:	0f 85 40 ff ff ff    	jne    c0004a2e <f_mkdir+0x92>
c0004aee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004af2:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af7:	83 c0 16             	add    eax,0x16
c0004afa:	e8 39 d2 ff ff       	call   c0001d38 <st_dword>
c0004aff:	89 f1                	mov    ecx,esi
c0004b01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b09:	e8 cb e5 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004b0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b12:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b22:	e8 4e e1 ff ff       	call   c0002c75 <sync_fs>
c0004b27:	89 c3                	mov    ebx,eax
c0004b29:	e9 14 ff ff ff       	jmp    c0004a42 <f_mkdir+0xa6>
c0004b2e:	83 c4 50             	add    esp,0x50
c0004b31:	89 d8                	mov    eax,ebx
c0004b33:	5b                   	pop    ebx
c0004b34:	5e                   	pop    esi
c0004b35:	5f                   	pop    edi
c0004b36:	c3                   	ret    

c0004b37 <f_rename>:
c0004b37:	57                   	push   edi
c0004b38:	56                   	push   esi
c0004b39:	53                   	push   ebx
c0004b3a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b40:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b47:	e8 f2 d5 ff ff       	call   c000213e <get_ldnumber>
c0004b4c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b51:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b55:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b5c:	e8 27 d8 ff ff       	call   c0002388 <mount_volume>
c0004b61:	85 c0                	test   eax,eax
c0004b63:	0f 85 7a 01 00 00    	jne    c0004ce3 <f_rename+0x1ac>
c0004b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6d:	83 ec 0c             	sub    esp,0xc
c0004b70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b74:	68 00 02 00 00       	push   0x200
c0004b79:	e8 de 0e 00 00       	call   c0005a5c <ff_memalloc>
c0004b7e:	83 c4 10             	add    esp,0x10
c0004b81:	89 c6                	mov    esi,eax
c0004b83:	b8 11 00 00 00       	mov    eax,0x11
c0004b88:	85 f6                	test   esi,esi
c0004b8a:	0f 84 53 01 00 00    	je     c0004ce3 <f_rename+0x1ac>
c0004b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b94:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ba2:	e8 eb ec ff ff       	call   c0003892 <follow_path>
c0004ba7:	85 c0                	test   eax,eax
c0004ba9:	0f 85 20 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004baf:	b8 06 00 00 00       	mov    eax,0x6
c0004bb4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb9:	0f 85 10 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004bbf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bcc:	e8 6a d1 ff ff       	call   c0001d3b <mem_cpy>
c0004bd1:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bda:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bde:	e8 58 d1 ff ff       	call   c0001d3b <mem_cpy>
c0004be3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 9f ec ff ff       	call   c0003892 <follow_path>
c0004bf3:	85 c0                	test   eax,eax
c0004bf5:	75 20                	jne    c0004c17 <f_rename+0xe0>
c0004bf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bfb:	b8 08 00 00 00       	mov    eax,0x8
c0004c00:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c04:	0f 85 c5 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c0a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c15:	eb 03                	jmp    c0004c1a <f_rename+0xe3>
c0004c17:	83 f8 04             	cmp    eax,0x4
c0004c1a:	0f 85 af 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c24:	e8 fd ec ff ff       	call   c0003926 <dir_register>
c0004c29:	85 c0                	test   eax,eax
c0004c2b:	0f 85 9e 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c31:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c38:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c40:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c44:	e8 f2 d0 ff ff       	call   c0001d3b <mem_cpy>
c0004c49:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4d:	a8 10                	test   al,0x10
c0004c4f:	75 03                	jne    c0004c54 <f_rename+0x11d>
c0004c51:	83 c8 20             	or     eax,0x20
c0004c54:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c63:	74 54                	je     c0004cb9 <f_rename+0x182>
c0004c65:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c69:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6d:	74 4a                	je     c0004cb9 <f_rename+0x182>
c0004c6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c73:	89 da                	mov    edx,ebx
c0004c75:	8a 07                	mov    al,BYTE PTR [edi]
c0004c77:	e8 34 e4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004c7c:	89 c2                	mov    edx,eax
c0004c7e:	89 f8                	mov    eax,edi
c0004c80:	e8 d0 d2 ff ff       	call   c0001f55 <clst2sect>
c0004c85:	89 c2                	mov    edx,eax
c0004c87:	b8 02 00 00 00       	mov    eax,0x2
c0004c8c:	85 d2                	test   edx,edx
c0004c8e:	74 3f                	je     c0004ccf <f_rename+0x198>
c0004c90:	89 f8                	mov    eax,edi
c0004c92:	e8 9e d5 ff ff       	call   c0002235 <move_window>
c0004c97:	85 c0                	test   eax,eax
c0004c99:	75 34                	jne    c0004ccf <f_rename+0x198>
c0004c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9f:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca3:	75 14                	jne    c0004cb9 <f_rename+0x182>
c0004ca5:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cac:	e8 28 e4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cbd:	e8 4f ea ff ff       	call   c0003711 <dir_remove>
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 09                	jne    c0004ccf <f_rename+0x198>
c0004cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cca:	e8 a6 df ff ff       	call   c0002c75 <sync_fs>
c0004ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd3:	83 ec 0c             	sub    esp,0xc
c0004cd6:	56                   	push   esi
c0004cd7:	e8 98 0d 00 00       	call   c0005a74 <ff_memfree>
c0004cdc:	83 c4 10             	add    esp,0x10
c0004cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce9:	5b                   	pop    ebx
c0004cea:	5e                   	pop    esi
c0004ceb:	5f                   	pop    edi
c0004cec:	c3                   	ret    

c0004ced <f_chmod>:
c0004ced:	57                   	push   edi
c0004cee:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf3:	56                   	push   esi
c0004cf4:	53                   	push   ebx
c0004cf5:	83 ec 50             	sub    esp,0x50
c0004cf8:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004cfc:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d00:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d04:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d08:	e8 7b d6 ff ff       	call   c0002388 <mount_volume>
c0004d0d:	85 c0                	test   eax,eax
c0004d0f:	75 7e                	jne    c0004d8f <f_chmod+0xa2>
c0004d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d15:	83 ec 0c             	sub    esp,0xc
c0004d18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d1c:	68 00 02 00 00       	push   0x200
c0004d21:	e8 36 0d 00 00       	call   c0005a5c <ff_memalloc>
c0004d26:	83 c4 10             	add    esp,0x10
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	b8 11 00 00 00       	mov    eax,0x11
c0004d30:	85 f6                	test   esi,esi
c0004d32:	74 5b                	je     c0004d8f <f_chmod+0xa2>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d3c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d43:	e8 4a eb ff ff       	call   c0003892 <follow_path>
c0004d48:	85 c0                	test   eax,eax
c0004d4a:	75 2f                	jne    c0004d7b <f_chmod+0x8e>
c0004d4c:	b8 06 00 00 00       	mov    eax,0x6
c0004d51:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d56:	75 23                	jne    c0004d7b <f_chmod+0x8e>
c0004d58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d5c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5f:	21 fb                	and    ebx,edi
c0004d61:	83 e3 27             	and    ebx,0x27
c0004d64:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d67:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d76:	e8 fa de ff ff       	call   c0002c75 <sync_fs>
c0004d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7f:	83 ec 0c             	sub    esp,0xc
c0004d82:	56                   	push   esi
c0004d83:	e8 ec 0c 00 00       	call   c0005a74 <ff_memfree>
c0004d88:	83 c4 10             	add    esp,0x10
c0004d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8f:	83 c4 50             	add    esp,0x50
c0004d92:	5b                   	pop    ebx
c0004d93:	5e                   	pop    esi
c0004d94:	5f                   	pop    edi
c0004d95:	c3                   	ret    

c0004d96 <f_utime>:
c0004d96:	56                   	push   esi
c0004d97:	b9 02 00 00 00       	mov    ecx,0x2
c0004d9c:	53                   	push   ebx
c0004d9d:	83 ec 54             	sub    esp,0x54
c0004da0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dac:	e8 d7 d5 ff ff       	call   c0002388 <mount_volume>
c0004db1:	85 c0                	test   eax,eax
c0004db3:	0f 85 85 00 00 00    	jne    c0004e3e <f_utime+0xa8>
c0004db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dbd:	83 ec 0c             	sub    esp,0xc
c0004dc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc4:	68 00 02 00 00       	push   0x200
c0004dc9:	e8 8e 0c 00 00       	call   c0005a5c <ff_memalloc>
c0004dce:	83 c4 10             	add    esp,0x10
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	b8 11 00 00 00       	mov    eax,0x11
c0004dd8:	85 db                	test   ebx,ebx
c0004dda:	74 62                	je     c0004e3e <f_utime+0xa8>
c0004ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004deb:	e8 a2 ea ff ff       	call   c0003892 <follow_path>
c0004df0:	85 c0                	test   eax,eax
c0004df2:	75 36                	jne    c0004e2a <f_utime+0x94>
c0004df4:	b8 06 00 00 00       	mov    eax,0x6
c0004df9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfe:	75 2a                	jne    c0004e2a <f_utime+0x94>
c0004e00:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e04:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e08:	c1 e2 10             	shl    edx,0x10
c0004e0b:	09 c2                	or     edx,eax
c0004e0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e11:	83 c0 16             	add    eax,0x16
c0004e14:	e8 1f cf ff ff       	call   c0001d38 <st_dword>
c0004e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e25:	e8 4b de ff ff       	call   c0002c75 <sync_fs>
c0004e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2e:	83 ec 0c             	sub    esp,0xc
c0004e31:	53                   	push   ebx
c0004e32:	e8 3d 0c 00 00       	call   c0005a74 <ff_memfree>
c0004e37:	83 c4 10             	add    esp,0x10
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	83 c4 54             	add    esp,0x54
c0004e41:	5b                   	pop    ebx
c0004e42:	5e                   	pop    esi
c0004e43:	c3                   	ret    

c0004e44 <f_getlabel>:
c0004e44:	55                   	push   ebp
c0004e45:	31 c9                	xor    ecx,ecx
c0004e47:	57                   	push   edi
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	83 ec 5c             	sub    esp,0x5c
c0004e4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e55:	e8 2e d5 ff ff       	call   c0002388 <mount_volume>
c0004e5a:	89 c6                	mov    esi,eax
c0004e5c:	85 c0                	test   eax,eax
c0004e5e:	0f 85 27 01 00 00    	jne    c0004f8b <f_getlabel+0x147>
c0004e64:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e69:	0f 84 d1 00 00 00    	je     c0004f40 <f_getlabel+0xfc>
c0004e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e73:	31 d2                	xor    edx,edx
c0004e75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e85:	e8 79 e3 ff ff       	call   c0003203 <dir_sdi>
c0004e8a:	85 c0                	test   eax,eax
c0004e8c:	0f 85 a2 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004e92:	ba 01 00 00 00       	mov    edx,0x1
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 54 e7 ff ff       	call   c00035f4 <dir_read>
c0004ea0:	85 c0                	test   eax,eax
c0004ea2:	0f 85 8c 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004ea8:	31 db                	xor    ebx,ebx
c0004eaa:	31 c9                	xor    ecx,ecx
c0004eac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec1:	e8 ca ce ff ff       	call   c0001d90 <dbc_1st>
c0004ec6:	85 c0                	test   eax,eax
c0004ec8:	74 16                	je     c0004ee0 <f_getlabel+0x9c>
c0004eca:	83 ff 0b             	cmp    edi,0xb
c0004ecd:	74 11                	je     c0004ee0 <f_getlabel+0x9c>
c0004ecf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edb:	c1 e0 08             	shl    eax,0x8
c0004ede:	09 c2                	or     edx,eax
c0004ee0:	0f b7 d2             	movzx  edx,dx
c0004ee3:	50                   	push   eax
c0004ee4:	50                   	push   eax
c0004ee5:	68 b5 01 00 00       	push   0x1b5
c0004eea:	52                   	push   edx
c0004eeb:	e8 3c 0c 00 00       	call   c0005b2c <ff_oem2uni>
c0004ef0:	83 c4 10             	add    esp,0x10
c0004ef3:	66 85 c0             	test   ax,ax
c0004ef6:	74 25                	je     c0004f1d <f_getlabel+0xd9>
c0004ef8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efc:	0f b7 c0             	movzx  eax,ax
c0004eff:	01 da                	add    edx,ebx
c0004f01:	b9 04 00 00 00       	mov    ecx,0x4
c0004f06:	e8 51 cf ff ff       	call   c0001e5c <put_utf>
c0004f0b:	84 c0                	test   al,al
c0004f0d:	74 0e                	je     c0004f1d <f_getlabel+0xd9>
c0004f0f:	0f b6 c0             	movzx  eax,al
c0004f12:	01 c3                	add    ebx,eax
c0004f14:	83 ff 0b             	cmp    edi,0xb
c0004f17:	74 06                	je     c0004f1f <f_getlabel+0xdb>
c0004f19:	89 f9                	mov    ecx,edi
c0004f1b:	eb 8f                	jmp    c0004eac <f_getlabel+0x68>
c0004f1d:	31 db                	xor    ebx,ebx
c0004f1f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f26:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f2a:	74 14                	je     c0004f40 <f_getlabel+0xfc>
c0004f2c:	4b                   	dec    ebx
c0004f2d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f30:	74 f1                	je     c0004f23 <f_getlabel+0xdf>
c0004f32:	eb 0c                	jmp    c0004f40 <f_getlabel+0xfc>
c0004f34:	83 f8 04             	cmp    eax,0x4
c0004f37:	75 50                	jne    c0004f89 <f_getlabel+0x145>
c0004f39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f40:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f45:	74 44                	je     c0004f8b <f_getlabel+0x147>
c0004f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f4e:	e8 e2 d2 ff ff       	call   c0002235 <move_window>
c0004f53:	89 c6                	mov    esi,eax
c0004f55:	85 c0                	test   eax,eax
c0004f57:	75 32                	jne    c0004f8b <f_getlabel+0x147>
c0004f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f5d:	b8 43 00 00 00       	mov    eax,0x43
c0004f62:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f64:	80 f9 03             	cmp    cl,0x3
c0004f67:	74 0f                	je     c0004f78 <f_getlabel+0x134>
c0004f69:	31 c0                	xor    eax,eax
c0004f6b:	80 f9 04             	cmp    cl,0x4
c0004f6e:	0f 94 c0             	sete   al
c0004f71:	48                   	dec    eax
c0004f72:	83 e0 c3             	and    eax,0xffffffc3
c0004f75:	83 c0 64             	add    eax,0x64
c0004f78:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f7c:	e8 9b cd ff ff       	call   c0001d1c <ld_dword>
c0004f81:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f85:	89 07                	mov    DWORD PTR [edi],eax
c0004f87:	eb 02                	jmp    c0004f8b <f_getlabel+0x147>
c0004f89:	89 c6                	mov    esi,eax
c0004f8b:	83 c4 5c             	add    esp,0x5c
c0004f8e:	89 f0                	mov    eax,esi
c0004f90:	5b                   	pop    ebx
c0004f91:	5e                   	pop    esi
c0004f92:	5f                   	pop    edi
c0004f93:	5d                   	pop    ebp
c0004f94:	c3                   	ret    

c0004f95 <f_setlabel>:
c0004f95:	56                   	push   esi
c0004f96:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9b:	53                   	push   ebx
c0004f9c:	83 ec 54             	sub    esp,0x54
c0004f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fa7:	e8 dc d3 ff ff       	call   c0002388 <mount_volume>
c0004fac:	89 c6                	mov    esi,eax
c0004fae:	85 c0                	test   eax,eax
c0004fb0:	0f 85 67 01 00 00    	jne    c000511d <f_setlabel+0x188>
c0004fb6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbb:	ba 20 00 00 00       	mov    edx,0x20
c0004fc0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc4:	31 db                	xor    ebx,ebx
c0004fc6:	e8 85 cd ff ff       	call   c0001d50 <mem_set>
c0004fcb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fcf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd2:	76 5b                	jbe    c000502f <f_setlabel+0x9a>
c0004fd4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd8:	e8 b9 cd ff ff       	call   c0001d96 <tchar2uni>
c0004fdd:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe2:	76 0a                	jbe    c0004fee <f_setlabel+0x59>
c0004fe4:	be 06 00 00 00       	mov    esi,0x6
c0004fe9:	e9 2f 01 00 00       	jmp    c000511d <f_setlabel+0x188>
c0004fee:	83 ec 0c             	sub    esp,0xc
c0004ff1:	50                   	push   eax
c0004ff2:	e8 ad 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ff7:	5a                   	pop    edx
c0004ff8:	59                   	pop    ecx
c0004ff9:	68 b5 01 00 00       	push   0x1b5
c0004ffe:	50                   	push   eax
c0004fff:	e8 88 0a 00 00       	call   c0005a8c <ff_uni2oem>
c0005004:	83 c4 10             	add    esp,0x10
c0005007:	89 c6                	mov    esi,eax
c0005009:	66 85 c0             	test   ax,ax
c000500c:	74 d6                	je     c0004fe4 <f_setlabel+0x4f>
c000500e:	0f b7 d0             	movzx  edx,ax
c0005011:	b8 90 ec 01 c0       	mov    eax,0xc001ec90
c0005016:	e8 63 cd ff ff       	call   c0001d7e <chk_chr>
c000501b:	85 c0                	test   eax,eax
c000501d:	75 c5                	jne    c0004fe4 <f_setlabel+0x4f>
c000501f:	66 81 fe ff 00       	cmp    si,0xff
c0005024:	0f 87 c9 00 00 00    	ja     c00050f3 <f_setlabel+0x15e>
c000502a:	e9 e4 00 00 00       	jmp    c0005113 <f_setlabel+0x17e>
c000502f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005034:	74 ae                	je     c0004fe4 <f_setlabel+0x4f>
c0005036:	85 db                	test   ebx,ebx
c0005038:	74 0e                	je     c0005048 <f_setlabel+0xb3>
c000503a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000503d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005042:	75 04                	jne    c0005048 <f_setlabel+0xb3>
c0005044:	89 c3                	mov    ebx,eax
c0005046:	eb ee                	jmp    c0005036 <f_setlabel+0xa1>
c0005048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504c:	31 d2                	xor    edx,edx
c000504e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005052:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000505a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000505e:	e8 a0 e1 ff ff       	call   c0003203 <dir_sdi>
c0005063:	89 c6                	mov    esi,eax
c0005065:	85 c0                	test   eax,eax
c0005067:	0f 85 b0 00 00 00    	jne    c000511d <f_setlabel+0x188>
c000506d:	ba 01 00 00 00       	mov    edx,0x1
c0005072:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005076:	e8 79 e5 ff ff       	call   c00035f4 <dir_read>
c000507b:	85 c0                	test   eax,eax
c000507d:	75 18                	jne    c0005097 <f_setlabel+0x102>
c000507f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005083:	85 db                	test   ebx,ebx
c0005085:	74 0b                	je     c0005092 <f_setlabel+0xfd>
c0005087:	b9 0b 00 00 00       	mov    ecx,0xb
c000508c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005090:	eb 47                	jmp    c00050d9 <f_setlabel+0x144>
c0005092:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005095:	eb 47                	jmp    c00050de <f_setlabel+0x149>
c0005097:	83 f8 04             	cmp    eax,0x4
c000509a:	75 53                	jne    c00050ef <f_setlabel+0x15a>
c000509c:	85 db                	test   ebx,ebx
c000509e:	74 7d                	je     c000511d <f_setlabel+0x188>
c00050a0:	ba 01 00 00 00       	mov    edx,0x1
c00050a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a9:	e8 e5 e4 ff ff       	call   c0003593 <dir_alloc>
c00050ae:	89 c6                	mov    esi,eax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	75 69                	jne    c000511d <f_setlabel+0x188>
c00050b4:	b9 20 00 00 00       	mov    ecx,0x20
c00050b9:	31 d2                	xor    edx,edx
c00050bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050bf:	e8 8c cc ff ff       	call   c0001d50 <mem_set>
c00050c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050cd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050d1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d9:	e8 5d cc ff ff       	call   c0001d3b <mem_cpy>
c00050de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ea:	e8 86 db ff ff       	call   c0002c75 <sync_fs>
c00050ef:	89 c6                	mov    esi,eax
c00050f1:	eb 2a                	jmp    c000511d <f_setlabel+0x188>
c00050f3:	83 fb 09             	cmp    ebx,0x9
c00050f6:	0f 87 e8 fe ff ff    	ja     c0004fe4 <f_setlabel+0x4f>
c00050fc:	89 f0                	mov    eax,esi
c00050fe:	66 c1 e8 08          	shr    ax,0x8
c0005102:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005106:	43                   	inc    ebx
c0005107:	89 f0                	mov    eax,esi
c0005109:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000510d:	43                   	inc    ebx
c000510e:	e9 b8 fe ff ff       	jmp    c0004fcb <f_setlabel+0x36>
c0005113:	83 fb 0a             	cmp    ebx,0xa
c0005116:	76 ef                	jbe    c0005107 <f_setlabel+0x172>
c0005118:	e9 c7 fe ff ff       	jmp    c0004fe4 <f_setlabel+0x4f>
c000511d:	89 f0                	mov    eax,esi
c000511f:	83 c4 54             	add    esp,0x54
c0005122:	5b                   	pop    ebx
c0005123:	5e                   	pop    esi
c0005124:	c3                   	ret    

c0005125 <f_expand>:
c0005125:	55                   	push   ebp
c0005126:	57                   	push   edi
c0005127:	56                   	push   esi
c0005128:	53                   	push   ebx
c0005129:	83 ec 2c             	sub    esp,0x2c
c000512c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005130:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005138:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513c:	89 d8                	mov    eax,ebx
c000513e:	e8 48 d0 ff ff       	call   c000218b <validate>
c0005143:	89 c6                	mov    esi,eax
c0005145:	85 c0                	test   eax,eax
c0005147:	0f 85 2e 01 00 00    	jne    c000527b <f_expand+0x156>
c000514d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005151:	85 f6                	test   esi,esi
c0005153:	0f 85 22 01 00 00    	jne    c000527b <f_expand+0x156>
c0005159:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000515e:	75 0a                	jne    c000516a <f_expand+0x45>
c0005160:	be 07 00 00 00       	mov    esi,0x7
c0005165:	e9 11 01 00 00       	jmp    c000527b <f_expand+0x156>
c000516a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000516e:	75 f0                	jne    c0005160 <f_expand+0x3b>
c0005170:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005174:	74 ea                	je     c0005160 <f_expand+0x3b>
c0005176:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000517e:	c1 e1 09             	shl    ecx,0x9
c0005181:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005184:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005188:	0f 95 c0             	setne  al
c000518b:	31 d2                	xor    edx,edx
c000518d:	0f b6 c0             	movzx  eax,al
c0005190:	89 c7                	mov    edi,eax
c0005192:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005196:	f7 f1                	div    ecx
c0005198:	01 f8                	add    eax,edi
c000519a:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c000519d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a1:	83 ff 01             	cmp    edi,0x1
c00051a4:	76 05                	jbe    c00051ab <f_expand+0x86>
c00051a6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051a9:	77 05                	ja     c00051b0 <f_expand+0x8b>
c00051ab:	bf 02 00 00 00       	mov    edi,0x2
c00051b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b3:	89 fd                	mov    ebp,edi
c00051b5:	31 c9                	xor    ecx,ecx
c00051b7:	89 ea                	mov    edx,ebp
c00051b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051bf:	45                   	inc    ebp
c00051c0:	e8 3c df ff ff       	call   c0003101 <get_fat.isra.2>
c00051c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051cd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d0:	77 05                	ja     c00051d7 <f_expand+0xb2>
c00051d2:	bd 02 00 00 00       	mov    ebp,0x2
c00051d7:	83 f8 01             	cmp    eax,0x1
c00051da:	74 20                	je     c00051fc <f_expand+0xd7>
c00051dc:	83 f8 ff             	cmp    eax,0xffffffff
c00051df:	74 22                	je     c0005203 <f_expand+0xde>
c00051e1:	85 c0                	test   eax,eax
c00051e3:	75 09                	jne    c00051ee <f_expand+0xc9>
c00051e5:	41                   	inc    ecx
c00051e6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ea:	75 07                	jne    c00051f3 <f_expand+0xce>
c00051ec:	eb 1c                	jmp    c000520a <f_expand+0xe5>
c00051ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f1:	31 c9                	xor    ecx,ecx
c00051f3:	39 fd                	cmp    ebp,edi
c00051f5:	75 c0                	jne    c00051b7 <f_expand+0x92>
c00051f7:	e9 64 ff ff ff       	jmp    c0005160 <f_expand+0x3b>
c00051fc:	be 02 00 00 00       	mov    esi,0x2
c0005201:	eb 78                	jmp    c000527b <f_expand+0x156>
c0005203:	be 01 00 00 00       	mov    esi,0x1
c0005208:	eb 71                	jmp    c000527b <f_expand+0x156>
c000520a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000520f:	74 2b                	je     c000523c <f_expand+0x117>
c0005211:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005214:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005218:	85 ed                	test   ebp,ebp
c000521a:	74 24                	je     c0005240 <f_expand+0x11b>
c000521c:	83 c9 ff             	or     ecx,0xffffffff
c000521f:	83 fd 01             	cmp    ebp,0x1
c0005222:	74 03                	je     c0005227 <f_expand+0x102>
c0005224:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005227:	89 fa                	mov    edx,edi
c0005229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522d:	e8 59 d4 ff ff       	call   c000268b <put_fat>
c0005232:	85 c0                	test   eax,eax
c0005234:	75 43                	jne    c0005279 <f_expand+0x154>
c0005236:	89 f8                	mov    eax,edi
c0005238:	4d                   	dec    ebp
c0005239:	47                   	inc    edi
c000523a:	eb dc                	jmp    c0005218 <f_expand+0xf3>
c000523c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000523f:	48                   	dec    eax
c0005240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005244:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005249:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524c:	74 2d                	je     c000527b <f_expand+0x156>
c000524e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005252:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005255:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005258:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000525f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005268:	39 c8                	cmp    eax,ecx
c000526a:	77 0f                	ja     c000527b <f_expand+0x156>
c000526c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005270:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005274:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005277:	eb 02                	jmp    c000527b <f_expand+0x156>
c0005279:	89 c6                	mov    esi,eax
c000527b:	83 c4 2c             	add    esp,0x2c
c000527e:	89 f0                	mov    eax,esi
c0005280:	5b                   	pop    ebx
c0005281:	5e                   	pop    esi
c0005282:	5f                   	pop    edi
c0005283:	5d                   	pop    ebp
c0005284:	c3                   	ret    

c0005285 <f_mkfs>:
c0005285:	55                   	push   ebp
c0005286:	57                   	push   edi
c0005287:	bf 0b 00 00 00       	mov    edi,0xb
c000528c:	56                   	push   esi
c000528d:	53                   	push   ebx
c000528e:	83 ec 4c             	sub    esp,0x4c
c0005291:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0005295:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 9c ce ff ff       	call   c000213e <get_ldnumber>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 88 a6 07 00 00    	js     c0005a50 <f_mkfs+0x7cb>
c00052aa:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b1:	85 d2                	test   edx,edx
c00052b3:	74 03                	je     c00052b8 <f_mkfs+0x33>
c00052b5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052b8:	85 db                	test   ebx,ebx
c00052ba:	75 05                	jne    c00052c1 <f_mkfs+0x3c>
c00052bc:	bb 80 ec 01 c0       	mov    ebx,0xc001ec80
c00052c1:	83 ec 0c             	sub    esp,0xc
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	bf 03 00 00 00       	mov    edi,0x3
c00052cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d4:	e8 e8 c9 ff ff       	call   c0001cc1 <disk_initialize>
c00052d9:	83 c4 10             	add    esp,0x10
c00052dc:	a8 01                	test   al,0x1
c00052de:	0f 85 6c 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052e4:	bf 0a 00 00 00       	mov    edi,0xa
c00052e9:	a8 04                	test   al,0x4
c00052eb:	0f 85 5f 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052f1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052f8:	85 c0                	test   eax,eax
c00052fa:	75 20                	jne    c000531c <f_mkfs+0x97>
c00052fc:	51                   	push   ecx
c00052fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005301:	50                   	push   eax
c0005302:	6a 03                	push   0x3
c0005304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005308:	e8 e3 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c000530d:	83 c4 10             	add    esp,0x10
c0005310:	85 c0                	test   eax,eax
c0005312:	74 08                	je     c000531c <f_mkfs+0x97>
c0005314:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005320:	8d 42 ff             	lea    eax,[edx-0x1]
c0005323:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005328:	77 04                	ja     c000532e <f_mkfs+0xa9>
c000532a:	85 c2                	test   edx,eax
c000532c:	74 08                	je     c0005336 <f_mkfs+0xb1>
c000532e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005336:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005339:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000533d:	48                   	dec    eax
c000533e:	3c 01                	cmp    al,0x1
c0005340:	76 05                	jbe    c0005347 <f_mkfs+0xc2>
c0005342:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000534e:	48                   	dec    eax
c000534f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005354:	77 07                	ja     c000535d <f_mkfs+0xd8>
c0005356:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535b:	74 08                	je     c0005365 <f_mkfs+0xe0>
c000535d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005365:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005368:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000536e:	77 07                	ja     c0005377 <f_mkfs+0xf2>
c0005370:	8d 47 ff             	lea    eax,[edi-0x1]
c0005373:	85 f8                	test   eax,edi
c0005375:	74 02                	je     c0005379 <f_mkfs+0xf4>
c0005377:	31 ff                	xor    edi,edi
c0005379:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005381:	77 0a                	ja     c000538d <f_mkfs+0x108>
c0005383:	bf 11 00 00 00       	mov    edi,0x11
c0005388:	e9 c3 06 00 00       	jmp    c0005a50 <f_mkfs+0x7cb>
c000538d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000538f:	89 ee                	mov    esi,ebp
c0005391:	85 ed                	test   ebp,ebp
c0005393:	75 1b                	jne    c00053b0 <f_mkfs+0x12b>
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539c:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a1:	50                   	push   eax
c00053a2:	e8 b5 06 00 00       	call   c0005a5c <ff_memalloc>
c00053a7:	83 c4 10             	add    esp,0x10
c00053aa:	89 c6                	mov    esi,eax
c00053ac:	85 c0                	test   eax,eax
c00053ae:	74 d3                	je     c0005383 <f_mkfs+0xfe>
c00053b0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053b8:	52                   	push   edx
c00053b9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053bd:	50                   	push   eax
c00053be:	6a 01                	push   0x1
c00053c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c4:	e8 27 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c00053c9:	83 c4 10             	add    esp,0x10
c00053cc:	85 c0                	test   eax,eax
c00053ce:	0f 85 25 06 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00053d4:	88 d8                	mov    al,bl
c00053d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053de:	24 08                	and    al,0x8
c00053e0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e4:	75 18                	jne    c00053fe <f_mkfs+0x179>
c00053e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ea:	83 f8 3f             	cmp    eax,0x3f
c00053ed:	76 0f                	jbe    c00053fe <f_mkfs+0x179>
c00053ef:	83 e8 3f             	sub    eax,0x3f
c00053f2:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00053fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005406:	83 f8 7f             	cmp    eax,0x7f
c0005409:	0f 86 52 02 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000540f:	b9 80 00 00 00       	mov    ecx,0x80
c0005414:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541a:	77 05                	ja     c0005421 <f_mkfs+0x19c>
c000541c:	89 f9                	mov    ecx,edi
c000541e:	c1 e9 09             	shr    ecx,0x9
c0005421:	88 d8                	mov    al,bl
c0005423:	83 e0 01             	and    eax,0x1
c0005426:	80 e3 02             	and    bl,0x2
c0005429:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000542d:	74 0a                	je     c0005439 <f_mkfs+0x1b4>
c000542f:	84 c0                	test   al,al
c0005431:	0f 84 4c 01 00 00    	je     c0005583 <f_mkfs+0x2fe>
c0005437:	eb 38                	jmp    c0005471 <f_mkfs+0x1ec>
c0005439:	bf 13 00 00 00       	mov    edi,0x13
c000543e:	84 c0                	test   al,al
c0005440:	75 2f                	jne    c0005471 <f_mkfs+0x1ec>
c0005442:	e9 c9 05 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c0005447:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544c:	0f 85 08 02 00 00    	jne    c000565a <f_mkfs+0x3d5>
c0005452:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005457:	0f 86 e1 01 00 00    	jbe    c000563e <f_mkfs+0x3b9>
c000545d:	85 c9                	test   ecx,ecx
c000545f:	0f 85 bd 05 00 00    	jne    c0005a22 <f_mkfs+0x79d>
c0005465:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005468:	83 f9 40             	cmp    ecx,0x40
c000546b:	0f 87 c1 05 00 00    	ja     c0005a32 <f_mkfs+0x7ad>
c0005471:	89 cf                	mov    edi,ecx
c0005473:	85 c9                	test   ecx,ecx
c0005475:	75 1d                	jne    c0005494 <f_mkfs+0x20f>
c0005477:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547b:	ba 60 ec 01 c0       	mov    edx,0xc001ec60
c0005480:	c1 eb 0c             	shr    ebx,0xc
c0005483:	bf 01 00 00 00       	mov    edi,0x1
c0005488:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548b:	66 85 c0             	test   ax,ax
c000548e:	0f 85 5f 01 00 00    	jne    c00055f3 <f_mkfs+0x36e>
c0005494:	31 d2                	xor    edx,edx
c0005496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549a:	f7 f7                	div    edi
c000549c:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a1:	0f 86 5e 01 00 00    	jbe    c0005605 <f_mkfs+0x380>
c00054a7:	83 c0 02             	add    eax,0x2
c00054aa:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054af:	01 c0                	add    eax,eax
c00054b1:	05 ff 01 00 00       	add    eax,0x1ff
c00054b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054be:	c1 e8 09             	shr    eax,0x9
c00054c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054c9:	c1 e0 05             	shl    eax,0x5
c00054cc:	c1 e8 09             	shr    eax,0x9
c00054cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ec:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00054fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005501:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005505:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005509:	f7 d8                	neg    eax
c000550b:	21 c3                	and    ebx,eax
c000550d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005511:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005516:	0f 85 fc 00 00 00    	jne    c0005618 <f_mkfs+0x393>
c000551c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005520:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005524:	89 f8                	mov    eax,edi
c0005526:	c1 e0 04             	shl    eax,0x4
c0005529:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000552d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005531:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005535:	0f 82 26 01 00 00    	jb     c0005661 <f_mkfs+0x3dc>
c000553b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000553f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005543:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005547:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005550:	29 d0                	sub    eax,edx
c0005552:	31 d2                	xor    edx,edx
c0005554:	f7 f7                	div    edi
c0005556:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555b:	89 c3                	mov    ebx,eax
c000555d:	0f 85 e4 fe ff ff    	jne    c0005447 <f_mkfs+0x1c2>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 87 02 01 00 00    	ja     c0005670 <f_mkfs+0x3eb>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 eb 00 00 00    	jne    c0005661 <f_mkfs+0x3dc>
c0005576:	83 ff 01             	cmp    edi,0x1
c0005579:	0f 86 e2 00 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000557f:	89 f9                	mov    ecx,edi
c0005581:	d1 e9                	shr    ecx,1
c0005583:	89 cb                	mov    ebx,ecx
c0005585:	85 c9                	test   ecx,ecx
c0005587:	75 26                	jne    c00055af <f_mkfs+0x32a>
c0005589:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000558d:	ba 70 ec 01 c0       	mov    edx,0xc001ec70
c0005592:	c1 eb 11             	shr    ebx,0x11
c0005595:	b9 01 00 00 00       	mov    ecx,0x1
c000559a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000559d:	66 85 c0             	test   ax,ax
c00055a0:	74 0b                	je     c00055ad <f_mkfs+0x328>
c00055a2:	83 c2 02             	add    edx,0x2
c00055a5:	39 d8                	cmp    eax,ebx
c00055a7:	77 04                	ja     c00055ad <f_mkfs+0x328>
c00055a9:	01 c9                	add    ecx,ecx
c00055ab:	eb ed                	jmp    c000559a <f_mkfs+0x315>
c00055ad:	31 db                	xor    ebx,ebx
c00055af:	31 d2                	xor    edx,edx
c00055b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b5:	f7 f1                	div    ecx
c00055b7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055be:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c3:	c1 ea 09             	shr    edx,0x9
c00055c6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055cf:	0f 87 8c 00 00 00    	ja     c0005661 <f_mkfs+0x3dc>
c00055d5:	89 cf                	mov    edi,ecx
c00055d7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055df:	89 d9                	mov    ecx,ebx
c00055e1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055e9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055ee:	e9 e0 fe ff ff       	jmp    c00054d3 <f_mkfs+0x24e>
c00055f3:	83 c2 02             	add    edx,0x2
c00055f6:	39 d8                	cmp    eax,ebx
c00055f8:	0f 87 96 fe ff ff    	ja     c0005494 <f_mkfs+0x20f>
c00055fe:	01 ff                	add    edi,edi
c0005600:	e9 83 fe ff ff       	jmp    c0005488 <f_mkfs+0x203>
c0005605:	8d 04 40             	lea    eax,[eax+eax*2]
c0005608:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000560d:	40                   	inc    eax
c000560e:	d1 e8                	shr    eax,1
c0005610:	83 c0 03             	add    eax,0x3
c0005613:	e9 99 fe ff ff       	jmp    c00054b1 <f_mkfs+0x22c>
c0005618:	31 d2                	xor    edx,edx
c000561a:	89 d8                	mov    eax,ebx
c000561c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005620:	85 d2                	test   edx,edx
c0005622:	74 09                	je     c000562d <f_mkfs+0x3a8>
c0005624:	4b                   	dec    ebx
c0005625:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005629:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000562d:	89 d8                	mov    eax,ebx
c000562f:	31 d2                	xor    edx,edx
c0005631:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005635:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005639:	e9 e6 fe ff ff       	jmp    c0005524 <f_mkfs+0x29f>
c000563e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005643:	77 2b                	ja     c0005670 <f_mkfs+0x3eb>
c0005645:	85 c9                	test   ecx,ecx
c0005647:	75 18                	jne    c0005661 <f_mkfs+0x3dc>
c0005649:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005652:	0f 86 19 fe ff ff    	jbe    c0005471 <f_mkfs+0x1ec>
c0005658:	eb 07                	jmp    c0005661 <f_mkfs+0x3dc>
c000565a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000565f:	76 0a                	jbe    c000566b <f_mkfs+0x3e6>
c0005661:	bf 0e 00 00 00       	mov    edi,0xe
c0005666:	e9 a5 03 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c000566b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005670:	31 d2                	xor    edx,edx
c0005672:	b9 00 02 00 00       	mov    ecx,0x200
c0005677:	89 f0                	mov    eax,esi
c0005679:	e8 d2 c6 ff ff       	call   c0001d50 <mem_set>
c000567e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005683:	ba 12 ec 01 c0       	mov    edx,0xc001ec12
c0005688:	89 f0                	mov    eax,esi
c000568a:	e8 ac c6 ff ff       	call   c0001d3b <mem_cpy>
c000568f:	8d 46 0b             	lea    eax,[esi+0xb]
c0005692:	ba 00 02 00 00       	mov    edx,0x200
c0005697:	e8 98 c6 ff ff       	call   c0001d34 <st_word>
c000569c:	89 f8                	mov    eax,edi
c000569e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056a9:	e8 86 c6 ff ff       	call   c0001d34 <st_word>
c00056ae:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056b7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ba:	75 08                	jne    c00056c4 <f_mkfs+0x43f>
c00056bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056c8:	8d 46 11             	lea    eax,[esi+0x11]
c00056cb:	e8 64 c6 ff ff       	call   c0001d34 <st_word>
c00056d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056da:	77 0a                	ja     c00056e6 <f_mkfs+0x461>
c00056dc:	8d 46 13             	lea    eax,[esi+0x13]
c00056df:	e8 50 c6 ff ff       	call   c0001d34 <st_word>
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0x469>
c00056e6:	8d 46 20             	lea    eax,[esi+0x20]
c00056e9:	e8 4a c6 ff ff       	call   c0001d38 <st_dword>
c00056ee:	8d 46 18             	lea    eax,[esi+0x18]
c00056f1:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f6:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fa:	e8 35 c6 ff ff       	call   c0001d34 <st_word>
c00056ff:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005702:	ba ff 00 00 00       	mov    edx,0xff
c0005707:	e8 28 c6 ff ff       	call   c0001d34 <st_word>
c000570c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000570f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005713:	e8 20 c6 ff ff       	call   c0001d38 <st_dword>
c0005718:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000571d:	75 57                	jne    c0005776 <f_mkfs+0x4f1>
c000571f:	8d 46 43             	lea    eax,[esi+0x43]
c0005722:	ba 00 00 21 50       	mov    edx,0x50210000
c0005727:	e8 0c c6 ff ff       	call   c0001d38 <st_dword>
c000572c:	8d 46 24             	lea    eax,[esi+0x24]
c000572f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005733:	e8 00 c6 ff ff       	call   c0001d38 <st_dword>
c0005738:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573b:	ba 02 00 00 00       	mov    edx,0x2
c0005740:	e8 f3 c5 ff ff       	call   c0001d38 <st_dword>
c0005745:	8d 46 30             	lea    eax,[esi+0x30]
c0005748:	ba 01 00 00 00       	mov    edx,0x1
c000574d:	e8 e2 c5 ff ff       	call   c0001d34 <st_word>
c0005752:	8d 46 32             	lea    eax,[esi+0x32]
c0005755:	ba 06 00 00 00       	mov    edx,0x6
c000575a:	e8 d5 c5 ff ff       	call   c0001d34 <st_word>
c000575f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005763:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005767:	8d 46 47             	lea    eax,[esi+0x47]
c000576a:	b9 13 00 00 00       	mov    ecx,0x13
c000576f:	ba 1e ec 01 c0       	mov    edx,0xc001ec1e
c0005774:	eb 2f                	jmp    c00057a5 <f_mkfs+0x520>
c0005776:	8d 46 27             	lea    eax,[esi+0x27]
c0005779:	ba 00 00 21 50       	mov    edx,0x50210000
c000577e:	e8 b5 c5 ff ff       	call   c0001d38 <st_dword>
c0005783:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005788:	8d 46 16             	lea    eax,[esi+0x16]
c000578b:	e8 a4 c5 ff ff       	call   c0001d34 <st_word>
c0005790:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005794:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005798:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579b:	b9 13 00 00 00       	mov    ecx,0x13
c00057a0:	ba 32 ec 01 c0       	mov    edx,0xc001ec32
c00057a5:	e8 91 c5 ff ff       	call   c0001d3b <mem_cpy>
c00057aa:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057b9:	e8 76 c5 ff ff       	call   c0001d34 <st_word>
c00057be:	6a 01                	push   0x1
c00057c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c4:	56                   	push   esi
c00057c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057c9:	e8 0c c5 ff ff       	call   c0001cda <disk_write>
c00057ce:	83 c4 10             	add    esp,0x10
c00057d1:	85 c0                	test   eax,eax
c00057d3:	0f 85 20 02 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00057d9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057de:	0f 85 98 00 00 00    	jne    c000587c <f_mkfs+0x5f7>
c00057e4:	6a 01                	push   0x1
c00057e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ea:	83 c0 06             	add    eax,0x6
c00057ed:	50                   	push   eax
c00057ee:	56                   	push   esi
c00057ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f3:	e8 e2 c4 ff ff       	call   c0001cda <disk_write>
c00057f8:	b9 00 02 00 00       	mov    ecx,0x200
c00057fd:	31 d2                	xor    edx,edx
c00057ff:	89 f0                	mov    eax,esi
c0005801:	e8 4a c5 ff ff       	call   c0001d50 <mem_set>
c0005806:	ba 52 52 61 41       	mov    edx,0x41615252
c000580b:	89 f0                	mov    eax,esi
c000580d:	e8 26 c5 ff ff       	call   c0001d38 <st_dword>
c0005812:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005818:	ba 72 72 41 61       	mov    edx,0x61417272
c000581d:	e8 16 c5 ff ff       	call   c0001d38 <st_dword>
c0005822:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005825:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582b:	e8 08 c5 ff ff       	call   c0001d38 <st_dword>
c0005830:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005836:	ba 02 00 00 00       	mov    edx,0x2
c000583b:	e8 f8 c4 ff ff       	call   c0001d38 <st_dword>
c0005840:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005845:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584b:	e8 e4 c4 ff ff       	call   c0001d34 <st_word>
c0005850:	6a 01                	push   0x1
c0005852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005856:	83 c0 07             	add    eax,0x7
c0005859:	50                   	push   eax
c000585a:	56                   	push   esi
c000585b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000585f:	e8 76 c4 ff ff       	call   c0001cda <disk_write>
c0005864:	83 c4 20             	add    esp,0x20
c0005867:	6a 01                	push   0x1
c0005869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586d:	40                   	inc    eax
c000586e:	50                   	push   eax
c000586f:	56                   	push   esi
c0005870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005874:	e8 61 c4 ff ff       	call   c0001cda <disk_write>
c0005879:	83 c4 10             	add    esp,0x10
c000587c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005880:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005884:	c1 e8 09             	shr    eax,0x9
c0005887:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000588d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005891:	31 d2                	xor    edx,edx
c0005893:	31 db                	xor    ebx,ebx
c0005895:	89 f0                	mov    eax,esi
c0005897:	e8 b4 c4 ff ff       	call   c0001d50 <mem_set>
c000589c:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a9:	0f 94 c3             	sete   bl
c00058ac:	4b                   	dec    ebx
c00058ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058b9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058be:	75 21                	jne    c00058e1 <f_mkfs+0x65c>
c00058c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 6c c4 ff ff       	call   c0001d38 <st_dword>
c00058cc:	8d 46 04             	lea    eax,[esi+0x4]
c00058cf:	83 ca ff             	or     edx,0xffffffff
c00058d2:	e8 61 c4 ff ff       	call   c0001d38 <st_dword>
c00058d7:	8d 46 08             	lea    eax,[esi+0x8]
c00058da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058df:	eb 04                	jmp    c00058e5 <f_mkfs+0x660>
c00058e1:	89 da                	mov    edx,ebx
c00058e3:	89 f0                	mov    eax,esi
c00058e5:	e8 4e c4 ff ff       	call   c0001d38 <st_dword>
c00058ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fa:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00058fe:	76 08                	jbe    c0005908 <f_mkfs+0x683>
c0005900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005908:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005910:	56                   	push   esi
c0005911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005915:	e8 c0 c3 ff ff       	call   c0001cda <disk_write>
c000591a:	83 c4 10             	add    esp,0x10
c000591d:	85 c0                	test   eax,eax
c000591f:	0f 85 d4 00 00 00    	jne    c00059f9 <f_mkfs+0x774>
c0005925:	b9 00 02 00 00       	mov    ecx,0x200
c000592a:	31 d2                	xor    edx,edx
c000592c:	89 f0                	mov    eax,esi
c000592e:	e8 1d c4 ff ff       	call   c0001d50 <mem_set>
c0005933:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005937:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000593f:	75 b1                	jne    c00058f2 <f_mkfs+0x66d>
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000594d:	40                   	inc    eax
c000594e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005952:	0f 87 61 ff ff ff    	ja     c00058b9 <f_mkfs+0x634>
c0005958:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000595d:	74 04                	je     c0005963 <f_mkfs+0x6de>
c000595f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005963:	89 fb                	mov    ebx,edi
c0005965:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005969:	76 04                	jbe    c000596f <f_mkfs+0x6ea>
c000596b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000596f:	53                   	push   ebx
c0005970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005974:	56                   	push   esi
c0005975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005979:	e8 5c c3 ff ff       	call   c0001cda <disk_write>
c000597e:	83 c4 10             	add    esp,0x10
c0005981:	85 c0                	test   eax,eax
c0005983:	75 74                	jne    c00059f9 <f_mkfs+0x774>
c0005985:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005989:	29 df                	sub    edi,ebx
c000598b:	75 d6                	jne    c0005963 <f_mkfs+0x6de>
c000598d:	b1 0c                	mov    cl,0xc
c000598f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005994:	74 18                	je     c00059ae <f_mkfs+0x729>
c0005996:	b1 06                	mov    cl,0x6
c0005998:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a0:	77 0c                	ja     c00059ae <f_mkfs+0x729>
c00059a2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059a7:	0f 94 c1             	sete   cl
c00059aa:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ae:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b3:	75 2d                	jne    c00059e2 <f_mkfs+0x75d>
c00059b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059b9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c5:	0f b6 c9             	movzx  ecx,cl
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	56                   	push   esi
c00059cc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d4:	e8 4c d3 ff ff       	call   c0002d25 <create_partition>
c00059d9:	83 c4 10             	add    esp,0x10
c00059dc:	89 c7                	mov    edi,eax
c00059de:	85 c0                	test   eax,eax
c00059e0:	75 2e                	jne    c0005a10 <f_mkfs+0x78b>
c00059e2:	31 ff                	xor    edi,edi
c00059e4:	50                   	push   eax
c00059e5:	6a 00                	push   0x0
c00059e7:	6a 00                	push   0x0
c00059e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059ed:	e8 fe c2 ff ff       	call   c0001cf0 <disk_ioctl>
c00059f2:	83 c4 10             	add    esp,0x10
c00059f5:	85 c0                	test   eax,eax
c00059f7:	74 17                	je     c0005a10 <f_mkfs+0x78b>
c00059f9:	85 ed                	test   ebp,ebp
c00059fb:	75 0c                	jne    c0005a09 <f_mkfs+0x784>
c00059fd:	83 ec 0c             	sub    esp,0xc
c0005a00:	56                   	push   esi
c0005a01:	e8 6e 00 00 00       	call   c0005a74 <ff_memfree>
c0005a06:	83 c4 10             	add    esp,0x10
c0005a09:	bf 01 00 00 00       	mov    edi,0x1
c0005a0e:	eb 40                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a10:	85 ed                	test   ebp,ebp
c0005a12:	75 3c                	jne    c0005a50 <f_mkfs+0x7cb>
c0005a14:	83 ec 0c             	sub    esp,0xc
c0005a17:	56                   	push   esi
c0005a18:	e8 57 00 00 00       	call   c0005a74 <ff_memfree>
c0005a1d:	83 c4 10             	add    esp,0x10
c0005a20:	eb 2e                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a22:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a27:	0f 85 56 fb ff ff    	jne    c0005583 <f_mkfs+0x2fe>
c0005a2d:	e9 2f fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 4c fb ff ff    	jne    c0005589 <f_mkfs+0x304>
c0005a3d:	89 cf                	mov    edi,ecx
c0005a3f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a45:	0f 86 49 fa ff ff    	jbe    c0005494 <f_mkfs+0x20f>
c0005a4b:	e9 11 fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a50:	83 c4 4c             	add    esp,0x4c
c0005a53:	89 f8                	mov    eax,edi
c0005a55:	5b                   	pop    ebx
c0005a56:	5e                   	pop    esi
c0005a57:	5f                   	pop    edi
c0005a58:	5d                   	pop    ebp
c0005a59:	c3                   	ret    
c0005a5a:	66 90                	xchg   ax,ax

c0005a5c <ff_memalloc>:
c0005a5c:	83 ec 0c             	sub    esp,0xc
c0005a5f:	83 ec 0c             	sub    esp,0xc
c0005a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a66:	e8 02 1e 00 00       	call   c000786d <malloc>
c0005a6b:	83 c4 10             	add    esp,0x10
c0005a6e:	83 c4 0c             	add    esp,0xc
c0005a71:	c3                   	ret    
c0005a72:	66 90                	xchg   ax,ax

c0005a74 <ff_memfree>:
c0005a74:	83 ec 0c             	sub    esp,0xc
c0005a77:	83 ec 0c             	sub    esp,0xc
c0005a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a7e:	e8 fa 1d 00 00       	call   c000787d <free>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	90                   	nop
c0005a87:	83 c4 0c             	add    esp,0xc
c0005a8a:	c3                   	ret    
c0005a8b:	90                   	nop

c0005a8c <ff_uni2oem>:
c0005a8c:	83 ec 14             	sub    esp,0x14
c0005a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a97:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a9e:	c7 44 24 0c 60 f0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f060
c0005aa6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aab:	77 0b                	ja     c0005ab8 <ff_uni2oem+0x2c>
c0005aad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ab6:	eb 68                	jmp    c0005b20 <ff_uni2oem+0x94>
c0005ab8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac0:	77 5e                	ja     c0005b20 <ff_uni2oem+0x94>
c0005ac2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ac8:	75 56                	jne    c0005b20 <ff_uni2oem+0x94>
c0005aca:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad1:	eb 0d                	jmp    c0005ae0 <ff_uni2oem+0x54>
c0005ad3:	90                   	nop
c0005ad4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ad9:	40                   	inc    eax
c0005ada:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005adf:	90                   	nop
c0005ae0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005ae6:	77 24                	ja     c0005b0c <ff_uni2oem+0x80>
c0005ae8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005aed:	25 ff ff 00 00       	and    eax,0xffff
c0005af2:	01 c0                	add    eax,eax
c0005af4:	89 c2                	mov    edx,eax
c0005af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afa:	01 d0                	add    eax,edx
c0005afc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005aff:	25 ff ff 00 00       	and    eax,0xffff
c0005b04:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b08:	75 ca                	jne    c0005ad4 <ff_uni2oem+0x48>
c0005b0a:	66 90                	xchg   ax,ax
c0005b0c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b11:	83 e8 80             	sub    eax,0xffffff80
c0005b14:	25 ff 00 00 00       	and    eax,0xff
c0005b19:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b1e:	66 90                	xchg   ax,ax
c0005b20:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b25:	83 c4 14             	add    esp,0x14
c0005b28:	c3                   	ret    
c0005b29:	8d 76 00             	lea    esi,[esi+0x0]

c0005b2c <ff_oem2uni>:
c0005b2c:	83 ec 18             	sub    esp,0x18
c0005b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b37:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b3c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b40:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b47:	c7 44 24 10 60 f0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f060
c0005b4f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b55:	77 0d                	ja     c0005b64 <ff_oem2uni+0x38>
c0005b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b60:	eb 36                	jmp    c0005b98 <ff_oem2uni+0x6c>
c0005b62:	66 90                	xchg   ax,ax
c0005b64:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6a:	75 2c                	jne    c0005b98 <ff_oem2uni+0x6c>
c0005b6c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b73:	77 23                	ja     c0005b98 <ff_oem2uni+0x6c>
c0005b75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b79:	25 ff ff 00 00       	and    eax,0xffff
c0005b7e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b83:	01 c0                	add    eax,eax
c0005b85:	89 c2                	mov    edx,eax
c0005b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8b:	01 d0                	add    eax,edx
c0005b8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b90:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b95:	8d 76 00             	lea    esi,[esi+0x0]
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 60 ee 01 c0       	mov    eax,0xc001ee60
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 a0 ed 01 c0       	mov    eax,0xc001eda0
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 60 ed 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe12a0]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	01 c0                	add    eax,eax
c0005c91:	89 c2                	mov    edx,eax
c0005c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c97:	01 d0                	add    eax,edx
c0005c99:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca1:	eb 4d                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca3:	90                   	nop
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d43:	89 de                	mov    esi,ebx
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d72:	c1 e6 08             	shl    esi,0x8
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 de                	mov    esi,ebx
c0005d88:	89 df                	mov    edi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 5c aa ff ff       	call   c00008c0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 52 aa ff ff       	call   c00008c0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	85 db                	test   ebx,ebx
c0005e84:	0f 95 c2             	setne  dl
c0005e87:	31 c0                	xor    eax,eax
c0005e89:	83 fb 2f             	cmp    ebx,0x2f
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 e8 a9 ff ff       	call   c00008c0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 da a9 ff ff       	call   c00008c0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	84 d2                	test   dl,dl
c0005ef9:	0f 95 c1             	setne  cl
c0005efc:	31 c0                	xor    eax,eax
c0005efe:	80 fa 2f             	cmp    dl,0x2f
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 60 f1 01 c0       	push   0xc001f160
c0005f1d:	e8 ca 2c 01 00       	call   c0018bec <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f42:	83 f8 10             	cmp    eax,0x10
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 6e f1 01 c0       	push   0xc001f16e
c0005f55:	e8 92 2c 01 00       	call   c0018bec <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 fb 2b 01 00       	call   c0018b90 <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcb:	50                   	push   eax
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 72 a8 ff ff       	call   c00008c0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 ee                	mov    esi,ebp
c0006056:	89 04 24             	mov    DWORD PTR [esp],eax
c0006059:	e8 62 a8 ff ff       	call   c00008c0 <tolower>
c000605e:	83 c4 10             	add    esp,0x10
c0006061:	29 c7                	sub    edi,eax
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006088:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006090:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 5b 01 00 00       	jmp    c0006225 <find_object+0x1b2>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c00060ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006103:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006107:	89 ca                	mov    edx,ecx
c0006109:	85 f6                	test   esi,esi
c000610b:	74 2b                	je     c0006138 <find_object+0xc5>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c1 00 00 00    	je     c00061e2 <find_object+0x16f>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	0f 8e dc 00 00 00    	jle    c0006212 <find_object+0x19f>
c0006136:	eb b3                	jmp    c00060eb <find_object+0x78>
c0006138:	0f b6 f0             	movzx  esi,al
c000613b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000613f:	29 ce                	sub    esi,ecx
c0006141:	80 e2 01             	and    dl,0x1
c0006144:	74 05                	je     c000614b <find_object+0xd8>
c0006146:	83 ee 21             	sub    esi,0x21
c0006149:	eb 55                	jmp    c00061a0 <find_object+0x12d>
c000614b:	47                   	inc    edi
c000614c:	83 ee 22             	sub    esi,0x22
c000614f:	eb 4f                	jmp    c00061a0 <find_object+0x12d>
c0006151:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006154:	48                   	dec    eax
c0006155:	3c 01                	cmp    al,0x1
c0006157:	77 4c                	ja     c00061a5 <find_object+0x132>
c0006159:	50                   	push   eax
c000615a:	6a 02                	push   0x2
c000615c:	68 7d f1 01 c0       	push   0xc001f17d
c0006161:	57                   	push   edi
c0006162:	e8 e9 a5 ff ff       	call   c0000750 <strncmp>
c0006167:	83 c4 10             	add    esp,0x10
c000616a:	85 c0                	test   eax,eax
c000616c:	75 2a                	jne    c0006198 <find_object+0x125>
c000616e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006172:	8d 42 fb             	lea    eax,[edx-0x5]
c0006175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006179:	50                   	push   eax
c000617a:	8d 47 05             	lea    eax,[edi+0x5]
c000617d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006181:	50                   	push   eax
c0006182:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006186:	50                   	push   eax
c0006187:	e8 94 a4 ff ff       	call   c0000620 <strncpy>
c000618c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006190:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c0006195:	83 c4 10             	add    esp,0x10
c0006198:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000619c:	29 c6                	sub    esi,eax
c000619e:	01 c7                	add    edi,eax
c00061a0:	83 fe 03             	cmp    esi,0x3
c00061a3:	7f ac                	jg     c0006151 <find_object+0xde>
c00061a5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061aa:	7e 40                	jle    c00061ec <find_object+0x179>
c00061ac:	51                   	push   ecx
c00061ad:	51                   	push   ecx
c00061ae:	6a 2f                	push   0x2f
c00061b0:	55                   	push   ebp
c00061b1:	e8 6a a5 ff ff       	call   c0000720 <strchr>
c00061b6:	83 c4 10             	add    esp,0x10
c00061b9:	85 c0                	test   eax,eax
c00061bb:	74 04                	je     c00061c1 <find_object+0x14e>
c00061bd:	29 e8                	sub    eax,ebp
c00061bf:	eb 0c                	jmp    c00061cd <find_object+0x15a>
c00061c1:	83 ec 0c             	sub    esp,0xc
c00061c4:	55                   	push   ebp
c00061c5:	e8 66 a3 ff ff       	call   c0000530 <strlen>
c00061ca:	83 c4 10             	add    esp,0x10
c00061cd:	52                   	push   edx
c00061ce:	50                   	push   eax
c00061cf:	55                   	push   ebp
c00061d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061d4:	50                   	push   eax
c00061d5:	e8 3a fe ff ff       	call   c0006014 <strnicmp>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	e9 37 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061e6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061ea:	eb 1e                	jmp    c000620a <find_object+0x197>
c00061ec:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f0:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f3:	89 e9                	mov    ecx,ebp
c00061f5:	e8 a6 fc ff ff       	call   c0005ea0 <fncompare>
c00061fa:	85 c0                	test   eax,eax
c00061fc:	0f 85 1f ff ff ff    	jne    c0006121 <find_object+0xae>
c0006202:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006206:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000620a:	0f 85 11 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006210:	eb 13                	jmp    c0006225 <find_object+0x1b2>
c0006212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006216:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000621a:	0f 8f b2 fe ff ff    	jg     c00060d2 <find_object+0x5f>
c0006220:	e9 c6 fe ff ff       	jmp    c00060eb <find_object+0x78>
c0006225:	81 c4 2c 01 00 00    	add    esp,0x12c
c000622b:	89 d8                	mov    eax,ebx
c000622d:	5b                   	pop    ebx
c000622e:	5e                   	pop    esi
c000622f:	5f                   	pop    edi
c0006230:	5d                   	pop    ebp
c0006231:	c3                   	ret    

c0006232 <find_object_path>:
c0006232:	55                   	push   ebp
c0006233:	57                   	push   edi
c0006234:	89 d7                	mov    edi,edx
c0006236:	56                   	push   esi
c0006237:	89 c6                	mov    esi,eax
c0006239:	53                   	push   ebx
c000623a:	89 cb                	mov    ebx,ecx
c000623c:	83 ec 0c             	sub    esp,0xc
c000623f:	50                   	push   eax
c0006240:	50                   	push   eax
c0006241:	6a 2f                	push   0x2f
c0006243:	56                   	push   esi
c0006244:	e8 d7 a4 ff ff       	call   c0000720 <strchr>
c0006249:	83 c4 10             	add    esp,0x10
c000624c:	89 c5                	mov    ebp,eax
c000624e:	85 c0                	test   eax,eax
c0006250:	74 3a                	je     c000628c <find_object_path+0x5a>
c0006252:	39 ee                	cmp    esi,ebp
c0006254:	74 31                	je     c0006287 <find_object_path+0x55>
c0006256:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006259:	e8 a5 fb ff ff       	call   c0005e03 <iso_733>
c000625e:	89 c2                	mov    edx,eax
c0006260:	8d 43 02             	lea    eax,[ebx+0x2]
c0006263:	e8 9b fb ff ff       	call   c0005e03 <iso_733>
c0006268:	83 ec 0c             	sub    esp,0xc
c000626b:	89 c1                	mov    ecx,eax
c000626d:	52                   	push   edx
c000626e:	89 f0                	mov    eax,esi
c0006270:	ba 01 00 00 00       	mov    edx,0x1
c0006275:	e8 f9 fd ff ff       	call   c0006073 <find_object>
c000627a:	83 c4 10             	add    esp,0x10
c000627d:	89 c3                	mov    ebx,eax
c000627f:	85 c0                	test   eax,eax
c0006281:	75 04                	jne    c0006287 <find_object_path+0x55>
c0006283:	31 db                	xor    ebx,ebx
c0006285:	eb 36                	jmp    c00062bd <find_object_path+0x8b>
c0006287:	8d 75 01             	lea    esi,[ebp+0x1]
c000628a:	eb b3                	jmp    c000623f <find_object_path+0xd>
c000628c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000628f:	74 28                	je     c00062b9 <find_object_path+0x87>
c0006291:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006294:	e8 6a fb ff ff       	call   c0005e03 <iso_733>
c0006299:	89 c2                	mov    edx,eax
c000629b:	8d 43 02             	lea    eax,[ebx+0x2]
c000629e:	e8 60 fb ff ff       	call   c0005e03 <iso_733>
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 c1                	mov    ecx,eax
c00062a8:	52                   	push   edx
c00062a9:	89 f0                	mov    eax,esi
c00062ab:	89 fa                	mov    edx,edi
c00062ad:	e8 c1 fd ff ff       	call   c0006073 <find_object>
c00062b2:	83 c4 10             	add    esp,0x10
c00062b5:	89 c3                	mov    ebx,eax
c00062b7:	eb 04                	jmp    c00062bd <find_object_path+0x8b>
c00062b9:	85 ff                	test   edi,edi
c00062bb:	74 c6                	je     c0006283 <find_object_path+0x51>
c00062bd:	83 c4 0c             	add    esp,0xc
c00062c0:	89 d8                	mov    eax,ebx
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <stricmp>:
c00062c7:	57                   	push   edi
c00062c8:	56                   	push   esi
c00062c9:	31 f6                	xor    esi,esi
c00062cb:	53                   	push   ebx
c00062cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d0:	83 ec 0c             	sub    esp,0xc
c00062d3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062df:	50                   	push   eax
c00062e0:	e8 bb a5 ff ff       	call   c00008a0 <toupper>
c00062e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e8:	e8 d3 a5 ff ff       	call   c00008c0 <tolower>
c00062ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f0:	89 c3                	mov    ebx,eax
c00062f2:	e8 a9 a5 ff ff       	call   c00008a0 <toupper>
c00062f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062fa:	e8 c1 a5 ff ff       	call   c00008c0 <tolower>
c00062ff:	83 c4 10             	add    esp,0x10
c0006302:	39 c3                	cmp    ebx,eax
c0006304:	75 05                	jne    c000630b <stricmp+0x44>
c0006306:	46                   	inc    esi
c0006307:	85 db                	test   ebx,ebx
c0006309:	75 c1                	jne    c00062cc <stricmp+0x5>
c000630b:	29 c3                	sub    ebx,eax
c000630d:	89 d8                	mov    eax,ebx
c000630f:	5b                   	pop    ebx
c0006310:	5e                   	pop    esi
c0006311:	5f                   	pop    edi
c0006312:	c3                   	ret    

c0006313 <iso_open>:
c0006313:	57                   	push   edi
c0006314:	31 c0                	xor    eax,eax
c0006316:	56                   	push   esi
c0006317:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000631c:	53                   	push   ebx
c000631d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006322:	0f 95 c0             	setne  al
c0006325:	89 c2                	mov    edx,eax
c0006327:	89 c6                	mov    esi,eax
c0006329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000632d:	e8 00 ff ff ff       	call   c0006232 <find_object_path>
c0006332:	83 ca ff             	or     edx,0xffffffff
c0006335:	85 c0                	test   eax,eax
c0006337:	74 5e                	je     c0006397 <iso_open+0x84>
c0006339:	89 c1                	mov    ecx,eax
c000633b:	31 d2                	xor    edx,edx
c000633d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006343:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000634a:	75 42                	jne    c000638e <iso_open+0x7b>
c000634c:	8d 41 02             	lea    eax,[ecx+0x2]
c000634f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006359:	e8 a5 fa ff ff       	call   c0005e03 <iso_733>
c000635e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006364:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000636a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006374:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006377:	e8 87 fa ff ff       	call   c0005e03 <iso_733>
c000637c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006386:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000638c:	eb 09                	jmp    c0006397 <iso_open+0x84>
c000638e:	42                   	inc    edx
c000638f:	83 fa 10             	cmp    edx,0x10
c0006392:	75 a9                	jne    c000633d <iso_open+0x2a>
c0006394:	83 ca ff             	or     edx,0xffffffff
c0006397:	5b                   	pop    ebx
c0006398:	89 d0                	mov    eax,edx
c000639a:	5e                   	pop    esi
c000639b:	5f                   	pop    edi
c000639c:	c3                   	ret    

c000639d <iso_close>:
c000639d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a1:	83 f8 0f             	cmp    eax,0xf
c00063a4:	7f 10                	jg     c00063b6 <iso_close+0x19>
c00063a6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063ac:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063b6:	e9 5a fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063bb <iso_read>:
c00063bb:	55                   	push   ebp
c00063bc:	57                   	push   edi
c00063bd:	56                   	push   esi
c00063be:	53                   	push   ebx
c00063bf:	83 ec 1c             	sub    esp,0x1c
c00063c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c6:	83 fd 0f             	cmp    ebp,0xf
c00063c9:	7e 0a                	jle    c00063d5 <iso_read+0x1a>
c00063cb:	83 c8 ff             	or     eax,0xffffffff
c00063ce:	89 c2                	mov    edx,eax
c00063d0:	e9 f4 00 00 00       	jmp    c00064c9 <iso_read+0x10e>
c00063d5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063db:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063e2:	74 e7                	je     c00063cb <iso_read+0x10>
c00063e4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063ea:	85 d2                	test   edx,edx
c00063ec:	75 dd                	jne    c00063cb <iso_read+0x10>
c00063ee:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063f3:	0f 84 cd 00 00 00    	je     c00064c6 <iso_read+0x10b>
c00063f9:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063ff:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006405:	29 c1                	sub    ecx,eax
c0006407:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000640b:	76 04                	jbe    c0006411 <iso_read+0x56>
c000640d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006411:	85 c9                	test   ecx,ecx
c0006413:	0f 84 ad 00 00 00    	je     c00064c6 <iso_read+0x10b>
c0006419:	89 c6                	mov    esi,eax
c000641b:	bb 00 08 00 00       	mov    ebx,0x800
c0006420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006426:	c1 e8 0b             	shr    eax,0xb
c0006429:	29 f3                	sub    ebx,esi
c000642b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006431:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006437:	7e 3f                	jle    c0006478 <iso_read+0xbd>
c0006439:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000643f:	75 37                	jne    c0006478 <iso_read+0xbd>
c0006441:	be 20 00 00 00       	mov    esi,0x20
c0006446:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000644c:	7f 05                	jg     c0006453 <iso_read+0x98>
c000644e:	89 ce                	mov    esi,ecx
c0006450:	c1 fe 0b             	sar    esi,0xb
c0006453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006457:	89 f3                	mov    ebx,esi
c0006459:	c1 e3 0b             	shl    ebx,0xb
c000645c:	52                   	push   edx
c000645d:	56                   	push   esi
c000645e:	50                   	push   eax
c000645f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006463:	e8 11 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	85 c0                	test   eax,eax
c000646d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006471:	7f 3e                	jg     c00064b1 <iso_read+0xf6>
c0006473:	e9 53 ff ff ff       	jmp    c00063cb <iso_read+0x10>
c0006478:	39 cb                	cmp    ebx,ecx
c000647a:	7e 02                	jle    c000647e <iso_read+0xc3>
c000647c:	89 cb                	mov    ebx,ecx
c000647e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006482:	e8 84 fb ff ff       	call   c000600b <bdread>
c0006487:	85 c0                	test   eax,eax
c0006489:	0f 88 3c ff ff ff    	js     c00063cb <iso_read+0x10>
c000648f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006496:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000649a:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064a0:	25 ff 07 00 00       	and    eax,0x7ff
c00064a5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a9:	89 d9                	mov    ecx,ebx
c00064ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064b1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064b5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064bb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064bf:	01 da                	add    edx,ebx
c00064c1:	e9 28 ff ff ff       	jmp    c00063ee <iso_read+0x33>
c00064c6:	89 d0                	mov    eax,edx
c00064c8:	99                   	cdq    
c00064c9:	83 c4 1c             	add    esp,0x1c
c00064cc:	5b                   	pop    ebx
c00064cd:	5e                   	pop    esi
c00064ce:	5f                   	pop    edi
c00064cf:	5d                   	pop    ebp
c00064d0:	c3                   	ret    

c00064d1 <iso_seek>:
c00064d1:	55                   	push   ebp
c00064d2:	83 c8 ff             	or     eax,0xffffffff
c00064d5:	57                   	push   edi
c00064d6:	89 c2                	mov    edx,eax
c00064d8:	56                   	push   esi
c00064d9:	53                   	push   ebx
c00064da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e6:	83 fe 0f             	cmp    esi,0xf
c00064e9:	7f 65                	jg     c0006550 <iso_seek+0x7f>
c00064eb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064f1:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064f7:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064fe:	74 50                	je     c0006550 <iso_seek+0x7f>
c0006500:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006507:	75 47                	jne    c0006550 <iso_seek+0x7f>
c0006509:	83 fb 01             	cmp    ebx,0x1
c000650c:	74 0e                	je     c000651c <iso_seek+0x4b>
c000650e:	83 fb 02             	cmp    ebx,0x2
c0006511:	74 0e                	je     c0006521 <iso_seek+0x50>
c0006513:	85 db                	test   ebx,ebx
c0006515:	75 39                	jne    c0006550 <iso_seek+0x7f>
c0006517:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000651a:	eb 0d                	jmp    c0006529 <iso_seek+0x58>
c000651c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000651f:	eb 08                	jmp    c0006529 <iso_seek+0x58>
c0006521:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006524:	01 f8                	add    eax,edi
c0006526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006529:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000652f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006535:	05 40 35 02 c0       	add    eax,0xc0023540
c000653a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000653d:	76 03                	jbe    c0006542 <iso_seek+0x71>
c000653f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006542:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006548:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000654e:	31 d2                	xor    edx,edx
c0006550:	5b                   	pop    ebx
c0006551:	5e                   	pop    esi
c0006552:	5f                   	pop    edi
c0006553:	5d                   	pop    ebp
c0006554:	c3                   	ret    

c0006555 <iso_tell>:
c0006555:	83 c8 ff             	or     eax,0xffffffff
c0006558:	53                   	push   ebx
c0006559:	89 c2                	mov    edx,eax
c000655b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000655f:	83 f9 0f             	cmp    ecx,0xf
c0006562:	7f 20                	jg     c0006584 <iso_tell+0x2f>
c0006564:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000656a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006571:	74 11                	je     c0006584 <iso_tell+0x2f>
c0006573:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000657a:	75 08                	jne    c0006584 <iso_tell+0x2f>
c000657c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006582:	31 d2                	xor    edx,edx
c0006584:	5b                   	pop    ebx
c0006585:	c3                   	ret    

c0006586 <iso_total>:
c0006586:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000658a:	83 c8 ff             	or     eax,0xffffffff
c000658d:	83 fa 0f             	cmp    edx,0xf
c0006590:	7f 1e                	jg     c00065b0 <iso_total+0x2a>
c0006592:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006598:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c000659f:	74 0f                	je     c00065b0 <iso_total+0x2a>
c00065a1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065a8:	75 06                	jne    c00065b0 <iso_total+0x2a>
c00065aa:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065b0:	c3                   	ret    

c00065b1 <fn_postprocess>:
c00065b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065b5:	89 d0                	mov    eax,edx
c00065b7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065b9:	80 f9 3b             	cmp    cl,0x3b
c00065bc:	74 07                	je     c00065c5 <fn_postprocess+0x14>
c00065be:	84 c9                	test   cl,cl
c00065c0:	74 03                	je     c00065c5 <fn_postprocess+0x14>
c00065c2:	40                   	inc    eax
c00065c3:	eb f2                	jmp    c00065b7 <fn_postprocess+0x6>
c00065c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065c8:	39 d0                	cmp    eax,edx
c00065ca:	76 0a                	jbe    c00065d6 <fn_postprocess+0x25>
c00065cc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065d0:	75 04                	jne    c00065d6 <fn_postprocess+0x25>
c00065d2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065d6:	c3                   	ret    

c00065d7 <iso_readdir>:
c00065d7:	55                   	push   ebp
c00065d8:	57                   	push   edi
c00065d9:	56                   	push   esi
c00065da:	53                   	push   ebx
c00065db:	83 ec 1c             	sub    esp,0x1c
c00065de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065e2:	83 fb 0f             	cmp    ebx,0xf
c00065e5:	7f 28                	jg     c000660f <iso_readdir+0x38>
c00065e7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065ed:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065f3:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065fa:	74 13                	je     c000660f <iso_readdir+0x38>
c00065fc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006600:	74 0d                	je     c000660f <iso_readdir+0x38>
c0006602:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006609:	0f 84 b1 00 00 00    	je     c00066c0 <iso_readdir+0xe9>
c000660f:	83 ec 0c             	sub    esp,0xc
c0006612:	68 80 f1 01 c0       	push   0xc001f180
c0006617:	e8 d0 25 01 00       	call   c0018bec <iso_kprintf>
c000661c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000661f:	e8 e4 25 01 00       	call   c0018c08 <iso_kprintfd>
c0006624:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000662a:	c7 04 24 85 f1 01 c0 	mov    DWORD PTR [esp],0xc001f185
c0006631:	e8 b6 25 01 00       	call   c0018bec <iso_kprintf>
c0006636:	5d                   	pop    ebp
c0006637:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000663d:	e8 c6 25 01 00       	call   c0018c08 <iso_kprintfd>
c0006642:	c7 04 24 8b f1 01 c0 	mov    DWORD PTR [esp],0xc001f18b
c0006649:	e8 9e 25 01 00       	call   c0018bec <iso_kprintf>
c000664e:	58                   	pop    eax
c000664f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006655:	e8 ae 25 01 00       	call   c0018c08 <iso_kprintfd>
c000665a:	c7 04 24 91 f1 01 c0 	mov    DWORD PTR [esp],0xc001f191
c0006661:	e8 86 25 01 00       	call   c0018bec <iso_kprintf>
c0006666:	58                   	pop    eax
c0006667:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000666d:	e8 96 25 01 00       	call   c0018c08 <iso_kprintfd>
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	eb 42                	jmp    c00066b9 <iso_readdir+0xe2>
c0006677:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000667a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006681:	89 d1                	mov    ecx,edx
c0006683:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006689:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000668d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006690:	75 35                	jne    c00066c7 <iso_readdir+0xf0>
c0006692:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006698:	81 c2 00 08 00 00    	add    edx,0x800
c000669e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066a1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066a4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066a7:	73 1e                	jae    c00066c7 <iso_readdir+0xf0>
c00066a9:	c1 ea 0b             	shr    edx,0xb
c00066ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00066ae:	01 d0                	add    eax,edx
c00066b0:	e8 4d f9 ff ff       	call   c0006002 <biread>
c00066b5:	85 c0                	test   eax,eax
c00066b7:	79 be                	jns    c0006677 <iso_readdir+0xa0>
c00066b9:	31 c0                	xor    eax,eax
c00066bb:	e9 66 01 00 00       	jmp    c0006826 <iso_readdir+0x24f>
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	83 c8 ff             	or     eax,0xffffffff
c00066c5:	eb da                	jmp    c00066a1 <iso_readdir+0xca>
c00066c7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066cd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066d3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066d9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066dc:	73 db                	jae    c00066b9 <iso_readdir+0xe2>
c00066de:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066e2:	75 34                	jne    c0006718 <iso_readdir+0x141>
c00066e4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066e8:	75 2e                	jne    c0006718 <iso_readdir+0x141>
c00066ea:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066ed:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066f4:	01 f9                	add    ecx,edi
c00066f6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066f9:	89 c8                	mov    eax,ecx
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006705:	01 c8                	add    eax,ecx
c0006707:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670a:	25 ff 07 00 00       	and    eax,0x7ff
c000670f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006713:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006716:	74 a1                	je     c00066b9 <iso_readdir+0xe2>
c0006718:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000671e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006722:	8d 56 21             	lea    edx,[esi+0x21]
c0006725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006729:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000672f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006736:	74 0c                	je     c0006744 <iso_readdir+0x16d>
c0006738:	89 e8                	mov    eax,ebp
c000673a:	e8 17 f6 ff ff       	call   c0005d56 <ucs2utfn>
c000673f:	e9 a6 00 00 00       	jmp    c00067ea <iso_readdir+0x213>
c0006744:	57                   	push   edi
c0006745:	51                   	push   ecx
c0006746:	52                   	push   edx
c0006747:	55                   	push   ebp
c0006748:	e8 d3 9e ff ff       	call   c0000620 <strncpy>
c000674d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006751:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006757:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000675a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006762:	e8 4a fe ff ff       	call   c00065b1 <fn_postprocess>
c0006767:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000676b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000676e:	83 c4 10             	add    esp,0x10
c0006771:	29 d0                	sub    eax,edx
c0006773:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006777:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000677b:	74 05                	je     c0006782 <iso_readdir+0x1ab>
c000677d:	83 e8 21             	sub    eax,0x21
c0006780:	eb 04                	jmp    c0006786 <iso_readdir+0x1af>
c0006782:	47                   	inc    edi
c0006783:	83 e8 22             	sub    eax,0x22
c0006786:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000678a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006794:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006799:	7e 4f                	jle    c00067ea <iso_readdir+0x213>
c000679b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000679e:	48                   	dec    eax
c000679f:	3c 01                	cmp    al,0x1
c00067a1:	77 47                	ja     c00067ea <iso_readdir+0x213>
c00067a3:	52                   	push   edx
c00067a4:	6a 02                	push   0x2
c00067a6:	68 7d f1 01 c0       	push   0xc001f17d
c00067ab:	57                   	push   edi
c00067ac:	e8 9f 9f ff ff       	call   c0000750 <strncmp>
c00067b1:	83 c4 10             	add    esp,0x10
c00067b4:	85 c0                	test   eax,eax
c00067b6:	75 26                	jne    c00067de <iso_readdir+0x207>
c00067b8:	50                   	push   eax
c00067b9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067bd:	83 e8 05             	sub    eax,0x5
c00067c0:	50                   	push   eax
c00067c1:	8d 47 05             	lea    eax,[edi+0x5]
c00067c4:	50                   	push   eax
c00067c5:	55                   	push   ebp
c00067c6:	e8 55 9e ff ff       	call   c0000620 <strncpy>
c00067cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	83 c4 10             	add    esp,0x10
c00067d6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067de:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067e6:	01 c7                	add    edi,eax
c00067e8:	eb aa                	jmp    c0006794 <iso_readdir+0x1bd>
c00067ea:	83 c8 ff             	or     eax,0xffffffff
c00067ed:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067f1:	89 c2                	mov    edx,eax
c00067f3:	75 0a                	jne    c00067ff <iso_readdir+0x228>
c00067f5:	8d 46 0a             	lea    eax,[esi+0xa]
c00067f8:	e8 06 f6 ff ff       	call   c0005e03 <iso_733>
c00067fd:	31 d2                	xor    edx,edx
c00067ff:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006805:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000680b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006811:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006817:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000681a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000681d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006821:	05 50 35 02 c0       	add    eax,0xc0023550
c0006826:	83 c4 1c             	add    esp,0x1c
c0006829:	5b                   	pop    ebx
c000682a:	5e                   	pop    esi
c000682b:	5f                   	pop    edi
c000682c:	5d                   	pop    ebp
c000682d:	c3                   	ret    

c000682e <iso_reset>:
c000682e:	83 ec 18             	sub    esp,0x18
c0006831:	68 9a f1 01 c0       	push   0xc001f19a
c0006836:	e8 b1 23 01 00       	call   c0018bec <iso_kprintf>
c000683b:	e8 0d f7 ff ff       	call   c0005f4d <iso_break_all>
c0006840:	e8 06 f7 ff ff       	call   c0005f4b <bclear>
c0006845:	31 c0                	xor    eax,eax
c0006847:	83 c4 1c             	add    esp,0x1c
c000684a:	c3                   	ret    

c000684b <init_percd>:
c000684b:	57                   	push   edi
c000684c:	56                   	push   esi
c000684d:	53                   	push   ebx
c000684e:	bb 01 00 00 00       	mov    ebx,0x1
c0006853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006857:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000685c:	e8 cd ff ff ff       	call   c000682e <iso_reset>
c0006861:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000686b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006870:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006874:	e8 89 f7 ff ff       	call   c0006002 <biread>
c0006879:	89 c6                	mov    esi,eax
c000687b:	85 c0                	test   eax,eax
c000687d:	0f 88 ba 00 00 00    	js     c000693d <init_percd+0xf2>
c0006883:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000688a:	83 c0 04             	add    eax,0x4
c000688d:	52                   	push   edx
c000688e:	6a 06                	push   0x6
c0006890:	68 a5 f1 01 c0       	push   0xc001f1a5
c0006895:	50                   	push   eax
c0006896:	e8 e5 9a ff ff       	call   c0000380 <memcmp>
c000689b:	83 c4 10             	add    esp,0x10
c000689e:	85 c0                	test   eax,eax
c00068a0:	74 08                	je     c00068aa <init_percd+0x5f>
c00068a2:	43                   	inc    ebx
c00068a3:	83 fb 04             	cmp    ebx,0x4
c00068a6:	75 c3                	jne    c000686b <init_percd+0x20>
c00068a8:	eb 1a                	jmp    c00068c4 <init_percd+0x79>
c00068aa:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068b1:	83 c0 5c             	add    eax,0x5c
c00068b4:	e8 1b f5 ff ff       	call   c0005dd4 <isjoliet>
c00068b9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068be:	85 c0                	test   eax,eax
c00068c0:	74 e0                	je     c00068a2 <init_percd+0x57>
c00068c2:	eb 3e                	jmp    c0006902 <init_percd+0xb7>
c00068c4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068cb:	75 35                	jne    c0006902 <init_percd+0xb7>
c00068cd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068d2:	83 c0 10             	add    eax,0x10
c00068d5:	e8 28 f7 ff ff       	call   c0006002 <biread>
c00068da:	89 c6                	mov    esi,eax
c00068dc:	85 c0                	test   eax,eax
c00068de:	78 5f                	js     c000693f <init_percd+0xf4>
c00068e0:	83 cb ff             	or     ebx,0xffffffff
c00068e3:	50                   	push   eax
c00068e4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068eb:	6a 06                	push   0x6
c00068ed:	83 c0 04             	add    eax,0x4
c00068f0:	68 ac f1 01 c0       	push   0xc001f1ac
c00068f5:	50                   	push   eax
c00068f6:	e8 85 9a ff ff       	call   c0000380 <memcmp>
c00068fb:	83 c4 10             	add    esp,0x10
c00068fe:	85 c0                	test   eax,eax
c0006900:	75 3d                	jne    c000693f <init_percd+0xf4>
c0006902:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006909:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000690e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006914:	b9 22 00 00 00       	mov    ecx,0x22
c0006919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000691b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006920:	31 db                	xor    ebx,ebx
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000692c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006931:	e8 cd f4 ff ff       	call   c0005e03 <iso_733>
c0006936:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000693b:	eb 02                	jmp    c000693f <init_percd+0xf4>
c000693d:	89 c3                	mov    ebx,eax
c000693f:	89 d8                	mov    eax,ebx
c0006941:	5b                   	pop    ebx
c0006942:	5e                   	pop    esi
c0006943:	5f                   	pop    edi
c0006944:	c3                   	ret    

c0006945 <iso_ioctl>:
c0006945:	83 ec 18             	sub    esp,0x18
c0006948:	68 b3 f1 01 c0       	push   0xc001f1b3
c000694d:	e8 9a 22 01 00       	call   c0018bec <iso_kprintf>
c0006952:	e8 d7 fe ff ff       	call   c000682e <iso_reset>
c0006957:	31 c0                	xor    eax,eax
c0006959:	83 c4 1c             	add    esp,0x1c
c000695c:	c3                   	ret    

c000695d <fs_iso9660_init>:
c000695d:	53                   	push   ebx
c000695e:	31 db                	xor    ebx,ebx
c0006960:	83 ec 14             	sub    esp,0x14
c0006963:	68 be f1 01 c0       	push   0xc001f1be
c0006968:	e8 7f 22 01 00       	call   c0018bec <iso_kprintf>
c000696d:	83 c4 0c             	add    esp,0xc
c0006970:	68 40 09 00 00       	push   0x940
c0006975:	6a 00                	push   0x0
c0006977:	68 40 35 02 c0       	push   0xc0023540
c000697c:	e8 3f 9b ff ff       	call   c00004c0 <memset>
c0006981:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006988:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006992:	e8 d6 0e 00 00       	call   c000786d <malloc>
c0006997:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000699e:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069a3:	e8 c5 0e 00 00       	call   c000786d <malloc>
c00069a8:	83 c4 10             	add    esp,0x10
c00069ab:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069b0:	83 ec 0c             	sub    esp,0xc
c00069b3:	68 04 08 00 00       	push   0x804
c00069b8:	e8 b0 0e 00 00       	call   c000786d <malloc>
c00069bd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069c4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069ca:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069d1:	e8 97 0e 00 00       	call   c000786d <malloc>
c00069d6:	83 c4 10             	add    esp,0x10
c00069d9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069e0:	43                   	inc    ebx
c00069e1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069e7:	83 fb 10             	cmp    ebx,0x10
c00069ea:	75 c4                	jne    c00069b0 <fs_iso9660_init+0x53>
c00069ec:	31 c0                	xor    eax,eax
c00069ee:	83 c4 08             	add    esp,0x8
c00069f1:	5b                   	pop    ebx
c00069f2:	c3                   	ret    

c00069f3 <fs_iso9660_shutdown>:
c00069f3:	53                   	push   ebx
c00069f4:	31 db                	xor    ebx,ebx
c00069f6:	83 ec 08             	sub    esp,0x8
c00069f9:	83 ec 0c             	sub    esp,0xc
c00069fc:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a03:	e8 75 0e 00 00       	call   c000787d <free>
c0006a08:	58                   	pop    eax
c0006a09:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a10:	43                   	inc    ebx
c0006a11:	e8 67 0e 00 00       	call   c000787d <free>
c0006a16:	83 c4 10             	add    esp,0x10
c0006a19:	83 fb 10             	cmp    ebx,0x10
c0006a1c:	75 db                	jne    c00069f9 <fs_iso9660_shutdown+0x6>
c0006a1e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a23:	85 c0                	test   eax,eax
c0006a25:	74 0c                	je     c0006a33 <fs_iso9660_shutdown+0x40>
c0006a27:	83 ec 0c             	sub    esp,0xc
c0006a2a:	50                   	push   eax
c0006a2b:	e8 4d 0e 00 00       	call   c000787d <free>
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a38:	85 c0                	test   eax,eax
c0006a3a:	74 0c                	je     c0006a48 <fs_iso9660_shutdown+0x55>
c0006a3c:	83 ec 0c             	sub    esp,0xc
c0006a3f:	50                   	push   eax
c0006a40:	e8 38 0e 00 00       	call   c000787d <free>
c0006a45:	83 c4 10             	add    esp,0x10
c0006a48:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a52:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a5c:	31 c0                	xor    eax,eax
c0006a5e:	83 c4 08             	add    esp,0x8
c0006a61:	5b                   	pop    ebx
c0006a62:	c3                   	ret    
c0006a63:	90                   	nop

c0006a64 <Computer::close(int, int, void*)>:
c0006a64:	57                   	push   edi
c0006a65:	56                   	push   esi
c0006a66:	53                   	push   ebx
c0006a67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a73:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a79:	83 ec 0c             	sub    esp,0xc
c0006a7c:	50                   	push   eax
c0006a7d:	e8 e8 50 00 00       	call   c000bb6a <Device::closeAll()>
c0006a82:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a88:	83 c4 10             	add    esp,0x10
c0006a8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a8d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a91:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a99:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006aa1:	5b                   	pop    ebx
c0006aa2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006aa5:	5e                   	pop    esi
c0006aa6:	5f                   	pop    edi
c0006aa7:	ff e0                	jmp    eax

c0006aa9 <Krnl::firstTask()>:
c0006aa9:	53                   	push   ebx
c0006aaa:	83 ec 14             	sub    esp,0x14
c0006aad:	fb                   	sti    
c0006aae:	68 cf f1 01 c0       	push   0xc001f1cf
c0006ab3:	e8 9f 92 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006ab8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006abf:	e8 a9 0d 00 00       	call   c000786d <malloc>
c0006ac4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006acb:	89 c3                	mov    ebx,eax
c0006acd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ad2:	50                   	push   eax
c0006ad3:	68 e8 f1 01 c0       	push   0xc001f1e8
c0006ad8:	6a 01                	push   0x1
c0006ada:	53                   	push   ebx
c0006adb:	e8 b0 db 00 00       	call   c0014690 <Process::Process(bool, char const*, Process*, char**)>
c0006ae0:	83 c4 20             	add    esp,0x20
c0006ae3:	68 ff 00 00 00       	push   0xff
c0006ae8:	6a 00                	push   0x0
c0006aea:	68 c1 72 00 c0       	push   0xc00072c1
c0006aef:	53                   	push   ebx
c0006af0:	e8 c3 dd 00 00       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c0006af5:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006afb:	6a 7a                	push   0x7a
c0006afd:	6a 00                	push   0x0
c0006aff:	68 34 53 01 c0       	push   0xc0015334
c0006b04:	52                   	push   edx
c0006b05:	e8 ae dd 00 00       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c0006b0a:	83 c4 20             	add    esp,0x20
c0006b0d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b12:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b19:	e8 6a 9a 00 00       	call   c0010588 <KeInitRand()>
c0006b1e:	83 ec 0c             	sub    esp,0xc
c0006b21:	68 e4 f2 01 c0       	push   0xc001f2e4
c0006b26:	e8 2c 92 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006b2b:	e8 e3 eb 00 00       	call   c0015713 <Vm::initialise8086()>
c0006b30:	e8 7b 3e 00 00       	call   c000a9b0 <Fs::initVFS()>
c0006b35:	c7 04 24 f5 f1 01 c0 	mov    DWORD PTR [esp],0xc001f1f5
c0006b3c:	e8 16 92 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006b41:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b46:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b4e:	6a 00                	push   0x0
c0006b50:	6a 00                	push   0x0
c0006b52:	6a 00                	push   0x0
c0006b54:	50                   	push   eax
c0006b55:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b58:	83 c4 14             	add    esp,0x14
c0006b5b:	68 e4 f2 01 c0       	push   0xc001f2e4
c0006b60:	e8 f2 91 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006b65:	e8 c8 96 00 00       	call   c0010232 <Krnl::loadSystemEnv()>
c0006b6a:	e8 25 99 00 00       	call   c0010494 <Krnl::setupPowerManager()>
c0006b6f:	83 c4 0c             	add    esp,0xc
c0006b72:	6a 3a                	push   0x3a
c0006b74:	68 0f f2 01 c0       	push   0xc001f20f
c0006b79:	68 18 f2 01 c0       	push   0xc001f218
c0006b7e:	e8 5c be 00 00       	call   c00129df <Reg::readIntWithDefault(char*, char*, int)>
c0006b83:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b86:	e8 31 49 00 00       	call   c000b4bc <User::loadClockSettings(int)>
c0006b8b:	c7 04 24 08 f3 01 c0 	mov    DWORD PTR [esp],0xc001f308
c0006b92:	e8 c0 91 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006b97:	59                   	pop    ecx
c0006b98:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b9d:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006ba3:	53                   	push   ebx
c0006ba4:	e8 bf 4f 00 00       	call   c000bb68 <Device::loadDriversForAll()>
c0006ba9:	c7 04 24 20 f2 01 c0 	mov    DWORD PTR [esp],0xc001f220
c0006bb0:	e8 a2 91 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006bb5:	58                   	pop    eax
c0006bb6:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bbc:	5a                   	pop    edx
c0006bbd:	6a 01                	push   0x1
c0006bbf:	68 31 f2 01 c0       	push   0xc001f231
c0006bc4:	e8 e3 d4 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c0006bc9:	59                   	pop    ecx
c0006bca:	5a                   	pop    edx
c0006bcb:	53                   	push   ebx
c0006bcc:	50                   	push   eax
c0006bcd:	e8 0b d7 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c0006bd2:	83 c4 10             	add    esp,0x10
c0006bd5:	83 ec 0c             	sub    esp,0xc
c0006bd8:	6a 02                	push   0x2
c0006bda:	e8 1d e1 00 00       	call   c0014cfc <blockTask(TaskState)>
c0006bdf:	83 c4 10             	add    esp,0x10
c0006be2:	eb f1                	jmp    c0006bd5 <Krnl::firstTask()+0x12c>

c0006be4 <Computer::Computer()>:
c0006be4:	83 ec 0c             	sub    esp,0xc
c0006be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006beb:	83 ec 08             	sub    esp,0x8
c0006bee:	68 4d f2 01 c0       	push   0xc001f24d
c0006bf3:	50                   	push   eax
c0006bf4:	e8 eb 4f 00 00       	call   c000bbe4 <Device::Device(char const*)>
c0006bf9:	83 c4 10             	add    esp,0x10
c0006bfc:	ba 54 f3 01 c0       	mov    edx,0xc001f354
c0006c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c05:	89 10                	mov    DWORD PTR [eax],edx
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c27:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c2d:	83 ca 04             	or     edx,0x4
c0006c30:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c40:	31 d2                	xor    edx,edx
c0006c42:	88 c2                	mov    dl,al
c0006c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c48:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c59:	31 d2                	xor    edx,edx
c0006c5b:	88 c2                	mov    dl,al
c0006c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c70:	8d 50 01             	lea    edx,[eax+0x1]
c0006c73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c77:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c7d:	31 d2                	xor    edx,edx
c0006c7f:	88 c2                	mov    dl,al
c0006c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c85:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c89:	83 e1 3f             	and    ecx,0x3f
c0006c8c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c90:	90                   	nop
c0006c91:	83 c4 0c             	add    esp,0xc
c0006c94:	c3                   	ret    
c0006c95:	90                   	nop

c0006c96 <Computer::setBootMessage(char const*)>:
c0006c96:	c3                   	ret    
c0006c97:	90                   	nop

c0006c98 <Computer::detectFeatures()>:
c0006c98:	55                   	push   ebp
c0006c99:	57                   	push   edi
c0006c9a:	56                   	push   esi
c0006c9b:	53                   	push   ebx
c0006c9c:	83 ec 1c             	sub    esp,0x1c
c0006c9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ca3:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006cad:	e8 47 95 ff ff       	call   c00001f9 <detectCPUID>
c0006cb2:	85 c0                	test   eax,eax
c0006cb4:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cba:	0f 95 c2             	setne  dl
c0006cbd:	83 e0 fd             	and    eax,0xfffffffd
c0006cc0:	01 d2                	add    edx,edx
c0006cc2:	09 d0                	or     eax,edx
c0006cc4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cca:	a8 02                	test   al,0x2
c0006ccc:	75 46                	jne    c0006d14 <Computer::detectFeatures()+0x7c>
c0006cce:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006cd5:	74 07                	je     c0006cde <Computer::detectFeatures()+0x46>
c0006cd7:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006cde:	e8 e3 6d 01 00       	call   c001dac6 <x87Detect>
c0006ce3:	83 e0 01             	and    eax,0x1
c0006ce6:	c1 e0 04             	shl    eax,0x4
c0006ce9:	88 c2                	mov    dl,al
c0006ceb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf1:	83 e0 ef             	and    eax,0xffffffef
c0006cf4:	09 d0                	or     eax,edx
c0006cf6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfc:	a8 10                	test   al,0x10
c0006cfe:	0f 85 2a 01 00 00    	jne    c0006e2e <Computer::detectFeatures()+0x196>
c0006d04:	84 c0                	test   al,al
c0006d06:	0f 88 45 01 00 00    	js     c0006e51 <Computer::detectFeatures()+0x1b9>
c0006d0c:	83 c4 1c             	add    esp,0x1c
c0006d0f:	5b                   	pop    ebx
c0006d10:	5e                   	pop    esi
c0006d11:	5f                   	pop    edi
c0006d12:	5d                   	pop    ebp
c0006d13:	c3                   	ret    
c0006d14:	83 ec 0c             	sub    esp,0xc
c0006d17:	6a 20                	push   0x20
c0006d19:	e8 66 85 00 00       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c0006d1e:	83 e0 01             	and    eax,0x1
c0006d21:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d28:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d2e:	83 e0 f7             	and    eax,0xfffffff7
c0006d31:	09 d0                	or     eax,edx
c0006d33:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d39:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d40:	e8 3f 85 00 00       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c0006d45:	83 e0 01             	and    eax,0x1
c0006d48:	88 c2                	mov    dl,al
c0006d4a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d50:	83 e0 fe             	and    eax,0xfffffffe
c0006d53:	09 d0                	or     eax,edx
c0006d55:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d5b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d62:	e8 1d 85 00 00       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c0006d67:	c1 e0 07             	shl    eax,0x7
c0006d6a:	88 c2                	mov    dl,al
c0006d6c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d72:	83 e0 7f             	and    eax,0x7f
c0006d75:	09 d0                	or     eax,edx
c0006d77:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d7d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d84:	e8 fb 84 00 00       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c0006d89:	83 c4 10             	add    esp,0x10
c0006d8c:	83 e0 01             	and    eax,0x1
c0006d8f:	c1 e0 05             	shl    eax,0x5
c0006d92:	88 c2                	mov    dl,al
c0006d94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d9a:	83 e0 df             	and    eax,0xffffffdf
c0006d9d:	09 d0                	or     eax,edx
c0006d9f:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006daf:	0f 84 c2 00 00 00    	je     c0006e77 <Computer::detectFeatures()+0x1df>
c0006db5:	83 e0 fe             	and    eax,0xfffffffe
c0006db8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dbe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dc4:	88 c2                	mov    dl,al
c0006dc6:	83 e2 09             	and    edx,0x9
c0006dc9:	fe ca                	dec    dl
c0006dcb:	75 09                	jne    c0006dd6 <Computer::detectFeatures()+0x13e>
c0006dcd:	83 e0 fe             	and    eax,0xfffffffe
c0006dd0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ddd:	50                   	push   eax
c0006dde:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006de2:	55                   	push   ebp
c0006de3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006de7:	57                   	push   edi
c0006de8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006dec:	56                   	push   esi
c0006ded:	68 00 00 00 80       	push   0x80000000
c0006df2:	e8 09 84 00 00       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006df7:	83 c4 20             	add    esp,0x20
c0006dfa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e05:	0f 86 c3 fe ff ff    	jbe    c0006cce <Computer::detectFeatures()+0x36>
c0006e0b:	83 ec 0c             	sub    esp,0xc
c0006e0e:	50                   	push   eax
c0006e0f:	55                   	push   ebp
c0006e10:	57                   	push   edi
c0006e11:	56                   	push   esi
c0006e12:	68 01 00 00 80       	push   0x80000001
c0006e17:	e8 e4 83 00 00       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e1c:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e26:	83 c4 20             	add    esp,0x20
c0006e29:	e9 a0 fe ff ff       	jmp    c0006cce <Computer::detectFeatures()+0x36>
c0006e2e:	e8 4d 6c 01 00       	call   c001da80 <absolutelyNoChanceInHell>
c0006e33:	88 c2                	mov    dl,al
c0006e35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e3b:	c1 e2 07             	shl    edx,0x7
c0006e3e:	83 e0 7f             	and    eax,0x7f
c0006e41:	09 d0                	or     eax,edx
c0006e43:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e49:	84 c0                	test   al,al
c0006e4b:	0f 89 bb fe ff ff    	jns    c0006d0c <Computer::detectFeatures()+0x74>
c0006e51:	e8 9a 68 01 00       	call   c001d6f0 <avxDetect>
c0006e56:	83 e0 01             	and    eax,0x1
c0006e59:	c1 e0 05             	shl    eax,0x5
c0006e5c:	88 c2                	mov    dl,al
c0006e5e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e64:	83 e0 df             	and    eax,0xffffffdf
c0006e67:	09 d0                	or     eax,edx
c0006e69:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e6f:	83 c4 1c             	add    esp,0x1c
c0006e72:	5b                   	pop    ebx
c0006e73:	5e                   	pop    esi
c0006e74:	5f                   	pop    edi
c0006e75:	5d                   	pop    ebp
c0006e76:	c3                   	ret    
c0006e77:	83 ec 0c             	sub    esp,0xc
c0006e7a:	68 00 02 00 00       	push   0x200
c0006e7f:	e8 00 84 00 00       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c0006e84:	83 c4 10             	add    esp,0x10
c0006e87:	83 e0 01             	and    eax,0x1
c0006e8a:	88 c2                	mov    dl,al
c0006e8c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e92:	83 e0 fe             	and    eax,0xfffffffe
c0006e95:	09 d0                	or     eax,edx
c0006e97:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e9d:	e9 1c ff ff ff       	jmp    c0006dbe <Computer::detectFeatures()+0x126>

c0006ea2 <Computer::displayFeatures()>:
c0006ea2:	c3                   	ret    
c0006ea3:	90                   	nop

c0006ea4 <Computer::rdmsr(unsigned int)>:
c0006ea4:	83 ec 0c             	sub    esp,0xc
c0006ea7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eab:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eb2:	74 0a                	je     c0006ebe <Computer::rdmsr(unsigned int)+0x1a>
c0006eb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006eb8:	0f 32                	rdmsr  
c0006eba:	83 c4 0c             	add    esp,0xc
c0006ebd:	c3                   	ret    
c0006ebe:	83 ec 0c             	sub    esp,0xc
c0006ec1:	68 56 f2 01 c0       	push   0xc001f256
c0006ec6:	e8 04 95 00 00       	call   c00103cf <KePanic(char const*)>
c0006ecb:	83 c4 10             	add    esp,0x10
c0006ece:	eb e4                	jmp    c0006eb4 <Computer::rdmsr(unsigned int)+0x10>

c0006ed0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed0:	57                   	push   edi
c0006ed1:	56                   	push   esi
c0006ed2:	52                   	push   edx
c0006ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006edb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006edf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006ee6:	74 0e                	je     c0006ef6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ee8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006eec:	89 f0                	mov    eax,esi
c0006eee:	89 fa                	mov    edx,edi
c0006ef0:	0f 30                	wrmsr  
c0006ef2:	58                   	pop    eax
c0006ef3:	5e                   	pop    esi
c0006ef4:	5f                   	pop    edi
c0006ef5:	c3                   	ret    
c0006ef6:	83 ec 0c             	sub    esp,0xc
c0006ef9:	68 5c f2 01 c0       	push   0xc001f25c
c0006efe:	e8 cc 94 00 00       	call   c00103cf <KePanic(char const*)>
c0006f03:	83 c4 10             	add    esp,0x10
c0006f06:	eb e0                	jmp    c0006ee8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f08 <Computer::shutdown()>:
c0006f08:	83 ec 0c             	sub    esp,0xc
c0006f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f11:	6a 00                	push   0x0
c0006f13:	6a 00                	push   0x0
c0006f15:	6a 00                	push   0x0
c0006f17:	50                   	push   eax
c0006f18:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f1b:	83 c4 1c             	add    esp,0x1c
c0006f1e:	c3                   	ret    
c0006f1f:	90                   	nop

c0006f20 <Computer::restart()>:
c0006f20:	83 ec 0c             	sub    esp,0xc
c0006f23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f27:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f29:	6a 00                	push   0x0
c0006f2b:	6a 00                	push   0x0
c0006f2d:	6a 01                	push   0x1
c0006f2f:	50                   	push   eax
c0006f30:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f33:	83 c4 1c             	add    esp,0x1c
c0006f36:	c3                   	ret    
c0006f37:	90                   	nop

c0006f38 <Computer::sleep()>:
c0006f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f3c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f46:	e9 b1 7d 00 00       	jmp    c000ecfc <ACPI::sleep()>
c0006f4b:	90                   	nop

c0006f4c <Computer::nmiEnabled()>:
c0006f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f56:	c3                   	ret    
c0006f57:	90                   	nop

c0006f58 <Computer::readCMOS(unsigned char)>:
c0006f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f63:	19 c0                	sbb    eax,eax
c0006f65:	83 e0 80             	and    eax,0xffffff80
c0006f68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f6c:	e6 70                	out    0x70,al
c0006f6e:	e4 71                	in     al,0x71
c0006f70:	c3                   	ret    
c0006f71:	90                   	nop

c0006f72 <Computer::enableNMI(bool)>:
c0006f72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f88:	eb ce                	jmp    c0006f58 <Computer::readCMOS(unsigned char)>

c0006f8a <Computer::open(int, int, void*)>:
c0006f8a:	56                   	push   esi
c0006f8b:	53                   	push   ebx
c0006f8c:	83 ec 10             	sub    esp,0x10
c0006f8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f93:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006f9a:	68 62 f2 01 c0       	push   0xc001f262
c0006f9f:	0f 94 05 80 16 02 c0 	sete   BYTE PTR ds:0xc0021680
c0006fa6:	e8 ac 8d 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006fab:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fb2:	e8 b6 08 00 00       	call   c000786d <malloc>
c0006fb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fba:	89 c6                	mov    esi,eax
c0006fbc:	e8 d3 78 00 00       	call   c000e894 <ACPI::ACPI()>
c0006fc1:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fc7:	58                   	pop    eax
c0006fc8:	5a                   	pop    edx
c0006fc9:	56                   	push   esi
c0006fca:	53                   	push   ebx
c0006fcb:	e8 7c 4a 00 00       	call   c000ba4c <Device::addChild(Device*)>
c0006fd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fd3:	e8 c0 fc ff ff       	call   c0006c98 <Computer::detectFeatures()>
c0006fd8:	59                   	pop    ecx
c0006fd9:	5e                   	pop    esi
c0006fda:	6a 01                	push   0x1
c0006fdc:	53                   	push   ebx
c0006fdd:	e8 90 ff ff ff       	call   c0006f72 <Computer::enableNMI(bool)>
c0006fe2:	c7 04 24 7a f2 01 c0 	mov    DWORD PTR [esp],0xc001f27a
c0006fe9:	e8 69 8d 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0006fee:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006ff5:	e8 73 08 00 00       	call   c000786d <malloc>
c0006ffa:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ffd:	89 c6                	mov    esi,eax
c0006fff:	e8 38 83 00 00       	call   c000f33c <CPU::CPU()>
c0007004:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000700a:	58                   	pop    eax
c000700b:	5a                   	pop    edx
c000700c:	56                   	push   esi
c000700d:	53                   	push   ebx
c000700e:	e8 39 4a 00 00       	call   c000ba4c <Device::addChild(Device*)>
c0007013:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007019:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000701d:	8b 10                	mov    edx,DWORD PTR [eax]
c000701f:	51                   	push   ecx
c0007020:	6a 00                	push   0x0
c0007022:	6a 00                	push   0x0
c0007024:	50                   	push   eax
c0007025:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007028:	83 c4 14             	add    esp,0x14
c000702b:	68 28 f3 01 c0       	push   0xc001f328
c0007030:	e8 22 8d 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0007035:	e8 4b f8 00 00       	call   c0016885 <HalInitialiseCoprocessor()>
c000703a:	c7 04 24 94 f2 01 c0 	mov    DWORD PTR [esp],0xc001f294
c0007041:	e8 11 8d 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c0007046:	c7 04 24 a9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006aa9
c000704d:	e8 92 d9 00 00       	call   c00149e4 <setupMultitasking(void (*)())>
c0007052:	83 c4 14             	add    esp,0x14
c0007055:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000705a:	5b                   	pop    ebx
c000705b:	5e                   	pop    esi
c000705c:	c3                   	ret    
c000705d:	90                   	nop

c000705e <Computer::disableNMI()>:
c000705e:	6a 00                	push   0x0
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	50                   	push   eax
c0007065:	e8 08 ff ff ff       	call   c0006f72 <Computer::enableNMI(bool)>
c000706a:	5a                   	pop    edx
c000706b:	59                   	pop    ecx
c000706c:	c3                   	ret    
c000706d:	90                   	nop

c000706e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000706e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007072:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007079:	19 c0                	sbb    eax,eax
c000707b:	83 e0 80             	and    eax,0xffffff80
c000707e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0007082:	e6 70                	out    0x70,al
c0007084:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007088:	e6 71                	out    0x71,al
c000708a:	c3                   	ret    
c000708b:	90                   	nop

c000708c <Computer::handleNMI()>:
c000708c:	56                   	push   esi
c000708d:	53                   	push   ebx
c000708e:	83 ec 10             	sub    esp,0x10
c0007091:	e4 92                	in     al,0x92
c0007093:	89 c6                	mov    esi,eax
c0007095:	e4 61                	in     al,0x61
c0007097:	68 af f2 01 c0       	push   0xc001f2af
c000709c:	88 c3                	mov    bl,al
c000709e:	e8 6b 35 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00070a3:	83 c4 10             	add    esp,0x10
c00070a6:	83 e6 10             	and    esi,0x10
c00070a9:	75 0d                	jne    c00070b8 <Computer::handleNMI()+0x2c>
c00070ab:	f6 c3 40             	test   bl,0x40
c00070ae:	75 1d                	jne    c00070cd <Computer::handleNMI()+0x41>
c00070b0:	84 db                	test   bl,bl
c00070b2:	78 2d                	js     c00070e1 <Computer::handleNMI()+0x55>
c00070b4:	58                   	pop    eax
c00070b5:	5b                   	pop    ebx
c00070b6:	5e                   	pop    esi
c00070b7:	c3                   	ret    
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	68 c0 f2 01 c0       	push   0xc001f2c0
c00070c0:	e8 0a 93 00 00       	call   c00103cf <KePanic(char const*)>
c00070c5:	83 c4 10             	add    esp,0x10
c00070c8:	f6 c3 40             	test   bl,0x40
c00070cb:	74 e3                	je     c00070b0 <Computer::handleNMI()+0x24>
c00070cd:	83 ec 0c             	sub    esp,0xc
c00070d0:	68 cd f2 01 c0       	push   0xc001f2cd
c00070d5:	e8 f5 92 00 00       	call   c00103cf <KePanic(char const*)>
c00070da:	83 c4 10             	add    esp,0x10
c00070dd:	84 db                	test   bl,bl
c00070df:	79 d3                	jns    c00070b4 <Computer::handleNMI()+0x28>
c00070e1:	c7 44 24 10 d7 f2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f2d7
c00070e9:	5a                   	pop    edx
c00070ea:	5b                   	pop    ebx
c00070eb:	5e                   	pop    esi
c00070ec:	e9 de 92 00 00       	jmp    c00103cf <KePanic(char const*)>
c00070f1:	90                   	nop

c00070f2 <GDTEntry::setBase(unsigned int)>:
c00070f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070fa:	89 c1                	mov    ecx,eax
c00070fc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007100:	c1 e9 10             	shr    ecx,0x10
c0007103:	c1 e8 18             	shr    eax,0x18
c0007106:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007109:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000710c:	c3                   	ret    
c000710d:	90                   	nop

c000710e <GDTEntry::setLimit(unsigned int)>:
c000710e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007112:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007116:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007119:	66 89 01             	mov    WORD PTR [ecx],ax
c000711c:	83 e2 f0             	and    edx,0xfffffff0
c000711f:	c1 e8 10             	shr    eax,0x10
c0007122:	83 e0 0f             	and    eax,0xf
c0007125:	09 d0                	or     eax,edx
c0007127:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000712a:	c3                   	ret    
c000712b:	90                   	nop

c000712c <GDT::GDT()>:
c000712c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007130:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000713a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007140:	90                   	nop
c0007141:	c3                   	ret    

c0007142 <GDT::addEntry(GDTEntry)>:
c0007142:	53                   	push   ebx
c0007143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007147:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000714b:	8b 02                	mov    eax,DWORD PTR [edx]
c000714d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007151:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007155:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007159:	8d 48 01             	lea    ecx,[eax+0x1]
c000715c:	c1 e0 03             	shl    eax,0x3
c000715f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007161:	5b                   	pop    ebx
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <GDT::getNumberOfEntries()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8b 00                	mov    eax,DWORD PTR [eax]
c000716a:	c3                   	ret    
c000716b:	90                   	nop

c000716c <GDT::flush()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8b 10                	mov    edx,DWORD PTR [eax]
c0007172:	83 c0 04             	add    eax,0x4
c0007175:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000717c:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007181:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007188:	e9 cd 91 ff ff       	jmp    c000035a <loadGDT>
c000718d:	90                   	nop

c000718e <GDT::setup()>:
c000718e:	57                   	push   edi
c000718f:	56                   	push   esi
c0007190:	53                   	push   ebx
c0007191:	83 ec 30             	sub    esp,0x30
c0007194:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007198:	6a 00                	push   0x0
c000719a:	8d 74 24 14          	lea    esi,[esp+0x14]
c000719e:	56                   	push   esi
c000719f:	e8 4e ff ff ff       	call   c00070f2 <GDTEntry::setBase(unsigned int)>
c00071a4:	6a 00                	push   0x0
c00071a6:	56                   	push   esi
c00071a7:	e8 62 ff ff ff       	call   c000710e <GDTEntry::setLimit(unsigned int)>
c00071ac:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071b4:	6a 00                	push   0x0
c00071b6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071ba:	56                   	push   esi
c00071bb:	e8 32 ff ff ff       	call   c00070f2 <GDTEntry::setBase(unsigned int)>
c00071c0:	68 ff ff ff 00       	push   0xffffff
c00071c5:	56                   	push   esi
c00071c6:	e8 43 ff ff ff       	call   c000710e <GDTEntry::setLimit(unsigned int)>
c00071cb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071d3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071d7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071db:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071e0:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071e5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071e9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071ed:	89 f8                	mov    eax,edi
c00071ef:	89 fa                	mov    edx,edi
c00071f1:	80 e4 f7             	and    ah,0xf7
c00071f4:	80 ce 60             	or     dh,0x60
c00071f7:	89 c7                	mov    edi,eax
c00071f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071fd:	80 cc 60             	or     ah,0x60
c0007200:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007204:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007208:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000720c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007210:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007214:	83 c4 20             	add    esp,0x20
c0007217:	6a 00                	push   0x0
c0007219:	8d 44 24 24          	lea    eax,[esp+0x24]
c000721d:	50                   	push   eax
c000721e:	e8 cf fe ff ff       	call   c00070f2 <GDTEntry::setBase(unsigned int)>
c0007223:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007227:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000722b:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007230:	6a 00                	push   0x0
c0007232:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007236:	50                   	push   eax
c0007237:	e8 b6 fe ff ff       	call   c00070f2 <GDTEntry::setBase(unsigned int)>
c000723c:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007241:	83 c4 0c             	add    esp,0xc
c0007244:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007248:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000724c:	53                   	push   ebx
c000724d:	e8 f0 fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c0007252:	83 c4 0c             	add    esp,0xc
c0007255:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007259:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000725d:	53                   	push   ebx
c000725e:	e8 df fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c0007263:	83 c4 0c             	add    esp,0xc
c0007266:	57                   	push   edi
c0007267:	56                   	push   esi
c0007268:	53                   	push   ebx
c0007269:	e8 d4 fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c000726e:	83 c4 0c             	add    esp,0xc
c0007271:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007275:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007279:	53                   	push   ebx
c000727a:	e8 c3 fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c000727f:	83 c4 0c             	add    esp,0xc
c0007282:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007286:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000728a:	53                   	push   ebx
c000728b:	e8 b2 fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007297:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000729b:	53                   	push   ebx
c000729c:	e8 a1 fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c00072a1:	83 c4 0c             	add    esp,0xc
c00072a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072ac:	53                   	push   ebx
c00072ad:	e8 90 fe ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c00072b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072b5:	e8 b2 fe ff ff       	call   c000716c <GDT::flush()>
c00072ba:	83 c4 40             	add    esp,0x40
c00072bd:	5b                   	pop    ebx
c00072be:	5e                   	pop    esi
c00072bf:	5f                   	pop    edi
c00072c0:	c3                   	ret    

c00072c1 <idleFunction(void*)>:
c00072c1:	83 ec 0c             	sub    esp,0xc
c00072c4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072c9:	48                   	dec    eax
c00072ca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072cf:	75 01                	jne    c00072d2 <idleFunction(void*)+0x11>
c00072d1:	fb                   	sti    
c00072d2:	e8 88 f2 00 00       	call   c001655f <HalSystemIdle()>
c00072d7:	e8 a6 6d 01 00       	call   c001e082 <idleCommon()>
c00072dc:	eb f4                	jmp    c00072d2 <idleFunction(void*)+0x11>
c00072de:	66 90                	xchg   ax,ax

c00072e0 <IDTEntry::IDTEntry(bool)>:
c00072e0:	83 ec 04             	sub    esp,0x4
c00072e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072e7:	88 04 24             	mov    BYTE PTR [esp],al
c00072ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072ee:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007300:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007303:	83 e2 f0             	and    edx,0xfffffff0
c0007306:	83 ca 0e             	or     edx,0xe
c0007309:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000730c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007310:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007313:	83 e2 ef             	and    edx,0xffffffef
c0007316:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007319:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000731d:	74 05                	je     c0007324 <IDTEntry::IDTEntry(bool)+0x44>
c000731f:	b2 03                	mov    dl,0x3
c0007321:	eb 05                	jmp    c0007328 <IDTEntry::IDTEntry(bool)+0x48>
c0007323:	90                   	nop
c0007324:	b2 00                	mov    dl,0x0
c0007326:	66 90                	xchg   ax,ax
c0007328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000732c:	83 e2 03             	and    edx,0x3
c000732f:	88 d1                	mov    cl,dl
c0007331:	c1 e1 05             	shl    ecx,0x5
c0007334:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007337:	83 e2 9f             	and    edx,0xffffff9f
c000733a:	09 ca                	or     edx,ecx
c000733c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000733f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007343:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007346:	83 ca 80             	or     edx,0xffffff80
c0007349:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000734c:	90                   	nop
c000734d:	83 c4 04             	add    esp,0x4
c0007350:	c3                   	ret    
c0007351:	90                   	nop

c0007352 <IDTEntry::setOffset(unsigned int)>:
c0007352:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000735a:	66 89 02             	mov    WORD PTR [edx],ax
c000735d:	c1 e8 10             	shr    eax,0x10
c0007360:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007364:	c3                   	ret    
c0007365:	90                   	nop
c0007366:	66 90                	xchg   ax,ax

c0007368 <IDT::IDT()>:
c0007368:	90                   	nop
c0007369:	c3                   	ret    

c000736a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000736a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736e:	83 c0 30             	add    eax,0x30
c0007371:	c3                   	ret    

c0007372 <IDT::addEntry(IDTEntry, int)>:
c0007372:	53                   	push   ebx
c0007373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007377:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000737b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007383:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0007386:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000738a:	5b                   	pop    ebx
c000738b:	c3                   	ret    

c000738c <IDT::addEntry(int, void (*)(), bool)>:
c000738c:	53                   	push   ebx
c000738d:	83 ec 10             	sub    esp,0x10
c0007390:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0007395:	50                   	push   eax
c0007396:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000739a:	53                   	push   ebx
c000739b:	e8 40 ff ff ff       	call   c00072e0 <IDTEntry::IDTEntry(bool)>
c00073a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073a4:	53                   	push   ebx
c00073a5:	e8 a8 ff ff ff       	call   c0007352 <IDTEntry::setOffset(unsigned int)>
c00073aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073ba:	e8 b3 ff ff ff       	call   c0007372 <IDT::addEntry(IDTEntry, int)>
c00073bf:	83 c4 30             	add    esp,0x30
c00073c2:	5b                   	pop    ebx
c00073c3:	c3                   	ret    

c00073c4 <IDT::flush()>:
c00073c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c8:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073d1:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073d6:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073dd:	c3                   	ret    

c00073de <IDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 10             	sub    esp,0x10
c00073e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073e8:	6a 00                	push   0x0
c00073ea:	68 80 d7 01 c0       	push   0xc001d780
c00073ef:	6a 00                	push   0x0
c00073f1:	53                   	push   ebx
c00073f2:	e8 95 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	6a 00                	push   0x0
c00073f9:	68 90 d7 01 c0       	push   0xc001d790
c00073fe:	6a 01                	push   0x1
c0007400:	53                   	push   ebx
c0007401:	e8 86 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007406:	83 c4 20             	add    esp,0x20
c0007409:	6a 00                	push   0x0
c000740b:	68 9a d7 01 c0       	push   0xc001d79a
c0007410:	6a 02                	push   0x2
c0007412:	53                   	push   ebx
c0007413:	e8 74 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007418:	6a 00                	push   0x0
c000741a:	68 a4 d7 01 c0       	push   0xc001d7a4
c000741f:	6a 03                	push   0x3
c0007421:	53                   	push   ebx
c0007422:	e8 65 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007427:	83 c4 20             	add    esp,0x20
c000742a:	6a 00                	push   0x0
c000742c:	68 ae d7 01 c0       	push   0xc001d7ae
c0007431:	6a 04                	push   0x4
c0007433:	53                   	push   ebx
c0007434:	e8 53 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007439:	6a 00                	push   0x0
c000743b:	68 b8 d7 01 c0       	push   0xc001d7b8
c0007440:	6a 05                	push   0x5
c0007442:	53                   	push   ebx
c0007443:	e8 44 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007448:	83 c4 20             	add    esp,0x20
c000744b:	6a 00                	push   0x0
c000744d:	68 c2 d7 01 c0       	push   0xc001d7c2
c0007452:	6a 06                	push   0x6
c0007454:	53                   	push   ebx
c0007455:	e8 32 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000745a:	6a 00                	push   0x0
c000745c:	68 cc d7 01 c0       	push   0xc001d7cc
c0007461:	6a 07                	push   0x7
c0007463:	53                   	push   ebx
c0007464:	e8 23 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007469:	83 c4 20             	add    esp,0x20
c000746c:	6a 00                	push   0x0
c000746e:	68 d6 d7 01 c0       	push   0xc001d7d6
c0007473:	6a 08                	push   0x8
c0007475:	53                   	push   ebx
c0007476:	e8 11 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000747b:	6a 00                	push   0x0
c000747d:	68 de d7 01 c0       	push   0xc001d7de
c0007482:	6a 09                	push   0x9
c0007484:	53                   	push   ebx
c0007485:	e8 02 ff ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000748a:	83 c4 20             	add    esp,0x20
c000748d:	6a 00                	push   0x0
c000748f:	68 e8 d7 01 c0       	push   0xc001d7e8
c0007494:	6a 0a                	push   0xa
c0007496:	53                   	push   ebx
c0007497:	e8 f0 fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000749c:	6a 00                	push   0x0
c000749e:	68 f0 d7 01 c0       	push   0xc001d7f0
c00074a3:	6a 0b                	push   0xb
c00074a5:	53                   	push   ebx
c00074a6:	e8 e1 fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00074ab:	83 c4 20             	add    esp,0x20
c00074ae:	6a 00                	push   0x0
c00074b0:	68 f8 d7 01 c0       	push   0xc001d7f8
c00074b5:	6a 0c                	push   0xc
c00074b7:	53                   	push   ebx
c00074b8:	e8 cf fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	6a 00                	push   0x0
c00074bf:	68 00 d8 01 c0       	push   0xc001d800
c00074c4:	6a 0d                	push   0xd
c00074c6:	53                   	push   ebx
c00074c7:	e8 c0 fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00074cc:	83 c4 20             	add    esp,0x20
c00074cf:	6a 00                	push   0x0
c00074d1:	68 1a d8 01 c0       	push   0xc001d81a
c00074d6:	6a 0e                	push   0xe
c00074d8:	53                   	push   ebx
c00074d9:	e8 ae fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00074de:	6a 00                	push   0x0
c00074e0:	68 22 d8 01 c0       	push   0xc001d822
c00074e5:	6a 0f                	push   0xf
c00074e7:	53                   	push   ebx
c00074e8:	e8 9f fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00074ed:	83 c4 20             	add    esp,0x20
c00074f0:	6a 00                	push   0x0
c00074f2:	68 2c d8 01 c0       	push   0xc001d82c
c00074f7:	6a 10                	push   0x10
c00074f9:	53                   	push   ebx
c00074fa:	e8 8d fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	6a 00                	push   0x0
c0007501:	68 36 d8 01 c0       	push   0xc001d836
c0007506:	6a 11                	push   0x11
c0007508:	53                   	push   ebx
c0007509:	e8 7e fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000750e:	83 c4 20             	add    esp,0x20
c0007511:	6a 00                	push   0x0
c0007513:	68 40 d8 01 c0       	push   0xc001d840
c0007518:	6a 12                	push   0x12
c000751a:	53                   	push   ebx
c000751b:	e8 6c fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007520:	6a 01                	push   0x1
c0007522:	68 da d8 01 c0       	push   0xc001d8da
c0007527:	6a 60                	push   0x60
c0007529:	53                   	push   ebx
c000752a:	e8 5d fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000752f:	83 c4 20             	add    esp,0x20
c0007532:	6a 00                	push   0x0
c0007534:	68 e1 d8 01 c0       	push   0xc001d8e1
c0007539:	6a 20                	push   0x20
c000753b:	53                   	push   ebx
c000753c:	e8 4b fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007541:	6a 00                	push   0x0
c0007543:	68 cc d8 01 c0       	push   0xc001d8cc
c0007548:	6a 21                	push   0x21
c000754a:	53                   	push   ebx
c000754b:	e8 3c fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007550:	83 c4 20             	add    esp,0x20
c0007553:	6a 00                	push   0x0
c0007555:	68 d3 d8 01 c0       	push   0xc001d8d3
c000755a:	6a 22                	push   0x22
c000755c:	53                   	push   ebx
c000755d:	e8 2a fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007562:	6a 00                	push   0x0
c0007564:	68 4a d8 01 c0       	push   0xc001d84a
c0007569:	6a 23                	push   0x23
c000756b:	53                   	push   ebx
c000756c:	e8 1b fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007571:	83 c4 20             	add    esp,0x20
c0007574:	6a 00                	push   0x0
c0007576:	68 54 d8 01 c0       	push   0xc001d854
c000757b:	6a 24                	push   0x24
c000757d:	53                   	push   ebx
c000757e:	e8 09 fe ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007583:	6a 00                	push   0x0
c0007585:	68 5e d8 01 c0       	push   0xc001d85e
c000758a:	6a 25                	push   0x25
c000758c:	53                   	push   ebx
c000758d:	e8 fa fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007592:	83 c4 20             	add    esp,0x20
c0007595:	6a 00                	push   0x0
c0007597:	68 68 d8 01 c0       	push   0xc001d868
c000759c:	6a 26                	push   0x26
c000759e:	53                   	push   ebx
c000759f:	e8 e8 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	6a 00                	push   0x0
c00075a6:	68 72 d8 01 c0       	push   0xc001d872
c00075ab:	6a 27                	push   0x27
c00075ad:	53                   	push   ebx
c00075ae:	e8 d9 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00075b3:	83 c4 20             	add    esp,0x20
c00075b6:	6a 00                	push   0x0
c00075b8:	68 7c d8 01 c0       	push   0xc001d87c
c00075bd:	6a 28                	push   0x28
c00075bf:	53                   	push   ebx
c00075c0:	e8 c7 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	6a 00                	push   0x0
c00075c7:	68 86 d8 01 c0       	push   0xc001d886
c00075cc:	6a 29                	push   0x29
c00075ce:	53                   	push   ebx
c00075cf:	e8 b8 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00075d4:	83 c4 20             	add    esp,0x20
c00075d7:	6a 00                	push   0x0
c00075d9:	68 90 d8 01 c0       	push   0xc001d890
c00075de:	6a 2a                	push   0x2a
c00075e0:	53                   	push   ebx
c00075e1:	e8 a6 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	6a 00                	push   0x0
c00075e8:	68 9a d8 01 c0       	push   0xc001d89a
c00075ed:	6a 2b                	push   0x2b
c00075ef:	53                   	push   ebx
c00075f0:	e8 97 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00075f5:	83 c4 20             	add    esp,0x20
c00075f8:	6a 00                	push   0x0
c00075fa:	68 a4 d8 01 c0       	push   0xc001d8a4
c00075ff:	6a 2c                	push   0x2c
c0007601:	53                   	push   ebx
c0007602:	e8 85 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007607:	6a 00                	push   0x0
c0007609:	68 ae d8 01 c0       	push   0xc001d8ae
c000760e:	6a 2d                	push   0x2d
c0007610:	53                   	push   ebx
c0007611:	e8 76 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007616:	83 c4 20             	add    esp,0x20
c0007619:	6a 00                	push   0x0
c000761b:	68 b8 d8 01 c0       	push   0xc001d8b8
c0007620:	6a 2e                	push   0x2e
c0007622:	53                   	push   ebx
c0007623:	e8 64 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007628:	6a 00                	push   0x0
c000762a:	68 c2 d8 01 c0       	push   0xc001d8c2
c000762f:	6a 2f                	push   0x2f
c0007631:	53                   	push   ebx
c0007632:	e8 55 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007637:	83 c4 20             	add    esp,0x20
c000763a:	6a 00                	push   0x0
c000763c:	68 1c da 01 c0       	push   0xc001da1c
c0007641:	6a 30                	push   0x30
c0007643:	53                   	push   ebx
c0007644:	e8 43 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007649:	6a 00                	push   0x0
c000764b:	68 26 da 01 c0       	push   0xc001da26
c0007650:	6a 31                	push   0x31
c0007652:	53                   	push   ebx
c0007653:	e8 34 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007658:	83 c4 20             	add    esp,0x20
c000765b:	6a 00                	push   0x0
c000765d:	68 30 da 01 c0       	push   0xc001da30
c0007662:	6a 32                	push   0x32
c0007664:	53                   	push   ebx
c0007665:	e8 22 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000766a:	6a 00                	push   0x0
c000766c:	68 3a da 01 c0       	push   0xc001da3a
c0007671:	6a 33                	push   0x33
c0007673:	53                   	push   ebx
c0007674:	e8 13 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c0007679:	83 c4 20             	add    esp,0x20
c000767c:	6a 00                	push   0x0
c000767e:	68 44 da 01 c0       	push   0xc001da44
c0007683:	6a 34                	push   0x34
c0007685:	53                   	push   ebx
c0007686:	e8 01 fd ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000768b:	6a 00                	push   0x0
c000768d:	68 4e da 01 c0       	push   0xc001da4e
c0007692:	6a 35                	push   0x35
c0007694:	53                   	push   ebx
c0007695:	e8 f2 fc ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c000769a:	83 c4 20             	add    esp,0x20
c000769d:	6a 00                	push   0x0
c000769f:	68 58 da 01 c0       	push   0xc001da58
c00076a4:	6a 36                	push   0x36
c00076a6:	53                   	push   ebx
c00076a7:	e8 e0 fc ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	6a 00                	push   0x0
c00076ae:	68 62 da 01 c0       	push   0xc001da62
c00076b3:	6a 37                	push   0x37
c00076b5:	53                   	push   ebx
c00076b6:	e8 d1 fc ff ff       	call   c000738c <IDT::addEntry(int, void (*)(), bool)>
c00076bb:	83 c4 1c             	add    esp,0x1c
c00076be:	6a 03                	push   0x3
c00076c0:	6a 02                	push   0x2
c00076c2:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076c8:	e8 4b 24 00 00       	call   c0009b18 <VAS::allocatePages(int, int)>
c00076cd:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076d4:	89 c6                	mov    esi,eax
c00076d6:	e8 92 01 00 00       	call   c000786d <malloc>
c00076db:	81 c6 00 20 00 00    	add    esi,0x2000
c00076e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00076e4:	89 c7                	mov    edi,eax
c00076e6:	e8 a9 15 00 00       	call   c0008c94 <TSS::TSS()>
c00076eb:	83 c4 0c             	add    esp,0xc
c00076ee:	68 d6 d7 01 c0       	push   0xc001d7d6
c00076f3:	56                   	push   esi
c00076f4:	57                   	push   edi
c00076f5:	e8 de 15 00 00       	call   c0008cd8 <TSS::setup(unsigned long, unsigned long)>
c00076fa:	89 c6                	mov    esi,eax
c00076fc:	58                   	pop    eax
c00076fd:	5a                   	pop    edx
c00076fe:	6a 00                	push   0x0
c0007700:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007704:	50                   	push   eax
c0007705:	e8 d6 fb ff ff       	call   c00072e0 <IDTEntry::IDTEntry(bool)>
c000770a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000770e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007713:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000771a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007720:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007724:	80 ce 05             	or     dh,0x5
c0007727:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000772a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000772e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007732:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007735:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007738:	e8 87 fc ff ff       	call   c00073c4 <IDT::flush()>
c000773d:	83 c4 20             	add    esp,0x20
c0007740:	5b                   	pop    ebx
c0007741:	5e                   	pop    esi
c0007742:	5f                   	pop    edi
c0007743:	c3                   	ret    

c0007744 <sbrk>:
c0007744:	55                   	push   ebp
c0007745:	57                   	push   edi
c0007746:	56                   	push   esi
c0007747:	53                   	push   ebx
c0007748:	83 ec 1c             	sub    esp,0x1c
c000774b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000774f:	85 c0                	test   eax,eax
c0007751:	74 5f                	je     c00077b2 <sbrk+0x6e>
c0007753:	78 64                	js     c00077b9 <sbrk+0x75>
c0007755:	8b 15 6c 16 02 c0    	mov    edx,DWORD PTR ds:0xc002166c
c000775b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000775f:	05 ff 0f 00 00       	add    eax,0xfff
c0007764:	89 c5                	mov    ebp,eax
c0007766:	78 69                	js     c00077d1 <sbrk+0x8d>
c0007768:	c1 fd 0c             	sar    ebp,0xc
c000776b:	bb 00 00 00 00       	mov    ebx,0x0
c0007770:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c0007776:	8b 3d 6c 16 02 c0    	mov    edi,DWORD PTR ds:0xc002166c
c000777c:	e8 c8 03 00 00       	call   c0007b49 <Phys::allocatePage()>
c0007781:	68 01 04 00 00       	push   0x401
c0007786:	57                   	push   edi
c0007787:	50                   	push   eax
c0007788:	56                   	push   esi
c0007789:	e8 86 22 00 00       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000778e:	81 05 6c 16 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002166c,0x1000
c0007798:	43                   	inc    ebx
c0007799:	83 c4 10             	add    esp,0x10
c000779c:	39 dd                	cmp    ebp,ebx
c000779e:	75 d0                	jne    c0007770 <sbrk+0x2c>
c00077a0:	0f 20 d8             	mov    eax,cr3
c00077a3:	0f 22 d8             	mov    cr3,eax
c00077a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077aa:	83 c4 1c             	add    esp,0x1c
c00077ad:	5b                   	pop    ebx
c00077ae:	5e                   	pop    esi
c00077af:	5f                   	pop    edi
c00077b0:	5d                   	pop    ebp
c00077b1:	c3                   	ret    
c00077b2:	a1 6c 16 02 c0       	mov    eax,ds:0xc002166c
c00077b7:	eb f1                	jmp    c00077aa <sbrk+0x66>
c00077b9:	83 ec 08             	sub    esp,0x8
c00077bc:	50                   	push   eax
c00077bd:	68 78 f3 01 c0       	push   0xc001f378
c00077c2:	e8 47 2e 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00077c7:	83 c4 10             	add    esp,0x10
c00077ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077cf:	eb d9                	jmp    c00077aa <sbrk+0x66>
c00077d1:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077d7:	eb 8f                	jmp    c0007768 <sbrk+0x24>

c00077d9 <mmap>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	68 a8 f3 01 c0       	push   0xc001f3a8
c00077e1:	e8 e9 8b 00 00       	call   c00103cf <KePanic(char const*)>
c00077e6:	b8 00 00 00 00       	mov    eax,0x0
c00077eb:	83 c4 1c             	add    esp,0x1c
c00077ee:	c3                   	ret    

c00077ef <munmap>:
c00077ef:	83 ec 18             	sub    esp,0x18
c00077f2:	68 ad f3 01 c0       	push   0xc001f3ad
c00077f7:	e8 d3 8b 00 00       	call   c00103cf <KePanic(char const*)>
c00077fc:	b8 00 00 00 00       	mov    eax,0x0
c0007801:	83 c4 1c             	add    esp,0x1c
c0007804:	c3                   	ret    

c0007805 <liballoc_lock()>:
c0007805:	fa                   	cli    
c0007806:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000780c:	b8 00 00 00 00       	mov    eax,0x0
c0007811:	c3                   	ret    

c0007812 <liballoc_unlock()>:
c0007812:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007817:	48                   	dec    eax
c0007818:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000781d:	75 01                	jne    c0007820 <liballoc_unlock()+0xe>
c000781f:	fb                   	sti    
c0007820:	b8 00 00 00 00       	mov    eax,0x0
c0007825:	c3                   	ret    

c0007826 <liballoc_alloc(int)>:
c0007826:	83 ec 10             	sub    esp,0x10
c0007829:	6a 01                	push   0x1
c000782b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000782f:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007835:	e8 de 22 00 00       	call   c0009b18 <VAS::allocatePages(int, int)>
c000783a:	83 c4 1c             	add    esp,0x1c
c000783d:	c3                   	ret    

c000783e <liballoc_free(void*, int)>:
c000783e:	83 ec 14             	sub    esp,0x14
c0007841:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007845:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000784b:	e8 1a 1f 00 00       	call   c000976a <VAS::freeAllocatedPages(unsigned long)>
c0007850:	b8 00 00 00 00       	mov    eax,0x0
c0007855:	83 c4 1c             	add    esp,0x1c
c0007858:	c3                   	ret    

c0007859 <realloc>:
c0007859:	83 ec 14             	sub    esp,0x14
c000785c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007860:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007864:	e8 b8 9c ff ff       	call   c0001521 <dlrealloc>
c0007869:	83 c4 1c             	add    esp,0x1c
c000786c:	c3                   	ret    

c000786d <malloc>:
c000786d:	83 ec 18             	sub    esp,0x18
c0007870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007874:	e8 6b 97 ff ff       	call   c0000fe4 <dlmalloc>
c0007879:	83 c4 1c             	add    esp,0x1c
c000787c:	c3                   	ret    

c000787d <free>:
c000787d:	83 ec 18             	sub    esp,0x18
c0007880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007884:	e8 00 94 ff ff       	call   c0000c89 <dlfree>
c0007889:	83 c4 1c             	add    esp,0x1c
c000788c:	c3                   	ret    

c000788d <rfree>:
c000788d:	83 ec 18             	sub    esp,0x18
c0007890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007894:	e8 f0 93 ff ff       	call   c0000c89 <dlfree>
c0007899:	83 c4 1c             	add    esp,0x1c
c000789c:	c3                   	ret    

c000789d <calloc>:
c000789d:	56                   	push   esi
c000789e:	53                   	push   ebx
c000789f:	83 ec 10             	sub    esp,0x10
c00078a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00078a6:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078ab:	53                   	push   ebx
c00078ac:	e8 bc ff ff ff       	call   c000786d <malloc>
c00078b1:	89 c6                	mov    esi,eax
c00078b3:	83 c4 0c             	add    esp,0xc
c00078b6:	53                   	push   ebx
c00078b7:	6a 00                	push   0x0
c00078b9:	50                   	push   eax
c00078ba:	e8 01 8c ff ff       	call   c00004c0 <memset>
c00078bf:	89 f0                	mov    eax,esi
c00078c1:	83 c4 14             	add    esp,0x14
c00078c4:	5b                   	pop    ebx
c00078c5:	5e                   	pop    esi
c00078c6:	c3                   	ret    

c00078c7 <KeEntryPoint>:
c00078c7:	57                   	push   edi
c00078c8:	bf f9 03 00 00       	mov    edi,0x3f9
c00078cd:	56                   	push   esi
c00078ce:	89 fa                	mov    edx,edi
c00078d0:	53                   	push   ebx
c00078d1:	31 f6                	xor    esi,esi
c00078d3:	83 ec 2c             	sub    esp,0x2c
c00078d6:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078db:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078e0:	89 f0                	mov    eax,esi
c00078e2:	ee                   	out    dx,al
c00078e3:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078e8:	b0 80                	mov    al,0x80
c00078ea:	89 da                	mov    edx,ebx
c00078ec:	ee                   	out    dx,al
c00078ed:	b1 03                	mov    cl,0x3
c00078ef:	ba f8 03 00 00       	mov    edx,0x3f8
c00078f4:	88 c8                	mov    al,cl
c00078f6:	ee                   	out    dx,al
c00078f7:	89 f0                	mov    eax,esi
c00078f9:	89 fa                	mov    edx,edi
c00078fb:	ee                   	out    dx,al
c00078fc:	88 c8                	mov    al,cl
c00078fe:	89 da                	mov    edx,ebx
c0007900:	ee                   	out    dx,al
c0007901:	b0 c7                	mov    al,0xc7
c0007903:	ba fa 03 00 00       	mov    edx,0x3fa
c0007908:	ee                   	out    dx,al
c0007909:	b0 0b                	mov    al,0xb
c000790b:	ba fc 03 00 00       	mov    edx,0x3fc
c0007910:	ee                   	out    dx,al
c0007911:	68 b4 f3 01 c0       	push   0xc001f3b4
c0007916:	e8 f3 2c 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000791b:	e8 c9 83 00 00       	call   c000fce9 <KeDisplaySplashScreen()>
c0007920:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007925:	05 ff 0f 00 00       	add    eax,0xfff
c000792a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000792f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007932:	e8 64 03 00 00       	call   c0007c9b <Phys::physicalMemorySetup(unsigned int)>
c0007937:	e8 d4 1b 00 00       	call   c0009510 <Virt::virtualMemorySetup()>
c000793c:	58                   	pop    eax
c000793d:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007941:	53                   	push   ebx
c0007942:	e8 a1 1e 00 00       	call   c00097e8 <VAS::VAS()>
c0007947:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c000794d:	e8 c8 66 01 00       	call   c001e01a <_init>
c0007952:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007959:	e8 0f ff ff ff       	call   c000786d <malloc>
c000795e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007961:	89 c6                	mov    esi,eax
c0007963:	e8 7c f2 ff ff       	call   c0006be4 <Computer::Computer()>
c0007968:	6a 00                	push   0x0
c000796a:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007970:	6a 00                	push   0x0
c0007972:	6a 00                	push   0x0
c0007974:	56                   	push   esi
c0007975:	e8 10 f6 ff ff       	call   c0006f8a <Computer::open(int, int, void*)>
c000797a:	83 c4 14             	add    esp,0x14
c000797d:	53                   	push   ebx
c000797e:	e8 2d 1f 00 00       	call   c00098b0 <VAS::~VAS()>
c0007983:	83 c4 30             	add    esp,0x30
c0007986:	5b                   	pop    ebx
c0007987:	5e                   	pop    esi
c0007988:	5f                   	pop    edi
c0007989:	c3                   	ret    

c000798a <Phys::allocateDMA(unsigned long)>:
c000798a:	55                   	push   ebp
c000798b:	31 ed                	xor    ebp,ebp
c000798d:	57                   	push   edi
c000798e:	56                   	push   esi
c000798f:	53                   	push   ebx
c0007990:	31 db                	xor    ebx,ebx
c0007992:	83 ec 1c             	sub    esp,0x1c
c0007995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007999:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00079a1:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00079a7:	31 c0                	xor    eax,eax
c00079a9:	c1 ef 0c             	shr    edi,0xc
c00079ac:	eb 19                	jmp    c00079c7 <Phys::allocateDMA(unsigned long)+0x3d>
c00079ae:	85 c0                	test   eax,eax
c00079b0:	75 06                	jne    c00079b8 <Phys::allocateDMA(unsigned long)+0x2e>
c00079b2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079b6:	89 dd                	mov    ebp,ebx
c00079b8:	8d 70 01             	lea    esi,[eax+0x1]
c00079bb:	39 f7                	cmp    edi,esi
c00079bd:	74 33                	je     c00079f2 <Phys::allocateDMA(unsigned long)+0x68>
c00079bf:	89 f0                	mov    eax,esi
c00079c1:	43                   	inc    ebx
c00079c2:	83 fb 0f             	cmp    ebx,0xf
c00079c5:	7f 11                	jg     c00079d8 <Phys::allocateDMA(unsigned long)+0x4e>
c00079c7:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079ce:	74 de                	je     c00079ae <Phys::allocateDMA(unsigned long)+0x24>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	43                   	inc    ebx
c00079d3:	83 fb 0f             	cmp    ebx,0xf
c00079d6:	7e ef                	jle    c00079c7 <Phys::allocateDMA(unsigned long)+0x3d>
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	68 cc f3 01 c0       	push   0xc001f3cc
c00079e0:	e8 ea 89 00 00       	call   c00103cf <KePanic(char const*)>
c00079e5:	83 c4 10             	add    esp,0x10
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	83 c4 1c             	add    esp,0x1c
c00079ed:	5b                   	pop    ebx
c00079ee:	5e                   	pop    esi
c00079ef:	5f                   	pop    edi
c00079f0:	5d                   	pop    ebp
c00079f1:	c3                   	ret    
c00079f2:	89 e9                	mov    ecx,ebp
c00079f4:	c1 f9 04             	sar    ecx,0x4
c00079f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079fb:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00079ff:	89 ca                	mov    edx,ecx
c0007a01:	4a                   	dec    edx
c0007a02:	79 03                	jns    c0007a07 <Phys::allocateDMA(unsigned long)+0x7d>
c0007a04:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007a07:	c1 fa 04             	sar    edx,0x4
c0007a0a:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a0e:	74 08                	je     c0007a18 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a10:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a14:	31 c0                	xor    eax,eax
c0007a16:	eb ba                	jmp    c00079d2 <Phys::allocateDMA(unsigned long)+0x48>
c0007a18:	85 f6                	test   esi,esi
c0007a1a:	74 15                	je     c0007a31 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a1c:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a22:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a29:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a2c:	42                   	inc    edx
c0007a2d:	39 d0                	cmp    eax,edx
c0007a2f:	75 f8                	jne    c0007a29 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a31:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a3b:	85 c0                	test   eax,eax
c0007a3d:	74 17                	je     c0007a56 <Phys::allocateDMA(unsigned long)+0xcc>
c0007a3f:	83 ec 0c             	sub    esp,0xc
c0007a42:	68 cc f3 01 c0       	push   0xc001f3cc
c0007a47:	e8 83 89 00 00       	call   c00103cf <KePanic(char const*)>
c0007a4c:	83 c4 10             	add    esp,0x10
c0007a4f:	89 f0                	mov    eax,esi
c0007a51:	e9 6b ff ff ff       	jmp    c00079c1 <Phys::allocateDMA(unsigned long)+0x37>
c0007a56:	c1 e5 0c             	shl    ebp,0xc
c0007a59:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a5f:	eb 89                	jmp    c00079ea <Phys::allocateDMA(unsigned long)+0x60>

c0007a61 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a65:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a6f:	c1 ea 0c             	shr    edx,0xc
c0007a72:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a77:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a7d:	c1 e8 0c             	shr    eax,0xc
c0007a80:	85 d2                	test   edx,edx
c0007a82:	74 0f                	je     c0007a93 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a84:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a89:	01 c2                	add    edx,eax
c0007a8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a8e:	40                   	inc    eax
c0007a8f:	39 d0                	cmp    eax,edx
c0007a91:	75 f8                	jne    c0007a8b <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a93:	c3                   	ret    

c0007a94 <Phys::setPageState(unsigned long, bool)>:
c0007a94:	56                   	push   esi
c0007a95:	ba 01 00 00 00       	mov    edx,0x1
c0007a9a:	53                   	push   ebx
c0007a9b:	8b 35 70 16 02 c0    	mov    esi,DWORD PTR ds:0xc0021670
c0007aa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aa5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007aa9:	89 c8                	mov    eax,ecx
c0007aab:	83 e1 07             	and    ecx,0x7
c0007aae:	c1 e8 03             	shr    eax,0x3
c0007ab1:	d3 e3                	shl    ebx,cl
c0007ab3:	01 c6                	add    esi,eax
c0007ab5:	d3 e2                	shl    edx,cl
c0007ab7:	f7 d2                	not    edx
c0007ab9:	20 16                	and    BYTE PTR [esi],dl
c0007abb:	03 05 70 16 02 c0    	add    eax,DWORD PTR ds:0xc0021670
c0007ac1:	08 18                	or     BYTE PTR [eax],bl
c0007ac3:	5b                   	pop    ebx
c0007ac4:	5e                   	pop    esi
c0007ac5:	c3                   	ret    

c0007ac6 <Phys::getPageState(unsigned long)>:
c0007ac6:	53                   	push   ebx
c0007ac7:	8b 15 70 16 02 c0    	mov    edx,DWORD PTR ds:0xc0021670
c0007acd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ad1:	31 db                	xor    ebx,ebx
c0007ad3:	89 c8                	mov    eax,ecx
c0007ad5:	83 e1 07             	and    ecx,0x7
c0007ad8:	c1 e8 03             	shr    eax,0x3
c0007adb:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ade:	89 d8                	mov    eax,ebx
c0007ae0:	5b                   	pop    ebx
c0007ae1:	d3 f8                	sar    eax,cl
c0007ae3:	83 e0 01             	and    eax,0x1
c0007ae6:	c3                   	ret    

c0007ae7 <Phys::freePage(unsigned long)>:
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 08             	sub    esp,0x8
c0007aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007aef:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007af5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007afb:	76 3a                	jbe    c0007b37 <Phys::freePage(unsigned long)+0x50>
c0007afd:	c1 e8 0c             	shr    eax,0xc
c0007b00:	50                   	push   eax
c0007b01:	89 c3                	mov    ebx,eax
c0007b03:	e8 be ff ff ff       	call   c0007ac6 <Phys::getPageState(unsigned long)>
c0007b08:	5a                   	pop    edx
c0007b09:	84 c0                	test   al,al
c0007b0b:	74 19                	je     c0007b26 <Phys::freePage(unsigned long)+0x3f>
c0007b0d:	83 ec 08             	sub    esp,0x8
c0007b10:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b16:	6a 00                	push   0x0
c0007b18:	53                   	push   ebx
c0007b19:	e8 76 ff ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007b1e:	83 c4 10             	add    esp,0x10
c0007b21:	83 c4 08             	add    esp,0x8
c0007b24:	5b                   	pop    ebx
c0007b25:	c3                   	ret    
c0007b26:	c7 44 24 10 71 f4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f471
c0007b2e:	83 c4 08             	add    esp,0x8
c0007b31:	5b                   	pop    ebx
c0007b32:	e9 98 88 00 00       	jmp    c00103cf <KePanic(char const*)>
c0007b37:	68 00 10 00 00       	push   0x1000
c0007b3c:	50                   	push   eax
c0007b3d:	e8 1f ff ff ff       	call   c0007a61 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b42:	59                   	pop    ecx
c0007b43:	5b                   	pop    ebx
c0007b44:	83 c4 08             	add    esp,0x8
c0007b47:	5b                   	pop    ebx
c0007b48:	c3                   	ret    

c0007b49 <Phys::allocatePage()>:
c0007b49:	56                   	push   esi
c0007b4a:	53                   	push   ebx
c0007b4b:	83 ec 14             	sub    esp,0x14
c0007b4e:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b54:	89 f3                	mov    ebx,esi
c0007b56:	eb 0a                	jmp    c0007b62 <Phys::allocatePage()+0x19>
c0007b58:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b5e:	39 de                	cmp    esi,ebx
c0007b60:	74 24                	je     c0007b86 <Phys::allocatePage()+0x3d>
c0007b62:	53                   	push   ebx
c0007b63:	e8 5e ff ff ff       	call   c0007ac6 <Phys::getPageState(unsigned long)>
c0007b68:	5a                   	pop    edx
c0007b69:	84 c0                	test   al,al
c0007b6b:	74 5f                	je     c0007bcc <Phys::allocatePage()+0x83>
c0007b6d:	43                   	inc    ebx
c0007b6e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b74:	75 e2                	jne    c0007b58 <Phys::allocatePage()+0xf>
c0007b76:	31 db                	xor    ebx,ebx
c0007b78:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b82:	39 de                	cmp    esi,ebx
c0007b84:	75 dc                	jne    c0007b62 <Phys::allocatePage()+0x19>
c0007b86:	83 ec 0c             	sub    esp,0xc
c0007b89:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b98:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b9e:	50                   	push   eax
c0007b9f:	e8 4e 27 00 00       	call   c000a2f2 <VAS::scanForEviction()>
c0007ba4:	83 c4 10             	add    esp,0x10
c0007ba7:	85 c0                	test   eax,eax
c0007ba9:	75 3f                	jne    c0007bea <Phys::allocatePage()+0xa1>
c0007bab:	83 ec 0c             	sub    esp,0xc
c0007bae:	68 f4 f3 01 c0       	push   0xc001f3f4
c0007bb3:	e8 17 88 00 00       	call   c00103cf <KePanic(char const*)>
c0007bb8:	83 c4 10             	add    esp,0x10
c0007bbb:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bc1:	53                   	push   ebx
c0007bc2:	e8 ff fe ff ff       	call   c0007ac6 <Phys::getPageState(unsigned long)>
c0007bc7:	5a                   	pop    edx
c0007bc8:	84 c0                	test   al,al
c0007bca:	75 a1                	jne    c0007b6d <Phys::allocatePage()+0x24>
c0007bcc:	6a 01                	push   0x1
c0007bce:	53                   	push   ebx
c0007bcf:	e8 c0 fe ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007bd4:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007bd9:	5a                   	pop    edx
c0007bda:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007be0:	c1 e0 0c             	shl    eax,0xc
c0007be3:	59                   	pop    ecx
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	5b                   	pop    ebx
c0007be8:	5e                   	pop    esi
c0007be9:	c3                   	ret    
c0007bea:	83 ec 08             	sub    esp,0x8
c0007bed:	89 c2                	mov    edx,eax
c0007bef:	6a 01                	push   0x1
c0007bf1:	c1 ea 0c             	shr    edx,0xc
c0007bf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf8:	52                   	push   edx
c0007bf9:	e8 96 fe ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007bfe:	83 c4 10             	add    esp,0x10
c0007c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c05:	eb dd                	jmp    c0007be4 <Phys::allocatePage()+0x9b>

c0007c07 <Phys::allocateContiguousPages(int)>:
c0007c07:	57                   	push   edi
c0007c08:	56                   	push   esi
c0007c09:	53                   	push   ebx
c0007c0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c0e:	fa                   	cli    
c0007c0f:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c15:	31 db                	xor    ebx,ebx
c0007c17:	85 db                	test   ebx,ebx
c0007c19:	75 11                	jne    c0007c2c <Phys::allocateContiguousPages(int)+0x25>
c0007c1b:	e8 29 ff ff ff       	call   c0007b49 <Phys::allocatePage()>
c0007c20:	83 fe 01             	cmp    esi,0x1
c0007c23:	89 c7                	mov    edi,eax
c0007c25:	74 21                	je     c0007c48 <Phys::allocateContiguousPages(int)+0x41>
c0007c27:	bb 01 00 00 00       	mov    ebx,0x1
c0007c2c:	e8 18 ff ff ff       	call   c0007b49 <Phys::allocatePage()>
c0007c31:	89 da                	mov    edx,ebx
c0007c33:	c1 e2 0c             	shl    edx,0xc
c0007c36:	01 fa                	add    edx,edi
c0007c38:	39 c2                	cmp    edx,eax
c0007c3a:	74 20                	je     c0007c5c <Phys::allocateContiguousPages(int)+0x55>
c0007c3c:	bb 01 00 00 00       	mov    ebx,0x1
c0007c41:	89 c7                	mov    edi,eax
c0007c43:	83 fe 01             	cmp    esi,0x1
c0007c46:	75 e4                	jne    c0007c2c <Phys::allocateContiguousPages(int)+0x25>
c0007c48:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c4d:	48                   	dec    eax
c0007c4e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c53:	75 01                	jne    c0007c56 <Phys::allocateContiguousPages(int)+0x4f>
c0007c55:	fb                   	sti    
c0007c56:	89 f8                	mov    eax,edi
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	c3                   	ret    
c0007c5c:	43                   	inc    ebx
c0007c5d:	39 f3                	cmp    ebx,esi
c0007c5f:	75 b6                	jne    c0007c17 <Phys::allocateContiguousPages(int)+0x10>
c0007c61:	eb e5                	jmp    c0007c48 <Phys::allocateContiguousPages(int)+0x41>

c0007c63 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c63:	56                   	push   esi
c0007c64:	53                   	push   ebx
c0007c65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c69:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c6f:	73 06                	jae    c0007c77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c71:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c7b:	c1 eb 0c             	shr    ebx,0xc
c0007c7e:	c1 e8 0c             	shr    eax,0xc
c0007c81:	39 d8                	cmp    eax,ebx
c0007c83:	73 13                	jae    c0007c98 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c85:	6a 00                	push   0x0
c0007c87:	8d 70 01             	lea    esi,[eax+0x1]
c0007c8a:	50                   	push   eax
c0007c8b:	e8 04 fe ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007c90:	5a                   	pop    edx
c0007c91:	89 f0                	mov    eax,esi
c0007c93:	59                   	pop    ecx
c0007c94:	39 f3                	cmp    ebx,esi
c0007c96:	75 ed                	jne    c0007c85 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c98:	5b                   	pop    ebx
c0007c99:	5e                   	pop    esi
c0007c9a:	c3                   	ret    

c0007c9b <Phys::physicalMemorySetup(unsigned int)>:
c0007c9b:	55                   	push   ebp
c0007c9c:	57                   	push   edi
c0007c9d:	56                   	push   esi
c0007c9e:	53                   	push   ebx
c0007c9f:	31 db                	xor    ebx,ebx
c0007ca1:	83 ec 40             	sub    esp,0x40
c0007ca4:	6a 10                	push   0x10
c0007ca6:	6a 00                	push   0x0
c0007ca8:	68 ec 3e 02 c0       	push   0xc0023eec
c0007cad:	e8 0e 88 ff ff       	call   c00004c0 <memset>
c0007cb2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cbb:	05 00 10 00 00       	add    eax,0x1000
c0007cc0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007cc4:	5a                   	pop    edx
c0007cc5:	59                   	pop    ecx
c0007cc6:	50                   	push   eax
c0007cc7:	68 87 f4 01 c0       	push   0xc001f487
c0007ccc:	e8 3d 29 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007cd1:	83 c4 10             	add    esp,0x10
c0007cd4:	83 ec 08             	sub    esp,0x8
c0007cd7:	6a 01                	push   0x1
c0007cd9:	53                   	push   ebx
c0007cda:	43                   	inc    ebx
c0007cdb:	e8 b4 fd ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007ce0:	83 c4 10             	add    esp,0x10
c0007ce3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ce9:	75 e9                	jne    c0007cd4 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007ceb:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007cf1:	66 85 c0             	test   ax,ax
c0007cf4:	0f 84 97 01 00 00    	je     c0007e91 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007cfa:	89 c7                	mov    edi,eax
c0007cfc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d04:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d0a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d0f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d13:	eb 15                	jmp    c0007d2a <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d15:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d19:	83 c3 18             	add    ebx,0x18
c0007d1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d20:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d24:	0f 84 77 01 00 00    	je     c0007ea1 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d2a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d30:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d3b:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d3d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d40:	01 f0                	add    eax,esi
c0007d42:	55                   	push   ebp
c0007d43:	11 fa                	adc    edx,edi
c0007d45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d49:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d51:	50                   	push   eax
c0007d52:	56                   	push   esi
c0007d53:	68 24 f4 01 c0       	push   0xc001f424
c0007d58:	e8 b1 28 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007d5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d61:	83 c4 10             	add    esp,0x10
c0007d64:	09 f8                	or     eax,edi
c0007d66:	0f 85 35 01 00 00    	jne    c0007ea1 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d6c:	4d                   	dec    ebp
c0007d6d:	75 a6                	jne    c0007d15 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d6f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d73:	ba 00 00 08 00       	mov    edx,0x80000
c0007d78:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d7c:	39 f2                	cmp    edx,esi
c0007d7e:	89 c1                	mov    ecx,eax
c0007d80:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d88:	19 f9                	sbb    ecx,edi
c0007d8a:	0f 82 a7 00 00 00    	jb     c0007e37 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d90:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d94:	89 c1                	mov    ecx,eax
c0007d96:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d9a:	0f 83 97 00 00 00    	jae    c0007e37 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007da0:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007da5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007da9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007dad:	39 fa                	cmp    edx,edi
c0007daf:	19 e8                	sbb    eax,ebp
c0007db1:	0f 82 9a 01 00 00    	jb     c0007f51 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007db7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dbb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007dbf:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dc5:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dca:	83 d5 ff             	adc    ebp,0xffffffff
c0007dcd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dd1:	31 c0                	xor    eax,eax
c0007dd3:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007dd7:	39 fa                	cmp    edx,edi
c0007dd9:	89 c1                	mov    ecx,eax
c0007ddb:	19 e9                	sbb    ecx,ebp
c0007ddd:	0f 83 32 ff ff ff    	jae    c0007d15 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007de3:	be 00 00 08 00       	mov    esi,0x80000
c0007de8:	51                   	push   ecx
c0007de9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007ded:	57                   	push   edi
c0007dee:	56                   	push   esi
c0007def:	68 48 f4 01 c0       	push   0xc001f448
c0007df4:	e8 15 28 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007df9:	5d                   	pop    ebp
c0007dfa:	58                   	pop    eax
c0007dfb:	57                   	push   edi
c0007dfc:	56                   	push   esi
c0007dfd:	e8 61 fe ff ff       	call   c0007c63 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007e02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007e06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e0a:	83 c4 0c             	add    esp,0xc
c0007e0d:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e11:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e17:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e1e:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e23:	52                   	push   edx
c0007e24:	50                   	push   eax
c0007e25:	68 ad f4 01 c0       	push   0xc001f4ad
c0007e2a:	e8 df 27 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0007e2f:	83 c4 10             	add    esp,0x10
c0007e32:	e9 de fe ff ff       	jmp    c0007d15 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e37:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e3f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e43:	39 ea                	cmp    edx,ebp
c0007e45:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e49:	0f 82 c6 fe ff ff    	jb     c0007d15 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e4f:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e54:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e58:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e5c:	0f 83 b3 fe ff ff    	jae    c0007d15 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e62:	39 ee                	cmp    esi,ebp
c0007e64:	89 f8                	mov    eax,edi
c0007e66:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e6a:	0f 83 78 ff ff ff    	jae    c0007de8 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e78:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e80:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e88:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e8c:	e9 57 ff ff ff       	jmp    c0007de8 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e91:	83 ec 0c             	sub    esp,0xc
c0007e94:	68 9f f4 01 c0       	push   0xc001f49f
c0007e99:	e8 31 85 00 00       	call   c00103cf <KePanic(char const*)>
c0007e9e:	83 c4 10             	add    esp,0x10
c0007ea1:	83 ec 08             	sub    esp,0x8
c0007ea4:	bb 60 00 00 00       	mov    ebx,0x60
c0007ea9:	6a 00                	push   0x0
c0007eab:	6a 06                	push   0x6
c0007ead:	e8 e2 fb ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007eb2:	58                   	pop    eax
c0007eb3:	5a                   	pop    edx
c0007eb4:	6a 00                	push   0x0
c0007eb6:	6a 07                	push   0x7
c0007eb8:	e8 d7 fb ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007ebd:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ec4:	83 c4 10             	add    esp,0x10
c0007ec7:	83 ec 08             	sub    esp,0x8
c0007eca:	6a 00                	push   0x0
c0007ecc:	53                   	push   ebx
c0007ecd:	43                   	inc    ebx
c0007ece:	e8 c1 fb ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007ed3:	83 c4 10             	add    esp,0x10
c0007ed6:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007edc:	75 e9                	jne    c0007ec7 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ede:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007ee3:	bb 40 01 00 00       	mov    ebx,0x140
c0007ee8:	83 c0 20             	add    eax,0x20
c0007eeb:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ef0:	eb 22                	jmp    c0007f14 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007ef2:	83 ec 08             	sub    esp,0x8
c0007ef5:	6a 00                	push   0x0
c0007ef7:	53                   	push   ebx
c0007ef8:	43                   	inc    ebx
c0007ef9:	e8 96 fb ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007efe:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f03:	83 c4 10             	add    esp,0x10
c0007f06:	40                   	inc    eax
c0007f07:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f0d:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f12:	74 07                	je     c0007f1b <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f14:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f19:	7e d7                	jle    c0007ef2 <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f1b:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f20:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f25:	7f 22                	jg     c0007f49 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f27:	83 ec 08             	sub    esp,0x8
c0007f2a:	6a 00                	push   0x0
c0007f2c:	53                   	push   ebx
c0007f2d:	43                   	inc    ebx
c0007f2e:	e8 61 fb ff ff       	call   c0007a94 <Phys::setPageState(unsigned long, bool)>
c0007f33:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f38:	83 c4 10             	add    esp,0x10
c0007f3b:	40                   	inc    eax
c0007f3c:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f42:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f47:	75 d7                	jne    c0007f20 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f49:	83 c4 3c             	add    esp,0x3c
c0007f4c:	5b                   	pop    ebx
c0007f4d:	5e                   	pop    esi
c0007f4e:	5f                   	pop    edi
c0007f4f:	5d                   	pop    ebp
c0007f50:	c3                   	ret    
c0007f51:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f61:	e9 51 fe ff ff       	jmp    c0007db7 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f66 <Pipe::isAtty()>:
c0007f66:	31 c0                	xor    eax,eax
c0007f68:	c3                   	ret    
c0007f69:	90                   	nop

c0007f6a <Pipe::~Pipe()>:
c0007f6a:	83 ec 0c             	sub    esp,0xc
c0007f6d:	ba 0c f5 01 c0       	mov    edx,0xc001f50c
c0007f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f76:	89 10                	mov    DWORD PTR [eax],edx
c0007f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f7c:	83 ec 0c             	sub    esp,0xc
c0007f7f:	50                   	push   eax
c0007f80:	e8 6b 11 00 00       	call   c00090f0 <UnixFile::~UnixFile()>
c0007f85:	83 c4 10             	add    esp,0x10
c0007f88:	90                   	nop
c0007f89:	83 c4 0c             	add    esp,0xc
c0007f8c:	c3                   	ret    
c0007f8d:	90                   	nop

c0007f8e <Pipe::~Pipe()>:
c0007f8e:	83 ec 0c             	sub    esp,0xc
c0007f91:	83 ec 0c             	sub    esp,0xc
c0007f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f98:	e8 cd ff ff ff       	call   c0007f6a <Pipe::~Pipe()>
c0007f9d:	83 c4 10             	add    esp,0x10
c0007fa0:	83 ec 08             	sub    esp,0x8
c0007fa3:	6a 20                	push   0x20
c0007fa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa9:	e8 6a 25 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c0007fae:	83 c4 10             	add    esp,0x10
c0007fb1:	83 c4 0c             	add    esp,0xc
c0007fb4:	c3                   	ret    
c0007fb5:	90                   	nop

c0007fb6 <Pipe::write(unsigned long long, void*, int*)>:
c0007fb6:	55                   	push   ebp
c0007fb7:	57                   	push   edi
c0007fb8:	56                   	push   esi
c0007fb9:	53                   	push   ebx
c0007fba:	83 ec 1c             	sub    esp,0x1c
c0007fbd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fc5:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fc8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fcc:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fcf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fd3:	89 d8                	mov    eax,ebx
c0007fd5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fd8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fdc:	89 d6                	mov    esi,edx
c0007fde:	89 d7                	mov    edi,edx
c0007fe0:	c1 ff 1f             	sar    edi,0x1f
c0007fe3:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fe6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007fea:	c1 f8 1f             	sar    eax,0x1f
c0007fed:	39 f3                	cmp    ebx,esi
c0007fef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ff7:	19 f8                	sbb    eax,edi
c0007ff9:	b8 01 00 00 00       	mov    eax,0x1
c0007ffe:	72 6e                	jb     c000806e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008000:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008003:	01 d0                	add    eax,edx
c0008005:	99                   	cdq    
c0008006:	f7 fb                	idiv   ebx
c0008008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000800c:	29 d3                	sub    ebx,edx
c000800e:	89 d7                	mov    edi,edx
c0008010:	89 de                	mov    esi,ebx
c0008012:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008015:	c1 fb 1f             	sar    ebx,0x1f
c0008018:	39 f2                	cmp    edx,esi
c000801a:	19 d8                	sbb    eax,ebx
c000801c:	b8 00 00 00 00       	mov    eax,0x0
c0008021:	72 04                	jb     c0008027 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008023:	89 d0                	mov    eax,edx
c0008025:	29 f0                	sub    eax,esi
c0008027:	89 d3                	mov    ebx,edx
c0008029:	29 c3                	sub    ebx,eax
c000802b:	74 0b                	je     c0008038 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000802d:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008030:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008034:	89 d9                	mov    ecx,ebx
c0008036:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008038:	85 c0                	test   eax,eax
c000803a:	74 0d                	je     c0008049 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000803c:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008040:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008043:	89 de                	mov    esi,ebx
c0008045:	89 c1                	mov    ecx,eax
c0008047:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008049:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000804c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008051:	75 10                	jne    c0008063 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008053:	83 ec 0c             	sub    esp,0xc
c0008056:	68 c9 f4 01 c0       	push   0xc001f4c9
c000805b:	e8 6f 83 00 00       	call   c00103cf <KePanic(char const*)>
c0008060:	83 c4 10             	add    esp,0x10
c0008063:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008067:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000806a:	89 08                	mov    DWORD PTR [eax],ecx
c000806c:	31 c0                	xor    eax,eax
c000806e:	83 c4 1c             	add    esp,0x1c
c0008071:	5b                   	pop    ebx
c0008072:	5e                   	pop    esi
c0008073:	5f                   	pop    edi
c0008074:	5d                   	pop    ebp
c0008075:	c3                   	ret    

c0008076 <Pipe::read(unsigned long long, void*, int*)>:
c0008076:	55                   	push   ebp
c0008077:	57                   	push   edi
c0008078:	56                   	push   esi
c0008079:	53                   	push   ebx
c000807a:	83 ec 1c             	sub    esp,0x1c
c000807d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008081:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008085:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000808c:	89 c8                	mov    eax,ecx
c000808e:	99                   	cdq    
c000808f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008093:	74 24                	je     c00080b9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008095:	39 f9                	cmp    ecx,edi
c0008097:	89 d1                	mov    ecx,edx
c0008099:	19 f1                	sbb    ecx,esi
c000809b:	73 1c                	jae    c00080b9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000809d:	fa                   	cli    
c000809e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00080a4:	e8 57 ca 00 00       	call   c0014b00 <schedule()>
c00080a9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080ae:	48                   	dec    eax
c00080af:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080b4:	75 d3                	jne    c0008089 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080b6:	fb                   	sti    
c00080b7:	eb d0                	jmp    c0008089 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080b9:	39 f8                	cmp    eax,edi
c00080bb:	89 d1                	mov    ecx,edx
c00080bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080c0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080c4:	19 f1                	sbb    ecx,esi
c00080c6:	73 07                	jae    c00080cf <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00080cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080cf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080d2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080d5:	29 f7                	sub    edi,esi
c00080d7:	89 f8                	mov    eax,edi
c00080d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080dd:	99                   	cdq    
c00080de:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080e5:	19 d0                	sbb    eax,edx
c00080e7:	73 07                	jae    c00080f0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080f0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080f3:	89 ea                	mov    edx,ebp
c00080f5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00080f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080fe:	74 0d                	je     c000810d <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008100:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008103:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008107:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000810b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000810d:	85 d2                	test   edx,edx
c000810f:	74 11                	je     c0008122 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008111:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008115:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008118:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000811c:	89 d1                	mov    ecx,edx
c000811e:	89 c7                	mov    edi,eax
c0008120:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008122:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008125:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008128:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000812b:	99                   	cdq    
c000812c:	89 f7                	mov    edi,esi
c000812e:	03 04 24             	add    eax,DWORD PTR [esp]
c0008131:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008135:	c1 ff 1f             	sar    edi,0x1f
c0008138:	57                   	push   edi
c0008139:	56                   	push   esi
c000813a:	52                   	push   edx
c000813b:	50                   	push   eax
c000813c:	e8 bf 5d 01 00       	call   c001df00 <__umoddi3>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008147:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000814c:	75 10                	jne    c000815e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	68 e6 f4 01 c0       	push   0xc001f4e6
c0008156:	e8 74 82 00 00       	call   c00103cf <KePanic(char const*)>
c000815b:	83 c4 10             	add    esp,0x10
c000815e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008162:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008165:	89 10                	mov    DWORD PTR [eax],edx
c0008167:	83 c4 1c             	add    esp,0x1c
c000816a:	31 c0                	xor    eax,eax
c000816c:	5b                   	pop    ebx
c000816d:	5e                   	pop    esi
c000816e:	5f                   	pop    edi
c000816f:	5d                   	pop    ebp
c0008170:	c3                   	ret    
c0008171:	90                   	nop

c0008172 <Pipe::Pipe(int)>:
c0008172:	83 ec 0c             	sub    esp,0xc
c0008175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008179:	83 ec 08             	sub    esp,0x8
c000817c:	6a 00                	push   0x0
c000817e:	50                   	push   eax
c000817f:	e8 8a 0d 00 00       	call   c0008f0e <UnixFile::UnixFile(int)>
c0008184:	83 c4 10             	add    esp,0x10
c0008187:	ba 0c f5 01 c0       	mov    edx,0xc001f50c
c000818c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008190:	89 10                	mov    DWORD PTR [eax],edx
c0008192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008196:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000819a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000819d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081ac:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081b7:	83 ec 0c             	sub    esp,0xc
c00081ba:	50                   	push   eax
c00081bb:	e8 ad f6 ff ff       	call   c000786d <malloc>
c00081c0:	83 c4 10             	add    esp,0x10
c00081c3:	89 c2                	mov    edx,eax
c00081c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081d0:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081d4:	90                   	nop
c00081d5:	83 c4 0c             	add    esp,0xc
c00081d8:	c3                   	ret    
c00081d9:	90                   	nop

c00081da <VgaText::isAtty()>:
c00081da:	b0 01                	mov    al,0x1
c00081dc:	c3                   	ret    
c00081dd:	90                   	nop

c00081de <VgaText::~VgaText()>:
c00081de:	83 ec 0c             	sub    esp,0xc
c00081e1:	ba 54 f5 01 c0       	mov    edx,0xc001f554
c00081e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081ea:	89 10                	mov    DWORD PTR [eax],edx
c00081ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f0:	83 ec 0c             	sub    esp,0xc
c00081f3:	50                   	push   eax
c00081f4:	e8 f7 0e 00 00       	call   c00090f0 <UnixFile::~UnixFile()>
c00081f9:	83 c4 10             	add    esp,0x10
c00081fc:	90                   	nop
c00081fd:	83 c4 0c             	add    esp,0xc
c0008200:	c3                   	ret    
c0008201:	90                   	nop

c0008202 <VgaText::~VgaText()>:
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	83 ec 0c             	sub    esp,0xc
c0008208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000820c:	e8 cd ff ff ff       	call   c00081de <VgaText::~VgaText()>
c0008211:	83 c4 10             	add    esp,0x10
c0008214:	83 ec 08             	sub    esp,0x8
c0008217:	68 84 01 00 00       	push   0x184
c000821c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008220:	e8 f3 22 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c0008225:	83 c4 10             	add    esp,0x10
c0008228:	83 c4 0c             	add    esp,0xc
c000822b:	c3                   	ret    

c000822c <VgaText::read(unsigned long long, void*, int*)>:
c000822c:	83 ec 10             	sub    esp,0x10
c000822f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008233:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008237:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823b:	e8 32 46 00 00       	call   c000c872 <readKeyboard(VgaText*, char*, unsigned long)>
c0008240:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008244:	89 02                	mov    DWORD PTR [edx],eax
c0008246:	31 c0                	xor    eax,eax
c0008248:	83 c4 1c             	add    esp,0x1c
c000824b:	c3                   	ret    

c000824c <setTerminalScrollLock(bool)>:
c000824c:	c3                   	ret    

c000824d <doTerminalCycle()>:
c000824d:	c3                   	ret    

c000824e <addToTerminalCycle(VgaText*)>:
c000824e:	c3                   	ret    

c000824f <scrollTerminalScrollLock(int)>:
c000824f:	c3                   	ret    

c0008250 <VgaText::updateTitle()>:
c0008250:	c3                   	ret    
c0008251:	90                   	nop

c0008252 <VgaText::load()>:
c0008252:	c3                   	ret    
c0008253:	90                   	nop

c0008254 <VgaText::updateCursor()>:
c0008254:	83 ec 14             	sub    esp,0x14
c0008257:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000825b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000825e:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008261:	e8 b2 f4 00 00       	call   c0017718 <HalConsoleCursorUpdate(int, int)>
c0008266:	83 c4 1c             	add    esp,0x1c
c0008269:	c3                   	ret    

c000826a <VgaText::doANSI_SGR(int)>:
c000826a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000826e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008272:	85 d2                	test   edx,edx
c0008274:	75 0b                	jne    c0008281 <VgaText::doANSI_SGR(int)+0x17>
c0008276:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008279:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000827c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000827f:	eb 59                	jmp    c00082da <VgaText::doANSI_SGR(int)+0x70>
c0008281:	83 fa 07             	cmp    edx,0x7
c0008284:	75 0b                	jne    c0008291 <VgaText::doANSI_SGR(int)+0x27>
c0008286:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008289:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000828c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000828f:	eb 49                	jmp    c00082da <VgaText::doANSI_SGR(int)+0x70>
c0008291:	83 fa 1b             	cmp    edx,0x1b
c0008294:	74 e0                	je     c0008276 <VgaText::doANSI_SGR(int)+0xc>
c0008296:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008299:	83 f9 07             	cmp    ecx,0x7
c000829c:	77 09                	ja     c00082a7 <VgaText::doANSI_SGR(int)+0x3d>
c000829e:	8b 14 8d a0 16 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde960]
c00082a5:	eb 20                	jmp    c00082c7 <VgaText::doANSI_SGR(int)+0x5d>
c00082a7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082aa:	83 f9 07             	cmp    ecx,0x7
c00082ad:	77 09                	ja     c00082b8 <VgaText::doANSI_SGR(int)+0x4e>
c00082af:	8b 14 8d a0 16 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde960]
c00082b6:	eb 22                	jmp    c00082da <VgaText::doANSI_SGR(int)+0x70>
c00082b8:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082bb:	83 f9 07             	cmp    ecx,0x7
c00082be:	77 0b                	ja     c00082cb <VgaText::doANSI_SGR(int)+0x61>
c00082c0:	8b 14 95 58 15 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdeaa8]
c00082c7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082ca:	c3                   	ret    
c00082cb:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082ce:	83 f9 07             	cmp    ecx,0x7
c00082d1:	77 0a                	ja     c00082dd <VgaText::doANSI_SGR(int)+0x73>
c00082d3:	8b 14 95 30 15 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdead0]
c00082da:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082dd:	c3                   	ret    

c00082de <VgaText::setDefaultBgColour(VgaColour)>:
c00082de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082e6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082e9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082ec:	c3                   	ret    
c00082ed:	90                   	nop

c00082ee <VgaText::setDefaultFgColour(VgaColour)>:
c00082ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082f6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00082f9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082fc:	c3                   	ret    
c00082fd:	90                   	nop

c00082fe <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00082fe:	53                   	push   ebx
c00082ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008303:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008307:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000830b:	51                   	push   ecx
c000830c:	e8 cd ff ff ff       	call   c00082de <VgaText::setDefaultBgColour(VgaColour)>
c0008311:	58                   	pop    eax
c0008312:	5a                   	pop    edx
c0008313:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008317:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000831b:	5b                   	pop    ebx
c000831c:	eb d0                	jmp    c00082ee <VgaText::setDefaultFgColour(VgaColour)>

c000831e <VgaText::setTitleTextColour(VgaColour)>:
c000831e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008322:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008326:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008329:	c3                   	ret    

c000832a <VgaText::setTitleColour(VgaColour)>:
c000832a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000832e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008332:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008335:	c3                   	ret    

c0008336 <VgaText::setTitle(char*)>:
c0008336:	c3                   	ret    
c0008337:	90                   	nop

c0008338 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008338:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000833c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008341:	83 e0 0f             	and    eax,0xf
c0008344:	c1 e2 04             	shl    edx,0x4
c0008347:	09 d0                	or     eax,edx
c0008349:	c3                   	ret    

c000834a <VgaText::scrollScreen()>:
c000834a:	55                   	push   ebp
c000834b:	57                   	push   edi
c000834c:	56                   	push   esi
c000834d:	be 01 00 00 00       	mov    esi,0x1
c0008352:	53                   	push   ebx
c0008353:	83 ec 0c             	sub    esp,0xc
c0008356:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000835a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000835d:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008363:	31 ff                	xor    edi,edi
c0008365:	01 e9                	add    ecx,ebp
c0008367:	8a 01                	mov    al,BYTE PTR [ecx]
c0008369:	83 fe 18             	cmp    esi,0x18
c000836c:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008372:	75 20                	jne    c0008394 <VgaText::scrollScreen()+0x4a>
c0008374:	f7 c7 01 00 00 00    	test   edi,0x1
c000837a:	74 15                	je     c0008391 <VgaText::scrollScreen()+0x47>
c000837c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008380:	50                   	push   eax
c0008381:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008385:	50                   	push   eax
c0008386:	e8 ad ff ff ff       	call   c0008338 <VgaText::combineColours(unsigned char, unsigned char)>
c000838b:	5a                   	pop    edx
c000838c:	5a                   	pop    edx
c000838d:	88 01                	mov    BYTE PTR [ecx],al
c000838f:	eb 03                	jmp    c0008394 <VgaText::scrollScreen()+0x4a>
c0008391:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008394:	47                   	inc    edi
c0008395:	41                   	inc    ecx
c0008396:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000839c:	75 c9                	jne    c0008367 <VgaText::scrollScreen()+0x1d>
c000839e:	46                   	inc    esi
c000839f:	83 fe 19             	cmp    esi,0x19
c00083a2:	75 b9                	jne    c000835d <VgaText::scrollScreen()+0x13>
c00083a4:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083aa:	75 1f                	jne    c00083cb <VgaText::scrollScreen()+0x81>
c00083ac:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083b0:	74 05                	je     c00083b7 <VgaText::scrollScreen()+0x6d>
c00083b2:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083b5:	eb 14                	jmp    c00083cb <VgaText::scrollScreen()+0x81>
c00083b7:	50                   	push   eax
c00083b8:	50                   	push   eax
c00083b9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083bd:	50                   	push   eax
c00083be:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083c2:	50                   	push   eax
c00083c3:	e8 dc f1 00 00       	call   c00175a4 <HalConsoleScroll(int, int)>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083cf:	83 c4 0c             	add    esp,0xc
c00083d2:	5b                   	pop    ebx
c00083d3:	5e                   	pop    esi
c00083d4:	5f                   	pop    edi
c00083d5:	5d                   	pop    ebp
c00083d6:	e9 79 fe ff ff       	jmp    c0008254 <VgaText::updateCursor()>
c00083db:	90                   	nop

c00083dc <VgaText::combineCharAndColour(char, unsigned char)>:
c00083dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083e1:	c1 e0 08             	shl    eax,0x8
c00083e4:	89 c2                	mov    edx,eax
c00083e6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083eb:	09 d0                	or     eax,edx
c00083ed:	c3                   	ret    

c00083ee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083ee:	55                   	push   ebp
c00083ef:	57                   	push   edi
c00083f0:	56                   	push   esi
c00083f1:	53                   	push   ebx
c00083f2:	83 ec 1c             	sub    esp,0x1c
c00083f5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00083fd:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008401:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008405:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008409:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000840d:	0f b6 c3             	movzx  eax,bl
c0008410:	50                   	push   eax
c0008411:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008416:	50                   	push   eax
c0008417:	e8 1c ff ff ff       	call   c0008338 <VgaText::combineColours(unsigned char, unsigned char)>
c000841c:	5a                   	pop    edx
c000841d:	0f b6 c0             	movzx  eax,al
c0008420:	59                   	pop    ecx
c0008421:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008426:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000842a:	50                   	push   eax
c000842b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000842f:	e8 a8 ff ff ff       	call   c00083dc <VgaText::combineCharAndColour(char, unsigned char)>
c0008434:	5a                   	pop    edx
c0008435:	66 6b d7 50          	imul   dx,di,0x50
c0008439:	59                   	pop    ecx
c000843a:	01 f2                	add    edx,esi
c000843c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000843f:	0f b7 d2             	movzx  edx,dx
c0008442:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008446:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c000844c:	75 28                	jne    c0008476 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c000844e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008452:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008456:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000845a:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c000845e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008462:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008466:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000846a:	83 c4 1c             	add    esp,0x1c
c000846d:	5b                   	pop    ebx
c000846e:	5e                   	pop    esi
c000846f:	5f                   	pop    edi
c0008470:	5d                   	pop    ebp
c0008471:	e9 36 f2 00 00       	jmp    c00176ac <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008476:	83 c4 1c             	add    esp,0x1c
c0008479:	5b                   	pop    ebx
c000847a:	5e                   	pop    esi
c000847b:	5f                   	pop    edi
c000847c:	5d                   	pop    ebp
c000847d:	c3                   	ret    

c000847e <VgaText::getCursorX()>:
c000847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008482:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008485:	c3                   	ret    

c0008486 <VgaText::getCursorY()>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000848d:	c3                   	ret    

c000848e <VgaText::setCursor(int, int)>:
c000848e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008492:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008496:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008499:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000849d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084a0:	e9 af fd ff ff       	jmp    c0008254 <VgaText::updateCursor()>

c00084a5 <setActiveTerminal(VgaText*)>:
c00084a5:	53                   	push   ebx
c00084a6:	83 ec 08             	sub    esp,0x8
c00084a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084ad:	85 db                	test   ebx,ebx
c00084af:	75 11                	jne    c00084c2 <setActiveTerminal(VgaText*)+0x1d>
c00084b1:	c7 44 24 10 20 f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f520
c00084b9:	83 c4 08             	add    esp,0x8
c00084bc:	5b                   	pop    ebx
c00084bd:	e9 0d 7f 00 00       	jmp    c00103cf <KePanic(char const*)>
c00084c2:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084c7:	85 c0                	test   eax,eax
c00084c9:	74 0c                	je     c00084d7 <setActiveTerminal(VgaText*)+0x32>
c00084cb:	83 ec 0c             	sub    esp,0xc
c00084ce:	50                   	push   eax
c00084cf:	e8 80 fd ff ff       	call   c0008254 <VgaText::updateCursor()>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084dd:	50                   	push   eax
c00084de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084e1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084e4:	53                   	push   ebx
c00084e5:	e8 a4 ff ff ff       	call   c000848e <VgaText::setCursor(int, int)>
c00084ea:	83 c4 18             	add    esp,0x18
c00084ed:	5b                   	pop    ebx
c00084ee:	c3                   	ret    
c00084ef:	90                   	nop

c00084f0 <VgaText::clearScreen()>:
c00084f0:	57                   	push   edi
c00084f1:	56                   	push   esi
c00084f2:	31 f6                	xor    esi,esi
c00084f4:	53                   	push   ebx
c00084f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084f9:	52                   	push   edx
c00084fa:	6a 00                	push   0x0
c00084fc:	6a 00                	push   0x0
c00084fe:	53                   	push   ebx
c00084ff:	e8 8a ff ff ff       	call   c000848e <VgaText::setCursor(int, int)>
c0008504:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000850b:	83 c4 10             	add    esp,0x10
c000850e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008511:	7e 20                	jle    c0008533 <VgaText::clearScreen()+0x43>
c0008513:	31 ff                	xor    edi,edi
c0008515:	50                   	push   eax
c0008516:	50                   	push   eax
c0008517:	56                   	push   esi
c0008518:	57                   	push   edi
c0008519:	47                   	inc    edi
c000851a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000851d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008520:	6a 20                	push   0x20
c0008522:	53                   	push   ebx
c0008523:	e8 c6 fe ff ff       	call   c00083ee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008528:	83 c4 20             	add    esp,0x20
c000852b:	83 ff 50             	cmp    edi,0x50
c000852e:	75 e5                	jne    c0008515 <VgaText::clearScreen()+0x25>
c0008530:	46                   	inc    esi
c0008531:	eb db                	jmp    c000850e <VgaText::clearScreen()+0x1e>
c0008533:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000853a:	5b                   	pop    ebx
c000853b:	5e                   	pop    esi
c000853c:	5f                   	pop    edi
c000853d:	c3                   	ret    

c000853e <VgaText::setCursorX(int)>:
c000853e:	83 ec 10             	sub    esp,0x10
c0008541:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008545:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000854c:	50                   	push   eax
c000854d:	e8 3c ff ff ff       	call   c000848e <VgaText::setCursor(int, int)>
c0008552:	83 c4 1c             	add    esp,0x1c
c0008555:	c3                   	ret    

c0008556 <VgaText::setCursorY(int)>:
c0008556:	83 ec 10             	sub    esp,0x10
c0008559:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000855d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008561:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008564:	50                   	push   eax
c0008565:	e8 24 ff ff ff       	call   c000848e <VgaText::setCursor(int, int)>
c000856a:	83 c4 1c             	add    esp,0x1c
c000856d:	c3                   	ret    

c000856e <VgaText::incrementCursor(bool)>:
c000856e:	56                   	push   esi
c000856f:	53                   	push   ebx
c0008570:	51                   	push   ecx
c0008571:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008579:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000857c:	40                   	inc    eax
c000857d:	83 f8 50             	cmp    eax,0x50
c0008580:	74 05                	je     c0008587 <VgaText::incrementCursor(bool)+0x19>
c0008582:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008585:	eb 24                	jmp    c00085ab <VgaText::incrementCursor(bool)+0x3d>
c0008587:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000858a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008591:	8d 50 01             	lea    edx,[eax+0x1]
c0008594:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008597:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000859a:	75 0f                	jne    c00085ab <VgaText::incrementCursor(bool)+0x3d>
c000859c:	83 ec 0c             	sub    esp,0xc
c000859f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085a2:	53                   	push   ebx
c00085a3:	e8 a2 fd ff ff       	call   c000834a <VgaText::scrollScreen()>
c00085a8:	83 c4 10             	add    esp,0x10
c00085ab:	89 f0                	mov    eax,esi
c00085ad:	84 c0                	test   al,al
c00085af:	74 0c                	je     c00085bd <VgaText::incrementCursor(bool)+0x4f>
c00085b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085b5:	5a                   	pop    edx
c00085b6:	5b                   	pop    ebx
c00085b7:	5e                   	pop    esi
c00085b8:	e9 97 fc ff ff       	jmp    c0008254 <VgaText::updateCursor()>
c00085bd:	58                   	pop    eax
c00085be:	5b                   	pop    ebx
c00085bf:	5e                   	pop    esi
c00085c0:	c3                   	ret    
c00085c1:	90                   	nop

c00085c2 <VgaText::decrementCursor(bool)>:
c00085c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ca:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085cd:	85 c0                	test   eax,eax
c00085cf:	74 04                	je     c00085d5 <VgaText::decrementCursor(bool)+0x13>
c00085d1:	48                   	dec    eax
c00085d2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085d5:	84 c9                	test   cl,cl
c00085d7:	74 09                	je     c00085e2 <VgaText::decrementCursor(bool)+0x20>
c00085d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085dd:	e9 72 fc ff ff       	jmp    c0008254 <VgaText::updateCursor()>
c00085e2:	c3                   	ret    
c00085e3:	90                   	nop

c00085e4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085e4:	53                   	push   ebx
c00085e5:	83 ec 08             	sub    esp,0x8
c00085e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00085f8:	3c 07                	cmp    al,0x7
c00085fa:	75 21                	jne    c000861d <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00085fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008604:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000860c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008614:	83 c4 08             	add    esp,0x8
c0008617:	5b                   	pop    ebx
c0008618:	e9 46 2e 00 00       	jmp    c000b463 <Krnl::beep(int, int, bool)>
c000861d:	3c 0d                	cmp    al,0xd
c000861f:	75 09                	jne    c000862a <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008621:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008628:	eb 2c                	jmp    c0008656 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000862a:	3c 0a                	cmp    al,0xa
c000862c:	75 31                	jne    c000865f <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000862e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008631:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008638:	8d 50 01             	lea    edx,[eax+0x1]
c000863b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000863e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008641:	75 0f                	jne    c0008652 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008643:	83 ec 0c             	sub    esp,0xc
c0008646:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008649:	53                   	push   ebx
c000864a:	e8 fb fc ff ff       	call   c000834a <VgaText::scrollScreen()>
c000864f:	83 c4 10             	add    esp,0x10
c0008652:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008656:	83 c4 08             	add    esp,0x8
c0008659:	5b                   	pop    ebx
c000865a:	e9 f5 fb ff ff       	jmp    c0008254 <VgaText::updateCursor()>
c000865f:	3c 08                	cmp    al,0x8
c0008661:	75 25                	jne    c0008688 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008663:	50                   	push   eax
c0008664:	50                   	push   eax
c0008665:	6a 01                	push   0x1
c0008667:	53                   	push   ebx
c0008668:	e8 55 ff ff ff       	call   c00085c2 <VgaText::decrementCursor(bool)>
c000866d:	5a                   	pop    edx
c000866e:	59                   	pop    ecx
c000866f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008672:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008675:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008678:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000867b:	6a 20                	push   0x20
c000867d:	53                   	push   ebx
c000867e:	e8 6b fd ff ff       	call   c00083ee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008683:	83 c4 28             	add    esp,0x28
c0008686:	5b                   	pop    ebx
c0008687:	c3                   	ret    
c0008688:	83 ec 08             	sub    esp,0x8
c000868b:	0f be c0             	movsx  eax,al
c000868e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008691:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008694:	51                   	push   ecx
c0008695:	52                   	push   edx
c0008696:	50                   	push   eax
c0008697:	53                   	push   ebx
c0008698:	e8 51 fd ff ff       	call   c00083ee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000869d:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086a1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086a9:	83 c4 28             	add    esp,0x28
c00086ac:	5b                   	pop    ebx
c00086ad:	e9 bc fe ff ff       	jmp    c000856e <VgaText::incrementCursor(bool)>

c00086b2 <VgaText::putchar(char)>:
c00086b2:	56                   	push   esi
c00086b3:	53                   	push   ebx
c00086b4:	83 ec 14             	sub    esp,0x14
c00086b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086bf:	3c 5b                	cmp    al,0x5b
c00086c1:	75 18                	jne    c00086db <VgaText::putchar(char)+0x29>
c00086c3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086c7:	74 1f                	je     c00086e8 <VgaText::putchar(char)+0x36>
c00086c9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086cf:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086d6:	e9 bd 00 00 00       	jmp    c0008798 <VgaText::putchar(char)+0xe6>
c00086db:	3c 1b                	cmp    al,0x1b
c00086dd:	75 09                	jne    c00086e8 <VgaText::putchar(char)+0x36>
c00086df:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086e3:	e9 b0 00 00 00       	jmp    c0008798 <VgaText::putchar(char)+0xe6>
c00086e8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086eb:	84 c9                	test   cl,cl
c00086ed:	0f 84 92 00 00 00    	je     c0008785 <VgaText::putchar(char)+0xd3>
c00086f3:	8d 50 c0             	lea    edx,[eax-0x40]
c00086f6:	80 fa 3e             	cmp    dl,0x3e
c00086f9:	77 76                	ja     c0008771 <VgaText::putchar(char)+0xbf>
c00086fb:	3c 6d                	cmp    al,0x6d
c00086fd:	75 47                	jne    c0008746 <VgaText::putchar(char)+0x94>
c00086ff:	31 f6                	xor    esi,esi
c0008701:	31 d2                	xor    edx,edx
c0008703:	31 c0                	xor    eax,eax
c0008705:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008708:	7e 2d                	jle    c0008737 <VgaText::putchar(char)+0x85>
c000870a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000870f:	80 fa 3b             	cmp    dl,0x3b
c0008712:	75 17                	jne    c000872b <VgaText::putchar(char)+0x79>
c0008714:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008718:	50                   	push   eax
c0008719:	53                   	push   ebx
c000871a:	e8 4b fb ff ff       	call   c000826a <VgaText::doANSI_SGR(int)>
c000871f:	59                   	pop    ecx
c0008720:	31 d2                	xor    edx,edx
c0008722:	58                   	pop    eax
c0008723:	31 c0                	xor    eax,eax
c0008725:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008729:	eb 09                	jmp    c0008734 <VgaText::putchar(char)+0x82>
c000872b:	6b c0 0a             	imul   eax,eax,0xa
c000872e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008732:	88 ca                	mov    dl,cl
c0008734:	46                   	inc    esi
c0008735:	eb ce                	jmp    c0008705 <VgaText::putchar(char)+0x53>
c0008737:	84 d2                	test   dl,dl
c0008739:	74 2e                	je     c0008769 <VgaText::putchar(char)+0xb7>
c000873b:	50                   	push   eax
c000873c:	53                   	push   ebx
c000873d:	e8 28 fb ff ff       	call   c000826a <VgaText::doANSI_SGR(int)>
c0008742:	58                   	pop    eax
c0008743:	5a                   	pop    edx
c0008744:	eb 23                	jmp    c0008769 <VgaText::putchar(char)+0xb7>
c0008746:	3c 4a                	cmp    al,0x4a
c0008748:	75 1f                	jne    c0008769 <VgaText::putchar(char)+0xb7>
c000874a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000874e:	75 19                	jne    c0008769 <VgaText::putchar(char)+0xb7>
c0008750:	83 ec 0c             	sub    esp,0xc
c0008753:	53                   	push   ebx
c0008754:	e8 97 fd ff ff       	call   c00084f0 <VgaText::clearScreen()>
c0008759:	83 c4 0c             	add    esp,0xc
c000875c:	6a 00                	push   0x0
c000875e:	6a 00                	push   0x0
c0008760:	53                   	push   ebx
c0008761:	e8 28 fd ff ff       	call   c000848e <VgaText::setCursor(int, int)>
c0008766:	83 c4 10             	add    esp,0x10
c0008769:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000876f:	eb 27                	jmp    c0008798 <VgaText::putchar(char)+0xe6>
c0008771:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008774:	83 fa 0e             	cmp    edx,0xe
c0008777:	7f 1f                	jg     c0008798 <VgaText::putchar(char)+0xe6>
c0008779:	8d 4a 01             	lea    ecx,[edx+0x1]
c000877c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000877f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0008783:	eb 13                	jmp    c0008798 <VgaText::putchar(char)+0xe6>
c0008785:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008788:	0f be c0             	movsx  eax,al
c000878b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000878e:	50                   	push   eax
c000878f:	53                   	push   ebx
c0008790:	e8 4f fe ff ff       	call   c00085e4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008795:	83 c4 10             	add    esp,0x10
c0008798:	83 c4 14             	add    esp,0x14
c000879b:	5b                   	pop    ebx
c000879c:	5e                   	pop    esi
c000879d:	c3                   	ret    

c000879e <VgaText::putx(unsigned int)>:
c000879e:	57                   	push   edi
c000879f:	b9 11 00 00 00       	mov    ecx,0x11
c00087a4:	56                   	push   esi
c00087a5:	be 2e f5 01 c0       	mov    esi,0xc001f52e
c00087aa:	53                   	push   ebx
c00087ab:	83 ec 20             	sub    esp,0x20
c00087ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087b2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087b6:	fc                   	cld    
c00087b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087b9:	be 08 00 00 00       	mov    esi,0x8
c00087be:	50                   	push   eax
c00087bf:	50                   	push   eax
c00087c0:	89 d8                	mov    eax,ebx
c00087c2:	c1 e3 04             	shl    ebx,0x4
c00087c5:	c1 e8 1c             	shr    eax,0x1c
c00087c8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087cd:	50                   	push   eax
c00087ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087d2:	e8 db fe ff ff       	call   c00086b2 <VgaText::putchar(char)>
c00087d7:	83 c4 10             	add    esp,0x10
c00087da:	4e                   	dec    esi
c00087db:	75 e1                	jne    c00087be <VgaText::putx(unsigned int)+0x20>
c00087dd:	83 c4 20             	add    esp,0x20
c00087e0:	5b                   	pop    ebx
c00087e1:	5e                   	pop    esi
c00087e2:	5f                   	pop    edi
c00087e3:	c3                   	ret    

c00087e4 <VgaText::puts(char const*)>:
c00087e4:	53                   	push   ebx
c00087e5:	83 ec 08             	sub    esp,0x8
c00087e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087ef:	84 c0                	test   al,al
c00087f1:	74 12                	je     c0008805 <VgaText::puts(char const*)+0x21>
c00087f3:	43                   	inc    ebx
c00087f4:	51                   	push   ecx
c00087f5:	51                   	push   ecx
c00087f6:	50                   	push   eax
c00087f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087fb:	e8 b2 fe ff ff       	call   c00086b2 <VgaText::putchar(char)>
c0008800:	83 c4 10             	add    esp,0x10
c0008803:	eb e7                	jmp    c00087ec <VgaText::puts(char const*)+0x8>
c0008805:	83 c4 08             	add    esp,0x8
c0008808:	5b                   	pop    ebx
c0008809:	c3                   	ret    

c000880a <VgaText::write(unsigned long long, void*, int*)>:
c000880a:	55                   	push   ebp
c000880b:	57                   	push   edi
c000880c:	56                   	push   esi
c000880d:	53                   	push   ebx
c000880e:	83 ec 0c             	sub    esp,0xc
c0008811:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008815:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008819:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000881d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008824:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008827:	39 eb                	cmp    ebx,ebp
c0008829:	74 13                	je     c000883e <VgaText::write(unsigned long long, void*, int*)+0x34>
c000882b:	43                   	inc    ebx
c000882c:	50                   	push   eax
c000882d:	50                   	push   eax
c000882e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008832:	50                   	push   eax
c0008833:	56                   	push   esi
c0008834:	e8 79 fe ff ff       	call   c00086b2 <VgaText::putchar(char)>
c0008839:	83 c4 10             	add    esp,0x10
c000883c:	eb e9                	jmp    c0008827 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000883e:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008849:	89 38                	mov    DWORD PTR [eax],edi
c000884b:	83 c4 0c             	add    esp,0xc
c000884e:	31 c0                	xor    eax,eax
c0008850:	5b                   	pop    ebx
c0008851:	5e                   	pop    esi
c0008852:	5f                   	pop    edi
c0008853:	5d                   	pop    ebp
c0008854:	c3                   	ret    
c0008855:	90                   	nop

c0008856 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008856:	55                   	push   ebp
c0008857:	57                   	push   edi
c0008858:	56                   	push   esi
c0008859:	53                   	push   ebx
c000885a:	83 ec 0c             	sub    esp,0xc
c000885d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008866:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000886d:	50                   	push   eax
c000886e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008873:	50                   	push   eax
c0008874:	e8 bf fa ff ff       	call   c0008338 <VgaText::combineColours(unsigned char, unsigned char)>
c0008879:	5a                   	pop    edx
c000887a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000887f:	59                   	pop    ecx
c0008880:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008883:	89 c5                	mov    ebp,eax
c0008885:	0f b7 f6             	movzx  esi,si
c0008888:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000888c:	01 f6                	add    esi,esi
c000888e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008891:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008894:	84 c0                	test   al,al
c0008896:	0f 84 f4 00 00 00    	je     c0008990 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c000889c:	3c 0d                	cmp    al,0xd
c000889e:	75 0c                	jne    c00088ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088a0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088a7:	e9 de 00 00 00       	jmp    c000898a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ac:	3c 0a                	cmp    al,0xa
c00088ae:	75 45                	jne    c00088f5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088b3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088ba:	8d 48 01             	lea    ecx,[eax+0x1]
c00088bd:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088c0:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088c3:	75 0f                	jne    c00088d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088c5:	83 ec 0c             	sub    esp,0xc
c00088c8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088cb:	53                   	push   ebx
c00088cc:	e8 79 fa ff ff       	call   c000834a <VgaText::scrollScreen()>
c00088d1:	83 c4 10             	add    esp,0x10
c00088d4:	83 ec 0c             	sub    esp,0xc
c00088d7:	53                   	push   ebx
c00088d8:	e8 77 f9 ff ff       	call   c0008254 <VgaText::updateCursor()>
c00088dd:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088e2:	83 c4 10             	add    esp,0x10
c00088e5:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088e8:	0f b7 f6             	movzx  esi,si
c00088eb:	01 f6                	add    esi,esi
c00088ed:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088f0:	e9 95 00 00 00       	jmp    c000898a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088f5:	3c 08                	cmp    al,0x8
c00088f7:	75 35                	jne    c000892e <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c00088f9:	51                   	push   ecx
c00088fa:	51                   	push   ecx
c00088fb:	6a 01                	push   0x1
c00088fd:	53                   	push   ebx
c00088fe:	e8 bf fc ff ff       	call   c00085c2 <VgaText::decrementCursor(bool)>
c0008903:	5e                   	pop    esi
c0008904:	58                   	pop    eax
c0008905:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008908:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000890b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000890e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008911:	6a 20                	push   0x20
c0008913:	53                   	push   ebx
c0008914:	e8 d5 fa ff ff       	call   c00083ee <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008919:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000891e:	83 c4 20             	add    esp,0x20
c0008921:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008924:	0f b7 f6             	movzx  esi,si
c0008927:	01 f6                	add    esi,esi
c0008929:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000892c:	eb 5c                	jmp    c000898a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000892e:	52                   	push   edx
c000892f:	52                   	push   edx
c0008930:	89 ea                	mov    edx,ebp
c0008932:	0f b6 ca             	movzx  ecx,dl
c0008935:	51                   	push   ecx
c0008936:	50                   	push   eax
c0008937:	e8 a0 fa ff ff       	call   c00083dc <VgaText::combineCharAndColour(char, unsigned char)>
c000893c:	83 c4 10             	add    esp,0x10
c000893f:	66 89 06             	mov    WORD PTR [esi],ax
c0008942:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008948:	75 1d                	jne    c0008967 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000894a:	83 ec 0c             	sub    esp,0xc
c000894d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008950:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008953:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008957:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000895b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000895e:	50                   	push   eax
c000895f:	e8 48 ed 00 00       	call   c00176ac <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008964:	83 c4 20             	add    esp,0x20
c0008967:	83 c6 02             	add    esi,0x2
c000896a:	50                   	push   eax
c000896b:	50                   	push   eax
c000896c:	6a 00                	push   0x0
c000896e:	53                   	push   ebx
c000896f:	e8 fa fb ff ff       	call   c000856e <VgaText::incrementCursor(bool)>
c0008974:	83 c4 10             	add    esp,0x10
c0008977:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000897b:	75 0d                	jne    c000898a <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000897d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008982:	0f b7 f6             	movzx  esi,si
c0008985:	01 f6                	add    esi,esi
c0008987:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000898a:	47                   	inc    edi
c000898b:	e9 01 ff ff ff       	jmp    c0008891 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008990:	83 ec 0c             	sub    esp,0xc
c0008993:	53                   	push   ebx
c0008994:	e8 bb f8 ff ff       	call   c0008254 <VgaText::updateCursor()>
c0008999:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089a0:	83 c4 1c             	add    esp,0x1c
c00089a3:	5b                   	pop    ebx
c00089a4:	5e                   	pop    esi
c00089a5:	5f                   	pop    edi
c00089a6:	5d                   	pop    ebp
c00089a7:	c3                   	ret    

c00089a8 <VgaText::VgaText(char const*)>:
c00089a8:	56                   	push   esi
c00089a9:	53                   	push   ebx
c00089aa:	83 ec 04             	sub    esp,0x4
c00089ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b1:	83 ec 08             	sub    esp,0x8
c00089b4:	6a 00                	push   0x0
c00089b6:	50                   	push   eax
c00089b7:	e8 52 05 00 00       	call   c0008f0e <UnixFile::UnixFile(int)>
c00089bc:	83 c4 10             	add    esp,0x10
c00089bf:	ba 54 f5 01 c0       	mov    edx,0xc001f554
c00089c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c8:	89 10                	mov    DWORD PTR [eax],edx
c00089ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ce:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00089fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ff:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a15:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a20:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a27:	83 ec 0c             	sub    esp,0xc
c0008a2a:	6a 01                	push   0x1
c0008a2c:	e8 20 09 00 00       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0008a31:	83 c4 10             	add    esp,0x10
c0008a34:	89 c2                	mov    edx,eax
c0008a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a3d:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a4a:	89 c6                	mov    esi,eax
c0008a4c:	e8 f8 f0 ff ff       	call   c0007b49 <Phys::allocatePage()>
c0008a51:	68 05 0c 00 00       	push   0xc05
c0008a56:	56                   	push   esi
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 b6 0f 00 00       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a68:	83 ec 04             	sub    esp,0x4
c0008a6b:	68 a0 0f 00 00       	push   0xfa0
c0008a70:	6a 00                	push   0x0
c0008a72:	50                   	push   eax
c0008a73:	e8 48 7a ff ff       	call   c00004c0 <memset>
c0008a78:	83 c4 10             	add    esp,0x10
c0008a7b:	83 ec 04             	sub    esp,0x4
c0008a7e:	6a 00                	push   0x0
c0008a80:	6a 07                	push   0x7
c0008a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a86:	e8 73 f8 ff ff       	call   c00082fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a8b:	83 c4 10             	add    esp,0x10
c0008a8e:	83 ec 04             	sub    esp,0x4
c0008a91:	6a 00                	push   0x0
c0008a93:	6a 00                	push   0x0
c0008a95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a99:	e8 f0 f9 ff ff       	call   c000848e <VgaText::setCursor(int, int)>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	83 ec 0c             	sub    esp,0xc
c0008aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa8:	e8 43 fa ff ff       	call   c00084f0 <VgaText::clearScreen()>
c0008aad:	83 c4 10             	add    esp,0x10
c0008ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab4:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abc:	05 82 00 00 00       	add    eax,0x82
c0008ac1:	83 ec 04             	sub    esp,0x4
c0008ac4:	68 80 00 00 00       	push   0x80
c0008ac9:	6a 00                	push   0x0
c0008acb:	50                   	push   eax
c0008acc:	e8 ef 79 ff ff       	call   c00004c0 <memset>
c0008ad1:	83 c4 10             	add    esp,0x10
c0008ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad8:	05 02 01 00 00       	add    eax,0x102
c0008add:	83 ec 04             	sub    esp,0x4
c0008ae0:	68 80 00 00 00       	push   0x80
c0008ae5:	6a 00                	push   0x0
c0008ae7:	50                   	push   eax
c0008ae8:	e8 d3 79 ff ff       	call   c00004c0 <memset>
c0008aed:	83 c4 10             	add    esp,0x10
c0008af0:	90                   	nop
c0008af1:	83 c4 04             	add    esp,0x4
c0008af4:	5b                   	pop    ebx
c0008af5:	5e                   	pop    esi
c0008af6:	c3                   	ret    
c0008af7:	90                   	nop

c0008af8 <VgaText::receiveKey(unsigned char)>:
c0008af8:	55                   	push   ebp
c0008af9:	57                   	push   edi
c0008afa:	56                   	push   esi
c0008afb:	53                   	push   ebx
c0008afc:	83 ec 1c             	sub    esp,0x1c
c0008aff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b03:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b07:	89 f0                	mov    eax,esi
c0008b09:	84 c0                	test   al,al
c0008b0b:	0f 84 54 01 00 00    	je     c0008c65 <VgaText::receiveKey(unsigned char)+0x16d>
c0008b11:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b17:	3c 08                	cmp    al,0x8
c0008b19:	75 6b                	jne    c0008b86 <VgaText::receiveKey(unsigned char)+0x8e>
c0008b1b:	83 ec 0c             	sub    esp,0xc
c0008b1e:	57                   	push   edi
c0008b1f:	e8 0c 7a ff ff       	call   c0000530 <strlen>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	85 c0                	test   eax,eax
c0008b29:	0f 84 f1 00 00 00    	je     c0008c20 <VgaText::receiveKey(unsigned char)+0x128>
c0008b2f:	50                   	push   eax
c0008b30:	50                   	push   eax
c0008b31:	6a 08                	push   0x8
c0008b33:	53                   	push   ebx
c0008b34:	e8 79 fb ff ff       	call   c00086b2 <VgaText::putchar(char)>
c0008b39:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b3c:	e8 ef 79 ff ff       	call   c0000530 <strlen>
c0008b41:	83 c4 10             	add    esp,0x10
c0008b44:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b4b:	3c 0d                	cmp    al,0xd
c0008b4d:	0f 95 c1             	setne  cl
c0008b50:	3c 1f                	cmp    al,0x1f
c0008b52:	0f 9e c2             	setle  dl
c0008b55:	84 d1                	test   cl,dl
c0008b57:	74 17                	je     c0008b70 <VgaText::receiveKey(unsigned char)+0x78>
c0008b59:	83 e8 08             	sub    eax,0x8
c0008b5c:	3c 02                	cmp    al,0x2
c0008b5e:	76 10                	jbe    c0008b70 <VgaText::receiveKey(unsigned char)+0x78>
c0008b60:	55                   	push   ebp
c0008b61:	55                   	push   ebp
c0008b62:	68 3f f5 01 c0       	push   0xc001f53f
c0008b67:	53                   	push   ebx
c0008b68:	e8 77 fc ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0008b6d:	83 c4 10             	add    esp,0x10
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	57                   	push   edi
c0008b74:	e8 b7 79 ff ff       	call   c0000530 <strlen>
c0008b79:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b81:	e9 97 00 00 00       	jmp    c0008c1d <VgaText::receiveKey(unsigned char)+0x125>
c0008b86:	83 ec 0c             	sub    esp,0xc
c0008b89:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b8f:	50                   	push   eax
c0008b90:	e8 9b 79 ff ff       	call   c0000530 <strlen>
c0008b95:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b98:	89 c5                	mov    ebp,eax
c0008b9a:	e8 91 79 ff ff       	call   c0000530 <strlen>
c0008b9f:	83 c4 10             	add    esp,0x10
c0008ba2:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008ba6:	3d 80 00 00 00       	cmp    eax,0x80
c0008bab:	0f 87 b4 00 00 00    	ja     c0008c65 <VgaText::receiveKey(unsigned char)+0x16d>
c0008bb1:	8d 46 ff             	lea    eax,[esi-0x1]
c0008bb4:	3c 1e                	cmp    al,0x1e
c0008bb6:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bb9:	0f 96 c2             	setbe  dl
c0008bbc:	3c 01                	cmp    al,0x1
c0008bbe:	0f 97 c0             	seta   al
c0008bc1:	84 c2                	test   dl,al
c0008bc3:	74 2f                	je     c0008bf4 <VgaText::receiveKey(unsigned char)+0xfc>
c0008bc5:	89 f0                	mov    eax,esi
c0008bc7:	3c 0d                	cmp    al,0xd
c0008bc9:	74 29                	je     c0008bf4 <VgaText::receiveKey(unsigned char)+0xfc>
c0008bcb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd1:	68 45 f5 01 c0       	push   0xc001f545
c0008bd6:	53                   	push   ebx
c0008bd7:	e8 7a fc ff ff       	call   c0008856 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008bdc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bdf:	8d 46 40             	lea    eax,[esi+0x40]
c0008be2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008be5:	0f b6 c0             	movzx  eax,al
c0008be8:	50                   	push   eax
c0008be9:	53                   	push   ebx
c0008bea:	e8 f5 f9 ff ff       	call   c00085e4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008bef:	83 c4 20             	add    esp,0x20
c0008bf2:	eb 11                	jmp    c0008c05 <VgaText::receiveKey(unsigned char)+0x10d>
c0008bf4:	89 f0                	mov    eax,esi
c0008bf6:	51                   	push   ecx
c0008bf7:	0f be c0             	movsx  eax,al
c0008bfa:	51                   	push   ecx
c0008bfb:	50                   	push   eax
c0008bfc:	53                   	push   ebx
c0008bfd:	e8 b0 fa ff ff       	call   c00086b2 <VgaText::putchar(char)>
c0008c02:	83 c4 10             	add    esp,0x10
c0008c05:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c0a:	89 f0                	mov    eax,esi
c0008c0c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c10:	52                   	push   edx
c0008c11:	52                   	push   edx
c0008c12:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c16:	50                   	push   eax
c0008c17:	57                   	push   edi
c0008c18:	e8 93 7b ff ff       	call   c00007b0 <strcat>
c0008c1d:	83 c4 10             	add    esp,0x10
c0008c20:	89 f1                	mov    ecx,esi
c0008c22:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008c28:	b0 01                	mov    al,0x1
c0008c2a:	80 f9 1c             	cmp    cl,0x1c
c0008c2d:	77 0c                	ja     c0008c3b <VgaText::receiveKey(unsigned char)+0x143>
c0008c2f:	b8 08 04 00 10       	mov    eax,0x10000408
c0008c34:	d3 e8                	shr    eax,cl
c0008c36:	f7 d0                	not    eax
c0008c38:	83 e0 01             	and    eax,0x1
c0008c3b:	84 c0                	test   al,al
c0008c3d:	74 04                	je     c0008c43 <VgaText::receiveKey(unsigned char)+0x14b>
c0008c3f:	84 d2                	test   dl,dl
c0008c41:	74 22                	je     c0008c65 <VgaText::receiveKey(unsigned char)+0x16d>
c0008c43:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c49:	50                   	push   eax
c0008c4a:	50                   	push   eax
c0008c4b:	57                   	push   edi
c0008c4c:	53                   	push   ebx
c0008c4d:	e8 5e 7b ff ff       	call   c00007b0 <strcat>
c0008c52:	83 c4 0c             	add    esp,0xc
c0008c55:	68 80 00 00 00       	push   0x80
c0008c5a:	6a 00                	push   0x0
c0008c5c:	57                   	push   edi
c0008c5d:	e8 5e 78 ff ff       	call   c00004c0 <memset>
c0008c62:	83 c4 10             	add    esp,0x10
c0008c65:	83 c4 1c             	add    esp,0x1c
c0008c68:	5b                   	pop    ebx
c0008c69:	5e                   	pop    esi
c0008c6a:	5f                   	pop    edi
c0008c6b:	5d                   	pop    ebp
c0008c6c:	c3                   	ret    
c0008c6d:	90                   	nop

c0008c6e <VgaText::doUpdate()>:
c0008c6e:	c3                   	ret    

c0008c6f <newTerminal(char*)>:
c0008c6f:	83 ec 28             	sub    esp,0x28
c0008c72:	68 84 01 00 00       	push   0x184
c0008c77:	e8 f1 eb ff ff       	call   c000786d <malloc>
c0008c7c:	5a                   	pop    edx
c0008c7d:	59                   	pop    ecx
c0008c7e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c82:	50                   	push   eax
c0008c83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c87:	e8 1c fd ff ff       	call   c00089a8 <VgaText::VgaText(char const*)>
c0008c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c90:	83 c4 2c             	add    esp,0x2c
c0008c93:	c3                   	ret    

c0008c94 <TSS::TSS()>:
c0008c94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c9f:	90                   	nop
c0008ca0:	c3                   	ret    
c0008ca1:	90                   	nop
c0008ca2:	66 90                	xchg   ax,ax

c0008ca4 <TSS::setESP(unsigned long)>:
c0008ca4:	55                   	push   ebp
c0008ca5:	89 e5                	mov    ebp,esp
c0008ca7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008caa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cb0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cb3:	90                   	nop
c0008cb4:	5d                   	pop    ebp
c0008cb5:	c3                   	ret    
c0008cb6:	66 90                	xchg   ax,ax

c0008cb8 <TSS::flush()>:
c0008cb8:	55                   	push   ebp
c0008cb9:	89 e5                	mov    ebp,esp
c0008cbb:	83 ec 10             	sub    esp,0x10
c0008cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0008cc3:	83 c8 03             	or     eax,0x3
c0008cc6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cca:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cce:	66 89 d0             	mov    ax,dx
c0008cd1:	0f 00 d8             	ltr    ax
c0008cd4:	90                   	nop
c0008cd5:	c9                   	leave  
c0008cd6:	c3                   	ret    
c0008cd7:	90                   	nop

c0008cd8 <TSS::setup(unsigned long, unsigned long)>:
c0008cd8:	55                   	push   ebp
c0008cd9:	89 e5                	mov    ebp,esp
c0008cdb:	83 ec 18             	sub    esp,0x18
c0008cde:	83 ec 0c             	sub    esp,0xc
c0008ce1:	6a 68                	push   0x68
c0008ce3:	e8 85 eb ff ff       	call   c000786d <malloc>
c0008ce8:	83 c4 10             	add    esp,0x10
c0008ceb:	89 c2                	mov    edx,eax
c0008ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf9:	83 ec 04             	sub    esp,0x4
c0008cfc:	6a 68                	push   0x68
c0008cfe:	6a 00                	push   0x0
c0008d00:	50                   	push   eax
c0008d01:	e8 ba 77 ff ff       	call   c00004c0 <memset>
c0008d06:	83 c4 10             	add    esp,0x10
c0008d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d0f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d33:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3f:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4b:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d57:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d6f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d7e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d87:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d8a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d93:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008da0:	0f 20 da             	mov    edx,cr3
c0008da3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008da6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008da9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008daf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008db2:	83 ec 08             	sub    esp,0x8
c0008db5:	50                   	push   eax
c0008db6:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db9:	50                   	push   eax
c0008dba:	e8 33 e3 ff ff       	call   c00070f2 <GDTEntry::setBase(unsigned int)>
c0008dbf:	83 c4 10             	add    esp,0x10
c0008dc2:	83 ec 08             	sub    esp,0x8
c0008dc5:	6a 68                	push   0x68
c0008dc7:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dca:	50                   	push   eax
c0008dcb:	e8 3e e3 ff ff       	call   c000710e <GDTEntry::setLimit(unsigned int)>
c0008dd0:	83 c4 10             	add    esp,0x10
c0008dd3:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dd7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dda:	83 e0 0f             	and    eax,0xf
c0008ddd:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008de3:	83 c8 40             	or     eax,0x40
c0008de6:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008de9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008dee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008df4:	05 78 01 00 00       	add    eax,0x178
c0008df9:	83 ec 04             	sub    esp,0x4
c0008dfc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008dff:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008e02:	50                   	push   eax
c0008e03:	e8 3a e3 ff ff       	call   c0007142 <GDT::addEntry(GDTEntry)>
c0008e08:	83 c4 10             	add    esp,0x10
c0008e0b:	89 c2                	mov    edx,eax
c0008e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e10:	89 10                	mov    DWORD PTR [eax],edx
c0008e12:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e1d:	05 78 01 00 00       	add    eax,0x178
c0008e22:	83 ec 0c             	sub    esp,0xc
c0008e25:	50                   	push   eax
c0008e26:	e8 41 e3 ff ff       	call   c000716c <GDT::flush()>
c0008e2b:	83 c4 10             	add    esp,0x10
c0008e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	c9                   	leave  
c0008e34:	c3                   	ret    
c0008e35:	90                   	nop

c0008e36 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e46:	75 08                	jne    c0008e50 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e48:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e4e:	eb 38                	jmp    c0008e88 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e50:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e55:	75 17                	jne    c0008e6e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e65:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e6b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e6e:	89 c1                	mov    ecx,eax
c0008e70:	83 e1 fd             	and    ecx,0xfffffffd
c0008e73:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e79:	74 cd                	je     c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e7b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e80:	83 e0 ef             	and    eax,0xffffffef
c0008e83:	83 f8 08             	cmp    eax,0x8
c0008e86:	76 c0                	jbe    c0008e48 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e88:	31 c0                	xor    eax,eax
c0008e8a:	c3                   	ret    
c0008e8b:	90                   	nop

c0008e8c <ReservedFilename::isAtty()>:
c0008e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e90:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e93:	31 c0                	xor    eax,eax
c0008e95:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e9b:	74 09                	je     c0008ea6 <ReservedFilename::isAtty()+0x1a>
c0008e9d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ea3:	0f 94 c0             	sete   al
c0008ea6:	c3                   	ret    
c0008ea7:	90                   	nop

c0008ea8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008eac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eb3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008eb7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ebc:	75 08                	jne    c0008ec6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008ebe:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ec4:	eb 3d                	jmp    c0008f03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ec6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ecb:	75 17                	jne    c0008ee4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ecd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ed2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ed5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008edb:	8b 10                	mov    edx,DWORD PTR [eax]
c0008edd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ee1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ee4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ee9:	75 04                	jne    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008eeb:	89 0a                	mov    DWORD PTR [edx],ecx
c0008eed:	eb 14                	jmp    c0008f03 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eef:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ef4:	74 c8                	je     c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ef6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008efb:	83 e0 ef             	and    eax,0xffffffef
c0008efe:	83 f8 08             	cmp    eax,0x8
c0008f01:	76 bb                	jbe    c0008ebe <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f03:	31 c0                	xor    eax,eax
c0008f05:	c3                   	ret    

c0008f06 <UnixFile::getFileDescriptor()>:
c0008f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f0d:	c3                   	ret    

c0008f0e <UnixFile::UnixFile(int)>:
c0008f0e:	53                   	push   ebx
c0008f0f:	83 ec 28             	sub    esp,0x28
c0008f12:	ba 1c f6 01 c0       	mov    edx,0xc001f61c
c0008f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f1b:	89 10                	mov    DWORD PTR [eax],edx
c0008f1d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f25:	0f 8f 8c 01 00 00    	jg     c00090b7 <UnixFile::UnixFile(int)+0x1a9>
c0008f2b:	a1 e0 16 02 c0       	mov    eax,ds:0xc00216e0
c0008f30:	8d 50 01             	lea    edx,[eax+0x1]
c0008f33:	89 15 e0 16 02 c0    	mov    DWORD PTR ds:0xc00216e0,edx
c0008f39:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f3d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f40:	83 ec 08             	sub    esp,0x8
c0008f43:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f47:	68 98 3f 02 c0       	push   0xc0023f98
c0008f4c:	e8 97 51 01 00       	call   c001e0e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f59:	83 f0 01             	xor    eax,0x1
c0008f5c:	84 c0                	test   al,al
c0008f5e:	0f 84 54 01 00 00    	je     c00090b8 <UnixFile::UnixFile(int)+0x1aa>
c0008f64:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f6b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f73:	83 ec 0c             	sub    esp,0xc
c0008f76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f7a:	e8 ee e8 ff ff       	call   c000786d <malloc>
c0008f7f:	83 c4 10             	add    esp,0x10
c0008f82:	89 c3                	mov    ebx,eax
c0008f84:	83 ec 08             	sub    esp,0x8
c0008f87:	68 03 ff ff 0f       	push   0xfffff03
c0008f8c:	53                   	push   ebx
c0008f8d:	e8 2c 01 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f9b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008fa3:	83 ec 0c             	sub    esp,0xc
c0008fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008faa:	e8 be e8 ff ff       	call   c000786d <malloc>
c0008faf:	83 c4 10             	add    esp,0x10
c0008fb2:	89 c3                	mov    ebx,eax
c0008fb4:	83 ec 08             	sub    esp,0x8
c0008fb7:	68 01 ff ff 0f       	push   0xfffff01
c0008fbc:	53                   	push   ebx
c0008fbd:	e8 fc 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fcb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fd3:	83 ec 0c             	sub    esp,0xc
c0008fd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fda:	e8 8e e8 ff ff       	call   c000786d <malloc>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	89 c3                	mov    ebx,eax
c0008fe4:	83 ec 08             	sub    esp,0x8
c0008fe7:	68 00 ff ff 0f       	push   0xfffff00
c0008fec:	53                   	push   ebx
c0008fed:	e8 cc 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0008ff2:	83 c4 10             	add    esp,0x10
c0008ff5:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008ffb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009003:	83 ec 0c             	sub    esp,0xc
c0009006:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000900a:	e8 5e e8 ff ff       	call   c000786d <malloc>
c000900f:	83 c4 10             	add    esp,0x10
c0009012:	89 c3                	mov    ebx,eax
c0009014:	83 ec 08             	sub    esp,0x8
c0009017:	68 02 ff ff 0f       	push   0xfffff02
c000901c:	53                   	push   ebx
c000901d:	e8 9c 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0009022:	83 c4 10             	add    esp,0x10
c0009025:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c000902b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009033:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009038:	7f 7e                	jg     c00090b8 <UnixFile::UnixFile(int)+0x1aa>
c000903a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0009042:	83 ec 0c             	sub    esp,0xc
c0009045:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009049:	e8 1f e8 ff ff       	call   c000786d <malloc>
c000904e:	83 c4 10             	add    esp,0x10
c0009051:	89 c3                	mov    ebx,eax
c0009053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009057:	05 10 ff ff 0f       	add    eax,0xfffff10
c000905c:	83 ec 08             	sub    esp,0x8
c000905f:	50                   	push   eax
c0009060:	53                   	push   ebx
c0009061:	e8 58 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c0009066:	83 c4 10             	add    esp,0x10
c0009069:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000906d:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009074:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000907c:	83 ec 0c             	sub    esp,0xc
c000907f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009083:	e8 e5 e7 ff ff       	call   c000786d <malloc>
c0009088:	83 c4 10             	add    esp,0x10
c000908b:	89 c3                	mov    ebx,eax
c000908d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009091:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009096:	83 ec 08             	sub    esp,0x8
c0009099:	50                   	push   eax
c000909a:	53                   	push   ebx
c000909b:	e8 1e 00 00 00       	call   c00090be <ReservedFilename::ReservedFilename(int)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090a7:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090ae:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090b2:	e9 7c ff ff ff       	jmp    c0009033 <UnixFile::UnixFile(int)+0x125>
c00090b7:	90                   	nop
c00090b8:	83 c4 28             	add    esp,0x28
c00090bb:	5b                   	pop    ebx
c00090bc:	c3                   	ret    
c00090bd:	90                   	nop

c00090be <ReservedFilename::ReservedFilename(int)>:
c00090be:	83 ec 0c             	sub    esp,0xc
c00090c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090c5:	83 ec 08             	sub    esp,0x8
c00090c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090cc:	50                   	push   eax
c00090cd:	e8 3c fe ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c00090d2:	83 c4 10             	add    esp,0x10
c00090d5:	ba 38 f6 01 c0       	mov    edx,0xc001f638
c00090da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090de:	89 10                	mov    DWORD PTR [eax],edx
c00090e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090eb:	90                   	nop
c00090ec:	83 c4 0c             	add    esp,0xc
c00090ef:	c3                   	ret    

c00090f0 <UnixFile::~UnixFile()>:
c00090f0:	83 ec 1c             	sub    esp,0x1c
c00090f3:	ba 1c f6 01 c0       	mov    edx,0xc001f61c
c00090f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090fc:	89 10                	mov    DWORD PTR [eax],edx
c00090fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009105:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000910a:	7f 73                	jg     c000917f <UnixFile::~UnixFile()+0x8f>
c000910c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	68 98 3f 02 c0       	push   0xc0023f98
c000911c:	e8 9b 50 01 00       	call   c001e1bc <LinkedList<UnixFile>::getFirstElement()>
c0009121:	83 c4 10             	add    esp,0x10
c0009124:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009128:	83 ec 0c             	sub    esp,0xc
c000912b:	68 98 3f 02 c0       	push   0xc0023f98
c0009130:	e8 8f 50 01 00       	call   c001e1c4 <LinkedList<UnixFile>::removeFirst()>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000913c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009140:	74 40                	je     c0009182 <UnixFile::~UnixFile()+0x92>
c0009142:	83 ec 08             	sub    esp,0x8
c0009145:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009149:	68 98 3f 02 c0       	push   0xc0023f98
c000914e:	e8 95 4f 01 00       	call   c001e0e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009153:	83 c4 10             	add    esp,0x10
c0009156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000915a:	8d 50 01             	lea    edx,[eax+0x1]
c000915d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009161:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009166:	0f 94 c0             	sete   al
c0009169:	84 c0                	test   al,al
c000916b:	74 a7                	je     c0009114 <UnixFile::~UnixFile()+0x24>
c000916d:	83 ec 0c             	sub    esp,0xc
c0009170:	68 f4 f5 01 c0       	push   0xc001f5f4
c0009175:	e8 55 72 00 00       	call   c00103cf <KePanic(char const*)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	eb 95                	jmp    c0009114 <UnixFile::~UnixFile()+0x24>
c000917f:	90                   	nop
c0009180:	eb 01                	jmp    c0009183 <UnixFile::~UnixFile()+0x93>
c0009182:	90                   	nop
c0009183:	90                   	nop
c0009184:	83 c4 1c             	add    esp,0x1c
c0009187:	c3                   	ret    

c0009188 <UnixFile::~UnixFile()>:
c0009188:	83 ec 0c             	sub    esp,0xc
c000918b:	83 ec 0c             	sub    esp,0xc
c000918e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009192:	e8 59 ff ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	83 ec 08             	sub    esp,0x8
c000919d:	6a 0c                	push   0xc
c000919f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091a3:	e8 70 13 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c00091a8:	83 c4 10             	add    esp,0x10
c00091ab:	83 c4 0c             	add    esp,0xc
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <ReservedFilename::~ReservedFilename()>:
c00091b0:	83 ec 0c             	sub    esp,0xc
c00091b3:	ba 38 f6 01 c0       	mov    edx,0xc001f638
c00091b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091bc:	89 10                	mov    DWORD PTR [eax],edx
c00091be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091c2:	83 ec 0c             	sub    esp,0xc
c00091c5:	50                   	push   eax
c00091c6:	e8 25 ff ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c00091cb:	83 c4 10             	add    esp,0x10
c00091ce:	90                   	nop
c00091cf:	83 c4 0c             	add    esp,0xc
c00091d2:	c3                   	ret    
c00091d3:	90                   	nop

c00091d4 <ReservedFilename::~ReservedFilename()>:
c00091d4:	83 ec 0c             	sub    esp,0xc
c00091d7:	83 ec 0c             	sub    esp,0xc
c00091da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091de:	e8 cd ff ff ff       	call   c00091b0 <ReservedFilename::~ReservedFilename()>
c00091e3:	83 c4 10             	add    esp,0x10
c00091e6:	83 ec 08             	sub    esp,0x8
c00091e9:	6a 0c                	push   0xc
c00091eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ef:	e8 24 13 00 00       	call   c000a518 <operator delete(void*, unsigned long)>
c00091f4:	83 c4 10             	add    esp,0x10
c00091f7:	83 c4 0c             	add    esp,0xc
c00091fa:	c3                   	ret    

c00091fb <getFromFileDescriptor(int)>:
c00091fb:	53                   	push   ebx
c00091fc:	83 ec 08             	sub    esp,0x8
c00091ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009203:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009209:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000920f:	7f 2c                	jg     c000923d <getFromFileDescriptor(int)+0x42>
c0009211:	83 ec 0c             	sub    esp,0xc
c0009214:	68 98 3f 02 c0       	push   0xc0023f98
c0009219:	e8 9e 4f 01 00       	call   c001e1bc <LinkedList<UnixFile>::getFirstElement()>
c000921e:	83 c4 10             	add    esp,0x10
c0009221:	85 c0                	test   eax,eax
c0009223:	75 04                	jne    c0009229 <getFromFileDescriptor(int)+0x2e>
c0009225:	31 c0                	xor    eax,eax
c0009227:	eb 6e                	jmp    c0009297 <getFromFileDescriptor(int)+0x9c>
c0009229:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000922c:	74 69                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c000922e:	52                   	push   edx
c000922f:	52                   	push   edx
c0009230:	50                   	push   eax
c0009231:	68 98 3f 02 c0       	push   0xc0023f98
c0009236:	e8 2b 50 01 00       	call   c001e266 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000923b:	eb e1                	jmp    c000921e <getFromFileDescriptor(int)+0x23>
c000923d:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c0009242:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009248:	74 4d                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c000924a:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000924f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009255:	74 40                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009257:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c000925c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009262:	74 33                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009264:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009269:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000926f:	74 26                	je     c0009297 <getFromFileDescriptor(int)+0x9c>
c0009271:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009277:	83 f8 08             	cmp    eax,0x8
c000927a:	77 09                	ja     c0009285 <getFromFileDescriptor(int)+0x8a>
c000927c:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c0009283:	eb 12                	jmp    c0009297 <getFromFileDescriptor(int)+0x9c>
c0009285:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000928b:	83 fb 08             	cmp    ebx,0x8
c000928e:	77 95                	ja     c0009225 <getFromFileDescriptor(int)+0x2a>
c0009290:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c0009297:	83 c4 08             	add    esp,0x8
c000929a:	5b                   	pop    ebx
c000929b:	c3                   	ret    

c000929c <__static_initialization_and_destruction_0(int, int)>:
c000929c:	83 ec 0c             	sub    esp,0xc
c000929f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092a4:	75 34                	jne    c00092da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092a6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092ae:	75 2a                	jne    c00092da <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092b0:	83 ec 0c             	sub    esp,0xc
c00092b3:	68 98 3f 02 c0       	push   0xc0023f98
c00092b8:	e8 e9 4d 01 00       	call   c001e0a6 <LinkedList<UnixFile>::LinkedList()>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	83 ec 04             	sub    esp,0x4
c00092c3:	68 68 16 02 c0       	push   0xc0021668
c00092c8:	68 98 3f 02 c0       	push   0xc0023f98
c00092cd:	68 a4 e0 01 c0       	push   0xc001e0a4
c00092d2:	e8 f1 11 00 00       	call   c000a4c8 <__cxa_atexit>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	90                   	nop
c00092db:	83 c4 0c             	add    esp,0xc
c00092de:	c3                   	ret    

c00092df <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092df:	83 ec 0c             	sub    esp,0xc
c00092e2:	83 ec 08             	sub    esp,0x8
c00092e5:	68 ff ff 00 00       	push   0xffff
c00092ea:	6a 01                	push   0x1
c00092ec:	e8 ab ff ff ff       	call   c000929c <__static_initialization_and_destruction_0(int, int)>
c00092f1:	83 c4 10             	add    esp,0x10
c00092f4:	83 c4 0c             	add    esp,0xc
c00092f7:	c3                   	ret    

c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092f8:	53                   	push   ebx
c00092f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092fd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009301:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	d1 e8                	shr    eax,1
c000930b:	03 05 e8 16 02 c0    	add    eax,DWORD PTR ds:0xc00216e8
c0009311:	83 e1 01             	and    ecx,0x1
c0009314:	8a 10                	mov    dl,BYTE PTR [eax]
c0009316:	75 09                	jne    c0009321 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009318:	83 e2 f0             	and    edx,0xfffffff0
c000931b:	09 da                	or     edx,ebx
c000931d:	88 10                	mov    BYTE PTR [eax],dl
c000931f:	5b                   	pop    ebx
c0009320:	c3                   	ret    
c0009321:	c1 e3 04             	shl    ebx,0x4
c0009324:	83 e2 0f             	and    edx,0xf
c0009327:	09 da                	or     edx,ebx
c0009329:	88 10                	mov    BYTE PTR [eax],dl
c000932b:	5b                   	pop    ebx
c000932c:	c3                   	ret    

c000932d <Virt::getPageState(unsigned long)>:
c000932d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009331:	8b 0d e8 16 02 c0    	mov    ecx,DWORD PTR ds:0xc00216e8
c0009337:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000933d:	89 d0                	mov    eax,edx
c000933f:	d1 e8                	shr    eax,1
c0009341:	83 e2 01             	and    edx,0x1
c0009344:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009347:	75 04                	jne    c000934d <Virt::getPageState(unsigned long)+0x20>
c0009349:	83 e0 0f             	and    eax,0xf
c000934c:	c3                   	ret    
c000934d:	c0 e8 04             	shr    al,0x4
c0009350:	c3                   	ret    

c0009351 <Virt::allocateKernelVirtualPages(int)>:
c0009351:	55                   	push   ebp
c0009352:	31 ed                	xor    ebp,ebp
c0009354:	57                   	push   edi
c0009355:	56                   	push   esi
c0009356:	53                   	push   ebx
c0009357:	31 db                	xor    ebx,ebx
c0009359:	83 ec 1c             	sub    esp,0x1c
c000935c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009360:	8b 3d e4 16 02 c0    	mov    edi,DWORD PTR ds:0xc00216e4
c0009366:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000936b:	57                   	push   edi
c000936c:	e8 bc ff ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c0009371:	5a                   	pop    edx
c0009372:	84 c0                	test   al,al
c0009374:	75 3a                	jne    c00093b0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009376:	85 db                	test   ebx,ebx
c0009378:	75 02                	jne    c000937c <Virt::allocateKernelVirtualPages(int)+0x2b>
c000937a:	89 fd                	mov    ebp,edi
c000937c:	43                   	inc    ebx
c000937d:	39 f3                	cmp    ebx,esi
c000937f:	74 5a                	je     c00093db <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009381:	47                   	inc    edi
c0009382:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009388:	76 31                	jbe    c00093bb <Virt::allocateKernelVirtualPages(int)+0x6a>
c000938a:	c7 05 e4 16 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00216e4,0xc8000
c0009394:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009399:	75 28                	jne    c00093c3 <Virt::allocateKernelVirtualPages(int)+0x72>
c000939b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00093a0:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093a5:	57                   	push   edi
c00093a6:	e8 82 ff ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c00093ab:	5a                   	pop    edx
c00093ac:	84 c0                	test   al,al
c00093ae:	74 c6                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093b0:	31 db                	xor    ebx,ebx
c00093b2:	47                   	inc    edi
c00093b3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093b9:	77 cf                	ja     c000938a <Virt::allocateKernelVirtualPages(int)+0x39>
c00093bb:	89 3d e4 16 02 c0    	mov    DWORD PTR ds:0xc00216e4,edi
c00093c1:	eb a8                	jmp    c000936b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093c3:	83 ec 0c             	sub    esp,0xc
c00093c6:	68 4c f6 01 c0       	push   0xc001f64c
c00093cb:	e8 ff 6f 00 00       	call   c00103cf <KePanic(char const*)>
c00093d0:	8b 3d e4 16 02 c0    	mov    edi,DWORD PTR ds:0xc00216e4
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	eb 90                	jmp    c000936b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093db:	89 2d e4 16 02 c0    	mov    DWORD PTR ds:0xc00216e4,ebp
c00093e1:	4b                   	dec    ebx
c00093e2:	74 5f                	je     c0009443 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093e4:	85 f6                	test   esi,esi
c00093e6:	74 3d                	je     c0009425 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093e8:	89 e8                	mov    eax,ebp
c00093ea:	31 db                	xor    ebx,ebx
c00093ec:	8d 7e ff             	lea    edi,[esi-0x1]
c00093ef:	eb 14                	jmp    c0009405 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093f1:	6a 01                	push   0x1
c00093f3:	43                   	inc    ebx
c00093f4:	50                   	push   eax
c00093f5:	e8 fe fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093fa:	58                   	pop    eax
c00093fb:	39 f3                	cmp    ebx,esi
c00093fd:	5a                   	pop    edx
c00093fe:	74 25                	je     c0009425 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009400:	a1 e4 16 02 c0       	mov    eax,ds:0xc00216e4
c0009405:	8d 50 01             	lea    edx,[eax+0x1]
c0009408:	85 db                	test   ebx,ebx
c000940a:	89 15 e4 16 02 c0    	mov    DWORD PTR ds:0xc00216e4,edx
c0009410:	74 20                	je     c0009432 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009412:	39 df                	cmp    edi,ebx
c0009414:	75 db                	jne    c00093f1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009416:	6a 03                	push   0x3
c0009418:	43                   	inc    ebx
c0009419:	50                   	push   eax
c000941a:	e8 d9 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000941f:	59                   	pop    ecx
c0009420:	39 f3                	cmp    ebx,esi
c0009422:	58                   	pop    eax
c0009423:	75 db                	jne    c0009400 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009425:	83 c4 1c             	add    esp,0x1c
c0009428:	89 e8                	mov    eax,ebp
c000942a:	5b                   	pop    ebx
c000942b:	c1 e0 0c             	shl    eax,0xc
c000942e:	5e                   	pop    esi
c000942f:	5f                   	pop    edi
c0009430:	5d                   	pop    ebp
c0009431:	c3                   	ret    
c0009432:	6a 02                	push   0x2
c0009434:	bb 01 00 00 00       	mov    ebx,0x1
c0009439:	50                   	push   eax
c000943a:	e8 b9 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943f:	58                   	pop    eax
c0009440:	5a                   	pop    edx
c0009441:	eb bd                	jmp    c0009400 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009443:	6a 04                	push   0x4
c0009445:	8d 45 01             	lea    eax,[ebp+0x1]
c0009448:	55                   	push   ebp
c0009449:	a3 e4 16 02 c0       	mov    ds:0xc00216e4,eax
c000944e:	e8 a5 fe ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	59                   	pop    ecx
c0009454:	89 e8                	mov    eax,ebp
c0009456:	5b                   	pop    ebx
c0009457:	c1 e0 0c             	shl    eax,0xc
c000945a:	83 c4 1c             	add    esp,0x1c
c000945d:	5b                   	pop    ebx
c000945e:	5e                   	pop    esi
c000945f:	5f                   	pop    edi
c0009460:	5d                   	pop    ebp
c0009461:	c3                   	ret    

c0009462 <Virt::freeSwapfilePage(unsigned long)>:
c0009462:	53                   	push   ebx
c0009463:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009469:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000946d:	b8 01 00 00 00       	mov    eax,0x1
c0009472:	89 cb                	mov    ebx,ecx
c0009474:	d3 e0                	shl    eax,cl
c0009476:	c1 eb 05             	shr    ebx,0x5
c0009479:	f7 d0                	not    eax
c000947b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000947e:	5b                   	pop    ebx
c000947f:	c3                   	ret    

c0009480 <Virt::swapIDToSector(unsigned long)>:
c0009480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009484:	0f af 05 ec 16 02 c0 	imul   eax,DWORD PTR ds:0xc00216ec
c000948b:	03 05 f4 16 02 c0    	add    eax,DWORD PTR ds:0xc00216f4
c0009491:	c3                   	ret    

c0009492 <Virt::allocateSwapfilePage()>:
c0009492:	55                   	push   ebp
c0009493:	31 d2                	xor    edx,edx
c0009495:	57                   	push   edi
c0009496:	56                   	push   esi
c0009497:	53                   	push   ebx
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	8b 0d ec 16 02 c0    	mov    ecx,DWORD PTR ds:0xc00216ec
c00094a1:	a1 f0 16 02 c0       	mov    eax,ds:0xc00216f0
c00094a6:	f7 f1                	div    ecx
c00094a8:	39 0d f0 16 02 c0    	cmp    DWORD PTR ds:0xc00216f0,ecx
c00094ae:	72 2d                	jb     c00094dd <Virt::allocateSwapfilePage()+0x4b>
c00094b0:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094b6:	8b 16                	mov    edx,DWORD PTR [esi]
c00094b8:	f6 c2 01             	test   dl,0x1
c00094bb:	74 3c                	je     c00094f9 <Virt::allocateSwapfilePage()+0x67>
c00094bd:	31 c9                	xor    ecx,ecx
c00094bf:	bf 01 00 00 00       	mov    edi,0x1
c00094c4:	eb 12                	jmp    c00094d8 <Virt::allocateSwapfilePage()+0x46>
c00094c6:	89 fd                	mov    ebp,edi
c00094c8:	89 ca                	mov    edx,ecx
c00094ca:	d3 e5                	shl    ebp,cl
c00094cc:	c1 ea 05             	shr    edx,0x5
c00094cf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094d4:	85 ea                	test   edx,ebp
c00094d6:	74 2a                	je     c0009502 <Virt::allocateSwapfilePage()+0x70>
c00094d8:	41                   	inc    ecx
c00094d9:	39 c8                	cmp    eax,ecx
c00094db:	77 e9                	ja     c00094c6 <Virt::allocateSwapfilePage()+0x34>
c00094dd:	83 ec 0c             	sub    esp,0xc
c00094e0:	68 b3 f7 01 c0       	push   0xc001f7b3
c00094e5:	e8 e5 6e 00 00       	call   c00103cf <KePanic(char const*)>
c00094ea:	83 c4 10             	add    esp,0x10
c00094ed:	31 c9                	xor    ecx,ecx
c00094ef:	83 c4 0c             	add    esp,0xc
c00094f2:	89 c8                	mov    eax,ecx
c00094f4:	5b                   	pop    ebx
c00094f5:	5e                   	pop    esi
c00094f6:	5f                   	pop    edi
c00094f7:	5d                   	pop    ebp
c00094f8:	c3                   	ret    
c00094f9:	89 f3                	mov    ebx,esi
c00094fb:	bd 01 00 00 00       	mov    ebp,0x1
c0009500:	31 c9                	xor    ecx,ecx
c0009502:	09 ea                	or     edx,ebp
c0009504:	89 c8                	mov    eax,ecx
c0009506:	89 13                	mov    DWORD PTR [ebx],edx
c0009508:	83 c4 0c             	add    esp,0xc
c000950b:	5b                   	pop    ebx
c000950c:	5e                   	pop    esi
c000950d:	5f                   	pop    edi
c000950e:	5d                   	pop    ebp
c000950f:	c3                   	ret    

c0009510 <Virt::virtualMemorySetup()>:
c0009510:	53                   	push   ebx
c0009511:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009516:	6a 0f                	push   0xf
c0009518:	53                   	push   ebx
c0009519:	43                   	inc    ebx
c000951a:	e8 d9 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000951f:	58                   	pop    eax
c0009520:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009526:	5a                   	pop    edx
c0009527:	75 ed                	jne    c0009516 <Virt::virtualMemorySetup()+0x6>
c0009529:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000952e:	6a 00                	push   0x0
c0009530:	53                   	push   ebx
c0009531:	43                   	inc    ebx
c0009532:	e8 c1 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009537:	59                   	pop    ecx
c0009538:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000953e:	58                   	pop    eax
c000953f:	75 ed                	jne    c000952e <Virt::virtualMemorySetup()+0x1e>
c0009541:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009546:	6a 0f                	push   0xf
c0009548:	53                   	push   ebx
c0009549:	43                   	inc    ebx
c000954a:	e8 a9 fd ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000954f:	58                   	pop    eax
c0009550:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009556:	5a                   	pop    edx
c0009557:	75 ed                	jne    c0009546 <Virt::virtualMemorySetup()+0x36>
c0009559:	5b                   	pop    ebx
c000955a:	c3                   	ret    

c000955b <Virt::setupPageSwapping(int)>:
c000955b:	53                   	push   ebx
c000955c:	83 ec 0c             	sub    esp,0xc
c000955f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009563:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009568:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	53                   	push   ebx
c0009571:	c1 e3 0b             	shl    ebx,0xb
c0009574:	68 ca f7 01 c0       	push   0xc001f7ca
c0009579:	50                   	push   eax
c000957a:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000957d:	89 1d f0 16 02 c0    	mov    DWORD PTR ds:0xc00216f0,ebx
c0009583:	c6 05 f8 16 02 c0 43 	mov    BYTE PTR ds:0xc00216f8,0x43
c000958a:	c1 eb 08             	shr    ebx,0x8
c000958d:	a3 f4 16 02 c0       	mov    ds:0xc00216f4,eax
c0009592:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009595:	c7 05 ec 16 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00216ec,0x8
c000959f:	e8 c9 e2 ff ff       	call   c000786d <malloc>
c00095a4:	83 c4 0c             	add    esp,0xc
c00095a7:	89 c1                	mov    ecx,eax
c00095a9:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095ae:	31 d2                	xor    edx,edx
c00095b0:	a1 f0 16 02 c0       	mov    eax,ds:0xc00216f0
c00095b5:	f7 35 ec 16 02 c0    	div    DWORD PTR ds:0xc00216ec
c00095bb:	c1 e8 05             	shr    eax,0x5
c00095be:	50                   	push   eax
c00095bf:	6a 00                	push   0x0
c00095c1:	51                   	push   ecx
c00095c2:	e8 f9 6e ff ff       	call   c00004c0 <memset>
c00095c7:	83 c4 18             	add    esp,0x18
c00095ca:	5b                   	pop    ebx
c00095cb:	c3                   	ret    

c00095cc <VAS::VAS(VAS*)>:
c00095cc:	83 ec 0c             	sub    esp,0xc
c00095cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095e5:	83 ec 0c             	sub    esp,0xc
c00095e8:	68 6c f6 01 c0       	push   0xc001f66c
c00095ed:	e8 dd 6d 00 00       	call   c00103cf <KePanic(char const*)>
c00095f2:	83 c4 10             	add    esp,0x10
c00095f5:	90                   	nop
c00095f6:	83 c4 0c             	add    esp,0xc
c00095f9:	c3                   	ret    

c00095fa <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095fe:	89 c2                	mov    edx,eax
c0009600:	c1 e8 0a             	shr    eax,0xa
c0009603:	c1 ea 16             	shr    edx,0x16
c0009606:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000960b:	19 c9                	sbb    ecx,ecx
c000960d:	c1 e2 0c             	shl    edx,0xc
c0009610:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009616:	25 fc 0f 00 00       	and    eax,0xffc
c000961b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009622:	01 d0                	add    eax,edx
c0009624:	c3                   	ret    
c0009625:	90                   	nop

c0009626 <VAS::getPageTableEntry(unsigned long)>:
c0009626:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000962a:	89 ca                	mov    edx,ecx
c000962c:	c1 e9 0a             	shr    ecx,0xa
c000962f:	c1 ea 16             	shr    edx,0x16
c0009632:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009638:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000963e:	c1 e0 0c             	shl    eax,0xc
c0009641:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009644:	c3                   	ret    

c0009645 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009645:	57                   	push   edi
c0009646:	56                   	push   esi
c0009647:	be 01 00 00 00       	mov    esi,0x1
c000964c:	53                   	push   ebx
c000964d:	83 ec 10             	sub    esp,0x10
c0009650:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009654:	c1 eb 0c             	shr    ebx,0xc
c0009657:	eb 3f                	jmp    c0009698 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009659:	83 ec 08             	sub    esp,0x8
c000965c:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c0009661:	57                   	push   edi
c0009662:	50                   	push   eax
c0009663:	e8 be ff ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8b 00                	mov    eax,DWORD PTR [eax]
c000966d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009671:	f6 c4 04             	test   ah,0x4
c0009674:	75 60                	jne    c00096d6 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009676:	80 fa 04             	cmp    dl,0x4
c0009679:	74 79                	je     c00096f4 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000967b:	80 fa 02             	cmp    dl,0x2
c000967e:	0f 84 89 00 00 00    	je     c000970d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009684:	80 fa 03             	cmp    dl,0x3
c0009687:	0f 84 ae 00 00 00    	je     c000973b <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000968d:	fe ca                	dec    dl
c000968f:	0f 84 93 00 00 00    	je     c0009728 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009695:	43                   	inc    ebx
c0009696:	31 f6                	xor    esi,esi
c0009698:	53                   	push   ebx
c0009699:	89 df                	mov    edi,ebx
c000969b:	e8 8d fc ff ff       	call   c000932d <Virt::getPageState(unsigned long)>
c00096a0:	c1 e7 0c             	shl    edi,0xc
c00096a3:	5a                   	pop    edx
c00096a4:	84 c0                	test   al,al
c00096a6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096aa:	75 ad                	jne    c0009659 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096ac:	83 ec 0c             	sub    esp,0xc
c00096af:	68 e1 f7 01 c0       	push   0xc001f7e1
c00096b4:	e8 16 6d 00 00       	call   c00103cf <KePanic(char const*)>
c00096b9:	5a                   	pop    edx
c00096ba:	59                   	pop    ecx
c00096bb:	57                   	push   edi
c00096bc:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096c2:	57                   	push   edi
c00096c3:	e8 5e ff ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c00096c8:	83 c4 10             	add    esp,0x10
c00096cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00096cd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096d1:	f6 c4 04             	test   ah,0x4
c00096d4:	74 bf                	je     c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096d6:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096df:	83 ec 0c             	sub    esp,0xc
c00096e2:	50                   	push   eax
c00096e3:	e8 ff e3 ff ff       	call   c0007ae7 <Phys::freePage(unsigned long)>
c00096e8:	83 c4 10             	add    esp,0x10
c00096eb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096ef:	80 fa 04             	cmp    dl,0x4
c00096f2:	75 87                	jne    c000967b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096f4:	89 f0                	mov    eax,esi
c00096f6:	84 c0                	test   al,al
c00096f8:	75 47                	jne    c0009741 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096fa:	c7 44 24 20 90 f6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f690
c0009702:	83 c4 10             	add    esp,0x10
c0009705:	5b                   	pop    ebx
c0009706:	5e                   	pop    esi
c0009707:	5f                   	pop    edi
c0009708:	e9 c2 6c 00 00       	jmp    c00103cf <KePanic(char const*)>
c000970d:	89 f0                	mov    eax,esi
c000970f:	84 c0                	test   al,al
c0009711:	75 15                	jne    c0009728 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009713:	83 ec 0c             	sub    esp,0xc
c0009716:	68 fd f7 01 c0       	push   0xc001f7fd
c000971b:	e8 af 6c 00 00       	call   c00103cf <KePanic(char const*)>
c0009720:	83 c4 10             	add    esp,0x10
c0009723:	e9 6d ff ff ff       	jmp    c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	6a 00                	push   0x0
c000972d:	53                   	push   ebx
c000972e:	e8 c5 fb ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009733:	83 c4 10             	add    esp,0x10
c0009736:	e9 5a ff ff ff       	jmp    c0009695 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000973b:	89 f0                	mov    eax,esi
c000973d:	84 c0                	test   al,al
c000973f:	75 15                	jne    c0009756 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009741:	83 ec 08             	sub    esp,0x8
c0009744:	6a 00                	push   0x0
c0009746:	53                   	push   ebx
c0009747:	e8 ac fb ff ff       	call   c00092f8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000974c:	83 c4 10             	add    esp,0x10
c000974f:	83 c4 10             	add    esp,0x10
c0009752:	5b                   	pop    ebx
c0009753:	5e                   	pop    esi
c0009754:	5f                   	pop    edi
c0009755:	c3                   	ret    
c0009756:	c7 44 24 20 19 f8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f819
c000975e:	83 c4 10             	add    esp,0x10
c0009761:	5b                   	pop    ebx
c0009762:	5e                   	pop    esi
c0009763:	5f                   	pop    edi
c0009764:	e9 66 6c 00 00       	jmp    c00103cf <KePanic(char const*)>
c0009769:	90                   	nop

c000976a <VAS::freeAllocatedPages(unsigned long)>:
c000976a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000976e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009772:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009776:	74 09                	je     c0009781 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009778:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977c:	e9 c4 fe ff ff       	jmp    c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009781:	c7 44 24 04 b4 f6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f6b4
c0009789:	e9 80 0e 00 00       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>

c000978e <VAS::virtualToPhysical(unsigned long)>:
c000978e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009792:	50                   	push   eax
c0009793:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009797:	52                   	push   edx
c0009798:	e8 89 fe ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000979d:	59                   	pop    ecx
c000979e:	8b 00                	mov    eax,DWORD PTR [eax]
c00097a0:	5a                   	pop    edx
c00097a1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097a6:	c3                   	ret    
c00097a7:	90                   	nop

c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097a8:	55                   	push   ebp
c00097a9:	57                   	push   edi
c00097aa:	56                   	push   esi
c00097ab:	53                   	push   ebx
c00097ac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00097b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097b4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097b8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097bc:	85 db                	test   ebx,ebx
c00097be:	7e 22                	jle    c00097e2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097c0:	c1 e3 0c             	shl    ebx,0xc
c00097c3:	01 f3                	add    ebx,esi
c00097c5:	56                   	push   esi
c00097c6:	81 c6 00 10 00 00    	add    esi,0x1000
c00097cc:	55                   	push   ebp
c00097cd:	e8 54 fe ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c00097d2:	5a                   	pop    edx
c00097d3:	59                   	pop    ecx
c00097d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097d6:	21 f9                	and    ecx,edi
c00097d8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097dc:	39 f3                	cmp    ebx,esi
c00097de:	89 08                	mov    DWORD PTR [eax],ecx
c00097e0:	75 e3                	jne    c00097c5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097e2:	5b                   	pop    ebx
c00097e3:	5e                   	pop    esi
c00097e4:	5f                   	pop    edi
c00097e5:	5d                   	pop    ebp
c00097e6:	c3                   	ret    
c00097e7:	90                   	nop

c00097e8 <VAS::VAS()>:
c00097e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009802:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c0009807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000980f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009813:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000981a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009821:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009826:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000982b:	29 c2                	sub    edx,eax
c000982d:	89 d0                	mov    eax,edx
c000982f:	05 ff 0f 00 00       	add    eax,0xfff
c0009834:	c1 e8 0c             	shr    eax,0xc
c0009837:	89 c2                	mov    edx,eax
c0009839:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000983e:	6a 04                	push   0x4
c0009840:	6a ff                	push   0xffffffff
c0009842:	52                   	push   edx
c0009843:	50                   	push   eax
c0009844:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009848:	e8 5b ff ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000984d:	83 c4 14             	add    esp,0x14
c0009850:	90                   	nop
c0009851:	c3                   	ret    

c0009852 <VAS::setToWriteCombining(unsigned long, int)>:
c0009852:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009857:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000985d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009864:	75 01                	jne    c0009867 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009866:	c3                   	ret    
c0009867:	68 80 00 00 00       	push   0x80
c000986c:	6a ff                	push   0xffffffff
c000986e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009872:	50                   	push   eax
c0009873:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009877:	52                   	push   edx
c0009878:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000987c:	51                   	push   ecx
c000987d:	e8 26 ff ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c0009882:	83 c4 14             	add    esp,0x14
c0009885:	c3                   	ret    

c0009886 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009886:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000988b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000988f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009896:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009899:	19 c0                	sbb    eax,eax
c000989b:	83 ca 03             	or     edx,0x3
c000989e:	83 e0 fc             	and    eax,0xfffffffc
c00098a1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098a8:	0f 20 d8             	mov    eax,cr3
c00098ab:	0f 22 d8             	mov    cr3,eax
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::~VAS()>:
c00098b0:	83 ec 2c             	sub    esp,0x2c
c00098b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098bb:	fa                   	cli    
c00098bc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098c1:	40                   	inc    eax
c00098c2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098c7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098d1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098db:	6a 01                	push   0x1
c00098dd:	50                   	push   eax
c00098de:	e8 a3 ff ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c00098e3:	83 c4 0c             	add    esp,0xc
c00098e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098ee:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098f6:	0f 8f d4 00 00 00    	jg     c00099d0 <VAS::~VAS()+0x120>
c00098fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009903:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009907:	c1 e2 02             	shl    edx,0x2
c000990a:	01 d0                	add    eax,edx
c000990c:	8b 00                	mov    eax,DWORD PTR [eax]
c000990e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009916:	83 e0 01             	and    eax,0x1
c0009919:	0f 84 a8 00 00 00    	je     c00099c7 <VAS::~VAS()+0x117>
c000991f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009927:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000992f:	7f 72                	jg     c00099a3 <VAS::~VAS()+0xf3>
c0009931:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009935:	c1 e0 0a             	shl    eax,0xa
c0009938:	89 c2                	mov    edx,eax
c000993a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000993e:	01 d0                	add    eax,edx
c0009940:	c1 e0 0c             	shl    eax,0xc
c0009943:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009947:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000994c:	8b 00                	mov    eax,DWORD PTR [eax]
c000994e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009951:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000995b:	6a 01                	push   0x1
c000995d:	50                   	push   eax
c000995e:	e8 97 fc ff ff       	call   c00095fa <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009963:	83 c4 0c             	add    esp,0xc
c0009966:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000996a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000996e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009970:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009978:	25 01 04 00 00       	and    eax,0x401
c000997d:	3d 01 04 00 00       	cmp    eax,0x401
c0009982:	75 19                	jne    c000999d <VAS::~VAS()+0xed>
c0009984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009988:	25 00 f0 ff ff       	and    eax,0xfffff000
c000998d:	83 ec 0c             	sub    esp,0xc
c0009990:	50                   	push   eax
c0009991:	e8 51 e1 ff ff       	call   c0007ae7 <Phys::freePage(unsigned long)>
c0009996:	83 c4 10             	add    esp,0x10
c0009999:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000999d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00099a1:	eb 84                	jmp    c0009927 <VAS::~VAS()+0x77>
c00099a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099a7:	25 00 04 00 00       	and    eax,0x400
c00099ac:	74 19                	je     c00099c7 <VAS::~VAS()+0x117>
c00099ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099b2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099b7:	83 ec 0c             	sub    esp,0xc
c00099ba:	50                   	push   eax
c00099bb:	e8 27 e1 ff ff       	call   c0007ae7 <Phys::freePage(unsigned long)>
c00099c0:	83 c4 10             	add    esp,0x10
c00099c3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099c7:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099cb:	e9 1e ff ff ff       	jmp    c00098ee <VAS::~VAS()+0x3e>
c00099d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099d7:	83 ec 0c             	sub    esp,0xc
c00099da:	50                   	push   eax
c00099db:	e8 65 fc ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c00099e0:	83 c4 10             	add    esp,0x10
c00099e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099ea:	83 ec 0c             	sub    esp,0xc
c00099ed:	50                   	push   eax
c00099ee:	e8 f4 e0 ff ff       	call   c0007ae7 <Phys::freePage(unsigned long)>
c00099f3:	83 c4 10             	add    esp,0x10
c00099f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099fa:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099ff:	48                   	dec    eax
c0009a00:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0009a05:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a0a:	85 c0                	test   eax,eax
c0009a0c:	75 01                	jne    c0009a0f <VAS::~VAS()+0x15f>
c0009a0e:	fb                   	sti    
c0009a0f:	90                   	nop
c0009a10:	83 c4 2c             	add    esp,0x2c
c0009a13:	c3                   	ret    

c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a14:	55                   	push   ebp
c0009a15:	57                   	push   edi
c0009a16:	56                   	push   esi
c0009a17:	53                   	push   ebx
c0009a18:	83 ec 1c             	sub    esp,0x1c
c0009a1b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a23:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a29:	77 0b                	ja     c0009a36 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a2b:	0f 20 d8             	mov    eax,cr3
c0009a2e:	0f 20 d8             	mov    eax,cr3
c0009a31:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a34:	75 47                	jne    c0009a7d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a36:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3a:	09 d8                	or     eax,ebx
c0009a3c:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a41:	75 57                	jne    c0009a9a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a43:	89 de                	mov    esi,ebx
c0009a45:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a48:	c1 ee 16             	shr    esi,0x16
c0009a4b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a52:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a56:	74 54                	je     c0009aac <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a5c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a62:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a66:	c1 e6 0c             	shl    esi,0xc
c0009a69:	c1 eb 0a             	shr    ebx,0xa
c0009a6c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a72:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a75:	83 c4 1c             	add    esp,0x1c
c0009a78:	5b                   	pop    ebx
c0009a79:	5e                   	pop    esi
c0009a7a:	5f                   	pop    edi
c0009a7b:	5d                   	pop    ebp
c0009a7c:	c3                   	ret    
c0009a7d:	83 ec 0c             	sub    esp,0xc
c0009a80:	68 d8 f6 01 c0       	push   0xc001f6d8
c0009a85:	e8 84 0b 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0009a8a:	83 c4 10             	add    esp,0x10
c0009a8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a91:	09 d8                	or     eax,ebx
c0009a93:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a98:	74 a9                	je     c0009a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a9a:	83 ec 0c             	sub    esp,0xc
c0009a9d:	68 40 f7 01 c0       	push   0xc001f740
c0009aa2:	e8 28 69 00 00       	call   c00103cf <KePanic(char const*)>
c0009aa7:	83 c4 10             	add    esp,0x10
c0009aaa:	eb 97                	jmp    c0009a43 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ab0:	e8 94 e0 ff ff       	call   c0007b49 <Phys::allocatePage()>
c0009ab5:	83 ec 0c             	sub    esp,0xc
c0009ab8:	89 c5                	mov    ebp,eax
c0009aba:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009ac0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ac4:	6a 01                	push   0x1
c0009ac6:	e8 86 f8 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009acb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ad2:	6a 01                	push   0x1
c0009ad4:	50                   	push   eax
c0009ad5:	55                   	push   ebp
c0009ad6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009adc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009ae0:	51                   	push   ecx
c0009ae1:	e8 28 02 00 00       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ae6:	83 c4 1c             	add    esp,0x1c
c0009ae9:	68 00 10 00 00       	push   0x1000
c0009aee:	6a 00                	push   0x0
c0009af0:	50                   	push   eax
c0009af1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009af5:	e8 c6 69 ff ff       	call   c00004c0 <memset>
c0009afa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009afe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b01:	e8 3f fb ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b0a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b0d:	83 c4 10             	add    esp,0x10
c0009b10:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b13:	e9 40 ff ff ff       	jmp    c0009a58 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b18 <VAS::allocatePages(int, int)>:
c0009b18:	55                   	push   ebp
c0009b19:	57                   	push   edi
c0009b1a:	56                   	push   esi
c0009b1b:	53                   	push   ebx
c0009b1c:	83 ec 1c             	sub    esp,0x1c
c0009b1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b23:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b34:	83 e0 01             	and    eax,0x1
c0009b37:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b3f:	0f 85 cc 00 00 00    	jne    c0009c11 <VAS::allocatePages(int, int)+0xf9>
c0009b45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b4c:	85 c0                	test   eax,eax
c0009b4e:	0f 84 a1 00 00 00    	je     c0009bf5 <VAS::allocatePages(int, int)+0xdd>
c0009b54:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b5c:	c1 e6 0c             	shl    esi,0xc
c0009b5f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b63:	85 c0                	test   eax,eax
c0009b65:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b68:	7e 33                	jle    c0009b9d <VAS::allocatePages(int, int)+0x85>
c0009b6a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b72:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b78:	e8 cc df ff ff       	call   c0007b49 <Phys::allocatePage()>
c0009b7d:	55                   	push   ebp
c0009b7e:	53                   	push   ebx
c0009b7f:	50                   	push   eax
c0009b80:	57                   	push   edi
c0009b81:	e8 8e fe ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b86:	83 c4 10             	add    esp,0x10
c0009b89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8e:	74 03                	je     c0009b93 <VAS::allocatePages(int, int)+0x7b>
c0009b90:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b93:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b99:	39 de                	cmp    esi,ebx
c0009b9b:	75 db                	jne    c0009b78 <VAS::allocatePages(int, int)+0x60>
c0009b9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ba2:	75 12                	jne    c0009bb6 <VAS::allocatePages(int, int)+0x9e>
c0009ba4:	0f 20 d8             	mov    eax,cr3
c0009ba7:	0f 22 d8             	mov    cr3,eax
c0009baa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bae:	83 c4 1c             	add    esp,0x1c
c0009bb1:	5b                   	pop    ebx
c0009bb2:	5e                   	pop    esi
c0009bb3:	5f                   	pop    edi
c0009bb4:	5d                   	pop    ebp
c0009bb5:	c3                   	ret    
c0009bb6:	c1 ee 0a             	shr    esi,0xa
c0009bb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bbd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009bc3:	c1 eb 0a             	shr    ebx,0xa
c0009bc6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bcc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bd2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bd8:	39 c3                	cmp    ebx,eax
c0009bda:	77 ce                	ja     c0009baa <VAS::allocatePages(int, int)+0x92>
c0009bdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009be5:	39 d8                	cmp    eax,ebx
c0009be7:	73 f3                	jae    c0009bdc <VAS::allocatePages(int, int)+0xc4>
c0009be9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	5b                   	pop    ebx
c0009bf1:	5e                   	pop    esi
c0009bf2:	5f                   	pop    edi
c0009bf3:	5d                   	pop    ebp
c0009bf4:	c3                   	ret    
c0009bf5:	83 ec 0c             	sub    esp,0xc
c0009bf8:	68 64 f7 01 c0       	push   0xc001f764
c0009bfd:	e8 cd 67 00 00       	call   c00103cf <KePanic(char const*)>
c0009c02:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c09:	83 c4 10             	add    esp,0x10
c0009c0c:	e9 43 ff ff ff       	jmp    c0009b54 <VAS::allocatePages(int, int)+0x3c>
c0009c11:	83 ec 0c             	sub    esp,0xc
c0009c14:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c18:	51                   	push   ecx
c0009c19:	e8 33 f7 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c22:	83 c4 10             	add    esp,0x10
c0009c25:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c2a:	0f 87 9b 00 00 00    	ja     c0009ccb <VAS::allocatePages(int, int)+0x1b3>
c0009c30:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c34:	85 d2                	test   edx,edx
c0009c36:	7e 3c                	jle    c0009c74 <VAS::allocatePages(int, int)+0x15c>
c0009c38:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c40:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c44:	c1 e5 0c             	shl    ebp,0xc
c0009c47:	81 ce 00 04 00 00    	or     esi,0x400
c0009c4d:	01 dd                	add    ebp,ebx
c0009c4f:	e8 f5 de ff ff       	call   c0007b49 <Phys::allocatePage()>
c0009c54:	56                   	push   esi
c0009c55:	53                   	push   ebx
c0009c56:	50                   	push   eax
c0009c57:	57                   	push   edi
c0009c58:	e8 b7 fd ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c5d:	83 c4 10             	add    esp,0x10
c0009c60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c65:	74 03                	je     c0009c6a <VAS::allocatePages(int, int)+0x152>
c0009c67:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c6a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c70:	39 dd                	cmp    ebp,ebx
c0009c72:	75 db                	jne    c0009c4f <VAS::allocatePages(int, int)+0x137>
c0009c74:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c79:	0f 84 25 ff ff ff    	je     c0009ba4 <VAS::allocatePages(int, int)+0x8c>
c0009c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c87:	89 d3                	mov    ebx,edx
c0009c89:	c1 e0 0c             	shl    eax,0xc
c0009c8c:	c1 eb 0a             	shr    ebx,0xa
c0009c8f:	01 d0                	add    eax,edx
c0009c91:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c97:	c1 e8 0a             	shr    eax,0xa
c0009c9a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ca0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ca5:	2d 00 00 40 00       	sub    eax,0x400000
c0009caa:	39 c3                	cmp    ebx,eax
c0009cac:	0f 87 f8 fe ff ff    	ja     c0009baa <VAS::allocatePages(int, int)+0x92>
c0009cb2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cb5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cbb:	39 d8                	cmp    eax,ebx
c0009cbd:	73 f3                	jae    c0009cb2 <VAS::allocatePages(int, int)+0x19a>
c0009cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	5b                   	pop    ebx
c0009cc7:	5e                   	pop    esi
c0009cc8:	5f                   	pop    edi
c0009cc9:	5d                   	pop    ebp
c0009cca:	c3                   	ret    
c0009ccb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cd0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cd6:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cdd:	0f 84 4d ff ff ff    	je     c0009c30 <VAS::allocatePages(int, int)+0x118>
c0009ce3:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009ceb:	e9 40 ff ff ff       	jmp    c0009c30 <VAS::allocatePages(int, int)+0x118>

c0009cf0 <VAS::setCPUSpecific(unsigned long)>:
c0009cf0:	83 ec 0c             	sub    esp,0xc
c0009cf3:	6a 05                	push   0x5
c0009cf5:	68 00 00 40 c2       	push   0xc2400000
c0009cfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cfe:	50                   	push   eax
c0009cff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d03:	52                   	push   edx
c0009d04:	e8 0b fd ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d09:	83 c4 1c             	add    esp,0x1c
c0009d0c:	c3                   	ret    
c0009d0d:	90                   	nop

c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d0e:	55                   	push   ebp
c0009d0f:	57                   	push   edi
c0009d10:	56                   	push   esi
c0009d11:	53                   	push   ebx
c0009d12:	83 ec 1c             	sub    esp,0x1c
c0009d15:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d1a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d1e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d28:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d2e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d32:	83 e0 01             	and    eax,0x1
c0009d35:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d3d:	85 c0                	test   eax,eax
c0009d3f:	7e 39                	jle    c0009d7a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	89 f3                	mov    ebx,esi
c0009d47:	c1 e0 0c             	shl    eax,0xc
c0009d4a:	01 f0                	add    eax,esi
c0009d4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d50:	55                   	push   ebp
c0009d51:	53                   	push   ebx
c0009d52:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d56:	29 f0                	sub    eax,esi
c0009d58:	01 d8                	add    eax,ebx
c0009d5a:	50                   	push   eax
c0009d5b:	57                   	push   edi
c0009d5c:	e8 b3 fc ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d61:	83 c4 10             	add    esp,0x10
c0009d64:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d69:	74 03                	je     c0009d6e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d6b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d6e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d74:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d78:	75 d6                	jne    c0009d50 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d7f:	75 10                	jne    c0009d91 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d81:	0f 20 d8             	mov    eax,cr3
c0009d84:	0f 22 d8             	mov    cr3,eax
c0009d87:	83 c4 1c             	add    esp,0x1c
c0009d8a:	89 f0                	mov    eax,esi
c0009d8c:	5b                   	pop    ebx
c0009d8d:	5e                   	pop    esi
c0009d8e:	5f                   	pop    edi
c0009d8f:	5d                   	pop    ebp
c0009d90:	c3                   	ret    
c0009d91:	89 f3                	mov    ebx,esi
c0009d93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d97:	c1 eb 0a             	shr    ebx,0xa
c0009d9a:	c1 e0 0c             	shl    eax,0xc
c0009d9d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009da3:	01 f0                	add    eax,esi
c0009da5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009dab:	c1 e8 0a             	shr    eax,0xa
c0009dae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009db3:	2d 00 00 40 00       	sub    eax,0x400000
c0009db8:	39 c3                	cmp    ebx,eax
c0009dba:	77 cb                	ja     c0009d87 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009dbc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dbf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dc5:	39 d8                	cmp    eax,ebx
c0009dc7:	73 f3                	jae    c0009dbc <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009dc9:	83 c4 1c             	add    esp,0x1c
c0009dcc:	89 f0                	mov    eax,esi
c0009dce:	5b                   	pop    ebx
c0009dcf:	5e                   	pop    esi
c0009dd0:	5f                   	pop    edi
c0009dd1:	5d                   	pop    ebp
c0009dd2:	c3                   	ret    
c0009dd3:	90                   	nop

c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dd4:	55                   	push   ebp
c0009dd5:	57                   	push   edi
c0009dd6:	56                   	push   esi
c0009dd7:	53                   	push   ebx
c0009dd8:	83 ec 1c             	sub    esp,0x1c
c0009ddb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ddf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009de3:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009de7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009deb:	a9 ff 0f 00 00       	test   eax,0xfff
c0009df0:	75 4a                	jne    c0009e3c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009df2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009df6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009df9:	c1 eb 16             	shr    ebx,0x16
c0009dfc:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009e03:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e07:	74 4d                	je     c0009e56 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009e09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e0d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e11:	c1 e8 0a             	shr    eax,0xa
c0009e14:	80 fa 01             	cmp    dl,0x1
c0009e17:	19 d2                	sbb    edx,edx
c0009e19:	c1 e3 0c             	shl    ebx,0xc
c0009e1c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e20:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e26:	25 fc 0f 00 00       	and    eax,0xffc
c0009e2b:	01 d8                	add    eax,ebx
c0009e2d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e34:	83 c4 1c             	add    esp,0x1c
c0009e37:	5b                   	pop    ebx
c0009e38:	5e                   	pop    esi
c0009e39:	5f                   	pop    edi
c0009e3a:	5d                   	pop    ebp
c0009e3b:	c3                   	ret    
c0009e3c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e40:	83 ec 0c             	sub    esp,0xc
c0009e43:	68 90 f7 01 c0       	push   0xc001f790
c0009e48:	e8 82 65 00 00       	call   c00103cf <KePanic(char const*)>
c0009e4d:	83 c4 10             	add    esp,0x10
c0009e50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e54:	eb 9c                	jmp    c0009df2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e5a:	e8 ea dc ff ff       	call   c0007b49 <Phys::allocatePage()>
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	89 c5                	mov    ebp,eax
c0009e64:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e6a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e6e:	6a 01                	push   0x1
c0009e70:	e8 dc f4 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009e75:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e7c:	6a 01                	push   0x1
c0009e7e:	50                   	push   eax
c0009e7f:	55                   	push   ebp
c0009e80:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e86:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e8a:	51                   	push   ecx
c0009e8b:	e8 7e fe ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e90:	83 c4 1c             	add    esp,0x1c
c0009e93:	68 00 10 00 00       	push   0x1000
c0009e98:	6a 00                	push   0x0
c0009e9a:	50                   	push   eax
c0009e9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e9f:	e8 1c 66 ff ff       	call   c00004c0 <memset>
c0009ea4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ea8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009eab:	e8 95 f7 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c0009eb0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009eb3:	83 c4 10             	add    esp,0x10
c0009eb6:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009eb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ebd:	e9 47 ff ff ff       	jmp    c0009e09 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009ec2 <VAS::VAS(bool)>:
c0009ec2:	53                   	push   ebx
c0009ec3:	83 ec 28             	sub    esp,0x28
c0009ec6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eca:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009edd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee8:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009eec:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009eef:	e8 55 dc ff ff       	call   c0007b49 <Phys::allocatePage()>
c0009ef4:	89 c2                	mov    edx,eax
c0009ef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009efd:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009f03:	83 ec 0c             	sub    esp,0xc
c0009f06:	6a 01                	push   0x1
c0009f08:	e8 44 f4 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 c2                	mov    edx,eax
c0009f12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f19:	83 ec 0c             	sub    esp,0xc
c0009f1c:	6a 03                	push   0x3
c0009f1e:	6a 01                	push   0x1
c0009f20:	52                   	push   edx
c0009f21:	50                   	push   eax
c0009f22:	53                   	push   ebx
c0009f23:	e8 e6 fd ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f28:	83 c4 20             	add    esp,0x20
c0009f2b:	89 c2                	mov    edx,eax
c0009f2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f31:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f3c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f44:	7f 1c                	jg     c0009f62 <VAS::VAS(bool)+0xa0>
c0009f46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f51:	c1 e2 02             	shl    edx,0x2
c0009f54:	01 d0                	add    eax,edx
c0009f56:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f5c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f60:	eb da                	jmp    c0009f3c <VAS::VAS(bool)+0x7a>
c0009f62:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f6a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f72:	7f 7a                	jg     c0009fee <VAS::VAS(bool)+0x12c>
c0009f74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f78:	2d 00 02 00 00       	sub    eax,0x200
c0009f7d:	c1 e0 0c             	shl    eax,0xc
c0009f80:	83 c8 05             	or     eax,0x5
c0009f83:	89 c2                	mov    edx,eax
c0009f85:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f90:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f96:	83 e0 10             	and    eax,0x10
c0009f99:	84 c0                	test   al,al
c0009f9b:	74 07                	je     c0009fa4 <VAS::VAS(bool)+0xe2>
c0009f9d:	b8 00 01 00 00       	mov    eax,0x100
c0009fa2:	eb 05                	jmp    c0009fa9 <VAS::VAS(bool)+0xe7>
c0009fa4:	b8 00 00 00 00       	mov    eax,0x0
c0009fa9:	09 d0                	or     eax,edx
c0009fab:	89 c1                	mov    ecx,eax
c0009fad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fb1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fb8:	c1 e2 02             	shl    edx,0x2
c0009fbb:	01 d0                	add    eax,edx
c0009fbd:	89 ca                	mov    edx,ecx
c0009fbf:	89 10                	mov    DWORD PTR [eax],edx
c0009fc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fc5:	2d 40 03 00 00       	sub    eax,0x340
c0009fca:	83 f8 7f             	cmp    eax,0x7f
c0009fcd:	77 16                	ja     c0009fe5 <VAS::VAS(bool)+0x123>
c0009fcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fd3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fda:	c1 e2 02             	shl    edx,0x2
c0009fdd:	01 d0                	add    eax,edx
c0009fdf:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fe5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fe9:	e9 7c ff ff ff       	jmp    c0009f6a <VAS::VAS(bool)+0xa8>
c0009fee:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009ff3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ff9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fff:	83 e0 10             	and    eax,0x10
c000a002:	84 c0                	test   al,al
c000a004:	74 07                	je     c000a00d <VAS::VAS(bool)+0x14b>
c000a006:	b8 03 41 00 00       	mov    eax,0x4103
c000a00b:	eb 05                	jmp    c000a012 <VAS::VAS(bool)+0x150>
c000a00d:	b8 03 40 00 00       	mov    eax,0x4003
c000a012:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a016:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a019:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a01f:	89 02                	mov    DWORD PTR [edx],eax
c000a021:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a026:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a032:	83 ec 08             	sub    esp,0x8
c000a035:	50                   	push   eax
c000a036:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a03a:	e8 b1 fc ff ff       	call   c0009cf0 <VAS::setCPUSpecific(unsigned long)>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a046:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a049:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a04e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a054:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a05a:	83 e0 10             	and    eax,0x10
c000a05d:	84 c0                	test   al,al
c000a05f:	74 07                	je     c000a068 <VAS::VAS(bool)+0x1a6>
c000a061:	b8 00 01 00 00       	mov    eax,0x100
c000a066:	eb 05                	jmp    c000a06d <VAS::VAS(bool)+0x1ab>
c000a068:	b8 00 00 00 00       	mov    eax,0x0
c000a06d:	09 c2                	or     edx,eax
c000a06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a073:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a076:	05 fc 0f 00 00       	add    eax,0xffc
c000a07b:	83 ca 03             	or     edx,0x3
c000a07e:	89 10                	mov    DWORD PTR [eax],edx
c000a080:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a085:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a08b:	83 ec 0c             	sub    esp,0xc
c000a08e:	50                   	push   eax
c000a08f:	e8 4c 1c 00 00       	call   c000bce0 <Device::getName()>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	83 ec 08             	sub    esp,0x8
c000a09a:	68 33 f8 01 c0       	push   0xc001f833
c000a09f:	50                   	push   eax
c000a0a0:	e8 2b 66 ff ff       	call   c00006d0 <strcmp>
c000a0a5:	83 c4 10             	add    esp,0x10
c000a0a8:	85 c0                	test   eax,eax
c000a0aa:	0f 94 c0             	sete   al
c000a0ad:	84 c0                	test   al,al
c000a0af:	0f 84 87 00 00 00    	je     c000a13c <VAS::VAS(bool)+0x27a>
c000a0b5:	fa                   	cli    
c000a0b6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0bb:	40                   	inc    eax
c000a0bc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0c1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0cc:	05 7c 09 00 00       	add    eax,0x97c
c000a0d1:	83 ec 0c             	sub    esp,0xc
c000a0d4:	50                   	push   eax
c000a0d5:	e8 90 d2 ff ff       	call   c000736a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0da:	83 c4 10             	add    esp,0x10
c000a0dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0e2:	89 c3                	mov    ebx,eax
c000a0e4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0ef:	05 7c 09 00 00       	add    eax,0x97c
c000a0f4:	83 ec 0c             	sub    esp,0xc
c000a0f7:	50                   	push   eax
c000a0f8:	e8 6d d2 ff ff       	call   c000736a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0fd:	83 c4 10             	add    esp,0x10
c000a100:	83 ec 08             	sub    esp,0x8
c000a103:	50                   	push   eax
c000a104:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a108:	e8 19 f5 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a10d:	83 c4 10             	add    esp,0x10
c000a110:	8b 00                	mov    eax,DWORD PTR [eax]
c000a112:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a117:	6a 11                	push   0x11
c000a119:	53                   	push   ebx
c000a11a:	50                   	push   eax
c000a11b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a11f:	e8 f0 f8 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a124:	83 c4 10             	add    esp,0x10
c000a127:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a12c:	48                   	dec    eax
c000a12d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a132:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a137:	85 c0                	test   eax,eax
c000a139:	75 01                	jne    c000a13c <VAS::VAS(bool)+0x27a>
c000a13b:	fb                   	sti    
c000a13c:	90                   	nop
c000a13d:	83 c4 28             	add    esp,0x28
c000a140:	5b                   	pop    ebx
c000a141:	c3                   	ret    

c000a142 <VAS::evict(unsigned long)>:
c000a142:	55                   	push   ebp
c000a143:	57                   	push   edi
c000a144:	56                   	push   esi
c000a145:	53                   	push   ebx
c000a146:	83 ec 1c             	sub    esp,0x1c
c000a149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a14d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a151:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a155:	e8 38 f3 ff ff       	call   c0009492 <Virt::allocateSwapfilePage()>
c000a15a:	8b 0d ec 16 02 c0    	mov    ecx,DWORD PTR ds:0xc00216ec
c000a160:	89 c7                	mov    edi,eax
c000a162:	85 c9                	test   ecx,ecx
c000a164:	7e 3e                	jle    c000a1a4 <VAS::evict(unsigned long)+0x62>
c000a166:	89 ee                	mov    esi,ebp
c000a168:	31 db                	xor    ebx,ebx
c000a16a:	83 ec 0c             	sub    esp,0xc
c000a16d:	57                   	push   edi
c000a16e:	e8 0d f3 ff ff       	call   c0009480 <Virt::swapIDToSector(unsigned long)>
c000a173:	89 34 24             	mov    DWORD PTR [esp],esi
c000a176:	01 d8                	add    eax,ebx
c000a178:	6a 01                	push   0x1
c000a17a:	31 d2                	xor    edx,edx
c000a17c:	43                   	inc    ebx
c000a17d:	52                   	push   edx
c000a17e:	81 c6 00 02 00 00    	add    esi,0x200
c000a184:	50                   	push   eax
c000a185:	0f be 05 f8 16 02 c0 	movsx  eax,BYTE PTR ds:0xc00216f8
c000a18c:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a193:	52                   	push   edx
c000a194:	e8 31 2c 00 00       	call   c000cdca <LogicalDisk::write(unsigned long long, int, void*)>
c000a199:	83 c4 20             	add    esp,0x20
c000a19c:	39 1d ec 16 02 c0    	cmp    DWORD PTR ds:0xc00216ec,ebx
c000a1a2:	7f c6                	jg     c000a16a <VAS::evict(unsigned long)+0x28>
c000a1a4:	83 ec 08             	sub    esp,0x8
c000a1a7:	c1 e7 0b             	shl    edi,0xb
c000a1aa:	55                   	push   ebp
c000a1ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a1af:	50                   	push   eax
c000a1b0:	e8 71 f4 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a1b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1b7:	89 d1                	mov    ecx,edx
c000a1b9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1bf:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1c5:	09 cf                	or     edi,ecx
c000a1c7:	89 38                	mov    DWORD PTR [eax],edi
c000a1c9:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1cc:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1d2:	e8 10 d9 ff ff       	call   c0007ae7 <Phys::freePage(unsigned long)>
c000a1d7:	0f 20 d8             	mov    eax,cr3
c000a1da:	0f 22 d8             	mov    cr3,eax
c000a1dd:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1e2:	c7 44 24 40 41 f8 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f841
c000a1ea:	8d 50 01             	lea    edx,[eax+0x1]
c000a1ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1f1:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1f7:	83 c4 2c             	add    esp,0x2c
c000a1fa:	5b                   	pop    ebx
c000a1fb:	5e                   	pop    esi
c000a1fc:	5f                   	pop    edi
c000a1fd:	5d                   	pop    ebp
c000a1fe:	e9 0b 04 00 00       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000a203:	90                   	nop

c000a204 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a204:	55                   	push   ebp
c000a205:	57                   	push   edi
c000a206:	56                   	push   esi
c000a207:	53                   	push   ebx
c000a208:	83 ec 14             	sub    esp,0x14
c000a20b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a20f:	53                   	push   ebx
c000a210:	68 52 f8 01 c0       	push   0xc001f852
c000a215:	e8 f4 03 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a223:	74 21                	je     c000a246 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a225:	83 ec 08             	sub    esp,0x8
c000a228:	53                   	push   ebx
c000a229:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a22d:	57                   	push   edi
c000a22e:	e8 f3 f3 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	89 c6                	mov    esi,eax
c000a238:	85 c0                	test   eax,eax
c000a23a:	74 0a                	je     c000a246 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a23c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a23e:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a244:	74 0a                	je     c000a250 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a246:	31 c0                	xor    eax,eax
c000a248:	83 c4 0c             	add    esp,0xc
c000a24b:	5b                   	pop    ebx
c000a24c:	5e                   	pop    esi
c000a24d:	5f                   	pop    edi
c000a24e:	5d                   	pop    ebp
c000a24f:	c3                   	ret    
c000a250:	e8 f4 d8 ff ff       	call   c0007b49 <Phys::allocatePage()>
c000a255:	c1 ed 0b             	shr    ebp,0xb
c000a258:	8b 16                	mov    edx,DWORD PTR [esi]
c000a25a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a260:	09 c2                	or     edx,eax
c000a262:	81 ca 01 08 00 00    	or     edx,0x801
c000a268:	89 16                	mov    DWORD PTR [esi],edx
c000a26a:	8b 35 ec 16 02 c0    	mov    esi,DWORD PTR ds:0xc00216ec
c000a270:	85 f6                	test   esi,esi
c000a272:	7e 3e                	jle    c000a2b2 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a274:	89 df                	mov    edi,ebx
c000a276:	31 f6                	xor    esi,esi
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	55                   	push   ebp
c000a27c:	e8 ff f1 ff ff       	call   c0009480 <Virt::swapIDToSector(unsigned long)>
c000a281:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a284:	01 f0                	add    eax,esi
c000a286:	6a 01                	push   0x1
c000a288:	31 d2                	xor    edx,edx
c000a28a:	46                   	inc    esi
c000a28b:	52                   	push   edx
c000a28c:	81 c7 00 02 00 00    	add    edi,0x200
c000a292:	50                   	push   eax
c000a293:	0f be 05 f8 16 02 c0 	movsx  eax,BYTE PTR ds:0xc00216f8
c000a29a:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a2a1:	51                   	push   ecx
c000a2a2:	e8 b7 2a 00 00       	call   c000cd5e <LogicalDisk::read(unsigned long long, int, void*)>
c000a2a7:	83 c4 20             	add    esp,0x20
c000a2aa:	39 35 ec 16 02 c0    	cmp    DWORD PTR ds:0xc00216ec,esi
c000a2b0:	7f c6                	jg     c000a278 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a2b2:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2b7:	48                   	dec    eax
c000a2b8:	52                   	push   edx
c000a2b9:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2be:	50                   	push   eax
c000a2bf:	53                   	push   ebx
c000a2c0:	68 65 f8 01 c0       	push   0xc001f865
c000a2c5:	e8 44 03 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a2ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2cd:	e8 90 f1 ff ff       	call   c0009462 <Virt::freeSwapfilePage(unsigned long)>
c000a2d2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	48                   	dec    eax
c000a2db:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2e0:	85 c0                	test   eax,eax
c000a2e2:	75 01                	jne    c000a2e5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2e4:	fb                   	sti    
c000a2e5:	0f 20 d8             	mov    eax,cr3
c000a2e8:	0f 22 d8             	mov    cr3,eax
c000a2eb:	b0 01                	mov    al,0x1
c000a2ed:	e9 56 ff ff ff       	jmp    c000a248 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2f2 <VAS::scanForEviction()>:
c000a2f2:	57                   	push   edi
c000a2f3:	31 ff                	xor    edi,edi
c000a2f5:	56                   	push   esi
c000a2f6:	53                   	push   ebx
c000a2f7:	83 ec 10             	sub    esp,0x10
c000a2fa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2fe:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a301:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a307:	75 0e                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a309:	89 da                	mov    edx,ebx
c000a30b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a30e:	c1 ea 16             	shr    edx,0x16
c000a311:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a315:	74 4e                	je     c000a365 <VAS::scanForEviction()+0x73>
c000a317:	53                   	push   ebx
c000a318:	56                   	push   esi
c000a319:	e8 08 f3 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c000a31e:	5a                   	pop    edx
c000a31f:	8b 10                	mov    edx,DWORD PTR [eax]
c000a321:	59                   	pop    ecx
c000a322:	89 d1                	mov    ecx,edx
c000a324:	81 e1 01 08 00 00    	and    ecx,0x801
c000a32a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a330:	74 3e                	je     c000a370 <VAS::scanForEviction()+0x7e>
c000a332:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a338:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a33e:	76 2b                	jbe    c000a36b <VAS::scanForEviction()+0x79>
c000a340:	47                   	inc    edi
c000a341:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a348:	83 ff 03             	cmp    edi,0x3
c000a34b:	74 32                	je     c000a37f <VAS::scanForEviction()+0x8d>
c000a34d:	31 db                	xor    ebx,ebx
c000a34f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a355:	75 c0                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a357:	89 da                	mov    edx,ebx
c000a359:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a35c:	c1 ea 16             	shr    edx,0x16
c000a35f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a363:	75 b2                	jne    c000a317 <VAS::scanForEviction()+0x25>
c000a365:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a36b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a36e:	eb 91                	jmp    c000a301 <VAS::scanForEviction()+0xf>
c000a370:	f6 c2 20             	test   dl,0x20
c000a373:	74 13                	je     c000a388 <VAS::scanForEviction()+0x96>
c000a375:	83 e2 df             	and    edx,0xffffffdf
c000a378:	89 10                	mov    DWORD PTR [eax],edx
c000a37a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a37d:	eb b3                	jmp    c000a332 <VAS::scanForEviction()+0x40>
c000a37f:	83 c4 10             	add    esp,0x10
c000a382:	31 c0                	xor    eax,eax
c000a384:	5b                   	pop    ebx
c000a385:	5e                   	pop    esi
c000a386:	5f                   	pop    edi
c000a387:	c3                   	ret    
c000a388:	83 ec 08             	sub    esp,0x8
c000a38b:	89 d0                	mov    eax,edx
c000a38d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a392:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a396:	53                   	push   ebx
c000a397:	68 7a f8 01 c0       	push   0xc001f87a
c000a39c:	e8 6d 02 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a3a1:	58                   	pop    eax
c000a3a2:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a3a5:	5a                   	pop    edx
c000a3a6:	51                   	push   ecx
c000a3a7:	56                   	push   esi
c000a3a8:	e8 95 fd ff ff       	call   c000a142 <VAS::evict(unsigned long)>
c000a3ad:	5b                   	pop    ebx
c000a3ae:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3b1:	5f                   	pop    edi
c000a3b2:	50                   	push   eax
c000a3b3:	68 8e f8 01 c0       	push   0xc001f88e
c000a3b8:	e8 51 02 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a3bd:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3cb:	83 c4 10             	add    esp,0x10
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	c3                   	ret    

c000a3d2 <mapVASFirstTime>:
c000a3d2:	55                   	push   ebp
c000a3d3:	57                   	push   edi
c000a3d4:	56                   	push   esi
c000a3d5:	53                   	push   ebx
c000a3d6:	83 ec 0c             	sub    esp,0xc
c000a3d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3de:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3e1:	4a                   	dec    edx
c000a3e2:	0f 84 c8 00 00 00    	je     c000a4b0 <mapVASFirstTime+0xde>
c000a3e8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3eb:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3ee:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3f3:	c1 e5 15             	shl    ebp,0x15
c000a3f6:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3fb:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a401:	29 eb                	sub    ebx,ebp
c000a403:	29 ef                	sub    edi,ebp
c000a405:	e8 3f d7 ff ff       	call   c0007b49 <Phys::allocatePage()>
c000a40a:	83 ec 0c             	sub    esp,0xc
c000a40d:	68 03 04 00 00       	push   0x403
c000a412:	6a 01                	push   0x1
c000a414:	53                   	push   ebx
c000a415:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a41b:	50                   	push   eax
c000a41c:	56                   	push   esi
c000a41d:	e8 ec f8 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a422:	83 c4 20             	add    esp,0x20
c000a425:	39 fb                	cmp    ebx,edi
c000a427:	75 dc                	jne    c000a405 <mapVASFirstTime+0x33>
c000a429:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a42e:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a433:	29 eb                	sub    ebx,ebp
c000a435:	29 ef                	sub    edi,ebp
c000a437:	e8 0d d7 ff ff       	call   c0007b49 <Phys::allocatePage()>
c000a43c:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a440:	19 d2                	sbb    edx,edx
c000a442:	83 ec 0c             	sub    esp,0xc
c000a445:	83 e2 04             	and    edx,0x4
c000a448:	81 c2 03 04 00 00    	add    edx,0x403
c000a44e:	52                   	push   edx
c000a44f:	6a 01                	push   0x1
c000a451:	53                   	push   ebx
c000a452:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a458:	50                   	push   eax
c000a459:	56                   	push   esi
c000a45a:	e8 af f8 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a45f:	83 c4 20             	add    esp,0x20
c000a462:	39 df                	cmp    edi,ebx
c000a464:	75 d1                	jne    c000a437 <mapVASFirstTime+0x65>
c000a466:	83 ec 0c             	sub    esp,0xc
c000a469:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a46e:	6a 04                	push   0x4
c000a470:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a476:	6a ff                	push   0xffffffff
c000a478:	c1 eb 0c             	shr    ebx,0xc
c000a47b:	53                   	push   ebx
c000a47c:	68 00 20 02 c0       	push   0xc0022000
c000a481:	56                   	push   esi
c000a482:	e8 21 f3 ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a487:	83 c4 14             	add    esp,0x14
c000a48a:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a48f:	6a 04                	push   0x4
c000a491:	6a ff                	push   0xffffffff
c000a493:	53                   	push   ebx
c000a494:	68 00 20 02 c0       	push   0xc0022000
c000a499:	50                   	push   eax
c000a49a:	e8 09 f3 ff ff       	call   c00097a8 <VAS::reflagRange(unsigned long, int, int, int)>
c000a49f:	0f 20 d8             	mov    eax,cr3
c000a4a2:	0f 22 d8             	mov    cr3,eax
c000a4a5:	83 c4 20             	add    esp,0x20
c000a4a8:	83 c4 0c             	add    esp,0xc
c000a4ab:	5b                   	pop    ebx
c000a4ac:	5e                   	pop    esi
c000a4ad:	5f                   	pop    edi
c000a4ae:	5d                   	pop    ebp
c000a4af:	c3                   	ret    
c000a4b0:	83 ec 0c             	sub    esp,0xc
c000a4b3:	68 a1 f8 01 c0       	push   0xc001f8a1
c000a4b8:	e8 51 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4bd:	83 c4 10             	add    esp,0x10
c000a4c0:	83 c4 0c             	add    esp,0xc
c000a4c3:	5b                   	pop    ebx
c000a4c4:	5e                   	pop    esi
c000a4c5:	5f                   	pop    edi
c000a4c6:	5d                   	pop    ebp
c000a4c7:	c3                   	ret    

c000a4c8 <__cxa_atexit>:
c000a4c8:	31 c0                	xor    eax,eax
c000a4ca:	c3                   	ret    

c000a4cb <__cxa_finalize>:
c000a4cb:	c3                   	ret    

c000a4cc <__stack_chk_fail>:
c000a4cc:	55                   	push   ebp
c000a4cd:	89 e5                	mov    ebp,esp
c000a4cf:	83 ec 10             	sub    esp,0x10
c000a4d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4d5:	68 ba f8 01 c0       	push   0xc001f8ba
c000a4da:	e8 2f 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4df:	58                   	pop    eax
c000a4e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4e3:	5a                   	pop    edx
c000a4e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4e7:	68 ba f8 01 c0       	push   0xc001f8ba
c000a4ec:	e8 1d 01 00 00       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000a4f1:	c7 04 24 c2 f8 01 c0 	mov    DWORD PTR [esp],0xc001f8c2
c000a4f8:	e8 d2 5e 00 00       	call   c00103cf <KePanic(char const*)>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	c9                   	leave  
c000a501:	c3                   	ret    

c000a502 <__cxa_pure_virtual>:
c000a502:	83 ec 18             	sub    esp,0x18
c000a505:	68 da f8 01 c0       	push   0xc001f8da
c000a50a:	e8 c0 5e 00 00       	call   c00103cf <KePanic(char const*)>
c000a50f:	83 c4 1c             	add    esp,0x1c
c000a512:	c3                   	ret    

c000a513 <operator new[](unsigned long)>:
c000a513:	e9 55 d3 ff ff       	jmp    c000786d <malloc>

c000a518 <operator delete(void*, unsigned long)>:
c000a518:	e9 70 d3 ff ff       	jmp    c000788d <rfree>

c000a51d <operator delete[](void*)>:
c000a51d:	e9 6b d3 ff ff       	jmp    c000788d <rfree>

c000a522 <operator delete[](void*, unsigned long)>:
c000a522:	e9 66 d3 ff ff       	jmp    c000788d <rfree>

c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a527:	55                   	push   ebp
c000a528:	b9 04 00 00 00       	mov    ecx,0x4
c000a52d:	57                   	push   edi
c000a52e:	56                   	push   esi
c000a52f:	be 2f f5 01 c0       	mov    esi,0xc001f52f
c000a534:	53                   	push   ebx
c000a535:	83 ec 20             	sub    esp,0x20
c000a538:	a1 2e f5 01 c0       	mov    eax,ds:0xc001f52e
c000a53d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a541:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a545:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a549:	a1 3b f5 01 c0       	mov    eax,ds:0xc001f53b
c000a54e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a552:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a556:	fc                   	cld    
c000a557:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a559:	89 ee                	mov    esi,ebp
c000a55b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a55f:	eb 02                	jmp    c000a563 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a561:	89 c6                	mov    esi,eax
c000a563:	31 d2                	xor    edx,edx
c000a565:	41                   	inc    ecx
c000a566:	89 f0                	mov    eax,esi
c000a568:	f7 f3                	div    ebx
c000a56a:	39 de                	cmp    esi,ebx
c000a56c:	73 f3                	jae    c000a561 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a56e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a571:	eb 02                	jmp    c000a575 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a573:	89 c5                	mov    ebp,eax
c000a575:	31 d2                	xor    edx,edx
c000a577:	49                   	dec    ecx
c000a578:	89 e8                	mov    eax,ebp
c000a57a:	f7 f3                	div    ebx
c000a57c:	39 dd                	cmp    ebp,ebx
c000a57e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a582:	88 11                	mov    BYTE PTR [ecx],dl
c000a584:	73 ed                	jae    c000a573 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a586:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a58a:	83 c4 20             	add    esp,0x20
c000a58d:	5b                   	pop    ebx
c000a58e:	5e                   	pop    esi
c000a58f:	5f                   	pop    edi
c000a590:	5d                   	pop    ebp
c000a591:	c3                   	ret    

c000a592 <Dbg::logc(char)>:
c000a592:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a596:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a59d:	75 12                	jne    c000a5b1 <Dbg::logc(char)+0x1f>
c000a59f:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5a4:	ec                   	in     al,dx
c000a5a5:	a8 20                	test   al,0x20
c000a5a7:	74 fb                	je     c000a5a4 <Dbg::logc(char)+0x12>
c000a5a9:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5ae:	88 c8                	mov    al,cl
c000a5b0:	ee                   	out    dx,al
c000a5b1:	c3                   	ret    

c000a5b2 <Dbg::logs(char*)>:
c000a5b2:	53                   	push   ebx
c000a5b3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5b7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5ba:	84 c0                	test   al,al
c000a5bc:	74 0f                	je     c000a5cd <Dbg::logs(char*)+0x1b>
c000a5be:	50                   	push   eax
c000a5bf:	43                   	inc    ebx
c000a5c0:	e8 cd ff ff ff       	call   c000a592 <Dbg::logc(char)>
c000a5c5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5c8:	5a                   	pop    edx
c000a5c9:	84 c0                	test   al,al
c000a5cb:	75 f1                	jne    c000a5be <Dbg::logs(char*)+0xc>
c000a5cd:	5b                   	pop    ebx
c000a5ce:	c3                   	ret    

c000a5cf <Dbg::logWriteInt(unsigned int)>:
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	6a 0a                	push   0xa
c000a5d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5d8:	50                   	push   eax
c000a5d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5dd:	50                   	push   eax
c000a5de:	e8 44 ff ff ff       	call   c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5e3:	50                   	push   eax
c000a5e4:	e8 c9 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a5e9:	83 c4 20             	add    esp,0x20
c000a5ec:	c3                   	ret    

c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5ed:	83 ec 10             	sub    esp,0x10
c000a5f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5f4:	50                   	push   eax
c000a5f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5f9:	50                   	push   eax
c000a5fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5fe:	52                   	push   edx
c000a5ff:	e8 23 ff ff ff       	call   c000a527 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a604:	50                   	push   eax
c000a605:	e8 a8 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a60a:	83 c4 20             	add    esp,0x20
c000a60d:	c3                   	ret    

c000a60e <Dbg::kprintf(char const*, ...)>:
c000a60e:	55                   	push   ebp
c000a60f:	57                   	push   edi
c000a610:	56                   	push   esi
c000a611:	53                   	push   ebx
c000a612:	83 ec 0c             	sub    esp,0xc
c000a615:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a619:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a620:	74 08                	je     c000a62a <Dbg::kprintf(char const*, ...)+0x1c>
c000a622:	83 c4 0c             	add    esp,0xc
c000a625:	5b                   	pop    ebx
c000a626:	5e                   	pop    esi
c000a627:	5f                   	pop    edi
c000a628:	5d                   	pop    ebp
c000a629:	c3                   	ret    
c000a62a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a62e:	31 ff                	xor    edi,edi
c000a630:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a634:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a637:	84 c0                	test   al,al
c000a639:	74 e7                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x14>
c000a63b:	8d 77 01             	lea    esi,[edi+0x1]
c000a63e:	3c 25                	cmp    al,0x25
c000a640:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a643:	75 47                	jne    c000a68c <Dbg::kprintf(char const*, ...)+0x7e>
c000a645:	83 c7 02             	add    edi,0x2
c000a648:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a64b:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a64e:	83 e8 25             	sub    eax,0x25
c000a651:	3c 53                	cmp    al,0x53
c000a653:	0f 87 d2 00 00 00    	ja     c000a72b <Dbg::kprintf(char const*, ...)+0x11d>
c000a659:	25 ff 00 00 00       	and    eax,0xff
c000a65e:	ff 24 85 f0 f8 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0710]
c000a665:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a669:	89 c8                	mov    eax,ecx
c000a66b:	83 c1 04             	add    ecx,0x4
c000a66e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a672:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a674:	55                   	push   ebp
c000a675:	e8 55 ff ff ff       	call   c000a5cf <Dbg::logWriteInt(unsigned int)>
c000a67a:	58                   	pop    eax
c000a67b:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a67e:	84 c0                	test   al,al
c000a680:	74 a0                	je     c000a622 <Dbg::kprintf(char const*, ...)+0x14>
c000a682:	8d 77 01             	lea    esi,[edi+0x1]
c000a685:	3c 25                	cmp    al,0x25
c000a687:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a68a:	74 b9                	je     c000a645 <Dbg::kprintf(char const*, ...)+0x37>
c000a68c:	50                   	push   eax
c000a68d:	89 f7                	mov    edi,esi
c000a68f:	e8 fe fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a694:	89 ee                	mov    esi,ebp
c000a696:	58                   	pop    eax
c000a697:	eb e2                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a699:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a69d:	89 c8                	mov    eax,ecx
c000a69f:	83 c1 04             	add    ecx,0x4
c000a6a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6a4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6a8:	50                   	push   eax
c000a6a9:	e8 04 ff ff ff       	call   c000a5b2 <Dbg::logs(char*)>
c000a6ae:	58                   	pop    eax
c000a6af:	eb ca                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b5:	89 d0                	mov    eax,edx
c000a6b7:	83 c2 04             	add    edx,0x4
c000a6ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6be:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6c0:	50                   	push   eax
c000a6c1:	e8 09 ff ff ff       	call   c000a5cf <Dbg::logWriteInt(unsigned int)>
c000a6c6:	58                   	pop    eax
c000a6c7:	eb b2                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	83 c2 04             	add    edx,0x4
c000a6d2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6d9:	50                   	push   eax
c000a6da:	e8 b3 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a6df:	58                   	pop    eax
c000a6e0:	eb 99                	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a6e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e6:	89 c8                	mov    eax,ecx
c000a6e8:	83 c1 04             	add    ecx,0x4
c000a6eb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6ef:	6a 10                	push   0x10
c000a6f1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6f3:	51                   	push   ecx
c000a6f4:	e8 f4 fe ff ff       	call   c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a6f9:	5d                   	pop    ebp
c000a6fa:	58                   	pop    eax
c000a6fb:	e9 7b ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a700:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a704:	89 d0                	mov    eax,edx
c000a706:	83 c2 08             	add    edx,0x8
c000a709:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a70d:	6a 10                	push   0x10
c000a70f:	8b 00                	mov    eax,DWORD PTR [eax]
c000a711:	50                   	push   eax
c000a712:	e8 d6 fe ff ff       	call   c000a5ed <Dbg::logWriteIntBase(unsigned int, int)>
c000a717:	58                   	pop    eax
c000a718:	5a                   	pop    edx
c000a719:	e9 5d ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a71e:	6a 25                	push   0x25
c000a720:	e8 6d fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a725:	5a                   	pop    edx
c000a726:	e9 50 ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a72b:	6a 25                	push   0x25
c000a72d:	e8 60 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a732:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a736:	50                   	push   eax
c000a737:	e8 56 fe ff ff       	call   c000a592 <Dbg::logc(char)>
c000a73c:	5a                   	pop    edx
c000a73d:	59                   	pop    ecx
c000a73e:	e9 38 ff ff ff       	jmp    c000a67b <Dbg::kprintf(char const*, ...)+0x6d>
c000a743:	90                   	nop

c000a744 <File::read(unsigned long long, void*, int*)>:
c000a744:	53                   	push   ebx
c000a745:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a749:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a74d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a754:	3c 19                	cmp    al,0x19
c000a756:	77 35                	ja     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a758:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a75f:	85 c0                	test   eax,eax
c000a761:	74 2a                	je     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a763:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a769:	85 c0                	test   eax,eax
c000a76b:	74 20                	je     c000a78d <File::read(unsigned long long, void*, int*)+0x49>
c000a76d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a771:	74 21                	je     c000a794 <File::read(unsigned long long, void*, int*)+0x50>
c000a773:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a775:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a779:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a783:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a787:	5b                   	pop    ebx
c000a788:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a78b:	ff e0                	jmp    eax
c000a78d:	b8 0b 00 00 00       	mov    eax,0xb
c000a792:	eb 05                	jmp    c000a799 <File::read(unsigned long long, void*, int*)+0x55>
c000a794:	b8 05 00 00 00       	mov    eax,0x5
c000a799:	5b                   	pop    ebx
c000a79a:	c3                   	ret    
c000a79b:	90                   	nop

c000a79c <File::write(unsigned long long, void*, int*)>:
c000a79c:	53                   	push   ebx
c000a79d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7a5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7ac:	3c 19                	cmp    al,0x19
c000a7ae:	77 35                	ja     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b0:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7b7:	85 c0                	test   eax,eax
c000a7b9:	74 2a                	je     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7bb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7c1:	85 c0                	test   eax,eax
c000a7c3:	74 20                	je     c000a7e5 <File::write(unsigned long long, void*, int*)+0x49>
c000a7c5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7c9:	74 21                	je     c000a7ec <File::write(unsigned long long, void*, int*)+0x50>
c000a7cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7d1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7df:	5b                   	pop    ebx
c000a7e0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7e3:	ff e0                	jmp    eax
c000a7e5:	b8 0b 00 00 00       	mov    eax,0xb
c000a7ea:	eb 05                	jmp    c000a7f1 <File::write(unsigned long long, void*, int*)+0x55>
c000a7ec:	b8 05 00 00 00       	mov    eax,0x5
c000a7f1:	5b                   	pop    ebx
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <Directory::read(unsigned long long, void*, int*)>:
c000a7f4:	53                   	push   ebx
c000a7f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a804:	3c 19                	cmp    al,0x19
c000a806:	77 35                	ja     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a808:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a80f:	85 c0                	test   eax,eax
c000a811:	74 2a                	je     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a813:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a819:	85 c0                	test   eax,eax
c000a81b:	74 20                	je     c000a83d <Directory::read(unsigned long long, void*, int*)+0x49>
c000a81d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a821:	74 21                	je     c000a844 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a823:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a825:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a829:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a82f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a833:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a837:	5b                   	pop    ebx
c000a838:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a83b:	ff e0                	jmp    eax
c000a83d:	b8 0b 00 00 00       	mov    eax,0xb
c000a842:	eb 05                	jmp    c000a849 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a844:	b8 05 00 00 00       	mov    eax,0x5
c000a849:	5b                   	pop    ebx
c000a84a:	c3                   	ret    
c000a84b:	90                   	nop

c000a84c <Directory::write(unsigned long long, void*, int*)>:
c000a84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a850:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a857:	b8 0b 00 00 00       	mov    eax,0xb
c000a85c:	80 fa 19             	cmp    dl,0x19
c000a85f:	77 18                	ja     c000a879 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a861:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a868:	85 d2                	test   edx,edx
c000a86a:	74 0d                	je     c000a879 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a86c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a873:	19 c0                	sbb    eax,eax
c000a875:	83 e0 0a             	and    eax,0xa
c000a878:	40                   	inc    eax
c000a879:	c3                   	ret    

c000a87a <File::isAtty()>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	c3                   	ret    
c000a87d:	90                   	nop

c000a87e <Directory::isAtty()>:
c000a87e:	31 c0                	xor    eax,eax
c000a880:	c3                   	ret    
c000a881:	90                   	nop

c000a882 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a882:	b8 0a 00 00 00       	mov    eax,0xa
c000a887:	c3                   	ret    

c000a888 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a888:	b8 0a 00 00 00       	mov    eax,0xa
c000a88d:	c3                   	ret    

c000a88e <Filesystem::allocateSwapfile(char const*, int)>:
c000a88e:	31 c0                	xor    eax,eax
c000a890:	31 d2                	xor    edx,edx
c000a892:	c3                   	ret    
c000a893:	90                   	nop

c000a894 <File::~File()>:
c000a894:	83 ec 0c             	sub    esp,0xc
c000a897:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c000a89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a0:	89 10                	mov    DWORD PTR [eax],edx
c000a8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8a6:	83 ec 0c             	sub    esp,0xc
c000a8a9:	50                   	push   eax
c000a8aa:	e8 41 e8 ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	90                   	nop
c000a8b3:	83 c4 0c             	add    esp,0xc
c000a8b6:	c3                   	ret    
c000a8b7:	90                   	nop

c000a8b8 <File::~File()>:
c000a8b8:	83 ec 0c             	sub    esp,0xc
c000a8bb:	83 ec 0c             	sub    esp,0xc
c000a8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c2:	e8 cd ff ff ff       	call   c000a894 <File::~File()>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	83 ec 08             	sub    esp,0x8
c000a8cd:	68 14 01 00 00       	push   0x114
c000a8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8d6:	e8 3d fc ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	83 c4 0c             	add    esp,0xc
c000a8e1:	c3                   	ret    

c000a8e2 <Directory::~Directory()>:
c000a8e2:	83 ec 0c             	sub    esp,0xc
c000a8e5:	ba cc fa 01 c0       	mov    edx,0xc001facc
c000a8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ee:	89 10                	mov    DWORD PTR [eax],edx
c000a8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f4:	83 ec 0c             	sub    esp,0xc
c000a8f7:	50                   	push   eax
c000a8f8:	e8 f3 e7 ff ff       	call   c00090f0 <UnixFile::~UnixFile()>
c000a8fd:	83 c4 10             	add    esp,0x10
c000a900:	90                   	nop
c000a901:	83 c4 0c             	add    esp,0xc
c000a904:	c3                   	ret    
c000a905:	90                   	nop

c000a906 <Directory::~Directory()>:
c000a906:	83 ec 0c             	sub    esp,0xc
c000a909:	83 ec 0c             	sub    esp,0xc
c000a90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a910:	e8 cd ff ff ff       	call   c000a8e2 <Directory::~Directory()>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	83 ec 08             	sub    esp,0x8
c000a91b:	68 14 01 00 00       	push   0x114
c000a920:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a924:	e8 ef fb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	83 c4 0c             	add    esp,0xc
c000a92f:	c3                   	ret    

c000a930 <Filesystem::Filesystem()>:
c000a930:	ba 48 fa 01 c0       	mov    edx,0xc001fa48
c000a935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a939:	89 10                	mov    DWORD PTR [eax],edx
c000a93b:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a941:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a945:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a951:	90                   	nop
c000a952:	c3                   	ret    
c000a953:	90                   	nop

c000a954 <Filesystem::~Filesystem()>:
c000a954:	ba 48 fa 01 c0       	mov    edx,0xc001fa48
c000a959:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95d:	89 10                	mov    DWORD PTR [eax],edx
c000a95f:	90                   	nop
c000a960:	c3                   	ret    
c000a961:	90                   	nop

c000a962 <Filesystem::~Filesystem()>:
c000a962:	83 ec 0c             	sub    esp,0xc
c000a965:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a969:	e8 e6 ff ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c000a96e:	83 c4 04             	add    esp,0x4
c000a971:	83 ec 08             	sub    esp,0x8
c000a974:	6a 08                	push   0x8
c000a976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a97a:	e8 99 fb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000a97f:	83 c4 10             	add    esp,0x10
c000a982:	83 c4 0c             	add    esp,0xc
c000a985:	c3                   	ret    

c000a986 <Fs::getcwd(Process*, char*, int)>:
c000a986:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a98a:	31 c0                	xor    eax,eax
c000a98c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a98f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a993:	7d 15                	jge    c000a9aa <Fs::getcwd(Process*, char*, int)+0x24>
c000a995:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a999:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9a0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9a3:	84 c9                	test   cl,cl
c000a9a5:	74 06                	je     c000a9ad <Fs::getcwd(Process*, char*, int)+0x27>
c000a9a7:	40                   	inc    eax
c000a9a8:	eb e2                	jmp    c000a98c <Fs::getcwd(Process*, char*, int)+0x6>
c000a9aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9ad:	31 c0                	xor    eax,eax
c000a9af:	c3                   	ret    

c000a9b0 <Fs::initVFS()>:
c000a9b0:	83 ec 18             	sub    esp,0x18
c000a9b3:	6a 08                	push   0x8
c000a9b5:	e8 b3 ce ff ff       	call   c000786d <malloc>
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	e8 96 da 00 00       	call   c0018458 <FAT::FAT()>
c000a9c2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9c9:	e8 9f ce ff ff       	call   c000786d <malloc>
c000a9ce:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9d1:	e8 1e e9 00 00       	call   c00192f4 <ISO9660::ISO9660()>
c000a9d6:	83 c4 1c             	add    esp,0x1c
c000a9d9:	c3                   	ret    

c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9da:	55                   	push   ebp
c000a9db:	57                   	push   edi
c000a9dc:	56                   	push   esi
c000a9dd:	53                   	push   ebx
c000a9de:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9e4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9eb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9f2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9f9:	68 00 04 00 00       	push   0x400
c000a9fe:	6a 00                	push   0x0
c000aa00:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa04:	56                   	push   esi
c000aa05:	e8 b6 5a ff ff       	call   c00004c0 <memset>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa11:	75 0b                	jne    c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa13:	50                   	push   eax
c000aa14:	50                   	push   eax
c000aa15:	57                   	push   edi
c000aa16:	56                   	push   esi
c000aa17:	e8 d4 5b ff ff       	call   c00005f0 <strcpy>
c000aa1c:	eb 41                	jmp    c000aa5f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa1e:	8a 07                	mov    al,BYTE PTR [edi]
c000aa20:	3c 5c                	cmp    al,0x5c
c000aa22:	74 04                	je     c000aa28 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa24:	3c 2f                	cmp    al,0x2f
c000aa26:	75 18                	jne    c000aa40 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa28:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa2b:	3c 60                	cmp    al,0x60
c000aa2d:	7e 03                	jle    c000aa32 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa2f:	83 e8 20             	sub    eax,0x20
c000aa32:	88 04 24             	mov    BYTE PTR [esp],al
c000aa35:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa3c:	50                   	push   eax
c000aa3d:	50                   	push   eax
c000aa3e:	eb 18                	jmp    c000aa58 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa40:	50                   	push   eax
c000aa41:	50                   	push   eax
c000aa42:	55                   	push   ebp
c000aa43:	56                   	push   esi
c000aa44:	e8 a7 5b ff ff       	call   c00005f0 <strcpy>
c000aa49:	5a                   	pop    edx
c000aa4a:	59                   	pop    ecx
c000aa4b:	68 9b 09 02 c0       	push   0xc002099b
c000aa50:	56                   	push   esi
c000aa51:	e8 5a 5d ff ff       	call   c00007b0 <strcat>
c000aa56:	5d                   	pop    ebp
c000aa57:	58                   	pop    eax
c000aa58:	57                   	push   edi
c000aa59:	56                   	push   esi
c000aa5a:	e8 51 5d ff ff       	call   c00007b0 <strcat>
c000aa5f:	83 c4 10             	add    esp,0x10
c000aa62:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa65:	3c 60                	cmp    al,0x60
c000aa67:	7e 03                	jle    c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa69:	83 e8 20             	sub    eax,0x20
c000aa6c:	88 04 24             	mov    BYTE PTR [esp],al
c000aa6f:	88 03                	mov    BYTE PTR [ebx],al
c000aa71:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa78:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa7e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa82:	bf 03 00 00 00       	mov    edi,0x3
c000aa87:	b8 03 00 00 00       	mov    eax,0x3
c000aa8c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa8f:	84 d2                	test   dl,dl
c000aa91:	0f 84 91 00 00 00    	je     c000ab28 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa97:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa9a:	80 fa 5c             	cmp    dl,0x5c
c000aa9d:	74 05                	je     c000aaa4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa9f:	80 fa 2f             	cmp    dl,0x2f
c000aaa2:	75 12                	jne    c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaa4:	89 c5                	mov    ebp,eax
c000aaa6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaab:	74 09                	je     c000aab6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaad:	40                   	inc    eax
c000aaae:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aab2:	89 cf                	mov    edi,ecx
c000aab4:	eb d6                	jmp    c000aa8c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aab6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aabb:	75 5b                	jne    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aabd:	80 fa 2e             	cmp    dl,0x2e
c000aac0:	75 56                	jne    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aac2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aac6:	74 19                	je     c000aae1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aac8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aacd:	74 53                	je     c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aacf:	89 f9                	mov    ecx,edi
c000aad1:	41                   	inc    ecx
c000aad2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aad5:	80 fa 2f             	cmp    dl,0x2f
c000aad8:	74 f7                	je     c000aad1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aada:	80 fa 5c             	cmp    dl,0x5c
c000aadd:	74 f2                	je     c000aad1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aadf:	eb d1                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aae1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aae6:	74 3a                	je     c000ab22 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aae8:	83 f8 03             	cmp    eax,0x3
c000aaeb:	74 c5                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aaed:	41                   	inc    ecx
c000aaee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aaf1:	80 fa 2f             	cmp    dl,0x2f
c000aaf4:	74 f7                	je     c000aaed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aaf6:	80 fa 5c             	cmp    dl,0x5c
c000aaf9:	74 f2                	je     c000aaed <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aafb:	48                   	dec    eax
c000aafc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab00:	75 06                	jne    c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab06:	eb f3                	jmp    c000aafb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab08:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab0c:	74 07                	je     c000ab15 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab12:	48                   	dec    eax
c000ab13:	eb f3                	jmp    c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab15:	40                   	inc    eax
c000ab16:	eb 9a                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab18:	80 fa 2f             	cmp    dl,0x2f
c000ab1b:	74 95                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab1d:	80 fa 5c             	cmp    dl,0x5c
c000ab20:	74 90                	je     c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab22:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab25:	40                   	inc    eax
c000ab26:	eb 8a                	jmp    c000aab2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab2c:	83 ec 0c             	sub    esp,0xc
c000ab2f:	53                   	push   ebx
c000ab30:	e8 fb 59 ff ff       	call   c0000530 <strlen>
c000ab35:	83 c4 10             	add    esp,0x10
c000ab38:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab3d:	75 26                	jne    c000ab65 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab3f:	83 ec 0c             	sub    esp,0xc
c000ab42:	53                   	push   ebx
c000ab43:	e8 e8 59 ff ff       	call   c0000530 <strlen>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab50:	74 26                	je     c000ab78 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab52:	83 ec 0c             	sub    esp,0xc
c000ab55:	53                   	push   ebx
c000ab56:	e8 d5 59 ff ff       	call   c0000530 <strlen>
c000ab5b:	83 c4 10             	add    esp,0x10
c000ab5e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab63:	eb c7                	jmp    c000ab2c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab65:	83 ec 0c             	sub    esp,0xc
c000ab68:	53                   	push   ebx
c000ab69:	e8 c2 59 ff ff       	call   c0000530 <strlen>
c000ab6e:	83 c4 10             	add    esp,0x10
c000ab71:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab76:	74 c7                	je     c000ab3f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab78:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab7e:	5b                   	pop    ebx
c000ab7f:	5e                   	pop    esi
c000ab80:	5f                   	pop    edi
c000ab81:	5d                   	pop    ebp
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <File::File(char const*, Process*)>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	6a 00                	push   0x0
c000ab90:	50                   	push   eax
c000ab91:	e8 78 e3 ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c000ab96:	83 c4 10             	add    esp,0x10
c000ab99:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c000ab9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aba2:	89 10                	mov    DWORD PTR [eax],edx
c000aba4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aba8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb2:	83 c0 0d             	add    eax,0xd
c000abb5:	83 ec 04             	sub    esp,0x4
c000abb8:	52                   	push   edx
c000abb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abbd:	50                   	push   eax
c000abbe:	e8 17 fe ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000abc3:	83 c4 10             	add    esp,0x10
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abcd:	8d 50 bf             	lea    edx,[eax-0x41]
c000abd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abde:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abec:	25 ff 00 00 00       	and    eax,0xff
c000abf1:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abf8:	85 c0                	test   eax,eax
c000abfa:	74 42                	je     c000ac3e <File::File(char const*, Process*)+0xba>
c000abfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac06:	25 ff 00 00 00       	and    eax,0xff
c000ac0b:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac12:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac18:	85 c0                	test   eax,eax
c000ac1a:	75 22                	jne    c000ac3e <File::File(char const*, Process*)+0xba>
c000ac1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac20:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac26:	25 ff 00 00 00       	and    eax,0xff
c000ac2b:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac32:	83 ec 0c             	sub    esp,0xc
c000ac35:	50                   	push   eax
c000ac36:	e8 61 20 00 00       	call   c000cc9c <LogicalDisk::mount()>
c000ac3b:	83 c4 10             	add    esp,0x10
c000ac3e:	90                   	nop
c000ac3f:	83 c4 0c             	add    esp,0xc
c000ac42:	c3                   	ret    
c000ac43:	90                   	nop

c000ac44 <File::open(FileOpenMode)>:
c000ac44:	53                   	push   ebx
c000ac45:	b8 0b 00 00 00       	mov    eax,0xb
c000ac4a:	83 ec 08             	sub    esp,0x8
c000ac4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac51:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac58:	80 fa 19             	cmp    dl,0x19
c000ac5b:	77 40                	ja     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac5d:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac64:	85 d2                	test   edx,edx
c000ac66:	74 35                	je     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac68:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac6e:	85 d2                	test   edx,edx
c000ac70:	74 2b                	je     c000ac9d <File::open(FileOpenMode)+0x59>
c000ac72:	b8 06 00 00 00       	mov    eax,0x6
c000ac77:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac7b:	75 20                	jne    c000ac9d <File::open(FileOpenMode)+0x59>
c000ac7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac7f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac89:	51                   	push   ecx
c000ac8a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac8d:	51                   	push   ecx
c000ac8e:	52                   	push   edx
c000ac8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac92:	83 c4 10             	add    esp,0x10
c000ac95:	85 c0                	test   eax,eax
c000ac97:	75 04                	jne    c000ac9d <File::open(FileOpenMode)+0x59>
c000ac99:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac9d:	83 c4 08             	add    esp,0x8
c000aca0:	5b                   	pop    ebx
c000aca1:	c3                   	ret    

c000aca2 <File::close()>:
c000aca2:	53                   	push   ebx
c000aca3:	b8 0b 00 00 00       	mov    eax,0xb
c000aca8:	83 ec 08             	sub    esp,0x8
c000acab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acaf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acb6:	80 fa 19             	cmp    dl,0x19
c000acb9:	77 41                	ja     c000acfc <File::close()+0x5a>
c000acbb:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acc2:	85 db                	test   ebx,ebx
c000acc4:	74 36                	je     c000acfc <File::close()+0x5a>
c000acc6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000accd:	74 2d                	je     c000acfc <File::close()+0x5a>
c000accf:	b8 05 00 00 00       	mov    eax,0x5
c000acd4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acd8:	74 22                	je     c000acfc <File::close()+0x5a>
c000acda:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acde:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000ace5:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aceb:	53                   	push   ebx
c000acec:	53                   	push   ebx
c000aced:	8b 10                	mov    edx,DWORD PTR [eax]
c000acef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acf5:	50                   	push   eax
c000acf6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acf9:	83 c4 10             	add    esp,0x10
c000acfc:	83 c4 08             	add    esp,0x8
c000acff:	5b                   	pop    ebx
c000ad00:	c3                   	ret    
c000ad01:	90                   	nop

c000ad02 <File::seek(unsigned long long)>:
c000ad02:	56                   	push   esi
c000ad03:	53                   	push   ebx
c000ad04:	b8 0b 00 00 00       	mov    eax,0xb
c000ad09:	51                   	push   ecx
c000ad0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad1d:	80 fa 19             	cmp    dl,0x19
c000ad20:	77 31                	ja     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad22:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad29:	85 d2                	test   edx,edx
c000ad2b:	74 26                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad2d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad33:	85 d2                	test   edx,edx
c000ad35:	74 1c                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad37:	b8 05 00 00 00       	mov    eax,0x5
c000ad3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad40:	74 11                	je     c000ad53 <File::seek(unsigned long long)+0x51>
c000ad42:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad44:	53                   	push   ebx
c000ad45:	51                   	push   ecx
c000ad46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad4c:	52                   	push   edx
c000ad4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad50:	83 c4 10             	add    esp,0x10
c000ad53:	5a                   	pop    edx
c000ad54:	5b                   	pop    ebx
c000ad55:	5e                   	pop    esi
c000ad56:	c3                   	ret    
c000ad57:	90                   	nop

c000ad58 <File::tell(unsigned long long*)>:
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	b8 0b 00 00 00       	mov    eax,0xb
c000ad60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad6b:	80 fa 19             	cmp    dl,0x19
c000ad6e:	77 34                	ja     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad70:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad77:	85 d2                	test   edx,edx
c000ad79:	74 29                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad7b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad81:	85 d2                	test   edx,edx
c000ad83:	74 1f                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad85:	b8 05 00 00 00       	mov    eax,0x5
c000ad8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad8e:	74 14                	je     c000ada4 <File::tell(unsigned long long*)+0x4c>
c000ad90:	50                   	push   eax
c000ad91:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad9d:	52                   	push   edx
c000ad9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ada1:	83 c4 10             	add    esp,0x10
c000ada4:	83 c4 0c             	add    esp,0xc
c000ada7:	c3                   	ret    

c000ada8 <File::rewind()>:
c000ada8:	83 ec 10             	sub    esp,0x10
c000adab:	6a 00                	push   0x0
c000adad:	6a 00                	push   0x0
c000adaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adb3:	e8 4a ff ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c000adb8:	83 c4 1c             	add    esp,0x1c
c000adbb:	c3                   	ret    

c000adbc <File::unlink()>:
c000adbc:	83 ec 0c             	sub    esp,0xc
c000adbf:	b8 0b 00 00 00       	mov    eax,0xb
c000adc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adcf:	80 f9 19             	cmp    cl,0x19
c000add2:	77 2f                	ja     c000ae03 <File::unlink()+0x47>
c000add4:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000addb:	85 c9                	test   ecx,ecx
c000addd:	74 24                	je     c000ae03 <File::unlink()+0x47>
c000addf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ade5:	85 c9                	test   ecx,ecx
c000ade7:	74 1a                	je     c000ae03 <File::unlink()+0x47>
c000ade9:	b8 06 00 00 00       	mov    eax,0x6
c000adee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adf2:	75 0f                	jne    c000ae03 <File::unlink()+0x47>
c000adf4:	83 c2 0d             	add    edx,0xd
c000adf7:	50                   	push   eax
c000adf8:	50                   	push   eax
c000adf9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adfb:	52                   	push   edx
c000adfc:	51                   	push   ecx
c000adfd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	83 c4 0c             	add    esp,0xc
c000ae06:	c3                   	ret    
c000ae07:	90                   	nop

c000ae08 <File::rename(char const*)>:
c000ae08:	83 ec 0c             	sub    esp,0xc
c000ae0b:	b8 0b 00 00 00       	mov    eax,0xb
c000ae10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae1b:	80 f9 19             	cmp    cl,0x19
c000ae1e:	77 32                	ja     c000ae52 <File::rename(char const*)+0x4a>
c000ae20:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae27:	85 c9                	test   ecx,ecx
c000ae29:	74 27                	je     c000ae52 <File::rename(char const*)+0x4a>
c000ae2b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae31:	85 c9                	test   ecx,ecx
c000ae33:	74 1d                	je     c000ae52 <File::rename(char const*)+0x4a>
c000ae35:	b8 06 00 00 00       	mov    eax,0x6
c000ae3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae3e:	75 12                	jne    c000ae52 <File::rename(char const*)+0x4a>
c000ae40:	83 c2 0d             	add    edx,0xd
c000ae43:	50                   	push   eax
c000ae44:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae4a:	52                   	push   edx
c000ae4b:	51                   	push   ecx
c000ae4c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	83 c4 0c             	add    esp,0xc
c000ae55:	c3                   	ret    

c000ae56 <File::chfatattr(unsigned char, unsigned char)>:
c000ae56:	57                   	push   edi
c000ae57:	b8 0b 00 00 00       	mov    eax,0xb
c000ae5c:	56                   	push   esi
c000ae5d:	53                   	push   ebx
c000ae5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae71:	80 f9 19             	cmp    cl,0x19
c000ae74:	77 37                	ja     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae76:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae7d:	85 c9                	test   ecx,ecx
c000ae7f:	74 2c                	je     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae87:	85 c9                	test   ecx,ecx
c000ae89:	74 22                	je     c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae8b:	b8 06 00 00 00       	mov    eax,0x6
c000ae90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae94:	75 17                	jne    c000aead <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae96:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae98:	89 f0                	mov    eax,esi
c000ae9a:	83 c2 0d             	add    edx,0xd
c000ae9d:	0f b6 f0             	movzx  esi,al
c000aea0:	0f b6 db             	movzx  ebx,bl
c000aea3:	56                   	push   esi
c000aea4:	53                   	push   ebx
c000aea5:	52                   	push   edx
c000aea6:	51                   	push   ecx
c000aea7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	5b                   	pop    ebx
c000aeae:	5e                   	pop    esi
c000aeaf:	5f                   	pop    edi
c000aeb0:	c3                   	ret    
c000aeb1:	90                   	nop

c000aeb2 <File::exists()>:
c000aeb2:	83 ec 0c             	sub    esp,0xc
c000aeb5:	31 c0                	xor    eax,eax
c000aeb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aebb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aec2:	80 f9 19             	cmp    cl,0x19
c000aec5:	77 24                	ja     c000aeeb <File::exists()+0x39>
c000aec7:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aece:	85 c9                	test   ecx,ecx
c000aed0:	74 19                	je     c000aeeb <File::exists()+0x39>
c000aed2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aed8:	85 c9                	test   ecx,ecx
c000aeda:	74 0f                	je     c000aeeb <File::exists()+0x39>
c000aedc:	83 c2 0d             	add    edx,0xd
c000aedf:	50                   	push   eax
c000aee0:	50                   	push   eax
c000aee1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aee3:	52                   	push   edx
c000aee4:	51                   	push   ecx
c000aee5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	83 c4 0c             	add    esp,0xc
c000aeee:	c3                   	ret    
c000aeef:	90                   	nop

c000aef0 <File::stat(unsigned long long*, bool*)>:
c000aef0:	56                   	push   esi
c000aef1:	53                   	push   ebx
c000aef2:	50                   	push   eax
c000aef3:	b8 0b 00 00 00       	mov    eax,0xb
c000aef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aefc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af0b:	80 f9 19             	cmp    cl,0x19
c000af0e:	77 3d                	ja     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af10:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af17:	85 c9                	test   ecx,ecx
c000af19:	74 32                	je     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af21:	85 c9                	test   ecx,ecx
c000af23:	74 28                	je     c000af4d <File::stat(unsigned long long*, bool*)+0x5d>
c000af25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af2b:	74 13                	je     c000af40 <File::stat(unsigned long long*, bool*)+0x50>
c000af2d:	83 ec 04             	sub    esp,0x4
c000af30:	56                   	push   esi
c000af31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af37:	51                   	push   ecx
c000af38:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af3e:	eb 0a                	jmp    c000af4a <File::stat(unsigned long long*, bool*)+0x5a>
c000af40:	53                   	push   ebx
c000af41:	83 c2 0d             	add    edx,0xd
c000af44:	56                   	push   esi
c000af45:	52                   	push   edx
c000af46:	51                   	push   ecx
c000af47:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	5a                   	pop    edx
c000af4e:	5b                   	pop    ebx
c000af4f:	5e                   	pop    esi
c000af50:	c3                   	ret    

c000af51 <Fs::setcwd(Process*, char*)>:
c000af51:	55                   	push   ebp
c000af52:	57                   	push   edi
c000af53:	56                   	push   esi
c000af54:	53                   	push   ebx
c000af55:	81 ec 20 02 00 00    	sub    esp,0x220
c000af5b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af62:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af68:	57                   	push   edi
c000af69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af70:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af74:	56                   	push   esi
c000af75:	e8 60 fa ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000af7a:	89 34 24             	mov    DWORD PTR [esp],esi
c000af7d:	e8 ae 55 ff ff       	call   c0000530 <strlen>
c000af82:	83 c4 10             	add    esp,0x10
c000af85:	83 f8 02             	cmp    eax,0x2
c000af88:	77 15                	ja     c000af9f <Fs::setcwd(Process*, char*)+0x4e>
c000af8a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af8f:	83 eb 41             	sub    ebx,0x41
c000af92:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af99:	85 c0                	test   eax,eax
c000af9b:	75 1c                	jne    c000afb9 <Fs::setcwd(Process*, char*)+0x68>
c000af9d:	eb 2f                	jmp    c000afce <Fs::setcwd(Process*, char*)+0x7d>
c000af9f:	83 ec 0c             	sub    esp,0xc
c000afa2:	56                   	push   esi
c000afa3:	e8 88 55 ff ff       	call   c0000530 <strlen>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	83 f8 03             	cmp    eax,0x3
c000afae:	75 57                	jne    c000b007 <Fs::setcwd(Process*, char*)+0xb6>
c000afb0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afb5:	75 50                	jne    c000b007 <Fs::setcwd(Process*, char*)+0xb6>
c000afb7:	eb d1                	jmp    c000af8a <Fs::setcwd(Process*, char*)+0x39>
c000afb9:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afc0:	75 0c                	jne    c000afce <Fs::setcwd(Process*, char*)+0x7d>
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	50                   	push   eax
c000afc6:	e8 d1 1c 00 00       	call   c000cc9c <LogicalDisk::mount()>
c000afcb:	83 c4 10             	add    esp,0x10
c000afce:	b8 03 00 00 00       	mov    eax,0x3
c000afd3:	83 fb 19             	cmp    ebx,0x19
c000afd6:	0f 87 c6 00 00 00    	ja     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000afdc:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afe3:	b8 05 00 00 00       	mov    eax,0x5
c000afe8:	85 d2                	test   edx,edx
c000afea:	0f 84 b2 00 00 00    	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000aff0:	b8 06 00 00 00       	mov    eax,0x6
c000aff5:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000affc:	0f 85 92 00 00 00    	jne    c000b094 <Fs::setcwd(Process*, char*)+0x143>
c000b002:	e9 9b 00 00 00       	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b007:	83 ec 0c             	sub    esp,0xc
c000b00a:	68 14 01 00 00       	push   0x114
c000b00f:	e8 59 c8 ff ff       	call   c000786d <malloc>
c000b014:	83 c4 0c             	add    esp,0xc
c000b017:	89 c3                	mov    ebx,eax
c000b019:	55                   	push   ebp
c000b01a:	56                   	push   esi
c000b01b:	50                   	push   eax
c000b01c:	e8 63 fb ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000b021:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b026:	83 c4 0c             	add    esp,0xc
c000b029:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b02d:	50                   	push   eax
c000b02e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b032:	50                   	push   eax
c000b033:	53                   	push   ebx
c000b034:	e8 b7 fe ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	83 f8 02             	cmp    eax,0x2
c000b03f:	74 27                	je     c000b068 <Fs::setcwd(Process*, char*)+0x117>
c000b041:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b046:	75 1c                	jne    c000b064 <Fs::setcwd(Process*, char*)+0x113>
c000b048:	b8 02 00 00 00       	mov    eax,0x2
c000b04d:	85 db                	test   ebx,ebx
c000b04f:	74 51                	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b051:	83 ec 0c             	sub    esp,0xc
c000b054:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b056:	53                   	push   ebx
c000b057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b05a:	83 c4 10             	add    esp,0x10
c000b05d:	b8 02 00 00 00       	mov    eax,0x2
c000b062:	eb 3e                	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b064:	85 c0                	test   eax,eax
c000b066:	74 1c                	je     c000b084 <Fs::setcwd(Process*, char*)+0x133>
c000b068:	b8 01 00 00 00       	mov    eax,0x1
c000b06d:	85 db                	test   ebx,ebx
c000b06f:	74 31                	je     c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b071:	83 ec 0c             	sub    esp,0xc
c000b074:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b076:	53                   	push   ebx
c000b077:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b07a:	83 c4 10             	add    esp,0x10
c000b07d:	b8 01 00 00 00       	mov    eax,0x1
c000b082:	eb 1e                	jmp    c000b0a2 <Fs::setcwd(Process*, char*)+0x151>
c000b084:	85 db                	test   ebx,ebx
c000b086:	74 0c                	je     c000b094 <Fs::setcwd(Process*, char*)+0x143>
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08d:	53                   	push   ebx
c000b08e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	50                   	push   eax
c000b095:	50                   	push   eax
c000b096:	56                   	push   esi
c000b097:	57                   	push   edi
c000b098:	e8 53 55 ff ff       	call   c00005f0 <strcpy>
c000b09d:	83 c4 10             	add    esp,0x10
c000b0a0:	31 c0                	xor    eax,eax
c000b0a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0a8:	5b                   	pop    ebx
c000b0a9:	5e                   	pop    esi
c000b0aa:	5f                   	pop    edi
c000b0ab:	5d                   	pop    ebp
c000b0ac:	c3                   	ret    
c000b0ad:	90                   	nop

c000b0ae <Directory::Directory(char const*, Process*)>:
c000b0ae:	83 ec 0c             	sub    esp,0xc
c000b0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b5:	83 ec 08             	sub    esp,0x8
c000b0b8:	6a 00                	push   0x0
c000b0ba:	50                   	push   eax
c000b0bb:	e8 4e de ff ff       	call   c0008f0e <UnixFile::UnixFile(int)>
c000b0c0:	83 c4 10             	add    esp,0x10
c000b0c3:	ba cc fa 01 c0       	mov    edx,0xc001facc
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	89 10                	mov    DWORD PTR [eax],edx
c000b0ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0dc:	83 c0 0d             	add    eax,0xd
c000b0df:	83 ec 04             	sub    esp,0x4
c000b0e2:	52                   	push   edx
c000b0e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0e7:	50                   	push   eax
c000b0e8:	e8 ed f8 ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0ed:	83 c4 10             	add    esp,0x10
c000b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b108:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b110:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b116:	25 ff 00 00 00       	and    eax,0xff
c000b11b:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b122:	85 c0                	test   eax,eax
c000b124:	74 42                	je     c000b168 <Directory::Directory(char const*, Process*)+0xba>
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b130:	25 ff 00 00 00       	and    eax,0xff
c000b135:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b13c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b142:	85 c0                	test   eax,eax
c000b144:	75 22                	jne    c000b168 <Directory::Directory(char const*, Process*)+0xba>
c000b146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b14a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b150:	25 ff 00 00 00       	and    eax,0xff
c000b155:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b15c:	83 ec 0c             	sub    esp,0xc
c000b15f:	50                   	push   eax
c000b160:	e8 37 1b 00 00       	call   c000cc9c <LogicalDisk::mount()>
c000b165:	83 c4 10             	add    esp,0x10
c000b168:	90                   	nop
c000b169:	83 c4 0c             	add    esp,0xc
c000b16c:	c3                   	ret    
c000b16d:	90                   	nop

c000b16e <Directory::open()>:
c000b16e:	53                   	push   ebx
c000b16f:	b8 0b 00 00 00       	mov    eax,0xb
c000b174:	83 ec 08             	sub    esp,0x8
c000b177:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b17b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b182:	80 fa 19             	cmp    dl,0x19
c000b185:	77 3d                	ja     c000b1c4 <Directory::open()+0x56>
c000b187:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b18e:	85 d2                	test   edx,edx
c000b190:	74 32                	je     c000b1c4 <Directory::open()+0x56>
c000b192:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b198:	85 d2                	test   edx,edx
c000b19a:	74 28                	je     c000b1c4 <Directory::open()+0x56>
c000b19c:	b8 06 00 00 00       	mov    eax,0x6
c000b1a1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1a5:	75 1d                	jne    c000b1c4 <Directory::open()+0x56>
c000b1a7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1ad:	50                   	push   eax
c000b1ae:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1b0:	51                   	push   ecx
c000b1b1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1b4:	51                   	push   ecx
c000b1b5:	52                   	push   edx
c000b1b6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1b9:	83 c4 10             	add    esp,0x10
c000b1bc:	85 c0                	test   eax,eax
c000b1be:	75 04                	jne    c000b1c4 <Directory::open()+0x56>
c000b1c0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1c4:	83 c4 08             	add    esp,0x8
c000b1c7:	5b                   	pop    ebx
c000b1c8:	c3                   	ret    
c000b1c9:	90                   	nop

c000b1ca <Directory::close()>:
c000b1ca:	53                   	push   ebx
c000b1cb:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d0:	83 ec 08             	sub    esp,0x8
c000b1d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1d7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1de:	80 fa 19             	cmp    dl,0x19
c000b1e1:	77 41                	ja     c000b224 <Directory::close()+0x5a>
c000b1e3:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1ea:	85 db                	test   ebx,ebx
c000b1ec:	74 36                	je     c000b224 <Directory::close()+0x5a>
c000b1ee:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1f5:	74 2d                	je     c000b224 <Directory::close()+0x5a>
c000b1f7:	b8 05 00 00 00       	mov    eax,0x5
c000b1fc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b200:	74 22                	je     c000b224 <Directory::close()+0x5a>
c000b202:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b206:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b20d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b213:	53                   	push   ebx
c000b214:	53                   	push   ebx
c000b215:	8b 10                	mov    edx,DWORD PTR [eax]
c000b217:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b21d:	50                   	push   eax
c000b21e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b221:	83 c4 10             	add    esp,0x10
c000b224:	83 c4 08             	add    esp,0x8
c000b227:	5b                   	pop    ebx
c000b228:	c3                   	ret    
c000b229:	90                   	nop

c000b22a <Directory::unlink()>:
c000b22a:	83 ec 0c             	sub    esp,0xc
c000b22d:	b8 0b 00 00 00       	mov    eax,0xb
c000b232:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b236:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23d:	80 f9 19             	cmp    cl,0x19
c000b240:	77 2f                	ja     c000b271 <Directory::unlink()+0x47>
c000b242:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b249:	85 c9                	test   ecx,ecx
c000b24b:	74 24                	je     c000b271 <Directory::unlink()+0x47>
c000b24d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b253:	85 c9                	test   ecx,ecx
c000b255:	74 1a                	je     c000b271 <Directory::unlink()+0x47>
c000b257:	b8 06 00 00 00       	mov    eax,0x6
c000b25c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b260:	75 0f                	jne    c000b271 <Directory::unlink()+0x47>
c000b262:	83 c2 0d             	add    edx,0xd
c000b265:	50                   	push   eax
c000b266:	50                   	push   eax
c000b267:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b269:	52                   	push   edx
c000b26a:	51                   	push   ecx
c000b26b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b26e:	83 c4 10             	add    esp,0x10
c000b271:	83 c4 0c             	add    esp,0xc
c000b274:	c3                   	ret    
c000b275:	90                   	nop

c000b276 <Directory::rename(char const*)>:
c000b276:	83 ec 0c             	sub    esp,0xc
c000b279:	b8 0b 00 00 00       	mov    eax,0xb
c000b27e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b282:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b289:	80 f9 19             	cmp    cl,0x19
c000b28c:	77 32                	ja     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b28e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b295:	85 c9                	test   ecx,ecx
c000b297:	74 27                	je     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b299:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b29f:	85 c9                	test   ecx,ecx
c000b2a1:	74 1d                	je     c000b2c0 <Directory::rename(char const*)+0x4a>
c000b2a3:	b8 06 00 00 00       	mov    eax,0x6
c000b2a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ac:	75 12                	jne    c000b2c0 <Directory::rename(char const*)+0x4a>
c000b2ae:	83 c2 0d             	add    edx,0xd
c000b2b1:	50                   	push   eax
c000b2b2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2b8:	52                   	push   edx
c000b2b9:	51                   	push   ecx
c000b2ba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2bd:	83 c4 10             	add    esp,0x10
c000b2c0:	83 c4 0c             	add    esp,0xc
c000b2c3:	c3                   	ret    

c000b2c4 <Directory::exists()>:
c000b2c4:	83 ec 0c             	sub    esp,0xc
c000b2c7:	31 c0                	xor    eax,eax
c000b2c9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2cd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2d4:	80 f9 19             	cmp    cl,0x19
c000b2d7:	77 24                	ja     c000b2fd <Directory::exists()+0x39>
c000b2d9:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2e0:	85 c9                	test   ecx,ecx
c000b2e2:	74 19                	je     c000b2fd <Directory::exists()+0x39>
c000b2e4:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2ea:	85 c9                	test   ecx,ecx
c000b2ec:	74 0f                	je     c000b2fd <Directory::exists()+0x39>
c000b2ee:	83 c2 0d             	add    edx,0xd
c000b2f1:	50                   	push   eax
c000b2f2:	50                   	push   eax
c000b2f3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f5:	52                   	push   edx
c000b2f6:	51                   	push   ecx
c000b2f7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2fa:	83 c4 10             	add    esp,0x10
c000b2fd:	83 c4 0c             	add    esp,0xc
c000b300:	c3                   	ret    
c000b301:	90                   	nop

c000b302 <Directory::read(dirent*)>:
c000b302:	83 ec 1c             	sub    esp,0x1c
c000b305:	b8 0b 00 00 00       	mov    eax,0xb
c000b30a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b30e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b315:	80 fa 19             	cmp    dl,0x19
c000b318:	77 30                	ja     c000b34a <Directory::read(dirent*)+0x48>
c000b31a:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b321:	85 d2                	test   edx,edx
c000b323:	74 25                	je     c000b34a <Directory::read(dirent*)+0x48>
c000b325:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b32c:	74 1c                	je     c000b34a <Directory::read(dirent*)+0x48>
c000b32e:	83 ec 0c             	sub    esp,0xc
c000b331:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b333:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b337:	52                   	push   edx
c000b338:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33c:	6a 00                	push   0x0
c000b33e:	68 10 01 00 00       	push   0x110
c000b343:	51                   	push   ecx
c000b344:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b347:	83 c4 20             	add    esp,0x20
c000b34a:	83 c4 1c             	add    esp,0x1c
c000b34d:	c3                   	ret    

c000b34e <Directory::create()>:
c000b34e:	83 ec 0c             	sub    esp,0xc
c000b351:	b8 0b 00 00 00       	mov    eax,0xb
c000b356:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b35a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b361:	80 f9 19             	cmp    cl,0x19
c000b364:	77 2f                	ja     c000b395 <Directory::create()+0x47>
c000b366:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b36d:	85 c9                	test   ecx,ecx
c000b36f:	74 24                	je     c000b395 <Directory::create()+0x47>
c000b371:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b377:	85 c9                	test   ecx,ecx
c000b379:	74 1a                	je     c000b395 <Directory::create()+0x47>
c000b37b:	b8 06 00 00 00       	mov    eax,0x6
c000b380:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b384:	75 0f                	jne    c000b395 <Directory::create()+0x47>
c000b386:	83 c2 0d             	add    edx,0xd
c000b389:	50                   	push   eax
c000b38a:	50                   	push   eax
c000b38b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b38d:	52                   	push   edx
c000b38e:	51                   	push   ecx
c000b38f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	83 c4 0c             	add    esp,0xc
c000b398:	c3                   	ret    
c000b399:	90                   	nop

c000b39a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b39a:	b8 0a 00 00 00       	mov    eax,0xa
c000b39f:	c3                   	ret    

c000b3a0 <Bus::Bus(char const*)>:
c000b3a0:	83 ec 0c             	sub    esp,0xc
c000b3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a7:	83 ec 08             	sub    esp,0x8
c000b3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ae:	50                   	push   eax
c000b3af:	e8 30 08 00 00       	call   c000bbe4 <Device::Device(char const*)>
c000b3b4:	83 c4 10             	add    esp,0x10
c000b3b7:	ba e8 fa 01 c0       	mov    edx,0xc001fae8
c000b3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c0:	89 10                	mov    DWORD PTR [eax],edx
c000b3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3d0:	90                   	nop
c000b3d1:	83 c4 0c             	add    esp,0xc
c000b3d4:	c3                   	ret    
c000b3d5:	90                   	nop
c000b3d6:	66 90                	xchg   ax,ax

c000b3d8 <Bus::~Bus()>:
c000b3d8:	83 ec 0c             	sub    esp,0xc
c000b3db:	ba e8 fa 01 c0       	mov    edx,0xc001fae8
c000b3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e4:	89 10                	mov    DWORD PTR [eax],edx
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	50                   	push   eax
c000b3ee:	e8 5b 05 00 00       	call   c000b94e <Device::~Device()>
c000b3f3:	83 c4 10             	add    esp,0x10
c000b3f6:	90                   	nop
c000b3f7:	83 c4 0c             	add    esp,0xc
c000b3fa:	c3                   	ret    
c000b3fb:	90                   	nop

c000b3fc <Bus::~Bus()>:
c000b3fc:	83 ec 0c             	sub    esp,0xc
c000b3ff:	83 ec 0c             	sub    esp,0xc
c000b402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b406:	e8 cd ff ff ff       	call   c000b3d8 <Bus::~Bus()>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	83 ec 08             	sub    esp,0x8
c000b411:	68 58 01 00 00       	push   0x158
c000b416:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41a:	e8 f9 f0 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	83 c4 0c             	add    esp,0xc
c000b425:	c3                   	ret    

c000b426 <beepThread(void*)>:
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b42e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b432:	48                   	dec    eax
c000b433:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b438:	75 01                	jne    c000b43b <beepThread(void*)+0x15>
c000b43a:	fb                   	sti    
c000b43b:	83 ec 0c             	sub    esp,0xc
c000b43e:	6b c2 0a             	imul   eax,edx,0xa
c000b441:	50                   	push   eax
c000b442:	e8 b9 99 00 00       	call   c0014e00 <milliTenthSleep(unsigned int)>
c000b447:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b44e:	e8 9a b7 00 00       	call   c0016bed <HalMakeBeep(int)>
c000b453:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b45b:	83 c4 1c             	add    esp,0x1c
c000b45e:	e9 99 98 00 00       	jmp    c0014cfc <blockTask(TaskState)>

c000b463 <Krnl::beep(int, int, bool)>:
c000b463:	56                   	push   esi
c000b464:	53                   	push   ebx
c000b465:	83 ec 10             	sub    esp,0x10
c000b468:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b46c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b474:	e8 74 b7 00 00       	call   c0016bed <HalMakeBeep(int)>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	89 f0                	mov    eax,esi
c000b47e:	84 c0                	test   al,al
c000b480:	74 1e                	je     c000b4a0 <Krnl::beep(int, int, bool)+0x3d>
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	6b db 0a             	imul   ebx,ebx,0xa
c000b488:	53                   	push   ebx
c000b489:	e8 72 99 00 00       	call   c0014e00 <milliTenthSleep(unsigned int)>
c000b48e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b496:	83 c4 14             	add    esp,0x14
c000b499:	5b                   	pop    ebx
c000b49a:	5e                   	pop    esi
c000b49b:	e9 4d b7 00 00       	jmp    c0016bed <HalMakeBeep(int)>
c000b4a0:	68 e6 00 00 00       	push   0xe6
c000b4a5:	53                   	push   ebx
c000b4a6:	68 26 b4 00 c0       	push   0xc000b426
c000b4ab:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4b1:	e8 02 94 00 00       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c000b4b6:	83 c4 14             	add    esp,0x14
c000b4b9:	5b                   	pop    ebx
c000b4ba:	5e                   	pop    esi
c000b4bb:	c3                   	ret    

c000b4bc <User::loadClockSettings(int)>:
c000b4bc:	53                   	push   ebx
c000b4bd:	83 ec 14             	sub    esp,0x14
c000b4c0:	68 14 01 00 00       	push   0x114
c000b4c5:	e8 a3 c3 ff ff       	call   c000786d <malloc>
c000b4ca:	83 c4 0c             	add    esp,0xc
c000b4cd:	89 c3                	mov    ebx,eax
c000b4cf:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4d5:	68 0c fb 01 c0       	push   0xc001fb0c
c000b4da:	50                   	push   eax
c000b4db:	e8 a4 f6 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000b4e0:	58                   	pop    eax
c000b4e1:	5a                   	pop    edx
c000b4e2:	6a 01                	push   0x1
c000b4e4:	53                   	push   ebx
c000b4e5:	e8 5a f7 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000b4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4ed:	e8 b0 f7 ff ff       	call   c000aca2 <File::close()>
c000b4f2:	83 c4 10             	add    esp,0x10
c000b4f5:	85 db                	test   ebx,ebx
c000b4f7:	74 0f                	je     c000b508 <User::loadClockSettings(int)+0x4c>
c000b4f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4fb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b502:	83 c4 08             	add    esp,0x8
c000b505:	5b                   	pop    ebx
c000b506:	ff e0                	jmp    eax
c000b508:	83 c4 08             	add    esp,0x8
c000b50b:	5b                   	pop    ebx
c000b50c:	c3                   	ret    
c000b50d:	90                   	nop

c000b50e <Clock::Clock(char const*)>:
c000b50e:	83 ec 0c             	sub    esp,0xc
c000b511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b515:	83 ec 08             	sub    esp,0x8
c000b518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b51c:	50                   	push   eax
c000b51d:	e8 c2 06 00 00       	call   c000bbe4 <Device::Device(char const*)>
c000b522:	83 c4 10             	add    esp,0x10
c000b525:	ba 34 fb 01 c0       	mov    edx,0xc001fb34
c000b52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b52e:	89 10                	mov    DWORD PTR [eax],edx
c000b530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b534:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b53e:	90                   	nop
c000b53f:	83 c4 0c             	add    esp,0xc
c000b542:	c3                   	ret    
c000b543:	90                   	nop

c000b544 <Clock::~Clock()>:
c000b544:	83 ec 0c             	sub    esp,0xc
c000b547:	ba 34 fb 01 c0       	mov    edx,0xc001fb34
c000b54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b550:	89 10                	mov    DWORD PTR [eax],edx
c000b552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b556:	83 ec 0c             	sub    esp,0xc
c000b559:	50                   	push   eax
c000b55a:	e8 ef 03 00 00       	call   c000b94e <Device::~Device()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	90                   	nop
c000b563:	83 c4 0c             	add    esp,0xc
c000b566:	c3                   	ret    
c000b567:	90                   	nop

c000b568 <Clock::~Clock()>:
c000b568:	83 ec 0c             	sub    esp,0xc
c000b56b:	83 ec 0c             	sub    esp,0xc
c000b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b572:	e8 cd ff ff ff       	call   c000b544 <Clock::~Clock()>
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	83 ec 08             	sub    esp,0x8
c000b57d:	68 58 01 00 00       	push   0x158
c000b582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b586:	e8 8d ef ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b58b:	83 c4 10             	add    esp,0x10
c000b58e:	83 c4 0c             	add    esp,0xc
c000b591:	c3                   	ret    

c000b592 <Clock::timeInSecondsLocal()>:
c000b592:	53                   	push   ebx
c000b593:	83 ec 14             	sub    esp,0x14
c000b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b59a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b59c:	50                   	push   eax
c000b59d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5a0:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b5a7:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b5ad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5b3:	89 cb                	mov    ebx,ecx
c000b5b5:	c1 fb 1f             	sar    ebx,0x1f
c000b5b8:	01 c8                	add    eax,ecx
c000b5ba:	11 da                	adc    edx,ebx
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	31 c9                	xor    ecx,ecx
c000b5c1:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5c8:	74 05                	je     c000b5cf <Clock::timeInSecondsLocal()+0x3d>
c000b5ca:	b9 08 07 00 00       	mov    ecx,0x708
c000b5cf:	31 db                	xor    ebx,ebx
c000b5d1:	01 c8                	add    eax,ecx
c000b5d3:	11 da                	adc    edx,ebx
c000b5d5:	83 c4 08             	add    esp,0x8
c000b5d8:	5b                   	pop    ebx
c000b5d9:	c3                   	ret    

c000b5da <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5da:	57                   	push   edi
c000b5db:	56                   	push   esi
c000b5dc:	53                   	push   ebx
c000b5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5eb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5ee:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5f5:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5fb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b601:	99                   	cdq    
c000b602:	29 c6                	sub    esi,eax
c000b604:	19 d7                	sbb    edi,edx
c000b606:	89 f0                	mov    eax,esi
c000b608:	89 fa                	mov    edx,edi
c000b60a:	31 f6                	xor    esi,esi
c000b60c:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b613:	74 05                	je     c000b61a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b615:	be 08 07 00 00       	mov    esi,0x708
c000b61a:	31 ff                	xor    edi,edi
c000b61c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b620:	29 f0                	sub    eax,esi
c000b622:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b626:	19 fa                	sbb    edx,edi
c000b628:	89 d8                	mov    eax,ebx
c000b62a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b62e:	5b                   	pop    ebx
c000b62f:	5e                   	pop    esi
c000b630:	5f                   	pop    edi
c000b631:	ff e0                	jmp    eax

c000b633 <datetimeToSeconds(datetime_t)>:
c000b633:	55                   	push   ebp
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	83 ec 14             	sub    esp,0x14
c000b63a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b63e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b642:	89 d3                	mov    ebx,edx
c000b644:	0f b6 c6             	movzx  eax,dh
c000b647:	c1 eb 10             	shr    ebx,0x10
c000b64a:	48                   	dec    eax
c000b64b:	66 81 eb 6c 07       	sub    bx,0x76c
c000b650:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b654:	0f b6 f5             	movzx  esi,ch
c000b657:	89 cf                	mov    edi,ecx
c000b659:	6b f6 3c             	imul   esi,esi,0x3c
c000b65c:	c1 ef 10             	shr    edi,0x10
c000b65f:	0f b6 c9             	movzx  ecx,cl
c000b662:	89 f8                	mov    eax,edi
c000b664:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b66a:	0f b6 f8             	movzx  edi,al
c000b66d:	0f b6 d2             	movzx  edx,dl
c000b670:	01 fe                	add    esi,edi
c000b672:	01 f1                	add    ecx,esi
c000b674:	0f b7 f3             	movzx  esi,bx
c000b677:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b67b:	c1 f9 1f             	sar    ecx,0x1f
c000b67e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b687:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b68c:	8b 0c 8d 80 fb 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe0480]
c000b693:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b697:	76 29                	jbe    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b699:	f6 c3 03             	test   bl,0x3
c000b69c:	75 24                	jne    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b69e:	31 d2                	xor    edx,edx
c000b6a0:	bf 64 00 00 00       	mov    edi,0x64
c000b6a5:	89 d8                	mov    eax,ebx
c000b6a7:	66 f7 f7             	div    di
c000b6aa:	66 85 d2             	test   dx,dx
c000b6ad:	75 12                	jne    c000b6c1 <datetimeToSeconds(datetime_t)+0x8e>
c000b6af:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6b5:	bf 90 01 00 00       	mov    edi,0x190
c000b6ba:	99                   	cdq    
c000b6bb:	f7 ff                	idiv   edi
c000b6bd:	85 d2                	test   edx,edx
c000b6bf:	75 01                	jne    c000b6c2 <datetimeToSeconds(datetime_t)+0x8f>
c000b6c1:	41                   	inc    ecx
c000b6c2:	66 83 fb 46          	cmp    bx,0x46
c000b6c6:	76 45                	jbe    c000b70d <datetimeToSeconds(datetime_t)+0xda>
c000b6c8:	bb 46 00 00 00       	mov    ebx,0x46
c000b6cd:	bf 64 00 00 00       	mov    edi,0x64
c000b6d2:	bd 90 01 00 00       	mov    ebp,0x190
c000b6d7:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6dc:	f6 c3 03             	test   bl,0x3
c000b6df:	75 23                	jne    c000b704 <datetimeToSeconds(datetime_t)+0xd1>
c000b6e1:	89 d8                	mov    eax,ebx
c000b6e3:	99                   	cdq    
c000b6e4:	f7 ff                	idiv   edi
c000b6e6:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6eb:	85 d2                	test   edx,edx
c000b6ed:	75 15                	jne    c000b704 <datetimeToSeconds(datetime_t)+0xd1>
c000b6ef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6f5:	99                   	cdq    
c000b6f6:	f7 fd                	idiv   ebp
c000b6f8:	31 c0                	xor    eax,eax
c000b6fa:	85 d2                	test   edx,edx
c000b6fc:	0f 94 c0             	sete   al
c000b6ff:	05 6d 01 00 00       	add    eax,0x16d
c000b704:	01 c1                	add    ecx,eax
c000b706:	43                   	inc    ebx
c000b707:	39 f3                	cmp    ebx,esi
c000b709:	7c cc                	jl     c000b6d7 <datetimeToSeconds(datetime_t)+0xa4>
c000b70b:	eb 3b                	jmp    c000b748 <datetimeToSeconds(datetime_t)+0x115>
c000b70d:	74 39                	je     c000b748 <datetimeToSeconds(datetime_t)+0x115>
c000b70f:	b8 45 00 00 00       	mov    eax,0x45
c000b714:	89 c2                	mov    edx,eax
c000b716:	83 e2 03             	and    edx,0x3
c000b719:	39 f0                	cmp    eax,esi
c000b71b:	7e 13                	jle    c000b730 <datetimeToSeconds(datetime_t)+0xfd>
c000b71d:	85 d2                	test   edx,edx
c000b71f:	0f 94 c2             	sete   dl
c000b722:	48                   	dec    eax
c000b723:	0f b6 d2             	movzx  edx,dl
c000b726:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b72c:	29 d1                	sub    ecx,edx
c000b72e:	eb e4                	jmp    c000b714 <datetimeToSeconds(datetime_t)+0xe1>
c000b730:	b8 6d 01 00 00       	mov    eax,0x16d
c000b735:	85 d2                	test   edx,edx
c000b737:	75 0d                	jne    c000b746 <datetimeToSeconds(datetime_t)+0x113>
c000b739:	31 c0                	xor    eax,eax
c000b73b:	66 85 db             	test   bx,bx
c000b73e:	0f 95 c0             	setne  al
c000b741:	05 6d 01 00 00       	add    eax,0x16d
c000b746:	29 c1                	sub    ecx,eax
c000b748:	b8 80 51 01 00       	mov    eax,0x15180
c000b74d:	f7 e9                	imul   ecx
c000b74f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b753:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b757:	83 c4 14             	add    esp,0x14
c000b75a:	5b                   	pop    ebx
c000b75b:	5e                   	pop    esi
c000b75c:	5f                   	pop    edi
c000b75d:	5d                   	pop    ebp
c000b75e:	c3                   	ret    
c000b75f:	90                   	nop

c000b760 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b760:	57                   	push   edi
c000b761:	56                   	push   esi
c000b762:	53                   	push   ebx
c000b763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b767:	8b 06                	mov    eax,DWORD PTR [esi]
c000b769:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b76c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b774:	e8 ba fe ff ff       	call   c000b633 <datetimeToSeconds(datetime_t)>
c000b779:	59                   	pop    ecx
c000b77a:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b781:	5b                   	pop    ebx
c000b782:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b788:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b78e:	89 cb                	mov    ebx,ecx
c000b790:	c1 fb 1f             	sar    ebx,0x1f
c000b793:	29 c8                	sub    eax,ecx
c000b795:	19 da                	sbb    edx,ebx
c000b797:	31 c9                	xor    ecx,ecx
c000b799:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b7a0:	74 05                	je     c000b7a7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b7a2:	b9 08 07 00 00       	mov    ecx,0x708
c000b7a7:	31 db                	xor    ebx,ebx
c000b7a9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7ad:	29 c8                	sub    eax,ecx
c000b7af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7b3:	19 da                	sbb    edx,ebx
c000b7b5:	89 f8                	mov    eax,edi
c000b7b7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7bb:	5b                   	pop    ebx
c000b7bc:	5e                   	pop    esi
c000b7bd:	5f                   	pop    edi
c000b7be:	ff e0                	jmp    eax

c000b7c0 <secondsToDatetime(unsigned long long)>:
c000b7c0:	55                   	push   ebp
c000b7c1:	57                   	push   edi
c000b7c2:	56                   	push   esi
c000b7c3:	53                   	push   ebx
c000b7c4:	83 ec 1c             	sub    esp,0x1c
c000b7c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7cf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7d3:	6a 00                	push   0x0
c000b7d5:	68 80 51 01 00       	push   0x15180
c000b7da:	55                   	push   ebp
c000b7db:	57                   	push   edi
c000b7dc:	e8 1f 26 01 00       	call   c001de00 <__udivdi3>
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	6a 00                	push   0x0
c000b7f0:	68 80 51 01 00       	push   0x15180
c000b7f5:	55                   	push   ebp
c000b7f6:	57                   	push   edi
c000b7f7:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7fc:	e8 ff 26 01 00       	call   c001df00 <__umoddi3>
c000b801:	83 c4 10             	add    esp,0x10
c000b804:	99                   	cdq    
c000b805:	f7 ff                	idiv   edi
c000b807:	bf 3c 00 00 00       	mov    edi,0x3c
c000b80c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b80f:	89 d0                	mov    eax,edx
c000b811:	99                   	cdq    
c000b812:	f7 ff                	idiv   edi
c000b814:	85 db                	test   ebx,ebx
c000b816:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b819:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b81c:	79 11                	jns    c000b82f <secondsToDatetime(unsigned long long)+0x6f>
c000b81e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b822:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b828:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b82d:	eb 07                	jmp    c000b836 <secondsToDatetime(unsigned long long)+0x76>
c000b82f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b834:	89 d8                	mov    eax,ebx
c000b836:	bf b4 05 00 00       	mov    edi,0x5b4
c000b83b:	99                   	cdq    
c000b83c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b841:	f7 f9                	idiv   ecx
c000b843:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84c:	31 d2                	xor    edx,edx
c000b84e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b856:	01 c3                	add    ebx,eax
c000b858:	89 d8                	mov    eax,ebx
c000b85a:	f7 f1                	div    ecx
c000b85c:	31 d2                	xor    edx,edx
c000b85e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b861:	89 d8                	mov    eax,ebx
c000b863:	f7 f7                	div    edi
c000b865:	31 d2                	xor    edx,edx
c000b867:	29 c1                	sub    ecx,eax
c000b869:	89 d8                	mov    eax,ebx
c000b86b:	f7 f5                	div    ebp
c000b86d:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b872:	29 c1                	sub    ecx,eax
c000b874:	31 d2                	xor    edx,edx
c000b876:	89 c8                	mov    eax,ecx
c000b878:	f7 f5                	div    ebp
c000b87a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b87f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b883:	31 d2                	xor    edx,edx
c000b885:	89 c8                	mov    eax,ecx
c000b887:	f7 f5                	div    ebp
c000b889:	31 d2                	xor    edx,edx
c000b88b:	01 c3                	add    ebx,eax
c000b88d:	89 c8                	mov    eax,ecx
c000b88f:	f7 f7                	div    edi
c000b891:	bf 99 00 00 00       	mov    edi,0x99
c000b896:	29 c3                	sub    ebx,eax
c000b898:	31 d2                	xor    edx,edx
c000b89a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b8a2:	29 c3                	sub    ebx,eax
c000b8a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8aa:	bb 05 00 00 00       	mov    ebx,0x5
c000b8af:	83 c1 02             	add    ecx,0x2
c000b8b2:	89 c8                	mov    eax,ecx
c000b8b4:	f7 f7                	div    edi
c000b8b6:	31 d2                	xor    edx,edx
c000b8b8:	89 c7                	mov    edi,eax
c000b8ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8c0:	83 c0 02             	add    eax,0x2
c000b8c3:	f7 f3                	div    ebx
c000b8c5:	89 eb                	mov    ebx,ebp
c000b8c7:	29 c3                	sub    ebx,eax
c000b8c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8cf:	88 1e                	mov    BYTE PTR [esi],bl
c000b8d1:	19 c0                	sbb    eax,eax
c000b8d3:	31 d2                	xor    edx,edx
c000b8d5:	83 e0 0c             	and    eax,0xc
c000b8d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8e8:	83 f9 01             	cmp    ecx,0x1
c000b8eb:	0f 96 c2             	setbe  dl
c000b8ee:	41                   	inc    ecx
c000b8ef:	01 d0                	add    eax,edx
c000b8f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8f8:	83 c4 1c             	add    esp,0x1c
c000b8fb:	89 f0                	mov    eax,esi
c000b8fd:	5b                   	pop    ebx
c000b8fe:	5e                   	pop    esi
c000b8ff:	5f                   	pop    edi
c000b900:	5d                   	pop    ebp
c000b901:	c2 04 00             	ret    0x4

c000b904 <Clock::timeInDatetimeLocal()>:
c000b904:	53                   	push   ebx
c000b905:	83 ec 14             	sub    esp,0x14
c000b908:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b90c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b910:	e8 7d fc ff ff       	call   c000b592 <Clock::timeInSecondsLocal()>
c000b915:	83 c4 0c             	add    esp,0xc
c000b918:	52                   	push   edx
c000b919:	50                   	push   eax
c000b91a:	53                   	push   ebx
c000b91b:	e8 a0 fe ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c000b920:	89 d8                	mov    eax,ebx
c000b922:	83 c4 14             	add    esp,0x14
c000b925:	5b                   	pop    ebx
c000b926:	c2 04 00             	ret    0x4
c000b929:	90                   	nop

c000b92a <Device::hibernate()>:
c000b92a:	c3                   	ret    
c000b92b:	90                   	nop

c000b92c <Device::wake()>:
c000b92c:	c3                   	ret    
c000b92d:	90                   	nop

c000b92e <Device::detect()>:
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Device::disableLegacy()>:
c000b930:	c3                   	ret    
c000b931:	90                   	nop

c000b932 <Device::powerSaving(PowerSavingLevel)>:
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <DriverlessDevice::close(int, int, void*)>:
c000b934:	31 c0                	xor    eax,eax
c000b936:	c3                   	ret    
c000b937:	90                   	nop

c000b938 <DriverlessDevice::detect()>:
c000b938:	c3                   	ret    
c000b939:	90                   	nop

c000b93a <DriverlessDevice::open(int, int, void*)>:
c000b93a:	83 ec 18             	sub    esp,0x18
c000b93d:	68 b0 fb 01 c0       	push   0xc001fbb0
c000b942:	e8 88 4a 00 00       	call   c00103cf <KePanic(char const*)>
c000b947:	83 c8 ff             	or     eax,0xffffffff
c000b94a:	83 c4 1c             	add    esp,0x1c
c000b94d:	c3                   	ret    

c000b94e <Device::~Device()>:
c000b94e:	ba 10 fc 01 c0       	mov    edx,0xc001fc10
c000b953:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b957:	89 10                	mov    DWORD PTR [eax],edx
c000b959:	90                   	nop
c000b95a:	c3                   	ret    
c000b95b:	90                   	nop

c000b95c <Device::~Device()>:
c000b95c:	83 ec 0c             	sub    esp,0xc
c000b95f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b963:	e8 e6 ff ff ff       	call   c000b94e <Device::~Device()>
c000b968:	83 c4 04             	add    esp,0x4
c000b96b:	83 ec 08             	sub    esp,0x8
c000b96e:	68 58 01 00 00       	push   0x158
c000b973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b977:	e8 9c eb ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000b97c:	83 c4 10             	add    esp,0x10
c000b97f:	83 c4 0c             	add    esp,0xc
c000b982:	c3                   	ret    
c000b983:	90                   	nop

c000b984 <Device::findAndLoadDriver()>:
c000b984:	c7 44 24 04 ce fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fbce
c000b98c:	e9 7d ec ff ff       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000b991:	90                   	nop

c000b992 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b992:	57                   	push   edi
c000b993:	b9 09 00 00 00       	mov    ecx,0x9
c000b998:	56                   	push   esi
c000b999:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b99d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b9a1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b9ab:	81 c7 18 01 00 00    	add    edi,0x118
c000b9b1:	fc                   	cld    
c000b9b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9b4:	5e                   	pop    esi
c000b9b5:	5f                   	pop    edi
c000b9b6:	c3                   	ret    
c000b9b7:	90                   	nop

c000b9b8 <Device::preOpenACPI(void*, char*, char*)>:
c000b9b8:	57                   	push   edi
c000b9b9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9be:	56                   	push   esi
c000b9bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9c7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9d1:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9d7:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9e3:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9e8:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9ee:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9f4:	5e                   	pop    esi
c000b9f5:	5f                   	pop    edi
c000b9f6:	c3                   	ret    
c000b9f7:	90                   	nop

c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9f8:	53                   	push   ebx
c000b9f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba09:	0f b6 c0             	movzx  eax,al
c000ba0c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba18:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba1c:	5b                   	pop    ebx
c000ba1d:	e9 a6 05 00 00       	jmp    c000bfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba22 <Device::getParent()>:
c000ba22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba26:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba2c:	c3                   	ret    
c000ba2d:	90                   	nop

c000ba2e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba36:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba3b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba3f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba47:	e9 e8 06 00 00       	jmp    c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba4c <Device::addChild(Device*)>:
c000ba4c:	53                   	push   ebx
c000ba4d:	83 ec 08             	sub    esp,0x8
c000ba50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba58:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba5e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba64:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba66:	85 d2                	test   edx,edx
c000ba68:	74 04                	je     c000ba6e <Device::addChild(Device*)+0x22>
c000ba6a:	89 d3                	mov    ebx,edx
c000ba6c:	eb f6                	jmp    c000ba64 <Device::addChild(Device*)+0x18>
c000ba6e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba71:	83 ec 0c             	sub    esp,0xc
c000ba74:	6a 08                	push   0x8
c000ba76:	e8 f2 bd ff ff       	call   c000786d <malloc>
c000ba7b:	89 03                	mov    DWORD PTR [ebx],eax
c000ba7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba83:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba8a:	83 c4 18             	add    esp,0x18
c000ba8d:	5b                   	pop    ebx
c000ba8e:	c3                   	ret    
c000ba8f:	90                   	nop

c000ba90 <Device::removeAllChildren()>:
c000ba90:	56                   	push   esi
c000ba91:	53                   	push   ebx
c000ba92:	52                   	push   edx
c000ba93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba97:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baa0:	74 17                	je     c000bab9 <Device::removeAllChildren()+0x29>
c000baa2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000baa5:	85 c0                	test   eax,eax
c000baa7:	74 0c                	je     c000bab5 <Device::removeAllChildren()+0x25>
c000baa9:	83 ec 0c             	sub    esp,0xc
c000baac:	8b 10                	mov    edx,DWORD PTR [eax]
c000baae:	50                   	push   eax
c000baaf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bab2:	83 c4 10             	add    esp,0x10
c000bab5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bab7:	eb e4                	jmp    c000ba9d <Device::removeAllChildren()+0xd>
c000bab9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000babf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bacb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bad2:	58                   	pop    eax
c000bad3:	5b                   	pop    ebx
c000bad4:	5e                   	pop    esi
c000bad5:	c3                   	ret    

c000bad6 <Device::hibernateAll()>:
c000bad6:	53                   	push   ebx
c000bad7:	83 ec 14             	sub    esp,0x14
c000bada:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bade:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bae0:	53                   	push   ebx
c000bae1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bae4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baea:	83 c4 10             	add    esp,0x10
c000baed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000baf0:	74 0f                	je     c000bb01 <Device::hibernateAll()+0x2b>
c000baf2:	83 ec 0c             	sub    esp,0xc
c000baf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baf8:	e8 d9 ff ff ff       	call   c000bad6 <Device::hibernateAll()>
c000bafd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baff:	eb e9                	jmp    c000baea <Device::hibernateAll()+0x14>
c000bb01:	83 c4 08             	add    esp,0x8
c000bb04:	5b                   	pop    ebx
c000bb05:	c3                   	ret    

c000bb06 <Device::wakeAll()>:
c000bb06:	53                   	push   ebx
c000bb07:	83 ec 14             	sub    esp,0x14
c000bb0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb10:	53                   	push   ebx
c000bb11:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb1a:	83 c4 10             	add    esp,0x10
c000bb1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb20:	74 0f                	je     c000bb31 <Device::wakeAll()+0x2b>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb28:	e8 d9 ff ff ff       	call   c000bb06 <Device::wakeAll()>
c000bb2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb2f:	eb e9                	jmp    c000bb1a <Device::wakeAll()+0x14>
c000bb31:	83 c4 08             	add    esp,0x8
c000bb34:	5b                   	pop    ebx
c000bb35:	c3                   	ret    

c000bb36 <Device::detectAll()>:
c000bb36:	53                   	push   ebx
c000bb37:	83 ec 14             	sub    esp,0x14
c000bb3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb40:	53                   	push   ebx
c000bb41:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb44:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb50:	74 0f                	je     c000bb61 <Device::detectAll()+0x2b>
c000bb52:	83 ec 0c             	sub    esp,0xc
c000bb55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb58:	e8 d9 ff ff ff       	call   c000bb36 <Device::detectAll()>
c000bb5d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb5f:	eb e9                	jmp    c000bb4a <Device::detectAll()+0x14>
c000bb61:	83 c4 08             	add    esp,0x8
c000bb64:	5b                   	pop    ebx
c000bb65:	c3                   	ret    

c000bb66 <Device::disableLegacyAll()>:
c000bb66:	c3                   	ret    
c000bb67:	90                   	nop

c000bb68 <Device::loadDriversForAll()>:
c000bb68:	c3                   	ret    
c000bb69:	90                   	nop

c000bb6a <Device::closeAll()>:
c000bb6a:	53                   	push   ebx
c000bb6b:	83 ec 08             	sub    esp,0x8
c000bb6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb72:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb74:	6a 00                	push   0x0
c000bb76:	6a 00                	push   0x0
c000bb78:	6a 00                	push   0x0
c000bb7a:	53                   	push   ebx
c000bb7b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb84:	83 c4 10             	add    esp,0x10
c000bb87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb8a:	74 0f                	je     c000bb9b <Device::closeAll()+0x31>
c000bb8c:	83 ec 0c             	sub    esp,0xc
c000bb8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb92:	e8 d3 ff ff ff       	call   c000bb6a <Device::closeAll()>
c000bb97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb99:	eb e9                	jmp    c000bb84 <Device::closeAll()+0x1a>
c000bb9b:	83 c4 08             	add    esp,0x8
c000bb9e:	5b                   	pop    ebx
c000bb9f:	c3                   	ret    

c000bba0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bba0:	56                   	push   esi
c000bba1:	53                   	push   ebx
c000bba2:	83 ec 0c             	sub    esp,0xc
c000bba5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bba9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bbad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbaf:	56                   	push   esi
c000bbb0:	53                   	push   ebx
c000bbb1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbba:	83 c4 10             	add    esp,0x10
c000bbbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbc0:	74 0f                	je     c000bbd1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbc2:	52                   	push   edx
c000bbc3:	52                   	push   edx
c000bbc4:	56                   	push   esi
c000bbc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbc8:	e8 d3 ff ff ff       	call   c000bba0 <Device::powerSavingAll(PowerSavingLevel)>
c000bbcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbcf:	eb e9                	jmp    c000bbba <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbd1:	58                   	pop    eax
c000bbd2:	5b                   	pop    ebx
c000bbd3:	5e                   	pop    esi
c000bbd4:	c3                   	ret    
c000bbd5:	90                   	nop

c000bbd6 <Device::setName(char const*)>:
c000bbd6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbde:	e9 0d 4a ff ff       	jmp    c00005f0 <strcpy>
c000bbe3:	90                   	nop

c000bbe4 <Device::Device(char const*)>:
c000bbe4:	83 ec 1c             	sub    esp,0x1c
c000bbe7:	ba 10 fc 01 c0       	mov    edx,0xc001fc10
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	89 10                	mov    DWORD PTR [eax],edx
c000bbf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf6:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc04:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc12:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc20:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc2a:	83 ec 08             	sub    esp,0x8
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc35:	e8 9c ff ff ff       	call   c000bbd6 <Device::setName(char const*)>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc45:	83 ec 0c             	sub    esp,0xc
c000bc48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc4c:	e8 1c bc ff ff       	call   c000786d <malloc>
c000bc51:	83 c4 10             	add    esp,0x10
c000bc54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc61:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc65:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc90:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcc2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcd0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bcda:	90                   	nop
c000bcdb:	83 c4 1c             	add    esp,0x1c
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <Device::getName()>:
c000bce0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce4:	05 d0 00 00 00       	add    eax,0xd0
c000bce9:	c3                   	ret    

c000bcea <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcea:	83 ec 0c             	sub    esp,0xc
c000bced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf1:	83 ec 08             	sub    esp,0x8
c000bcf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf8:	50                   	push   eax
c000bcf9:	e8 e6 fe ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	ba 3c fc 01 c0       	mov    edx,0xc001fc3c
c000bd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0a:	89 10                	mov    DWORD PTR [eax],edx
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd1a:	90                   	nop
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd20:	57                   	push   edi
c000bd21:	56                   	push   esi
c000bd22:	53                   	push   ebx
c000bd23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd2b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd2f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd35:	75 0c                	jne    c000bd43 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd37:	52                   	push   edx
c000bd38:	52                   	push   edx
c000bd39:	53                   	push   ebx
c000bd3a:	56                   	push   esi
c000bd3b:	e8 72 25 01 00       	call   c001e2b2 <LinkedList<Device>::addElement(Device*)>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd49:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd4c:	74 12                	je     c000bd60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd4e:	50                   	push   eax
c000bd4f:	57                   	push   edi
c000bd50:	56                   	push   esi
c000bd51:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd54:	e8 c7 ff ff ff       	call   c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd59:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	eb e9                	jmp    c000bd49 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd60:	5b                   	pop    ebx
c000bd61:	5e                   	pop    esi
c000bd62:	5f                   	pop    edi
c000bd63:	c3                   	ret    

c000bd64 <getDevicesOfType(DeviceType)>:
c000bd64:	53                   	push   ebx
c000bd65:	83 ec 14             	sub    esp,0x14
c000bd68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd6c:	53                   	push   ebx
c000bd6d:	e8 1c 26 01 00       	call   c001e38e <LinkedList<Device>::LinkedList()>
c000bd72:	83 c4 0c             	add    esp,0xc
c000bd75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd79:	53                   	push   ebx
c000bd7a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd80:	e8 9b ff ff ff       	call   c000bd20 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd85:	89 d8                	mov    eax,ebx
c000bd87:	83 c4 18             	add    esp,0x18
c000bd8a:	5b                   	pop    ebx
c000bd8b:	c2 04 00             	ret    0x4
c000bd8e:	66 90                	xchg   ax,ax

c000bd90 <HardDiskController::HardDiskController(char const*)>:
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd97:	83 ec 08             	sub    esp,0x8
c000bd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd9e:	50                   	push   eax
c000bd9f:	e8 40 fe ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000bda4:	83 c4 10             	add    esp,0x10
c000bda7:	ba 68 fc 01 c0       	mov    edx,0xc001fc68
c000bdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb0:	89 10                	mov    DWORD PTR [eax],edx
c000bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdc0:	90                   	nop
c000bdc1:	83 c4 0c             	add    esp,0xc
c000bdc4:	c3                   	ret    
c000bdc5:	90                   	nop
c000bdc6:	66 90                	xchg   ax,ax

c000bdc8 <HardDiskController::~HardDiskController()>:
c000bdc8:	83 ec 0c             	sub    esp,0xc
c000bdcb:	ba 68 fc 01 c0       	mov    edx,0xc001fc68
c000bdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd4:	89 10                	mov    DWORD PTR [eax],edx
c000bdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdda:	83 ec 0c             	sub    esp,0xc
c000bddd:	50                   	push   eax
c000bdde:	e8 6b fb ff ff       	call   c000b94e <Device::~Device()>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	90                   	nop
c000bde7:	83 c4 0c             	add    esp,0xc
c000bdea:	c3                   	ret    
c000bdeb:	90                   	nop

c000bdec <HardDiskController::~HardDiskController()>:
c000bdec:	83 ec 0c             	sub    esp,0xc
c000bdef:	83 ec 0c             	sub    esp,0xc
c000bdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf6:	e8 cd ff ff ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 ec 08             	sub    esp,0x8
c000be01:	68 58 01 00 00       	push   0x158
c000be06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be0a:	e8 09 e7 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 0c             	add    esp,0xc
c000be15:	c3                   	ret    

c000be16 <PhysicalDisk::eject()>:
c000be16:	83 c8 ff             	or     eax,0xffffffff
c000be19:	c3                   	ret    

c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be21:	83 ec 08             	sub    esp,0x8
c000be24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be28:	50                   	push   eax
c000be29:	e8 b6 fd ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000be2e:	83 c4 10             	add    esp,0x10
c000be31:	ba 94 fc 01 c0       	mov    edx,0xc001fc94
c000be36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3a:	89 10                	mov    DWORD PTR [eax],edx
c000be3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be40:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be56:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be68:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be7c:	90                   	nop
c000be7d:	83 c4 0c             	add    esp,0xc
c000be80:	c3                   	ret    
c000be81:	90                   	nop

c000be82 <PhysicalDisk::startCache()>:
c000be82:	56                   	push   esi
c000be83:	53                   	push   ebx
c000be84:	83 ec 10             	sub    esp,0x10
c000be87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be8b:	6a 44                	push   0x44
c000be8d:	e8 db b9 ff ff       	call   c000786d <malloc>
c000be92:	89 c6                	mov    esi,eax
c000be94:	58                   	pop    eax
c000be95:	5a                   	pop    edx
c000be96:	53                   	push   ebx
c000be97:	56                   	push   esi
c000be98:	e8 a7 16 00 00       	call   c000d544 <VCache::VCache(PhysicalDisk*)>
c000be9d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bea3:	83 c4 14             	add    esp,0x14
c000bea6:	5b                   	pop    ebx
c000bea7:	5e                   	pop    esi
c000bea8:	c3                   	ret    
c000bea9:	90                   	nop

c000beaa <PhysicalDisk::~PhysicalDisk()>:
c000beaa:	83 ec 0c             	sub    esp,0xc
c000bead:	ba 94 fc 01 c0       	mov    edx,0xc001fc94
c000beb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb6:	89 10                	mov    DWORD PTR [eax],edx
c000beb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bebc:	83 ec 0c             	sub    esp,0xc
c000bebf:	50                   	push   eax
c000bec0:	e8 89 fa ff ff       	call   c000b94e <Device::~Device()>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	90                   	nop
c000bec9:	83 c4 0c             	add    esp,0xc
c000becc:	c3                   	ret    
c000becd:	90                   	nop

c000bece <PhysicalDisk::~PhysicalDisk()>:
c000bece:	83 ec 0c             	sub    esp,0xc
c000bed1:	83 ec 0c             	sub    esp,0xc
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	e8 cd ff ff ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	83 ec 08             	sub    esp,0x8
c000bee3:	68 6c 01 00 00       	push   0x16c
c000bee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beec:	e8 27 e6 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000bef1:	83 c4 10             	add    esp,0x10
c000bef4:	83 c4 0c             	add    esp,0xc
c000bef7:	c3                   	ret    

c000bef8 <int_handler>:
c000bef8:	55                   	push   ebp
c000bef9:	57                   	push   edi
c000befa:	56                   	push   esi
c000befb:	53                   	push   ebx
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf03:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf0a:	74 0b                	je     c000bf17 <int_handler+0x1f>
c000bf0c:	fa                   	cli    
c000bf0d:	f4                   	hlt    
c000bf0e:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf15:	75 f5                	jne    c000bf0c <int_handler+0x14>
c000bf17:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf1a:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf1d:	83 f8 17             	cmp    eax,0x17
c000bf20:	76 3e                	jbe    c000bf60 <int_handler+0x68>
c000bf22:	c1 e6 04             	shl    esi,0x4
c000bf25:	31 db                	xor    ebx,ebx
c000bf27:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf2d:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf33:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf37:	85 c0                	test   eax,eax
c000bf39:	74 13                	je     c000bf4e <int_handler+0x56>
c000bf3b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf3e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf42:	74 2a                	je     c000bf6e <int_handler+0x76>
c000bf44:	83 ec 08             	sub    esp,0x8
c000bf47:	52                   	push   edx
c000bf48:	57                   	push   edi
c000bf49:	ff d0                	call   eax
c000bf4b:	83 c4 10             	add    esp,0x10
c000bf4e:	43                   	inc    ebx
c000bf4f:	83 fb 04             	cmp    ebx,0x4
c000bf52:	75 df                	jne    c000bf33 <int_handler+0x3b>
c000bf54:	83 c4 0c             	add    esp,0xc
c000bf57:	31 c0                	xor    eax,eax
c000bf59:	5b                   	pop    ebx
c000bf5a:	31 d2                	xor    edx,edx
c000bf5c:	5e                   	pop    esi
c000bf5d:	5f                   	pop    edi
c000bf5e:	5d                   	pop    ebp
c000bf5f:	c3                   	ret    
c000bf60:	83 ec 0c             	sub    esp,0xc
c000bf63:	50                   	push   eax
c000bf64:	e8 c1 ac 00 00       	call   c0016c2a <HalEndOfInterrupt(int)>
c000bf69:	83 c4 10             	add    esp,0x10
c000bf6c:	eb b4                	jmp    c000bf22 <int_handler+0x2a>
c000bf6e:	83 ec 08             	sub    esp,0x8
c000bf71:	52                   	push   edx
c000bf72:	57                   	push   edi
c000bf73:	ff d0                	call   eax
c000bf75:	83 c4 10             	add    esp,0x10
c000bf78:	83 c4 0c             	add    esp,0xc
c000bf7b:	5b                   	pop    ebx
c000bf7c:	5e                   	pop    esi
c000bf7d:	5f                   	pop    edi
c000bf7e:	5d                   	pop    ebp
c000bf7f:	c3                   	ret    

c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf80:	56                   	push   esi
c000bf81:	31 c0                	xor    eax,eax
c000bf83:	53                   	push   ebx
c000bf84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf8c:	89 ca                	mov    edx,ecx
c000bf8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf92:	c1 e2 04             	shl    edx,0x4
c000bf95:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf9d:	74 15                	je     c000bfb4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf9f:	40                   	inc    eax
c000bfa0:	83 f8 04             	cmp    eax,0x4
c000bfa3:	75 f0                	jne    c000bf95 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfa5:	c7 44 24 0c c4 fc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fcc4
c000bfad:	5b                   	pop    ebx
c000bfae:	5e                   	pop    esi
c000bfaf:	e9 1b 44 00 00       	jmp    c00103cf <KePanic(char const*)>
c000bfb4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfb7:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfbe:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfc5:	5b                   	pop    ebx
c000bfc6:	5e                   	pop    esi
c000bfc7:	c3                   	ret    

c000bfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfc8:	57                   	push   edi
c000bfc9:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfcf:	56                   	push   esi
c000bfd0:	53                   	push   ebx
c000bfd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfe0:	74 5b                	je     c000c03d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfe2:	89 c7                	mov    edi,eax
c000bfe4:	84 c0                	test   al,al
c000bfe6:	74 24                	je     c000c00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfe8:	83 fe 0f             	cmp    esi,0xf
c000bfeb:	0f 8f d9 00 00 00    	jg     c000c0ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bff1:	8a 86 00 17 02 c0    	mov    al,BYTE PTR [esi-0x3ffde900]
c000bff7:	25 ff 00 00 00       	and    eax,0xff
c000bffc:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000c004:	89 c6                	mov    esi,eax
c000c006:	66 d1 ef             	shr    di,1
c000c009:	83 e7 01             	and    edi,0x1
c000c00c:	83 ec 08             	sub    esp,0x8
c000c00f:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c014:	31 db                	xor    ebx,ebx
c000c016:	50                   	push   eax
c000c017:	68 d1 fc 01 c0       	push   0xc001fcd1
c000c01c:	e8 ed e5 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c029:	85 c0                	test   eax,eax
c000c02b:	7f 51                	jg     c000c07e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c02d:	83 ec 0c             	sub    esp,0xc
c000c030:	68 e8 fc 01 c0       	push   0xc001fce8
c000c035:	e8 95 43 00 00       	call   c00103cf <KePanic(char const*)>
c000c03a:	83 c4 10             	add    esp,0x10
c000c03d:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c040:	31 d2                	xor    edx,edx
c000c042:	89 c8                	mov    eax,ecx
c000c044:	c1 e0 04             	shl    eax,0x4
c000c047:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c04e:	85 db                	test   ebx,ebx
c000c050:	0f 84 8b 00 00 00    	je     c000c0e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c056:	42                   	inc    edx
c000c057:	83 fa 04             	cmp    edx,0x4
c000c05a:	75 eb                	jne    c000c047 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	68 3c fd 01 c0       	push   0xc001fd3c
c000c064:	e8 66 43 00 00       	call   c00103cf <KePanic(char const*)>
c000c069:	83 c4 10             	add    esp,0x10
c000c06c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c071:	5b                   	pop    ebx
c000c072:	5e                   	pop    esi
c000c073:	5f                   	pop    edi
c000c074:	c3                   	ret    
c000c075:	43                   	inc    ebx
c000c076:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c07c:	7e af                	jle    c000c02d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c07e:	83 ec 08             	sub    esp,0x8
c000c081:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c088:	56                   	push   esi
c000c089:	50                   	push   eax
c000c08a:	e8 45 11 01 00       	call   c001d1d4 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c08f:	83 c4 10             	add    esp,0x10
c000c092:	84 c0                	test   al,al
c000c094:	74 df                	je     c000c075 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c096:	81 e7 ff 00 00 00    	and    edi,0xff
c000c09c:	50                   	push   eax
c000c09d:	8d 46 20             	lea    eax,[esi+0x20]
c000c0a0:	57                   	push   edi
c000c0a1:	25 ff 00 00 00       	and    eax,0xff
c000c0a6:	6a 00                	push   0x0
c000c0a8:	50                   	push   eax
c000c0a9:	89 f0                	mov    eax,esi
c000c0ab:	6a 00                	push   0x0
c000c0ad:	25 ff 00 00 00       	and    eax,0xff
c000c0b2:	6a 00                	push   0x0
c000c0b4:	50                   	push   eax
c000c0b5:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0bc:	50                   	push   eax
c000c0bd:	e8 8c 12 01 00       	call   c001d34e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0c2:	83 c4 20             	add    esp,0x20
c000c0c5:	e9 73 ff ff ff       	jmp    c000c03d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0ca:	83 ec 0c             	sub    esp,0xc
c000c0cd:	31 ff                	xor    edi,edi
c000c0cf:	68 04 fd 01 c0       	push   0xc001fd04
c000c0d4:	e8 f6 42 00 00       	call   c00103cf <KePanic(char const*)>
c000c0d9:	83 c4 10             	add    esp,0x10
c000c0dc:	e9 2b ff ff ff       	jmp    c000c00c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0e1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0e8:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0ef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0f3:	5b                   	pop    ebx
c000c0f4:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0fb:	89 f0                	mov    eax,esi
c000c0fd:	5e                   	pop    esi
c000c0fe:	5f                   	pop    edi
c000c0ff:	c3                   	ret    

c000c100 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c104:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c108:	c1 e0 04             	shl    eax,0x4
c000c10b:	8d 50 10             	lea    edx,[eax+0x10]
c000c10e:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c114:	74 08                	je     c000c11e <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c116:	83 c0 04             	add    eax,0x4
c000c119:	39 d0                	cmp    eax,edx
c000c11b:	75 f1                	jne    c000c10e <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c11d:	c3                   	ret    
c000c11e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c128:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c132:	eb e2                	jmp    c000c116 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c134 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c134:	53                   	push   ebx
c000c135:	83 ec 08             	sub    esp,0x8
c000c138:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c13c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c141:	74 0e                	je     c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c143:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c148:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c14f:	75 37                	jne    c000c188 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c155:	83 c0 20             	add    eax,0x20
c000c158:	c1 e0 04             	shl    eax,0x4
c000c15b:	8d 50 10             	lea    edx,[eax+0x10]
c000c15e:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c164:	74 0c                	je     c000c172 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c166:	83 c0 04             	add    eax,0x4
c000c169:	39 d0                	cmp    eax,edx
c000c16b:	75 f1                	jne    c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c16d:	83 c4 08             	add    esp,0x8
c000c170:	5b                   	pop    ebx
c000c171:	c3                   	ret    
c000c172:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c17c:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c186:	eb de                	jmp    c000c166 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c188:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c18d:	7f 12                	jg     c000c1a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c18f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c193:	31 c0                	xor    eax,eax
c000c195:	8a 81 00 17 02 c0    	mov    al,BYTE PTR [ecx-0x3ffde900]
c000c19b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c19f:	eb b0                	jmp    c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1a1:	83 ec 0c             	sub    esp,0xc
c000c1a4:	68 f5 fc 01 c0       	push   0xc001fcf5
c000c1a9:	e8 21 42 00 00       	call   c00103cf <KePanic(char const*)>
c000c1ae:	83 c4 10             	add    esp,0x10
c000c1b1:	eb 9e                	jmp    c000c151 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1b3 <setupINTS()>:
c000c1b3:	31 c0                	xor    eax,eax
c000c1b5:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1bf:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1c9:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1d3:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1dd:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1e7:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1f1:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1fb:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c205:	83 c0 10             	add    eax,0x10
c000c208:	3d 00 10 00 00       	cmp    eax,0x1000
c000c20d:	75 a6                	jne    c000c1b5 <setupINTS()+0x2>
c000c20f:	c3                   	ret    

c000c210 <convertLegacyIRQNumber(int)>:
c000c210:	83 ec 0c             	sub    esp,0xc
c000c213:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c224:	74 0f                	je     c000c235 <convertLegacyIRQNumber(int)+0x25>
c000c226:	83 f8 0f             	cmp    eax,0xf
c000c229:	7f 0e                	jg     c000c239 <convertLegacyIRQNumber(int)+0x29>
c000c22b:	31 c9                	xor    ecx,ecx
c000c22d:	8a 88 00 17 02 c0    	mov    cl,BYTE PTR [eax-0x3ffde900]
c000c233:	89 c8                	mov    eax,ecx
c000c235:	83 c4 0c             	add    esp,0xc
c000c238:	c3                   	ret    
c000c239:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c23d:	83 ec 0c             	sub    esp,0xc
c000c240:	68 04 fd 01 c0       	push   0xc001fd04
c000c245:	e8 85 41 00 00       	call   c00103cf <KePanic(char const*)>
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c251:	83 c4 0c             	add    esp,0xc
c000c254:	c3                   	ret    
c000c255:	90                   	nop

c000c256 <startGUI(void*)>:
c000c256:	55                   	push   ebp
c000c257:	89 e5                	mov    ebp,esp
c000c259:	53                   	push   ebx
c000c25a:	83 ec 04             	sub    esp,0x4
c000c25d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c262:	48                   	dec    eax
c000c263:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c268:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c26d:	85 c0                	test   eax,eax
c000c26f:	75 01                	jne    c000c272 <startGUI(void*)+0x1c>
c000c271:	fb                   	sti    
c000c272:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c278:	83 ec 08             	sub    esp,0x8
c000c27b:	6a 01                	push   0x1
c000c27d:	68 61 fd 01 c0       	push   0xc001fd61
c000c282:	e8 25 7e 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	83 ec 08             	sub    esp,0x8
c000c28d:	53                   	push   ebx
c000c28e:	50                   	push   eax
c000c28f:	e8 49 80 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c29d:	83 ec 08             	sub    esp,0x8
c000c2a0:	6a 01                	push   0x1
c000c2a2:	68 7b fd 01 c0       	push   0xc001fd7b
c000c2a7:	e8 00 7e 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000c2ac:	83 c4 10             	add    esp,0x10
c000c2af:	83 ec 08             	sub    esp,0x8
c000c2b2:	53                   	push   ebx
c000c2b3:	50                   	push   eax
c000c2b4:	e8 24 80 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	90                   	nop
c000c2bd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2c0:	c9                   	leave  
c000c2c1:	c3                   	ret    

c000c2c2 <startGUIVESA(void*)>:
c000c2c2:	55                   	push   ebp
c000c2c3:	89 e5                	mov    ebp,esp
c000c2c5:	53                   	push   ebx
c000c2c6:	83 ec 04             	sub    esp,0x4
c000c2c9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2ce:	48                   	dec    eax
c000c2cf:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2d4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2d9:	85 c0                	test   eax,eax
c000c2db:	75 01                	jne    c000c2de <startGUIVESA(void*)+0x1c>
c000c2dd:	fb                   	sti    
c000c2de:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2e4:	83 ec 08             	sub    esp,0x8
c000c2e7:	6a 01                	push   0x1
c000c2e9:	68 99 fd 01 c0       	push   0xc001fd99
c000c2ee:	e8 b9 7d 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	83 ec 08             	sub    esp,0x8
c000c2f9:	53                   	push   ebx
c000c2fa:	50                   	push   eax
c000c2fb:	e8 dd 7f 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000c300:	83 c4 10             	add    esp,0x10
c000c303:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c309:	83 ec 08             	sub    esp,0x8
c000c30c:	6a 01                	push   0x1
c000c30e:	68 7b fd 01 c0       	push   0xc001fd7b
c000c313:	e8 94 7d 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000c318:	83 c4 10             	add    esp,0x10
c000c31b:	83 ec 08             	sub    esp,0x8
c000c31e:	53                   	push   ebx
c000c31f:	50                   	push   eax
c000c320:	e8 b8 7f 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000c325:	83 c4 10             	add    esp,0x10
c000c328:	90                   	nop
c000c329:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c32c:	c9                   	leave  
c000c32d:	c3                   	ret    

c000c32e <sendKeyToTerminal(unsigned char)>:
c000c32e:	55                   	push   ebp
c000c32f:	89 e5                	mov    ebp,esp
c000c331:	83 ec 28             	sub    esp,0x28
c000c334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c337:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c33a:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c340:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c343:	25 ff 00 00 00       	and    eax,0xff
c000c348:	83 ec 08             	sub    esp,0x8
c000c34b:	50                   	push   eax
c000c34c:	52                   	push   edx
c000c34d:	e8 a6 c7 ff ff       	call   c0008af8 <VgaText::receiveKey(unsigned char)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c359:	74 10                	je     c000c36b <sendKeyToTerminal(unsigned char)+0x3d>
c000c35b:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c35f:	74 0a                	je     c000c36b <sendKeyToTerminal(unsigned char)+0x3d>
c000c361:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c365:	0f 85 8f 00 00 00    	jne    c000c3fa <sendKeyToTerminal(unsigned char)+0xcc>
c000c36b:	fa                   	cli    
c000c36c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c371:	40                   	inc    eax
c000c372:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c377:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c37c:	40                   	inc    eax
c000c37d:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c382:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c387:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c38a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c394:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c398:	74 1f                	je     c000c3b9 <sendKeyToTerminal(unsigned char)+0x8b>
c000c39a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c39d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c3a0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c3a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3a6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3a9:	83 ec 0c             	sub    esp,0xc
c000c3ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3af:	e8 10 8c 00 00       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	eb db                	jmp    c000c394 <sendKeyToTerminal(unsigned char)+0x66>
c000c3b9:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3be:	48                   	dec    eax
c000c3bf:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3c4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3c9:	85 c0                	test   eax,eax
c000c3cb:	75 18                	jne    c000c3e5 <sendKeyToTerminal(unsigned char)+0xb7>
c000c3cd:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	74 0f                	je     c000c3e5 <sendKeyToTerminal(unsigned char)+0xb7>
c000c3d6:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3e0:	e8 1b 87 00 00       	call   c0014b00 <schedule()>
c000c3e5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3ea:	48                   	dec    eax
c000c3eb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3f0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3f5:	85 c0                	test   eax,eax
c000c3f7:	75 01                	jne    c000c3fa <sendKeyToTerminal(unsigned char)+0xcc>
c000c3f9:	fb                   	sti    
c000c3fa:	90                   	nop
c000c3fb:	c9                   	leave  
c000c3fc:	c3                   	ret    

c000c3fd <sendKeyboardToken(KeyboardToken)>:
c000c3fd:	55                   	push   ebp
c000c3fe:	89 e5                	mov    ebp,esp
c000c400:	83 ec 18             	sub    esp,0x18
c000c403:	e8 17 40 00 00       	call   c001041f <Krnl::userIOReceived()>
c000c408:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40e:	25 ff ff 00 00       	and    eax,0xffff
c000c413:	83 f2 01             	xor    edx,0x1
c000c416:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c41c:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c421:	85 c0                	test   eax,eax
c000c423:	74 24                	je     c000c449 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c425:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c42b:	83 ec 04             	sub    esp,0x4
c000c42e:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c433:	83 ec 08             	sub    esp,0x8
c000c436:	89 e2                	mov    edx,esp
c000c438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43b:	89 02                	mov    DWORD PTR [edx],eax
c000c43d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c440:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c444:	ff d1                	call   ecx
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c44d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c450:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c455:	38 c2                	cmp    dl,al
c000c457:	74 1e                	je     c000c477 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c459:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c45c:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c461:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c466:	25 ff 00 00 00       	and    eax,0xff
c000c46b:	83 ec 0c             	sub    esp,0xc
c000c46e:	50                   	push   eax
c000c46f:	e8 d8 bd ff ff       	call   c000824c <setTerminalScrollLock(bool)>
c000c474:	83 c4 10             	add    esp,0x10
c000c477:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c47a:	84 c0                	test   al,al
c000c47c:	0f 84 ae 00 00 00    	je     c000c530 <sendKeyboardToken(KeyboardToken)+0x133>
c000c482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c485:	66 3d 18 03          	cmp    ax,0x318
c000c489:	75 06                	jne    c000c491 <sendKeyboardToken(KeyboardToken)+0x94>
c000c48b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c494:	66 3d 19 03          	cmp    ax,0x319
c000c498:	75 06                	jne    c000c4a0 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c49a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a3:	66 3d 1a 03          	cmp    ax,0x31a
c000c4a7:	75 06                	jne    c000c4af <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4a9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b2:	66 3d 1b 03          	cmp    ax,0x31b
c000c4b6:	75 06                	jne    c000c4be <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4b8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c1:	66 3d 1c 03          	cmp    ax,0x31c
c000c4c5:	75 06                	jne    c000c4cd <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4c7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d0:	66 3d 1d 03          	cmp    ax,0x31d
c000c4d4:	75 06                	jne    c000c4dc <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4d6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4df:	66 3d 1e 03          	cmp    ax,0x31e
c000c4e3:	75 06                	jne    c000c4eb <sendKeyboardToken(KeyboardToken)+0xee>
c000c4e5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ee:	66 3d 1f 03          	cmp    ax,0x31f
c000c4f2:	75 06                	jne    c000c4fa <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4f4:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fd:	66 3d 20 03          	cmp    ax,0x320
c000c501:	75 06                	jne    c000c509 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c503:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50c:	66 3d 21 03          	cmp    ax,0x321
c000c510:	75 06                	jne    c000c518 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c512:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51b:	66 3d 22 03          	cmp    ax,0x322
c000c51f:	0f 85 c9 00 00 00    	jne    c000c5ee <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c525:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c52b:	e9 be 00 00 00       	jmp    c000c5ee <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c533:	66 3d 18 03          	cmp    ax,0x318
c000c537:	75 0a                	jne    c000c543 <sendKeyboardToken(KeyboardToken)+0x146>
c000c539:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c53f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c546:	66 3d 19 03          	cmp    ax,0x319
c000c54a:	75 0a                	jne    c000c556 <sendKeyboardToken(KeyboardToken)+0x159>
c000c54c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c552:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c559:	66 3d 1a 03          	cmp    ax,0x31a
c000c55d:	75 0a                	jne    c000c569 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c55f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c565:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56c:	66 3d 1b 03          	cmp    ax,0x31b
c000c570:	75 0a                	jne    c000c57c <sendKeyboardToken(KeyboardToken)+0x17f>
c000c572:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c578:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c57c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57f:	66 3d 1c 03          	cmp    ax,0x31c
c000c583:	75 0a                	jne    c000c58f <sendKeyboardToken(KeyboardToken)+0x192>
c000c585:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c58b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c58f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c592:	66 3d 1d 03          	cmp    ax,0x31d
c000c596:	75 0a                	jne    c000c5a2 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c598:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c59e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a5:	66 3d 1e 03          	cmp    ax,0x31e
c000c5a9:	75 0a                	jne    c000c5b5 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5ab:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b8:	66 3d 1f 03          	cmp    ax,0x31f
c000c5bc:	75 0a                	jne    c000c5c8 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5be:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5cb:	66 3d 20 03          	cmp    ax,0x320
c000c5cf:	75 0a                	jne    c000c5db <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5d1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5de:	66 3d 21 03          	cmp    ax,0x321
c000c5e2:	75 0a                	jne    c000c5ee <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5e4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f1:	66 3d 00 02          	cmp    ax,0x200
c000c5f5:	75 2c                	jne    c000c623 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5f7:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5fc:	83 f0 01             	xor    eax,0x1
c000c5ff:	84 c0                	test   al,al
c000c601:	74 20                	je     c000c623 <sendKeyboardToken(KeyboardToken)+0x226>
c000c603:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c608:	6a 01                	push   0x1
c000c60a:	6a 00                	push   0x0
c000c60c:	68 56 c2 00 c0       	push   0xc000c256
c000c611:	50                   	push   eax
c000c612:	e8 a1 82 00 00       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c000c617:	83 c4 10             	add    esp,0x10
c000c61a:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c621:	eb 33                	jmp    c000c656 <sendKeyboardToken(KeyboardToken)+0x259>
c000c623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c626:	66 3d 01 02          	cmp    ax,0x201
c000c62a:	75 2a                	jne    c000c656 <sendKeyboardToken(KeyboardToken)+0x259>
c000c62c:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c631:	83 f0 01             	xor    eax,0x1
c000c634:	84 c0                	test   al,al
c000c636:	74 1e                	je     c000c656 <sendKeyboardToken(KeyboardToken)+0x259>
c000c638:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c63d:	6a 01                	push   0x1
c000c63f:	6a 00                	push   0x0
c000c641:	68 c2 c2 00 c0       	push   0xc000c2c2
c000c646:	50                   	push   eax
c000c647:	e8 6c 82 00 00       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c659:	66 3d 25 03          	cmp    ax,0x325
c000c65d:	75 06                	jne    c000c665 <sendKeyboardToken(KeyboardToken)+0x268>
c000c65f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c668:	66 3d 24 03          	cmp    ax,0x324
c000c66c:	75 06                	jne    c000c674 <sendKeyboardToken(KeyboardToken)+0x277>
c000c66e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c677:	66 3d 23 03          	cmp    ax,0x323
c000c67b:	75 06                	jne    c000c683 <sendKeyboardToken(KeyboardToken)+0x286>
c000c67d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c686:	66 3d 26 03          	cmp    ax,0x326
c000c68a:	75 06                	jne    c000c692 <sendKeyboardToken(KeyboardToken)+0x295>
c000c68c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c695:	66 3d 27 03          	cmp    ax,0x327
c000c699:	75 06                	jne    c000c6a1 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c69b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a4:	66 3d 22 03          	cmp    ax,0x322
c000c6a8:	75 06                	jne    c000c6b0 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6aa:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6b0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6b4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b7:	83 f0 01             	xor    eax,0x1
c000c6ba:	84 c0                	test   al,al
c000c6bc:	74 7b                	je     c000c739 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6be:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6c3:	84 c0                	test   al,al
c000c6c5:	74 43                	je     c000c70a <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6c7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6cb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6cf:	74 2d                	je     c000c6fe <sendKeyboardToken(KeyboardToken)+0x301>
c000c6d1:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6d7:	89 d0                	mov    eax,edx
c000c6d9:	c1 e0 02             	shl    eax,0x2
c000c6dc:	01 d0                	add    eax,edx
c000c6de:	01 c0                	add    eax,eax
c000c6e0:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e8:	25 ff ff 00 00       	and    eax,0xffff
c000c6ed:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6f0:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6f5:	01 d0                	add    eax,edx
c000c6f7:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6fc:	eb 71                	jmp    c000c76f <sendKeyboardToken(KeyboardToken)+0x372>
c000c6fe:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c708:	eb 65                	jmp    c000c76f <sendKeyboardToken(KeyboardToken)+0x372>
c000c70a:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c70f:	85 c0                	test   eax,eax
c000c711:	74 1a                	je     c000c72d <sendKeyboardToken(KeyboardToken)+0x330>
c000c713:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c718:	25 ff 00 00 00       	and    eax,0xff
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	50                   	push   eax
c000c721:	e8 08 fc ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c726:	83 c4 10             	add    esp,0x10
c000c729:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c72d:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c737:	eb 36                	jmp    c000c76f <sendKeyboardToken(KeyboardToken)+0x372>
c000c739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c73c:	66 3d 01 01          	cmp    ax,0x101
c000c740:	75 2d                	jne    c000c76f <sendKeyboardToken(KeyboardToken)+0x372>
c000c742:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c747:	85 c0                	test   eax,eax
c000c749:	74 1a                	je     c000c765 <sendKeyboardToken(KeyboardToken)+0x368>
c000c74b:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c750:	25 ff 00 00 00       	and    eax,0xff
c000c755:	83 ec 0c             	sub    esp,0xc
c000c758:	50                   	push   eax
c000c759:	e8 d0 fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c765:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c76f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c772:	83 f0 01             	xor    eax,0x1
c000c775:	84 c0                	test   al,al
c000c777:	74 4e                	je     c000c7c7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c779:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c77c:	83 f0 01             	xor    eax,0x1
c000c77f:	84 c0                	test   al,al
c000c781:	74 44                	je     c000c7c7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c783:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c788:	83 f0 01             	xor    eax,0x1
c000c78b:	84 c0                	test   al,al
c000c78d:	74 38                	je     c000c7c7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c78f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c792:	66 83 f8 1f          	cmp    ax,0x1f
c000c796:	76 09                	jbe    c000c7a1 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c798:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79b:	66 83 f8 7e          	cmp    ax,0x7e
c000c79f:	76 12                	jbe    c000c7b3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a4:	66 83 f8 0a          	cmp    ax,0xa
c000c7a8:	74 09                	je     c000c7b3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ad:	66 83 f8 08          	cmp    ax,0x8
c000c7b1:	75 14                	jne    c000c7c7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b6:	25 ff 00 00 00       	and    eax,0xff
c000c7bb:	83 ec 0c             	sub    esp,0xc
c000c7be:	50                   	push   eax
c000c7bf:	e8 6a fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c7c4:	83 c4 10             	add    esp,0x10
c000c7c7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7ca:	83 f0 01             	xor    eax,0x1
c000c7cd:	84 c0                	test   al,al
c000c7cf:	74 51                	je     c000c822 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7d4:	83 f0 01             	xor    eax,0x1
c000c7d7:	84 c0                	test   al,al
c000c7d9:	74 47                	je     c000c822 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7db:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7e0:	84 c0                	test   al,al
c000c7e2:	74 3e                	je     c000c822 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e7:	66 83 f8 3f          	cmp    ax,0x3f
c000c7eb:	76 35                	jbe    c000c822 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f0:	66 83 f8 7f          	cmp    ax,0x7f
c000c7f4:	77 2c                	ja     c000c822 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f9:	88 c2                	mov    dl,al
c000c7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7fe:	66 83 f8 5f          	cmp    ax,0x5f
c000c802:	76 04                	jbe    c000c808 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c804:	b0 20                	mov    al,0x20
c000c806:	eb 02                	jmp    c000c80a <sendKeyboardToken(KeyboardToken)+0x40d>
c000c808:	b0 00                	mov    al,0x0
c000c80a:	29 c2                	sub    edx,eax
c000c80c:	88 d0                	mov    al,dl
c000c80e:	83 e8 40             	sub    eax,0x40
c000c811:	25 ff 00 00 00       	and    eax,0xff
c000c816:	83 ec 0c             	sub    esp,0xc
c000c819:	50                   	push   eax
c000c81a:	e8 0f fb ff ff       	call   c000c32e <sendKeyToTerminal(unsigned char)>
c000c81f:	83 c4 10             	add    esp,0x10
c000c822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c825:	66 3d 00 03          	cmp    ax,0x300
c000c829:	75 0f                	jne    c000c83a <sendKeyboardToken(KeyboardToken)+0x43d>
c000c82b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c82e:	83 f0 01             	xor    eax,0x1
c000c831:	84 c0                	test   al,al
c000c833:	74 05                	je     c000c83a <sendKeyboardToken(KeyboardToken)+0x43d>
c000c835:	e8 13 ba ff ff       	call   c000824d <doTerminalCycle()>
c000c83a:	90                   	nop
c000c83b:	c9                   	leave  
c000c83c:	c3                   	ret    

c000c83d <clearInternalKeybuffer(VgaText*)>:
c000c83d:	55                   	push   ebp
c000c83e:	89 e5                	mov    ebp,esp
c000c840:	83 ec 08             	sub    esp,0x8
c000c843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c846:	05 02 01 00 00       	add    eax,0x102
c000c84b:	83 ec 0c             	sub    esp,0xc
c000c84e:	50                   	push   eax
c000c84f:	e8 dc 3c ff ff       	call   c0000530 <strlen>
c000c854:	83 c4 10             	add    esp,0x10
c000c857:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c85a:	81 c2 02 01 00 00    	add    edx,0x102
c000c860:	83 ec 04             	sub    esp,0x4
c000c863:	50                   	push   eax
c000c864:	6a 00                	push   0x0
c000c866:	52                   	push   edx
c000c867:	e8 54 3c ff ff       	call   c00004c0 <memset>
c000c86c:	83 c4 10             	add    esp,0x10
c000c86f:	90                   	nop
c000c870:	c9                   	leave  
c000c871:	c3                   	ret    

c000c872 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c872:	55                   	push   ebp
c000c873:	89 e5                	mov    ebp,esp
c000c875:	83 ec 18             	sub    esp,0x18
c000c878:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c87d:	85 c0                	test   eax,eax
c000c87f:	74 2a                	je     c000c8ab <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c881:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c887:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c88d:	83 ec 04             	sub    esp,0x4
c000c890:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c895:	83 ec 08             	sub    esp,0x8
c000c898:	89 e2                	mov    edx,esp
c000c89a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c89d:	89 02                	mov    DWORD PTR [edx],eax
c000c89f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c8a2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c8a6:	ff d1                	call   ecx
c000c8a8:	83 c4 10             	add    esp,0x10
c000c8ab:	fb                   	sti    
c000c8ac:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8b3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8b7:	0f 84 f5 00 00 00    	je     c000c9b2 <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c8bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8c6:	84 c0                	test   al,al
c000c8c8:	75 28                	jne    c000c8f2 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8ca:	fa                   	cli    
c000c8cb:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d0:	40                   	inc    eax
c000c8d1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8d6:	e8 25 82 00 00       	call   c0014b00 <schedule()>
c000c8db:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8e0:	48                   	dec    eax
c000c8e1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8e6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8eb:	85 c0                	test   eax,eax
c000c8ed:	75 ce                	jne    c000c8bd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8ef:	fb                   	sti    
c000c8f0:	eb cb                	jmp    c000c8bd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8f5:	8d 50 01             	lea    edx,[eax+0x1]
c000c8f8:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8fe:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c904:	88 10                	mov    BYTE PTR [eax],dl
c000c906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c909:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c90f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c912:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c916:	75 1e                	jne    c000c936 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c918:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c91d:	8b 00                	mov    eax,DWORD PTR [eax]
c000c91f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c922:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c928:	83 ec 08             	sub    esp,0x8
c000c92b:	6a 02                	push   0x2
c000c92d:	50                   	push   eax
c000c92e:	e8 0c 3f 00 00       	call   c001083f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c933:	83 c4 10             	add    esp,0x10
c000c936:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c93a:	75 1e                	jne    c000c95a <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c93c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c941:	8b 00                	mov    eax,DWORD PTR [eax]
c000c943:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c946:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c94c:	83 ec 08             	sub    esp,0x8
c000c94f:	6a 09                	push   0x9
c000c951:	50                   	push   eax
c000c952:	e8 e8 3e 00 00       	call   c001083f <KeRaiseSignal(SigHandlerBlock*, int)>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c95d:	05 02 01 00 00       	add    eax,0x102
c000c962:	83 ec 0c             	sub    esp,0xc
c000c965:	50                   	push   eax
c000c966:	e8 c5 3b ff ff       	call   c0000530 <strlen>
c000c96b:	83 c4 10             	add    esp,0x10
c000c96e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c971:	81 c2 02 01 00 00    	add    edx,0x102
c000c977:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c97a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c97d:	81 c2 02 01 00 00    	add    edx,0x102
c000c983:	83 ec 04             	sub    esp,0x4
c000c986:	50                   	push   eax
c000c987:	51                   	push   ecx
c000c988:	52                   	push   edx
c000c989:	e8 42 3a ff ff       	call   c00003d0 <memmove>
c000c98e:	83 c4 10             	add    esp,0x10
c000c991:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c994:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c997:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c99b:	74 10                	je     c000c9ad <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c99d:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c9a1:	74 0a                	je     c000c9ad <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c9a3:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c9a7:	0f 85 06 ff ff ff    	jne    c000c8b3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c9ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9b0:	eb 03                	jmp    c000c9b5 <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000c9b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9b5:	c9                   	leave  
c000c9b6:	c3                   	ret    
c000c9b7:	90                   	nop

c000c9b8 <Keyboard::Keyboard(char const*)>:
c000c9b8:	83 ec 0c             	sub    esp,0xc
c000c9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9bf:	83 ec 08             	sub    esp,0x8
c000c9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c6:	50                   	push   eax
c000c9c7:	e8 18 f2 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000c9cc:	83 c4 10             	add    esp,0x10
c000c9cf:	ba bc fd 01 c0       	mov    edx,0xc001fdbc
c000c9d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d8:	89 10                	mov    DWORD PTR [eax],edx
c000c9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9de:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9e8:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9ef:	90                   	nop
c000c9f0:	83 c4 0c             	add    esp,0xc
c000c9f3:	c3                   	ret    

c000c9f4 <Keyboard::~Keyboard()>:
c000c9f4:	83 ec 0c             	sub    esp,0xc
c000c9f7:	ba bc fd 01 c0       	mov    edx,0xc001fdbc
c000c9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca00:	89 10                	mov    DWORD PTR [eax],edx
c000ca02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca06:	83 ec 0c             	sub    esp,0xc
c000ca09:	50                   	push   eax
c000ca0a:	e8 3f ef ff ff       	call   c000b94e <Device::~Device()>
c000ca0f:	83 c4 10             	add    esp,0x10
c000ca12:	90                   	nop
c000ca13:	83 c4 0c             	add    esp,0xc
c000ca16:	c3                   	ret    
c000ca17:	90                   	nop

c000ca18 <Keyboard::~Keyboard()>:
c000ca18:	83 ec 0c             	sub    esp,0xc
c000ca1b:	83 ec 0c             	sub    esp,0xc
c000ca1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca22:	e8 cd ff ff ff       	call   c000c9f4 <Keyboard::~Keyboard()>
c000ca27:	83 c4 10             	add    esp,0x10
c000ca2a:	83 ec 08             	sub    esp,0x8
c000ca2d:	68 5c 01 00 00       	push   0x15c
c000ca32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca36:	e8 dd da ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ca3b:	83 c4 10             	add    esp,0x10
c000ca3e:	83 c4 0c             	add    esp,0xc
c000ca41:	c3                   	ret    

c000ca42 <LogicalDisk::close(int, int, void*)>:
c000ca42:	83 c8 ff             	or     eax,0xffffffff
c000ca45:	c3                   	ret    

c000ca46 <LogicalDisk::~LogicalDisk()>:
c000ca46:	83 ec 0c             	sub    esp,0xc
c000ca49:	ba 34 fe 01 c0       	mov    edx,0xc001fe34
c000ca4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca52:	89 10                	mov    DWORD PTR [eax],edx
c000ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca58:	83 ec 0c             	sub    esp,0xc
c000ca5b:	50                   	push   eax
c000ca5c:	e8 ed ee ff ff       	call   c000b94e <Device::~Device()>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	90                   	nop
c000ca65:	83 c4 0c             	add    esp,0xc
c000ca68:	c3                   	ret    
c000ca69:	90                   	nop

c000ca6a <LogicalDisk::~LogicalDisk()>:
c000ca6a:	83 ec 0c             	sub    esp,0xc
c000ca6d:	83 ec 0c             	sub    esp,0xc
c000ca70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca74:	e8 cd ff ff ff       	call   c000ca46 <LogicalDisk::~LogicalDisk()>
c000ca79:	83 c4 10             	add    esp,0x10
c000ca7c:	83 ec 08             	sub    esp,0x8
c000ca7f:	68 78 01 00 00       	push   0x178
c000ca84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca88:	e8 8b da ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ca8d:	83 c4 10             	add    esp,0x10
c000ca90:	83 c4 0c             	add    esp,0xc
c000ca93:	c3                   	ret    

c000ca94 <LogicalDisk::open(int, int, void*)>:
c000ca94:	83 ec 18             	sub    esp,0x18
c000ca97:	68 e8 fd 01 c0       	push   0xc001fde8
c000ca9c:	e8 2e 39 00 00       	call   c00103cf <KePanic(char const*)>
c000caa1:	83 c8 ff             	or     eax,0xffffffff
c000caa4:	83 c4 1c             	add    esp,0x1c
c000caa7:	c3                   	ret    

c000caa8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000caa8:	53                   	push   ebx
c000caa9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000caad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cab1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cab5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cabb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cac1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cac7:	77 10                	ja     c000cad9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cac9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cacf:	89 d3                	mov    ebx,edx
c000cad1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cad7:	72 05                	jb     c000cade <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cad9:	83 c8 ff             	or     eax,0xffffffff
c000cadc:	89 c2                	mov    edx,eax
c000cade:	5b                   	pop    ebx
c000cadf:	c3                   	ret    

c000cae0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cae0:	56                   	push   esi
c000cae1:	83 c8 ff             	or     eax,0xffffffff
c000cae4:	53                   	push   ebx
c000cae5:	89 c2                	mov    edx,eax
c000cae7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000caeb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000caef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000caf3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000caf9:	77 27                	ja     c000cb22 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cafb:	89 d8                	mov    eax,ebx
c000cafd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cb03:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cb09:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cb0e:	89 c2                	mov    edx,eax
c000cb10:	73 10                	jae    c000cb22 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb12:	89 c8                	mov    eax,ecx
c000cb14:	89 da                	mov    edx,ebx
c000cb16:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb1c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb22:	5b                   	pop    ebx
c000cb23:	5e                   	pop    esi
c000cb24:	c3                   	ret    
c000cb25:	90                   	nop

c000cb26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb26:	83 ec 1c             	sub    esp,0x1c
c000cb29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4c:	83 ec 08             	sub    esp,0x8
c000cb4f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb53:	50                   	push   eax
c000cb54:	e8 8b f0 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000cb59:	83 c4 10             	add    esp,0x10
c000cb5c:	ba 34 fe 01 c0       	mov    edx,0xc001fe34
c000cb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb65:	89 10                	mov    DWORD PTR [eax],edx
c000cb67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb76:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb81:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cba2:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cba8:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cbae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbb2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cbb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbb9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cbbf:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cbc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbcd:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cbd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbd7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbe1:	90                   	nop
c000cbe2:	83 c4 1c             	add    esp,0x1c
c000cbe5:	c3                   	ret    

c000cbe6 <LogicalDisk::assignDriveLetter()>:
c000cbe6:	55                   	push   ebp
c000cbe7:	57                   	push   edi
c000cbe8:	56                   	push   esi
c000cbe9:	53                   	push   ebx
c000cbea:	83 ec 14             	sub    esp,0x14
c000cbed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbf1:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbf7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbfd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cc01:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cc07:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cc0d:	3c 01                	cmp    al,0x1
c000cc0f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cc13:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc17:	19 c0                	sbb    eax,eax
c000cc19:	83 e0 02             	and    eax,0x2
c000cc1c:	83 c0 41             	add    eax,0x41
c000cc1f:	0f be e8             	movsx  ebp,al
c000cc22:	3c 43                	cmp    al,0x43
c000cc24:	75 10                	jne    c000cc36 <LogicalDisk::assignDriveLetter()+0x50>
c000cc26:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc2d:	75 5d                	jne    c000cc8c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc2f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc34:	75 56                	jne    c000cc8c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc36:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc39:	ba 01 00 00 00       	mov    edx,0x1
c000cc3e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc42:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc46:	d3 e2                	shl    edx,cl
c000cc48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc4c:	89 d7                	mov    edi,edx
c000cc4e:	89 d6                	mov    esi,edx
c000cc50:	c1 ff 1f             	sar    edi,0x1f
c000cc53:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc57:	21 f9                	and    ecx,edi
c000cc59:	09 d1                	or     ecx,edx
c000cc5b:	75 2f                	jne    c000cc8c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc5d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc65:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc6b:	09 f2                	or     edx,esi
c000cc6d:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc77:	09 fa                	or     edx,edi
c000cc79:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc7d:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc83:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc8a:	eb 08                	jmp    c000cc94 <LogicalDisk::assignDriveLetter()+0xae>
c000cc8c:	45                   	inc    ebp
c000cc8d:	40                   	inc    eax
c000cc8e:	3c 5b                	cmp    al,0x5b
c000cc90:	75 90                	jne    c000cc22 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc92:	31 c0                	xor    eax,eax
c000cc94:	83 c4 14             	add    esp,0x14
c000cc97:	5b                   	pop    ebx
c000cc98:	5e                   	pop    esi
c000cc99:	5f                   	pop    edi
c000cc9a:	5d                   	pop    ebp
c000cc9b:	c3                   	ret    

c000cc9c <LogicalDisk::mount()>:
c000cc9c:	56                   	push   esi
c000cc9d:	53                   	push   ebx
c000cc9e:	53                   	push   ebx
c000cc9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cca3:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cca9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000ccb3:	85 db                	test   ebx,ebx
c000ccb5:	74 27                	je     c000ccde <LogicalDisk::mount()+0x42>
c000ccb7:	51                   	push   ecx
c000ccb8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ccbf:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccc1:	83 e8 41             	sub    eax,0x41
c000ccc4:	50                   	push   eax
c000ccc5:	56                   	push   esi
c000ccc6:	53                   	push   ebx
c000ccc7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccca:	83 c4 10             	add    esp,0x10
c000cccd:	84 c0                	test   al,al
c000cccf:	74 08                	je     c000ccd9 <LogicalDisk::mount()+0x3d>
c000ccd1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000ccd7:	eb 07                	jmp    c000cce0 <LogicalDisk::mount()+0x44>
c000ccd9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccdc:	eb d5                	jmp    c000ccb3 <LogicalDisk::mount()+0x17>
c000ccde:	31 c0                	xor    eax,eax
c000cce0:	5a                   	pop    edx
c000cce1:	5b                   	pop    ebx
c000cce2:	5e                   	pop    esi
c000cce3:	c3                   	ret    

c000cce4 <LogicalDisk::unmount()>:
c000cce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cce8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccf2:	c3                   	ret    
c000ccf3:	90                   	nop

c000ccf4 <LogicalDisk::eject()>:
c000ccf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccf8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccfe:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd04:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cd07:	90                   	nop

c000cd08 <LogicalDisk::unassignDriveLetter()>:
c000cd08:	57                   	push   edi
c000cd09:	56                   	push   esi
c000cd0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd0e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd15:	84 c9                	test   cl,cl
c000cd17:	75 0f                	jne    c000cd28 <LogicalDisk::unassignDriveLetter()+0x20>
c000cd19:	c7 44 24 0c 0c fe 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fe0c
c000cd21:	5e                   	pop    esi
c000cd22:	5f                   	pop    edi
c000cd23:	e9 a7 36 00 00       	jmp    c00103cf <KePanic(char const*)>
c000cd28:	83 e9 41             	sub    ecx,0x41
c000cd2b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd32:	b8 01 00 00 00       	mov    eax,0x1
c000cd37:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd42:	d3 e0                	shl    eax,cl
c000cd44:	89 c7                	mov    edi,eax
c000cd46:	f7 d0                	not    eax
c000cd48:	c1 ff 1f             	sar    edi,0x1f
c000cd4b:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd51:	89 fe                	mov    esi,edi
c000cd53:	f7 d6                	not    esi
c000cd55:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd5b:	5e                   	pop    esi
c000cd5c:	5f                   	pop    edi
c000cd5d:	c3                   	ret    

c000cd5e <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd5e:	57                   	push   edi
c000cd5f:	56                   	push   esi
c000cd60:	53                   	push   ebx
c000cd61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd69:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd71:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd77:	77 41                	ja     c000cdba <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd79:	99                   	cdq    
c000cd7a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd80:	01 c8                	add    eax,ecx
c000cd82:	11 da                	adc    edx,ebx
c000cd84:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd8a:	19 d7                	sbb    edi,edx
c000cd8c:	72 33                	jb     c000cdc1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd8e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd94:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd9a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd9e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cda2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cda8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdb2:	5b                   	pop    ebx
c000cdb3:	5e                   	pop    esi
c000cdb4:	5f                   	pop    edi
c000cdb5:	e9 c0 0a 00 00       	jmp    c000d87a <VCache::read(unsigned long long, int, void*)>
c000cdba:	b8 05 00 00 00       	mov    eax,0x5
c000cdbf:	eb 05                	jmp    c000cdc6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cdc1:	b8 07 00 00 00       	mov    eax,0x7
c000cdc6:	5b                   	pop    ebx
c000cdc7:	5e                   	pop    esi
c000cdc8:	5f                   	pop    edi
c000cdc9:	c3                   	ret    

c000cdca <LogicalDisk::write(unsigned long long, int, void*)>:
c000cdca:	57                   	push   edi
c000cdcb:	56                   	push   esi
c000cdcc:	53                   	push   ebx
c000cdcd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdd5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cddd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cde3:	77 41                	ja     c000ce26 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cde5:	99                   	cdq    
c000cde6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdec:	01 c8                	add    eax,ecx
c000cdee:	11 da                	adc    edx,ebx
c000cdf0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdf6:	19 d7                	sbb    edi,edx
c000cdf8:	72 33                	jb     c000ce2d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdfa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ce00:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ce06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce0a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce0e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce14:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce1e:	5b                   	pop    ebx
c000ce1f:	5e                   	pop    esi
c000ce20:	5f                   	pop    edi
c000ce21:	e9 66 09 00 00       	jmp    c000d78c <VCache::write(unsigned long long, int, void*)>
c000ce26:	b8 05 00 00 00       	mov    eax,0x5
c000ce2b:	eb 05                	jmp    c000ce32 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce2d:	b8 07 00 00 00       	mov    eax,0x7
c000ce32:	5b                   	pop    ebx
c000ce33:	5e                   	pop    esi
c000ce34:	5f                   	pop    edi
c000ce35:	c3                   	ret    
c000ce36:	66 90                	xchg   ax,ax

c000ce38 <Mouse::Mouse(char const*)>:
c000ce38:	83 ec 0c             	sub    esp,0xc
c000ce3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3f:	83 ec 08             	sub    esp,0x8
c000ce42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce46:	50                   	push   eax
c000ce47:	e8 98 ed ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000ce4c:	83 c4 10             	add    esp,0x10
c000ce4f:	ba 60 fe 01 c0       	mov    edx,0xc001fe60
c000ce54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce58:	89 10                	mov    DWORD PTR [eax],edx
c000ce5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce68:	90                   	nop
c000ce69:	83 c4 0c             	add    esp,0xc
c000ce6c:	c3                   	ret    
c000ce6d:	90                   	nop
c000ce6e:	66 90                	xchg   ax,ax

c000ce70 <Mouse::~Mouse()>:
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	ba 60 fe 01 c0       	mov    edx,0xc001fe60
c000ce78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce7c:	89 10                	mov    DWORD PTR [eax],edx
c000ce7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce82:	83 ec 0c             	sub    esp,0xc
c000ce85:	50                   	push   eax
c000ce86:	e8 c3 ea ff ff       	call   c000b94e <Device::~Device()>
c000ce8b:	83 c4 10             	add    esp,0x10
c000ce8e:	90                   	nop
c000ce8f:	83 c4 0c             	add    esp,0xc
c000ce92:	c3                   	ret    
c000ce93:	90                   	nop

c000ce94 <Mouse::~Mouse()>:
c000ce94:	83 ec 0c             	sub    esp,0xc
c000ce97:	83 ec 0c             	sub    esp,0xc
c000ce9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9e:	e8 cd ff ff ff       	call   c000ce70 <Mouse::~Mouse()>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	83 ec 08             	sub    esp,0x8
c000cea9:	68 58 01 00 00       	push   0x158
c000ceae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb2:	e8 61 d6 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000ceb7:	83 c4 10             	add    esp,0x10
c000ceba:	83 c4 0c             	add    esp,0xc
c000cebd:	c3                   	ret    

c000cebe <NIC::getMAC()>:
c000cebe:	31 c0                	xor    eax,eax
c000cec0:	31 d2                	xor    edx,edx
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <NIC::write(int, unsigned char*, int*)>:
c000cec4:	b8 01 00 00 00       	mov    eax,0x1
c000cec9:	c3                   	ret    

c000ceca <NIC::NIC(char const*)>:
c000ceca:	83 ec 0c             	sub    esp,0xc
c000cecd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced1:	83 ec 08             	sub    esp,0x8
c000ced4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced8:	50                   	push   eax
c000ced9:	e8 06 ed ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000cede:	83 c4 10             	add    esp,0x10
c000cee1:	ba 8c fe 01 c0       	mov    edx,0xc001fe8c
c000cee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceea:	89 10                	mov    DWORD PTR [eax],edx
c000ceec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cefa:	90                   	nop
c000cefb:	83 c4 0c             	add    esp,0xc
c000cefe:	c3                   	ret    
c000ceff:	90                   	nop

c000cf00 <NIC::~NIC()>:
c000cf00:	83 ec 0c             	sub    esp,0xc
c000cf03:	ba 8c fe 01 c0       	mov    edx,0xc001fe8c
c000cf08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf0c:	89 10                	mov    DWORD PTR [eax],edx
c000cf0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf12:	83 ec 0c             	sub    esp,0xc
c000cf15:	50                   	push   eax
c000cf16:	e8 33 ea ff ff       	call   c000b94e <Device::~Device()>
c000cf1b:	83 c4 10             	add    esp,0x10
c000cf1e:	90                   	nop
c000cf1f:	83 c4 0c             	add    esp,0xc
c000cf22:	c3                   	ret    
c000cf23:	90                   	nop

c000cf24 <NIC::~NIC()>:
c000cf24:	83 ec 0c             	sub    esp,0xc
c000cf27:	83 ec 0c             	sub    esp,0xc
c000cf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2e:	e8 cd ff ff ff       	call   c000cf00 <NIC::~NIC()>
c000cf33:	83 c4 10             	add    esp,0x10
c000cf36:	83 ec 08             	sub    esp,0x8
c000cf39:	68 58 01 00 00       	push   0x158
c000cf3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf42:	e8 d1 d5 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000cf47:	83 c4 10             	add    esp,0x10
c000cf4a:	83 c4 0c             	add    esp,0xc
c000cf4d:	c3                   	ret    

c000cf4e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf4e:	55                   	push   ebp
c000cf4f:	57                   	push   edi
c000cf50:	56                   	push   esi
c000cf51:	53                   	push   ebx
c000cf52:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf58:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf5f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf66:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf6d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf78:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf7c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf83:	e8 58 ed ff ff       	call   c000bce0 <Device::getName()>
c000cf88:	5a                   	pop    edx
c000cf89:	59                   	pop    ecx
c000cf8a:	50                   	push   eax
c000cf8b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf8f:	55                   	push   ebp
c000cf90:	e8 5b 36 ff ff       	call   c00005f0 <strcpy>
c000cf95:	5b                   	pop    ebx
c000cf96:	58                   	pop    eax
c000cf97:	68 b8 fe 01 c0       	push   0xc001feb8
c000cf9c:	55                   	push   ebp
c000cf9d:	e8 0e 38 ff ff       	call   c00007b0 <strcat>
c000cfa2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cfa9:	e8 bf a8 ff ff       	call   c000786d <malloc>
c000cfae:	83 c4 0c             	add    esp,0xc
c000cfb1:	89 c3                	mov    ebx,eax
c000cfb3:	57                   	push   edi
c000cfb4:	56                   	push   esi
c000cfb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfbd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cfc4:	55                   	push   ebp
c000cfc5:	50                   	push   eax
c000cfc6:	e8 5b fb ff ff       	call   c000cb26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfcb:	83 c4 14             	add    esp,0x14
c000cfce:	53                   	push   ebx
c000cfcf:	e8 12 fc ff ff       	call   c000cbe6 <LogicalDisk::assignDriveLetter()>
c000cfd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfd7:	e8 c0 fc ff ff       	call   c000cc9c <LogicalDisk::mount()>
c000cfdc:	58                   	pop    eax
c000cfdd:	5a                   	pop    edx
c000cfde:	53                   	push   ebx
c000cfdf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfe6:	e8 61 ea ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000cfeb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cff1:	5b                   	pop    ebx
c000cff2:	5e                   	pop    esi
c000cff3:	5f                   	pop    edi
c000cff4:	5d                   	pop    ebp
c000cff5:	c3                   	ret    

c000cff6 <createPartitionsForDisk(PhysicalDisk*)>:
c000cff6:	55                   	push   ebp
c000cff7:	57                   	push   edi
c000cff8:	56                   	push   esi
c000cff9:	53                   	push   ebx
c000cffa:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d000:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d007:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d00d:	3d 00 02 00 00       	cmp    eax,0x200
c000d012:	74 27                	je     c000d03b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d014:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d01a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d020:	83 ec 10             	sub    esp,0x10
c000d023:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d027:	99                   	cdq    
c000d028:	c1 e6 0a             	shl    esi,0xa
c000d02b:	52                   	push   edx
c000d02c:	89 fd                	mov    ebp,edi
c000d02e:	50                   	push   eax
c000d02f:	55                   	push   ebp
c000d030:	56                   	push   esi
c000d031:	e8 ca 0d 01 00       	call   c001de00 <__udivdi3>
c000d036:	e9 b1 00 00 00       	jmp    c000d0ec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d03b:	83 ec 0c             	sub    esp,0xc
c000d03e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d040:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d044:	56                   	push   esi
c000d045:	6a 01                	push   0x1
c000d047:	6a 00                	push   0x0
c000d049:	6a 00                	push   0x0
c000d04b:	53                   	push   ebx
c000d04c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d04f:	83 c4 20             	add    esp,0x20
c000d052:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d05a:	75 0a                	jne    c000d066 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d05c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d064:	74 2c                	je     c000d092 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d066:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d06c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d072:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d07f:	89 f7                	mov    edi,esi
c000d081:	c1 e0 0a             	shl    eax,0xa
c000d084:	c1 ff 1f             	sar    edi,0x1f
c000d087:	57                   	push   edi
c000d088:	56                   	push   esi
c000d089:	52                   	push   edx
c000d08a:	50                   	push   eax
c000d08b:	e8 70 0d 01 00       	call   c001de00 <__udivdi3>
c000d090:	eb 5a                	jmp    c000d0ec <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d092:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d099:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d0a0:	83 e1 7f             	and    ecx,0x7f
c000d0a3:	83 e0 7f             	and    eax,0x7f
c000d0a6:	01 c1                	add    ecx,eax
c000d0a8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0af:	83 e0 7f             	and    eax,0x7f
c000d0b2:	01 c1                	add    ecx,eax
c000d0b4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d0bb:	83 e0 7f             	and    eax,0x7f
c000d0be:	00 c1                	add    cl,al
c000d0c0:	74 41                	je     c000d103 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0c2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0c8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0d4:	83 ec 10             	sub    esp,0x10
c000d0d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0db:	89 f7                	mov    edi,esi
c000d0dd:	c1 e0 0a             	shl    eax,0xa
c000d0e0:	c1 ff 1f             	sar    edi,0x1f
c000d0e3:	57                   	push   edi
c000d0e4:	56                   	push   esi
c000d0e5:	52                   	push   edx
c000d0e6:	50                   	push   eax
c000d0e7:	e8 14 0d 01 00       	call   c001de00 <__udivdi3>
c000d0ec:	83 c4 14             	add    esp,0x14
c000d0ef:	52                   	push   edx
c000d0f0:	50                   	push   eax
c000d0f1:	6a 00                	push   0x0
c000d0f3:	6a 00                	push   0x0
c000d0f5:	53                   	push   ebx
c000d0f6:	e8 53 fe ff ff       	call   c000cf4e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0fb:	83 c4 20             	add    esp,0x20
c000d0fe:	e9 79 01 00 00       	jmp    c000d27c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d103:	89 f0                	mov    eax,esi
c000d105:	31 f6                	xor    esi,esi
c000d107:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d10e:	75 02                	jne    c000d112 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d110:	89 f1                	mov    ecx,esi
c000d112:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d119:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d120:	c1 e2 08             	shl    edx,0x8
c000d123:	c1 e7 10             	shl    edi,0x10
c000d126:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d12e:	09 fa                	or     edx,edi
c000d130:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d138:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d13f:	83 c0 10             	add    eax,0x10
c000d142:	09 fa                	or     edx,edi
c000d144:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d14b:	c1 e7 18             	shl    edi,0x18
c000d14e:	09 fa                	or     edx,edi
c000d150:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d157:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d15b:	c1 e7 10             	shl    edi,0x10
c000d15e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d165:	c1 e2 08             	shl    edx,0x8
c000d168:	09 fa                	or     edx,edi
c000d16a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d171:	09 fa                	or     edx,edi
c000d173:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d17a:	c1 e7 18             	shl    edi,0x18
c000d17d:	09 fa                	or     edx,edi
c000d17f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d183:	46                   	inc    esi
c000d184:	83 fe 04             	cmp    esi,0x4
c000d187:	0f 85 7a ff ff ff    	jne    c000d107 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d191:	83 f0 01             	xor    eax,0x1
c000d194:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d198:	75 57                	jne    c000d1f1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d19a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d19e:	83 f0 01             	xor    eax,0x1
c000d1a1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d1a5:	75 4a                	jne    c000d1f1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1a7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1ab:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d1b3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d1bb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d1c1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d1c7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1cd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d1d1:	89 f7                	mov    edi,esi
c000d1d3:	c1 e0 0a             	shl    eax,0xa
c000d1d6:	c1 ff 1f             	sar    edi,0x1f
c000d1d9:	57                   	push   edi
c000d1da:	56                   	push   esi
c000d1db:	52                   	push   edx
c000d1dc:	50                   	push   eax
c000d1dd:	e8 1e 0c 01 00       	call   c001de00 <__udivdi3>
c000d1e2:	83 c4 10             	add    esp,0x10
c000d1e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ed:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1f1:	84 c9                	test   cl,cl
c000d1f3:	74 53                	je     c000d248 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d1f5:	0f b6 c9             	movzx  ecx,cl
c000d1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d200:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d204:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d208:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d20c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d210:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d214:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d218:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d21c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d224:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d228:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d22c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d230:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d234:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d238:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d23c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d240:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d244:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d248:	31 ed                	xor    ebp,ebp
c000d24a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d24e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d252:	89 f8                	mov    eax,edi
c000d254:	09 f0                	or     eax,esi
c000d256:	74 1e                	je     c000d276 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d258:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d25c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d260:	89 d1                	mov    ecx,edx
c000d262:	09 c1                	or     ecx,eax
c000d264:	74 10                	je     c000d276 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d266:	83 ec 0c             	sub    esp,0xc
c000d269:	57                   	push   edi
c000d26a:	56                   	push   esi
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	53                   	push   ebx
c000d26e:	e8 db fc ff ff       	call   c000cf4e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d273:	83 c4 20             	add    esp,0x20
c000d276:	45                   	inc    ebp
c000d277:	83 fd 04             	cmp    ebp,0x4
c000d27a:	75 ce                	jne    c000d24a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d27c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d282:	5b                   	pop    ebx
c000d283:	5e                   	pop    esi
c000d284:	5f                   	pop    edi
c000d285:	5d                   	pop    ebp
c000d286:	c3                   	ret    
c000d287:	90                   	nop

c000d288 <Serial::Serial(char const*)>:
c000d288:	83 ec 0c             	sub    esp,0xc
c000d28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28f:	83 ec 08             	sub    esp,0x8
c000d292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d296:	50                   	push   eax
c000d297:	e8 48 e9 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000d29c:	83 c4 10             	add    esp,0x10
c000d29f:	ba cc fe 01 c0       	mov    edx,0xc001fecc
c000d2a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a8:	89 10                	mov    DWORD PTR [eax],edx
c000d2aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ae:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d2b8:	90                   	nop
c000d2b9:	83 c4 0c             	add    esp,0xc
c000d2bc:	c3                   	ret    
c000d2bd:	90                   	nop
c000d2be:	66 90                	xchg   ax,ax

c000d2c0 <Serial::~Serial()>:
c000d2c0:	83 ec 0c             	sub    esp,0xc
c000d2c3:	ba cc fe 01 c0       	mov    edx,0xc001fecc
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	89 10                	mov    DWORD PTR [eax],edx
c000d2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2d2:	83 ec 0c             	sub    esp,0xc
c000d2d5:	50                   	push   eax
c000d2d6:	e8 73 e6 ff ff       	call   c000b94e <Device::~Device()>
c000d2db:	83 c4 10             	add    esp,0x10
c000d2de:	90                   	nop
c000d2df:	83 c4 0c             	add    esp,0xc
c000d2e2:	c3                   	ret    
c000d2e3:	90                   	nop

c000d2e4 <Serial::~Serial()>:
c000d2e4:	83 ec 0c             	sub    esp,0xc
c000d2e7:	83 ec 0c             	sub    esp,0xc
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	e8 cd ff ff ff       	call   c000d2c0 <Serial::~Serial()>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	83 ec 08             	sub    esp,0x8
c000d2f9:	68 58 01 00 00       	push   0x158
c000d2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d302:	e8 11 d2 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d307:	83 c4 10             	add    esp,0x10
c000d30a:	83 c4 0c             	add    esp,0xc
c000d30d:	c3                   	ret    
c000d30e:	66 90                	xchg   ax,ax

c000d310 <Timer::Timer(char const*)>:
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d317:	83 ec 08             	sub    esp,0x8
c000d31a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31e:	50                   	push   eax
c000d31f:	e8 c0 e8 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000d324:	83 c4 10             	add    esp,0x10
c000d327:	ba 10 ff 01 c0       	mov    edx,0xc001ff10
c000d32c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d330:	89 10                	mov    DWORD PTR [eax],edx
c000d332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d336:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d340:	90                   	nop
c000d341:	83 c4 0c             	add    esp,0xc
c000d344:	c3                   	ret    
c000d345:	90                   	nop
c000d346:	66 90                	xchg   ax,ax

c000d348 <Timer::~Timer()>:
c000d348:	83 ec 0c             	sub    esp,0xc
c000d34b:	ba 10 ff 01 c0       	mov    edx,0xc001ff10
c000d350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d354:	89 10                	mov    DWORD PTR [eax],edx
c000d356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d35a:	83 ec 0c             	sub    esp,0xc
c000d35d:	50                   	push   eax
c000d35e:	e8 eb e5 ff ff       	call   c000b94e <Device::~Device()>
c000d363:	83 c4 10             	add    esp,0x10
c000d366:	90                   	nop
c000d367:	83 c4 0c             	add    esp,0xc
c000d36a:	c3                   	ret    
c000d36b:	90                   	nop

c000d36c <Timer::~Timer()>:
c000d36c:	83 ec 0c             	sub    esp,0xc
c000d36f:	83 ec 0c             	sub    esp,0xc
c000d372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d376:	e8 cd ff ff ff       	call   c000d348 <Timer::~Timer()>
c000d37b:	83 c4 10             	add    esp,0x10
c000d37e:	83 ec 08             	sub    esp,0x8
c000d381:	68 5c 01 00 00       	push   0x15c
c000d386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38a:	e8 89 d1 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d38f:	83 c4 10             	add    esp,0x10
c000d392:	83 c4 0c             	add    esp,0xc
c000d395:	c3                   	ret    

c000d396 <Timer::read()>:
c000d396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d39a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d3a0:	c3                   	ret    

c000d3a1 <setupTimer(int)>:
c000d3a1:	53                   	push   ebx
c000d3a2:	83 ec 14             	sub    esp,0x14
c000d3a5:	68 5c 01 00 00       	push   0x15c
c000d3aa:	e8 be a4 ff ff       	call   c000786d <malloc>
c000d3af:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3b2:	89 c3                	mov    ebx,eax
c000d3b4:	e8 b3 02 01 00       	call   c001d66c <PIT::PIT()>
c000d3b9:	58                   	pop    eax
c000d3ba:	5a                   	pop    edx
c000d3bb:	53                   	push   ebx
c000d3bc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d3c2:	e8 85 e6 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000d3c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3c9:	6a 00                	push   0x0
c000d3cb:	6a 00                	push   0x0
c000d3cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3d1:	53                   	push   ebx
c000d3d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3d5:	89 d8                	mov    eax,ebx
c000d3d7:	83 c4 28             	add    esp,0x28
c000d3da:	5b                   	pop    ebx
c000d3db:	c3                   	ret    

c000d3dc <timerHandler(unsigned int)>:
c000d3dc:	56                   	push   esi
c000d3dd:	53                   	push   ebx
c000d3de:	51                   	push   ecx
c000d3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3e3:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d3e9:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d3f0:	0f 84 4a 01 00 00    	je     c000d540 <timerHandler(unsigned int)+0x164>
c000d3f6:	fa                   	cli    
c000d3f7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d3fd:	83 ec 0c             	sub    esp,0xc
c000d400:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d406:	68 78 71 02 c0       	push   0xc0027178
c000d40b:	e8 c0 0f 01 00       	call   c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d410:	83 c4 10             	add    esp,0x10
c000d413:	84 c0                	test   al,al
c000d415:	0f 85 a1 00 00 00    	jne    c000d4bc <timerHandler(unsigned int)+0xe0>
c000d41b:	83 ec 0c             	sub    esp,0xc
c000d41e:	68 78 71 02 c0       	push   0xc0027178
c000d423:	e8 c4 0f 01 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d428:	83 c4 10             	add    esp,0x10
c000d42b:	89 c6                	mov    esi,eax
c000d42d:	8d 76 00             	lea    esi,[esi+0x0]
c000d430:	83 ec 0c             	sub    esp,0xc
c000d433:	68 78 71 02 c0       	push   0xc0027178
c000d438:	e8 af 0f 01 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d43d:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d444:	89 c3                	mov    ebx,eax
c000d446:	e8 a9 0f 01 00       	call   c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d44b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d44e:	83 c4 10             	add    esp,0x10
c000d451:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d457:	77 23                	ja     c000d47c <timerHandler(unsigned int)+0xa0>
c000d459:	83 ec 0c             	sub    esp,0xc
c000d45c:	53                   	push   ebx
c000d45d:	e8 62 7b 00 00       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	39 de                	cmp    esi,ebx
c000d467:	75 27                	jne    c000d490 <timerHandler(unsigned int)+0xb4>
c000d469:	83 ec 0c             	sub    esp,0xc
c000d46c:	68 78 71 02 c0       	push   0xc0027178
c000d471:	e8 76 0f 01 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d476:	89 c6                	mov    esi,eax
c000d478:	eb 12                	jmp    c000d48c <timerHandler(unsigned int)+0xb0>
c000d47a:	66 90                	xchg   ax,ax
c000d47c:	52                   	push   edx
c000d47d:	52                   	push   edx
c000d47e:	53                   	push   ebx
c000d47f:	68 78 71 02 c0       	push   0xc0027178
c000d484:	e8 23 10 01 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d489:	8d 76 00             	lea    esi,[esi+0x0]
c000d48c:	83 c4 10             	add    esp,0x10
c000d48f:	90                   	nop
c000d490:	83 ec 0c             	sub    esp,0xc
c000d493:	68 78 71 02 c0       	push   0xc0027178
c000d498:	e8 33 0f 01 00       	call   c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	84 c0                	test   al,al
c000d4a2:	75 18                	jne    c000d4bc <timerHandler(unsigned int)+0xe0>
c000d4a4:	83 ec 0c             	sub    esp,0xc
c000d4a7:	68 78 71 02 c0       	push   0xc0027178
c000d4ac:	e8 3b 0f 01 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	39 f0                	cmp    eax,esi
c000d4b6:	0f 85 74 ff ff ff    	jne    c000d430 <timerHandler(unsigned int)+0x54>
c000d4bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4c1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4c5:	74 41                	je     c000d508 <timerHandler(unsigned int)+0x12c>
c000d4c7:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d4ce:	74 38                	je     c000d508 <timerHandler(unsigned int)+0x12c>
c000d4d0:	fa                   	cli    
c000d4d1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4d7:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d4dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4e2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d4e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4eb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d4ee:	72 08                	jb     c000d4f8 <timerHandler(unsigned int)+0x11c>
c000d4f0:	e8 0b 76 00 00       	call   c0014b00 <schedule()>
c000d4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4f8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d4fd:	48                   	dec    eax
c000d4fe:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d503:	75 03                	jne    c000d508 <timerHandler(unsigned int)+0x12c>
c000d505:	fb                   	sti    
c000d506:	66 90                	xchg   ax,ax
c000d508:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d50d:	48                   	dec    eax
c000d50e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d513:	75 1b                	jne    c000d530 <timerHandler(unsigned int)+0x154>
c000d515:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d51c:	74 12                	je     c000d530 <timerHandler(unsigned int)+0x154>
c000d51e:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d528:	e8 d3 75 00 00       	call   c0014b00 <schedule()>
c000d52d:	8d 76 00             	lea    esi,[esi+0x0]
c000d530:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d535:	48                   	dec    eax
c000d536:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d53b:	75 03                	jne    c000d540 <timerHandler(unsigned int)+0x164>
c000d53d:	fb                   	sti    
c000d53e:	66 90                	xchg   ax,ax
c000d540:	58                   	pop    eax
c000d541:	5b                   	pop    ebx
c000d542:	5e                   	pop    esi
c000d543:	c3                   	ret    

c000d544 <VCache::VCache(PhysicalDisk*)>:
c000d544:	53                   	push   ebx
c000d545:	83 ec 18             	sub    esp,0x18
c000d548:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c000d54d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d551:	89 10                	mov    DWORD PTR [eax],edx
c000d553:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d557:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d55e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d562:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d56d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d574:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d57b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d586:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d58d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d591:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5ab:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d5b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5be:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ce:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5d5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5dd:	83 ec 0c             	sub    esp,0xc
c000d5e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5e4:	e8 84 a2 ff ff       	call   c000786d <malloc>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 c3                	mov    ebx,eax
c000d5ee:	83 ec 0c             	sub    esp,0xc
c000d5f1:	53                   	push   ebx
c000d5f2:	e8 ad 72 00 00       	call   c00148a4 <Mutex::Mutex()>
c000d5f7:	83 c4 10             	add    esp,0x10
c000d5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fe:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d605:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d609:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d60c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d610:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d617:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d61b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d625:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d628:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d62c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d632:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d638:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d63c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d63f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d642:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d646:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d64a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d64e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d654:	05 00 02 00 00       	add    eax,0x200
c000d659:	c1 e0 03             	shl    eax,0x3
c000d65c:	83 ec 0c             	sub    esp,0xc
c000d65f:	50                   	push   eax
c000d660:	e8 08 a2 ff ff       	call   c000786d <malloc>
c000d665:	83 c4 10             	add    esp,0x10
c000d668:	89 c2                	mov    edx,eax
c000d66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d675:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d67c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d680:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d684:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d688:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d68e:	89 d0                	mov    eax,edx
c000d690:	c1 e0 02             	shl    eax,0x2
c000d693:	01 d0                	add    eax,edx
c000d695:	c1 e0 04             	shl    eax,0x4
c000d698:	83 ec 0c             	sub    esp,0xc
c000d69b:	50                   	push   eax
c000d69c:	e8 cc a1 ff ff       	call   c000786d <malloc>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	89 c2                	mov    edx,eax
c000d6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6aa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6ad:	90                   	nop
c000d6ae:	83 c4 18             	add    esp,0x18
c000d6b1:	5b                   	pop    ebx
c000d6b2:	c3                   	ret    
c000d6b3:	90                   	nop

c000d6b4 <VCache::invalidateReadBuffer()>:
c000d6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6b8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d6be:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6c2:	c3                   	ret    
c000d6c3:	90                   	nop

c000d6c4 <VCache::writeWriteBuffer()>:
c000d6c4:	53                   	push   ebx
c000d6c5:	83 ec 08             	sub    esp,0x8
c000d6c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6cc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6d0:	74 1e                	je     c000d6f0 <VCache::writeWriteBuffer()+0x2c>
c000d6d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6d5:	83 ec 0c             	sub    esp,0xc
c000d6d8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6da:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6e0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6e3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6e6:	50                   	push   eax
c000d6e7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d6ea:	83 c4 20             	add    esp,0x20
c000d6ed:	8d 76 00             	lea    esi,[esi+0x0]
c000d6f0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6f7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d6fe:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d702:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d709:	83 c4 08             	add    esp,0x8
c000d70c:	5b                   	pop    ebx
c000d70d:	c3                   	ret    
c000d70e:	66 90                	xchg   ax,ax

c000d710 <VCache::~VCache()>:
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	ba 40 ff 01 c0       	mov    edx,0xc001ff40
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	89 10                	mov    DWORD PTR [eax],edx
c000d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d722:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d725:	84 c0                	test   al,al
c000d727:	74 0f                	je     c000d738 <VCache::~VCache()+0x28>
c000d729:	83 ec 0c             	sub    esp,0xc
c000d72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d730:	e8 8f ff ff ff       	call   c000d6c4 <VCache::writeWriteBuffer()>
c000d735:	83 c4 10             	add    esp,0x10
c000d738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d73f:	83 ec 0c             	sub    esp,0xc
c000d742:	50                   	push   eax
c000d743:	e8 35 a1 ff ff       	call   c000787d <free>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d74f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d752:	83 ec 0c             	sub    esp,0xc
c000d755:	50                   	push   eax
c000d756:	e8 22 a1 ff ff       	call   c000787d <free>
c000d75b:	83 c4 10             	add    esp,0x10
c000d75e:	90                   	nop
c000d75f:	83 c4 0c             	add    esp,0xc
c000d762:	c3                   	ret    
c000d763:	90                   	nop

c000d764 <VCache::~VCache()>:
c000d764:	83 ec 0c             	sub    esp,0xc
c000d767:	83 ec 0c             	sub    esp,0xc
c000d76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76e:	e8 9d ff ff ff       	call   c000d710 <VCache::~VCache()>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	83 ec 08             	sub    esp,0x8
c000d779:	6a 44                	push   0x44
c000d77b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77f:	e8 94 cd ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000d784:	83 c4 10             	add    esp,0x10
c000d787:	83 c4 0c             	add    esp,0xc
c000d78a:	c3                   	ret    
c000d78b:	90                   	nop

c000d78c <VCache::write(unsigned long long, int, void*)>:
c000d78c:	55                   	push   ebp
c000d78d:	57                   	push   edi
c000d78e:	56                   	push   esi
c000d78f:	53                   	push   ebx
c000d790:	83 ec 1c             	sub    esp,0x1c
c000d793:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d797:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d79b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d79f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d7a7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7ab:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d7af:	74 07                	je     c000d7b8 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d7b1:	53                   	push   ebx
c000d7b2:	e8 fd fe ff ff       	call   c000d6b4 <VCache::invalidateReadBuffer()>
c000d7b7:	58                   	pop    eax
c000d7b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d7bc:	74 62                	je     c000d820 <VCache::write(unsigned long long, int, void*)+0x94>
c000d7be:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7c5:	99                   	cdq    
c000d7c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7ca:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d7cd:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d7d0:	31 c1                	xor    ecx,eax
c000d7d2:	89 d0                	mov    eax,edx
c000d7d4:	89 ca                	mov    edx,ecx
c000d7d6:	31 e8                	xor    eax,ebp
c000d7d8:	09 c2                	or     edx,eax
c000d7da:	75 38                	jne    c000d814 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7dc:	83 ff 01             	cmp    edi,0x1
c000d7df:	75 33                	jne    c000d814 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7e8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d7ee:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7f1:	0f af c8             	imul   ecx,eax
c000d7f4:	01 cf                	add    edi,ecx
c000d7f6:	89 c1                	mov    ecx,eax
c000d7f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7fd:	40                   	inc    eax
c000d7fe:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d801:	83 f8 50             	cmp    eax,0x50
c000d804:	75 6a                	jne    c000d870 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d806:	83 ec 0c             	sub    esp,0xc
c000d809:	53                   	push   ebx
c000d80a:	e8 b5 fe ff ff       	call   c000d6c4 <VCache::writeWriteBuffer()>
c000d80f:	83 c4 10             	add    esp,0x10
c000d812:	eb 5c                	jmp    c000d870 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d814:	83 ec 0c             	sub    esp,0xc
c000d817:	53                   	push   ebx
c000d818:	e8 a7 fe ff ff       	call   c000d6c4 <VCache::writeWriteBuffer()>
c000d81d:	83 c4 10             	add    esp,0x10
c000d820:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d823:	83 ff 4f             	cmp    edi,0x4f
c000d826:	7f 20                	jg     c000d848 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d828:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d82b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d82f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d832:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d835:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d839:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d83c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d842:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d844:	eb 2a                	jmp    c000d870 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d846:	66 90                	xchg   ax,ax
c000d848:	8b 10                	mov    edx,DWORD PTR [eax]
c000d84a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d84e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d852:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d856:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d85a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d85e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d862:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d865:	83 c4 1c             	add    esp,0x1c
c000d868:	5b                   	pop    ebx
c000d869:	5e                   	pop    esi
c000d86a:	5f                   	pop    edi
c000d86b:	5d                   	pop    ebp
c000d86c:	ff e0                	jmp    eax
c000d86e:	66 90                	xchg   ax,ax
c000d870:	83 c4 1c             	add    esp,0x1c
c000d873:	31 c0                	xor    eax,eax
c000d875:	5b                   	pop    ebx
c000d876:	5e                   	pop    esi
c000d877:	5f                   	pop    edi
c000d878:	5d                   	pop    ebp
c000d879:	c3                   	ret    

c000d87a <VCache::read(unsigned long long, int, void*)>:
c000d87a:	55                   	push   ebp
c000d87b:	57                   	push   edi
c000d87c:	56                   	push   esi
c000d87d:	53                   	push   ebx
c000d87e:	83 ec 1c             	sub    esp,0x1c
c000d881:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d885:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d889:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d88d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d891:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d895:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d899:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d89d:	74 0d                	je     c000d8ac <VCache::read(unsigned long long, int, void*)+0x32>
c000d89f:	83 ec 0c             	sub    esp,0xc
c000d8a2:	57                   	push   edi
c000d8a3:	e8 1c fe ff ff       	call   c000d6c4 <VCache::writeWriteBuffer()>
c000d8a8:	83 c4 10             	add    esp,0x10
c000d8ab:	90                   	nop
c000d8ac:	83 fd 01             	cmp    ebp,0x1
c000d8af:	0f 85 93 00 00 00    	jne    c000d948 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8b5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8b8:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8bb:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8c2:	0f 85 80 00 00 00    	jne    c000d948 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8c8:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	f7 d9                	neg    ecx
c000d8cf:	89 c8                	mov    eax,ecx
c000d8d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d8d5:	c1 f8 1f             	sar    eax,0x1f
c000d8d8:	21 d9                	and    ecx,ebx
c000d8da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8de:	89 c8                	mov    eax,ecx
c000d8e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8e4:	21 f1                	and    ecx,esi
c000d8e6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d8ea:	89 ca                	mov    edx,ecx
c000d8ec:	74 2e                	je     c000d91c <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8ee:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d8f1:	75 29                	jne    c000d91c <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8f3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d8f6:	75 24                	jne    c000d91c <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8f8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8fb:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d901:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d904:	8d 70 ff             	lea    esi,[eax-0x1]
c000d907:	21 f3                	and    ebx,esi
c000d909:	0f af d9             	imul   ebx,ecx
c000d90c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d90f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d913:	89 de                	mov    esi,ebx
c000d915:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d917:	31 c0                	xor    eax,eax
c000d919:	eb 61                	jmp    c000d97c <VCache::read(unsigned long long, int, void*)+0x102>
c000d91b:	90                   	nop
c000d91c:	83 ec 0c             	sub    esp,0xc
c000d91f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d923:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d927:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d92a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d92d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d92f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d932:	55                   	push   ebp
c000d933:	52                   	push   edx
c000d934:	50                   	push   eax
c000d935:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d939:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d93c:	83 c4 20             	add    esp,0x20
c000d93f:	85 c0                	test   eax,eax
c000d941:	75 39                	jne    c000d97c <VCache::read(unsigned long long, int, void*)+0x102>
c000d943:	eb b3                	jmp    c000d8f8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d945:	8d 76 00             	lea    esi,[esi+0x0]
c000d948:	83 ec 0c             	sub    esp,0xc
c000d94b:	57                   	push   edi
c000d94c:	e8 63 fd ff ff       	call   c000d6b4 <VCache::invalidateReadBuffer()>
c000d951:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d954:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d958:	8b 10                	mov    edx,DWORD PTR [eax]
c000d95a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d95e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d962:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d966:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d96a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d96e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d971:	83 c4 2c             	add    esp,0x2c
c000d974:	5b                   	pop    ebx
c000d975:	5e                   	pop    esi
c000d976:	5f                   	pop    edi
c000d977:	5d                   	pop    ebp
c000d978:	ff e0                	jmp    eax
c000d97a:	66 90                	xchg   ax,ax
c000d97c:	83 c4 1c             	add    esp,0x1c
c000d97f:	5b                   	pop    ebx
c000d980:	5e                   	pop    esi
c000d981:	5f                   	pop    edi
c000d982:	5d                   	pop    ebp
c000d983:	c3                   	ret    

c000d984 <Video::putrect(int, int, int, int, unsigned int)>:
c000d984:	55                   	push   ebp
c000d985:	57                   	push   edi
c000d986:	56                   	push   esi
c000d987:	53                   	push   ebx
c000d988:	83 ec 1c             	sub    esp,0x1c
c000d98b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d98f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d993:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d997:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d99b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d99f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9a3:	01 df                	add    edi,ebx
c000d9a5:	39 fb                	cmp    ebx,edi
c000d9a7:	7d 1f                	jge    c000d9c8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9a9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9ad:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9b1:	7d 12                	jge    c000d9c5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d9b3:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9b9:	53                   	push   ebx
c000d9ba:	55                   	push   ebp
c000d9bb:	45                   	inc    ebp
c000d9bc:	56                   	push   esi
c000d9bd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9c0:	83 c4 10             	add    esp,0x10
c000d9c3:	eb e8                	jmp    c000d9ad <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9c5:	43                   	inc    ebx
c000d9c6:	eb dd                	jmp    c000d9a5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d9c8:	83 c4 1c             	add    esp,0x1c
c000d9cb:	5b                   	pop    ebx
c000d9cc:	5e                   	pop    esi
c000d9cd:	5f                   	pop    edi
c000d9ce:	5d                   	pop    ebp
c000d9cf:	c3                   	ret    

c000d9d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d9d0:	55                   	push   ebp
c000d9d1:	57                   	push   edi
c000d9d2:	31 ff                	xor    edi,edi
c000d9d4:	56                   	push   esi
c000d9d5:	53                   	push   ebx
c000d9d6:	83 ec 1c             	sub    esp,0x1c
c000d9d9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9e1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d9e8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d9ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9f1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d9f5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9f9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d9fc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da00:	01 f9                	add    ecx,edi
c000da02:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000da06:	7d 2f                	jge    c000da37 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da08:	31 f6                	xor    esi,esi
c000da0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da0e:	01 f2                	add    edx,esi
c000da10:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da14:	7d 1a                	jge    c000da30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da19:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da1c:	46                   	inc    esi
c000da1d:	51                   	push   ecx
c000da1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da22:	52                   	push   edx
c000da23:	55                   	push   ebp
c000da24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da2e:	eb da                	jmp    c000da0a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da30:	47                   	inc    edi
c000da31:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da35:	eb c5                	jmp    c000d9fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da37:	83 c4 1c             	add    esp,0x1c
c000da3a:	5b                   	pop    ebx
c000da3b:	5e                   	pop    esi
c000da3c:	5f                   	pop    edi
c000da3d:	5d                   	pop    ebp
c000da3e:	c3                   	ret    
c000da3f:	90                   	nop

c000da40 <Video::blit(unsigned int*, int, int, int, int)>:
c000da40:	55                   	push   ebp
c000da41:	57                   	push   edi
c000da42:	56                   	push   esi
c000da43:	53                   	push   ebx
c000da44:	83 ec 1c             	sub    esp,0x1c
c000da47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da4f:	85 c0                	test   eax,eax
c000da51:	79 02                	jns    c000da55 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da53:	31 c0                	xor    eax,eax
c000da55:	c1 e0 02             	shl    eax,0x2
c000da58:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da64:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da68:	39 d8                	cmp    eax,ebx
c000da6a:	7e 49                	jle    c000dab5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da6c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da72:	7c 41                	jl     c000dab5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da74:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da7c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da80:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000da84:	39 f9                	cmp    ecx,edi
c000da86:	7e 22                	jle    c000daaa <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000da88:	83 c5 04             	add    ebp,0x4
c000da8b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da91:	7c 14                	jl     c000daa7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000da93:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000da95:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000daa0:	56                   	push   esi
c000daa1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000daa4:	83 c4 10             	add    esp,0x10
c000daa7:	47                   	inc    edi
c000daa8:	eb d2                	jmp    c000da7c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000daaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000daae:	43                   	inc    ebx
c000daaf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dab3:	eb ab                	jmp    c000da60 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000dab5:	83 c4 1c             	add    esp,0x1c
c000dab8:	5b                   	pop    ebx
c000dab9:	5e                   	pop    esi
c000daba:	5f                   	pop    edi
c000dabb:	5d                   	pop    ebp
c000dabc:	c3                   	ret    
c000dabd:	90                   	nop

c000dabe <Video::clearScreen(unsigned int)>:
c000dabe:	57                   	push   edi
c000dabf:	56                   	push   esi
c000dac0:	53                   	push   ebx
c000dac1:	31 db                	xor    ebx,ebx
c000dac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dac7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000dacd:	7e 1f                	jle    c000daee <Video::clearScreen(unsigned int)+0x30>
c000dacf:	31 ff                	xor    edi,edi
c000dad1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dad7:	7e 12                	jle    c000daeb <Video::clearScreen(unsigned int)+0x2d>
c000dad9:	8b 06                	mov    eax,DWORD PTR [esi]
c000dadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dadf:	53                   	push   ebx
c000dae0:	57                   	push   edi
c000dae1:	47                   	inc    edi
c000dae2:	56                   	push   esi
c000dae3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dae6:	83 c4 10             	add    esp,0x10
c000dae9:	eb e6                	jmp    c000dad1 <Video::clearScreen(unsigned int)+0x13>
c000daeb:	43                   	inc    ebx
c000daec:	eb d9                	jmp    c000dac7 <Video::clearScreen(unsigned int)+0x9>
c000daee:	5b                   	pop    ebx
c000daef:	5e                   	pop    esi
c000daf0:	5f                   	pop    edi
c000daf1:	c3                   	ret    

c000daf2 <Video::putpixel(int, int, unsigned int)>:
c000daf2:	c7 44 24 04 48 ff 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ff48
c000dafa:	e9 d0 28 00 00       	jmp    c00103cf <KePanic(char const*)>
c000daff:	90                   	nop

c000db00 <Video::readPixelApprox(int, int)>:
c000db00:	83 ec 18             	sub    esp,0x18
c000db03:	68 69 ff 01 c0       	push   0xc001ff69
c000db08:	e8 c2 28 00 00       	call   c00103cf <KePanic(char const*)>
c000db0d:	31 c0                	xor    eax,eax
c000db0f:	83 c4 1c             	add    esp,0x1c
c000db12:	c3                   	ret    
c000db13:	90                   	nop

c000db14 <Video::Video(char const*)>:
c000db14:	83 ec 0c             	sub    esp,0xc
c000db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1b:	83 ec 08             	sub    esp,0x8
c000db1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db22:	50                   	push   eax
c000db23:	e8 bc e0 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	ba e4 ff 01 c0       	mov    edx,0xc001ffe4
c000db30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db34:	89 10                	mov    DWORD PTR [eax],edx
c000db36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db44:	90                   	nop
c000db45:	83 c4 0c             	add    esp,0xc
c000db48:	c3                   	ret    
c000db49:	90                   	nop

c000db4a <Video::~Video()>:
c000db4a:	83 ec 0c             	sub    esp,0xc
c000db4d:	ba e4 ff 01 c0       	mov    edx,0xc001ffe4
c000db52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db56:	89 10                	mov    DWORD PTR [eax],edx
c000db58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	50                   	push   eax
c000db60:	e8 e9 dd ff ff       	call   c000b94e <Device::~Device()>
c000db65:	83 c4 10             	add    esp,0x10
c000db68:	90                   	nop
c000db69:	83 c4 0c             	add    esp,0xc
c000db6c:	c3                   	ret    
c000db6d:	90                   	nop

c000db6e <Video::~Video()>:
c000db6e:	83 ec 0c             	sub    esp,0xc
c000db71:	83 ec 0c             	sub    esp,0xc
c000db74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db78:	e8 cd ff ff ff       	call   c000db4a <Video::~Video()>
c000db7d:	83 c4 10             	add    esp,0x10
c000db80:	83 ec 08             	sub    esp,0x8
c000db83:	68 64 01 00 00       	push   0x164
c000db88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8c:	e8 87 c9 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c000db91:	83 c4 10             	add    esp,0x10
c000db94:	83 c4 0c             	add    esp,0xc
c000db97:	c3                   	ret    

c000db98 <Video::isMonochrome()>:
c000db98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db9c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dba2:	c3                   	ret    
c000dba3:	90                   	nop

c000dba4 <Video::getWidth()>:
c000dba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dba8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbae:	c3                   	ret    
c000dbaf:	90                   	nop

c000dbb0 <Video::getHeight()>:
c000dbb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbb4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dbba:	c3                   	ret    
c000dbbb:	90                   	nop

c000dbbc <Video::drawCursor(int, int, unsigned int*, int)>:
c000dbbc:	55                   	push   ebp
c000dbbd:	57                   	push   edi
c000dbbe:	56                   	push   esi
c000dbbf:	53                   	push   ebx
c000dbc0:	83 ec 2c             	sub    esp,0x2c
c000dbc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbc7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbcb:	83 f8 01             	cmp    eax,0x1
c000dbce:	19 c9                	sbb    ecx,ecx
c000dbd0:	31 db                	xor    ebx,ebx
c000dbd2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dbd6:	89 cd                	mov    ebp,ecx
c000dbd8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbe0:	f7 d5                	not    ebp
c000dbe2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbe8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbec:	01 d8                	add    eax,ebx
c000dbee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbf2:	56                   	push   esi
c000dbf3:	e8 b8 ff ff ff       	call   c000dbb0 <Video::getHeight()>
c000dbf8:	59                   	pop    ecx
c000dbf9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dbfd:	7e 70                	jle    c000dc6f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dbff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc03:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dc07:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc0e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc12:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc1d:	89 f8                	mov    eax,edi
c000dc1f:	83 c0 20             	add    eax,0x20
c000dc22:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc26:	56                   	push   esi
c000dc27:	e8 78 ff ff ff       	call   c000dba4 <Video::getWidth()>
c000dc2c:	5a                   	pop    edx
c000dc2d:	39 c7                	cmp    edi,eax
c000dc2f:	7d 34                	jge    c000dc65 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc31:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc36:	74 05                	je     c000dc3d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc38:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc3a:	55                   	push   ebp
c000dc3b:	eb 0d                	jmp    c000dc4a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc3d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc42:	74 12                	je     c000dc56 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc44:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc4a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc4e:	57                   	push   edi
c000dc4f:	56                   	push   esi
c000dc50:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc53:	83 c4 10             	add    esp,0x10
c000dc56:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc5a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc5e:	47                   	inc    edi
c000dc5f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc63:	75 c1                	jne    c000dc26 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc65:	43                   	inc    ebx
c000dc66:	83 fb 20             	cmp    ebx,0x20
c000dc69:	0f 85 79 ff ff ff    	jne    c000dbe8 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dc6f:	83 c4 2c             	add    esp,0x2c
c000dc72:	5b                   	pop    ebx
c000dc73:	5e                   	pop    esi
c000dc74:	5f                   	pop    edi
c000dc75:	5d                   	pop    ebp
c000dc76:	c3                   	ret    
c000dc77:	90                   	nop

c000dc78 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc78:	55                   	push   ebp
c000dc79:	57                   	push   edi
c000dc7a:	56                   	push   esi
c000dc7b:	53                   	push   ebx
c000dc7c:	83 ec 28             	sub    esp,0x28
c000dc7f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc83:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc87:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc8b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc8f:	c1 e6 08             	shl    esi,0x8
c000dc92:	01 c6                	add    esi,eax
c000dc94:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dc98:	c1 e0 08             	shl    eax,0x8
c000dc9b:	01 d0                	add    eax,edx
c000dc9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dca1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dca5:	0f af c6             	imul   eax,esi
c000dca8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dcaf:	50                   	push   eax
c000dcb0:	e8 b8 9b ff ff       	call   c000786d <malloc>
c000dcb5:	83 c4 10             	add    esp,0x10
c000dcb8:	89 c7                	mov    edi,eax
c000dcba:	85 c0                	test   eax,eax
c000dcbc:	75 10                	jne    c000dcce <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcbe:	83 ec 0c             	sub    esp,0xc
c000dcc1:	68 94 ff 01 c0       	push   0xc001ff94
c000dcc6:	e8 04 27 00 00       	call   c00103cf <KePanic(char const*)>
c000dccb:	83 c4 10             	add    esp,0x10
c000dcce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dcd1:	ba 12 00 00 00       	mov    edx,0x12
c000dcd6:	84 c0                	test   al,al
c000dcd8:	74 11                	je     c000dceb <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dcda:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dcde:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dce2:	c1 fa 03             	sar    edx,0x3
c000dce5:	0f af d1             	imul   edx,ecx
c000dce8:	83 c2 12             	add    edx,0x12
c000dceb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dcef:	74 04                	je     c000dcf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dcf1:	85 f6                	test   esi,esi
c000dcf3:	75 12                	jne    c000dd07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dcf5:	83 ec 0c             	sub    esp,0xc
c000dcf8:	68 a4 ff 01 c0       	push   0xc001ffa4
c000dcfd:	e8 0c c9 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000dd02:	e9 b8 00 00 00       	jmp    c000ddbf <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dd07:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd0b:	80 f9 02             	cmp    cl,0x2
c000dd0e:	0f 85 96 00 00 00    	jne    c000ddaa <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd14:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd19:	75 0e                	jne    c000dd29 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd1b:	84 c0                	test   al,al
c000dd1d:	75 0a                	jne    c000dd29 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd1f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd22:	83 e8 18             	sub    eax,0x18
c000dd25:	a8 f7                	test   al,0xf7
c000dd27:	74 0a                	je     c000dd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd29:	83 ec 0c             	sub    esp,0xc
c000dd2c:	68 b9 ff 01 c0       	push   0xc001ffb9
c000dd31:	eb 7f                	jmp    c000ddb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd43:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd47:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd4f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd53:	75 0c                	jne    c000dd61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd55:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd5a:	c1 e0 18             	shl    eax,0x18
c000dd5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd61:	45                   	inc    ebp
c000dd62:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd67:	c1 e1 10             	shl    ecx,0x10
c000dd6a:	89 c8                	mov    eax,ecx
c000dd6c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd71:	c1 e1 08             	shl    ecx,0x8
c000dd74:	09 c1                	or     ecx,eax
c000dd76:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd7a:	09 c1                	or     ecx,eax
c000dd7c:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd80:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd84:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd88:	c1 f8 03             	sar    eax,0x3
c000dd8b:	01 c2                	add    edx,eax
c000dd8d:	89 e8                	mov    eax,ebp
c000dd8f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd93:	39 c6                	cmp    esi,eax
c000dd95:	7f b0                	jg     c000dd47 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dd97:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dd9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd9f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dda2:	7e 22                	jle    c000ddc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dda4:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dda8:	eb 99                	jmp    c000dd43 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000ddaa:	50                   	push   eax
c000ddab:	50                   	push   eax
c000ddac:	51                   	push   ecx
c000ddad:	68 c7 ff 01 c0       	push   0xc001ffc7
c000ddb2:	e8 57 c8 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000ddb7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddba:	e8 be 9a ff ff       	call   c000787d <free>
c000ddbf:	83 c4 10             	add    esp,0x10
c000ddc2:	31 ff                	xor    edi,edi
c000ddc4:	eb 0f                	jmp    c000ddd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ddc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddca:	89 30                	mov    DWORD PTR [eax],esi
c000ddcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddd0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ddd3:	89 30                	mov    DWORD PTR [eax],esi
c000ddd5:	83 c4 1c             	add    esp,0x1c
c000ddd8:	89 f8                	mov    eax,edi
c000ddda:	5b                   	pop    ebx
c000dddb:	5e                   	pop    esi
c000dddc:	5f                   	pop    edi
c000dddd:	5d                   	pop    ebp
c000ddde:	c3                   	ret    
c000dddf:	90                   	nop

c000dde0 <Video::putTGA(int, int, unsigned char*, int)>:
c000dde0:	55                   	push   ebp
c000dde1:	57                   	push   edi
c000dde2:	56                   	push   esi
c000dde3:	53                   	push   ebx
c000dde4:	83 ec 28             	sub    esp,0x28
c000dde7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ddeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddef:	50                   	push   eax
c000ddf0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddf4:	50                   	push   eax
c000ddf5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddf9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddfd:	56                   	push   esi
c000ddfe:	e8 75 fe ff ff       	call   c000dc78 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000de03:	83 c4 20             	add    esp,0x20
c000de06:	85 c0                	test   eax,eax
c000de08:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de0c:	74 35                	je     c000de43 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de0e:	89 c7                	mov    edi,eax
c000de10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de14:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de18:	39 d8                	cmp    eax,ebx
c000de1a:	7e 27                	jle    c000de43 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de1c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de20:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de24:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de28:	39 e8                	cmp    eax,ebp
c000de2a:	7e 14                	jle    c000de40 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de2c:	8b 06                	mov    eax,DWORD PTR [esi]
c000de2e:	83 c7 04             	add    edi,0x4
c000de31:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de34:	53                   	push   ebx
c000de35:	55                   	push   ebp
c000de36:	45                   	inc    ebp
c000de37:	56                   	push   esi
c000de38:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	eb e0                	jmp    c000de20 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de40:	43                   	inc    ebx
c000de41:	eb cd                	jmp    c000de10 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de43:	83 c4 1c             	add    esp,0x1c
c000de46:	5b                   	pop    ebx
c000de47:	5e                   	pop    esi
c000de48:	5f                   	pop    edi
c000de49:	5d                   	pop    ebp
c000de4a:	c3                   	ret    
c000de4b:	90                   	nop

c000de4c <ACPI::close(int, int, void*)>:
c000de4c:	83 ec 1c             	sub    esp,0x1c
c000de4f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de57:	74 0b                	je     c000de64 <ACPI::close(int, int, void*)+0x18>
c000de59:	b8 00 00 00 00       	mov    eax,0x0
c000de5e:	e9 9d 00 00 00       	jmp    c000df00 <ACPI::close(int, int, void*)+0xb4>
c000de63:	90                   	nop
c000de64:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de69:	75 29                	jne    c000de94 <ACPI::close(int, int, void*)+0x48>
c000de6b:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de70:	85 c0                	test   eax,eax
c000de72:	74 08                	je     c000de7c <ACPI::close(int, int, void*)+0x30>
c000de74:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de79:	ff d0                	call   eax
c000de7b:	90                   	nop
c000de7c:	83 ec 0c             	sub    esp,0xc
c000de7f:	68 28 00 02 c0       	push   0xc0020028
c000de84:	e8 46 25 00 00       	call   c00103cf <KePanic(char const*)>
c000de89:	83 c4 10             	add    esp,0x10
c000de8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de91:	eb 6d                	jmp    c000df00 <ACPI::close(int, int, void*)+0xb4>
c000de93:	90                   	nop
c000de94:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000de99:	75 5d                	jne    c000def8 <ACPI::close(int, int, void*)+0xac>
c000de9b:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dea0:	85 c0                	test   eax,eax
c000dea2:	74 08                	je     c000deac <ACPI::close(int, int, void*)+0x60>
c000dea4:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dea9:	ff d0                	call   eax
c000deab:	90                   	nop
c000deac:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000deb1:	8d 76 00             	lea    esi,[esi+0x0]
c000deb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000deb8:	25 ff 00 00 00       	and    eax,0xff
c000debd:	83 e0 02             	and    eax,0x2
c000dec0:	74 1e                	je     c000dee0 <ACPI::close(int, int, void*)+0x94>
c000dec2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dec9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000decd:	89 c2                	mov    edx,eax
c000decf:	ec                   	in     al,dx
c000ded0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ded4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ded8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dedc:	eb d6                	jmp    c000deb4 <ACPI::close(int, int, void*)+0x68>
c000dede:	66 90                	xchg   ax,ax
c000dee0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dee7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000deec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000def0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000def4:	ee                   	out    dx,al
c000def5:	8d 76 00             	lea    esi,[esi+0x0]
c000def8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000defd:	8d 76 00             	lea    esi,[esi+0x0]
c000df00:	83 c4 1c             	add    esp,0x1c
c000df03:	c3                   	ret    

c000df04 <findRSDP()>:
c000df04:	83 ec 1c             	sub    esp,0x1c
c000df07:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df0c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df12:	83 e0 04             	and    eax,0x4
c000df15:	84 c0                	test   al,al
c000df17:	75 07                	jne    c000df20 <findRSDP()+0x1c>
c000df19:	b8 00 00 00 00       	mov    eax,0x0
c000df1e:	eb 70                	jmp    c000df90 <findRSDP()+0x8c>
c000df20:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df25:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df2a:	7f 1c                	jg     c000df48 <findRSDP()+0x44>
c000df2c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df31:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df37:	83 e2 fb             	and    edx,0xfffffffb
c000df3a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df40:	b8 00 00 00 00       	mov    eax,0x0
c000df45:	eb 49                	jmp    c000df90 <findRSDP()+0x8c>
c000df47:	90                   	nop
c000df48:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df50:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df58:	77 2e                	ja     c000df88 <findRSDP()+0x84>
c000df5a:	83 ec 04             	sub    esp,0x4
c000df5d:	6a 08                	push   0x8
c000df5f:	68 c3 00 02 c0       	push   0xc00200c3
c000df64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df68:	e8 13 24 ff ff       	call   c0000380 <memcmp>
c000df6d:	83 c4 10             	add    esp,0x10
c000df70:	85 c0                	test   eax,eax
c000df72:	0f 94 c0             	sete   al
c000df75:	84 c0                	test   al,al
c000df77:	74 07                	je     c000df80 <findRSDP()+0x7c>
c000df79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df7d:	eb 11                	jmp    c000df90 <findRSDP()+0x8c>
c000df7f:	90                   	nop
c000df80:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df85:	eb c9                	jmp    c000df50 <findRSDP()+0x4c>
c000df87:	90                   	nop
c000df88:	b8 00 00 00 00       	mov    eax,0x0
c000df8d:	8d 76 00             	lea    esi,[esi+0x0]
c000df90:	83 c4 1c             	add    esp,0x1c
c000df93:	c3                   	ret    

c000df94 <loadACPITables(unsigned char*)>:
c000df94:	57                   	push   edi
c000df95:	56                   	push   esi
c000df96:	53                   	push   ebx
c000df97:	83 ec 60             	sub    esp,0x60
c000df9a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df9f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfa5:	83 e0 04             	and    eax,0x4
c000dfa8:	84 c0                	test   al,al
c000dfaa:	0f 84 3c 02 00 00    	je     c000e1ec <loadACPITables(unsigned char*)+0x258>
c000dfb0:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000dfb5:	84 c0                	test   al,al
c000dfb7:	74 77                	je     c000e030 <loadACPITables(unsigned char*)+0x9c>
c000dfb9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfbd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dfc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfc8:	83 e8 24             	sub    eax,0x24
c000dfcb:	c1 e8 03             	shr    eax,0x3
c000dfce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dfd2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfda:	66 90                	xchg   ax,ax
c000dfdc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfe0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dfe4:	0f 8d b6 00 00 00    	jge    c000e0a0 <loadACPITables(unsigned char*)+0x10c>
c000dfea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfee:	83 c0 24             	add    eax,0x24
c000dff1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dff5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dff9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dffd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e001:	c1 e0 03             	shl    eax,0x3
c000e004:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e008:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e00c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e00f:	8b 00                	mov    eax,DWORD PTR [eax]
c000e011:	89 c1                	mov    ecx,eax
c000e013:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e018:	8d 50 01             	lea    edx,[eax+0x1]
c000e01b:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e021:	89 ca                	mov    edx,ecx
c000e023:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e02a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e02e:	eb ac                	jmp    c000dfdc <loadACPITables(unsigned char*)+0x48>
c000e030:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e034:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e038:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e03c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e03f:	83 e8 24             	sub    eax,0x24
c000e042:	c1 e8 02             	shr    eax,0x2
c000e045:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e049:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e051:	8d 76 00             	lea    esi,[esi+0x0]
c000e054:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e058:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e05c:	7d 42                	jge    c000e0a0 <loadACPITables(unsigned char*)+0x10c>
c000e05e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e062:	83 c0 24             	add    eax,0x24
c000e065:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e069:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e06d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e071:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e075:	c1 e0 02             	shl    eax,0x2
c000e078:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e07c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e080:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e082:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e087:	8d 50 01             	lea    edx,[eax+0x1]
c000e08a:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e090:	89 ca                	mov    edx,ecx
c000e092:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e099:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e09d:	eb b5                	jmp    c000e054 <loadACPITables(unsigned char*)+0xc0>
c000e09f:	90                   	nop
c000e0a0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0a8:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0ad:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0b1:	0f 8d 39 01 00 00    	jge    c000e1f0 <loadACPITables(unsigned char*)+0x25c>
c000e0b7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0bb:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e0c2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0ca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0d2:	25 ff 0f 00 00       	and    eax,0xfff
c000e0d7:	89 c6                	mov    esi,eax
c000e0d9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0df:	83 ec 0c             	sub    esp,0xc
c000e0e2:	6a 01                	push   0x1
c000e0e4:	e8 68 b2 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e0e9:	83 c4 10             	add    esp,0x10
c000e0ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0f6:	83 ec 0c             	sub    esp,0xc
c000e0f9:	6a 01                	push   0x1
c000e0fb:	6a 01                	push   0x1
c000e0fd:	50                   	push   eax
c000e0fe:	52                   	push   edx
c000e0ff:	53                   	push   ebx
c000e100:	e8 09 bc ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e105:	83 c4 20             	add    esp,0x20
c000e108:	09 f0                	or     eax,esi
c000e10a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e10e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e112:	c1 e0 03             	shl    eax,0x3
c000e115:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e11a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e11e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e122:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e126:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e12e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e132:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e136:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e13a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e13e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e142:	89 c6                	mov    esi,eax
c000e144:	89 d7                	mov    edi,edx
c000e146:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e148:	89 c8                	mov    eax,ecx
c000e14a:	89 fa                	mov    edx,edi
c000e14c:	89 f3                	mov    ebx,esi
c000e14e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e152:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e156:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e15a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e15e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e161:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e165:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e169:	05 00 10 00 00       	add    eax,0x1000
c000e16e:	c1 e8 0c             	shr    eax,0xc
c000e171:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e179:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e17d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e181:	25 ff 0f 00 00       	and    eax,0xfff
c000e186:	89 c6                	mov    esi,eax
c000e188:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e18e:	83 ec 0c             	sub    esp,0xc
c000e191:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e195:	e8 b7 b1 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e19a:	83 c4 10             	add    esp,0x10
c000e19d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e1a1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1a7:	83 ec 0c             	sub    esp,0xc
c000e1aa:	6a 01                	push   0x1
c000e1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1b0:	50                   	push   eax
c000e1b1:	52                   	push   edx
c000e1b2:	53                   	push   ebx
c000e1b3:	e8 56 bb ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1b8:	83 c4 20             	add    esp,0x20
c000e1bb:	09 f0                	or     eax,esi
c000e1bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c5:	83 ec 0c             	sub    esp,0xc
c000e1c8:	50                   	push   eax
c000e1c9:	e8 77 b4 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1ce:	83 c4 10             	add    esp,0x10
c000e1d1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1d9:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e1e0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1e4:	e9 bf fe ff ff       	jmp    c000e0a8 <loadACPITables(unsigned char*)+0x114>
c000e1e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1ec:	90                   	nop
c000e1ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e1f0:	83 c4 60             	add    esp,0x60
c000e1f3:	5b                   	pop    ebx
c000e1f4:	5e                   	pop    esi
c000e1f5:	5f                   	pop    edi
c000e1f6:	c3                   	ret    
c000e1f7:	90                   	nop

c000e1f8 <findRSDT(unsigned char*)>:
c000e1f8:	57                   	push   edi
c000e1f9:	56                   	push   esi
c000e1fa:	53                   	push   ebx
c000e1fb:	83 ec 50             	sub    esp,0x50
c000e1fe:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e203:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e209:	83 e0 04             	and    eax,0x4
c000e20c:	84 c0                	test   al,al
c000e20e:	75 0c                	jne    c000e21c <findRSDT(unsigned char*)+0x24>
c000e210:	b8 00 00 00 00       	mov    eax,0x0
c000e215:	e9 26 01 00 00       	jmp    c000e340 <findRSDT(unsigned char*)+0x148>
c000e21a:	66 90                	xchg   ax,ax
c000e21c:	89 e0                	mov    eax,esp
c000e21e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e222:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e226:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e22a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e236:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e23a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e23e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e242:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e246:	89 c6                	mov    esi,eax
c000e248:	89 d7                	mov    edi,edx
c000e24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e24c:	89 c8                	mov    eax,ecx
c000e24e:	89 fa                	mov    edx,edi
c000e250:	89 f3                	mov    ebx,esi
c000e252:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e256:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e25a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e25e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e262:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e266:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e26e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e276:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e27e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e282:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e286:	25 ff 0f 00 00       	and    eax,0xfff
c000e28b:	89 c6                	mov    esi,eax
c000e28d:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e293:	83 ec 0c             	sub    esp,0xc
c000e296:	6a 02                	push   0x2
c000e298:	e8 b4 b0 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e29d:	83 c4 10             	add    esp,0x10
c000e2a0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e2a4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2aa:	83 ec 0c             	sub    esp,0xc
c000e2ad:	6a 01                	push   0x1
c000e2af:	6a 02                	push   0x2
c000e2b1:	50                   	push   eax
c000e2b2:	52                   	push   edx
c000e2b3:	53                   	push   ebx
c000e2b4:	e8 55 ba ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2b9:	83 c4 20             	add    esp,0x20
c000e2bc:	09 f0                	or     eax,esi
c000e2be:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2c6:	25 ff 0f 00 00       	and    eax,0xfff
c000e2cb:	89 c6                	mov    esi,eax
c000e2cd:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2d3:	83 ec 0c             	sub    esp,0xc
c000e2d6:	6a 02                	push   0x2
c000e2d8:	e8 74 b0 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c000e2dd:	83 c4 10             	add    esp,0x10
c000e2e0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2e4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	6a 01                	push   0x1
c000e2ef:	6a 02                	push   0x2
c000e2f1:	50                   	push   eax
c000e2f2:	52                   	push   edx
c000e2f3:	53                   	push   ebx
c000e2f4:	e8 15 ba ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2f9:	83 c4 20             	add    esp,0x20
c000e2fc:	09 f0                	or     eax,esi
c000e2fe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e302:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e307:	75 13                	jne    c000e31c <findRSDT(unsigned char*)+0x124>
c000e309:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e310:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e314:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e318:	eb 22                	jmp    c000e33c <findRSDT(unsigned char*)+0x144>
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e321:	75 11                	jne    c000e334 <findRSDT(unsigned char*)+0x13c>
c000e323:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e32a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e32e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e332:	eb 08                	jmp    c000e33c <findRSDT(unsigned char*)+0x144>
c000e334:	b8 00 00 00 00       	mov    eax,0x0
c000e339:	eb 05                	jmp    c000e340 <findRSDT(unsigned char*)+0x148>
c000e33b:	90                   	nop
c000e33c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e340:	83 c4 50             	add    esp,0x50
c000e343:	5b                   	pop    ebx
c000e344:	5e                   	pop    esi
c000e345:	5f                   	pop    edi
c000e346:	c3                   	ret    
c000e347:	90                   	nop

c000e348 <findDataTable(unsigned char*, char*)>:
c000e348:	83 ec 1c             	sub    esp,0x1c
c000e34b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e350:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e356:	83 e0 04             	and    eax,0x4
c000e359:	84 c0                	test   al,al
c000e35b:	75 07                	jne    c000e364 <findDataTable(unsigned char*, char*)+0x1c>
c000e35d:	b8 00 00 00 00       	mov    eax,0x0
c000e362:	eb 58                	jmp    c000e3bc <findDataTable(unsigned char*, char*)+0x74>
c000e364:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e36c:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e371:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e375:	7d 3d                	jge    c000e3b4 <findDataTable(unsigned char*, char*)+0x6c>
c000e377:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e37b:	c1 e0 03             	shl    eax,0x3
c000e37e:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e383:	83 ec 04             	sub    esp,0x4
c000e386:	6a 04                	push   0x4
c000e388:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e38c:	50                   	push   eax
c000e38d:	e8 ee 1f ff ff       	call   c0000380 <memcmp>
c000e392:	83 c4 10             	add    esp,0x10
c000e395:	85 c0                	test   eax,eax
c000e397:	0f 94 c0             	sete   al
c000e39a:	84 c0                	test   al,al
c000e39c:	74 0e                	je     c000e3ac <findDataTable(unsigned char*, char*)+0x64>
c000e39e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3a2:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e3a9:	eb 11                	jmp    c000e3bc <findDataTable(unsigned char*, char*)+0x74>
c000e3ab:	90                   	nop
c000e3ac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3b0:	eb ba                	jmp    c000e36c <findDataTable(unsigned char*, char*)+0x24>
c000e3b2:	66 90                	xchg   ax,ax
c000e3b4:	b8 00 00 00 00       	mov    eax,0x0
c000e3b9:	8d 76 00             	lea    esi,[esi+0x0]
c000e3bc:	83 c4 1c             	add    esp,0x1c
c000e3bf:	c3                   	ret    

c000e3c0 <scanMADT()>:
c000e3c0:	53                   	push   ebx
c000e3c1:	83 ec 38             	sub    esp,0x38
c000e3c4:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e3c9:	25 00 04 00 00       	and    eax,0x400
c000e3ce:	74 14                	je     c000e3e4 <scanMADT()+0x24>
c000e3d0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3d5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3db:	83 e2 fb             	and    edx,0xfffffffb
c000e3de:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3e4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3e9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3ef:	83 e0 04             	and    eax,0x4
c000e3f2:	84 c0                	test   al,al
c000e3f4:	0f 84 8a 04 00 00    	je     c000e884 <scanMADT()+0x4c4>
c000e3fa:	e8 05 fb ff ff       	call   c000df04 <findRSDP()>
c000e3ff:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e404:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e409:	85 c0                	test   eax,eax
c000e40b:	75 1b                	jne    c000e428 <scanMADT()+0x68>
c000e40d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e412:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e418:	83 e2 fb             	and    edx,0xfffffffb
c000e41b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e421:	e9 66 04 00 00       	jmp    c000e88c <scanMADT()+0x4cc>
c000e426:	66 90                	xchg   ax,ax
c000e428:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e42d:	83 ec 0c             	sub    esp,0xc
c000e430:	50                   	push   eax
c000e431:	e8 c2 fd ff ff       	call   c000e1f8 <findRSDT(unsigned char*)>
c000e436:	83 c4 10             	add    esp,0x10
c000e439:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e43e:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e443:	85 c0                	test   eax,eax
c000e445:	75 19                	jne    c000e460 <scanMADT()+0xa0>
c000e447:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e44c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e452:	83 e2 fb             	and    edx,0xfffffffb
c000e455:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e45b:	e9 2c 04 00 00       	jmp    c000e88c <scanMADT()+0x4cc>
c000e460:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e465:	83 ec 0c             	sub    esp,0xc
c000e468:	50                   	push   eax
c000e469:	e8 26 fb ff ff       	call   c000df94 <loadACPITables(unsigned char*)>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e476:	83 ec 08             	sub    esp,0x8
c000e479:	68 cc 00 02 c0       	push   0xc00200cc
c000e47e:	50                   	push   eax
c000e47f:	e8 c4 fe ff ff       	call   c000e348 <findDataTable(unsigned char*, char*)>
c000e484:	83 c4 10             	add    esp,0x10
c000e487:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e48b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e490:	75 1a                	jne    c000e4ac <scanMADT()+0xec>
c000e492:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e497:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e49d:	83 e2 fe             	and    edx,0xfffffffe
c000e4a0:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4a6:	e9 e1 03 00 00       	jmp    c000e88c <scanMADT()+0x4cc>
c000e4ab:	90                   	nop
c000e4ac:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4bb:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4bf:	0f 87 c7 03 00 00    	ja     c000e88c <scanMADT()+0x4cc>
c000e4c5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e4cd:	0f 87 b9 03 00 00    	ja     c000e88c <scanMADT()+0x4cc>
c000e4d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4df:	8d 50 01             	lea    edx,[eax+0x1]
c000e4e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ea:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4ee:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f6:	8d 50 01             	lea    edx,[eax+0x1]
c000e4f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e501:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e505:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e509:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e50e:	0f 86 74 03 00 00    	jbe    c000e888 <scanMADT()+0x4c8>
c000e514:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e519:	75 5d                	jne    c000e578 <scanMADT()+0x1b8>
c000e51b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e51f:	8d 50 01             	lea    edx,[eax+0x1]
c000e522:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e526:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e52c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e532:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e536:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e53a:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e540:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e544:	8d 42 01             	lea    eax,[edx+0x1]
c000e547:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e54b:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e550:	8d 48 01             	lea    ecx,[eax+0x1]
c000e553:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e559:	25 ff 00 00 00       	and    eax,0xff
c000e55e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e562:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e566:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e56c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e571:	e9 f6 02 00 00       	jmp    c000e86c <scanMADT()+0x4ac>
c000e576:	66 90                	xchg   ax,ax
c000e578:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e57d:	0f 85 29 01 00 00    	jne    c000e6ac <scanMADT()+0x2ec>
c000e583:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e587:	8d 50 01             	lea    edx,[eax+0x1]
c000e58a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e58e:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e594:	81 e2 ff 00 00 00    	and    edx,0xff
c000e59a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e59e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e5a2:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e5a8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b4:	01 d0                	add    eax,edx
c000e5b6:	83 c0 2c             	add    eax,0x2c
c000e5b9:	8a 00                	mov    al,BYTE PTR [eax]
c000e5bb:	31 d2                	xor    edx,edx
c000e5bd:	88 c2                	mov    dl,al
c000e5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ca:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5ce:	25 ff 00 00 00       	and    eax,0xff
c000e5d3:	c1 e0 08             	shl    eax,0x8
c000e5d6:	89 d1                	mov    ecx,edx
c000e5d8:	09 c1                	or     ecx,eax
c000e5da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5de:	8d 50 02             	lea    edx,[eax+0x2]
c000e5e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5e9:	25 ff 00 00 00       	and    eax,0xff
c000e5ee:	c1 e0 10             	shl    eax,0x10
c000e5f1:	09 c1                	or     ecx,eax
c000e5f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5f7:	8d 50 03             	lea    edx,[eax+0x3]
c000e5fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e602:	25 ff 00 00 00       	and    eax,0xff
c000e607:	c1 e0 18             	shl    eax,0x18
c000e60a:	09 c1                	or     ecx,eax
c000e60c:	89 ca                	mov    edx,ecx
c000e60e:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e613:	25 ff 00 00 00       	and    eax,0xff
c000e618:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e61f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e624:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e628:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e62c:	01 d0                	add    eax,edx
c000e62e:	83 c0 2c             	add    eax,0x2c
c000e631:	8a 00                	mov    al,BYTE PTR [eax]
c000e633:	31 d2                	xor    edx,edx
c000e635:	88 c2                	mov    dl,al
c000e637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e63b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e63e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e642:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e646:	25 ff 00 00 00       	and    eax,0xff
c000e64b:	c1 e0 08             	shl    eax,0x8
c000e64e:	89 d1                	mov    ecx,edx
c000e650:	09 c1                	or     ecx,eax
c000e652:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e656:	8d 50 02             	lea    edx,[eax+0x2]
c000e659:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e65d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e661:	25 ff 00 00 00       	and    eax,0xff
c000e666:	c1 e0 10             	shl    eax,0x10
c000e669:	09 c1                	or     ecx,eax
c000e66b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e66f:	8d 50 03             	lea    edx,[eax+0x3]
c000e672:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e676:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e67a:	25 ff 00 00 00       	and    eax,0xff
c000e67f:	c1 e0 18             	shl    eax,0x18
c000e682:	09 c1                	or     ecx,eax
c000e684:	89 ca                	mov    edx,ecx
c000e686:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e68b:	25 ff 00 00 00       	and    eax,0xff
c000e690:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e697:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e69c:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e6a1:	40                   	inc    eax
c000e6a2:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e6a7:	e9 c0 01 00 00       	jmp    c000e86c <scanMADT()+0x4ac>
c000e6ac:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6b1:	0f 85 fd 00 00 00    	jne    c000e7b4 <scanMADT()+0x3f4>
c000e6b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e6be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6ca:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e6ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6d2:	8d 50 01             	lea    edx,[eax+0x1]
c000e6d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6dd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6e1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6ed:	01 d0                	add    eax,edx
c000e6ef:	83 c0 2c             	add    eax,0x2c
c000e6f2:	8a 00                	mov    al,BYTE PTR [eax]
c000e6f4:	31 d2                	xor    edx,edx
c000e6f6:	88 c2                	mov    dl,al
c000e6f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6fc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e703:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e707:	25 ff 00 00 00       	and    eax,0xff
c000e70c:	c1 e0 08             	shl    eax,0x8
c000e70f:	89 d1                	mov    ecx,edx
c000e711:	09 c1                	or     ecx,eax
c000e713:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e717:	8d 50 02             	lea    edx,[eax+0x2]
c000e71a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e71e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e722:	25 ff 00 00 00       	and    eax,0xff
c000e727:	c1 e0 10             	shl    eax,0x10
c000e72a:	09 c1                	or     ecx,eax
c000e72c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e730:	8d 50 03             	lea    edx,[eax+0x3]
c000e733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e737:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e73b:	25 ff 00 00 00       	and    eax,0xff
c000e740:	c1 e0 18             	shl    eax,0x18
c000e743:	09 c8                	or     eax,ecx
c000e745:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e749:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e74e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e752:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e756:	01 d0                	add    eax,edx
c000e758:	83 c0 2c             	add    eax,0x2c
c000e75b:	8a 00                	mov    al,BYTE PTR [eax]
c000e75d:	25 ff 00 00 00       	and    eax,0xff
c000e762:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e766:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e769:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e76d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e771:	81 e2 ff 00 00 00    	and    edx,0xff
c000e777:	c1 e2 08             	shl    edx,0x8
c000e77a:	09 d0                	or     eax,edx
c000e77c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e781:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e786:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e78a:	25 ff 00 00 00       	and    eax,0xff
c000e78f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e793:	88 90 00 17 02 c0    	mov    BYTE PTR [eax-0x3ffde900],dl
c000e799:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e79d:	31 d2                	xor    edx,edx
c000e79f:	88 c2                	mov    dl,al
c000e7a1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e7a6:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e7ae:	e9 b9 00 00 00       	jmp    c000e86c <scanMADT()+0x4ac>
c000e7b3:	90                   	nop
c000e7b4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7b9:	0f 85 a1 00 00 00    	jne    c000e860 <scanMADT()+0x4a0>
c000e7bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7c3:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7d2:	25 ff 00 00 00       	and    eax,0xff
c000e7d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7db:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7e3:	01 d0                	add    eax,edx
c000e7e5:	83 c0 2c             	add    eax,0x2c
c000e7e8:	8a 00                	mov    al,BYTE PTR [eax]
c000e7ea:	31 d2                	xor    edx,edx
c000e7ec:	88 c2                	mov    dl,al
c000e7ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7f2:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7f9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e7fd:	25 ff 00 00 00       	and    eax,0xff
c000e802:	c1 e0 08             	shl    eax,0x8
c000e805:	09 d0                	or     eax,edx
c000e807:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e80b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e814:	8d 50 01             	lea    edx,[eax+0x1]
c000e817:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e81b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e81f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e823:	25 ff 00 00 00       	and    eax,0xff
c000e828:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e830:	c1 e0 08             	shl    eax,0x8
c000e833:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e837:	89 c1                	mov    ecx,eax
c000e839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e83d:	c1 e0 18             	shl    eax,0x18
c000e840:	89 c3                	mov    ebx,eax
c000e842:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e847:	8d 50 01             	lea    edx,[eax+0x1]
c000e84a:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e850:	09 d9                	or     ecx,ebx
c000e852:	89 ca                	mov    edx,ecx
c000e854:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e85b:	eb 0f                	jmp    c000e86c <scanMADT()+0x4ac>
c000e85d:	8d 76 00             	lea    esi,[esi+0x0]
c000e860:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e865:	75 05                	jne    c000e86c <scanMADT()+0x4ac>
c000e867:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e86c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e870:	31 d2                	xor    edx,edx
c000e872:	88 c2                	mov    dl,al
c000e874:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e878:	01 d0                	add    eax,edx
c000e87a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e87e:	e9 31 fc ff ff       	jmp    c000e4b4 <scanMADT()+0xf4>
c000e883:	90                   	nop
c000e884:	90                   	nop
c000e885:	eb 05                	jmp    c000e88c <scanMADT()+0x4cc>
c000e887:	90                   	nop
c000e888:	90                   	nop
c000e889:	8d 76 00             	lea    esi,[esi+0x0]
c000e88c:	83 c4 38             	add    esp,0x38
c000e88f:	5b                   	pop    ebx
c000e890:	c3                   	ret    
c000e891:	90                   	nop
c000e892:	66 90                	xchg   ax,ax

c000e894 <ACPI::ACPI()>:
c000e894:	83 ec 0c             	sub    esp,0xc
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	83 ec 08             	sub    esp,0x8
c000e89e:	68 d1 00 02 c0       	push   0xc00200d1
c000e8a3:	50                   	push   eax
c000e8a4:	e8 3b d3 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000e8a9:	83 c4 10             	add    esp,0x10
c000e8ac:	ba 08 02 02 c0       	mov    edx,0xc0020208
c000e8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b5:	89 10                	mov    DWORD PTR [eax],edx
c000e8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8de:	e8 dd fa ff ff       	call   c000e3c0 <scanMADT()>
c000e8e3:	90                   	nop
c000e8e4:	83 c4 0c             	add    esp,0xc
c000e8e7:	c3                   	ret    

c000e8e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8e8:	83 ec 2c             	sub    esp,0x2c
c000e8eb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8f3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e8f7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e8fb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e900:	88 d0                	mov    al,dl
c000e902:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e906:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e90b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e913:	90                   	nop
c000e914:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e918:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e91e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e922:	0f 8d 9c 00 00 00    	jge    c000e9c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e928:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e92c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e930:	83 c2 2a             	add    edx,0x2a
c000e933:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e937:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e93c:	75 7a                	jne    c000e9b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e93e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e942:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e946:	83 c2 2a             	add    edx,0x2a
c000e949:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e94d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e951:	75 65                	jne    c000e9b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e953:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e958:	74 3a                	je     c000e994 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e95a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e95e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e962:	83 c2 2a             	add    edx,0x2a
c000e965:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e96d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e970:	39 c2                	cmp    edx,eax
c000e972:	74 10                	je     c000e984 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e974:	83 ec 0c             	sub    esp,0xc
c000e977:	68 4c 00 02 c0       	push   0xc002004c
c000e97c:	e8 4e 1a 00 00       	call   c00103cf <KePanic(char const*)>
c000e981:	83 c4 10             	add    esp,0x10
c000e984:	83 ec 0c             	sub    esp,0xc
c000e987:	68 d6 00 02 c0       	push   0xc00200d6
c000e98c:	e8 3e 1a 00 00       	call   c00103cf <KePanic(char const*)>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e998:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e99c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9a0:	83 c2 2a             	add    edx,0x2a
c000e9a3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e9a7:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9a9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9ac:	89 01                	mov    DWORD PTR [ecx],eax
c000e9ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9b1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9b6:	66 90                	xchg   ax,ax
c000e9b8:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9bc:	e9 53 ff ff ff       	jmp    c000e914 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9c4:	90                   	nop
c000e9c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c9:	83 c4 2c             	add    esp,0x2c
c000e9cc:	c2 04 00             	ret    0x4
c000e9cf:	90                   	nop

c000e9d0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e9d0:	83 ec 1c             	sub    esp,0x1c
c000e9d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9d7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9e4:	88 c8                	mov    al,cl
c000e9e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9ea:	88 d0                	mov    al,dl
c000e9ec:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9f4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9fe:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea01:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ea05:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea0d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea17:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea1e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea27:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea2d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea31:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea38:	83 c2 2a             	add    edx,0x2a
c000ea3b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea43:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea4d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea50:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea54:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea5c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea62:	8d 50 01             	lea    edx,[eax+0x1]
c000ea65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea69:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea73:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea79:	3d 00 02 00 00       	cmp    eax,0x200
c000ea7e:	75 10                	jne    c000ea90 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea80:	83 ec 0c             	sub    esp,0xc
c000ea83:	68 e5 00 02 c0       	push   0xc00200e5
c000ea88:	e8 42 19 00 00       	call   c00103cf <KePanic(char const*)>
c000ea8d:	83 c4 10             	add    esp,0x10
c000ea90:	90                   	nop
c000ea91:	83 c4 1c             	add    esp,0x1c
c000ea94:	c3                   	ret    
c000ea95:	90                   	nop
c000ea96:	66 90                	xchg   ax,ax

c000ea98 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ea98:	b8 00 00 00 00       	mov    eax,0x0
c000ea9d:	c3                   	ret    
c000ea9e:	66 90                	xchg   ax,ax

c000eaa0 <ACPI::detectPCI()>:
c000eaa0:	53                   	push   ebx
c000eaa1:	83 ec 28             	sub    esp,0x28
c000eaa4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eaa9:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eaae:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000eab3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eab9:	83 e0 04             	and    eax,0x4
c000eabc:	84 c0                	test   al,al
c000eabe:	74 2c                	je     c000eaec <ACPI::detectPCI()+0x4c>
c000eac0:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eac5:	83 ec 08             	sub    esp,0x8
c000eac8:	68 02 01 02 c0       	push   0xc0020102
c000eacd:	50                   	push   eax
c000eace:	e8 75 f8 ff ff       	call   c000e348 <findDataTable(unsigned char*, char*)>
c000ead3:	83 c4 10             	add    esp,0x10
c000ead6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eada:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eadf:	74 0b                	je     c000eaec <ACPI::detectPCI()+0x4c>
c000eae1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eae6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eaeb:	90                   	nop
c000eaec:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eaf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaf8:	8a 00                	mov    al,BYTE PTR [eax]
c000eafa:	3c 01                	cmp    al,0x1
c000eafc:	75 0e                	jne    c000eb0c <ACPI::detectPCI()+0x6c>
c000eafe:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb03:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb08:	eb 2a                	jmp    c000eb34 <ACPI::detectPCI()+0x94>
c000eb0a:	66 90                	xchg   ax,ax
c000eb0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb10:	8a 00                	mov    al,BYTE PTR [eax]
c000eb12:	3c 02                	cmp    al,0x2
c000eb14:	75 1e                	jne    c000eb34 <ACPI::detectPCI()+0x94>
c000eb16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb1b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb20:	74 12                	je     c000eb34 <ACPI::detectPCI()+0x94>
c000eb22:	83 ec 0c             	sub    esp,0xc
c000eb25:	68 7c 00 02 c0       	push   0xc002007c
c000eb2a:	e8 a0 18 00 00       	call   c00103cf <KePanic(char const*)>
c000eb2f:	83 c4 10             	add    esp,0x10
c000eb32:	66 90                	xchg   ax,ax
c000eb34:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb38:	83 f0 01             	xor    eax,0x1
c000eb3b:	84 c0                	test   al,al
c000eb3d:	74 41                	je     c000eb80 <ACPI::detectPCI()+0xe0>
c000eb3f:	e8 ec 15 ff ff       	call   c0000130 <manualPCIProbe>
c000eb44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb48:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb4d:	75 0d                	jne    c000eb5c <ACPI::detectPCI()+0xbc>
c000eb4f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb54:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb59:	eb 25                	jmp    c000eb80 <ACPI::detectPCI()+0xe0>
c000eb5b:	90                   	nop
c000eb5c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb61:	75 1d                	jne    c000eb80 <ACPI::detectPCI()+0xe0>
c000eb63:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb68:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb6d:	74 11                	je     c000eb80 <ACPI::detectPCI()+0xe0>
c000eb6f:	83 ec 0c             	sub    esp,0xc
c000eb72:	68 7c 00 02 c0       	push   0xc002007c
c000eb77:	e8 53 18 00 00       	call   c00103cf <KePanic(char const*)>
c000eb7c:	83 c4 10             	add    esp,0x10
c000eb7f:	90                   	nop
c000eb80:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb85:	0f 84 85 00 00 00    	je     c000ec10 <ACPI::detectPCI()+0x170>
c000eb8b:	83 ec 0c             	sub    esp,0xc
c000eb8e:	68 07 01 02 c0       	push   0xc0020107
c000eb93:	e8 bf 11 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000eb98:	83 c4 10             	add    esp,0x10
c000eb9b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eba3:	83 ec 0c             	sub    esp,0xc
c000eba6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ebaa:	e8 be 8c ff ff       	call   c000786d <malloc>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	89 c3                	mov    ebx,eax
c000ebb4:	83 ec 0c             	sub    esp,0xc
c000ebb7:	53                   	push   ebx
c000ebb8:	e8 65 ad 00 00       	call   c0019922 <PCI::PCI()>
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ebc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebc8:	83 ec 08             	sub    esp,0x8
c000ebcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebcf:	50                   	push   eax
c000ebd0:	e8 77 ce ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000ebd5:	83 c4 10             	add    esp,0x10
c000ebd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebdc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebde:	83 c0 08             	add    eax,0x8
c000ebe1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebe3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebe8:	74 0a                	je     c000ebf4 <ACPI::detectPCI()+0x154>
c000ebea:	ba 01 00 00 00       	mov    edx,0x1
c000ebef:	eb 0b                	jmp    c000ebfc <ACPI::detectPCI()+0x15c>
c000ebf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf4:	ba 02 00 00 00       	mov    edx,0x2
c000ebf9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebfc:	6a 00                	push   0x0
c000ebfe:	6a 00                	push   0x0
c000ec00:	52                   	push   edx
c000ec01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec05:	ff d0                	call   eax
c000ec07:	83 c4 10             	add    esp,0x10
c000ec0a:	e9 91 00 00 00       	jmp    c000eca0 <ACPI::detectPCI()+0x200>
c000ec0f:	90                   	nop
c000ec10:	83 ec 0c             	sub    esp,0xc
c000ec13:	68 1f 01 02 c0       	push   0xc002011f
c000ec18:	e8 3a 11 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000ec1d:	83 c4 10             	add    esp,0x10
c000ec20:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec27:	83 ec 0c             	sub    esp,0xc
c000ec2a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec2e:	e8 3a 8c ff ff       	call   c000786d <malloc>
c000ec33:	83 c4 10             	add    esp,0x10
c000ec36:	89 c3                	mov    ebx,eax
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	53                   	push   ebx
c000ec3c:	e8 47 b8 00 00       	call   c001a488 <IDE::IDE()>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec4c:	83 ec 08             	sub    esp,0x8
c000ec4f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec53:	50                   	push   eax
c000ec54:	e8 f3 cd ff ff       	call   c000ba4c <Device::addChild(Device*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec60:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec6e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec7b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec8a:	83 c0 08             	add    eax,0x8
c000ec8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec8f:	6a 00                	push   0x0
c000ec91:	6a 00                	push   0x0
c000ec93:	6a 00                	push   0x0
c000ec95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec99:	ff d0                	call   eax
c000ec9b:	83 c4 10             	add    esp,0x10
c000ec9e:	66 90                	xchg   ax,ax
c000eca0:	90                   	nop
c000eca1:	83 c4 28             	add    esp,0x28
c000eca4:	5b                   	pop    ebx
c000eca5:	c3                   	ret    
c000eca6:	66 90                	xchg   ax,ax

c000eca8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eca8:	83 ec 1c             	sub    esp,0x1c
c000ecab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecaf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecb2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecb6:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecc0:	25 ff 00 00 00       	and    eax,0xff
c000ecc5:	83 ec 08             	sub    esp,0x8
c000ecc8:	50                   	push   eax
c000ecc9:	52                   	push   edx
c000ecca:	e8 89 82 ff ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c000eccf:	83 c4 10             	add    esp,0x10
c000ecd2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ecd6:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecdc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ece0:	25 ff 00 00 00       	and    eax,0xff
c000ece5:	83 ec 04             	sub    esp,0x4
c000ece8:	6a 01                	push   0x1
c000ecea:	50                   	push   eax
c000eceb:	52                   	push   edx
c000ecec:	e8 7d 83 ff ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c000ecf1:	83 c4 10             	add    esp,0x10
c000ecf4:	90                   	nop
c000ecf5:	83 c4 1c             	add    esp,0x1c
c000ecf8:	c3                   	ret    
c000ecf9:	90                   	nop
c000ecfa:	66 90                	xchg   ax,ax

c000ecfc <ACPI::sleep()>:
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed04:	85 c0                	test   eax,eax
c000ed06:	74 08                	je     c000ed10 <ACPI::sleep()+0x14>
c000ed08:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed0d:	ff d0                	call   eax
c000ed0f:	90                   	nop
c000ed10:	90                   	nop
c000ed11:	83 c4 0c             	add    esp,0xc
c000ed14:	c3                   	ret    
c000ed15:	90                   	nop
c000ed16:	66 90                	xchg   ax,ax

c000ed18 <ACPI::open(int, int, void*)>:
c000ed18:	57                   	push   edi
c000ed19:	56                   	push   esi
c000ed1a:	53                   	push   ebx
c000ed1b:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed21:	83 ec 0c             	sub    esp,0xc
c000ed24:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed2b:	e8 70 fd ff ff       	call   c000eaa0 <ACPI::detectPCI()>
c000ed30:	83 c4 10             	add    esp,0x10
c000ed33:	83 ec 0c             	sub    esp,0xc
c000ed36:	68 a4 00 02 c0       	push   0xc00200a4
c000ed3b:	e8 17 10 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	83 ec 0c             	sub    esp,0xc
c000ed46:	68 34 01 02 c0       	push   0xc0020134
c000ed4b:	e8 e5 48 00 00       	call   c0013635 <Thr::loadKernelSymbolTable(char const*)>
c000ed50:	83 c4 10             	add    esp,0x10
c000ed53:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed5b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed66:	83 ec 0c             	sub    esp,0xc
c000ed69:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed70:	e8 f8 8a ff ff       	call   c000786d <malloc>
c000ed75:	83 c4 10             	add    esp,0x10
c000ed78:	89 c3                	mov    ebx,eax
c000ed7a:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ed7f:	83 ec 04             	sub    esp,0x4
c000ed82:	50                   	push   eax
c000ed83:	68 52 01 02 c0       	push   0xc0020152
c000ed88:	53                   	push   ebx
c000ed89:	e8 f6 bd ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000ed8e:	83 c4 10             	add    esp,0x10
c000ed91:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ed98:	83 ec 08             	sub    esp,0x8
c000ed9b:	6a 01                	push   0x1
c000ed9d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eda4:	e8 9b be ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edb3:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000edbb:	75 17                	jne    c000edd4 <ACPI::open(int, int, void*)+0xbc>
c000edbd:	83 ec 0c             	sub    esp,0xc
c000edc0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edc7:	e8 d6 be ff ff       	call   c000aca2 <File::close()>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	eb 0b                	jmp    c000eddc <ACPI::open(int, int, void*)+0xc4>
c000edd1:	8d 76 00             	lea    esi,[esi+0x0]
c000edd4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eddc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ede4:	74 1e                	je     c000ee04 <ACPI::open(int, int, void*)+0xec>
c000ede6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eded:	8b 00                	mov    eax,DWORD PTR [eax]
c000edef:	83 c0 08             	add    eax,0x8
c000edf2:	8b 00                	mov    eax,DWORD PTR [eax]
c000edf4:	83 ec 0c             	sub    esp,0xc
c000edf7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edfe:	ff d0                	call   eax
c000ee00:	83 c4 10             	add    esp,0x10
c000ee03:	90                   	nop
c000ee04:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee0b:	83 f0 01             	xor    eax,0x1
c000ee0e:	84 c0                	test   al,al
c000ee10:	74 42                	je     c000ee54 <ACPI::open(int, int, void*)+0x13c>
c000ee12:	83 ec 0c             	sub    esp,0xc
c000ee15:	68 70 01 02 c0       	push   0xc0020170
c000ee1a:	e8 38 0f 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000ee1f:	83 c4 10             	add    esp,0x10
c000ee22:	83 ec 04             	sub    esp,0x4
c000ee25:	6a 0c                	push   0xc
c000ee27:	68 8b 01 02 c0       	push   0xc002018b
c000ee2c:	68 9c 01 02 c0       	push   0xc002019c
c000ee31:	e8 a9 3b 00 00       	call   c00129df <Reg::readIntWithDefault(char*, char*, int)>
c000ee36:	83 c4 10             	add    esp,0x10
c000ee39:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee4a:	e8 0c a7 ff ff       	call   c000955b <Virt::setupPageSwapping(int)>
c000ee4f:	83 c4 10             	add    esp,0x10
c000ee52:	66 90                	xchg   ax,ax
c000ee54:	83 ec 0c             	sub    esp,0xc
c000ee57:	68 f5 f1 01 c0       	push   0xc001f1f5
c000ee5c:	e8 f6 0e 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee6b:	83 ec 08             	sub    esp,0x8
c000ee6e:	6a 13                	push   0x13
c000ee70:	50                   	push   eax
c000ee71:	e8 ee ce ff ff       	call   c000bd64 <getDevicesOfType(DeviceType)>
c000ee76:	83 c4 0c             	add    esp,0xc
c000ee79:	8d 76 00             	lea    esi,[esi+0x0]
c000ee7c:	83 ec 0c             	sub    esp,0xc
c000ee7f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee86:	50                   	push   eax
c000ee87:	e8 50 f7 00 00       	call   c001e5dc <LinkedList<Device>::isEmpty()>
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	83 f0 01             	xor    eax,0x1
c000ee92:	84 c0                	test   al,al
c000ee94:	0f 84 46 01 00 00    	je     c000efe0 <ACPI::open(int, int, void*)+0x2c8>
c000ee9a:	83 ec 0c             	sub    esp,0xc
c000ee9d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eea4:	50                   	push   eax
c000eea5:	e8 4e f7 00 00       	call   c001e5f8 <LinkedList<Device>::getFirstElement()>
c000eeaa:	83 c4 10             	add    esp,0x10
c000eead:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eeb4:	83 ec 0c             	sub    esp,0xc
c000eeb7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eebe:	50                   	push   eax
c000eebf:	e8 3c f7 00 00       	call   c001e600 <LinkedList<Device>::removeFirst()>
c000eec4:	83 c4 10             	add    esp,0x10
c000eec7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eece:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eed5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eedc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eee0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eee6:	ba 09 00 00 00       	mov    edx,0x9
c000eeeb:	fc                   	cld    
c000eeec:	89 c7                	mov    edi,eax
c000eeee:	89 de                	mov    esi,ebx
c000eef0:	89 d1                	mov    ecx,edx
c000eef2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eef4:	83 ec 08             	sub    esp,0x8
c000eef7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eefb:	50                   	push   eax
c000eefc:	83 ec 24             	sub    esp,0x24
c000eeff:	89 e0                	mov    eax,esp
c000ef01:	89 c3                	mov    ebx,eax
c000ef03:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ef07:	ba 09 00 00 00       	mov    edx,0x9
c000ef0c:	89 df                	mov    edi,ebx
c000ef0e:	89 c6                	mov    esi,eax
c000ef10:	89 d1                	mov    ecx,edx
c000ef12:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef14:	e8 eb ae 00 00       	call   c0019e04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef19:	83 c4 30             	add    esp,0x30
c000ef1c:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef23:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef2b:	0f 84 4b ff ff ff    	je     c000ee7c <ACPI::open(int, int, void*)+0x164>
c000ef31:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef3c:	83 ec 0c             	sub    esp,0xc
c000ef3f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef46:	e8 22 89 ff ff       	call   c000786d <malloc>
c000ef4b:	83 c4 10             	add    esp,0x10
c000ef4e:	89 c3                	mov    ebx,eax
c000ef50:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef55:	83 ec 04             	sub    esp,0x4
c000ef58:	50                   	push   eax
c000ef59:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef60:	53                   	push   ebx
c000ef61:	e8 1e bc ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000ef66:	83 c4 10             	add    esp,0x10
c000ef69:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef70:	83 ec 0c             	sub    esp,0xc
c000ef73:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef7a:	e8 33 bf ff ff       	call   c000aeb2 <File::exists()>
c000ef7f:	83 c4 10             	add    esp,0x10
c000ef82:	84 c0                	test   al,al
c000ef84:	74 2a                	je     c000efb0 <ACPI::open(int, int, void*)+0x298>
c000ef86:	83 ec 08             	sub    esp,0x8
c000ef89:	6a 01                	push   0x1
c000ef8b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef92:	e8 15 51 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000ef97:	83 c4 10             	add    esp,0x10
c000ef9a:	83 ec 08             	sub    esp,0x8
c000ef9d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efa4:	50                   	push   eax
c000efa5:	e8 33 53 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000efaa:	83 c4 10             	add    esp,0x10
c000efad:	8d 76 00             	lea    esi,[esi+0x0]
c000efb0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000efb8:	0f 84 be fe ff ff    	je     c000ee7c <ACPI::open(int, int, void*)+0x164>
c000efbe:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000efc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000efc7:	83 c0 08             	add    eax,0x8
c000efca:	8b 00                	mov    eax,DWORD PTR [eax]
c000efcc:	83 ec 0c             	sub    esp,0xc
c000efcf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efd6:	ff d0                	call   eax
c000efd8:	83 c4 10             	add    esp,0x10
c000efdb:	e9 9c fe ff ff       	jmp    c000ee7c <ACPI::open(int, int, void*)+0x164>
c000efe0:	83 ec 0c             	sub    esp,0xc
c000efe3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000efea:	50                   	push   eax
c000efeb:	e8 e8 f5 00 00       	call   c001e5d8 <LinkedList<Device>::~LinkedList()>
c000eff0:	83 c4 10             	add    esp,0x10
c000eff3:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000eff9:	83 ec 08             	sub    esp,0x8
c000effc:	6a 01                	push   0x1
c000effe:	68 a3 01 02 c0       	push   0xc00201a3
c000f003:	e8 a4 50 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000f008:	83 c4 10             	add    esp,0x10
c000f00b:	83 ec 08             	sub    esp,0x8
c000f00e:	53                   	push   ebx
c000f00f:	50                   	push   eax
c000f010:	e8 c8 52 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000f015:	83 c4 10             	add    esp,0x10
c000f018:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f01d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f023:	83 e0 04             	and    eax,0x4
c000f026:	84 c0                	test   al,al
c000f028:	0f 84 16 01 00 00    	je     c000f144 <ACPI::open(int, int, void*)+0x42c>
c000f02e:	83 ec 0c             	sub    esp,0xc
c000f031:	68 c0 01 02 c0       	push   0xc00201c0
c000f036:	e8 1c 0d 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000f03b:	83 c4 10             	add    esp,0x10
c000f03e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f049:	83 ec 0c             	sub    esp,0xc
c000f04c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f053:	e8 15 88 ff ff       	call   c000786d <malloc>
c000f058:	83 c4 10             	add    esp,0x10
c000f05b:	89 c3                	mov    ebx,eax
c000f05d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f062:	83 ec 04             	sub    esp,0x4
c000f065:	50                   	push   eax
c000f066:	68 dd 01 02 c0       	push   0xc00201dd
c000f06b:	53                   	push   ebx
c000f06c:	e8 13 bb ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000f071:	83 c4 10             	add    esp,0x10
c000f074:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f07b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f083:	74 1b                	je     c000f0a0 <ACPI::open(int, int, void*)+0x388>
c000f085:	83 ec 0c             	sub    esp,0xc
c000f088:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f08f:	e8 1e be ff ff       	call   c000aeb2 <File::exists()>
c000f094:	83 c4 10             	add    esp,0x10
c000f097:	84 c0                	test   al,al
c000f099:	74 05                	je     c000f0a0 <ACPI::open(int, int, void*)+0x388>
c000f09b:	b0 01                	mov    al,0x1
c000f09d:	eb 05                	jmp    c000f0a4 <ACPI::open(int, int, void*)+0x38c>
c000f09f:	90                   	nop
c000f0a0:	b0 00                	mov    al,0x0
c000f0a2:	66 90                	xchg   ax,ax
c000f0a4:	84 c0                	test   al,al
c000f0a6:	74 28                	je     c000f0d0 <ACPI::open(int, int, void*)+0x3b8>
c000f0a8:	83 ec 08             	sub    esp,0x8
c000f0ab:	6a 01                	push   0x1
c000f0ad:	68 dd 01 02 c0       	push   0xc00201dd
c000f0b2:	e8 f5 4f 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c000f0b7:	83 c4 10             	add    esp,0x10
c000f0ba:	83 ec 08             	sub    esp,0x8
c000f0bd:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0c4:	50                   	push   eax
c000f0c5:	e8 13 52 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c000f0ca:	83 c4 10             	add    esp,0x10
c000f0cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0d8:	74 2a                	je     c000f104 <ACPI::open(int, int, void*)+0x3ec>
c000f0da:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0e2:	74 20                	je     c000f104 <ACPI::open(int, int, void*)+0x3ec>
c000f0e4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ed:	83 c0 08             	add    eax,0x8
c000f0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f2:	83 ec 0c             	sub    esp,0xc
c000f0f5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0fc:	ff d0                	call   eax
c000f0fe:	83 c4 10             	add    esp,0x10
c000f101:	8d 76 00             	lea    esi,[esi+0x0]
c000f104:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f109:	83 ec 08             	sub    esp,0x8
c000f10c:	68 fa 01 02 c0       	push   0xc00201fa
c000f111:	50                   	push   eax
c000f112:	e8 31 f2 ff ff       	call   c000e348 <findDataTable(unsigned char*, char*)>
c000f117:	83 c4 10             	add    esp,0x10
c000f11a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f121:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f129:	74 19                	je     c000f144 <ACPI::open(int, int, void*)+0x42c>
c000f12b:	83 ec 08             	sub    esp,0x8
c000f12e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f135:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f13c:	e8 67 fb ff ff       	call   c000eca8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f141:	83 c4 10             	add    esp,0x10
c000f144:	b8 00 00 00 00       	mov    eax,0x0
c000f149:	81 c4 70 01 00 00    	add    esp,0x170
c000f14f:	5b                   	pop    ebx
c000f150:	5e                   	pop    esi
c000f151:	5f                   	pop    edi
c000f152:	c3                   	ret    
c000f153:	90                   	nop

c000f154 <CPU::close(int, int, void*)>:
c000f154:	31 c0                	xor    eax,eax
c000f156:	c3                   	ret    
c000f157:	90                   	nop

c000f158 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f158:	60                   	pusha  
c000f159:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f15d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f161:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f165:	9c                   	pushf  
c000f166:	fa                   	cli    
c000f167:	0f 09                	wbinvd 
c000f169:	0f 30                	wrmsr  
c000f16b:	9d                   	popf   
c000f16c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f170:	89 02                	mov    DWORD PTR [edx],eax
c000f172:	61                   	popa   
c000f173:	c3                   	ret    

c000f174 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f174:	60                   	pusha  
c000f175:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f179:	9c                   	pushf  
c000f17a:	fa                   	cli    
c000f17b:	0f 09                	wbinvd 
c000f17d:	31 c0                	xor    eax,eax
c000f17f:	31 d2                	xor    edx,edx
c000f181:	0f 32                	rdmsr  
c000f183:	9d                   	popf   
c000f184:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f188:	89 02                	mov    DWORD PTR [edx],eax
c000f18a:	61                   	popa   
c000f18b:	c3                   	ret    

c000f18c <CPU::AMD_K6_writeback(int, int, int)>:
c000f18c:	56                   	push   esi
c000f18d:	53                   	push   ebx
c000f18e:	83 ec 10             	sub    esp,0x10
c000f191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f195:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f19a:	75 5d                	jne    c000f1f9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f19c:	83 f8 08             	cmp    eax,0x8
c000f19f:	75 09                	jne    c000f1aa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f1a1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f1a6:	7e 13                	jle    c000f1bb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1a8:	eb 30                	jmp    c000f1da <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1aa:	83 f8 06             	cmp    eax,0x6
c000f1ad:	7c 4a                	jl     c000f1f9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1af:	83 f8 07             	cmp    eax,0x7
c000f1b2:	7e 07                	jle    c000f1bb <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1b4:	83 f8 09             	cmp    eax,0x9
c000f1b7:	74 21                	je     c000f1da <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1b9:	eb 3e                	jmp    c000f1f9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1bb:	89 e6                	mov    esi,esp
c000f1bd:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f1c3:	56                   	push   esi
c000f1c4:	c1 eb 15             	shr    ebx,0x15
c000f1c7:	68 82 00 00 c0       	push   0xc0000082
c000f1cc:	83 e3 7e             	and    ebx,0x7e
c000f1cf:	e8 a0 ff ff ff       	call   c000f174 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1d4:	56                   	push   esi
c000f1d5:	6a 00                	push   0x0
c000f1d7:	53                   	push   ebx
c000f1d8:	eb 12                	jmp    c000f1ec <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1da:	89 e3                	mov    ebx,esp
c000f1dc:	53                   	push   ebx
c000f1dd:	68 82 00 00 c0       	push   0xc0000082
c000f1e2:	e8 8d ff ff ff       	call   c000f174 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1e7:	53                   	push   ebx
c000f1e8:	6a 00                	push   0x0
c000f1ea:	6a 00                	push   0x0
c000f1ec:	68 82 00 00 c0       	push   0xc0000082
c000f1f1:	e8 62 ff ff ff       	call   c000f158 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f1f6:	83 c4 18             	add    esp,0x18
c000f1f9:	83 c4 10             	add    esp,0x10
c000f1fc:	5b                   	pop    ebx
c000f1fd:	5e                   	pop    esi
c000f1fe:	c3                   	ret    
c000f1ff:	90                   	nop

c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f200:	55                   	push   ebp
c000f201:	57                   	push   edi
c000f202:	56                   	push   esi
c000f203:	53                   	push   ebx
c000f204:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f208:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f20c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f210:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f214:	39 05 10 17 02 c0    	cmp    DWORD PTR ds:0xc0021710,eax
c000f21a:	75 23                	jne    c000f23f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f21c:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f221:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f225:	89 06                	mov    DWORD PTR [esi],eax
c000f227:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f22c:	89 07                	mov    DWORD PTR [edi],eax
c000f22e:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f233:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f236:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f23b:	89 02                	mov    DWORD PTR [edx],eax
c000f23d:	eb 3f                	jmp    c000f27e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f23f:	31 c9                	xor    ecx,ecx
c000f241:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f245:	0f a2                	cpuid  
c000f247:	89 06                	mov    DWORD PTR [esi],eax
c000f249:	89 1f                	mov    DWORD PTR [edi],ebx
c000f24b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f24f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f252:	89 10                	mov    DWORD PTR [eax],edx
c000f254:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f258:	a3 10 17 02 c0       	mov    ds:0xc0021710,eax
c000f25d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f25f:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f264:	8b 07                	mov    eax,DWORD PTR [edi]
c000f266:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f26b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f26e:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f273:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f277:	8b 00                	mov    eax,DWORD PTR [eax]
c000f279:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f27e:	5b                   	pop    ebx
c000f27f:	5e                   	pop    esi
c000f280:	5f                   	pop    edi
c000f281:	5d                   	pop    ebp
c000f282:	c3                   	ret    
c000f283:	90                   	nop

c000f284 <CPU::cpuidCheckEDX(unsigned int)>:
c000f284:	83 ec 10             	sub    esp,0x10
c000f287:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f28b:	50                   	push   eax
c000f28c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f290:	50                   	push   eax
c000f291:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f295:	50                   	push   eax
c000f296:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f29a:	50                   	push   eax
c000f29b:	6a 01                	push   0x1
c000f29d:	e8 5e ff ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2a6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2aa:	0f 95 c0             	setne  al
c000f2ad:	83 c4 24             	add    esp,0x24
c000f2b0:	c3                   	ret    
c000f2b1:	90                   	nop

c000f2b2 <CPU::cpuidCheckECX(unsigned int)>:
c000f2b2:	83 ec 10             	sub    esp,0x10
c000f2b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2b9:	50                   	push   eax
c000f2ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2be:	50                   	push   eax
c000f2bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c3:	50                   	push   eax
c000f2c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c8:	50                   	push   eax
c000f2c9:	6a 01                	push   0x1
c000f2cb:	e8 30 ff ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2d4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2d8:	0f 95 c0             	setne  al
c000f2db:	83 c4 24             	add    esp,0x24
c000f2de:	c3                   	ret    
c000f2df:	90                   	nop

c000f2e0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2e0:	83 ec 10             	sub    esp,0x10
c000f2e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2ec:	50                   	push   eax
c000f2ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f1:	50                   	push   eax
c000f2f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f6:	50                   	push   eax
c000f2f7:	6a 07                	push   0x7
c000f2f9:	e8 02 ff ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f302:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f306:	0f 95 c0             	setne  al
c000f309:	83 c4 24             	add    esp,0x24
c000f30c:	c3                   	ret    
c000f30d:	90                   	nop

c000f30e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f30e:	83 ec 10             	sub    esp,0x10
c000f311:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f315:	50                   	push   eax
c000f316:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f31a:	50                   	push   eax
c000f31b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f31f:	50                   	push   eax
c000f320:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f324:	50                   	push   eax
c000f325:	6a 07                	push   0x7
c000f327:	e8 d4 fe ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f32c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f330:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f334:	0f 95 c0             	setne  al
c000f337:	83 c4 24             	add    esp,0x24
c000f33a:	c3                   	ret    
c000f33b:	90                   	nop

c000f33c <CPU::CPU()>:
c000f33c:	83 ec 0c             	sub    esp,0xc
c000f33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f343:	83 ec 08             	sub    esp,0x8
c000f346:	68 1d 03 02 c0       	push   0xc002031d
c000f34b:	50                   	push   eax
c000f34c:	e8 93 c8 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c000f351:	83 c4 10             	add    esp,0x10
c000f354:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c000f359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f35d:	89 10                	mov    DWORD PTR [eax],edx
c000f35f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f363:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f36d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f371:	05 78 01 00 00       	add    eax,0x178
c000f376:	83 ec 0c             	sub    esp,0xc
c000f379:	50                   	push   eax
c000f37a:	e8 ad 7d ff ff       	call   c000712c <GDT::GDT()>
c000f37f:	83 c4 10             	add    esp,0x10
c000f382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f386:	05 7c 09 00 00       	add    eax,0x97c
c000f38b:	83 ec 0c             	sub    esp,0xc
c000f38e:	50                   	push   eax
c000f38f:	e8 d4 7f ff ff       	call   c0007368 <IDT::IDT()>
c000f394:	83 c4 10             	add    esp,0x10
c000f397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39b:	05 7c 11 00 00       	add    eax,0x117c
c000f3a0:	83 ec 0c             	sub    esp,0xc
c000f3a3:	50                   	push   eax
c000f3a4:	e8 eb 98 ff ff       	call   c0008c94 <TSS::TSS()>
c000f3a9:	83 c4 10             	add    esp,0x10
c000f3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3bb:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f3c5:	90                   	nop
c000f3c6:	83 c4 0c             	add    esp,0xc
c000f3c9:	c3                   	ret    

c000f3ca <CPU::displayFeatures()>:
c000f3ca:	c3                   	ret    
c000f3cb:	90                   	nop

c000f3cc <CPU::detectFeatures()>:
c000f3cc:	55                   	push   ebp
c000f3cd:	57                   	push   edi
c000f3ce:	56                   	push   esi
c000f3cf:	53                   	push   ebx
c000f3d0:	83 ec 30             	sub    esp,0x30
c000f3d3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3d7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3e1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3e8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3ee:	6a 0d                	push   0xd
c000f3f0:	6a 00                	push   0x0
c000f3f2:	55                   	push   ebp
c000f3f3:	e8 c8 10 ff ff       	call   c00004c0 <memset>
c000f3f8:	83 c4 10             	add    esp,0x10
c000f3fb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f400:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f407:	0f 84 d5 05 00 00    	je     c000f9e2 <CPU::detectFeatures()+0x616>
c000f40d:	83 ec 0c             	sub    esp,0xc
c000f410:	89 ef                	mov    edi,ebp
c000f412:	6a 10                	push   0x10
c000f414:	e8 6b fe ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f419:	83 e0 01             	and    eax,0x1
c000f41c:	8d 14 00             	lea    edx,[eax+eax*1]
c000f41f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f425:	83 e0 fd             	and    eax,0xfffffffd
c000f428:	09 d0                	or     eax,edx
c000f42a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f430:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f437:	e8 48 fe ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f43c:	83 e0 01             	and    eax,0x1
c000f43f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f446:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f44c:	83 e0 fb             	and    eax,0xfffffffb
c000f44f:	09 d0                	or     eax,edx
c000f451:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f457:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f45e:	e8 21 fe ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f463:	83 e0 01             	and    eax,0x1
c000f466:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f46d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f473:	83 e0 f7             	and    eax,0xfffffff7
c000f476:	09 d0                	or     eax,edx
c000f478:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f47e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f485:	e8 fa fd ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f48a:	83 e0 01             	and    eax,0x1
c000f48d:	c1 e0 04             	shl    eax,0x4
c000f490:	88 c2                	mov    dl,al
c000f492:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f498:	83 e0 ef             	and    eax,0xffffffef
c000f49b:	09 d0                	or     eax,edx
c000f49d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4a3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4aa:	e8 d5 fd ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f4af:	83 e0 01             	and    eax,0x1
c000f4b2:	c1 e0 05             	shl    eax,0x5
c000f4b5:	88 c2                	mov    dl,al
c000f4b7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4bd:	83 e0 df             	and    eax,0xffffffdf
c000f4c0:	09 d0                	or     eax,edx
c000f4c2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4c8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f4cf:	e8 b0 fd ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f4d4:	83 e0 01             	and    eax,0x1
c000f4d7:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4da:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4e0:	83 e0 fd             	and    eax,0xfffffffd
c000f4e3:	09 d0                	or     eax,edx
c000f4e5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4eb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4f2:	e8 8d fd ff ff       	call   c000f284 <CPU::cpuidCheckEDX(unsigned int)>
c000f4f7:	83 e0 01             	and    eax,0x1
c000f4fa:	c1 e0 06             	shl    eax,0x6
c000f4fd:	88 c2                	mov    dl,al
c000f4ff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f505:	83 e0 bf             	and    eax,0xffffffbf
c000f508:	09 d0                	or     eax,edx
c000f50a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f510:	58                   	pop    eax
c000f511:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f515:	50                   	push   eax
c000f516:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f51a:	50                   	push   eax
c000f51b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f51f:	56                   	push   esi
c000f520:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f524:	50                   	push   eax
c000f525:	6a 00                	push   0x0
c000f527:	e8 d4 fc ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f52c:	b8 04 00 00 00       	mov    eax,0x4
c000f531:	89 c1                	mov    ecx,eax
c000f533:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f535:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f53b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f53f:	89 c1                	mov    ecx,eax
c000f541:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f543:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f549:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f54d:	89 c1                	mov    ecx,eax
c000f54f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f551:	83 c4 18             	add    esp,0x18
c000f554:	68 2c 02 02 c0       	push   0xc002022c
c000f559:	55                   	push   ebp
c000f55a:	e8 71 11 ff ff       	call   c00006d0 <strcmp>
c000f55f:	83 c4 10             	add    esp,0x10
c000f562:	85 c0                	test   eax,eax
c000f564:	75 0f                	jne    c000f575 <CPU::detectFeatures()+0x1a9>
c000f566:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f570:	e9 22 02 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f575:	50                   	push   eax
c000f576:	50                   	push   eax
c000f577:	68 39 02 02 c0       	push   0xc0020239
c000f57c:	55                   	push   ebp
c000f57d:	e8 4e 11 ff ff       	call   c00006d0 <strcmp>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	85 c0                	test   eax,eax
c000f587:	74 dd                	je     c000f566 <CPU::detectFeatures()+0x19a>
c000f589:	50                   	push   eax
c000f58a:	50                   	push   eax
c000f58b:	68 46 02 02 c0       	push   0xc0020246
c000f590:	55                   	push   ebp
c000f591:	e8 3a 11 ff ff       	call   c00006d0 <strcmp>
c000f596:	83 c4 10             	add    esp,0x10
c000f599:	85 c0                	test   eax,eax
c000f59b:	74 2a                	je     c000f5c7 <CPU::detectFeatures()+0x1fb>
c000f59d:	50                   	push   eax
c000f59e:	50                   	push   eax
c000f59f:	68 53 02 02 c0       	push   0xc0020253
c000f5a4:	55                   	push   ebp
c000f5a5:	e8 26 11 ff ff       	call   c00006d0 <strcmp>
c000f5aa:	83 c4 10             	add    esp,0x10
c000f5ad:	85 c0                	test   eax,eax
c000f5af:	74 16                	je     c000f5c7 <CPU::detectFeatures()+0x1fb>
c000f5b1:	50                   	push   eax
c000f5b2:	50                   	push   eax
c000f5b3:	68 60 02 02 c0       	push   0xc0020260
c000f5b8:	55                   	push   ebp
c000f5b9:	e8 12 11 ff ff       	call   c00006d0 <strcmp>
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	85 c0                	test   eax,eax
c000f5c3:	74 48                	je     c000f60d <CPU::detectFeatures()+0x241>
c000f5c5:	eb 0f                	jmp    c000f5d6 <CPU::detectFeatures()+0x20a>
c000f5c7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f5d1:	e9 c1 01 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f5d6:	50                   	push   eax
c000f5d7:	50                   	push   eax
c000f5d8:	68 6d 02 02 c0       	push   0xc002026d
c000f5dd:	55                   	push   ebp
c000f5de:	e8 ed 10 ff ff       	call   c00006d0 <strcmp>
c000f5e3:	83 c4 10             	add    esp,0x10
c000f5e6:	85 c0                	test   eax,eax
c000f5e8:	74 23                	je     c000f60d <CPU::detectFeatures()+0x241>
c000f5ea:	57                   	push   edi
c000f5eb:	57                   	push   edi
c000f5ec:	68 7a 02 02 c0       	push   0xc002027a
c000f5f1:	55                   	push   ebp
c000f5f2:	e8 d9 10 ff ff       	call   c00006d0 <strcmp>
c000f5f7:	83 c4 10             	add    esp,0x10
c000f5fa:	85 c0                	test   eax,eax
c000f5fc:	75 1e                	jne    c000f61c <CPU::detectFeatures()+0x250>
c000f5fe:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f608:	e9 8a 01 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f60d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f617:	e9 7b 01 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f61c:	56                   	push   esi
c000f61d:	56                   	push   esi
c000f61e:	68 87 02 02 c0       	push   0xc0020287
c000f623:	55                   	push   ebp
c000f624:	e8 a7 10 ff ff       	call   c00006d0 <strcmp>
c000f629:	83 c4 10             	add    esp,0x10
c000f62c:	85 c0                	test   eax,eax
c000f62e:	75 0f                	jne    c000f63f <CPU::detectFeatures()+0x273>
c000f630:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f63a:	e9 58 01 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f63f:	51                   	push   ecx
c000f640:	51                   	push   ecx
c000f641:	68 46 02 02 c0       	push   0xc0020246
c000f646:	55                   	push   ebp
c000f647:	e8 84 10 ff ff       	call   c00006d0 <strcmp>
c000f64c:	83 c4 10             	add    esp,0x10
c000f64f:	85 c0                	test   eax,eax
c000f651:	75 0f                	jne    c000f662 <CPU::detectFeatures()+0x296>
c000f653:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f65d:	e9 35 01 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f662:	52                   	push   edx
c000f663:	52                   	push   edx
c000f664:	68 94 02 02 c0       	push   0xc0020294
c000f669:	55                   	push   ebp
c000f66a:	e8 61 10 ff ff       	call   c00006d0 <strcmp>
c000f66f:	83 c4 10             	add    esp,0x10
c000f672:	85 c0                	test   eax,eax
c000f674:	75 0f                	jne    c000f685 <CPU::detectFeatures()+0x2b9>
c000f676:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f680:	e9 12 01 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f685:	50                   	push   eax
c000f686:	50                   	push   eax
c000f687:	68 a1 02 02 c0       	push   0xc00202a1
c000f68c:	55                   	push   ebp
c000f68d:	e8 3e 10 ff ff       	call   c00006d0 <strcmp>
c000f692:	83 c4 10             	add    esp,0x10
c000f695:	85 c0                	test   eax,eax
c000f697:	75 0f                	jne    c000f6a8 <CPU::detectFeatures()+0x2dc>
c000f699:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f6a3:	e9 ef 00 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f6a8:	50                   	push   eax
c000f6a9:	50                   	push   eax
c000f6aa:	68 ae 02 02 c0       	push   0xc00202ae
c000f6af:	55                   	push   ebp
c000f6b0:	e8 1b 10 ff ff       	call   c00006d0 <strcmp>
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	85 c0                	test   eax,eax
c000f6ba:	75 0f                	jne    c000f6cb <CPU::detectFeatures()+0x2ff>
c000f6bc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6c6:	e9 cc 00 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f6cb:	50                   	push   eax
c000f6cc:	50                   	push   eax
c000f6cd:	68 bb 02 02 c0       	push   0xc00202bb
c000f6d2:	55                   	push   ebp
c000f6d3:	e8 f8 0f ff ff       	call   c00006d0 <strcmp>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	85 c0                	test   eax,eax
c000f6dd:	75 0f                	jne    c000f6ee <CPU::detectFeatures()+0x322>
c000f6df:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6e9:	e9 a9 00 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f6ee:	50                   	push   eax
c000f6ef:	50                   	push   eax
c000f6f0:	68 c8 02 02 c0       	push   0xc00202c8
c000f6f5:	55                   	push   ebp
c000f6f6:	e8 d5 0f ff ff       	call   c00006d0 <strcmp>
c000f6fb:	83 c4 10             	add    esp,0x10
c000f6fe:	85 c0                	test   eax,eax
c000f700:	75 0f                	jne    c000f711 <CPU::detectFeatures()+0x345>
c000f702:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f70c:	e9 86 00 00 00       	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f711:	50                   	push   eax
c000f712:	50                   	push   eax
c000f713:	68 d5 02 02 c0       	push   0xc00202d5
c000f718:	55                   	push   ebp
c000f719:	e8 b2 0f ff ff       	call   c00006d0 <strcmp>
c000f71e:	83 c4 10             	add    esp,0x10
c000f721:	85 c0                	test   eax,eax
c000f723:	75 0c                	jne    c000f731 <CPU::detectFeatures()+0x365>
c000f725:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f72f:	eb 66                	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f731:	50                   	push   eax
c000f732:	50                   	push   eax
c000f733:	68 e2 02 02 c0       	push   0xc00202e2
c000f738:	55                   	push   ebp
c000f739:	e8 92 0f ff ff       	call   c00006d0 <strcmp>
c000f73e:	83 c4 10             	add    esp,0x10
c000f741:	85 c0                	test   eax,eax
c000f743:	75 0c                	jne    c000f751 <CPU::detectFeatures()+0x385>
c000f745:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f74f:	eb 46                	jmp    c000f797 <CPU::detectFeatures()+0x3cb>
c000f751:	57                   	push   edi
c000f752:	57                   	push   edi
c000f753:	68 ef 02 02 c0       	push   0xc00202ef
c000f758:	55                   	push   ebp
c000f759:	e8 72 0f ff ff       	call   c00006d0 <strcmp>
c000f75e:	83 c4 10             	add    esp,0x10
c000f761:	85 c0                	test   eax,eax
c000f763:	74 e0                	je     c000f745 <CPU::detectFeatures()+0x379>
c000f765:	56                   	push   esi
c000f766:	56                   	push   esi
c000f767:	68 fc 02 02 c0       	push   0xc00202fc
c000f76c:	55                   	push   ebp
c000f76d:	e8 5e 0f ff ff       	call   c00006d0 <strcmp>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	85 c0                	test   eax,eax
c000f777:	74 cc                	je     c000f745 <CPU::detectFeatures()+0x379>
c000f779:	51                   	push   ecx
c000f77a:	51                   	push   ecx
c000f77b:	68 09 03 02 c0       	push   0xc0020309
c000f780:	55                   	push   ebp
c000f781:	e8 4a 0f ff ff       	call   c00006d0 <strcmp>
c000f786:	83 c4 10             	add    esp,0x10
c000f789:	85 c0                	test   eax,eax
c000f78b:	74 b8                	je     c000f745 <CPU::detectFeatures()+0x379>
c000f78d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f797:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f79c:	0f 86 be 00 00 00    	jbe    c000f860 <CPU::detectFeatures()+0x494>
c000f7a2:	83 ec 0c             	sub    esp,0xc
c000f7a5:	68 80 00 00 00       	push   0x80
c000f7aa:	e8 31 fb ff ff       	call   c000f2e0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7af:	83 e0 01             	and    eax,0x1
c000f7b2:	c1 e0 06             	shl    eax,0x6
c000f7b5:	88 c2                	mov    dl,al
c000f7b7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7bd:	83 e0 bf             	and    eax,0xffffffbf
c000f7c0:	09 d0                	or     eax,edx
c000f7c2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7c8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f7cf:	e8 0c fb ff ff       	call   c000f2e0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7d4:	83 e0 01             	and    eax,0x1
c000f7d7:	c1 e0 04             	shl    eax,0x4
c000f7da:	88 c2                	mov    dl,al
c000f7dc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7e2:	83 e0 ef             	and    eax,0xffffffef
c000f7e5:	09 d0                	or     eax,edx
c000f7e7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7ed:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f7f4:	e8 e7 fa ff ff       	call   c000f2e0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7f9:	c1 e0 07             	shl    eax,0x7
c000f7fc:	88 c2                	mov    dl,al
c000f7fe:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f804:	83 e0 7f             	and    eax,0x7f
c000f807:	09 d0                	or     eax,edx
c000f809:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f80f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f816:	e8 f3 fa ff ff       	call   c000f30e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f81b:	83 e0 01             	and    eax,0x1
c000f81e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f825:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f82b:	83 e0 f7             	and    eax,0xfffffff7
c000f82e:	09 d0                	or     eax,edx
c000f830:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f836:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f83d:	e8 cc fa ff ff       	call   c000f30e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f842:	83 c4 10             	add    esp,0x10
c000f845:	83 e0 01             	and    eax,0x1
c000f848:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f84f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f855:	83 e0 fb             	and    eax,0xfffffffb
c000f858:	09 d0                	or     eax,edx
c000f85a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f860:	83 ec 0c             	sub    esp,0xc
c000f863:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f867:	50                   	push   eax
c000f868:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f86c:	50                   	push   eax
c000f86d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f871:	56                   	push   esi
c000f872:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f876:	50                   	push   eax
c000f877:	6a 01                	push   0x1
c000f879:	e8 82 f9 ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f87e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f882:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f888:	88 ca                	mov    dl,cl
c000f88a:	83 e0 f0             	and    eax,0xfffffff0
c000f88d:	83 e2 0f             	and    edx,0xf
c000f890:	09 d0                	or     eax,edx
c000f892:	88 ca                	mov    dl,cl
c000f894:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f89a:	c0 ea 04             	shr    dl,0x4
c000f89d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f8a1:	0f b6 c2             	movzx  eax,dl
c000f8a4:	83 c4 20             	add    esp,0x20
c000f8a7:	c1 e0 06             	shl    eax,0x6
c000f8aa:	89 c7                	mov    edi,eax
c000f8ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8b2:	66 25 3f c0          	and    ax,0xc03f
c000f8b6:	09 f8                	or     eax,edi
c000f8b8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8bf:	89 c8                	mov    eax,ecx
c000f8c1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f8c8:	c1 e8 08             	shr    eax,0x8
c000f8cb:	83 e5 3f             	and    ebp,0x3f
c000f8ce:	83 e0 0f             	and    eax,0xf
c000f8d1:	89 c7                	mov    edi,eax
c000f8d3:	c1 e7 06             	shl    edi,0x6
c000f8d6:	09 ef                	or     edi,ebp
c000f8d8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8df:	89 fa                	mov    edx,edi
c000f8e1:	83 e5 c0             	and    ebp,0xffffffc0
c000f8e4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8ea:	88 c2                	mov    dl,al
c000f8ec:	c0 ea 02             	shr    dl,0x2
c000f8ef:	89 d7                	mov    edi,edx
c000f8f1:	09 ef                	or     edi,ebp
c000f8f3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f8f9:	89 fa                	mov    edx,edi
c000f8fb:	83 e5 cf             	and    ebp,0xffffffcf
c000f8fe:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f904:	89 cf                	mov    edi,ecx
c000f906:	c1 ef 0c             	shr    edi,0xc
c000f909:	83 e7 03             	and    edi,0x3
c000f90c:	c1 e7 04             	shl    edi,0x4
c000f90f:	09 ef                	or     edi,ebp
c000f911:	3c 06                	cmp    al,0x6
c000f913:	89 fa                	mov    edx,edi
c000f915:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f91b:	74 04                	je     c000f921 <CPU::detectFeatures()+0x555>
c000f91d:	3c 0f                	cmp    al,0xf
c000f91f:	75 5c                	jne    c000f97d <CPU::detectFeatures()+0x5b1>
c000f921:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f925:	89 cf                	mov    edi,ecx
c000f927:	c1 ef 10             	shr    edi,0x10
c000f92a:	c1 e7 04             	shl    edi,0x4
c000f92d:	09 fa                	or     edx,edi
c000f92f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f935:	0f b6 d2             	movzx  edx,dl
c000f938:	66 81 e7 3f c0       	and    di,0xc03f
c000f93d:	c1 e2 06             	shl    edx,0x6
c000f940:	09 fa                	or     edx,edi
c000f942:	3c 0f                	cmp    al,0xf
c000f944:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f94b:	75 30                	jne    c000f97d <CPU::detectFeatures()+0x5b1>
c000f94d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f953:	c1 e9 14             	shr    ecx,0x14
c000f956:	83 e0 3f             	and    eax,0x3f
c000f959:	83 c1 0f             	add    ecx,0xf
c000f95c:	88 ca                	mov    dl,cl
c000f95e:	c0 e9 02             	shr    cl,0x2
c000f961:	c1 e2 06             	shl    edx,0x6
c000f964:	09 d0                	or     eax,edx
c000f966:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f96c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f972:	83 e0 c0             	and    eax,0xffffffc0
c000f975:	09 c1                	or     ecx,eax
c000f977:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f97d:	83 ec 0c             	sub    esp,0xc
c000f980:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f987:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f98b:	50                   	push   eax
c000f98c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f990:	55                   	push   ebp
c000f991:	56                   	push   esi
c000f992:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f996:	57                   	push   edi
c000f997:	68 00 00 00 80       	push   0x80000000
c000f99c:	e8 5f f8 ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9a1:	83 c4 20             	add    esp,0x20
c000f9a4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9ac:	76 22                	jbe    c000f9d0 <CPU::detectFeatures()+0x604>
c000f9ae:	83 ec 0c             	sub    esp,0xc
c000f9b1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9b5:	50                   	push   eax
c000f9b6:	55                   	push   ebp
c000f9b7:	56                   	push   esi
c000f9b8:	57                   	push   edi
c000f9b9:	68 01 00 00 80       	push   0x80000001
c000f9be:	e8 3d f8 ff ff       	call   c000f200 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9c3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f9cd:	83 c4 20             	add    esp,0x20
c000f9d0:	52                   	push   edx
c000f9d1:	52                   	push   edx
c000f9d2:	68 15 03 02 c0       	push   0xc0020315
c000f9d7:	53                   	push   ebx
c000f9d8:	e8 f9 c1 ff ff       	call   c000bbd6 <Device::setName(char const*)>
c000f9dd:	83 c4 10             	add    esp,0x10
c000f9e0:	eb 67                	jmp    c000fa49 <CPU::detectFeatures()+0x67d>
c000f9e2:	50                   	push   eax
c000f9e3:	50                   	push   eax
c000f9e4:	68 7a 02 02 c0       	push   0xc002027a
c000f9e9:	55                   	push   ebp
c000f9ea:	e8 01 0c ff ff       	call   c00005f0 <strcpy>
c000f9ef:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9f9:	e8 c5 07 ff ff       	call   c00001c3 <is486>
c000f9fe:	83 c4 10             	add    esp,0x10
c000fa01:	85 c0                	test   eax,eax
c000fa03:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa09:	74 1d                	je     c000fa28 <CPU::detectFeatures()+0x65c>
c000fa0b:	83 c8 07             	or     eax,0x7
c000fa0e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa14:	0f 20 c0             	mov    eax,cr0
c000fa17:	83 e0 14             	and    eax,0x14
c000fa1a:	83 f8 04             	cmp    eax,0x4
c000fa1d:	75 0e                	jne    c000fa2d <CPU::detectFeatures()+0x661>
c000fa1f:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa26:	eb 21                	jmp    c000fa49 <CPU::detectFeatures()+0x67d>
c000fa28:	83 e0 f8             	and    eax,0xfffffff8
c000fa2b:	eb e1                	jmp    c000fa0e <CPU::detectFeatures()+0x642>
c000fa2d:	e8 6c 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa32:	83 e0 01             	and    eax,0x1
c000fa35:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa38:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa3e:	83 e0 fd             	and    eax,0xfffffffd
c000fa41:	09 d0                	or     eax,edx
c000fa43:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa49:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa50:	74 0e                	je     c000fa60 <CPU::detectFeatures()+0x694>
c000fa52:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa57:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa5e:	eb 20                	jmp    c000fa80 <CPU::detectFeatures()+0x6b4>
c000fa60:	e8 39 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa65:	83 e0 01             	and    eax,0x1
c000fa68:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa6b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa71:	83 e0 fd             	and    eax,0xfffffffd
c000fa74:	09 d0                	or     eax,edx
c000fa76:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa7c:	a8 02                	test   al,0x2
c000fa7e:	75 d2                	jne    c000fa52 <CPU::detectFeatures()+0x686>
c000fa80:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa87:	83 c4 2c             	add    esp,0x2c
c000fa8a:	5b                   	pop    ebx
c000fa8b:	5e                   	pop    esi
c000fa8c:	5f                   	pop    edi
c000fa8d:	5d                   	pop    ebp
c000fa8e:	c3                   	ret    
c000fa8f:	90                   	nop

c000fa90 <CPU::setupSMEP()>:
c000fa90:	0f 20 e0             	mov    eax,cr4
c000fa93:	0d 00 00 10 00       	or     eax,0x100000
c000fa98:	0f 22 e0             	mov    cr4,eax
c000fa9b:	c3                   	ret    

c000fa9c <CPU::setupUMIP()>:
c000fa9c:	0f 20 e0             	mov    eax,cr4
c000fa9f:	80 cc 08             	or     ah,0x8
c000faa2:	0f 22 e0             	mov    cr4,eax
c000faa5:	c3                   	ret    

c000faa6 <CPU::setupTSC()>:
c000faa6:	0f 20 e0             	mov    eax,cr4
c000faa9:	83 c8 04             	or     eax,0x4
c000faac:	0f 22 e0             	mov    cr4,eax
c000faaf:	c3                   	ret    

c000fab0 <CPU::setupLargePages()>:
c000fab0:	0f 20 e0             	mov    eax,cr4
c000fab3:	83 c8 10             	or     eax,0x10
c000fab6:	0f 22 e0             	mov    cr4,eax
c000fab9:	c3                   	ret    

c000faba <CPU::setupPAT()>:
c000faba:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fabf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fac6:	74 2c                	je     c000faf4 <CPU::setupPAT()+0x3a>
c000fac8:	53                   	push   ebx
c000fac9:	83 ec 10             	sub    esp,0x10
c000facc:	68 77 02 00 00       	push   0x277
c000fad1:	50                   	push   eax
c000fad2:	e8 cd 73 ff ff       	call   c0006ea4 <Computer::rdmsr(unsigned int)>
c000fad7:	83 e2 f8             	and    edx,0xfffffff8
c000fada:	83 ca 01             	or     edx,0x1
c000fadd:	52                   	push   edx
c000fade:	50                   	push   eax
c000fadf:	68 77 02 00 00       	push   0x277
c000fae4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000faea:	e8 e1 73 ff ff       	call   c0006ed0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000faef:	83 c4 28             	add    esp,0x28
c000faf2:	5b                   	pop    ebx
c000faf3:	c3                   	ret    
c000faf4:	c3                   	ret    
c000faf5:	90                   	nop

c000faf6 <CPU::setupMTRR()>:
c000faf6:	c3                   	ret    
c000faf7:	90                   	nop

c000faf8 <CPU::setupGlobalPages()>:
c000faf8:	0f 20 e0             	mov    eax,cr4
c000fafb:	0c 80                	or     al,0x80
c000fafd:	0f 22 e0             	mov    cr4,eax
c000fb00:	c3                   	ret    
c000fb01:	90                   	nop

c000fb02 <CPU::allowUsermodeDataAccess()>:
c000fb02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb06:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb0d:	74 03                	je     c000fb12 <CPU::allowUsermodeDataAccess()+0x10>
c000fb0f:	0f 01 cb             	stac   
c000fb12:	c3                   	ret    
c000fb13:	90                   	nop

c000fb14 <CPU::prohibitUsermodeDataAccess()>:
c000fb14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb18:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb1f:	74 03                	je     c000fb24 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb21:	0f 01 ca             	clac   
c000fb24:	c3                   	ret    
c000fb25:	90                   	nop

c000fb26 <CPU::setupSMAP()>:
c000fb26:	0f 20 e0             	mov    eax,cr4
c000fb29:	0d 00 00 20 00       	or     eax,0x200000
c000fb2e:	0f 22 e0             	mov    cr4,eax
c000fb31:	eb e1                	jmp    c000fb14 <CPU::prohibitUsermodeDataAccess()>
c000fb33:	90                   	nop

c000fb34 <CPU::setupFeatures()>:
c000fb34:	53                   	push   ebx
c000fb35:	83 ec 08             	sub    esp,0x8
c000fb38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb3c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb43:	74 18                	je     c000fb5d <CPU::setupFeatures()+0x29>
c000fb45:	83 ec 0c             	sub    esp,0xc
c000fb48:	68 21 03 02 c0       	push   0xc0020321
c000fb4d:	e8 bc aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fb52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb55:	e8 42 ff ff ff       	call   c000fa9c <CPU::setupUMIP()>
c000fb5a:	83 c4 10             	add    esp,0x10
c000fb5d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb64:	74 18                	je     c000fb7e <CPU::setupFeatures()+0x4a>
c000fb66:	83 ec 0c             	sub    esp,0xc
c000fb69:	68 2b 03 02 c0       	push   0xc002032b
c000fb6e:	e8 9b aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fb73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb76:	e8 2b ff ff ff       	call   c000faa6 <CPU::setupTSC()>
c000fb7b:	83 c4 10             	add    esp,0x10
c000fb7e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb85:	74 18                	je     c000fb9f <CPU::setupFeatures()+0x6b>
c000fb87:	83 ec 0c             	sub    esp,0xc
c000fb8a:	68 34 03 02 c0       	push   0xc0020334
c000fb8f:	e8 7a aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fb94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb97:	e8 14 ff ff ff       	call   c000fab0 <CPU::setupLargePages()>
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fba6:	74 18                	je     c000fbc0 <CPU::setupFeatures()+0x8c>
c000fba8:	83 ec 0c             	sub    esp,0xc
c000fbab:	68 3d 03 02 c0       	push   0xc002033d
c000fbb0:	e8 59 aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fbb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb8:	e8 3b ff ff ff       	call   c000faf8 <CPU::setupGlobalPages()>
c000fbbd:	83 c4 10             	add    esp,0x10
c000fbc0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fbc7:	74 18                	je     c000fbe1 <CPU::setupFeatures()+0xad>
c000fbc9:	83 ec 0c             	sub    esp,0xc
c000fbcc:	68 4f 03 02 c0       	push   0xc002034f
c000fbd1:	e8 38 aa ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c000fbd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbd9:	e8 dc fe ff ff       	call   c000faba <CPU::setupPAT()>
c000fbde:	83 c4 10             	add    esp,0x10
c000fbe1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbe8:	74 11                	je     c000fbfb <CPU::setupFeatures()+0xc7>
c000fbea:	c7 44 24 10 58 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020358
c000fbf2:	83 c4 08             	add    esp,0x8
c000fbf5:	5b                   	pop    ebx
c000fbf6:	e9 13 aa ff ff       	jmp    c000a60e <Dbg::kprintf(char const*, ...)>
c000fbfb:	83 c4 08             	add    esp,0x8
c000fbfe:	5b                   	pop    ebx
c000fbff:	c3                   	ret    

c000fc00 <CPU::open(int, int, void*)>:
c000fc00:	57                   	push   edi
c000fc01:	56                   	push   esi
c000fc02:	53                   	push   ebx
c000fc03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc0b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc11:	83 ec 0c             	sub    esp,0xc
c000fc14:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc1a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc20:	50                   	push   eax
c000fc21:	e8 68 75 ff ff       	call   c000718e <GDT::setup()>
c000fc26:	83 c4 0c             	add    esp,0xc
c000fc29:	6a 00                	push   0x0
c000fc2b:	68 ef be ad de       	push   0xdeadbeef
c000fc30:	57                   	push   edi
c000fc31:	e8 a2 90 ff ff       	call   c0008cd8 <TSS::setup(unsigned long, unsigned long)>
c000fc36:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc39:	e8 7a 90 ff ff       	call   c0008cb8 <TSS::flush()>
c000fc3e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc44:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc47:	e8 92 77 ff ff       	call   c00073de <IDT::setup()>
c000fc4c:	b8 00 04 00 00       	mov    eax,0x400
c000fc51:	0f 23 f8             	mov    db7,eax
c000fc54:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc5e:	e8 e6 7e ff ff       	call   c0007b49 <Phys::allocatePage()>
c000fc63:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc69:	89 30                	mov    DWORD PTR [eax],esi
c000fc6b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc71:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc74:	58                   	pop    eax
c000fc75:	5a                   	pop    edx
c000fc76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc80:	e8 6b a0 ff ff       	call   c0009cf0 <VAS::setCPUSpecific(unsigned long)>
c000fc85:	c7 04 24 62 03 02 c0 	mov    DWORD PTR [esp],0xc0020362
c000fc8c:	e8 c6 00 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000fc91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc94:	e8 33 f7 ff ff       	call   c000f3cc <CPU::detectFeatures()>
c000fc99:	c7 04 24 85 03 02 c0 	mov    DWORD PTR [esp],0xc0020385
c000fca0:	e8 b2 00 00 00       	call   c000fd57 <KeSetBootMessage(char const*)>
c000fca5:	e8 9d 6d 00 00       	call   c0016a47 <HalInitialise()>
c000fcaa:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fcaf:	83 e0 10             	and    eax,0x10
c000fcb2:	83 f8 01             	cmp    eax,0x1
c000fcb5:	19 c0                	sbb    eax,eax
c000fcb7:	83 e0 46             	and    eax,0x46
c000fcba:	83 c0 1e             	add    eax,0x1e
c000fcbd:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcc0:	e8 dc d6 ff ff       	call   c000d3a1 <setupTimer(int)>
c000fcc5:	83 c4 10             	add    esp,0x10
c000fcc8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fcce:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fcd5:	74 0c                	je     c000fce3 <CPU::open(int, int, void*)+0xe3>
c000fcd7:	83 ec 0c             	sub    esp,0xc
c000fcda:	53                   	push   ebx
c000fcdb:	e8 54 fe ff ff       	call   c000fb34 <CPU::setupFeatures()>
c000fce0:	83 c4 10             	add    esp,0x10
c000fce3:	5b                   	pop    ebx
c000fce4:	31 c0                	xor    eax,eax
c000fce6:	5e                   	pop    esi
c000fce7:	5f                   	pop    edi
c000fce8:	c3                   	ret    

c000fce9 <KeDisplaySplashScreen()>:
c000fce9:	55                   	push   ebp
c000fcea:	bd 05 00 00 00       	mov    ebp,0x5
c000fcef:	57                   	push   edi
c000fcf0:	bf 20 17 02 c0       	mov    edi,0xc0021720
c000fcf5:	56                   	push   esi
c000fcf6:	be 0a 00 00 00       	mov    esi,0xa
c000fcfb:	53                   	push   ebx
c000fcfc:	31 db                	xor    ebx,ebx
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fd04:	84 c0                	test   al,al
c000fd06:	74 47                	je     c000fd4f <KeDisplaySplashScreen()+0x66>
c000fd08:	80 bb 56 17 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde8aa],0xdb
c000fd0f:	75 13                	jne    c000fd24 <KeDisplaySplashScreen()+0x3b>
c000fd11:	0f b6 93 55 17 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde8ab]
c000fd18:	83 e2 fe             	and    edx,0xfffffffe
c000fd1b:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd21:	75 01                	jne    c000fd24 <KeDisplaySplashScreen()+0x3b>
c000fd23:	46                   	inc    esi
c000fd24:	3c 0d                	cmp    al,0xd
c000fd26:	74 24                	je     c000fd4c <KeDisplaySplashScreen()+0x63>
c000fd28:	3c 0a                	cmp    al,0xa
c000fd2a:	75 0a                	jne    c000fd36 <KeDisplaySplashScreen()+0x4d>
c000fd2c:	45                   	inc    ebp
c000fd2d:	be 0a 00 00 00       	mov    esi,0xa
c000fd32:	31 db                	xor    ebx,ebx
c000fd34:	eb 16                	jmp    c000fd4c <KeDisplaySplashScreen()+0x63>
c000fd36:	83 ec 0c             	sub    esp,0xc
c000fd39:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd3c:	55                   	push   ebp
c000fd3d:	43                   	inc    ebx
c000fd3e:	52                   	push   edx
c000fd3f:	6a 00                	push   0x0
c000fd41:	6a 0e                	push   0xe
c000fd43:	50                   	push   eax
c000fd44:	e8 63 79 00 00       	call   c00176ac <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd49:	83 c4 20             	add    esp,0x20
c000fd4c:	47                   	inc    edi
c000fd4d:	eb b2                	jmp    c000fd01 <KeDisplaySplashScreen()+0x18>
c000fd4f:	83 c4 0c             	add    esp,0xc
c000fd52:	5b                   	pop    ebx
c000fd53:	5e                   	pop    esi
c000fd54:	5f                   	pop    edi
c000fd55:	5d                   	pop    ebp
c000fd56:	c3                   	ret    

c000fd57 <KeSetBootMessage(char const*)>:
c000fd57:	57                   	push   edi
c000fd58:	56                   	push   esi
c000fd59:	53                   	push   ebx
c000fd5a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd60:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd67:	68 9e 00 00 00       	push   0x9e
c000fd6c:	6a 00                	push   0x0
c000fd6e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fd72:	56                   	push   esi
c000fd73:	e8 48 07 ff ff       	call   c00004c0 <memset>
c000fd78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd7b:	e8 b0 07 ff ff       	call   c0000530 <strlen>
c000fd80:	ba 50 00 00 00       	mov    edx,0x50
c000fd85:	83 c4 10             	add    esp,0x10
c000fd88:	29 c2                	sub    edx,eax
c000fd8a:	31 c9                	xor    ecx,ecx
c000fd8c:	83 e2 fe             	and    edx,0xfffffffe
c000fd8f:	01 f2                	add    edx,esi
c000fd91:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fd96:	84 c0                	test   al,al
c000fd98:	74 0a                	je     c000fda4 <KeSetBootMessage(char const*)+0x4d>
c000fd9a:	80 cc 0f             	or     ah,0xf
c000fd9d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fda1:	41                   	inc    ecx
c000fda2:	eb ed                	jmp    c000fd91 <KeSetBootMessage(char const*)+0x3a>
c000fda4:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fda9:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fdae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdb0:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fdb6:	5b                   	pop    ebx
c000fdb7:	5e                   	pop    esi
c000fdb8:	5f                   	pop    edi
c000fdb9:	c3                   	ret    

c000fdba <EnvVarContainer::getEnv(char const*)>:
c000fdba:	57                   	push   edi
c000fdbb:	56                   	push   esi
c000fdbc:	53                   	push   ebx
c000fdbd:	31 db                	xor    ebx,ebx
c000fdbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdc3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fdc5:	7e 2b                	jle    c000fdf2 <EnvVarContainer::getEnv(char const*)+0x38>
c000fdc7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fdce:	50                   	push   eax
c000fdcf:	50                   	push   eax
c000fdd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdd3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fdd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fdda:	e8 f1 08 ff ff       	call   c00006d0 <strcmp>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	85 c0                	test   eax,eax
c000fde4:	75 09                	jne    c000fdef <EnvVarContainer::getEnv(char const*)+0x35>
c000fde6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fde9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fded:	eb 05                	jmp    c000fdf4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fdef:	43                   	inc    ebx
c000fdf0:	eb d1                	jmp    c000fdc3 <EnvVarContainer::getEnv(char const*)+0x9>
c000fdf2:	31 c0                	xor    eax,eax
c000fdf4:	5b                   	pop    ebx
c000fdf5:	5e                   	pop    esi
c000fdf6:	5f                   	pop    edi
c000fdf7:	c3                   	ret    

c000fdf8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fdf8:	55                   	push   ebp
c000fdf9:	57                   	push   edi
c000fdfa:	56                   	push   esi
c000fdfb:	53                   	push   ebx
c000fdfc:	83 ec 28             	sub    esp,0x28
c000fdff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fe03:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fe07:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fe0b:	56                   	push   esi
c000fe0c:	e8 1f 07 ff ff       	call   c0000530 <strlen>
c000fe11:	40                   	inc    eax
c000fe12:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe15:	e8 53 7a ff ff       	call   c000786d <malloc>
c000fe1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe21:	e8 0a 07 ff ff       	call   c0000530 <strlen>
c000fe26:	40                   	inc    eax
c000fe27:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe2a:	e8 3e 7a ff ff       	call   c000786d <malloc>
c000fe2f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe32:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe36:	e8 f5 06 ff ff       	call   c0000530 <strlen>
c000fe3b:	83 c4 0c             	add    esp,0xc
c000fe3e:	40                   	inc    eax
c000fe3f:	50                   	push   eax
c000fe40:	6a 00                	push   0x0
c000fe42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe46:	e8 75 06 ff ff       	call   c00004c0 <memset>
c000fe4b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe4e:	e8 dd 06 ff ff       	call   c0000530 <strlen>
c000fe53:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe57:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe5f:	89 de                	mov    esi,ebx
c000fe61:	e8 ca 06 ff ff       	call   c0000530 <strlen>
c000fe66:	83 c4 0c             	add    esp,0xc
c000fe69:	40                   	inc    eax
c000fe6a:	50                   	push   eax
c000fe6b:	6a 00                	push   0x0
c000fe6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe71:	e8 4a 06 ff ff       	call   c00004c0 <memset>
c000fe76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe79:	e8 b2 06 ff ff       	call   c0000530 <strlen>
c000fe7e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe82:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe8a:	40                   	inc    eax
c000fe8b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe8e:	c1 e0 03             	shl    eax,0x3
c000fe91:	5a                   	pop    edx
c000fe92:	59                   	pop    ecx
c000fe93:	50                   	push   eax
c000fe94:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe97:	e8 bd 79 ff ff       	call   c0007859 <realloc>
c000fe9c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fea0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fea3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fea6:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000feaa:	b9 08 00 00 00       	mov    ecx,0x8
c000feaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feb1:	83 c4 2c             	add    esp,0x2c
c000feb4:	5b                   	pop    ebx
c000feb5:	5e                   	pop    esi
c000feb6:	5f                   	pop    edi
c000feb7:	5d                   	pop    ebp
c000feb8:	c3                   	ret    
c000feb9:	90                   	nop

c000feba <EnvVarContainer::deleteEnv(char const*)>:
c000feba:	c3                   	ret    
c000febb:	90                   	nop

c000febc <EnvVarContainer::loadFrom(char const*, char const*)>:
c000febc:	55                   	push   ebp
c000febd:	57                   	push   edi
c000febe:	56                   	push   esi
c000febf:	53                   	push   ebx
c000fec0:	81 ec 38 01 00 00    	sub    esp,0x138
c000fec6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fecd:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fed4:	68 14 01 00 00       	push   0x114
c000fed9:	e8 8f 79 ff ff       	call   c000786d <malloc>
c000fede:	83 c4 0c             	add    esp,0xc
c000fee1:	89 c3                	mov    ebx,eax
c000fee3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fee6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000feed:	50                   	push   eax
c000feee:	e8 91 ac ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c000fef3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fef6:	e8 b7 af ff ff       	call   c000aeb2 <File::exists()>
c000fefb:	83 c4 10             	add    esp,0x10
c000fefe:	84 c0                	test   al,al
c000ff00:	75 31                	jne    c000ff33 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ff02:	50                   	push   eax
c000ff03:	50                   	push   eax
c000ff04:	6a 12                	push   0x12
c000ff06:	53                   	push   ebx
c000ff07:	e8 38 ad ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000ff0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ff11:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff14:	e8 17 06 ff ff       	call   c0000530 <strlen>
c000ff19:	5a                   	pop    edx
c000ff1a:	31 d2                	xor    edx,edx
c000ff1c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff20:	51                   	push   ecx
c000ff21:	56                   	push   esi
c000ff22:	52                   	push   edx
c000ff23:	50                   	push   eax
c000ff24:	53                   	push   ebx
c000ff25:	ff d7                	call   edi
c000ff27:	83 c4 14             	add    esp,0x14
c000ff2a:	53                   	push   ebx
c000ff2b:	e8 72 ad ff ff       	call   c000aca2 <File::close()>
c000ff30:	83 c4 10             	add    esp,0x10
c000ff33:	56                   	push   esi
c000ff34:	31 f6                	xor    esi,esi
c000ff36:	68 00 01 00 00       	push   0x100
c000ff3b:	6a 00                	push   0x0
c000ff3d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff41:	50                   	push   eax
c000ff42:	e8 79 05 ff ff       	call   c00004c0 <memset>
c000ff47:	5f                   	pop    edi
c000ff48:	58                   	pop    eax
c000ff49:	6a 01                	push   0x1
c000ff4b:	53                   	push   ebx
c000ff4c:	e8 f3 ac ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff5c:	83 ec 0c             	sub    esp,0xc
c000ff5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff61:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff65:	51                   	push   ecx
c000ff66:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ff6a:	52                   	push   edx
c000ff6b:	6a 00                	push   0x0
c000ff6d:	6a 01                	push   0x1
c000ff6f:	53                   	push   ebx
c000ff70:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff73:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ff77:	83 c4 20             	add    esp,0x20
c000ff7a:	3c 0d                	cmp    al,0xd
c000ff7c:	0f 84 09 01 00 00    	je     c001008b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff87:	0f 84 ef 00 00 00    	je     c001007c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff8d:	3c 0a                	cmp    al,0xa
c000ff8f:	74 13                	je     c000ffa4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff91:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff96:	74 0c                	je     c000ffa4 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff98:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff9e:	0f 8e d8 00 00 00    	jle    c001007c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ffa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffa8:	83 ec 0c             	sub    esp,0xc
c000ffab:	8d 78 01             	lea    edi,[eax+0x1]
c000ffae:	57                   	push   edi
c000ffaf:	e8 b9 78 ff ff       	call   c000786d <malloc>
c000ffb4:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ffb8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ffbc:	8d 56 04             	lea    edx,[esi+0x4]
c000ffbf:	89 14 24             	mov    DWORD PTR [esp],edx
c000ffc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffc6:	e8 a2 78 ff ff       	call   c000786d <malloc>
c000ffcb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ffcf:	83 c4 0c             	add    esp,0xc
c000ffd2:	57                   	push   edi
c000ffd3:	6a 00                	push   0x0
c000ffd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffd9:	e8 e2 04 ff ff       	call   c00004c0 <memset>
c000ffde:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffe2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ffe6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ffea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffec:	83 c4 0c             	add    esp,0xc
c000ffef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fff3:	52                   	push   edx
c000fff4:	6a 00                	push   0x0
c000fff6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fffa:	e8 c1 04 ff ff       	call   c00004c0 <memset>
c000ffff:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010003:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010007:	89 34 24             	mov    DWORD PTR [esp],esi
c001000a:	e8 21 05 ff ff       	call   c0000530 <strlen>
c001000f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010013:	89 c1                	mov    ecx,eax
c0010015:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010017:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001001a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001001d:	40                   	inc    eax
c001001e:	83 c4 10             	add    esp,0x10
c0010021:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010024:	85 d2                	test   edx,edx
c0010026:	75 0c                	jne    c0010034 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	6a 08                	push   0x8
c001002d:	e8 3b 78 ff ff       	call   c000786d <malloc>
c0010032:	eb 0c                	jmp    c0010040 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010034:	c1 e0 03             	shl    eax,0x3
c0010037:	51                   	push   ecx
c0010038:	51                   	push   ecx
c0010039:	50                   	push   eax
c001003a:	52                   	push   edx
c001003b:	e8 19 78 ff ff       	call   c0007859 <realloc>
c0010040:	83 c4 10             	add    esp,0x10
c0010043:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010046:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010049:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001004c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010050:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010054:	b9 08 00 00 00       	mov    ecx,0x8
c0010059:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001005b:	31 f6                	xor    esi,esi
c001005d:	50                   	push   eax
c001005e:	68 00 01 00 00       	push   0x100
c0010063:	6a 00                	push   0x0
c0010065:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010069:	50                   	push   eax
c001006a:	e8 51 04 ff ff       	call   c00004c0 <memset>
c001006f:	83 c4 10             	add    esp,0x10
c0010072:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001007a:	eb 0f                	jmp    c001008b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001007c:	3c 3d                	cmp    al,0x3d
c001007e:	74 07                	je     c0010087 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010080:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010084:	46                   	inc    esi
c0010085:	eb 04                	jmp    c001008b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010087:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001008b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010090:	0f 85 c6 fe ff ff    	jne    c000ff5c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010096:	81 c4 2c 01 00 00    	add    esp,0x12c
c001009c:	5b                   	pop    ebx
c001009d:	5e                   	pop    esi
c001009e:	5f                   	pop    edi
c001009f:	5d                   	pop    ebp
c00100a0:	c3                   	ret    
c00100a1:	90                   	nop

c00100a2 <EnvVarContainer::__loadSystem()>:
c00100a2:	83 ec 10             	sub    esp,0x10
c00100a5:	68 80 18 02 c0       	push   0xc0021880
c00100aa:	68 c8 03 02 c0       	push   0xc00203c8
c00100af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100b3:	e8 04 fe ff ff       	call   c000febc <EnvVarContainer::loadFrom(char const*, char const*)>
c00100b8:	83 c4 1c             	add    esp,0x1c
c00100bb:	c3                   	ret    

c00100bc <EnvVarContainer::__loadUser()>:
c00100bc:	c3                   	ret    
c00100bd:	90                   	nop

c00100be <EnvVarContainer::EnvVarContainer(Process*)>:
c00100be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00100c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00100d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00100de:	90                   	nop
c00100df:	c3                   	ret    

c00100e0 <EnvVarContainer::~EnvVarContainer()>:
c00100e0:	83 ec 0c             	sub    esp,0xc
c00100e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100ea:	85 c0                	test   eax,eax
c00100ec:	74 1d                	je     c001010b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f4:	85 c0                	test   eax,eax
c00100f6:	74 13                	je     c001010b <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100ff:	83 ec 0c             	sub    esp,0xc
c0010102:	50                   	push   eax
c0010103:	e8 75 77 ff ff       	call   c000787d <free>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	90                   	nop
c001010c:	83 c4 0c             	add    esp,0xc
c001010f:	c3                   	ret    

c0010110 <Krnl::getEnv(Process*, char const*)>:
c0010110:	53                   	push   ebx
c0010111:	83 ec 08             	sub    esp,0x8
c0010114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010118:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001011c:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c0010122:	74 04                	je     c0010128 <Krnl::getEnv(Process*, char const*)+0x18>
c0010124:	85 c0                	test   eax,eax
c0010126:	75 0b                	jne    c0010133 <Krnl::getEnv(Process*, char const*)+0x23>
c0010128:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c001012d:	85 c0                	test   eax,eax
c001012f:	75 19                	jne    c001014a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010131:	eb 27                	jmp    c001015a <Krnl::getEnv(Process*, char const*)+0x4a>
c0010133:	52                   	push   edx
c0010134:	52                   	push   edx
c0010135:	53                   	push   ebx
c0010136:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001013c:	e8 79 fc ff ff       	call   c000fdba <EnvVarContainer::getEnv(char const*)>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	85 c0                	test   eax,eax
c0010146:	75 28                	jne    c0010170 <Krnl::getEnv(Process*, char const*)+0x60>
c0010148:	eb de                	jmp    c0010128 <Krnl::getEnv(Process*, char const*)+0x18>
c001014a:	52                   	push   edx
c001014b:	52                   	push   edx
c001014c:	53                   	push   ebx
c001014d:	50                   	push   eax
c001014e:	e8 67 fc ff ff       	call   c000fdba <EnvVarContainer::getEnv(char const*)>
c0010153:	83 c4 10             	add    esp,0x10
c0010156:	85 c0                	test   eax,eax
c0010158:	75 16                	jne    c0010170 <Krnl::getEnv(Process*, char const*)+0x60>
c001015a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001015e:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010163:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010167:	83 c4 08             	add    esp,0x8
c001016a:	5b                   	pop    ebx
c001016b:	e9 4a fc ff ff       	jmp    c000fdba <EnvVarContainer::getEnv(char const*)>
c0010170:	83 c4 08             	add    esp,0x8
c0010173:	5b                   	pop    ebx
c0010174:	c3                   	ret    

c0010175 <Krnl::setEnvSystem(char const*, char const*)>:
c0010175:	83 ec 10             	sub    esp,0x10
c0010178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001017c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010180:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c0010186:	e8 6d fc ff ff       	call   c000fdf8 <EnvVarContainer::setEnv(char const*, char const*)>
c001018b:	83 c4 1c             	add    esp,0x1c
c001018e:	c3                   	ret    

c001018f <Krnl::setEnvUser(char const*, char const*)>:
c001018f:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010194:	85 c0                	test   eax,eax
c0010196:	74 15                	je     c00101ad <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010198:	83 ec 10             	sub    esp,0x10
c001019b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001019f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101a3:	50                   	push   eax
c00101a4:	e8 4f fc ff ff       	call   c000fdf8 <EnvVarContainer::setEnv(char const*, char const*)>
c00101a9:	83 c4 1c             	add    esp,0x1c
c00101ac:	c3                   	ret    
c00101ad:	c3                   	ret    

c00101ae <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00101ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101b2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00101b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101bc:	e9 37 fc ff ff       	jmp    c000fdf8 <EnvVarContainer::setEnv(char const*, char const*)>

c00101c1 <Krnl::deleteEnvSystem(char const*)>:
c00101c1:	c3                   	ret    

c00101c2 <Krnl::deleteEnvUser(char const*)>:
c00101c2:	c3                   	ret    

c00101c3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00101c3:	c3                   	ret    

c00101c4 <Krnl::newProcessEnv(Process*)>:
c00101c4:	83 ec 28             	sub    esp,0x28
c00101c7:	6a 0c                	push   0xc
c00101c9:	e8 9f 76 ff ff       	call   c000786d <malloc>
c00101ce:	5a                   	pop    edx
c00101cf:	59                   	pop    ecx
c00101d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101d4:	50                   	push   eax
c00101d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101d9:	e8 e0 fe ff ff       	call   c00100be <EnvVarContainer::EnvVarContainer(Process*)>
c00101de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e2:	83 c4 2c             	add    esp,0x2c
c00101e5:	c3                   	ret    

c00101e6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00101e6:	57                   	push   edi
c00101e7:	56                   	push   esi
c00101e8:	53                   	push   ebx
c00101e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ed:	83 ec 0c             	sub    esp,0xc
c00101f0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00101f6:	6a 0c                	push   0xc
c00101f8:	e8 70 76 ff ff       	call   c000786d <malloc>
c00101fd:	89 c3                	mov    ebx,eax
c00101ff:	58                   	pop    eax
c0010200:	5a                   	pop    edx
c0010201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010205:	53                   	push   ebx
c0010206:	e8 b3 fe ff ff       	call   c00100be <EnvVarContainer::EnvVarContainer(Process*)>
c001020b:	8b 07                	mov    eax,DWORD PTR [edi]
c001020d:	89 03                	mov    DWORD PTR [ebx],eax
c001020f:	c1 e0 03             	shl    eax,0x3
c0010212:	89 04 24             	mov    DWORD PTR [esp],eax
c0010215:	e8 53 76 ff ff       	call   c000786d <malloc>
c001021a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001021d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001021f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010222:	c1 e1 03             	shl    ecx,0x3
c0010225:	89 c7                	mov    edi,eax
c0010227:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	89 d8                	mov    eax,ebx
c001022e:	5b                   	pop    ebx
c001022f:	5e                   	pop    esi
c0010230:	5f                   	pop    edi
c0010231:	c3                   	ret    

c0010232 <Krnl::loadSystemEnv()>:
c0010232:	53                   	push   ebx
c0010233:	83 ec 14             	sub    esp,0x14
c0010236:	6a 0c                	push   0xc
c0010238:	e8 30 76 ff ff       	call   c000786d <malloc>
c001023d:	89 c3                	mov    ebx,eax
c001023f:	58                   	pop    eax
c0010240:	5a                   	pop    edx
c0010241:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010247:	53                   	push   ebx
c0010248:	e8 71 fe ff ff       	call   c00100be <EnvVarContainer::EnvVarContainer(Process*)>
c001024d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010250:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c0010256:	e8 47 fe ff ff       	call   c00100a2 <EnvVarContainer::__loadSystem()>
c001025b:	83 c4 18             	add    esp,0x18
c001025e:	5b                   	pop    ebx
c001025f:	c3                   	ret    

c0010260 <Krnl::loadUserEnv()>:
c0010260:	53                   	push   ebx
c0010261:	83 ec 14             	sub    esp,0x14
c0010264:	6a 0c                	push   0xc
c0010266:	e8 02 76 ff ff       	call   c000786d <malloc>
c001026b:	89 c3                	mov    ebx,eax
c001026d:	58                   	pop    eax
c001026e:	5a                   	pop    edx
c001026f:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010275:	53                   	push   ebx
c0010276:	e8 43 fe ff ff       	call   c00100be <EnvVarContainer::EnvVarContainer(Process*)>
c001027b:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c0010281:	83 c4 18             	add    esp,0x18
c0010284:	5b                   	pop    ebx
c0010285:	c3                   	ret    

c0010286 <Krnl::flushEnv()>:
c0010286:	c3                   	ret    

c0010287 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010287:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001028b:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c0010291:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010297:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001029c:	8b 00                	mov    eax,DWORD PTR [eax]
c001029e:	03 01                	add    eax,DWORD PTR [ecx]
c00102a0:	85 d2                	test   edx,edx
c00102a2:	74 02                	je     c00102a6 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00102a4:	03 02                	add    eax,DWORD PTR [edx]
c00102a6:	c3                   	ret    

c00102a7 <Krnl::getProcessEnvPair(Process*, int)>:
c00102a7:	57                   	push   edi
c00102a8:	56                   	push   esi
c00102a9:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c00102af:	53                   	push   ebx
c00102b0:	85 f6                	test   esi,esi
c00102b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102ba:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102c4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102c6:	75 16                	jne    c00102de <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00102c8:	39 c2                	cmp    edx,eax
c00102ca:	7c 16                	jl     c00102e2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102cc:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c00102d2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00102d4:	01 c6                	add    esi,eax
c00102d6:	39 d6                	cmp    esi,edx
c00102d8:	7e 3c                	jle    c0010316 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102da:	29 c2                	sub    edx,eax
c00102dc:	eb 04                	jmp    c00102e2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102de:	39 c2                	cmp    edx,eax
c00102e0:	7d 05                	jge    c00102e7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00102e2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00102e5:	eb 20                	jmp    c0010307 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00102e7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00102e9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00102ec:	39 d1                	cmp    ecx,edx
c00102ee:	7e 04                	jle    c00102f4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00102f0:	29 c2                	sub    edx,eax
c00102f2:	eb 10                	jmp    c0010304 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00102f4:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00102fa:	03 0e                	add    ecx,DWORD PTR [esi]
c00102fc:	39 d1                	cmp    ecx,edx
c00102fe:	7e 16                	jle    c0010316 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010300:	29 c2                	sub    edx,eax
c0010302:	29 fa                	sub    edx,edi
c0010304:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010307:	8d 14 d0             	lea    edx,[eax+edx*8]
c001030a:	8b 02                	mov    eax,DWORD PTR [edx]
c001030c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001030f:	89 03                	mov    DWORD PTR [ebx],eax
c0010311:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010314:	eb 1d                	jmp    c0010333 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010316:	83 ec 0c             	sub    esp,0xc
c0010319:	68 ea 03 02 c0       	push   0xc00203ea
c001031e:	e8 ac 00 00 00       	call   c00103cf <KePanic(char const*)>
c0010323:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010329:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	89 d8                	mov    eax,ebx
c0010335:	5b                   	pop    ebx
c0010336:	5e                   	pop    esi
c0010337:	5f                   	pop    edi
c0010338:	c2 04 00             	ret    0x4

c001033b <CPU::current()>:
c001033b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010340:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010346:	c3                   	ret    

c0010347 <operator new(unsigned long)>:
c0010347:	e9 21 75 ff ff       	jmp    c000786d <malloc>

c001034c <operator delete(void*)>:
c001034c:	e9 3c 75 ff ff       	jmp    c000788d <rfree>

c0010351 <disableIRQs()>:
c0010351:	fa                   	cli    
c0010352:	c3                   	ret    

c0010353 <enableIRQs()>:
c0010353:	fb                   	sti    
c0010354:	c3                   	ret    

c0010355 <lockScheduler()>:
c0010355:	fa                   	cli    
c0010356:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001035c:	c3                   	ret    

c001035d <unlockScheduler()>:
c001035d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010362:	48                   	dec    eax
c0010363:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010368:	75 01                	jne    c001036b <unlockScheduler()+0xe>
c001036a:	fb                   	sti    
c001036b:	c3                   	ret    

c001036c <lockStuff()>:
c001036c:	fa                   	cli    
c001036d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010373:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010379:	c3                   	ret    

c001037a <unlockStuff()>:
c001037a:	83 ec 0c             	sub    esp,0xc
c001037d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0010382:	48                   	dec    eax
c0010383:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010388:	75 18                	jne    c00103a2 <unlockStuff()+0x28>
c001038a:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0010391:	74 0f                	je     c00103a2 <unlockStuff()+0x28>
c0010393:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001039d:	e8 5e 47 00 00       	call   c0014b00 <schedule()>
c00103a2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103a7:	48                   	dec    eax
c00103a8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103ad:	75 01                	jne    c00103b0 <unlockStuff()+0x36>
c00103af:	fb                   	sti    
c00103b0:	83 c4 0c             	add    esp,0xc
c00103b3:	c3                   	ret    

c00103b4 <Virt::getAKernelVAS()>:
c00103b4:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00103b9:	c3                   	ret    

c00103ba <__not_memcpy>:
c00103ba:	57                   	push   edi
c00103bb:	56                   	push   esi
c00103bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103c0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103c8:	89 c7                	mov    edi,eax
c00103ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103cc:	5e                   	pop    esi
c00103cd:	5f                   	pop    edi
c00103ce:	c3                   	ret    

c00103cf <KePanic(char const*)>:
c00103cf:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00103d6:	e9 58 65 00 00       	jmp    c0016933 <HalPanic(char const*)>

c00103db <Krnl::powerThread(void*)>:
c00103db:	83 ec 0c             	sub    esp,0xc
c00103de:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103e3:	48                   	dec    eax
c00103e4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103e9:	75 01                	jne    c00103ec <Krnl::powerThread(void*)+0x11>
c00103eb:	fb                   	sti    
c00103ec:	83 ec 0c             	sub    esp,0xc
c00103ef:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103f6:	6a 0a                	push   0xa
c00103f8:	e8 13 4a 00 00       	call   c0014e10 <sleep(unsigned int)>
c00103fd:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c0010404:	83 c4 10             	add    esp,0x10
c0010407:	eb e3                	jmp    c00103ec <Krnl::powerThread(void*)+0x11>

c0010409 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010409:	57                   	push   edi
c001040a:	b9 09 00 00 00       	mov    ecx,0x9
c001040f:	56                   	push   esi
c0010410:	bf 60 69 02 c0       	mov    edi,0xc0026960
c0010415:	fc                   	cld    
c0010416:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001041a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001041c:	5e                   	pop    esi
c001041d:	5f                   	pop    edi
c001041e:	c3                   	ret    

c001041f <Krnl::userIOReceived()>:
c001041f:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010429:	c3                   	ret    

c001042a <Krnl::handlePowerButton()>:
c001042a:	83 ec 0c             	sub    esp,0xc
c001042d:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c0010432:	83 f8 02             	cmp    eax,0x2
c0010435:	75 10                	jne    c0010447 <Krnl::handlePowerButton()+0x1d>
c0010437:	83 ec 0c             	sub    esp,0xc
c001043a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010440:	e8 c3 6a ff ff       	call   c0006f08 <Computer::shutdown()>
c0010445:	eb 11                	jmp    c0010458 <Krnl::handlePowerButton()+0x2e>
c0010447:	48                   	dec    eax
c0010448:	75 11                	jne    c001045b <Krnl::handlePowerButton()+0x31>
c001044a:	83 ec 0c             	sub    esp,0xc
c001044d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010453:	e8 e0 6a ff ff       	call   c0006f38 <Computer::sleep()>
c0010458:	83 c4 10             	add    esp,0x10
c001045b:	83 c4 0c             	add    esp,0xc
c001045e:	c3                   	ret    

c001045f <Krnl::handleSleepButton()>:
c001045f:	83 ec 0c             	sub    esp,0xc
c0010462:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c0010467:	83 f8 02             	cmp    eax,0x2
c001046a:	75 10                	jne    c001047c <Krnl::handleSleepButton()+0x1d>
c001046c:	83 ec 0c             	sub    esp,0xc
c001046f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010475:	e8 8e 6a ff ff       	call   c0006f08 <Computer::shutdown()>
c001047a:	eb 11                	jmp    c001048d <Krnl::handleSleepButton()+0x2e>
c001047c:	48                   	dec    eax
c001047d:	75 11                	jne    c0010490 <Krnl::handleSleepButton()+0x31>
c001047f:	83 ec 0c             	sub    esp,0xc
c0010482:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010488:	e8 ab 6a ff ff       	call   c0006f38 <Computer::sleep()>
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	83 c4 0c             	add    esp,0xc
c0010493:	c3                   	ret    

c0010494 <Krnl::setupPowerManager()>:
c0010494:	83 ec 0c             	sub    esp,0xc
c0010497:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c00104a1:	68 f0 00 00 00       	push   0xf0
c00104a6:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00104ad:	6a 00                	push   0x0
c00104af:	68 db 03 01 c0       	push   0xc00103db
c00104b4:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00104ba:	e8 f9 43 00 00       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c00104bf:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c00104c9:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c00104d3:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00104dd:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00104e7:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00104f1:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00104fb:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c0010505:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c001050f:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010519:	83 c4 1c             	add    esp,0x1c
c001051c:	c3                   	ret    

c001051d <KeRand()>:
c001051d:	69 05 88 69 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0026988,0x2875
c0010527:	69 0d 8c 69 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002698c,0xa2e7b175
c0010531:	53                   	push   ebx
c0010532:	01 c1                	add    ecx,eax
c0010534:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010539:	f7 25 88 69 02 c0    	mul    DWORD PTR ds:0xc0026988
c001053f:	01 ca                	add    edx,ecx
c0010541:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010546:	83 d2 00             	adc    edx,0x0
c0010549:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001054e:	0f b7 da             	movzx  ebx,dx
c0010551:	89 da                	mov    edx,ebx
c0010553:	89 1d 8c 69 02 c0    	mov    DWORD PTR ds:0xc002698c,ebx
c0010559:	0f ac d0 0e          	shrd   eax,edx,0xe
c001055d:	5b                   	pop    ebx
c001055e:	c3                   	ret    

c001055f <KeSeedRand(unsigned int)>:
c001055f:	53                   	push   ebx
c0010560:	83 ec 08             	sub    esp,0x8
c0010563:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010567:	e8 bb 66 00 00       	call   c0016c27 <HalGetRand()>
c001056c:	c7 05 8c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002698c,0x0
c0010576:	31 d8                	xor    eax,ebx
c0010578:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001057d:	e8 9b ff ff ff       	call   c001051d <KeRand()>
c0010582:	83 c4 08             	add    esp,0x8
c0010585:	5b                   	pop    ebx
c0010586:	eb 95                	jmp    c001051d <KeRand()>

c0010588 <KeInitRand()>:
c0010588:	83 ec 0c             	sub    esp,0xc
c001058b:	e8 9c 64 00 00       	call   c0016a2c <HalQueryPerformanceCounter()>
c0010590:	0f 20 c2             	mov    edx,cr0
c0010593:	0f 22 c2             	mov    cr0,edx
c0010596:	0f 20 c2             	mov    edx,cr0
c0010599:	0f 22 c2             	mov    cr0,edx
c001059c:	0f 20 c2             	mov    edx,cr0
c001059f:	0f 22 c2             	mov    cr0,edx
c00105a2:	0f 20 c2             	mov    edx,cr0
c00105a5:	0f 22 c2             	mov    cr0,edx
c00105a8:	83 ec 0c             	sub    esp,0xc
c00105ab:	35 03 8a 95 38       	xor    eax,0x38958a03
c00105b0:	50                   	push   eax
c00105b1:	e8 a9 ff ff ff       	call   c001055f <KeSeedRand(unsigned int)>
c00105b6:	83 c4 1c             	add    esp,0x1c
c00105b9:	c3                   	ret    
c00105ba:	66 90                	xchg   ax,ax

c00105bc <KeResolveCompatibilitySymbol(char*)>:
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	83 ec 08             	sub    esp,0x8
c00105c2:	68 04 04 02 c0       	push   0xc0020404
c00105c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105cb:	e8 00 01 ff ff       	call   c00006d0 <strcmp>
c00105d0:	83 c4 10             	add    esp,0x10
c00105d3:	85 c0                	test   eax,eax
c00105d5:	0f 94 c0             	sete   al
c00105d8:	84 c0                	test   al,al
c00105da:	74 0c                	je     c00105e8 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00105dc:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c00105e1:	e9 62 01 00 00       	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105e6:	66 90                	xchg   ax,ax
c00105e8:	83 ec 08             	sub    esp,0x8
c00105eb:	68 0d 04 02 c0       	push   0xc002040d
c00105f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f4:	e8 d7 00 ff ff       	call   c00006d0 <strcmp>
c00105f9:	83 c4 10             	add    esp,0x10
c00105fc:	85 c0                	test   eax,eax
c00105fe:	0f 94 c0             	sete   al
c0010601:	84 c0                	test   al,al
c0010603:	74 0b                	je     c0010610 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010605:	b8 00 de 01 c0       	mov    eax,0xc001de00
c001060a:	e9 39 01 00 00       	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001060f:	90                   	nop
c0010610:	83 ec 08             	sub    esp,0x8
c0010613:	68 17 04 02 c0       	push   0xc0020417
c0010618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001061c:	e8 af 00 ff ff       	call   c00006d0 <strcmp>
c0010621:	83 c4 10             	add    esp,0x10
c0010624:	85 c0                	test   eax,eax
c0010626:	0f 94 c0             	sete   al
c0010629:	84 c0                	test   al,al
c001062b:	74 0b                	je     c0010638 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001062d:	b8 34 db 01 c0       	mov    eax,0xc001db34
c0010632:	e9 11 01 00 00       	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010637:	90                   	nop
c0010638:	83 ec 08             	sub    esp,0x8
c001063b:	68 20 04 02 c0       	push   0xc0020420
c0010640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010644:	e8 87 00 ff ff       	call   c00006d0 <strcmp>
c0010649:	83 c4 10             	add    esp,0x10
c001064c:	85 c0                	test   eax,eax
c001064e:	0f 94 c0             	sete   al
c0010651:	84 c0                	test   al,al
c0010653:	74 0b                	je     c0010660 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010655:	b8 cf 03 01 c0       	mov    eax,0xc00103cf
c001065a:	e9 e9 00 00 00       	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001065f:	90                   	nop
c0010660:	83 ec 08             	sub    esp,0x8
c0010663:	68 33 04 02 c0       	push   0xc0020433
c0010668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066c:	e8 5f 00 ff ff       	call   c00006d0 <strcmp>
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	85 c0                	test   eax,eax
c0010676:	0f 94 c0             	sete   al
c0010679:	84 c0                	test   al,al
c001067b:	74 0b                	je     c0010688 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001067d:	b8 57 fd 00 c0       	mov    eax,0xc000fd57
c0010682:	e9 c1 00 00 00       	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010687:	90                   	nop
c0010688:	83 ec 08             	sub    esp,0x8
c001068b:	68 50 04 02 c0       	push   0xc0020450
c0010690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010694:	e8 37 00 ff ff       	call   c00006d0 <strcmp>
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	85 c0                	test   eax,eax
c001069e:	0f 94 c0             	sete   al
c00106a1:	84 c0                	test   al,al
c00106a3:	74 0b                	je     c00106b0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00106a5:	b8 00 df 01 c0       	mov    eax,0xc001df00
c00106aa:	e9 99 00 00 00       	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106af:	90                   	nop
c00106b0:	83 ec 08             	sub    esp,0x8
c00106b3:	68 5a 04 02 c0       	push   0xc002045a
c00106b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106bc:	e8 0f 00 ff ff       	call   c00006d0 <strcmp>
c00106c1:	83 c4 10             	add    esp,0x10
c00106c4:	85 c0                	test   eax,eax
c00106c6:	0f 94 c0             	sete   al
c00106c9:	84 c0                	test   al,al
c00106cb:	74 07                	je     c00106d4 <KeResolveCompatibilitySymbol(char*)+0x118>
c00106cd:	b8 80 dc 01 c0       	mov    eax,0xc001dc80
c00106d2:	eb 74                	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106d4:	83 ec 08             	sub    esp,0x8
c00106d7:	68 63 04 02 c0       	push   0xc0020463
c00106dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106e0:	e8 eb ff fe ff       	call   c00006d0 <strcmp>
c00106e5:	83 c4 10             	add    esp,0x10
c00106e8:	85 c0                	test   eax,eax
c00106ea:	0f 94 c0             	sete   al
c00106ed:	84 c0                	test   al,al
c00106ef:	74 07                	je     c00106f8 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00106f1:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c00106f6:	eb 50                	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106f8:	83 ec 08             	sub    esp,0x8
c00106fb:	68 7b 04 02 c0       	push   0xc002047b
c0010700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010704:	e8 c7 ff fe ff       	call   c00006d0 <strcmp>
c0010709:	83 c4 10             	add    esp,0x10
c001070c:	85 c0                	test   eax,eax
c001070e:	0f 94 c0             	sete   al
c0010711:	84 c0                	test   al,al
c0010713:	74 07                	je     c001071c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010715:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001071a:	eb 2c                	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001071c:	83 ec 08             	sub    esp,0x8
c001071f:	68 88 04 02 c0       	push   0xc0020488
c0010724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010728:	e8 a3 ff fe ff       	call   c00006d0 <strcmp>
c001072d:	83 c4 10             	add    esp,0x10
c0010730:	85 c0                	test   eax,eax
c0010732:	0f 94 c0             	sete   al
c0010735:	84 c0                	test   al,al
c0010737:	74 07                	je     c0010740 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010739:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c001073e:	eb 08                	jmp    c0010748 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010740:	b8 00 00 00 00       	mov    eax,0x0
c0010745:	8d 76 00             	lea    esi,[esi+0x0]
c0010748:	83 c4 0c             	add    esp,0xc
c001074b:	c3                   	ret    

c001074c <KiSigKill(int)>:
c001074c:	83 ec 0c             	sub    esp,0xc
c001074f:	6a 00                	push   0x0
c0010751:	6a 00                	push   0x0
c0010753:	6a ff                	push   0xffffffff
c0010755:	6a 01                	push   0x1
c0010757:	e8 f6 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001075c:	83 c4 1c             	add    esp,0x1c
c001075f:	c3                   	ret    

c0010760 <KiDefaultSignalHandlerIgnore(int)>:
c0010760:	c3                   	ret    

c0010761 <KiDefaultSignalHandlerPause(int)>:
c0010761:	57                   	push   edi
c0010762:	b9 07 00 00 00       	mov    ecx,0x7
c0010767:	56                   	push   esi
c0010768:	be d1 04 02 c0       	mov    esi,0xc00204d1
c001076d:	83 ec 24             	sub    esp,0x24
c0010770:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010774:	fc                   	cld    
c0010775:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010777:	8d 44 24 04          	lea    eax,[esp+0x4]
c001077b:	50                   	push   eax
c001077c:	6a 00                	push   0x0
c001077e:	6a 00                	push   0x0
c0010780:	6a 27                	push   0x27
c0010782:	e8 cb 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010787:	83 c4 34             	add    esp,0x34
c001078a:	5e                   	pop    esi
c001078b:	5f                   	pop    edi
c001078c:	c3                   	ret    

c001078d <KiDefaultSignalHandlerResume(int)>:
c001078d:	57                   	push   edi
c001078e:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010793:	56                   	push   esi
c0010794:	be ed 04 02 c0       	mov    esi,0xc00204ed
c0010799:	83 ec 24             	sub    esp,0x24
c001079c:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00107a0:	fc                   	cld    
c00107a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107a3:	8d 44 24 03          	lea    eax,[esp+0x3]
c00107a7:	50                   	push   eax
c00107a8:	6a 00                	push   0x0
c00107aa:	6a 00                	push   0x0
c00107ac:	6a 27                	push   0x27
c00107ae:	e8 9f 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00107b3:	83 c4 34             	add    esp,0x34
c00107b6:	5e                   	pop    esi
c00107b7:	5f                   	pop    edi
c00107b8:	c3                   	ret    

c00107b9 <KeDeinitSignals(SigHandlerBlock*)>:
c00107b9:	e9 bf 70 ff ff       	jmp    c000787d <free>

c00107be <KeInitSignals()>:
c00107be:	53                   	push   ebx
c00107bf:	83 ec 14             	sub    esp,0x14
c00107c2:	68 c8 00 00 00       	push   0xc8
c00107c7:	e8 a1 70 ff ff       	call   c000786d <malloc>
c00107cc:	83 c4 0c             	add    esp,0xc
c00107cf:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00107d9:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00107e3:	89 c3                	mov    ebx,eax
c00107e5:	6a 20                	push   0x20
c00107e7:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00107ed:	6a 00                	push   0x0
c00107ef:	50                   	push   eax
c00107f0:	e8 cb fc fe ff       	call   c00004c0 <memset>
c00107f5:	83 c4 0c             	add    esp,0xc
c00107f8:	6a 44                	push   0x44
c00107fa:	6a 00                	push   0x0
c00107fc:	53                   	push   ebx
c00107fd:	e8 be fc fe ff       	call   c00004c0 <memset>
c0010802:	89 d8                	mov    eax,ebx
c0010804:	83 c4 18             	add    esp,0x18
c0010807:	5b                   	pop    ebx
c0010808:	c3                   	ret    

c0010809 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010809:	53                   	push   ebx
c001080a:	b8 01 00 00 00       	mov    eax,0x1
c001080f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010813:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010817:	83 f9 10             	cmp    ecx,0x10
c001081a:	7f 21                	jg     c001083d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001081c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001081f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010823:	89 03                	mov    DWORD PTR [ebx],eax
c0010825:	b8 01 00 00 00       	mov    eax,0x1
c001082a:	d3 e0                	shl    eax,cl
c001082c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010830:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010833:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001083b:	31 c0                	xor    eax,eax
c001083d:	5b                   	pop    ebx
c001083e:	c3                   	ret    

c001083f <KeRaiseSignal(SigHandlerBlock*, int)>:
c001083f:	55                   	push   ebp
c0010840:	57                   	push   edi
c0010841:	bf 08 00 00 00       	mov    edi,0x8
c0010846:	56                   	push   esi
c0010847:	53                   	push   ebx
c0010848:	83 ec 18             	sub    esp,0x18
c001084b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001084f:	68 0a 05 02 c0       	push   0xc002050a
c0010854:	e8 b5 9d ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0010859:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010860:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	31 c9                	xor    ecx,ecx
c001086b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001086f:	99                   	cdq    
c0010870:	f7 ff                	idiv   edi
c0010872:	8d 42 24             	lea    eax,[edx+0x24]
c0010875:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010879:	85 f6                	test   esi,esi
c001087b:	75 1a                	jne    c0010897 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c001087d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010881:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010885:	50                   	push   eax
c0010886:	50                   	push   eax
c0010887:	52                   	push   edx
c0010888:	68 1b 05 02 c0       	push   0xc002051b
c001088d:	e8 7c 9d ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0010892:	83 c4 10             	add    esp,0x10
c0010895:	eb 1b                	jmp    c00108b2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010897:	41                   	inc    ecx
c0010898:	83 f9 08             	cmp    ecx,0x8
c001089b:	75 ce                	jne    c001086b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c001089d:	83 ec 0c             	sub    esp,0xc
c00108a0:	be 01 00 00 00       	mov    esi,0x1
c00108a5:	68 3c 05 02 c0       	push   0xc002053c
c00108aa:	e8 5f 9d ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00108af:	83 c4 10             	add    esp,0x10
c00108b2:	83 c4 0c             	add    esp,0xc
c00108b5:	89 f0                	mov    eax,esi
c00108b7:	5b                   	pop    ebx
c00108b8:	5e                   	pop    esi
c00108b9:	5f                   	pop    edi
c00108ba:	5d                   	pop    ebp
c00108bb:	c3                   	ret    

c00108bc <KeCheckSignal(SigHandlerBlock*, int*)>:
c00108bc:	55                   	push   ebp
c00108bd:	57                   	push   edi
c00108be:	56                   	push   esi
c00108bf:	53                   	push   ebx
c00108c0:	51                   	push   ecx
c00108c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108c5:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00108cc:	0f 84 af 00 00 00    	je     c0010981 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c00108d2:	31 c9                	xor    ecx,ecx
c00108d4:	bf 08 00 00 00       	mov    edi,0x8
c00108d9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00108df:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00108e2:	99                   	cdq    
c00108e3:	f7 ff                	idiv   edi
c00108e5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00108ec:	85 ed                	test   ebp,ebp
c00108ee:	0f 84 9e 00 00 00    	je     c0010992 <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c00108f4:	89 e9                	mov    ecx,ebp
c00108f6:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00108fc:	bf 01 00 00 00       	mov    edi,0x1
c0010901:	89 04 24             	mov    DWORD PTR [esp],eax
c0010904:	d3 e7                	shl    edi,cl
c0010906:	31 c9                	xor    ecx,ecx
c0010908:	b8 01 00 00 00       	mov    eax,0x1
c001090d:	d3 e0                	shl    eax,cl
c001090f:	85 04 24             	test   DWORD PTR [esp],eax
c0010912:	74 06                	je     c001091a <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010914:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010918:	75 67                	jne    c0010981 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001091a:	41                   	inc    ecx
c001091b:	83 f9 11             	cmp    ecx,0x11
c001091e:	75 e8                	jne    c0010908 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010920:	46                   	inc    esi
c0010921:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010924:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001092a:	09 f8                	or     eax,edi
c001092c:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010937:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c001093d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010944:	31 c0                	xor    eax,eax
c0010946:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c001094e:	74 09                	je     c0010959 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010950:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010957:	eb 06                	jmp    c001095f <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010959:	40                   	inc    eax
c001095a:	83 f8 08             	cmp    eax,0x8
c001095d:	75 e7                	jne    c0010946 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c001095f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010962:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010966:	83 fd 09             	cmp    ebp,0x9
c0010969:	89 2a                	mov    DWORD PTR [edx],ebp
c001096b:	75 07                	jne    c0010974 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c001096d:	b8 4c 07 01 c0       	mov    eax,0xc001074c
c0010972:	eb 31                	jmp    c00109a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010974:	83 f8 01             	cmp    eax,0x1
c0010977:	75 0c                	jne    c0010985 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010979:	f7 d7                	not    edi
c001097b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010981:	31 c0                	xor    eax,eax
c0010983:	eb 20                	jmp    c00109a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010985:	85 c0                	test   eax,eax
c0010987:	75 1c                	jne    c00109a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010989:	8b 04 ad e0 18 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffde720]
c0010990:	eb 13                	jmp    c00109a5 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010992:	46                   	inc    esi
c0010993:	41                   	inc    ecx
c0010994:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001099a:	83 f9 08             	cmp    ecx,0x8
c001099d:	0f 85 36 ff ff ff    	jne    c00108d9 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00109a3:	eb dc                	jmp    c0010981 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c00109a5:	5a                   	pop    edx
c00109a6:	5b                   	pop    ebx
c00109a7:	5e                   	pop    esi
c00109a8:	5f                   	pop    edi
c00109a9:	5d                   	pop    ebp
c00109aa:	c3                   	ret    

c00109ab <KiCheckSignalZ>:
c00109ab:	83 ec 10             	sub    esp,0x10
c00109ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00109b2:	50                   	push   eax
c00109b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109bb:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00109c1:	e8 f6 fe ff ff       	call   c00108bc <KeCheckSignal(SigHandlerBlock*, int*)>
c00109c6:	5a                   	pop    edx
c00109c7:	31 d2                	xor    edx,edx
c00109c9:	59                   	pop    ecx
c00109ca:	85 c0                	test   eax,eax
c00109cc:	74 19                	je     c00109e7 <KiCheckSignalZ+0x3c>
c00109ce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00109d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00109d7:	89 02                	mov    DWORD PTR [edx],eax
c00109d9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00109e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109e4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00109e7:	89 d0                	mov    eax,edx
c00109e9:	83 c4 10             	add    esp,0x10
c00109ec:	c3                   	ret    

c00109ed <KeCompleteSignal(SigHandlerBlock*, int)>:
c00109ed:	56                   	push   esi
c00109ee:	53                   	push   ebx
c00109ef:	bb 01 00 00 00       	mov    ebx,0x1
c00109f4:	52                   	push   edx
c00109f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00109f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109fd:	d3 e3                	shl    ebx,cl
c00109ff:	83 f9 10             	cmp    ecx,0x10
c0010a02:	7f 08                	jg     c0010a0c <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010a04:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010a0a:	75 10                	jne    c0010a1c <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010a0c:	83 ec 0c             	sub    esp,0xc
c0010a0f:	68 4d 05 02 c0       	push   0xc002054d
c0010a14:	e8 b6 f9 ff ff       	call   c00103cf <KePanic(char const*)>
c0010a19:	83 c4 10             	add    esp,0x10
c0010a1c:	f7 d3                	not    ebx
c0010a1e:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010a24:	58                   	pop    eax
c0010a25:	5b                   	pop    ebx
c0010a26:	5e                   	pop    esi
c0010a27:	c3                   	ret    

c0010a28 <KiFinishSignalZ>:
c0010a28:	53                   	push   ebx
c0010a29:	83 ec 10             	sub    esp,0x10
c0010a2c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a30:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010a33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a3b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010a41:	e8 a7 ff ff ff       	call   c00109ed <KeCompleteSignal(SigHandlerBlock*, int)>
c0010a46:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010a4c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010a53:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010a5a:	83 c4 18             	add    esp,0x18
c0010a5d:	5b                   	pop    ebx
c0010a5e:	c3                   	ret    

c0010a5f <SysSeekDir(regs*)>:
c0010a5f:	31 c0                	xor    eax,eax
c0010a61:	31 d2                	xor    edx,edx
c0010a63:	c3                   	ret    

c0010a64 <SysTellDir(regs*)>:
c0010a64:	31 c0                	xor    eax,eax
c0010a66:	31 d2                	xor    edx,edx
c0010a68:	c3                   	ret    

c0010a69 <SysVerify(regs*)>:
c0010a69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a6d:	31 d2                	xor    edx,edx
c0010a6f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a72:	c3                   	ret    

c0010a73 <SysGetArgc(regs*)>:
c0010a73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a7b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010a81:	99                   	cdq    
c0010a82:	c3                   	ret    

c0010a83 <SysTTYName(regs*)>:
c0010a83:	b8 01 00 00 00       	mov    eax,0x1
c0010a88:	31 d2                	xor    edx,edx
c0010a8a:	c3                   	ret    

c0010a8b <SysFormatDisk(regs*)>:
c0010a8b:	56                   	push   esi
c0010a8c:	53                   	push   ebx
c0010a8d:	50                   	push   eax
c0010a8e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a92:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c0010a98:	eb 28                	jmp    c0010ac2 <SysFormatDisk(regs*)+0x37>
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010aa0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010aa3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010aa5:	51                   	push   ecx
c0010aa6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010aa9:	51                   	push   ecx
c0010aaa:	50                   	push   eax
c0010aab:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010ab2:	50                   	push   eax
c0010ab3:	53                   	push   ebx
c0010ab4:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010ab7:	83 c4 20             	add    esp,0x20
c0010aba:	83 f8 08             	cmp    eax,0x8
c0010abd:	75 12                	jne    c0010ad1 <SysFormatDisk(regs*)+0x46>
c0010abf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010ac2:	85 db                	test   ebx,ebx
c0010ac4:	75 d4                	jne    c0010a9a <SysFormatDisk(regs*)+0xf>
c0010ac6:	59                   	pop    ecx
c0010ac7:	b8 03 00 00 00       	mov    eax,0x3
c0010acc:	31 d2                	xor    edx,edx
c0010ace:	5b                   	pop    ebx
c0010acf:	5e                   	pop    esi
c0010ad0:	c3                   	ret    
c0010ad1:	85 c0                	test   eax,eax
c0010ad3:	74 1b                	je     c0010af0 <SysFormatDisk(regs*)+0x65>
c0010ad5:	83 f8 09             	cmp    eax,0x9
c0010ad8:	74 0b                	je     c0010ae5 <SysFormatDisk(regs*)+0x5a>
c0010ada:	59                   	pop    ecx
c0010adb:	b8 02 00 00 00       	mov    eax,0x2
c0010ae0:	31 d2                	xor    edx,edx
c0010ae2:	5b                   	pop    ebx
c0010ae3:	5e                   	pop    esi
c0010ae4:	c3                   	ret    
c0010ae5:	59                   	pop    ecx
c0010ae6:	b8 01 00 00 00       	mov    eax,0x1
c0010aeb:	31 d2                	xor    edx,edx
c0010aed:	5b                   	pop    ebx
c0010aee:	5e                   	pop    esi
c0010aef:	c3                   	ret    
c0010af0:	59                   	pop    ecx
c0010af1:	31 c0                	xor    eax,eax
c0010af3:	31 d2                	xor    edx,edx
c0010af5:	5b                   	pop    ebx
c0010af6:	5e                   	pop    esi
c0010af7:	c3                   	ret    

c0010af8 <SysSetDiskVolumeLabel(regs*)>:
c0010af8:	56                   	push   esi
c0010af9:	53                   	push   ebx
c0010afa:	53                   	push   ebx
c0010afb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010aff:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b02:	83 f8 19             	cmp    eax,0x19
c0010b05:	77 2d                	ja     c0010b34 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010b07:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010b0e:	85 c9                	test   ecx,ecx
c0010b10:	74 22                	je     c0010b34 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010b12:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010b15:	85 db                	test   ebx,ebx
c0010b17:	74 1b                	je     c0010b34 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010b19:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010b1f:	85 d2                	test   edx,edx
c0010b21:	74 11                	je     c0010b34 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010b23:	8b 32                	mov    esi,DWORD PTR [edx]
c0010b25:	53                   	push   ebx
c0010b26:	50                   	push   eax
c0010b27:	51                   	push   ecx
c0010b28:	52                   	push   edx
c0010b29:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010b2c:	83 c4 10             	add    esp,0x10
c0010b2f:	99                   	cdq    
c0010b30:	59                   	pop    ecx
c0010b31:	5b                   	pop    ebx
c0010b32:	5e                   	pop    esi
c0010b33:	c3                   	ret    
c0010b34:	59                   	pop    ecx
c0010b35:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b3a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b3f:	5b                   	pop    ebx
c0010b40:	5e                   	pop    esi
c0010b41:	c3                   	ret    

c0010b42 <SysGetDiskVolumeLabel(regs*)>:
c0010b42:	57                   	push   edi
c0010b43:	56                   	push   esi
c0010b44:	53                   	push   ebx
c0010b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b49:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010b4c:	83 fa 19             	cmp    edx,0x19
c0010b4f:	77 38                	ja     c0010b89 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010b51:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010b58:	85 c9                	test   ecx,ecx
c0010b5a:	74 2d                	je     c0010b89 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010b5c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010b5f:	85 db                	test   ebx,ebx
c0010b61:	74 26                	je     c0010b89 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010b63:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b66:	85 f6                	test   esi,esi
c0010b68:	74 1f                	je     c0010b89 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010b6a:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010b70:	85 c0                	test   eax,eax
c0010b72:	74 15                	je     c0010b89 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010b74:	83 ec 0c             	sub    esp,0xc
c0010b77:	8b 38                	mov    edi,DWORD PTR [eax]
c0010b79:	56                   	push   esi
c0010b7a:	53                   	push   ebx
c0010b7b:	52                   	push   edx
c0010b7c:	51                   	push   ecx
c0010b7d:	50                   	push   eax
c0010b7e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010b81:	83 c4 20             	add    esp,0x20
c0010b84:	99                   	cdq    
c0010b85:	5b                   	pop    ebx
c0010b86:	5e                   	pop    esi
c0010b87:	5f                   	pop    edi
c0010b88:	c3                   	ret    
c0010b89:	5b                   	pop    ebx
c0010b8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b8f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b94:	5e                   	pop    esi
c0010b95:	5f                   	pop    edi
c0010b96:	c3                   	ret    

c0010b97 <SysShutdown(regs*)>:
c0010b97:	83 ec 0c             	sub    esp,0xc
c0010b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ba1:	85 c0                	test   eax,eax
c0010ba3:	74 18                	je     c0010bbd <SysShutdown(regs*)+0x26>
c0010ba5:	83 f8 01             	cmp    eax,0x1
c0010ba8:	74 38                	je     c0010be2 <SysShutdown(regs*)+0x4b>
c0010baa:	83 f8 02             	cmp    eax,0x2
c0010bad:	74 24                	je     c0010bd3 <SysShutdown(regs*)+0x3c>
c0010baf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bb9:	83 c4 0c             	add    esp,0xc
c0010bbc:	c3                   	ret    
c0010bbd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010bc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bc4:	6a 00                	push   0x0
c0010bc6:	6a 00                	push   0x0
c0010bc8:	6a 00                	push   0x0
c0010bca:	50                   	push   eax
c0010bcb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	eb dc                	jmp    c0010baf <SysShutdown(regs*)+0x18>
c0010bd3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010bd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bda:	6a 00                	push   0x0
c0010bdc:	6a 00                	push   0x0
c0010bde:	6a 01                	push   0x1
c0010be0:	eb e8                	jmp    c0010bca <SysShutdown(regs*)+0x33>
c0010be2:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010be7:	85 c0                	test   eax,eax
c0010be9:	74 02                	je     c0010bed <SysShutdown(regs*)+0x56>
c0010beb:	ff d0                	call   eax
c0010bed:	31 c0                	xor    eax,eax
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	83 c4 0c             	add    esp,0xc
c0010bf4:	c3                   	ret    

c0010bf5 <SysRealpath(regs*)>:
c0010bf5:	83 ec 0c             	sub    esp,0xc
c0010bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bfc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010bff:	85 d2                	test   edx,edx
c0010c01:	74 07                	je     c0010c0a <SysRealpath(regs*)+0x15>
c0010c03:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010c06:	85 c0                	test   eax,eax
c0010c08:	75 0b                	jne    c0010c15 <SysRealpath(regs*)+0x20>
c0010c0a:	b8 01 00 00 00       	mov    eax,0x1
c0010c0f:	31 d2                	xor    edx,edx
c0010c11:	83 c4 0c             	add    esp,0xc
c0010c14:	c3                   	ret    
c0010c15:	51                   	push   ecx
c0010c16:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010c1c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010c1f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010c25:	51                   	push   ecx
c0010c26:	52                   	push   edx
c0010c27:	50                   	push   eax
c0010c28:	e8 ad 9d ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c0010c2d:	83 c4 10             	add    esp,0x10
c0010c30:	31 c0                	xor    eax,eax
c0010c32:	31 d2                	xor    edx,edx
c0010c34:	83 c4 0c             	add    esp,0xc
c0010c37:	c3                   	ret    

c0010c38 <SysReadDir(regs*)>:
c0010c38:	53                   	push   ebx
c0010c39:	83 ec 18             	sub    esp,0x18
c0010c3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c40:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010c43:	83 f8 02             	cmp    eax,0x2
c0010c46:	76 61                	jbe    c0010ca9 <SysReadDir(regs*)+0x71>
c0010c48:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010c4f:	77 49                	ja     c0010c9a <SysReadDir(regs*)+0x62>
c0010c51:	83 ec 0c             	sub    esp,0xc
c0010c54:	50                   	push   eax
c0010c55:	e8 a1 85 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010c5a:	83 c4 10             	add    esp,0x10
c0010c5d:	85 c0                	test   eax,eax
c0010c5f:	74 39                	je     c0010c9a <SysReadDir(regs*)+0x62>
c0010c61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c6e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010c72:	51                   	push   ecx
c0010c73:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010c76:	51                   	push   ecx
c0010c77:	6a 00                	push   0x0
c0010c79:	68 10 01 00 00       	push   0x110
c0010c7e:	50                   	push   eax
c0010c7f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010c82:	83 c4 20             	add    esp,0x20
c0010c85:	85 c0                	test   eax,eax
c0010c87:	74 29                	je     c0010cb2 <SysReadDir(regs*)+0x7a>
c0010c89:	83 f8 07             	cmp    eax,0x7
c0010c8c:	74 1b                	je     c0010ca9 <SysReadDir(regs*)+0x71>
c0010c8e:	b8 02 00 00 00       	mov    eax,0x2
c0010c93:	31 d2                	xor    edx,edx
c0010c95:	83 c4 18             	add    esp,0x18
c0010c98:	5b                   	pop    ebx
c0010c99:	c3                   	ret    
c0010c9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ca4:	83 c4 18             	add    esp,0x18
c0010ca7:	5b                   	pop    ebx
c0010ca8:	c3                   	ret    
c0010ca9:	b8 01 00 00 00       	mov    eax,0x1
c0010cae:	31 d2                	xor    edx,edx
c0010cb0:	eb e3                	jmp    c0010c95 <SysReadDir(regs*)+0x5d>
c0010cb2:	31 c0                	xor    eax,eax
c0010cb4:	31 d2                	xor    edx,edx
c0010cb6:	eb dd                	jmp    c0010c95 <SysReadDir(regs*)+0x5d>

c0010cb8 <SysIsATTY(regs*)>:
c0010cb8:	83 ec 0c             	sub    esp,0xc
c0010cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cbf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010cc2:	83 f8 02             	cmp    eax,0x2
c0010cc5:	76 07                	jbe    c0010cce <SysIsATTY(regs*)+0x16>
c0010cc7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ccc:	75 28                	jne    c0010cf6 <SysIsATTY(regs*)+0x3e>
c0010cce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010cdc:	85 c0                	test   eax,eax
c0010cde:	74 26                	je     c0010d06 <SysIsATTY(regs*)+0x4e>
c0010ce0:	83 ec 0c             	sub    esp,0xc
c0010ce3:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ce5:	50                   	push   eax
c0010ce6:	ff 12                	call   DWORD PTR [edx]
c0010ce8:	31 d2                	xor    edx,edx
c0010cea:	25 ff 00 00 00       	and    eax,0xff
c0010cef:	83 c4 10             	add    esp,0x10
c0010cf2:	83 c4 0c             	add    esp,0xc
c0010cf5:	c3                   	ret    
c0010cf6:	83 ec 0c             	sub    esp,0xc
c0010cf9:	50                   	push   eax
c0010cfa:	e8 fc 84 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010cff:	83 c4 10             	add    esp,0x10
c0010d02:	85 c0                	test   eax,eax
c0010d04:	75 da                	jne    c0010ce0 <SysIsATTY(regs*)+0x28>
c0010d06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d10:	83 c4 0c             	add    esp,0xc
c0010d13:	c3                   	ret    

c0010d14 <SysSeek(regs*)>:
c0010d14:	53                   	push   ebx
c0010d15:	83 ec 08             	sub    esp,0x8
c0010d18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d1c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d1f:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d22:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d28:	77 34                	ja     c0010d5e <SysSeek(regs*)+0x4a>
c0010d2a:	83 ec 0c             	sub    esp,0xc
c0010d2d:	50                   	push   eax
c0010d2e:	e8 c8 84 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010d33:	83 c4 0c             	add    esp,0xc
c0010d36:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010d39:	31 db                	xor    ebx,ebx
c0010d3b:	53                   	push   ebx
c0010d3c:	51                   	push   ecx
c0010d3d:	50                   	push   eax
c0010d3e:	e8 bf 9f ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	85 c0                	test   eax,eax
c0010d48:	0f 95 c0             	setne  al
c0010d4b:	31 d2                	xor    edx,edx
c0010d4d:	25 ff 00 00 00       	and    eax,0xff
c0010d52:	f7 d8                	neg    eax
c0010d54:	83 d2 00             	adc    edx,0x0
c0010d57:	83 c4 08             	add    esp,0x8
c0010d5a:	f7 da                	neg    edx
c0010d5c:	5b                   	pop    ebx
c0010d5d:	c3                   	ret    
c0010d5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d63:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d68:	83 c4 08             	add    esp,0x8
c0010d6b:	5b                   	pop    ebx
c0010d6c:	c3                   	ret    

c0010d6d <SysTell(regs*)>:
c0010d6d:	53                   	push   ebx
c0010d6e:	83 ec 08             	sub    esp,0x8
c0010d71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d78:	83 f8 02             	cmp    eax,0x2
c0010d7b:	76 50                	jbe    c0010dcd <SysTell(regs*)+0x60>
c0010d7d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d82:	76 19                	jbe    c0010d9d <SysTell(regs*)+0x30>
c0010d84:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d87:	31 d2                	xor    edx,edx
c0010d89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d96:	31 c0                	xor    eax,eax
c0010d98:	83 c4 08             	add    esp,0x8
c0010d9b:	5b                   	pop    ebx
c0010d9c:	c3                   	ret    
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	50                   	push   eax
c0010da1:	e8 55 84 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010da6:	5a                   	pop    edx
c0010da7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010daa:	59                   	pop    ecx
c0010dab:	53                   	push   ebx
c0010dac:	50                   	push   eax
c0010dad:	e8 a6 9f ff ff       	call   c000ad58 <File::tell(unsigned long long*)>
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	85 c0                	test   eax,eax
c0010db7:	0f 95 c0             	setne  al
c0010dba:	31 d2                	xor    edx,edx
c0010dbc:	25 ff 00 00 00       	and    eax,0xff
c0010dc1:	f7 d8                	neg    eax
c0010dc3:	83 d2 00             	adc    edx,0x0
c0010dc6:	83 c4 08             	add    esp,0x8
c0010dc9:	f7 da                	neg    edx
c0010dcb:	5b                   	pop    ebx
c0010dcc:	c3                   	ret    
c0010dcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dd7:	83 c4 08             	add    esp,0x8
c0010dda:	5b                   	pop    ebx
c0010ddb:	c3                   	ret    

c0010ddc <SysSize(regs*)>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 18             	sub    esp,0x18
c0010de0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010de4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010de7:	83 f8 02             	cmp    eax,0x2
c0010dea:	76 56                	jbe    c0010e42 <SysSize(regs*)+0x66>
c0010dec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010df1:	76 19                	jbe    c0010e0c <SysSize(regs*)+0x30>
c0010df3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010df6:	31 d2                	xor    edx,edx
c0010df8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010dfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e05:	31 c0                	xor    eax,eax
c0010e07:	83 c4 18             	add    esp,0x18
c0010e0a:	5b                   	pop    ebx
c0010e0b:	c3                   	ret    
c0010e0c:	83 ec 0c             	sub    esp,0xc
c0010e0f:	50                   	push   eax
c0010e10:	e8 e6 83 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010e15:	83 c4 0c             	add    esp,0xc
c0010e18:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010e1c:	52                   	push   edx
c0010e1d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010e20:	52                   	push   edx
c0010e21:	50                   	push   eax
c0010e22:	e8 c9 a0 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0010e27:	83 c4 10             	add    esp,0x10
c0010e2a:	85 c0                	test   eax,eax
c0010e2c:	0f 95 c0             	setne  al
c0010e2f:	31 d2                	xor    edx,edx
c0010e31:	25 ff 00 00 00       	and    eax,0xff
c0010e36:	f7 d8                	neg    eax
c0010e38:	83 d2 00             	adc    edx,0x0
c0010e3b:	83 c4 18             	add    esp,0x18
c0010e3e:	f7 da                	neg    edx
c0010e40:	5b                   	pop    ebx
c0010e41:	c3                   	ret    
c0010e42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e47:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e4c:	83 c4 18             	add    esp,0x18
c0010e4f:	5b                   	pop    ebx
c0010e50:	c3                   	ret    

c0010e51 <SysSizeFromFilename(regs*)>:
c0010e51:	57                   	push   edi
c0010e52:	56                   	push   esi
c0010e53:	53                   	push   ebx
c0010e54:	83 ec 20             	sub    esp,0x20
c0010e57:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010e5b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010e5e:	83 fb 02             	cmp    ebx,0x2
c0010e61:	0f 86 8c 00 00 00    	jbe    c0010ef3 <SysSizeFromFilename(regs*)+0xa2>
c0010e67:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010e6d:	76 1b                	jbe    c0010e8a <SysSizeFromFilename(regs*)+0x39>
c0010e6f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010e72:	31 d2                	xor    edx,edx
c0010e74:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e81:	83 c4 20             	add    esp,0x20
c0010e84:	31 c0                	xor    eax,eax
c0010e86:	5b                   	pop    ebx
c0010e87:	5e                   	pop    esi
c0010e88:	5f                   	pop    edi
c0010e89:	c3                   	ret    
c0010e8a:	83 ec 0c             	sub    esp,0xc
c0010e8d:	68 14 01 00 00       	push   0x114
c0010e92:	e8 d6 69 ff ff       	call   c000786d <malloc>
c0010e97:	83 c4 0c             	add    esp,0xc
c0010e9a:	89 c7                	mov    edi,eax
c0010e9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ea1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ea4:	50                   	push   eax
c0010ea5:	53                   	push   ebx
c0010ea6:	57                   	push   edi
c0010ea7:	e8 d8 9c ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0010eac:	83 c4 0c             	add    esp,0xc
c0010eaf:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010eb3:	50                   	push   eax
c0010eb4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010eb7:	52                   	push   edx
c0010eb8:	57                   	push   edi
c0010eb9:	e8 32 a0 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	85 ff                	test   edi,edi
c0010ec3:	74 14                	je     c0010ed9 <SysSizeFromFilename(regs*)+0x88>
c0010ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ec9:	8b 17                	mov    edx,DWORD PTR [edi]
c0010ecb:	83 ec 0c             	sub    esp,0xc
c0010ece:	57                   	push   edi
c0010ecf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ed9:	85 c0                	test   eax,eax
c0010edb:	0f 95 c0             	setne  al
c0010ede:	31 d2                	xor    edx,edx
c0010ee0:	25 ff 00 00 00       	and    eax,0xff
c0010ee5:	f7 d8                	neg    eax
c0010ee7:	83 d2 00             	adc    edx,0x0
c0010eea:	83 c4 20             	add    esp,0x20
c0010eed:	f7 da                	neg    edx
c0010eef:	5b                   	pop    ebx
c0010ef0:	5e                   	pop    esi
c0010ef1:	5f                   	pop    edi
c0010ef2:	c3                   	ret    
c0010ef3:	83 c4 20             	add    esp,0x20
c0010ef6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010efb:	5b                   	pop    ebx
c0010efc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f01:	5e                   	pop    esi
c0010f02:	5f                   	pop    edi
c0010f03:	c3                   	ret    

c0010f04 <SysClose(regs*)>:
c0010f04:	53                   	push   ebx
c0010f05:	83 ec 08             	sub    esp,0x8
c0010f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f0f:	83 f8 02             	cmp    eax,0x2
c0010f12:	76 41                	jbe    c0010f55 <SysClose(regs*)+0x51>
c0010f14:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010f1a:	83 fa 01             	cmp    edx,0x1
c0010f1d:	76 2d                	jbe    c0010f4c <SysClose(regs*)+0x48>
c0010f1f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010f24:	77 2f                	ja     c0010f55 <SysClose(regs*)+0x51>
c0010f26:	83 ec 0c             	sub    esp,0xc
c0010f29:	50                   	push   eax
c0010f2a:	e8 cc 82 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0010f2f:	89 c3                	mov    ebx,eax
c0010f31:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f34:	e8 69 9d ff ff       	call   c000aca2 <File::close()>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	85 db                	test   ebx,ebx
c0010f3e:	74 0c                	je     c0010f4c <SysClose(regs*)+0x48>
c0010f40:	83 ec 0c             	sub    esp,0xc
c0010f43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f45:	53                   	push   ebx
c0010f46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	31 c0                	xor    eax,eax
c0010f4e:	31 d2                	xor    edx,edx
c0010f50:	83 c4 08             	add    esp,0x8
c0010f53:	5b                   	pop    ebx
c0010f54:	c3                   	ret    
c0010f55:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f5a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f5f:	83 c4 08             	add    esp,0x8
c0010f62:	5b                   	pop    ebx
c0010f63:	c3                   	ret    

c0010f64 <SysOpenDir(regs*)>:
c0010f64:	56                   	push   esi
c0010f65:	53                   	push   ebx
c0010f66:	50                   	push   eax
c0010f67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010f6e:	85 c0                	test   eax,eax
c0010f70:	74 5b                	je     c0010fcd <SysOpenDir(regs*)+0x69>
c0010f72:	83 ec 0c             	sub    esp,0xc
c0010f75:	68 14 01 00 00       	push   0x114
c0010f7a:	e8 ee 68 ff ff       	call   c000786d <malloc>
c0010f7f:	83 c4 0c             	add    esp,0xc
c0010f82:	89 c6                	mov    esi,eax
c0010f84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f8c:	50                   	push   eax
c0010f8d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f90:	50                   	push   eax
c0010f91:	56                   	push   esi
c0010f92:	e8 17 a1 ff ff       	call   c000b0ae <Directory::Directory(char const*, Process*)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	85 f6                	test   esi,esi
c0010f9c:	74 2f                	je     c0010fcd <SysOpenDir(regs*)+0x69>
c0010f9e:	83 ec 0c             	sub    esp,0xc
c0010fa1:	56                   	push   esi
c0010fa2:	e8 c7 a1 ff ff       	call   c000b16e <Directory::open()>
c0010fa7:	83 c4 10             	add    esp,0x10
c0010faa:	85 c0                	test   eax,eax
c0010fac:	75 1f                	jne    c0010fcd <SysOpenDir(regs*)+0x69>
c0010fae:	83 ec 0c             	sub    esp,0xc
c0010fb1:	56                   	push   esi
c0010fb2:	e8 4f 7f ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0010fb7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010fba:	83 c4 10             	add    esp,0x10
c0010fbd:	89 02                	mov    DWORD PTR [edx],eax
c0010fbf:	c1 f8 1f             	sar    eax,0x1f
c0010fc2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010fc5:	31 c0                	xor    eax,eax
c0010fc7:	59                   	pop    ecx
c0010fc8:	31 d2                	xor    edx,edx
c0010fca:	5b                   	pop    ebx
c0010fcb:	5e                   	pop    esi
c0010fcc:	c3                   	ret    
c0010fcd:	59                   	pop    ecx
c0010fce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010fd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010fd8:	5b                   	pop    ebx
c0010fd9:	5e                   	pop    esi
c0010fda:	c3                   	ret    

c0010fdb <SysMakeDir(regs*)>:
c0010fdb:	56                   	push   esi
c0010fdc:	53                   	push   ebx
c0010fdd:	83 ec 10             	sub    esp,0x10
c0010fe0:	68 14 01 00 00       	push   0x114
c0010fe5:	e8 83 68 ff ff       	call   c000786d <malloc>
c0010fea:	83 c4 0c             	add    esp,0xc
c0010fed:	89 c3                	mov    ebx,eax
c0010fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ff4:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010ff7:	56                   	push   esi
c0010ff8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ffc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010fff:	50                   	push   eax
c0011000:	53                   	push   ebx
c0011001:	e8 a8 a0 ff ff       	call   c000b0ae <Directory::Directory(char const*, Process*)>
c0011006:	83 c4 10             	add    esp,0x10
c0011009:	85 db                	test   ebx,ebx
c001100b:	74 2a                	je     c0011037 <SysMakeDir(regs*)+0x5c>
c001100d:	83 ec 0c             	sub    esp,0xc
c0011010:	53                   	push   ebx
c0011011:	e8 38 a3 ff ff       	call   c000b34e <Directory::create()>
c0011016:	89 c6                	mov    esi,eax
c0011018:	8b 03                	mov    eax,DWORD PTR [ebx]
c001101a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001101d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011020:	83 c4 10             	add    esp,0x10
c0011023:	31 c0                	xor    eax,eax
c0011025:	59                   	pop    ecx
c0011026:	85 f6                	test   esi,esi
c0011028:	5b                   	pop    ebx
c0011029:	0f 95 c0             	setne  al
c001102c:	5e                   	pop    esi
c001102d:	31 d2                	xor    edx,edx
c001102f:	f7 d8                	neg    eax
c0011031:	83 d2 00             	adc    edx,0x0
c0011034:	f7 da                	neg    edx
c0011036:	c3                   	ret    
c0011037:	59                   	pop    ecx
c0011038:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001103d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011042:	5b                   	pop    ebx
c0011043:	5e                   	pop    esi
c0011044:	c3                   	ret    

c0011045 <SysCloseDir(regs*)>:
c0011045:	53                   	push   ebx
c0011046:	83 ec 08             	sub    esp,0x8
c0011049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001104d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011050:	8d 50 fd             	lea    edx,[eax-0x3]
c0011053:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011059:	77 2f                	ja     c001108a <SysCloseDir(regs*)+0x45>
c001105b:	83 ec 0c             	sub    esp,0xc
c001105e:	50                   	push   eax
c001105f:	e8 97 81 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0011064:	89 c3                	mov    ebx,eax
c0011066:	89 04 24             	mov    DWORD PTR [esp],eax
c0011069:	e8 5c a1 ff ff       	call   c000b1ca <Directory::close()>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	85 db                	test   ebx,ebx
c0011073:	74 0c                	je     c0011081 <SysCloseDir(regs*)+0x3c>
c0011075:	83 ec 0c             	sub    esp,0xc
c0011078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001107a:	53                   	push   ebx
c001107b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001107e:	83 c4 10             	add    esp,0x10
c0011081:	31 c0                	xor    eax,eax
c0011083:	31 d2                	xor    edx,edx
c0011085:	83 c4 08             	add    esp,0x8
c0011088:	5b                   	pop    ebx
c0011089:	c3                   	ret    
c001108a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001108f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011094:	83 c4 08             	add    esp,0x8
c0011097:	5b                   	pop    ebx
c0011098:	c3                   	ret    

c0011099 <SysWait(regs*)>:
c0011099:	83 ec 10             	sub    esp,0x10
c001109c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110a0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00110a3:	52                   	push   edx
c00110a4:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00110a7:	51                   	push   ecx
c00110a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00110ab:	50                   	push   eax
c00110ac:	e8 7b 3c 00 00       	call   c0014d2c <waitTask(int, int*, int)>
c00110b1:	83 c4 1c             	add    esp,0x1c
c00110b4:	99                   	cdq    
c00110b5:	c3                   	ret    

c00110b6 <SysNotImpl(regs*)>:
c00110b6:	83 ec 18             	sub    esp,0x18
c00110b9:	68 5e 05 02 c0       	push   0xc002055e
c00110be:	e8 0c f3 ff ff       	call   c00103cf <KePanic(char const*)>
c00110c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110cd:	83 c4 1c             	add    esp,0x1c
c00110d0:	c3                   	ret    

c00110d1 <SysPanic(regs*)>:
c00110d1:	83 ec 18             	sub    esp,0x18
c00110d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110d8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00110db:	50                   	push   eax
c00110dc:	e8 ee f2 ff ff       	call   c00103cf <KePanic(char const*)>
c00110e1:	b8 01 00 00 00       	mov    eax,0x1
c00110e6:	31 d2                	xor    edx,edx
c00110e8:	83 c4 1c             	add    esp,0x1c
c00110eb:	c3                   	ret    

c00110ec <SysRmdir(regs*)>:
c00110ec:	56                   	push   esi
c00110ed:	53                   	push   ebx
c00110ee:	83 ec 20             	sub    esp,0x20
c00110f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110f5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00110f8:	68 14 01 00 00       	push   0x114
c00110fd:	e8 6b 67 ff ff       	call   c000786d <malloc>
c0011102:	83 c4 0c             	add    esp,0xc
c0011105:	89 c3                	mov    ebx,eax
c0011107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001110c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001110f:	50                   	push   eax
c0011110:	56                   	push   esi
c0011111:	53                   	push   ebx
c0011112:	e8 6d 9a ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0011117:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001111a:	e8 9d 9c ff ff       	call   c000adbc <File::unlink()>
c001111f:	83 c4 10             	add    esp,0x10
c0011122:	85 db                	test   ebx,ebx
c0011124:	74 14                	je     c001113a <SysRmdir(regs*)+0x4e>
c0011126:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001112a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001112c:	83 ec 0c             	sub    esp,0xc
c001112f:	53                   	push   ebx
c0011130:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001113a:	85 c0                	test   eax,eax
c001113c:	0f 95 c0             	setne  al
c001113f:	31 d2                	xor    edx,edx
c0011141:	25 ff 00 00 00       	and    eax,0xff
c0011146:	f7 d8                	neg    eax
c0011148:	83 d2 00             	adc    edx,0x0
c001114b:	83 c4 14             	add    esp,0x14
c001114e:	f7 da                	neg    edx
c0011150:	5b                   	pop    ebx
c0011151:	5e                   	pop    esi
c0011152:	c3                   	ret    

c0011153 <SysUnlink(regs*)>:
c0011153:	56                   	push   esi
c0011154:	53                   	push   ebx
c0011155:	83 ec 20             	sub    esp,0x20
c0011158:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001115c:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001115f:	68 14 01 00 00       	push   0x114
c0011164:	e8 04 67 ff ff       	call   c000786d <malloc>
c0011169:	83 c4 0c             	add    esp,0xc
c001116c:	89 c3                	mov    ebx,eax
c001116e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011173:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011176:	50                   	push   eax
c0011177:	56                   	push   esi
c0011178:	53                   	push   ebx
c0011179:	e8 06 9a ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001117e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011181:	e8 36 9c ff ff       	call   c000adbc <File::unlink()>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	85 db                	test   ebx,ebx
c001118b:	74 14                	je     c00111a1 <SysUnlink(regs*)+0x4e>
c001118d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011191:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011193:	83 ec 0c             	sub    esp,0xc
c0011196:	53                   	push   ebx
c0011197:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001119a:	83 c4 10             	add    esp,0x10
c001119d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111a1:	85 c0                	test   eax,eax
c00111a3:	0f 95 c0             	setne  al
c00111a6:	31 d2                	xor    edx,edx
c00111a8:	25 ff 00 00 00       	and    eax,0xff
c00111ad:	f7 d8                	neg    eax
c00111af:	83 d2 00             	adc    edx,0x0
c00111b2:	83 c4 14             	add    esp,0x14
c00111b5:	f7 da                	neg    edx
c00111b7:	5b                   	pop    ebx
c00111b8:	5e                   	pop    esi
c00111b9:	c3                   	ret    

c00111ba <SysGetArgv(regs*)>:
c00111ba:	83 ec 0c             	sub    esp,0xc
c00111bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111c1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00111c4:	85 c0                	test   eax,eax
c00111c6:	78 2c                	js     c00111f4 <SysGetArgv(regs*)+0x3a>
c00111c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00111ce:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00111d1:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00111d7:	7d 1b                	jge    c00111f4 <SysGetArgv(regs*)+0x3a>
c00111d9:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00111e0:	85 c0                	test   eax,eax
c00111e2:	74 18                	je     c00111fc <SysGetArgv(regs*)+0x42>
c00111e4:	83 ec 08             	sub    esp,0x8
c00111e7:	50                   	push   eax
c00111e8:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00111eb:	50                   	push   eax
c00111ec:	e8 ff f3 fe ff       	call   c00005f0 <strcpy>
c00111f1:	83 c4 10             	add    esp,0x10
c00111f4:	31 c0                	xor    eax,eax
c00111f6:	31 d2                	xor    edx,edx
c00111f8:	83 c4 0c             	add    esp,0xc
c00111fb:	c3                   	ret    
c00111fc:	b8 01 00 00 00       	mov    eax,0x1
c0011201:	31 d2                	xor    edx,edx
c0011203:	83 c4 0c             	add    esp,0xc
c0011206:	c3                   	ret    

c0011207 <SysUSleep(regs*)>:
c0011207:	83 ec 1c             	sub    esp,0x1c
c001120a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001120e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011211:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011214:	6a 00                	push   0x0
c0011216:	6a 64                	push   0x64
c0011218:	52                   	push   edx
c0011219:	50                   	push   eax
c001121a:	e8 e1 cb 00 00       	call   c001de00 <__udivdi3>
c001121f:	83 c4 14             	add    esp,0x14
c0011222:	50                   	push   eax
c0011223:	e8 d8 3b 00 00       	call   c0014e00 <milliTenthSleep(unsigned int)>
c0011228:	31 c0                	xor    eax,eax
c001122a:	31 d2                	xor    edx,edx
c001122c:	83 c4 1c             	add    esp,0x1c
c001122f:	c3                   	ret    

c0011230 <SysSpawn(regs*)>:
c0011230:	56                   	push   esi
c0011231:	53                   	push   ebx
c0011232:	50                   	push   eax
c0011233:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011237:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001123a:	85 c0                	test   eax,eax
c001123c:	75 08                	jne    c0011246 <SysSpawn(regs*)+0x16>
c001123e:	59                   	pop    ecx
c001123f:	31 c0                	xor    eax,eax
c0011241:	31 d2                	xor    edx,edx
c0011243:	5b                   	pop    ebx
c0011244:	5e                   	pop    esi
c0011245:	c3                   	ret    
c0011246:	83 ec 0c             	sub    esp,0xc
c0011249:	68 24 07 00 00       	push   0x724
c001124e:	e8 1a 66 ff ff       	call   c000786d <malloc>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	89 c6                	mov    esi,eax
c0011258:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001125b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001125e:	85 c0                	test   eax,eax
c0011260:	75 33                	jne    c0011295 <SysSpawn(regs*)+0x65>
c0011262:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011267:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001126a:	52                   	push   edx
c001126b:	50                   	push   eax
c001126c:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001126f:	53                   	push   ebx
c0011270:	56                   	push   esi
c0011271:	e8 0e 32 00 00       	call   c0014484 <Process::Process(char const*, Process*, char**)>
c0011276:	83 c4 10             	add    esp,0x10
c0011279:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011280:	75 bc                	jne    c001123e <SysSpawn(regs*)+0xe>
c0011282:	83 ec 0c             	sub    esp,0xc
c0011285:	56                   	push   esi
c0011286:	e8 39 37 00 00       	call   c00149c4 <Process::createUserThread()>
c001128b:	8b 06                	mov    eax,DWORD PTR [esi]
c001128d:	83 c4 10             	add    esp,0x10
c0011290:	99                   	cdq    
c0011291:	59                   	pop    ecx
c0011292:	5b                   	pop    ebx
c0011293:	5e                   	pop    esi
c0011294:	c3                   	ret    
c0011295:	31 c0                	xor    eax,eax
c0011297:	eb d1                	jmp    c001126a <SysSpawn(regs*)+0x3a>

c0011299 <SysGetEnv(regs*)>:
c0011299:	57                   	push   edi
c001129a:	56                   	push   esi
c001129b:	53                   	push   ebx
c001129c:	83 ec 1c             	sub    esp,0x1c
c001129f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112a8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00112ab:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00112ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112b1:	50                   	push   eax
c00112b2:	e8 d0 ef ff ff       	call   c0010287 <Krnl::getProcessTotalEnvCount(Process*)>
c00112b7:	83 c4 10             	add    esp,0x10
c00112ba:	39 c7                	cmp    edi,eax
c00112bc:	7c 14                	jl     c00112d2 <SysGetEnv(regs*)+0x39>
c00112be:	85 f6                	test   esi,esi
c00112c0:	75 0b                	jne    c00112cd <SysGetEnv(regs*)+0x34>
c00112c2:	83 c4 10             	add    esp,0x10
c00112c5:	31 c0                	xor    eax,eax
c00112c7:	5b                   	pop    ebx
c00112c8:	31 d2                	xor    edx,edx
c00112ca:	5e                   	pop    esi
c00112cb:	5f                   	pop    edi
c00112cc:	c3                   	ret    
c00112cd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00112d0:	eb f0                	jmp    c00112c2 <SysGetEnv(regs*)+0x29>
c00112d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00112d6:	52                   	push   edx
c00112d7:	57                   	push   edi
c00112d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00112de:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00112e1:	51                   	push   ecx
c00112e2:	50                   	push   eax
c00112e3:	e8 bf ef ff ff       	call   c00102a7 <Krnl::getProcessEnvPair(Process*, int)>
c00112e8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00112eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112ef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00112f3:	83 c4 0c             	add    esp,0xc
c00112f6:	85 db                	test   ebx,ebx
c00112f8:	75 23                	jne    c001131d <SysGetEnv(regs*)+0x84>
c00112fa:	83 ec 0c             	sub    esp,0xc
c00112fd:	50                   	push   eax
c00112fe:	e8 2d f2 fe ff       	call   c0000530 <strlen>
c0011303:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011306:	89 c3                	mov    ebx,eax
c0011308:	e8 23 f2 fe ff       	call   c0000530 <strlen>
c001130d:	31 d2                	xor    edx,edx
c001130f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	5b                   	pop    ebx
c001131a:	5e                   	pop    esi
c001131b:	5f                   	pop    edi
c001131c:	c3                   	ret    
c001131d:	83 ec 08             	sub    esp,0x8
c0011320:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011323:	50                   	push   eax
c0011324:	56                   	push   esi
c0011325:	e8 c6 f2 fe ff       	call   c00005f0 <strcpy>
c001132a:	58                   	pop    eax
c001132b:	5a                   	pop    edx
c001132c:	68 78 05 02 c0       	push   0xc0020578
c0011331:	56                   	push   esi
c0011332:	e8 79 f4 fe ff       	call   c00007b0 <strcat>
c0011337:	59                   	pop    ecx
c0011338:	5b                   	pop    ebx
c0011339:	57                   	push   edi
c001133a:	56                   	push   esi
c001133b:	e8 70 f4 fe ff       	call   c00007b0 <strcat>
c0011340:	83 c4 10             	add    esp,0x10
c0011343:	e9 7a ff ff ff       	jmp    c00112c2 <SysGetEnv(regs*)+0x29>

c0011348 <SysSetFatAttrib(regs*)>:
c0011348:	57                   	push   edi
c0011349:	56                   	push   esi
c001134a:	53                   	push   ebx
c001134b:	83 ec 1c             	sub    esp,0x1c
c001134e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011352:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011355:	68 14 01 00 00       	push   0x114
c001135a:	e8 0e 65 ff ff       	call   c000786d <malloc>
c001135f:	83 c4 0c             	add    esp,0xc
c0011362:	89 c3                	mov    ebx,eax
c0011364:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011369:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001136c:	50                   	push   eax
c001136d:	57                   	push   edi
c001136e:	53                   	push   ebx
c001136f:	e8 10 98 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0011374:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011377:	83 c4 0c             	add    esp,0xc
c001137a:	0f b6 d4             	movzx  edx,ah
c001137d:	25 ff 00 00 00       	and    eax,0xff
c0011382:	52                   	push   edx
c0011383:	50                   	push   eax
c0011384:	53                   	push   ebx
c0011385:	e8 cc 9a ff ff       	call   c000ae56 <File::chfatattr(unsigned char, unsigned char)>
c001138a:	83 c4 10             	add    esp,0x10
c001138d:	85 db                	test   ebx,ebx
c001138f:	74 14                	je     c00113a5 <SysSetFatAttrib(regs*)+0x5d>
c0011391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011395:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011397:	83 ec 0c             	sub    esp,0xc
c001139a:	53                   	push   ebx
c001139b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001139e:	83 c4 10             	add    esp,0x10
c00113a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113a5:	85 c0                	test   eax,eax
c00113a7:	0f 95 c0             	setne  al
c00113aa:	31 d2                	xor    edx,edx
c00113ac:	25 ff 00 00 00       	and    eax,0xff
c00113b1:	f7 d8                	neg    eax
c00113b3:	83 d2 00             	adc    edx,0x0
c00113b6:	83 c4 10             	add    esp,0x10
c00113b9:	f7 da                	neg    edx
c00113bb:	5b                   	pop    ebx
c00113bc:	5e                   	pop    esi
c00113bd:	5f                   	pop    edi
c00113be:	c3                   	ret    

c00113bf <SysPipe(regs*)>:
c00113bf:	57                   	push   edi
c00113c0:	56                   	push   esi
c00113c1:	53                   	push   ebx
c00113c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00113cc:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00113cf:	6a 20                	push   0x20
c00113d1:	e8 97 64 ff ff       	call   c000786d <malloc>
c00113d6:	89 c3                	mov    ebx,eax
c00113d8:	58                   	pop    eax
c00113d9:	5a                   	pop    edx
c00113da:	68 00 50 00 00       	push   0x5000
c00113df:	53                   	push   ebx
c00113e0:	e8 8d 6d ff ff       	call   c0008172 <Pipe::Pipe(int)>
c00113e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113e8:	e8 19 7b ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c00113ed:	89 07                	mov    DWORD PTR [edi],eax
c00113ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00113f2:	e8 0f 7b ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	89 06                	mov    DWORD PTR [esi],eax
c00113fc:	31 d2                	xor    edx,edx
c00113fe:	5b                   	pop    ebx
c00113ff:	31 c0                	xor    eax,eax
c0011401:	5e                   	pop    esi
c0011402:	5f                   	pop    edi
c0011403:	c3                   	ret    

c0011404 <SysGetUnixTime(regs*)>:
c0011404:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0011409:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001140f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011413:	e9 7a a1 ff ff       	jmp    c000b592 <Clock::timeInSecondsLocal()>

c0011418 <string_ends_with(char const*, char const*)>:
c0011418:	57                   	push   edi
c0011419:	56                   	push   esi
c001141a:	53                   	push   ebx
c001141b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001141f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011423:	83 ec 0c             	sub    esp,0xc
c0011426:	53                   	push   ebx
c0011427:	e8 04 f1 fe ff       	call   c0000530 <strlen>
c001142c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001142f:	89 c6                	mov    esi,eax
c0011431:	e8 fa f0 fe ff       	call   c0000530 <strlen>
c0011436:	83 c4 10             	add    esp,0x10
c0011439:	39 c6                	cmp    esi,eax
c001143b:	7d 06                	jge    c0011443 <string_ends_with(char const*, char const*)+0x2b>
c001143d:	5b                   	pop    ebx
c001143e:	31 c0                	xor    eax,eax
c0011440:	5e                   	pop    esi
c0011441:	5f                   	pop    edi
c0011442:	c3                   	ret    
c0011443:	83 ec 08             	sub    esp,0x8
c0011446:	29 c6                	sub    esi,eax
c0011448:	57                   	push   edi
c0011449:	01 f3                	add    ebx,esi
c001144b:	53                   	push   ebx
c001144c:	e8 7f f2 fe ff       	call   c00006d0 <strcmp>
c0011451:	83 c4 10             	add    esp,0x10
c0011454:	85 c0                	test   eax,eax
c0011456:	5b                   	pop    ebx
c0011457:	0f 94 c0             	sete   al
c001145a:	5e                   	pop    esi
c001145b:	25 ff 00 00 00       	and    eax,0xff
c0011460:	5f                   	pop    edi
c0011461:	c3                   	ret    

c0011462 <SysOpen(regs*)>:
c0011462:	56                   	push   esi
c0011463:	53                   	push   ebx
c0011464:	81 ec 04 01 00 00    	sub    esp,0x104
c001146a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011471:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011474:	85 c9                	test   ecx,ecx
c0011476:	0f 84 b9 01 00 00    	je     c0011635 <SysOpen(regs*)+0x1d3>
c001147c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001147f:	85 c0                	test   eax,eax
c0011481:	0f 84 ae 01 00 00    	je     c0011635 <SysOpen(regs*)+0x1d3>
c0011487:	52                   	push   edx
c0011488:	68 7a 05 02 c0       	push   0xc002057a
c001148d:	50                   	push   eax
c001148e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011492:	56                   	push   esi
c0011493:	e8 42 95 ff ff       	call   c000a9da <Fs::standardiseFiles(char*, char const*, char const*)>
c0011498:	89 34 24             	mov    DWORD PTR [esp],esi
c001149b:	e8 90 f0 fe ff       	call   c0000530 <strlen>
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	48                   	dec    eax
c00114a4:	74 1d                	je     c00114c3 <SysOpen(regs*)+0x61>
c00114a6:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00114a9:	eb 0f                	jmp    c00114ba <SysOpen(regs*)+0x58>
c00114ab:	80 fa 3a             	cmp    dl,0x3a
c00114ae:	74 0f                	je     c00114bf <SysOpen(regs*)+0x5d>
c00114b0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00114b4:	48                   	dec    eax
c00114b5:	74 0c                	je     c00114c3 <SysOpen(regs*)+0x61>
c00114b7:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00114ba:	80 fa 2e             	cmp    dl,0x2e
c00114bd:	75 ec                	jne    c00114ab <SysOpen(regs*)+0x49>
c00114bf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00114c3:	83 ec 08             	sub    esp,0x8
c00114c6:	68 7e 05 02 c0       	push   0xc002057e
c00114cb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114ce:	50                   	push   eax
c00114cf:	e8 44 ff ff ff       	call   c0011418 <string_ends_with(char const*, char const*)>
c00114d4:	83 c4 10             	add    esp,0x10
c00114d7:	85 c0                	test   eax,eax
c00114d9:	74 1d                	je     c00114f8 <SysOpen(regs*)+0x96>
c00114db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114de:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00114e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114eb:	81 c4 04 01 00 00    	add    esp,0x104
c00114f1:	31 c0                	xor    eax,eax
c00114f3:	31 d2                	xor    edx,edx
c00114f5:	5b                   	pop    ebx
c00114f6:	5e                   	pop    esi
c00114f7:	c3                   	ret    
c00114f8:	83 ec 08             	sub    esp,0x8
c00114fb:	68 83 05 02 c0       	push   0xc0020583
c0011500:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011503:	50                   	push   eax
c0011504:	e8 0f ff ff ff       	call   c0011418 <string_ends_with(char const*, char const*)>
c0011509:	83 c4 10             	add    esp,0x10
c001150c:	85 c0                	test   eax,eax
c001150e:	75 cb                	jne    c00114db <SysOpen(regs*)+0x79>
c0011510:	83 ec 08             	sub    esp,0x8
c0011513:	68 7f 05 02 c0       	push   0xc002057f
c0011518:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001151b:	50                   	push   eax
c001151c:	e8 af f1 fe ff       	call   c00006d0 <strcmp>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	85 c0                	test   eax,eax
c0011526:	74 b3                	je     c00114db <SysOpen(regs*)+0x79>
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	68 7e 05 02 c0       	push   0xc002057e
c0011530:	56                   	push   esi
c0011531:	e8 e2 fe ff ff       	call   c0011418 <string_ends_with(char const*, char const*)>
c0011536:	83 c4 10             	add    esp,0x10
c0011539:	85 c0                	test   eax,eax
c001153b:	75 9e                	jne    c00114db <SysOpen(regs*)+0x79>
c001153d:	83 ec 08             	sub    esp,0x8
c0011540:	68 88 05 02 c0       	push   0xc0020588
c0011545:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011548:	50                   	push   eax
c0011549:	e8 ca fe ff ff       	call   c0011418 <string_ends_with(char const*, char const*)>
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	85 c0                	test   eax,eax
c0011553:	0f 85 ef 00 00 00    	jne    c0011648 <SysOpen(regs*)+0x1e6>
c0011559:	83 ec 08             	sub    esp,0x8
c001155c:	68 8d 05 02 c0       	push   0xc002058d
c0011561:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011564:	50                   	push   eax
c0011565:	e8 ae fe ff ff       	call   c0011418 <string_ends_with(char const*, char const*)>
c001156a:	83 c4 10             	add    esp,0x10
c001156d:	85 c0                	test   eax,eax
c001156f:	0f 85 d3 00 00 00    	jne    c0011648 <SysOpen(regs*)+0x1e6>
c0011575:	83 ec 08             	sub    esp,0x8
c0011578:	68 89 05 02 c0       	push   0xc0020589
c001157d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011580:	51                   	push   ecx
c0011581:	e8 4a f1 fe ff       	call   c00006d0 <strcmp>
c0011586:	83 c4 10             	add    esp,0x10
c0011589:	85 c0                	test   eax,eax
c001158b:	0f 84 b7 00 00 00    	je     c0011648 <SysOpen(regs*)+0x1e6>
c0011591:	83 ec 08             	sub    esp,0x8
c0011594:	68 88 05 02 c0       	push   0xc0020588
c0011599:	56                   	push   esi
c001159a:	e8 79 fe ff ff       	call   c0011418 <string_ends_with(char const*, char const*)>
c001159f:	83 c4 10             	add    esp,0x10
c00115a2:	85 c0                	test   eax,eax
c00115a4:	0f 85 9e 00 00 00    	jne    c0011648 <SysOpen(regs*)+0x1e6>
c00115aa:	83 ec 0c             	sub    esp,0xc
c00115ad:	68 14 01 00 00       	push   0x114
c00115b2:	e8 b6 62 ff ff       	call   c000786d <malloc>
c00115b7:	83 c4 0c             	add    esp,0xc
c00115ba:	89 c6                	mov    esi,eax
c00115bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115c4:	50                   	push   eax
c00115c5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00115c8:	52                   	push   edx
c00115c9:	56                   	push   esi
c00115ca:	e8 b5 95 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00115cf:	83 c4 10             	add    esp,0x10
c00115d2:	85 f6                	test   esi,esi
c00115d4:	74 5f                	je     c0011635 <SysOpen(regs*)+0x1d3>
c00115d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00115d9:	89 d0                	mov    eax,edx
c00115db:	25 ff 00 00 00       	and    eax,0xff
c00115e0:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00115e3:	89 d0                	mov    eax,edx
c00115e5:	83 e0 01             	and    eax,0x1
c00115e8:	f6 c2 02             	test   dl,0x2
c00115eb:	74 03                	je     c00115f0 <SysOpen(regs*)+0x18e>
c00115ed:	83 c8 02             	or     eax,0x2
c00115f0:	f6 c2 04             	test   dl,0x4
c00115f3:	74 03                	je     c00115f8 <SysOpen(regs*)+0x196>
c00115f5:	83 c8 04             	or     eax,0x4
c00115f8:	f6 c2 08             	test   dl,0x8
c00115fb:	74 03                	je     c0011600 <SysOpen(regs*)+0x19e>
c00115fd:	83 c8 0a             	or     eax,0xa
c0011600:	83 e2 10             	and    edx,0x10
c0011603:	74 03                	je     c0011608 <SysOpen(regs*)+0x1a6>
c0011605:	83 c8 12             	or     eax,0x12
c0011608:	83 ec 08             	sub    esp,0x8
c001160b:	50                   	push   eax
c001160c:	56                   	push   esi
c001160d:	e8 32 96 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	85 c0                	test   eax,eax
c0011617:	75 1c                	jne    c0011635 <SysOpen(regs*)+0x1d3>
c0011619:	83 ec 0c             	sub    esp,0xc
c001161c:	56                   	push   esi
c001161d:	e8 e4 78 ff ff       	call   c0008f06 <UnixFile::getFileDescriptor()>
c0011622:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	89 02                	mov    DWORD PTR [edx],eax
c001162a:	c1 f8 1f             	sar    eax,0x1f
c001162d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011630:	e9 b6 fe ff ff       	jmp    c00114eb <SysOpen(regs*)+0x89>
c0011635:	81 c4 04 01 00 00    	add    esp,0x104
c001163b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011640:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011645:	5b                   	pop    ebx
c0011646:	5e                   	pop    esi
c0011647:	c3                   	ret    
c0011648:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001164b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011651:	e9 8e fe ff ff       	jmp    c00114e4 <SysOpen(regs*)+0x82>

c0011656 <KeSystemCall(regs*, void*)>:
c0011656:	53                   	push   ebx
c0011657:	83 ec 08             	sub    esp,0x8
c001165a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001165e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011661:	83 f8 3b             	cmp    eax,0x3b
c0011664:	77 16                	ja     c001167c <KeSystemCall(regs*, void*)+0x26>
c0011666:	8b 14 85 40 19 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde6c0]
c001166d:	85 d2                	test   edx,edx
c001166f:	74 0b                	je     c001167c <KeSystemCall(regs*, void*)+0x26>
c0011671:	83 ec 0c             	sub    esp,0xc
c0011674:	53                   	push   ebx
c0011675:	ff d2                	call   edx
c0011677:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001167a:	eb 0d                	jmp    c0011689 <KeSystemCall(regs*, void*)+0x33>
c001167c:	52                   	push   edx
c001167d:	52                   	push   edx
c001167e:	50                   	push   eax
c001167f:	68 92 05 02 c0       	push   0xc0020592
c0011684:	e8 85 8f ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011691:	31 d2                	xor    edx,edx
c0011693:	83 c4 08             	add    esp,0x8
c0011696:	5b                   	pop    ebx
c0011697:	c3                   	ret    

c0011698 <KeSwitchEndian16(unsigned short)>:
c0011698:	83 ec 04             	sub    esp,0x4
c001169b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001169f:	66 89 04 24          	mov    WORD PTR [esp],ax
c00116a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116a6:	25 ff ff 00 00       	and    eax,0xffff
c00116ab:	c1 f8 08             	sar    eax,0x8
c00116ae:	89 c2                	mov    edx,eax
c00116b0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116b3:	25 ff ff 00 00       	and    eax,0xffff
c00116b8:	c1 e0 08             	shl    eax,0x8
c00116bb:	09 d0                	or     eax,edx
c00116bd:	83 c4 04             	add    esp,0x4
c00116c0:	c3                   	ret    
c00116c1:	8d 76 00             	lea    esi,[esi+0x0]

c00116c4 <KeSwitchEndian32(unsigned int)>:
c00116c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c8:	c1 e8 18             	shr    eax,0x18
c00116cb:	89 c2                	mov    edx,eax
c00116cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d1:	c1 e0 08             	shl    eax,0x8
c00116d4:	25 00 00 ff 00       	and    eax,0xff0000
c00116d9:	09 c2                	or     edx,eax
c00116db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116df:	c1 e8 08             	shr    eax,0x8
c00116e2:	25 00 ff 00 00       	and    eax,0xff00
c00116e7:	09 c2                	or     edx,eax
c00116e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ed:	c1 e0 18             	shl    eax,0x18
c00116f0:	09 d0                	or     eax,edx
c00116f2:	c3                   	ret    
c00116f3:	90                   	nop

c00116f4 <EthernetCRC32(unsigned char*, int)>:
c00116f4:	83 ec 10             	sub    esp,0x10
c00116f7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00116fc:	75 0a                	jne    c0011708 <EthernetCRC32(unsigned char*, int)+0x14>
c00116fe:	b8 00 00 00 00       	mov    eax,0x0
c0011703:	e9 8c 00 00 00       	jmp    c0011794 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011708:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001170d:	7f 09                	jg     c0011718 <EthernetCRC32(unsigned char*, int)+0x24>
c001170f:	b8 00 00 00 00       	mov    eax,0x0
c0011714:	eb 7e                	jmp    c0011794 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011716:	66 90                	xchg   ax,ax
c0011718:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011720:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011728:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001172c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011730:	7d 5a                	jge    c001178c <EthernetCRC32(unsigned char*, int)+0x98>
c0011732:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011736:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001173a:	01 d0                	add    eax,edx
c001173c:	8a 00                	mov    al,BYTE PTR [eax]
c001173e:	25 ff 00 00 00       	and    eax,0xff
c0011743:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011747:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001174f:	90                   	nop
c0011750:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011755:	7f 2d                	jg     c0011784 <EthernetCRC32(unsigned char*, int)+0x90>
c0011757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001175b:	83 e0 01             	and    eax,0x1
c001175e:	74 10                	je     c0011770 <EthernetCRC32(unsigned char*, int)+0x7c>
c0011760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011764:	d1 e8                	shr    eax,1
c0011766:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001176b:	eb 0b                	jmp    c0011778 <EthernetCRC32(unsigned char*, int)+0x84>
c001176d:	8d 76 00             	lea    esi,[esi+0x0]
c0011770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011774:	d1 e8                	shr    eax,1
c0011776:	66 90                	xchg   ax,ax
c0011778:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001177c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011780:	eb ce                	jmp    c0011750 <EthernetCRC32(unsigned char*, int)+0x5c>
c0011782:	66 90                	xchg   ax,ax
c0011784:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011788:	eb 9e                	jmp    c0011728 <EthernetCRC32(unsigned char*, int)+0x34>
c001178a:	66 90                	xchg   ax,ax
c001178c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011790:	f7 d0                	not    eax
c0011792:	66 90                	xchg   ax,ax
c0011794:	83 c4 10             	add    esp,0x10
c0011797:	c3                   	ret    

c0011798 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011798:	83 ec 2c             	sub    esp,0x2c
c001179b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001179f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117b3:	66 3d 06 08          	cmp    ax,0x806
c00117b7:	75 13                	jne    c00117cc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c00117b9:	83 ec 0c             	sub    esp,0xc
c00117bc:	68 a6 05 02 c0       	push   0xc00205a6
c00117c1:	e8 48 8e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00117c6:	83 c4 10             	add    esp,0x10
c00117c9:	eb 21                	jmp    c00117ec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c00117cb:	90                   	nop
c00117cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117d0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117d3:	66 3d 00 08          	cmp    ax,0x800
c00117d7:	75 13                	jne    c00117ec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c00117d9:	83 ec 0c             	sub    esp,0xc
c00117dc:	68 bc 05 02 c0       	push   0xc00205bc
c00117e1:	e8 28 8e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00117e6:	83 c4 10             	add    esp,0x10
c00117e9:	8d 76 00             	lea    esi,[esi+0x0]
c00117ec:	90                   	nop
c00117ed:	83 c4 2c             	add    esp,0x2c
c00117f0:	c3                   	ret    

c00117f1 <CmOpen(char const*)>:
c00117f1:	57                   	push   edi
c00117f2:	56                   	push   esi
c00117f3:	53                   	push   ebx
c00117f4:	83 ec 1c             	sub    esp,0x1c
c00117f7:	6a 30                	push   0x30
c00117f9:	e8 6f 60 ff ff       	call   c000786d <malloc>
c00117fe:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011805:	89 c3                	mov    ebx,eax
c0011807:	e8 61 60 ff ff       	call   c000786d <malloc>
c001180c:	83 c4 0c             	add    esp,0xc
c001180f:	89 c6                	mov    esi,eax
c0011811:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0011817:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001181b:	50                   	push   eax
c001181c:	e8 63 93 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0011821:	83 c4 0c             	add    esp,0xc
c0011824:	89 33                	mov    DWORD PTR [ebx],esi
c0011826:	8d 44 24 07          	lea    eax,[esp+0x7]
c001182a:	50                   	push   eax
c001182b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001182f:	50                   	push   eax
c0011830:	56                   	push   esi
c0011831:	e8 ba 96 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0011836:	5a                   	pop    edx
c0011837:	59                   	pop    ecx
c0011838:	6a 01                	push   0x1
c001183a:	ff 33                	push   DWORD PTR [ebx]
c001183c:	e8 03 94 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0011841:	5e                   	pop    esi
c0011842:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011846:	e8 22 60 ff ff       	call   c000786d <malloc>
c001184b:	5a                   	pop    edx
c001184c:	89 c7                	mov    edi,eax
c001184e:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011852:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011854:	8b 10                	mov    edx,DWORD PTR [eax]
c0011856:	56                   	push   esi
c0011857:	57                   	push   edi
c0011858:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001185c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011860:	50                   	push   eax
c0011861:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011864:	83 c4 14             	add    esp,0x14
c0011867:	ff 33                	push   DWORD PTR [ebx]
c0011869:	e8 34 94 ff ff       	call   c000aca2 <File::close()>
c001186e:	59                   	pop    ecx
c001186f:	58                   	pop    eax
c0011870:	6a 13                	push   0x13
c0011872:	ff 33                	push   DWORD PTR [ebx]
c0011874:	e8 cb 93 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0011879:	8b 03                	mov    eax,DWORD PTR [ebx]
c001187b:	8b 10                	mov    edx,DWORD PTR [eax]
c001187d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011880:	57                   	push   edi
c0011881:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011885:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011889:	50                   	push   eax
c001188a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001188d:	83 c4 14             	add    esp,0x14
c0011890:	57                   	push   edi
c0011891:	e8 e7 5f ff ff       	call   c000787d <free>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001189c:	75 10                	jne    c00118ae <CmOpen(char const*)+0xbd>
c001189e:	83 ec 0c             	sub    esp,0xc
c00118a1:	68 d1 05 02 c0       	push   0xc00205d1
c00118a6:	e8 24 eb ff ff       	call   c00103cf <KePanic(char const*)>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	8d 7b 05             	lea    edi,[ebx+0x5]
c00118b1:	50                   	push   eax
c00118b2:	6a 00                	push   0x0
c00118b4:	6a 00                	push   0x0
c00118b6:	ff 33                	push   DWORD PTR [ebx]
c00118b8:	e8 45 94 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00118bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00118c1:	89 34 24             	mov    DWORD PTR [esp],esi
c00118c4:	57                   	push   edi
c00118c5:	6a 00                	push   0x0
c00118c7:	6a 2b                	push   0x2b
c00118c9:	50                   	push   eax
c00118ca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00118cd:	83 c4 1c             	add    esp,0x1c
c00118d0:	6a 00                	push   0x0
c00118d2:	6a 00                	push   0x0
c00118d4:	ff 33                	push   DWORD PTR [ebx]
c00118d6:	e8 27 94 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00118db:	83 c4 0c             	add    esp,0xc
c00118de:	6a 08                	push   0x8
c00118e0:	68 e2 05 02 c0       	push   0xc00205e2
c00118e5:	57                   	push   edi
c00118e6:	e8 95 ea fe ff       	call   c0000380 <memcmp>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	85 c0                	test   eax,eax
c00118f0:	74 10                	je     c0011902 <CmOpen(char const*)+0x111>
c00118f2:	83 ec 0c             	sub    esp,0xc
c00118f5:	68 eb 05 02 c0       	push   0xc00205eb
c00118fa:	e8 d0 ea ff ff       	call   c00103cf <KePanic(char const*)>
c00118ff:	83 c4 10             	add    esp,0x10
c0011902:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011906:	89 d8                	mov    eax,ebx
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	5b                   	pop    ebx
c001190c:	5e                   	pop    esi
c001190d:	5f                   	pop    edi
c001190e:	c3                   	ret    

c001190f <CmClose(Reghive_Tag*)>:
c001190f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011913:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011917:	74 0b                	je     c0011924 <CmClose(Reghive_Tag*)+0x15>
c0011919:	8b 00                	mov    eax,DWORD PTR [eax]
c001191b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001191f:	e9 7e 93 ff ff       	jmp    c000aca2 <File::close()>
c0011924:	c3                   	ret    

c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011925:	53                   	push   ebx
c0011926:	83 ec 18             	sub    esp,0x18
c0011929:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001192d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011931:	74 29                	je     c001195c <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011933:	50                   	push   eax
c0011934:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011939:	99                   	cdq    
c001193a:	52                   	push   edx
c001193b:	50                   	push   eax
c001193c:	ff 33                	push   DWORD PTR [ebx]
c001193e:	e8 bf 93 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0011943:	5a                   	pop    edx
c0011944:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011946:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001194a:	8b 10                	mov    edx,DWORD PTR [eax]
c001194c:	51                   	push   ecx
c001194d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011951:	6a 00                	push   0x0
c0011953:	6a 2b                	push   0x2b
c0011955:	50                   	push   eax
c0011956:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011959:	83 c4 20             	add    esp,0x20
c001195c:	83 c4 18             	add    esp,0x18
c001195f:	5b                   	pop    ebx
c0011960:	c3                   	ret    

c0011961 <CmGetString(Reghive_Tag*, int, char*)>:
c0011961:	55                   	push   ebp
c0011962:	57                   	push   edi
c0011963:	56                   	push   esi
c0011964:	53                   	push   ebx
c0011965:	31 db                	xor    ebx,ebx
c0011967:	83 ec 70             	sub    esp,0x70
c001196a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011971:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011975:	50                   	push   eax
c0011976:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001197d:	55                   	push   ebp
c001197e:	e8 a2 ff ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001198b:	c1 e0 08             	shl    eax,0x8
c001198e:	89 c2                	mov    edx,eax
c0011990:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011995:	09 d0                	or     eax,edx
c0011997:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001199c:	c1 e0 08             	shl    eax,0x8
c001199f:	09 d0                	or     eax,edx
c00119a1:	74 25                	je     c00119c8 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00119a3:	6b fb 0d             	imul   edi,ebx,0xd
c00119a6:	52                   	push   edx
c00119a7:	8d 54 24 39          	lea    edx,[esp+0x39]
c00119ab:	52                   	push   edx
c00119ac:	50                   	push   eax
c00119ad:	55                   	push   ebp
c00119ae:	e8 72 ff ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119b3:	8d 74 24 49          	lea    esi,[esp+0x49]
c00119b7:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00119be:	b9 27 00 00 00       	mov    ecx,0x27
c00119c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	83 c3 03             	add    ebx,0x3
c00119cb:	83 fb 15             	cmp    ebx,0x15
c00119ce:	75 b6                	jne    c0011986 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00119d0:	83 c4 6c             	add    esp,0x6c
c00119d3:	5b                   	pop    ebx
c00119d4:	5e                   	pop    esi
c00119d5:	5f                   	pop    edi
c00119d6:	5d                   	pop    ebp
c00119d7:	c3                   	ret    

c00119d8 <CmEnterDirectory(Reghive_Tag*, int)>:
c00119d8:	83 ec 40             	sub    esp,0x40
c00119db:	8d 44 24 09          	lea    eax,[esp+0x9]
c00119df:	50                   	push   eax
c00119e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00119e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00119e8:	e8 38 ff ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119ed:	83 c4 10             	add    esp,0x10
c00119f0:	83 c8 ff             	or     eax,0xffffffff
c00119f3:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00119f8:	75 19                	jne    c0011a13 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00119fa:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00119ff:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a04:	c1 e0 08             	shl    eax,0x8
c0011a07:	09 c2                	or     edx,eax
c0011a09:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011a0e:	c1 e0 10             	shl    eax,0x10
c0011a11:	09 d0                	or     eax,edx
c0011a13:	83 c4 3c             	add    esp,0x3c
c0011a16:	c3                   	ret    

c0011a17 <CmGetNext(Reghive_Tag*, int)>:
c0011a17:	83 ec 40             	sub    esp,0x40
c0011a1a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011a1e:	50                   	push   eax
c0011a1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a27:	e8 f9 fe ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011a2c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011a31:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a36:	c1 e0 08             	shl    eax,0x8
c0011a39:	09 c2                	or     edx,eax
c0011a3b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011a40:	83 c4 4c             	add    esp,0x4c
c0011a43:	c1 e0 10             	shl    eax,0x10
c0011a46:	09 d0                	or     eax,edx
c0011a48:	c3                   	ret    

c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011a49:	53                   	push   ebx
c0011a4a:	83 ec 18             	sub    esp,0x18
c0011a4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a51:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a55:	74 29                	je     c0011a80 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011a57:	50                   	push   eax
c0011a58:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011a5d:	99                   	cdq    
c0011a5e:	52                   	push   edx
c0011a5f:	50                   	push   eax
c0011a60:	ff 33                	push   DWORD PTR [ebx]
c0011a62:	e8 9b 92 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0011a67:	5a                   	pop    edx
c0011a68:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a6a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011a6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a70:	51                   	push   ecx
c0011a71:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011a75:	6a 00                	push   0x0
c0011a77:	6a 2b                	push   0x2b
c0011a79:	50                   	push   eax
c0011a7a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011a7d:	83 c4 20             	add    esp,0x20
c0011a80:	83 c4 18             	add    esp,0x18
c0011a83:	5b                   	pop    ebx
c0011a84:	c3                   	ret    

c0011a85 <CmFreeExtent(Reghive_Tag*, int)>:
c0011a85:	53                   	push   ebx
c0011a86:	83 ec 3c             	sub    esp,0x3c
c0011a89:	6a 2b                	push   0x2b
c0011a8b:	6a 00                	push   0x0
c0011a8d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011a91:	53                   	push   ebx
c0011a92:	e8 29 ea fe ff       	call   c00004c0 <memset>
c0011a97:	83 c4 0c             	add    esp,0xc
c0011a9a:	53                   	push   ebx
c0011a9b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a9f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011aa3:	e8 a1 ff ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011aa8:	83 c4 48             	add    esp,0x48
c0011aab:	5b                   	pop    ebx
c0011aac:	c3                   	ret    

c0011aad <CmUpdateHeader(Reghive_Tag*)>:
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab4:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011ab8:	74 10                	je     c0011aca <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011aba:	52                   	push   edx
c0011abb:	8d 50 05             	lea    edx,[eax+0x5]
c0011abe:	52                   	push   edx
c0011abf:	6a 00                	push   0x0
c0011ac1:	50                   	push   eax
c0011ac2:	e8 82 ff ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011ac7:	83 c4 10             	add    esp,0x10
c0011aca:	83 c4 0c             	add    esp,0xc
c0011acd:	c3                   	ret    

c0011ace <CmExpand(Reghive_Tag*, int)>:
c0011ace:	57                   	push   edi
c0011acf:	56                   	push   esi
c0011ad0:	83 ce ff             	or     esi,0xffffffff
c0011ad3:	53                   	push   ebx
c0011ad4:	83 ec 30             	sub    esp,0x30
c0011ad7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011adb:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011adf:	74 5f                	je     c0011b40 <CmExpand(Reghive_Tag*, int)+0x72>
c0011ae1:	31 d2                	xor    edx,edx
c0011ae3:	31 f6                	xor    esi,esi
c0011ae5:	50                   	push   eax
c0011ae6:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011aea:	52                   	push   edx
c0011aeb:	50                   	push   eax
c0011aec:	ff 33                	push   DWORD PTR [ebx]
c0011aee:	e8 0f 92 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0011af3:	83 c4 0c             	add    esp,0xc
c0011af6:	6a 2b                	push   0x2b
c0011af8:	6a 00                	push   0x0
c0011afa:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011afe:	57                   	push   edi
c0011aff:	e8 bc e9 fe ff       	call   c00004c0 <memset>
c0011b04:	83 c4 10             	add    esp,0x10
c0011b07:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011b0b:	7d 1b                	jge    c0011b28 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b12:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b18:	46                   	inc    esi
c0011b19:	51                   	push   ecx
c0011b1a:	57                   	push   edi
c0011b1b:	6a 00                	push   0x0
c0011b1d:	6a 2b                	push   0x2b
c0011b1f:	50                   	push   eax
c0011b20:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011b23:	83 c4 20             	add    esp,0x20
c0011b26:	eb df                	jmp    c0011b07 <CmExpand(Reghive_Tag*, int)+0x39>
c0011b28:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b2c:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011b2f:	83 ec 0c             	sub    esp,0xc
c0011b32:	01 f2                	add    edx,esi
c0011b34:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011b37:	53                   	push   ebx
c0011b38:	e8 70 ff ff ff       	call   c0011aad <CmUpdateHeader(Reghive_Tag*)>
c0011b3d:	83 c4 10             	add    esp,0x10
c0011b40:	83 c4 30             	add    esp,0x30
c0011b43:	89 f0                	mov    eax,esi
c0011b45:	5b                   	pop    ebx
c0011b46:	5e                   	pop    esi
c0011b47:	5f                   	pop    edi
c0011b48:	c3                   	ret    

c0011b49 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011b49:	55                   	push   ebp
c0011b4a:	57                   	push   edi
c0011b4b:	56                   	push   esi
c0011b4c:	53                   	push   ebx
c0011b4d:	83 cb ff             	or     ebx,0xffffffff
c0011b50:	83 ec 1c             	sub    esp,0x1c
c0011b53:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011b57:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011b5b:	74 68                	je     c0011bc5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b5d:	be 2b 00 00 00       	mov    esi,0x2b
c0011b62:	51                   	push   ecx
c0011b63:	31 ff                	xor    edi,edi
c0011b65:	6a 00                	push   0x0
c0011b67:	31 db                	xor    ebx,ebx
c0011b69:	6a 00                	push   0x0
c0011b6b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011b6e:	e8 8f 91 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011b79:	76 3b                	jbe    c0011bb6 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011b7b:	83 ec 0c             	sub    esp,0xc
c0011b7e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b81:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b85:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b87:	51                   	push   ecx
c0011b88:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011b8c:	51                   	push   ecx
c0011b8d:	6a 00                	push   0x0
c0011b8f:	6a 01                	push   0x1
c0011b91:	50                   	push   eax
c0011b92:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b95:	83 c4 20             	add    esp,0x20
c0011b98:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b9d:	74 26                	je     c0011bc5 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b9f:	43                   	inc    ebx
c0011ba0:	52                   	push   edx
c0011ba1:	57                   	push   edi
c0011ba2:	56                   	push   esi
c0011ba3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011ba6:	e8 57 91 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0011bab:	83 c6 2b             	add    esi,0x2b
c0011bae:	83 d7 00             	adc    edi,0x0
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	eb c0                	jmp    c0011b76 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011bb6:	50                   	push   eax
c0011bb7:	50                   	push   eax
c0011bb8:	6a 40                	push   0x40
c0011bba:	55                   	push   ebp
c0011bbb:	e8 0e ff ff ff       	call   c0011ace <CmExpand(Reghive_Tag*, int)>
c0011bc0:	83 c4 10             	add    esp,0x10
c0011bc3:	89 c3                	mov    ebx,eax
c0011bc5:	83 c4 1c             	add    esp,0x1c
c0011bc8:	89 d8                	mov    eax,ebx
c0011bca:	5b                   	pop    ebx
c0011bcb:	5e                   	pop    esi
c0011bcc:	5f                   	pop    edi
c0011bcd:	5d                   	pop    ebp
c0011bce:	c3                   	ret    

c0011bcf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011bcf:	55                   	push   ebp
c0011bd0:	57                   	push   edi
c0011bd1:	56                   	push   esi
c0011bd2:	53                   	push   ebx
c0011bd3:	81 ec 88 00 00 00    	sub    esp,0x88
c0011bd9:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011be0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011be7:	e8 5d ff ff ff       	call   c0011b49 <CmFindUnusedExtent(Reghive_Tag*)>
c0011bec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bf0:	83 c4 0c             	add    esp,0xc
c0011bf3:	6a 2b                	push   0x2b
c0011bf5:	6a 00                	push   0x0
c0011bf7:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011bfb:	55                   	push   ebp
c0011bfc:	e8 bf e8 fe ff       	call   c00004c0 <memset>
c0011c01:	83 c4 10             	add    esp,0x10
c0011c04:	85 db                	test   ebx,ebx
c0011c06:	74 12                	je     c0011c1a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011c08:	51                   	push   ecx
c0011c09:	55                   	push   ebp
c0011c0a:	53                   	push   ebx
c0011c0b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c12:	e8 0e fd ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011c17:	83 c4 10             	add    esp,0x10
c0011c1a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011c1e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c25:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011c2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c2c:	85 db                	test   ebx,ebx
c0011c2e:	74 49                	je     c0011c79 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011c30:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011c35:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011c3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c3e:	c1 e0 08             	shl    eax,0x8
c0011c41:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011c47:	09 c8                	or     eax,ecx
c0011c49:	74 11                	je     c0011c5c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011c4b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011c4f:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011c53:	c1 e8 10             	shr    eax,0x10
c0011c56:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011c5a:	eb 0f                	jmp    c0011c6b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011c5c:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c61:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011c66:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011c6b:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011c6f:	c1 ea 08             	shr    edx,0x8
c0011c72:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011c77:	eb 0f                	jmp    c0011c88 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011c79:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c7e:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011c83:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011c88:	52                   	push   edx
c0011c89:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011c8d:	50                   	push   eax
c0011c8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c92:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c99:	e8 ab fd ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c9e:	83 c4 10             	add    esp,0x10
c0011ca1:	85 db                	test   ebx,ebx
c0011ca3:	74 12                	je     c0011cb7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011ca5:	50                   	push   eax
c0011ca6:	55                   	push   ebp
c0011ca7:	53                   	push   ebx
c0011ca8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011caf:	e8 95 fd ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cbb:	83 c4 7c             	add    esp,0x7c
c0011cbe:	5b                   	pop    ebx
c0011cbf:	5e                   	pop    esi
c0011cc0:	5f                   	pop    edi
c0011cc1:	5d                   	pop    ebp
c0011cc2:	c3                   	ret    

c0011cc3 <CmSetString(Reghive_Tag*, int, char const*)>:
c0011cc3:	55                   	push   ebp
c0011cc4:	57                   	push   edi
c0011cc5:	56                   	push   esi
c0011cc6:	53                   	push   ebx
c0011cc7:	bb 27 00 00 00       	mov    ebx,0x27
c0011ccc:	81 ec 88 00 00 00    	sub    esp,0x88
c0011cd2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011cd9:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011ce0:	e8 4b e8 fe ff       	call   c0000530 <strlen>
c0011ce5:	8d 48 26             	lea    ecx,[eax+0x26]
c0011ce8:	89 c8                	mov    eax,ecx
c0011cea:	99                   	cdq    
c0011ceb:	f7 fb                	idiv   ebx
c0011ced:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011cf1:	83 c4 10             	add    esp,0x10
c0011cf4:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011cfa:	7e 10                	jle    c0011d0c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011cfc:	83 ec 0c             	sub    esp,0xc
c0011cff:	68 fc 05 02 c0       	push   0xc00205fc
c0011d04:	e8 c6 e6 ff ff       	call   c00103cf <KePanic(char const*)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	31 ff                	xor    edi,edi
c0011d0e:	50                   	push   eax
c0011d0f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011d13:	53                   	push   ebx
c0011d14:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d1b:	56                   	push   esi
c0011d1c:	e8 04 fc ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d21:	83 c4 10             	add    esp,0x10
c0011d24:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011d28:	89 d0                	mov    eax,edx
c0011d2a:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011d2e:	c1 e0 08             	shl    eax,0x8
c0011d31:	09 c2                	or     edx,eax
c0011d33:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011d37:	c1 e2 08             	shl    edx,0x8
c0011d3a:	09 c2                	or     edx,eax
c0011d3c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011d40:	7e 76                	jle    c0011db8 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011d42:	85 d2                	test   edx,edx
c0011d44:	75 25                	jne    c0011d6b <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011d46:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011d4b:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011d4f:	50                   	push   eax
c0011d50:	6a 00                	push   0x0
c0011d52:	6a 00                	push   0x0
c0011d54:	56                   	push   esi
c0011d55:	e8 75 fe ff ff       	call   c0011bcf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	89 c2                	mov    edx,eax
c0011d5f:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011d62:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011d65:	c1 f8 10             	sar    eax,0x10
c0011d68:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011d6b:	55                   	push   ebp
c0011d6c:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011d70:	55                   	push   ebp
c0011d71:	52                   	push   edx
c0011d72:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011d76:	56                   	push   esi
c0011d77:	e8 a9 fb ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d7c:	83 c4 0c             	add    esp,0xc
c0011d7f:	6a 27                	push   0x27
c0011d81:	6a 00                	push   0x0
c0011d83:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d87:	51                   	push   ecx
c0011d88:	e8 33 e7 fe ff       	call   c00004c0 <memset>
c0011d8d:	83 c4 0c             	add    esp,0xc
c0011d90:	6b c7 27             	imul   eax,edi,0x27
c0011d93:	6a 27                	push   0x27
c0011d95:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011d9c:	50                   	push   eax
c0011d9d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011da1:	51                   	push   ecx
c0011da2:	e8 79 e8 fe ff       	call   c0000620 <strncpy>
c0011da7:	83 c4 0c             	add    esp,0xc
c0011daa:	55                   	push   ebp
c0011dab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011daf:	52                   	push   edx
c0011db0:	56                   	push   esi
c0011db1:	e8 93 fc ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011db6:	eb 19                	jmp    c0011dd1 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011db8:	85 d2                	test   edx,edx
c0011dba:	74 18                	je     c0011dd4 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011dbc:	51                   	push   ecx
c0011dbd:	51                   	push   ecx
c0011dbe:	52                   	push   edx
c0011dbf:	56                   	push   esi
c0011dc0:	e8 c0 fc ff ff       	call   c0011a85 <CmFreeExtent(Reghive_Tag*, int)>
c0011dc5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011dc9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011dcd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011dd1:	83 c4 10             	add    esp,0x10
c0011dd4:	47                   	inc    edi
c0011dd5:	83 c3 03             	add    ebx,0x3
c0011dd8:	83 ff 07             	cmp    edi,0x7
c0011ddb:	0f 85 43 ff ff ff    	jne    c0011d24 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011de1:	50                   	push   eax
c0011de2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011de6:	50                   	push   eax
c0011de7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011dee:	56                   	push   esi
c0011def:	e8 55 fc ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011df4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011dfa:	5b                   	pop    ebx
c0011dfb:	5e                   	pop    esi
c0011dfc:	5f                   	pop    edi
c0011dfd:	5d                   	pop    ebp
c0011dfe:	c3                   	ret    

c0011dff <CmGetMatch(char*, char*, bool, bool*)>:
c0011dff:	56                   	push   esi
c0011e00:	53                   	push   ebx
c0011e01:	50                   	push   eax
c0011e02:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011e06:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011e0b:	74 25                	je     c0011e32 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011e0d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e10:	31 db                	xor    ebx,ebx
c0011e12:	50                   	push   eax
c0011e13:	50                   	push   eax
c0011e14:	8d 04 9d 40 1a 02 c0 	lea    eax,[ebx*4-0x3ffde5c0]
c0011e1b:	50                   	push   eax
c0011e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e20:	e8 ab e8 fe ff       	call   c00006d0 <strcmp>
c0011e25:	83 c4 10             	add    esp,0x10
c0011e28:	85 c0                	test   eax,eax
c0011e2a:	74 2e                	je     c0011e5a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011e2c:	43                   	inc    ebx
c0011e2d:	83 fb 3f             	cmp    ebx,0x3f
c0011e30:	75 e0                	jne    c0011e12 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011e32:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e35:	31 db                	xor    ebx,ebx
c0011e37:	8d 04 9d 40 1a 02 c0 	lea    eax,[ebx*4-0x3ffde5c0]
c0011e3e:	51                   	push   ecx
c0011e3f:	51                   	push   ecx
c0011e40:	50                   	push   eax
c0011e41:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e45:	e8 86 e8 fe ff       	call   c00006d0 <strcmp>
c0011e4a:	83 c4 10             	add    esp,0x10
c0011e4d:	85 c0                	test   eax,eax
c0011e4f:	74 09                	je     c0011e5a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011e51:	43                   	inc    ebx
c0011e52:	83 fb 3f             	cmp    ebx,0x3f
c0011e55:	75 e0                	jne    c0011e37 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011e57:	83 cb ff             	or     ebx,0xffffffff
c0011e5a:	89 d8                	mov    eax,ebx
c0011e5c:	5a                   	pop    edx
c0011e5d:	5b                   	pop    ebx
c0011e5e:	5e                   	pop    esi
c0011e5f:	c3                   	ret    

c0011e60 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011e60:	55                   	push   ebp
c0011e61:	31 c0                	xor    eax,eax
c0011e63:	57                   	push   edi
c0011e64:	56                   	push   esi
c0011e65:	53                   	push   ebx
c0011e66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011e6a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011e6e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011e70:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011e74:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011e77:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e7b:	83 fd 1f             	cmp    ebp,0x1f
c0011e7e:	7f 0b                	jg     c0011e8b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011e80:	0f b6 c2             	movzx  eax,dl
c0011e83:	d3 e0                	shl    eax,cl
c0011e85:	09 07                	or     DWORD PTR [edi],eax
c0011e87:	b0 01                	mov    al,0x1
c0011e89:	01 33                	add    DWORD PTR [ebx],esi
c0011e8b:	5b                   	pop    ebx
c0011e8c:	5e                   	pop    esi
c0011e8d:	5f                   	pop    edi
c0011e8e:	5d                   	pop    ebp
c0011e8f:	c3                   	ret    

c0011e90 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011e90:	57                   	push   edi
c0011e91:	56                   	push   esi
c0011e92:	53                   	push   ebx
c0011e93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e97:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e9b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011e9f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011ea3:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011ea5:	7c 17                	jl     c0011ebe <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011ea7:	8b 17                	mov    edx,DWORD PTR [edi]
c0011ea9:	b8 01 00 00 00       	mov    eax,0x1
c0011eae:	d3 e0                	shl    eax,cl
c0011eb0:	48                   	dec    eax
c0011eb1:	21 d0                	and    eax,edx
c0011eb3:	d3 ea                	shr    edx,cl
c0011eb5:	89 17                	mov    DWORD PTR [edi],edx
c0011eb7:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011eb9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011ebc:	eb 05                	jmp    c0011ec3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011ebe:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ec1:	31 c0                	xor    eax,eax
c0011ec3:	5b                   	pop    ebx
c0011ec4:	5e                   	pop    esi
c0011ec5:	5f                   	pop    edi
c0011ec6:	c3                   	ret    

c0011ec7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011ec7:	83 ec 40             	sub    esp,0x40
c0011eca:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ece:	50                   	push   eax
c0011ecf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ed3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ed7:	e8 49 fa ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011edc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011ee0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011ee4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011ee8:	89 10                	mov    DWORD PTR [eax],edx
c0011eea:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011eed:	83 c4 4c             	add    esp,0x4c
c0011ef0:	c3                   	ret    

c0011ef1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011ef1:	55                   	push   ebp
c0011ef2:	57                   	push   edi
c0011ef3:	56                   	push   esi
c0011ef4:	53                   	push   ebx
c0011ef5:	83 ec 40             	sub    esp,0x40
c0011ef8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011efc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011f00:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011f04:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011f08:	53                   	push   ebx
c0011f09:	56                   	push   esi
c0011f0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f0e:	e8 12 fa ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f13:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011f17:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011f1b:	83 c4 0c             	add    esp,0xc
c0011f1e:	53                   	push   ebx
c0011f1f:	56                   	push   esi
c0011f20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f24:	e8 20 fb ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f29:	83 c4 4c             	add    esp,0x4c
c0011f2c:	5b                   	pop    ebx
c0011f2d:	5e                   	pop    esi
c0011f2e:	5f                   	pop    edi
c0011f2f:	5d                   	pop    ebp
c0011f30:	c3                   	ret    

c0011f31 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011f31:	55                   	push   ebp
c0011f32:	57                   	push   edi
c0011f33:	56                   	push   esi
c0011f34:	31 f6                	xor    esi,esi
c0011f36:	53                   	push   ebx
c0011f37:	31 db                	xor    ebx,ebx
c0011f39:	83 ec 40             	sub    esp,0x40
c0011f3c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f44:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011f4c:	6a 12                	push   0x12
c0011f4e:	68 ee 00 00 00       	push   0xee
c0011f53:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f57:	e8 64 e5 fe ff       	call   c00004c0 <memset>
c0011f5c:	83 c4 10             	add    esp,0x10
c0011f5f:	6a 08                	push   0x8
c0011f61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f65:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011f69:	50                   	push   eax
c0011f6a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011f6e:	57                   	push   edi
c0011f6f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011f73:	55                   	push   ebp
c0011f74:	e8 e7 fe ff ff       	call   c0011e60 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011f79:	83 c4 10             	add    esp,0x10
c0011f7c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011f80:	50                   	push   eax
c0011f81:	6a 06                	push   0x6
c0011f83:	57                   	push   edi
c0011f84:	55                   	push   ebp
c0011f85:	e8 06 ff ff ff       	call   c0011e90 <CmGetShift(unsigned int*, int*, int, bool*)>
c0011f8a:	83 c4 10             	add    esp,0x10
c0011f8d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f92:	74 07                	je     c0011f9b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011f94:	46                   	inc    esi
c0011f95:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011f99:	eb e1                	jmp    c0011f7c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011f9b:	43                   	inc    ebx
c0011f9c:	83 fb 12             	cmp    ebx,0x12
c0011f9f:	75 be                	jne    c0011f5f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011fa1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011fa5:	31 db                	xor    ebx,ebx
c0011fa7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011faa:	50                   	push   eax
c0011fab:	50                   	push   eax
c0011fac:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011fb1:	43                   	inc    ebx
c0011fb2:	8d 04 85 40 1a 02 c0 	lea    eax,[eax*4-0x3ffde5c0]
c0011fb9:	50                   	push   eax
c0011fba:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011fbe:	e8 ed e7 fe ff       	call   c00007b0 <strcat>
c0011fc3:	83 c4 10             	add    esp,0x10
c0011fc6:	83 fb 18             	cmp    ebx,0x18
c0011fc9:	75 df                	jne    c0011faa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011fcb:	83 c4 3c             	add    esp,0x3c
c0011fce:	31 c0                	xor    eax,eax
c0011fd0:	5b                   	pop    ebx
c0011fd1:	5e                   	pop    esi
c0011fd2:	5f                   	pop    edi
c0011fd3:	5d                   	pop    ebp
c0011fd4:	c3                   	ret    

c0011fd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011fd5:	83 ec 40             	sub    esp,0x40
c0011fd8:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011fdc:	50                   	push   eax
c0011fdd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011fe5:	e8 3b f9 ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011fea:	58                   	pop    eax
c0011feb:	5a                   	pop    edx
c0011fec:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011ff0:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011ff4:	50                   	push   eax
c0011ff5:	e8 37 ff ff ff       	call   c0011f31 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011ffa:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011fff:	83 c4 4c             	add    esp,0x4c
c0012002:	c3                   	ret    

c0012003 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012003:	55                   	push   ebp
c0012004:	57                   	push   edi
c0012005:	56                   	push   esi
c0012006:	53                   	push   ebx
c0012007:	31 db                	xor    ebx,ebx
c0012009:	83 ec 70             	sub    esp,0x70
c001200c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012013:	6a 30                	push   0x30
c0012015:	6a 00                	push   0x0
c0012017:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001201b:	56                   	push   esi
c001201c:	e8 9f e4 fe ff       	call   c00004c0 <memset>
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	83 ec 0c             	sub    esp,0xc
c0012027:	57                   	push   edi
c0012028:	e8 03 e5 fe ff       	call   c0000530 <strlen>
c001202d:	83 c4 10             	add    esp,0x10
c0012030:	39 d8                	cmp    eax,ebx
c0012032:	76 16                	jbe    c001204a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012034:	83 ec 0c             	sub    esp,0xc
c0012037:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001203b:	50                   	push   eax
c001203c:	e8 5f e8 fe ff       	call   c00008a0 <toupper>
c0012041:	83 c4 10             	add    esp,0x10
c0012044:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012047:	43                   	inc    ebx
c0012048:	eb da                	jmp    c0012024 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001204a:	31 f6                	xor    esi,esi
c001204c:	52                   	push   edx
c001204d:	31 ff                	xor    edi,edi
c001204f:	6a 18                	push   0x18
c0012051:	6a 3f                	push   0x3f
c0012053:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012057:	50                   	push   eax
c0012058:	e8 63 e4 fe ff       	call   c00004c0 <memset>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012064:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012068:	84 c0                	test   al,al
c001206a:	0f 84 b0 00 00 00    	je     c0012120 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012070:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012074:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012079:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001207d:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012082:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012085:	83 ec 0c             	sub    esp,0xc
c0012088:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001208c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012090:	53                   	push   ebx
c0012091:	e8 9a e4 fe ff       	call   c0000530 <strlen>
c0012096:	83 c4 10             	add    esp,0x10
c0012099:	85 c0                	test   eax,eax
c001209b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001209f:	74 0b                	je     c00120ac <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00120a1:	50                   	push   eax
c00120a2:	6a 01                	push   0x1
c00120a4:	53                   	push   ebx
c00120a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00120a9:	50                   	push   eax
c00120aa:	eb 0a                	jmp    c00120b6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00120ac:	50                   	push   eax
c00120ad:	6a 00                	push   0x0
c00120af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00120b3:	50                   	push   eax
c00120b4:	6a 00                	push   0x0
c00120b6:	e8 44 fd ff ff       	call   c0011dff <CmGetMatch(char*, char*, bool, bool*)>
c00120bb:	83 c4 10             	add    esp,0x10
c00120be:	83 f8 ff             	cmp    eax,0xffffffff
c00120c1:	75 1a                	jne    c00120dd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00120c3:	83 ec 0c             	sub    esp,0xc
c00120c6:	68 11 06 02 c0       	push   0xc0020611
c00120cb:	e8 ff e2 ff ff       	call   c00103cf <KePanic(char const*)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	b8 02 00 00 00       	mov    eax,0x2
c00120d8:	e9 bc 00 00 00       	jmp    c0012199 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00120dd:	83 ff 18             	cmp    edi,0x18
c00120e0:	75 1a                	jne    c00120fc <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00120e2:	83 ec 0c             	sub    esp,0xc
c00120e5:	68 26 06 02 c0       	push   0xc0020626
c00120ea:	e8 e0 e2 ff ff       	call   c00103cf <KePanic(char const*)>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	b8 01 00 00 00       	mov    eax,0x1
c00120f7:	e9 9d 00 00 00       	jmp    c0012199 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00120fc:	47                   	inc    edi
c00120fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012102:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012106:	74 02                	je     c001210a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012108:	89 ee                	mov    esi,ebp
c001210a:	83 ec 0c             	sub    esp,0xc
c001210d:	53                   	push   ebx
c001210e:	e8 1d e4 fe ff       	call   c0000530 <strlen>
c0012113:	83 c4 10             	add    esp,0x10
c0012116:	85 c0                	test   eax,eax
c0012118:	74 06                	je     c0012120 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001211a:	46                   	inc    esi
c001211b:	e9 40 ff ff ff       	jmp    c0012060 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012120:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012128:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012130:	31 f6                	xor    esi,esi
c0012132:	50                   	push   eax
c0012133:	31 ff                	xor    edi,edi
c0012135:	6a 12                	push   0x12
c0012137:	68 ee 00 00 00       	push   0xee
c001213c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012143:	e8 78 e3 fe ff       	call   c00004c0 <memset>
c0012148:	83 c4 10             	add    esp,0x10
c001214b:	83 fe 17             	cmp    esi,0x17
c001214e:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012152:	7e 26                	jle    c001217a <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012154:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012158:	50                   	push   eax
c0012159:	6a 08                	push   0x8
c001215b:	55                   	push   ebp
c001215c:	53                   	push   ebx
c001215d:	e8 2e fd ff ff       	call   c0011e90 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012162:	83 c4 10             	add    esp,0x10
c0012165:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001216a:	74 26                	je     c0012192 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c001216c:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012173:	4e                   	dec    esi
c0012174:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012177:	47                   	inc    edi
c0012178:	eb 1c                	jmp    c0012196 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001217a:	6a 06                	push   0x6
c001217c:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012181:	50                   	push   eax
c0012182:	55                   	push   ebp
c0012183:	53                   	push   ebx
c0012184:	e8 d7 fc ff ff       	call   c0011e60 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012189:	83 c4 10             	add    esp,0x10
c001218c:	84 c0                	test   al,al
c001218e:	75 06                	jne    c0012196 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012190:	eb c2                	jmp    c0012154 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012192:	31 c0                	xor    eax,eax
c0012194:	eb 03                	jmp    c0012199 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012196:	46                   	inc    esi
c0012197:	eb b2                	jmp    c001214b <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012199:	83 c4 6c             	add    esp,0x6c
c001219c:	5b                   	pop    ebx
c001219d:	5e                   	pop    esi
c001219e:	5f                   	pop    edi
c001219f:	5d                   	pop    ebp
c00121a0:	c3                   	ret    

c00121a1 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00121a1:	53                   	push   ebx
c00121a2:	83 ec 3c             	sub    esp,0x3c
c00121a5:	6a 2b                	push   0x2b
c00121a7:	6a 00                	push   0x0
c00121a9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00121ad:	53                   	push   ebx
c00121ae:	e8 0d e3 fe ff       	call   c00004c0 <memset>
c00121b3:	58                   	pop    eax
c00121b4:	5a                   	pop    edx
c00121b5:	8d 44 24 11          	lea    eax,[esp+0x11]
c00121b9:	50                   	push   eax
c00121ba:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00121be:	e8 40 fe ff ff       	call   c0012003 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00121c3:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00121c8:	83 c4 0c             	add    esp,0xc
c00121cb:	6a 15                	push   0x15
c00121cd:	6a 00                	push   0x0
c00121cf:	8d 44 24 27          	lea    eax,[esp+0x27]
c00121d3:	50                   	push   eax
c00121d4:	e8 e7 e2 fe ff       	call   c00004c0 <memset>
c00121d9:	53                   	push   ebx
c00121da:	6a 00                	push   0x0
c00121dc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00121e0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00121e4:	e8 e6 f9 ff ff       	call   c0011bcf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00121e9:	83 c4 58             	add    esp,0x58
c00121ec:	5b                   	pop    ebx
c00121ed:	c3                   	ret    

c00121ee <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00121ee:	56                   	push   esi
c00121ef:	53                   	push   ebx
c00121f0:	83 ec 48             	sub    esp,0x48
c00121f3:	6a 12                	push   0x12
c00121f5:	68 ff 00 00 00       	push   0xff
c00121fa:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00121fe:	56                   	push   esi
c00121ff:	e8 bc e2 fe ff       	call   c00004c0 <memset>
c0012204:	5a                   	pop    edx
c0012205:	59                   	pop    ecx
c0012206:	56                   	push   esi
c0012207:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001220b:	e8 f3 fd ff ff       	call   c0012003 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012210:	83 c4 10             	add    esp,0x10
c0012213:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012217:	85 db                	test   ebx,ebx
c0012219:	74 42                	je     c001225d <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001221b:	50                   	push   eax
c001221c:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012220:	50                   	push   eax
c0012221:	53                   	push   ebx
c0012222:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012226:	e8 fa f6 ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001222b:	83 c4 0c             	add    esp,0xc
c001222e:	6a 12                	push   0x12
c0012230:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012234:	50                   	push   eax
c0012235:	56                   	push   esi
c0012236:	e8 45 e1 fe ff       	call   c0000380 <memcmp>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	85 c0                	test   eax,eax
c0012240:	74 1e                	je     c0012260 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012242:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012247:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c001224c:	c1 e3 08             	shl    ebx,0x8
c001224f:	09 d8                	or     eax,ebx
c0012251:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012256:	c1 e3 10             	shl    ebx,0x10
c0012259:	09 c3                	or     ebx,eax
c001225b:	eb ba                	jmp    c0012217 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001225d:	83 cb ff             	or     ebx,0xffffffff
c0012260:	89 d8                	mov    eax,ebx
c0012262:	83 c4 44             	add    esp,0x44
c0012265:	5b                   	pop    ebx
c0012266:	5e                   	pop    esi
c0012267:	c3                   	ret    

c0012268 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012268:	57                   	push   edi
c0012269:	56                   	push   esi
c001226a:	53                   	push   ebx
c001226b:	83 ec 34             	sub    esp,0x34
c001226e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012272:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012276:	6a 2b                	push   0x2b
c0012278:	6a 00                	push   0x0
c001227a:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001227e:	53                   	push   ebx
c001227f:	e8 3c e2 fe ff       	call   c00004c0 <memset>
c0012284:	58                   	pop    eax
c0012285:	5a                   	pop    edx
c0012286:	8d 44 24 11          	lea    eax,[esp+0x11]
c001228a:	50                   	push   eax
c001228b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001228f:	e8 6f fd ff ff       	call   c0012003 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012294:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012298:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001229c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00122a0:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00122a4:	53                   	push   ebx
c00122a5:	6a 00                	push   0x0
c00122a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00122ab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00122af:	e8 1b f9 ff ff       	call   c0011bcf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122b4:	83 c4 50             	add    esp,0x50
c00122b7:	5b                   	pop    ebx
c00122b8:	5e                   	pop    esi
c00122b9:	5f                   	pop    edi
c00122ba:	c3                   	ret    

c00122bb <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00122bb:	55                   	push   ebp
c00122bc:	57                   	push   edi
c00122bd:	56                   	push   esi
c00122be:	53                   	push   ebx
c00122bf:	83 ec 40             	sub    esp,0x40
c00122c2:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00122c6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00122ca:	6a 2b                	push   0x2b
c00122cc:	6a 00                	push   0x0
c00122ce:	8d 74 24 11          	lea    esi,[esp+0x11]
c00122d2:	56                   	push   esi
c00122d3:	e8 e8 e1 fe ff       	call   c00004c0 <memset>
c00122d8:	5f                   	pop    edi
c00122d9:	89 ef                	mov    edi,ebp
c00122db:	58                   	pop    eax
c00122dc:	8d 44 24 11          	lea    eax,[esp+0x11]
c00122e0:	50                   	push   eax
c00122e1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00122e5:	e8 19 fd ff ff       	call   c0012003 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00122ea:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00122ef:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00122f4:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00122f9:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00122fe:	83 c4 10             	add    esp,0x10
c0012301:	85 ed                	test   ebp,ebp
c0012303:	74 14                	je     c0012319 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012305:	51                   	push   ecx
c0012306:	51                   	push   ecx
c0012307:	57                   	push   edi
c0012308:	53                   	push   ebx
c0012309:	e8 09 f7 ff ff       	call   c0011a17 <CmGetNext(Reghive_Tag*, int)>
c001230e:	83 c4 10             	add    esp,0x10
c0012311:	85 c0                	test   eax,eax
c0012313:	74 04                	je     c0012319 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012315:	89 c7                	mov    edi,eax
c0012317:	eb e8                	jmp    c0012301 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012319:	56                   	push   esi
c001231a:	6a 00                	push   0x0
c001231c:	57                   	push   edi
c001231d:	53                   	push   ebx
c001231e:	e8 ac f8 ff ff       	call   c0011bcf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012323:	83 c4 0c             	add    esp,0xc
c0012326:	89 c7                	mov    edi,eax
c0012328:	56                   	push   esi
c0012329:	50                   	push   eax
c001232a:	53                   	push   ebx
c001232b:	e8 f5 f5 ff ff       	call   c0011925 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012330:	58                   	pop    eax
c0012331:	5a                   	pop    edx
c0012332:	6a 6c                	push   0x6c
c0012334:	6a 00                	push   0x0
c0012336:	6a 00                	push   0x0
c0012338:	68 37 06 02 c0       	push   0xc0020637
c001233d:	57                   	push   edi
c001233e:	53                   	push   ebx
c001233f:	e8 24 ff ff ff       	call   c0012268 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012344:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012348:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001234c:	c1 e8 10             	shr    eax,0x10
c001234f:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012353:	83 c4 1c             	add    esp,0x1c
c0012356:	56                   	push   esi
c0012357:	57                   	push   edi
c0012358:	53                   	push   ebx
c0012359:	e8 eb f6 ff ff       	call   c0011a49 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001235e:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012363:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0012368:	c1 e0 08             	shl    eax,0x8
c001236b:	09 c2                	or     edx,eax
c001236d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012372:	83 c4 4c             	add    esp,0x4c
c0012375:	c1 e0 10             	shl    eax,0x10
c0012378:	5b                   	pop    ebx
c0012379:	09 d0                	or     eax,edx
c001237b:	5e                   	pop    esi
c001237c:	5f                   	pop    edi
c001237d:	5d                   	pop    ebp
c001237e:	c3                   	ret    

c001237f <zStrtok(char*, char const*)>:
c001237f:	57                   	push   edi
c0012380:	56                   	push   esi
c0012381:	53                   	push   ebx
c0012382:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001238a:	85 ff                	test   edi,edi
c001238c:	74 2b                	je     c00123b9 <zStrtok(char*, char const*)+0x3a>
c001238e:	85 c0                	test   eax,eax
c0012390:	75 09                	jne    c001239b <zStrtok(char*, char const*)+0x1c>
c0012392:	a1 90 69 02 c0       	mov    eax,ds:0xc0026990
c0012397:	85 c0                	test   eax,eax
c0012399:	74 49                	je     c00123e4 <zStrtok(char*, char const*)+0x65>
c001239b:	31 c9                	xor    ecx,ecx
c001239d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00123a1:	74 03                	je     c00123a6 <zStrtok(char*, char const*)+0x27>
c00123a3:	41                   	inc    ecx
c00123a4:	eb f7                	jmp    c001239d <zStrtok(char*, char const*)+0x1e>
c00123a6:	31 d2                	xor    edx,edx
c00123a8:	39 ca                	cmp    edx,ecx
c00123aa:	74 11                	je     c00123bd <zStrtok(char*, char const*)+0x3e>
c00123ac:	8a 1f                	mov    bl,BYTE PTR [edi]
c00123ae:	8d 34 10             	lea    esi,[eax+edx*1]
c00123b1:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c00123b4:	74 13                	je     c00123c9 <zStrtok(char*, char const*)+0x4a>
c00123b6:	42                   	inc    edx
c00123b7:	eb ef                	jmp    c00123a8 <zStrtok(char*, char const*)+0x29>
c00123b9:	31 c0                	xor    eax,eax
c00123bb:	eb 27                	jmp    c00123e4 <zStrtok(char*, char const*)+0x65>
c00123bd:	c7 05 90 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026990,0x0
c00123c7:	eb 1b                	jmp    c00123e4 <zStrtok(char*, char const*)+0x65>
c00123c9:	3a 18                	cmp    bl,BYTE PTR [eax]
c00123cb:	75 0a                	jne    c00123d7 <zStrtok(char*, char const*)+0x58>
c00123cd:	40                   	inc    eax
c00123ce:	a3 90 69 02 c0       	mov    ds:0xc0026990,eax
c00123d3:	89 f8                	mov    eax,edi
c00123d5:	eb 0d                	jmp    c00123e4 <zStrtok(char*, char const*)+0x65>
c00123d7:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00123db:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123de:	89 15 90 69 02 c0    	mov    DWORD PTR ds:0xc0026990,edx
c00123e4:	5b                   	pop    ebx
c00123e5:	5e                   	pop    esi
c00123e6:	5f                   	pop    edi
c00123e7:	c3                   	ret    

c00123e8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00123e8:	57                   	push   edi
c00123e9:	56                   	push   esi
c00123ea:	53                   	push   ebx
c00123eb:	81 ec 08 01 00 00    	sub    esp,0x108
c00123f1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00123f8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00123ff:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012403:	53                   	push   ebx
c0012404:	e8 e7 e1 fe ff       	call   c00005f0 <strcpy>
c0012409:	59                   	pop    ecx
c001240a:	5e                   	pop    esi
c001240b:	68 9b 09 02 c0       	push   0xc002099b
c0012410:	53                   	push   ebx
c0012411:	bb 01 00 00 00       	mov    ebx,0x1
c0012416:	e8 64 ff ff ff       	call   c001237f <zStrtok(char*, char const*)>
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	85 c0                	test   eax,eax
c0012420:	74 3b                	je     c001245d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012422:	52                   	push   edx
c0012423:	50                   	push   eax
c0012424:	6a 01                	push   0x1
c0012426:	57                   	push   edi
c0012427:	e8 c2 fd ff ff       	call   c00121ee <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c001242c:	59                   	pop    ecx
c001242d:	89 c3                	mov    ebx,eax
c001242f:	5e                   	pop    esi
c0012430:	68 9b 09 02 c0       	push   0xc002099b
c0012435:	6a 00                	push   0x0
c0012437:	e8 43 ff ff ff       	call   c001237f <zStrtok(char*, char const*)>
c001243c:	83 c4 10             	add    esp,0x10
c001243f:	89 c6                	mov    esi,eax
c0012441:	85 c0                	test   eax,eax
c0012443:	74 18                	je     c001245d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012445:	52                   	push   edx
c0012446:	52                   	push   edx
c0012447:	53                   	push   ebx
c0012448:	57                   	push   edi
c0012449:	e8 8a f5 ff ff       	call   c00119d8 <CmEnterDirectory(Reghive_Tag*, int)>
c001244e:	83 c4 10             	add    esp,0x10
c0012451:	89 c3                	mov    ebx,eax
c0012453:	83 f8 ff             	cmp    eax,0xffffffff
c0012456:	74 05                	je     c001245d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012458:	50                   	push   eax
c0012459:	56                   	push   esi
c001245a:	53                   	push   ebx
c001245b:	eb c9                	jmp    c0012426 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001245d:	81 c4 00 01 00 00    	add    esp,0x100
c0012463:	89 d8                	mov    eax,ebx
c0012465:	5b                   	pop    ebx
c0012466:	5e                   	pop    esi
c0012467:	5f                   	pop    edi
c0012468:	c3                   	ret    

c0012469 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012469:	55                   	push   ebp
c001246a:	57                   	push   edi
c001246b:	56                   	push   esi
c001246c:	53                   	push   ebx
c001246d:	83 ec 5c             	sub    esp,0x5c
c0012470:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012474:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012478:	85 db                	test   ebx,ebx
c001247a:	0f 8e 84 00 00 00    	jle    c0012504 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012480:	31 ed                	xor    ebp,ebp
c0012482:	57                   	push   edi
c0012483:	6a 32                	push   0x32
c0012485:	6a 00                	push   0x0
c0012487:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c001248b:	57                   	push   edi
c001248c:	e8 2f e0 fe ff       	call   c00004c0 <memset>
c0012491:	83 c4 0c             	add    esp,0xc
c0012494:	57                   	push   edi
c0012495:	53                   	push   ebx
c0012496:	56                   	push   esi
c0012497:	e8 39 fb ff ff       	call   c0011fd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c001249c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124a0:	83 c4 10             	add    esp,0x10
c00124a3:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00124a7:	7d 13                	jge    c00124bc <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00124a9:	83 ec 0c             	sub    esp,0xc
c00124ac:	45                   	inc    ebp
c00124ad:	68 08 0d 02 c0       	push   0xc0020d08
c00124b2:	e8 57 81 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	eb e7                	jmp    c00124a3 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00124bc:	51                   	push   ecx
c00124bd:	57                   	push   edi
c00124be:	53                   	push   ebx
c00124bf:	68 3d 06 02 c0       	push   0xc002063d
c00124c4:	e8 45 81 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00124c9:	83 c4 10             	add    esp,0x10
c00124cc:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00124d1:	75 1e                	jne    c00124f1 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00124d3:	52                   	push   edx
c00124d4:	52                   	push   edx
c00124d5:	53                   	push   ebx
c00124d6:	56                   	push   esi
c00124d7:	e8 fc f4 ff ff       	call   c00119d8 <CmEnterDirectory(Reghive_Tag*, int)>
c00124dc:	83 c4 0c             	add    esp,0xc
c00124df:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00124e3:	8d 51 04             	lea    edx,[ecx+0x4]
c00124e6:	52                   	push   edx
c00124e7:	50                   	push   eax
c00124e8:	56                   	push   esi
c00124e9:	e8 7b ff ff ff       	call   c0012469 <CmDisplayTree(Reghive_Tag*, int, int)>
c00124ee:	83 c4 10             	add    esp,0x10
c00124f1:	50                   	push   eax
c00124f2:	50                   	push   eax
c00124f3:	53                   	push   ebx
c00124f4:	56                   	push   esi
c00124f5:	e8 1d f5 ff ff       	call   c0011a17 <CmGetNext(Reghive_Tag*, int)>
c00124fa:	83 c4 10             	add    esp,0x10
c00124fd:	89 c3                	mov    ebx,eax
c00124ff:	e9 74 ff ff ff       	jmp    c0012478 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012504:	83 c4 5c             	add    esp,0x5c
c0012507:	5b                   	pop    ebx
c0012508:	5e                   	pop    esi
c0012509:	5f                   	pop    edi
c001250a:	5d                   	pop    ebp
c001250b:	c3                   	ret    

c001250c <CmSplitFinalSlashInPlace(char*)>:
c001250c:	53                   	push   ebx
c001250d:	83 ec 14             	sub    esp,0x14
c0012510:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012514:	53                   	push   ebx
c0012515:	e8 16 e0 fe ff       	call   c0000530 <strlen>
c001251a:	83 c4 10             	add    esp,0x10
c001251d:	48                   	dec    eax
c001251e:	85 c0                	test   eax,eax
c0012520:	74 15                	je     c0012537 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012522:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012525:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012529:	75 09                	jne    c0012534 <CmSplitFinalSlashInPlace(char*)+0x28>
c001252b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001252e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012532:	eb 05                	jmp    c0012539 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012534:	48                   	dec    eax
c0012535:	eb e7                	jmp    c001251e <CmSplitFinalSlashInPlace(char*)+0x12>
c0012537:	31 c0                	xor    eax,eax
c0012539:	83 c4 08             	add    esp,0x8
c001253c:	5b                   	pop    ebx
c001253d:	c3                   	ret    

c001253e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001253e:	55                   	push   ebp
c001253f:	57                   	push   edi
c0012540:	56                   	push   esi
c0012541:	53                   	push   ebx
c0012542:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012548:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001254f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012551:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012554:	80 fb 40             	cmp    bl,0x40
c0012557:	75 1b                	jne    c0012574 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0012559:	8a 16                	mov    dl,BYTE PTR [esi]
c001255b:	84 d2                	test   dl,dl
c001255d:	0f 84 f1 00 00 00    	je     c0012654 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012563:	8d 46 01             	lea    eax,[esi+0x1]
c0012566:	80 fa 3a             	cmp    dl,0x3a
c0012569:	74 04                	je     c001256f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001256b:	89 c6                	mov    esi,eax
c001256d:	eb ea                	jmp    c0012559 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001256f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012572:	89 c6                	mov    esi,eax
c0012574:	50                   	push   eax
c0012575:	6a 40                	push   0x40
c0012577:	6a 00                	push   0x0
c0012579:	8d 44 24 24          	lea    eax,[esp+0x24]
c001257d:	50                   	push   eax
c001257e:	e8 3d df fe ff       	call   c00004c0 <memset>
c0012583:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001258a:	31 c0                	xor    eax,eax
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012591:	84 c9                	test   cl,cl
c0012593:	0f 84 bb 00 00 00    	je     c0012654 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012599:	3d c7 00 00 00       	cmp    eax,0xc7
c001259e:	0f 8f b0 00 00 00    	jg     c0012654 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00125a4:	80 f9 0a             	cmp    cl,0xa
c00125a7:	0f 85 98 00 00 00    	jne    c0012645 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00125ad:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00125b2:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00125b6:	a8 df                	test   al,0xdf
c00125b8:	0f 94 c1             	sete   cl
c00125bb:	3c 23                	cmp    al,0x23
c00125bd:	0f 94 c2             	sete   dl
c00125c0:	08 d1                	or     cl,dl
c00125c2:	75 4a                	jne    c001260e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00125c4:	8d 50 f7             	lea    edx,[eax-0x9]
c00125c7:	80 fa 01             	cmp    dl,0x1
c00125ca:	76 42                	jbe    c001260e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00125cc:	3c 5b                	cmp    al,0x5b
c00125ce:	75 42                	jne    c0012612 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00125d0:	80 fb 40             	cmp    bl,0x40
c00125d3:	75 39                	jne    c001260e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00125d5:	83 ec 0c             	sub    esp,0xc
c00125d8:	8d 54 24 65          	lea    edx,[esp+0x65]
c00125dc:	52                   	push   edx
c00125dd:	e8 4e df fe ff       	call   c0000530 <strlen>
c00125e2:	83 c4 10             	add    esp,0x10
c00125e5:	83 f8 3f             	cmp    eax,0x3f
c00125e8:	77 6a                	ja     c0012654 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00125ea:	50                   	push   eax
c00125eb:	50                   	push   eax
c00125ec:	8d 54 24 61          	lea    edx,[esp+0x61]
c00125f0:	52                   	push   edx
c00125f1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00125f5:	52                   	push   edx
c00125f6:	e8 f5 df fe ff       	call   c00005f0 <strcpy>
c00125fb:	58                   	pop    eax
c00125fc:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012600:	52                   	push   edx
c0012601:	e8 2a df fe ff       	call   c0000530 <strlen>
c0012606:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001260b:	83 c4 10             	add    esp,0x10
c001260e:	31 d2                	xor    edx,edx
c0012610:	eb 3a                	jmp    c001264c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012612:	80 fb 40             	cmp    bl,0x40
c0012615:	74 06                	je     c001261d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0012617:	8d 44 24 58          	lea    eax,[esp+0x58]
c001261b:	eb 20                	jmp    c001263d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001261d:	50                   	push   eax
c001261e:	50                   	push   eax
c001261f:	55                   	push   ebp
c0012620:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012624:	50                   	push   eax
c0012625:	e8 a6 e0 fe ff       	call   c00006d0 <strcmp>
c001262a:	83 c4 10             	add    esp,0x10
c001262d:	85 c0                	test   eax,eax
c001262f:	75 dd                	jne    c001260e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012631:	eb e4                	jmp    c0012617 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012633:	8d 50 01             	lea    edx,[eax+0x1]
c0012636:	80 f9 3d             	cmp    cl,0x3d
c0012639:	74 1d                	je     c0012658 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001263b:	89 d0                	mov    eax,edx
c001263d:	8a 08                	mov    cl,BYTE PTR [eax]
c001263f:	84 c9                	test   cl,cl
c0012641:	75 f0                	jne    c0012633 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012643:	eb 0f                	jmp    c0012654 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012645:	8d 50 01             	lea    edx,[eax+0x1]
c0012648:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001264c:	47                   	inc    edi
c001264d:	89 d0                	mov    eax,edx
c001264f:	e9 3b ff ff ff       	jmp    c001258f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0012654:	31 c0                	xor    eax,eax
c0012656:	eb 33                	jmp    c001268b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0012658:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001265c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001265f:	50                   	push   eax
c0012660:	50                   	push   eax
c0012661:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012665:	50                   	push   eax
c0012666:	56                   	push   esi
c0012667:	e8 64 e0 fe ff       	call   c00006d0 <strcmp>
c001266c:	83 c4 10             	add    esp,0x10
c001266f:	85 c0                	test   eax,eax
c0012671:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012675:	75 97                	jne    c001260e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012677:	51                   	push   ecx
c0012678:	51                   	push   ecx
c0012679:	52                   	push   edx
c001267a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012681:	e8 6a df fe ff       	call   c00005f0 <strcpy>
c0012686:	83 c4 10             	add    esp,0x10
c0012689:	b0 01                	mov    al,0x1
c001268b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012691:	5b                   	pop    ebx
c0012692:	5e                   	pop    esi
c0012693:	5f                   	pop    edi
c0012694:	5d                   	pop    ebp
c0012695:	c3                   	ret    

c0012696 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012696:	57                   	push   edi
c0012697:	56                   	push   esi
c0012698:	53                   	push   ebx
c0012699:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001269f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00126a6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00126ad:	53                   	push   ebx
c00126ae:	e8 7d de fe ff       	call   c0000530 <strlen>
c00126b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00126b6:	89 c7                	mov    edi,eax
c00126b8:	e8 73 de fe ff       	call   c0000530 <strlen>
c00126bd:	83 c4 10             	add    esp,0x10
c00126c0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00126c4:	3d ff 00 00 00       	cmp    eax,0xff
c00126c9:	0f 87 d3 00 00 00    	ja     c00127a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00126cf:	57                   	push   edi
c00126d0:	57                   	push   edi
c00126d1:	56                   	push   esi
c00126d2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00126d6:	56                   	push   esi
c00126d7:	e8 14 df fe ff       	call   c00005f0 <strcpy>
c00126dc:	58                   	pop    eax
c00126dd:	5a                   	pop    edx
c00126de:	68 9b 09 02 c0       	push   0xc002099b
c00126e3:	56                   	push   esi
c00126e4:	e8 c7 e0 fe ff       	call   c00007b0 <strcat>
c00126e9:	59                   	pop    ecx
c00126ea:	5f                   	pop    edi
c00126eb:	53                   	push   ebx
c00126ec:	56                   	push   esi
c00126ed:	e8 be e0 fe ff       	call   c00007b0 <strcat>
c00126f2:	58                   	pop    eax
c00126f3:	5a                   	pop    edx
c00126f4:	68 47 06 02 c0       	push   0xc0020647
c00126f9:	56                   	push   esi
c00126fa:	e8 b1 e0 fe ff       	call   c00007b0 <strcat>
c00126ff:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012706:	e8 62 51 ff ff       	call   c000786d <malloc>
c001270b:	83 c4 0c             	add    esp,0xc
c001270e:	89 c3                	mov    ebx,eax
c0012710:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0012716:	56                   	push   esi
c0012717:	50                   	push   eax
c0012718:	e8 67 84 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001271d:	83 c4 10             	add    esp,0x10
c0012720:	85 db                	test   ebx,ebx
c0012722:	74 7e                	je     c00127a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012724:	51                   	push   ecx
c0012725:	51                   	push   ecx
c0012726:	6a 01                	push   0x1
c0012728:	53                   	push   ebx
c0012729:	e8 16 85 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c001272e:	83 c4 10             	add    esp,0x10
c0012731:	85 c0                	test   eax,eax
c0012733:	74 08                	je     c001273d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012735:	83 ec 0c             	sub    esp,0xc
c0012738:	8b 03                	mov    eax,DWORD PTR [ebx]
c001273a:	53                   	push   ebx
c001273b:	eb 5f                	jmp    c001279c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001273d:	52                   	push   edx
c001273e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012742:	50                   	push   eax
c0012743:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012747:	50                   	push   eax
c0012748:	53                   	push   ebx
c0012749:	e8 a2 87 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c001274e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012752:	83 c4 10             	add    esp,0x10
c0012755:	89 c1                	mov    ecx,eax
c0012757:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001275b:	74 31                	je     c001278e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001275d:	83 ec 0c             	sub    esp,0xc
c0012760:	50                   	push   eax
c0012761:	e8 07 51 ff ff       	call   c000786d <malloc>
c0012766:	89 c6                	mov    esi,eax
c0012768:	58                   	pop    eax
c0012769:	8b 03                	mov    eax,DWORD PTR [ebx]
c001276b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001276f:	52                   	push   edx
c0012770:	56                   	push   esi
c0012771:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012775:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012779:	53                   	push   ebx
c001277a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001277d:	83 c4 20             	add    esp,0x20
c0012780:	85 c0                	test   eax,eax
c0012782:	75 0a                	jne    c001278e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012788:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001278c:	74 18                	je     c00127a6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001278e:	83 ec 0c             	sub    esp,0xc
c0012791:	53                   	push   ebx
c0012792:	e8 0b 85 ff ff       	call   c000aca2 <File::close()>
c0012797:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012799:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001279c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	31 c0                	xor    eax,eax
c00127a4:	eb 3b                	jmp    c00127e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00127a6:	83 ec 0c             	sub    esp,0xc
c00127a9:	53                   	push   ebx
c00127aa:	e8 f3 84 ff ff       	call   c000aca2 <File::close()>
c00127af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127b7:	83 c4 0c             	add    esp,0xc
c00127ba:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00127c1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00127c8:	56                   	push   esi
c00127c9:	e8 70 fd ff ff       	call   c001253e <Reg::findLineFromLoadedData(char*, char*, char*)>
c00127ce:	89 34 24             	mov    DWORD PTR [esp],esi
c00127d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00127d5:	e8 a3 50 ff ff       	call   c000787d <free>
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00127e1:	81 c4 20 01 00 00    	add    esp,0x120
c00127e7:	5b                   	pop    ebx
c00127e8:	5e                   	pop    esi
c00127e9:	5f                   	pop    edi
c00127ea:	c3                   	ret    

c00127eb <Reg::getLine(char*, char*, char*)>:
c00127eb:	57                   	push   edi
c00127ec:	56                   	push   esi
c00127ed:	53                   	push   ebx
c00127ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00127f6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00127fa:	57                   	push   edi
c00127fb:	56                   	push   esi
c00127fc:	53                   	push   ebx
c00127fd:	68 4c 06 02 c0       	push   0xc002064c
c0012802:	e8 8f fe ff ff       	call   c0012696 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	84 c0                	test   al,al
c001280c:	75 10                	jne    c001281e <Reg::getLine(char*, char*, char*)+0x33>
c001280e:	57                   	push   edi
c001280f:	56                   	push   esi
c0012810:	53                   	push   ebx
c0012811:	68 71 06 02 c0       	push   0xc0020671
c0012816:	e8 7b fe ff ff       	call   c0012696 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001281b:	83 c4 10             	add    esp,0x10
c001281e:	5b                   	pop    ebx
c001281f:	5e                   	pop    esi
c0012820:	5f                   	pop    edi
c0012821:	c3                   	ret    

c0012822 <Reg::readInt(char*, char*, int*)>:
c0012822:	55                   	push   ebp
c0012823:	57                   	push   edi
c0012824:	56                   	push   esi
c0012825:	53                   	push   ebx
c0012826:	81 ec f0 00 00 00    	sub    esp,0xf0
c001282c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012830:	57                   	push   edi
c0012831:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012838:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001283f:	e8 a7 ff ff ff       	call   c00127eb <Reg::getLine(char*, char*, char*)>
c0012844:	83 c4 10             	add    esp,0x10
c0012847:	84 c0                	test   al,al
c0012849:	0f 84 b3 00 00 00    	je     c0012902 <Reg::readInt(char*, char*, int*)+0xe0>
c001284f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0012853:	80 fa 2b             	cmp    dl,0x2b
c0012856:	74 0c                	je     c0012864 <Reg::readInt(char*, char*, int*)+0x42>
c0012858:	80 fa 2d             	cmp    dl,0x2d
c001285b:	75 0e                	jne    c001286b <Reg::readInt(char*, char*, int*)+0x49>
c001285d:	ba 01 00 00 00       	mov    edx,0x1
c0012862:	eb 0b                	jmp    c001286f <Reg::readInt(char*, char*, int*)+0x4d>
c0012864:	ba 01 00 00 00       	mov    edx,0x1
c0012869:	eb 02                	jmp    c001286d <Reg::readInt(char*, char*, int*)+0x4b>
c001286b:	31 d2                	xor    edx,edx
c001286d:	31 c0                	xor    eax,eax
c001286f:	be 0a 00 00 00       	mov    esi,0xa
c0012874:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012879:	75 20                	jne    c001289b <Reg::readInt(char*, char*, int*)+0x79>
c001287b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001287f:	80 f9 78             	cmp    cl,0x78
c0012882:	75 0a                	jne    c001288e <Reg::readInt(char*, char*, int*)+0x6c>
c0012884:	83 c2 02             	add    edx,0x2
c0012887:	be 10 00 00 00       	mov    esi,0x10
c001288c:	eb 0d                	jmp    c001289b <Reg::readInt(char*, char*, int*)+0x79>
c001288e:	80 f9 62             	cmp    cl,0x62
c0012891:	75 08                	jne    c001289b <Reg::readInt(char*, char*, int*)+0x79>
c0012893:	83 c2 02             	add    edx,0x2
c0012896:	be 02 00 00 00       	mov    esi,0x2
c001289b:	01 d7                	add    edi,edx
c001289d:	31 d2                	xor    edx,edx
c001289f:	8a 1f                	mov    bl,BYTE PTR [edi]
c00128a1:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00128a5:	80 fb 0d             	cmp    bl,0xd
c00128a8:	0f 94 c3             	sete   bl
c00128ab:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00128b0:	0f 94 c1             	sete   cl
c00128b3:	08 cb                	or     bl,cl
c00128b5:	75 3a                	jne    c00128f1 <Reg::readInt(char*, char*, int*)+0xcf>
c00128b7:	0f af d6             	imul   edx,esi
c00128ba:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00128bf:	83 fe 10             	cmp    esi,0x10
c00128c2:	75 26                	jne    c00128ea <Reg::readInt(char*, char*, int*)+0xc8>
c00128c4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00128c8:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00128cb:	89 e9                	mov    ecx,ebp
c00128cd:	80 f9 05             	cmp    cl,0x5
c00128d0:	77 06                	ja     c00128d8 <Reg::readInt(char*, char*, int*)+0xb6>
c00128d2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00128d6:	eb 16                	jmp    c00128ee <Reg::readInt(char*, char*, int*)+0xcc>
c00128d8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00128dc:	83 e9 61             	sub    ecx,0x61
c00128df:	80 f9 05             	cmp    cl,0x5
c00128e2:	77 06                	ja     c00128ea <Reg::readInt(char*, char*, int*)+0xc8>
c00128e4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00128e8:	eb 04                	jmp    c00128ee <Reg::readInt(char*, char*, int*)+0xcc>
c00128ea:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00128ee:	47                   	inc    edi
c00128ef:	eb ae                	jmp    c001289f <Reg::readInt(char*, char*, int*)+0x7d>
c00128f1:	84 c0                	test   al,al
c00128f3:	74 02                	je     c00128f7 <Reg::readInt(char*, char*, int*)+0xd5>
c00128f5:	f7 da                	neg    edx
c00128f7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00128fe:	89 10                	mov    DWORD PTR [eax],edx
c0012900:	88 d8                	mov    al,bl
c0012902:	81 c4 ec 00 00 00    	add    esp,0xec
c0012908:	5b                   	pop    ebx
c0012909:	5e                   	pop    esi
c001290a:	5f                   	pop    edi
c001290b:	5d                   	pop    ebp
c001290c:	c3                   	ret    

c001290d <Reg::readString(char*, char*, char*, int)>:
c001290d:	57                   	push   edi
c001290e:	56                   	push   esi
c001290f:	53                   	push   ebx
c0012910:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012916:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001291d:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012921:	57                   	push   edi
c0012922:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012929:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012930:	e8 b6 fe ff ff       	call   c00127eb <Reg::getLine(char*, char*, char*)>
c0012935:	83 c4 10             	add    esp,0x10
c0012938:	89 c6                	mov    esi,eax
c001293a:	84 c0                	test   al,al
c001293c:	74 44                	je     c0012982 <Reg::readString(char*, char*, char*, int)+0x75>
c001293e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012945:	31 c0                	xor    eax,eax
c0012947:	4a                   	dec    edx
c0012948:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001294b:	84 c9                	test   cl,cl
c001294d:	74 0f                	je     c001295e <Reg::readString(char*, char*, char*, int)+0x51>
c001294f:	39 c2                	cmp    edx,eax
c0012951:	7e 0b                	jle    c001295e <Reg::readString(char*, char*, char*, int)+0x51>
c0012953:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012956:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001295b:	40                   	inc    eax
c001295c:	eb ea                	jmp    c0012948 <Reg::readString(char*, char*, char*, int)+0x3b>
c001295e:	83 ec 0c             	sub    esp,0xc
c0012961:	53                   	push   ebx
c0012962:	e8 c9 db fe ff       	call   c0000530 <strlen>
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001296f:	75 11                	jne    c0012982 <Reg::readString(char*, char*, char*, int)+0x75>
c0012971:	83 ec 0c             	sub    esp,0xc
c0012974:	53                   	push   ebx
c0012975:	e8 b6 db fe ff       	call   c0000530 <strlen>
c001297a:	83 c4 10             	add    esp,0x10
c001297d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012982:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012988:	89 f0                	mov    eax,esi
c001298a:	5b                   	pop    ebx
c001298b:	5e                   	pop    esi
c001298c:	5f                   	pop    edi
c001298d:	c3                   	ret    

c001298e <Reg::readBool(char*, char*, bool*)>:
c001298e:	83 ec 20             	sub    esp,0x20
c0012991:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012995:	50                   	push   eax
c0012996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001299a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001299e:	e8 7f fe ff ff       	call   c0012822 <Reg::readInt(char*, char*, int*)>
c00129a3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00129a8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00129ac:	0f 95 02             	setne  BYTE PTR [edx]
c00129af:	83 c4 2c             	add    esp,0x2c
c00129b2:	c3                   	ret    

c00129b3 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00129b3:	53                   	push   ebx
c00129b4:	83 ec 1c             	sub    esp,0x1c
c00129b7:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00129bb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00129bf:	50                   	push   eax
c00129c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129c8:	e8 c1 ff ff ff       	call   c001298e <Reg::readBool(char*, char*, bool*)>
c00129cd:	83 c4 10             	add    esp,0x10
c00129d0:	84 c0                	test   al,al
c00129d2:	74 04                	je     c00129d8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00129d4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00129d8:	88 d8                	mov    al,bl
c00129da:	83 c4 18             	add    esp,0x18
c00129dd:	5b                   	pop    ebx
c00129de:	c3                   	ret    

c00129df <Reg::readIntWithDefault(char*, char*, int)>:
c00129df:	53                   	push   ebx
c00129e0:	83 ec 1c             	sub    esp,0x1c
c00129e3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00129e7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00129eb:	50                   	push   eax
c00129ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129f4:	e8 29 fe ff ff       	call   c0012822 <Reg::readInt(char*, char*, int*)>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	84 c0                	test   al,al
c00129fe:	74 04                	je     c0012a04 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012a00:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a04:	89 d8                	mov    eax,ebx
c0012a06:	83 c4 18             	add    esp,0x18
c0012a09:	5b                   	pop    ebx
c0012a0a:	c3                   	ret    

c0012a0b <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012a0b:	57                   	push   edi
c0012a0c:	56                   	push   esi
c0012a0d:	56                   	push   esi
c0012a0e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012a12:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012a16:	56                   	push   esi
c0012a17:	57                   	push   edi
c0012a18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a20:	e8 e8 fe ff ff       	call   c001290d <Reg::readString(char*, char*, char*, int)>
c0012a25:	83 c4 10             	add    esp,0x10
c0012a28:	84 c0                	test   al,al
c0012a2a:	75 1a                	jne    c0012a46 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012a2c:	51                   	push   ecx
c0012a2d:	56                   	push   esi
c0012a2e:	6a 00                	push   0x0
c0012a30:	57                   	push   edi
c0012a31:	e8 8a da fe ff       	call   c00004c0 <memset>
c0012a36:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012a39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a3f:	83 c4 10             	add    esp,0x10
c0012a42:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012a46:	89 f8                	mov    eax,edi
c0012a48:	5a                   	pop    edx
c0012a49:	5e                   	pop    esi
c0012a4a:	5f                   	pop    edi
c0012a4b:	c3                   	ret    

c0012a4c <SysEject(regs*)>:
c0012a4c:	83 ec 0c             	sub    esp,0xc
c0012a4f:	83 ca ff             	or     edx,0xffffffff
c0012a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a56:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012a59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012a5e:	83 e9 41             	sub    ecx,0x41
c0012a61:	83 f9 19             	cmp    ecx,0x19
c0012a64:	77 18                	ja     c0012a7e <SysEject(regs*)+0x32>
c0012a66:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012a6d:	85 c9                	test   ecx,ecx
c0012a6f:	74 0d                	je     c0012a7e <SysEject(regs*)+0x32>
c0012a71:	83 ec 0c             	sub    esp,0xc
c0012a74:	51                   	push   ecx
c0012a75:	e8 7a a2 ff ff       	call   c000ccf4 <LogicalDisk::eject()>
c0012a7a:	83 c4 10             	add    esp,0x10
c0012a7d:	99                   	cdq    
c0012a7e:	83 c4 0c             	add    esp,0xc
c0012a81:	c3                   	ret    

c0012a82 <SysExit(regs*)>:
c0012a82:	83 ec 18             	sub    esp,0x18
c0012a85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a89:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012a8c:	e8 93 29 00 00       	call   c0015424 <terminateTask(int)>
c0012a91:	83 c8 ff             	or     eax,0xffffffff
c0012a94:	83 c4 1c             	add    esp,0x1c
c0012a97:	89 c2                	mov    edx,eax
c0012a99:	c3                   	ret    

c0012a9a <SysGetCwd(regs*)>:
c0012a9a:	83 ec 10             	sub    esp,0x10
c0012a9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012aa1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012aa4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012aa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012aac:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012aaf:	e8 d2 7e ff ff       	call   c000a986 <Fs::getcwd(Process*, char*, int)>
c0012ab4:	83 c4 1c             	add    esp,0x1c
c0012ab7:	99                   	cdq    
c0012ab8:	c3                   	ret    

c0012ab9 <SysGetPID(regs*)>:
c0012ab9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012abe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ac1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ac3:	99                   	cdq    
c0012ac4:	c3                   	ret    

c0012ac5 <SysGetRAMData(regs*)>:
c0012ac5:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0012acb:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c0012ad5:	99                   	cdq    
c0012ad6:	f7 f9                	idiv   ecx
c0012ad8:	c1 e0 18             	shl    eax,0x18
c0012adb:	09 c8                	or     eax,ecx
c0012add:	99                   	cdq    
c0012ade:	c3                   	ret    

c0012adf <SysGetVGAPtr(regs*)>:
c0012adf:	55                   	push   ebp
c0012ae0:	57                   	push   edi
c0012ae1:	56                   	push   esi
c0012ae2:	53                   	push   ebx
c0012ae3:	83 ec 18             	sub    esp,0x18
c0012ae6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012aea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012aed:	e8 32 24 00 00       	call   c0014f24 <Thr::processFromPID(int)>
c0012af2:	83 c4 10             	add    esp,0x10
c0012af5:	89 c1                	mov    ecx,eax
c0012af7:	b8 01 00 00 00       	mov    eax,0x1
c0012afc:	85 c9                	test   ecx,ecx
c0012afe:	74 57                	je     c0012b57 <SysGetVGAPtr(regs*)+0x78>
c0012b00:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012b06:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012b0a:	74 0c                	je     c0012b18 <SysGetVGAPtr(regs*)+0x39>
c0012b0c:	83 ec 0c             	sub    esp,0xc
c0012b0f:	55                   	push   ebp
c0012b10:	e8 90 59 ff ff       	call   c00084a5 <setActiveTerminal(VgaText*)>
c0012b15:	83 c4 10             	add    esp,0x10
c0012b18:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012b1b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012b1e:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012b23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b25:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012b28:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b2b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012b31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b34:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012b37:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012b3d:	50                   	push   eax
c0012b3e:	50                   	push   eax
c0012b3f:	68 8c 06 02 c0       	push   0xc002068c
c0012b44:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b47:	05 a8 0f 00 00       	add    eax,0xfa8
c0012b4c:	50                   	push   eax
c0012b4d:	e8 9e da fe ff       	call   c00005f0 <strcpy>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	31 c0                	xor    eax,eax
c0012b57:	83 c4 0c             	add    esp,0xc
c0012b5a:	31 d2                	xor    edx,edx
c0012b5c:	5b                   	pop    ebx
c0012b5d:	5e                   	pop    esi
c0012b5e:	5f                   	pop    edi
c0012b5f:	5d                   	pop    ebp
c0012b60:	c3                   	ret    
c0012b61:	66 90                	xchg   ax,ax
c0012b63:	90                   	nop

c0012b64 <SysKill(regs*)>:
c0012b64:	53                   	push   ebx
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b6c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0012b70:	75 16                	jne    c0012b88 <SysKill(regs*)+0x24>
c0012b72:	83 ec 0c             	sub    esp,0xc
c0012b75:	68 96 06 02 c0       	push   0xc0020696
c0012b7a:	e8 50 d8 ff ff       	call   c00103cf <KePanic(char const*)>
c0012b7f:	83 c4 10             	add    esp,0x10
c0012b82:	e9 89 00 00 00       	jmp    c0012c10 <SysKill(regs*)+0xac>
c0012b87:	90                   	nop
c0012b88:	83 ec 0c             	sub    esp,0xc
c0012b8b:	68 84 71 02 c0       	push   0xc0027184
c0012b90:	e8 57 b8 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012b95:	8d 76 00             	lea    esi,[esi+0x0]
c0012b98:	83 c4 10             	add    esp,0x10
c0012b9b:	85 c0                	test   eax,eax
c0012b9d:	74 19                	je     c0012bb8 <SysKill(regs*)+0x54>
c0012b9f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012ba2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012ba5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012ba7:	74 33                	je     c0012bdc <SysKill(regs*)+0x78>
c0012ba9:	52                   	push   edx
c0012baa:	52                   	push   edx
c0012bab:	50                   	push   eax
c0012bac:	68 84 71 02 c0       	push   0xc0027184
c0012bb1:	e8 52 bb 00 00       	call   c001e708 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012bb6:	eb e0                	jmp    c0012b98 <SysKill(regs*)+0x34>
c0012bb8:	83 ec 0c             	sub    esp,0xc
c0012bbb:	68 78 71 02 c0       	push   0xc0027178
c0012bc0:	e8 27 b8 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012bc8:	83 c4 10             	add    esp,0x10
c0012bcb:	85 c0                	test   eax,eax
c0012bcd:	74 41                	je     c0012c10 <SysKill(regs*)+0xac>
c0012bcf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012bd2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012bd5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012bd7:	75 27                	jne    c0012c00 <SysKill(regs*)+0x9c>
c0012bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0012bdc:	51                   	push   ecx
c0012bdd:	51                   	push   ecx
c0012bde:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012be1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012be6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012be9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012bef:	e8 4b dc ff ff       	call   c001083f <KeRaiseSignal(SigHandlerBlock*, int)>
c0012bf4:	83 c4 10             	add    esp,0x10
c0012bf7:	31 c0                	xor    eax,eax
c0012bf9:	31 d2                	xor    edx,edx
c0012bfb:	eb 1b                	jmp    c0012c18 <SysKill(regs*)+0xb4>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	52                   	push   edx
c0012c01:	52                   	push   edx
c0012c02:	50                   	push   eax
c0012c03:	68 78 71 02 c0       	push   0xc0027178
c0012c08:	e8 fb ba 00 00       	call   c001e708 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012c0d:	eb b9                	jmp    c0012bc8 <SysKill(regs*)+0x64>
c0012c0f:	90                   	nop
c0012c10:	83 c8 ff             	or     eax,0xffffffff
c0012c13:	89 c2                	mov    edx,eax
c0012c15:	8d 76 00             	lea    esi,[esi+0x0]
c0012c18:	83 c4 08             	add    esp,0x8
c0012c1b:	5b                   	pop    ebx
c0012c1c:	c3                   	ret    

c0012c1d <SysLoadDLL(regs*)>:
c0012c1d:	56                   	push   esi
c0012c1e:	53                   	push   ebx
c0012c1f:	31 d2                	xor    edx,edx
c0012c21:	51                   	push   ecx
c0012c22:	b8 01 00 00 00       	mov    eax,0x1
c0012c27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c2b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012c2f:	0f 84 8c 00 00 00    	je     c0012cc1 <SysLoadDLL(regs*)+0xa4>
c0012c35:	83 ec 0c             	sub    esp,0xc
c0012c38:	68 14 01 00 00       	push   0x114
c0012c3d:	e8 2b 4c ff ff       	call   c000786d <malloc>
c0012c42:	83 c4 0c             	add    esp,0xc
c0012c45:	89 c3                	mov    ebx,eax
c0012c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c4c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012c4f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012c52:	53                   	push   ebx
c0012c53:	e8 2c 7f ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	31 d2                	xor    edx,edx
c0012c5d:	b8 02 00 00 00       	mov    eax,0x2
c0012c62:	85 db                	test   ebx,ebx
c0012c64:	74 5b                	je     c0012cc1 <SysLoadDLL(regs*)+0xa4>
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	53                   	push   ebx
c0012c6a:	e8 43 82 ff ff       	call   c000aeb2 <File::exists()>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	84 c0                	test   al,al
c0012c74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c76:	75 11                	jne    c0012c89 <SysLoadDLL(regs*)+0x6c>
c0012c78:	83 ec 0c             	sub    esp,0xc
c0012c7b:	53                   	push   ebx
c0012c7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	b8 03 00 00 00       	mov    eax,0x3
c0012c87:	eb 36                	jmp    c0012cbf <SysLoadDLL(regs*)+0xa2>
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	53                   	push   ebx
c0012c8d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c90:	58                   	pop    eax
c0012c91:	5a                   	pop    edx
c0012c92:	6a 00                	push   0x0
c0012c94:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012c97:	e8 10 14 00 00       	call   c00140ac <Thr::loadDLL(char const*, bool)>
c0012c9c:	83 c4 10             	add    esp,0x10
c0012c9f:	89 c1                	mov    ecx,eax
c0012ca1:	31 d2                	xor    edx,edx
c0012ca3:	b8 04 00 00 00       	mov    eax,0x4
c0012ca8:	85 c9                	test   ecx,ecx
c0012caa:	74 15                	je     c0012cc1 <SysLoadDLL(regs*)+0xa4>
c0012cac:	53                   	push   ebx
c0012cad:	53                   	push   ebx
c0012cae:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012cb4:	51                   	push   ecx
c0012cb5:	e8 23 16 00 00       	call   c00142dd <Thr::executeDLL(unsigned long, void*)>
c0012cba:	83 c4 10             	add    esp,0x10
c0012cbd:	31 c0                	xor    eax,eax
c0012cbf:	31 d2                	xor    edx,edx
c0012cc1:	59                   	pop    ecx
c0012cc2:	5b                   	pop    ebx
c0012cc3:	5e                   	pop    esi
c0012cc4:	c3                   	ret    

c0012cc5 <SysRead(regs*)>:
c0012cc5:	57                   	push   edi
c0012cc6:	56                   	push   esi
c0012cc7:	53                   	push   ebx
c0012cc8:	83 ec 10             	sub    esp,0x10
c0012ccb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012ccf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012cd2:	83 f8 02             	cmp    eax,0x2
c0012cd5:	77 10                	ja     c0012ce7 <SysRead(regs*)+0x22>
c0012cd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012cdc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012cdf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012ce5:	eb 0e                	jmp    c0012cf5 <SysRead(regs*)+0x30>
c0012ce7:	83 ec 0c             	sub    esp,0xc
c0012cea:	50                   	push   eax
c0012ceb:	e8 0b 65 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c0012cf0:	83 c4 10             	add    esp,0x10
c0012cf3:	89 c1                	mov    ecx,eax
c0012cf5:	83 c8 ff             	or     eax,0xffffffff
c0012cf8:	85 c9                	test   ecx,ecx
c0012cfa:	89 c2                	mov    edx,eax
c0012cfc:	74 28                	je     c0012d26 <SysRead(regs*)+0x61>
c0012cfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012d06:	31 ff                	xor    edi,edi
c0012d08:	83 ec 0c             	sub    esp,0xc
c0012d0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d0d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012d11:	52                   	push   edx
c0012d12:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d15:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012d18:	57                   	push   edi
c0012d19:	56                   	push   esi
c0012d1a:	51                   	push   ecx
c0012d1b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012d22:	83 c4 20             	add    esp,0x20
c0012d25:	99                   	cdq    
c0012d26:	83 c4 10             	add    esp,0x10
c0012d29:	5b                   	pop    ebx
c0012d2a:	5e                   	pop    esi
c0012d2b:	5f                   	pop    edi
c0012d2c:	c3                   	ret    

c0012d2d <SysRegisterSignal(regs*)>:
c0012d2d:	83 ec 18             	sub    esp,0x18
c0012d30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d34:	6a 00                	push   0x0
c0012d36:	6a 00                	push   0x0
c0012d38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012d3b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d43:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d46:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012d4c:	e8 b8 da ff ff       	call   c0010809 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012d51:	83 c4 2c             	add    esp,0x2c
c0012d54:	99                   	cdq    
c0012d55:	c3                   	ret    

c0012d56 <SysRegistryGetTypeFromPath(regs*)>:
c0012d56:	57                   	push   edi
c0012d57:	56                   	push   esi
c0012d58:	53                   	push   ebx
c0012d59:	81 ec 38 01 00 00    	sub    esp,0x138
c0012d5f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0012d66:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d69:	68 b7 06 02 c0       	push   0xc00206b7
c0012d6e:	e8 9b 78 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012d73:	5a                   	pop    edx
c0012d74:	59                   	pop    ecx
c0012d75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d78:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012d7b:	e8 68 f6 ff ff       	call   c00123e8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012d80:	5f                   	pop    edi
c0012d81:	89 c6                	mov    esi,eax
c0012d83:	5a                   	pop    edx
c0012d84:	50                   	push   eax
c0012d85:	68 d7 06 02 c0       	push   0xc00206d7
c0012d8a:	e8 7f 78 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012d8f:	83 c4 10             	add    esp,0x10
c0012d92:	85 f6                	test   esi,esi
c0012d94:	74 28                	je     c0012dbe <SysRegistryGetTypeFromPath(regs*)+0x68>
c0012d96:	50                   	push   eax
c0012d97:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012d9b:	57                   	push   edi
c0012d9c:	56                   	push   esi
c0012d9d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012da0:	e8 30 f2 ff ff       	call   c0011fd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012da5:	83 c4 0c             	add    esp,0xc
c0012da8:	89 c3                	mov    ebx,eax
c0012daa:	57                   	push   edi
c0012dab:	50                   	push   eax
c0012dac:	68 df 06 02 c0       	push   0xc00206df
c0012db1:	e8 58 78 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012db6:	89 d8                	mov    eax,ebx
c0012db8:	83 c4 10             	add    esp,0x10
c0012dbb:	99                   	cdq    
c0012dbc:	eb 05                	jmp    c0012dc3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0012dbe:	83 c8 ff             	or     eax,0xffffffff
c0012dc1:	89 c2                	mov    edx,eax
c0012dc3:	81 c4 30 01 00 00    	add    esp,0x130
c0012dc9:	5b                   	pop    ebx
c0012dca:	5e                   	pop    esi
c0012dcb:	5f                   	pop    edi
c0012dcc:	c3                   	ret    

c0012dcd <SysRegistryReadExtent(regs*)>:
c0012dcd:	83 ec 1c             	sub    esp,0x1c
c0012dd0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012dd4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012dd7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0012dda:	85 c0                	test   eax,eax
c0012ddc:	79 1f                	jns    c0012dfd <SysRegistryReadExtent(regs*)+0x30>
c0012dde:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0012de3:	52                   	push   edx
c0012de4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012de8:	52                   	push   edx
c0012de9:	50                   	push   eax
c0012dea:	51                   	push   ecx
c0012deb:	e8 d7 f0 ff ff       	call   c0011ec7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0012df0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012df4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012df8:	83 c4 10             	add    esp,0x10
c0012dfb:	eb 14                	jmp    c0012e11 <SysRegistryReadExtent(regs*)+0x44>
c0012dfd:	83 ec 04             	sub    esp,0x4
c0012e00:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0012e03:	50                   	push   eax
c0012e04:	51                   	push   ecx
c0012e05:	e8 57 eb ff ff       	call   c0011961 <CmGetString(Reghive_Tag*, int, char*)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	31 c0                	xor    eax,eax
c0012e0f:	31 d2                	xor    edx,edx
c0012e11:	83 c4 1c             	add    esp,0x1c
c0012e14:	c3                   	ret    

c0012e15 <SysRegistryPathToExtentLookup(regs*)>:
c0012e15:	53                   	push   ebx
c0012e16:	83 ec 10             	sub    esp,0x10
c0012e19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e1d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e20:	68 f5 06 02 c0       	push   0xc00206f5
c0012e25:	e8 e4 77 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012e2a:	58                   	pop    eax
c0012e2b:	5a                   	pop    edx
c0012e2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e2f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e32:	e8 b1 f5 ff ff       	call   c00123e8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012e37:	83 c4 18             	add    esp,0x18
c0012e3a:	99                   	cdq    
c0012e3b:	5b                   	pop    ebx
c0012e3c:	c3                   	ret    

c0012e3d <SysRegistryEnterDirectory(regs*)>:
c0012e3d:	53                   	push   ebx
c0012e3e:	83 ec 10             	sub    esp,0x10
c0012e41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e45:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e48:	68 18 07 02 c0       	push   0xc0020718
c0012e4d:	e8 bc 77 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012e52:	58                   	pop    eax
c0012e53:	5a                   	pop    edx
c0012e54:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e57:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e5a:	e8 79 eb ff ff       	call   c00119d8 <CmEnterDirectory(Reghive_Tag*, int)>
c0012e5f:	83 c4 18             	add    esp,0x18
c0012e62:	99                   	cdq    
c0012e63:	5b                   	pop    ebx
c0012e64:	c3                   	ret    

c0012e65 <SysRegistryGetNext(regs*)>:
c0012e65:	53                   	push   ebx
c0012e66:	83 ec 10             	sub    esp,0x10
c0012e69:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e6d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e70:	68 36 07 02 c0       	push   0xc0020736
c0012e75:	e8 94 77 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0012e7a:	58                   	pop    eax
c0012e7b:	5a                   	pop    edx
c0012e7c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e7f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e82:	e8 90 eb ff ff       	call   c0011a17 <CmGetNext(Reghive_Tag*, int)>
c0012e87:	83 c4 18             	add    esp,0x18
c0012e8a:	99                   	cdq    
c0012e8b:	5b                   	pop    ebx
c0012e8c:	c3                   	ret    

c0012e8d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0012e8d:	57                   	push   edi
c0012e8e:	56                   	push   esi
c0012e8f:	53                   	push   ebx
c0012e90:	81 ec 34 01 00 00    	sub    esp,0x134
c0012e96:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012e9d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012ea1:	57                   	push   edi
c0012ea2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012ea5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012ea8:	e8 28 f1 ff ff       	call   c0011fd5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012ead:	89 c3                	mov    ebx,eax
c0012eaf:	58                   	pop    eax
c0012eb0:	5a                   	pop    edx
c0012eb1:	57                   	push   edi
c0012eb2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0012eb5:	e8 36 d7 fe ff       	call   c00005f0 <strcpy>
c0012eba:	89 d8                	mov    eax,ebx
c0012ebc:	81 c4 40 01 00 00    	add    esp,0x140
c0012ec2:	99                   	cdq    
c0012ec3:	5b                   	pop    ebx
c0012ec4:	5e                   	pop    esi
c0012ec5:	5f                   	pop    edi
c0012ec6:	c3                   	ret    

c0012ec7 <SysRegistryOpen(regs*)>:
c0012ec7:	83 ec 18             	sub    esp,0x18
c0012eca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ece:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012ed1:	e8 1b e9 ff ff       	call   c00117f1 <CmOpen(char const*)>
c0012ed6:	83 c4 1c             	add    esp,0x1c
c0012ed9:	99                   	cdq    
c0012eda:	c3                   	ret    

c0012edb <SysRegistryClose(regs*)>:
c0012edb:	83 ec 18             	sub    esp,0x18
c0012ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ee2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ee5:	e8 25 ea ff ff       	call   c001190f <CmClose(Reghive_Tag*)>
c0012eea:	31 c0                	xor    eax,eax
c0012eec:	31 d2                	xor    edx,edx
c0012eee:	83 c4 1c             	add    esp,0x1c
c0012ef1:	c3                   	ret    

c0012ef2 <SysSbrk(regs*)>:
c0012ef2:	56                   	push   esi
c0012ef3:	53                   	push   ebx
c0012ef4:	50                   	push   eax
c0012ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012efa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012efe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f01:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012f04:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012f0a:	85 db                	test   ebx,ebx
c0012f0c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012f0f:	74 02                	je     c0012f13 <SysSbrk(regs*)+0x21>
c0012f11:	79 06                	jns    c0012f19 <SysSbrk(regs*)+0x27>
c0012f13:	89 f0                	mov    eax,esi
c0012f15:	31 d2                	xor    edx,edx
c0012f17:	eb 2a                	jmp    c0012f43 <SysSbrk(regs*)+0x51>
c0012f19:	83 c8 ff             	or     eax,0xffffffff
c0012f1c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012f22:	89 c2                	mov    edx,eax
c0012f24:	77 1d                	ja     c0012f43 <SysSbrk(regs*)+0x51>
c0012f26:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012f2c:	50                   	push   eax
c0012f2d:	c1 ea 0c             	shr    edx,0xc
c0012f30:	68 07 0c 00 00       	push   0xc07
c0012f35:	52                   	push   edx
c0012f36:	51                   	push   ecx
c0012f37:	e8 dc 6b ff ff       	call   c0009b18 <VAS::allocatePages(int, int)>
c0012f3c:	89 f0                	mov    eax,esi
c0012f3e:	31 d2                	xor    edx,edx
c0012f40:	83 c4 10             	add    esp,0x10
c0012f43:	59                   	pop    ecx
c0012f44:	5b                   	pop    ebx
c0012f45:	5e                   	pop    esi
c0012f46:	c3                   	ret    

c0012f47 <SysSetCwd(regs*)>:
c0012f47:	83 ec 14             	sub    esp,0x14
c0012f4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f4e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f56:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f59:	e8 f3 7f ff ff       	call   c000af51 <Fs::setcwd(Process*, char*)>
c0012f5e:	83 c4 1c             	add    esp,0x1c
c0012f61:	99                   	cdq    
c0012f62:	c3                   	ret    

c0012f63 <SysSetTime(regs*)>:
c0012f63:	55                   	push   ebp
c0012f64:	31 c9                	xor    ecx,ecx
c0012f66:	57                   	push   edi
c0012f67:	bd 0c 00 00 00       	mov    ebp,0xc
c0012f6c:	56                   	push   esi
c0012f6d:	53                   	push   ebx
c0012f6e:	31 db                	xor    ebx,ebx
c0012f70:	83 ec 10             	sub    esp,0x10
c0012f73:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f77:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012f7a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012f7d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012f80:	89 c2                	mov    edx,eax
c0012f82:	66 81 ef 6c 07       	sub    di,0x76c
c0012f87:	83 e2 1f             	and    edx,0x1f
c0012f8a:	c1 e7 10             	shl    edi,0x10
c0012f8d:	42                   	inc    edx
c0012f8e:	c1 e8 05             	shr    eax,0x5
c0012f91:	88 d1                	mov    cl,dl
c0012f93:	31 d2                	xor    edx,edx
c0012f95:	f7 f5                	div    ebp
c0012f97:	89 dd                	mov    ebp,ebx
c0012f99:	88 d5                	mov    ch,dl
c0012f9b:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012fa1:	0f b7 c1             	movzx  eax,cx
c0012fa4:	31 d2                	xor    edx,edx
c0012fa6:	09 f8                	or     eax,edi
c0012fa8:	bf 3c 00 00 00       	mov    edi,0x3c
c0012fad:	89 c1                	mov    ecx,eax
c0012faf:	89 f0                	mov    eax,esi
c0012fb1:	f7 f7                	div    edi
c0012fb3:	c1 e2 10             	shl    edx,0x10
c0012fb6:	09 d5                	or     ebp,edx
c0012fb8:	31 d2                	xor    edx,edx
c0012fba:	89 eb                	mov    ebx,ebp
c0012fbc:	f7 f7                	div    edi
c0012fbe:	bf 10 0e 00 00       	mov    edi,0xe10
c0012fc3:	88 d7                	mov    bh,dl
c0012fc5:	89 f0                	mov    eax,esi
c0012fc7:	31 d2                	xor    edx,edx
c0012fc9:	f7 f7                	div    edi
c0012fcb:	bf 18 00 00 00       	mov    edi,0x18
c0012fd0:	31 d2                	xor    edx,edx
c0012fd2:	f7 f7                	div    edi
c0012fd4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012fd9:	88 d3                	mov    bl,dl
c0012fdb:	53                   	push   ebx
c0012fdc:	51                   	push   ecx
c0012fdd:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012fe3:	e8 78 87 ff ff       	call   c000b760 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012fe8:	83 c4 1c             	add    esp,0x1c
c0012feb:	83 f0 01             	xor    eax,0x1
c0012fee:	5b                   	pop    ebx
c0012fef:	0f b6 c0             	movzx  eax,al
c0012ff2:	5e                   	pop    esi
c0012ff3:	31 d2                	xor    edx,edx
c0012ff5:	5f                   	pop    edi
c0012ff6:	5d                   	pop    ebp
c0012ff7:	c3                   	ret    

c0012ff8 <SysTimezone(regs*)>:
c0012ff8:	53                   	push   ebx
c0012ff9:	83 ec 08             	sub    esp,0x8
c0012ffc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013000:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013004:	75 17                	jne    c001301d <SysTimezone(regs*)+0x25>
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	68 4d 07 02 c0       	push   0xc002074d
c001300e:	e8 fb 75 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013013:	83 c8 ff             	or     eax,0xffffffff
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	89 c2                	mov    edx,eax
c001301b:	eb 20                	jmp    c001303d <SysTimezone(regs*)+0x45>
c001301d:	83 ec 0c             	sub    esp,0xc
c0013020:	68 62 07 02 c0       	push   0xc0020762
c0013025:	e8 e4 75 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001302a:	58                   	pop    eax
c001302b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001302e:	e8 89 84 ff ff       	call   c000b4bc <User::loadClockSettings(int)>
c0013033:	83 c4 10             	add    esp,0x10
c0013036:	b8 01 00 00 00       	mov    eax,0x1
c001303b:	31 d2                	xor    edx,edx
c001303d:	83 c4 08             	add    esp,0x8
c0013040:	5b                   	pop    ebx
c0013041:	c3                   	ret    

c0013042 <SysWrite(regs*)>:
c0013042:	57                   	push   edi
c0013043:	56                   	push   esi
c0013044:	53                   	push   ebx
c0013045:	83 ec 10             	sub    esp,0x10
c0013048:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001304c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001304f:	83 f8 02             	cmp    eax,0x2
c0013052:	77 10                	ja     c0013064 <SysWrite(regs*)+0x22>
c0013054:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013059:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001305c:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013062:	eb 0e                	jmp    c0013072 <SysWrite(regs*)+0x30>
c0013064:	83 ec 0c             	sub    esp,0xc
c0013067:	50                   	push   eax
c0013068:	e8 8e 61 ff ff       	call   c00091fb <getFromFileDescriptor(int)>
c001306d:	83 c4 10             	add    esp,0x10
c0013070:	89 c1                	mov    ecx,eax
c0013072:	83 c8 ff             	or     eax,0xffffffff
c0013075:	85 c9                	test   ecx,ecx
c0013077:	89 c2                	mov    edx,eax
c0013079:	74 28                	je     c00130a3 <SysWrite(regs*)+0x61>
c001307b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013083:	31 ff                	xor    edi,edi
c0013085:	83 ec 0c             	sub    esp,0xc
c0013088:	8b 01                	mov    eax,DWORD PTR [ecx]
c001308a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001308e:	52                   	push   edx
c001308f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013092:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013095:	57                   	push   edi
c0013096:	56                   	push   esi
c0013097:	51                   	push   ecx
c0013098:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001309b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001309f:	83 c4 20             	add    esp,0x20
c00130a2:	99                   	cdq    
c00130a3:	83 c4 10             	add    esp,0x10
c00130a6:	5b                   	pop    ebx
c00130a7:	5e                   	pop    esi
c00130a8:	5f                   	pop    edi
c00130a9:	c3                   	ret    

c00130aa <SysWsbe(regs*)>:
c00130aa:	57                   	push   edi
c00130ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00130b0:	56                   	push   esi
c00130b1:	be a1 07 02 c0       	mov    esi,0xc00207a1
c00130b6:	53                   	push   ebx
c00130b7:	83 ec 30             	sub    esp,0x30
c00130ba:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00130be:	fc                   	cld    
c00130bf:	83 ec 0c             	sub    esp,0xc
c00130c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00130c4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00130c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130d0:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00130d6:	8b 06                	mov    eax,DWORD PTR [esi]
c00130d8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00130db:	57                   	push   edi
c00130dc:	e8 4f d4 fe ff       	call   c0000530 <strlen>
c00130e1:	5a                   	pop    edx
c00130e2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00130e6:	52                   	push   edx
c00130e7:	31 d2                	xor    edx,edx
c00130e9:	57                   	push   edi
c00130ea:	52                   	push   edx
c00130eb:	50                   	push   eax
c00130ec:	56                   	push   esi
c00130ed:	ff d3                	call   ebx
c00130ef:	83 c4 14             	add    esp,0x14
c00130f2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00130f6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00130f9:	e8 26 23 00 00       	call   c0015424 <terminateTask(int)>
c00130fe:	83 c4 40             	add    esp,0x40
c0013101:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0013106:	5b                   	pop    ebx
c0013107:	31 d2                	xor    edx,edx
c0013109:	5e                   	pop    esi
c001310a:	5f                   	pop    edi
c001310b:	c3                   	ret    

c001310c <SysYield(regs*)>:
c001310c:	83 ec 0c             	sub    esp,0xc
c001310f:	fa                   	cli    
c0013110:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013116:	e8 e5 19 00 00       	call   c0014b00 <schedule()>
c001311b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013120:	48                   	dec    eax
c0013121:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013126:	75 01                	jne    c0013129 <SysYield(regs*)+0x1d>
c0013128:	fb                   	sti    
c0013129:	31 c0                	xor    eax,eax
c001312b:	31 d2                	xor    edx,edx
c001312d:	83 c4 0c             	add    esp,0xc
c0013130:	c3                   	ret    

c0013131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013131:	55                   	push   ebp
c0013132:	57                   	push   edi
c0013133:	56                   	push   esi
c0013134:	53                   	push   ebx
c0013135:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001313b:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013143:	0f 95 c2             	setne  dl
c0013146:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001314e:	0f 94 c0             	sete   al
c0013151:	84 c2                	test   dl,al
c0013153:	74 34                	je     c0013189 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0013155:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013160:	74 27                	je     c0013189 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0013162:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013169:	05 00 10 00 00       	add    eax,0x1000
c001316e:	89 c1                	mov    ecx,eax
c0013170:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013175:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001317b:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013182:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013189:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013190:	83 ec 0c             	sub    esp,0xc
c0013193:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013199:	6a 01                	push   0x1
c001319b:	e8 b1 61 ff ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	89 c3                	mov    ebx,eax
c00131a5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00131ab:	0f 86 25 01 00 00    	jbe    c00132d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c00131b1:	c1 ee 0c             	shr    esi,0xc
c00131b4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00131bb:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00131bf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00131c7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00131ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00131d2:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00131d9:	29 ef                	sub    edi,ebp
c00131db:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00131df:	0f 83 f8 00 00 00    	jae    c00132dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c00131e5:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00131eb:	76 05                	jbe    c00131f2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c00131ed:	bf 00 10 00 00       	mov    edi,0x1000
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	31 d2                	xor    edx,edx
c00131f7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00131fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013200:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013204:	50                   	push   eax
c0013205:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013209:	56                   	push   esi
c001320a:	52                   	push   edx
c001320b:	57                   	push   edi
c001320c:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013213:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013216:	83 c4 20             	add    esp,0x20
c0013219:	85 c0                	test   eax,eax
c001321b:	75 06                	jne    c0013223 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c001321d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013221:	74 13                	je     c0013236 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0013223:	83 ec 0c             	sub    esp,0xc
c0013226:	53                   	push   ebx
c0013227:	e8 19 64 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c001322c:	83 c4 10             	add    esp,0x10
c001322f:	31 c0                	xor    eax,eax
c0013231:	e9 7c 01 00 00       	jmp    c00133b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0013236:	fa                   	cli    
c0013237:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001323d:	e8 07 49 ff ff       	call   c0007b49 <Phys::allocatePage()>
c0013242:	6a 07                	push   0x7
c0013244:	89 c7                	mov    edi,eax
c0013246:	53                   	push   ebx
c0013247:	50                   	push   eax
c0013248:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001324d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013250:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013256:	e8 b9 67 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001325b:	83 c4 0c             	add    esp,0xc
c001325e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013265:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001326b:	6a 00                	push   0x0
c001326d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013272:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013275:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001327b:	e8 06 66 ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c0013280:	58                   	pop    eax
c0013281:	5a                   	pop    edx
c0013282:	68 07 0c 00 00       	push   0xc07
c0013287:	55                   	push   ebp
c0013288:	57                   	push   edi
c0013289:	89 df                	mov    edi,ebx
c001328b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013292:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013298:	6a 00                	push   0x0
c001329a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001329f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132a2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132a8:	e8 27 6b ff ff       	call   c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00132ad:	b9 00 10 00 00       	mov    ecx,0x1000
c00132b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00132b4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00132b9:	83 c4 20             	add    esp,0x20
c00132bc:	48                   	dec    eax
c00132bd:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00132c2:	85 c0                	test   eax,eax
c00132c4:	75 01                	jne    c00132c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c00132c6:	fb                   	sti    
c00132c7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00132cd:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00132d1:	e9 f1 fe ff ff       	jmp    c00131c7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c00132d6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00132dd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00132e4:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00132ea:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00132f0:	0f 86 ae 00 00 00    	jbe    c00133a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00132f6:	fa                   	cli    
c00132f7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00132fd:	c1 ee 0c             	shr    esi,0xc
c0013300:	51                   	push   ecx
c0013301:	31 ff                	xor    edi,edi
c0013303:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001330a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013310:	6a 00                	push   0x0
c0013312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013317:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001331a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013320:	e8 61 65 ff ff       	call   c0009886 <VAS::mapOtherVASIn(bool, VAS*)>
c0013325:	83 c4 10             	add    esp,0x10
c0013328:	e8 1c 48 ff ff       	call   c0007b49 <Phys::allocatePage()>
c001332d:	47                   	inc    edi
c001332e:	6a 07                	push   0x7
c0013330:	53                   	push   ebx
c0013331:	50                   	push   eax
c0013332:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013336:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001333c:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001333f:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013345:	e8 ca 66 ff ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001334a:	58                   	pop    eax
c001334b:	5a                   	pop    edx
c001334c:	68 07 0c 00 00       	push   0xc07
c0013351:	55                   	push   ebp
c0013352:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001335c:	50                   	push   eax
c001335d:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013364:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001336a:	6a 00                	push   0x0
c001336c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013371:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013374:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001337a:	e8 55 6a ff ff       	call   c0009dd4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001337f:	83 c4 1c             	add    esp,0x1c
c0013382:	68 00 10 00 00       	push   0x1000
c0013387:	6a 00                	push   0x0
c0013389:	53                   	push   ebx
c001338a:	e8 31 d1 fe ff       	call   c00004c0 <memset>
c001338f:	83 c4 10             	add    esp,0x10
c0013392:	39 fe                	cmp    esi,edi
c0013394:	77 92                	ja     c0013328 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0013396:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001339b:	48                   	dec    eax
c001339c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00133a1:	75 01                	jne    c00133a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c00133a3:	fb                   	sti    
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	53                   	push   ebx
c00133a8:	e8 98 62 ff ff       	call   c0009645 <Virt::freeKernelVirtualPages(unsigned long)>
c00133ad:	83 c4 10             	add    esp,0x10
c00133b0:	b0 01                	mov    al,0x1
c00133b2:	81 c4 2c 10 00 00    	add    esp,0x102c
c00133b8:	5b                   	pop    ebx
c00133b9:	5e                   	pop    esi
c00133ba:	5f                   	pop    edi
c00133bb:	5d                   	pop    ebp
c00133bc:	c3                   	ret    

c00133bd <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00133bd:	55                   	push   ebp
c00133be:	57                   	push   edi
c00133bf:	56                   	push   esi
c00133c0:	53                   	push   ebx
c00133c1:	83 ec 48             	sub    esp,0x48
c00133c4:	68 14 01 00 00       	push   0x114
c00133c9:	e8 9f 44 ff ff       	call   c000786d <malloc>
c00133ce:	83 c4 0c             	add    esp,0xc
c00133d1:	89 c6                	mov    esi,eax
c00133d3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00133d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00133db:	50                   	push   eax
c00133dc:	e8 a3 77 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00133e1:	58                   	pop    eax
c00133e2:	5a                   	pop    edx
c00133e3:	6a 01                	push   0x1
c00133e5:	56                   	push   esi
c00133e6:	e8 59 78 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c00133eb:	83 c4 10             	add    esp,0x10
c00133ee:	85 c0                	test   eax,eax
c00133f0:	0f 85 47 01 00 00    	jne    c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00133f6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00133fe:	83 ec 0c             	sub    esp,0xc
c0013401:	6a 34                	push   0x34
c0013403:	e8 65 44 ff ff       	call   c000786d <malloc>
c0013408:	89 c3                	mov    ebx,eax
c001340a:	58                   	pop    eax
c001340b:	8b 06                	mov    eax,DWORD PTR [esi]
c001340d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013411:	57                   	push   edi
c0013412:	53                   	push   ebx
c0013413:	6a 00                	push   0x0
c0013415:	6a 34                	push   0x34
c0013417:	56                   	push   esi
c0013418:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001341b:	83 c4 20             	add    esp,0x20
c001341e:	85 c0                	test   eax,eax
c0013420:	0f 85 17 01 00 00    	jne    c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013426:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001342c:	0f 85 0b 01 00 00    	jne    c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013432:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013435:	85 c0                	test   eax,eax
c0013437:	0f 84 00 01 00 00    	je     c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001343d:	31 d2                	xor    edx,edx
c001343f:	55                   	push   ebp
c0013440:	52                   	push   edx
c0013441:	50                   	push   eax
c0013442:	56                   	push   esi
c0013443:	e8 ba 78 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	85 c0                	test   eax,eax
c001344d:	0f 85 ea 00 00 00    	jne    c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013453:	83 ec 0c             	sub    esp,0xc
c0013456:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013459:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001345d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013461:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013465:	0f af c2             	imul   eax,edx
c0013468:	50                   	push   eax
c0013469:	e8 ff 43 ff ff       	call   c000786d <malloc>
c001346e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013470:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013474:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013477:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001347b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001347f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013483:	0f af c2             	imul   eax,edx
c0013486:	99                   	cdq    
c0013487:	52                   	push   edx
c0013488:	50                   	push   eax
c0013489:	56                   	push   esi
c001348a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001348d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013490:	83 c4 20             	add    esp,0x20
c0013493:	85 c0                	test   eax,eax
c0013495:	0f 84 a2 00 00 00    	je     c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001349b:	31 d2                	xor    edx,edx
c001349d:	51                   	push   ecx
c001349e:	52                   	push   edx
c001349f:	50                   	push   eax
c00134a0:	56                   	push   esi
c00134a1:	e8 5c 78 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00134a6:	83 c4 10             	add    esp,0x10
c00134a9:	85 c0                	test   eax,eax
c00134ab:	0f 85 8c 00 00 00    	jne    c001353d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00134b1:	83 ec 0c             	sub    esp,0xc
c00134b4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00134b8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00134bc:	31 ed                	xor    ebp,ebp
c00134be:	0f af c2             	imul   eax,edx
c00134c1:	50                   	push   eax
c00134c2:	e8 a6 43 ff ff       	call   c000786d <malloc>
c00134c7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00134c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134cd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00134d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00134d8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00134dc:	0f af c2             	imul   eax,edx
c00134df:	99                   	cdq    
c00134e0:	52                   	push   edx
c00134e1:	50                   	push   eax
c00134e2:	56                   	push   esi
c00134e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00134e6:	83 c4 20             	add    esp,0x20
c00134e9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00134f1:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00134f5:	0f 86 80 00 00 00    	jbe    c001357b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00134fb:	0f b7 fd             	movzx  edi,bp
c00134fe:	c1 e7 05             	shl    edi,0x5
c0013501:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013505:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013508:	75 6b                	jne    c0013575 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001350a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001350d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013511:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013518:	52                   	push   edx
c0013519:	31 d2                	xor    edx,edx
c001351b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001351e:	52                   	push   edx
c001351f:	50                   	push   eax
c0013520:	56                   	push   esi
c0013521:	e8 dc 77 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013526:	83 c4 10             	add    esp,0x10
c0013529:	85 c0                	test   eax,eax
c001352b:	74 17                	je     c0013544 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001352d:	83 ec 0c             	sub    esp,0xc
c0013530:	68 cd 07 02 c0       	push   0xc00207cd
c0013535:	e8 d4 70 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001353a:	83 c4 10             	add    esp,0x10
c001353d:	31 c0                	xor    eax,eax
c001353f:	e9 87 00 00 00       	jmp    c00135cb <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0013544:	83 ec 0c             	sub    esp,0xc
c0013547:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001354a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001354d:	50                   	push   eax
c001354e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013552:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013556:	56                   	push   esi
c0013557:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001355b:	e8 d1 fb ff ff       	call   c0013131 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013560:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013564:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013568:	83 c4 20             	add    esp,0x20
c001356b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001356f:	73 04                	jae    c0013575 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0013571:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013575:	45                   	inc    ebp
c0013576:	e9 76 ff ff ff       	jmp    c00134f1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001357b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001357f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013587:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001358d:	83 ec 0c             	sub    esp,0xc
c0013590:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013596:	25 00 f0 ff ff       	and    eax,0xfffff000
c001359b:	05 00 10 00 00       	add    eax,0x1000
c00135a0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00135a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135a7:	e8 d1 42 ff ff       	call   c000787d <free>
c00135ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135af:	e8 c9 42 ff ff       	call   c000787d <free>
c00135b4:	58                   	pop    eax
c00135b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135b9:	e8 bf 42 ff ff       	call   c000787d <free>
c00135be:	89 34 24             	mov    DWORD PTR [esp],esi
c00135c1:	e8 dc 76 ff ff       	call   c000aca2 <File::close()>
c00135c6:	83 c4 10             	add    esp,0x10
c00135c9:	b0 01                	mov    al,0x1
c00135cb:	83 c4 3c             	add    esp,0x3c
c00135ce:	5b                   	pop    ebx
c00135cf:	5e                   	pop    esi
c00135d0:	5f                   	pop    edi
c00135d1:	5d                   	pop    ebp
c00135d2:	c3                   	ret    

c00135d3 <Thr::runtimeReferenceHelper()>:
c00135d3:	83 ec 18             	sub    esp,0x18
c00135d6:	68 d5 07 02 c0       	push   0xc00207d5
c00135db:	e8 2e 70 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00135e0:	fa                   	cli    
c00135e1:	83 c4 10             	add    esp,0x10
c00135e4:	eb fe                	jmp    c00135e4 <Thr::runtimeReferenceHelper()+0x11>

c00135e6 <Thr::getAddressOfKernelSymbol(char const*)>:
c00135e6:	57                   	push   edi
c00135e7:	56                   	push   esi
c00135e8:	53                   	push   ebx
c00135e9:	31 db                	xor    ebx,ebx
c00135eb:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c00135f1:	7e 3c                	jle    c001362f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00135f3:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c00135fa:	31 ff                	xor    edi,edi
c00135fc:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c0013603:	7e 27                	jle    c001362c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013605:	50                   	push   eax
c0013606:	50                   	push   eax
c0013607:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001360b:	8b 06                	mov    eax,DWORD PTR [esi]
c001360d:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c0013614:	50                   	push   eax
c0013615:	e8 b6 d0 fe ff       	call   c00006d0 <strcmp>
c001361a:	83 c4 10             	add    esp,0x10
c001361d:	85 c0                	test   eax,eax
c001361f:	75 05                	jne    c0013626 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013621:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013624:	eb 0b                	jmp    c0013631 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013626:	83 c6 10             	add    esi,0x10
c0013629:	47                   	inc    edi
c001362a:	eb d0                	jmp    c00135fc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001362c:	43                   	inc    ebx
c001362d:	eb bc                	jmp    c00135eb <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001362f:	31 c0                	xor    eax,eax
c0013631:	5b                   	pop    ebx
c0013632:	5e                   	pop    esi
c0013633:	5f                   	pop    edi
c0013634:	c3                   	ret    

c0013635 <Thr::loadKernelSymbolTable(char const*)>:
c0013635:	55                   	push   ebp
c0013636:	57                   	push   edi
c0013637:	56                   	push   esi
c0013638:	53                   	push   ebx
c0013639:	83 ec 68             	sub    esp,0x68
c001363c:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c0013642:	68 14 01 00 00       	push   0x114
c0013647:	e8 21 42 ff ff       	call   c000786d <malloc>
c001364c:	83 c4 0c             	add    esp,0xc
c001364f:	89 c3                	mov    ebx,eax
c0013651:	56                   	push   esi
c0013652:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013656:	50                   	push   eax
c0013657:	e8 28 75 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001365c:	5e                   	pop    esi
c001365d:	5f                   	pop    edi
c001365e:	6a 01                	push   0x1
c0013660:	53                   	push   ebx
c0013661:	e8 de 75 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0013666:	83 c4 10             	add    esp,0x10
c0013669:	85 c0                	test   eax,eax
c001366b:	74 0a                	je     c0013677 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001366d:	83 ec 0c             	sub    esp,0xc
c0013670:	68 f7 07 02 c0       	push   0xc00207f7
c0013675:	eb 34                	jmp    c00136ab <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013677:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001367f:	83 ec 0c             	sub    esp,0xc
c0013682:	6a 34                	push   0x34
c0013684:	e8 e4 41 ff ff       	call   c000786d <malloc>
c0013689:	59                   	pop    ecx
c001368a:	89 c7                	mov    edi,eax
c001368c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013692:	56                   	push   esi
c0013693:	57                   	push   edi
c0013694:	6a 00                	push   0x0
c0013696:	6a 34                	push   0x34
c0013698:	53                   	push   ebx
c0013699:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001369c:	83 c4 20             	add    esp,0x20
c001369f:	85 c0                	test   eax,eax
c00136a1:	74 17                	je     c00136ba <Thr::loadKernelSymbolTable(char const*)+0x85>
c00136a3:	83 ec 0c             	sub    esp,0xc
c00136a6:	68 0e 08 02 c0       	push   0xc002080e
c00136ab:	e8 1f cd ff ff       	call   c00103cf <KePanic(char const*)>
c00136b0:	83 c4 10             	add    esp,0x10
c00136b3:	31 c0                	xor    eax,eax
c00136b5:	e9 31 02 00 00       	jmp    c00138eb <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00136ba:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00136c0:	75 e1                	jne    c00136a3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00136c2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00136c5:	85 c0                	test   eax,eax
c00136c7:	74 da                	je     c00136a3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00136c9:	52                   	push   edx
c00136ca:	31 d2                	xor    edx,edx
c00136cc:	52                   	push   edx
c00136cd:	50                   	push   eax
c00136ce:	53                   	push   ebx
c00136cf:	e8 2e 76 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00136d4:	83 c4 10             	add    esp,0x10
c00136d7:	85 c0                	test   eax,eax
c00136d9:	75 c8                	jne    c00136a3 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00136db:	83 ec 0c             	sub    esp,0xc
c00136de:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00136e2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00136e6:	31 ed                	xor    ebp,ebp
c00136e8:	0f af c2             	imul   eax,edx
c00136eb:	50                   	push   eax
c00136ec:	e8 7c 41 ff ff       	call   c000786d <malloc>
c00136f1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00136f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00136f7:	89 34 24             	mov    DWORD PTR [esp],esi
c00136fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136fe:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013702:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013706:	0f af c2             	imul   eax,edx
c0013709:	99                   	cdq    
c001370a:	52                   	push   edx
c001370b:	50                   	push   eax
c001370c:	53                   	push   ebx
c001370d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013710:	83 c4 20             	add    esp,0x20
c0013713:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001371b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013723:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001372b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013733:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013737:	0f 86 aa 00 00 00    	jbe    c00137e7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001373d:	0f b7 f5             	movzx  esi,bp
c0013740:	6b f6 28             	imul   esi,esi,0x28
c0013743:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013747:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001374a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001374e:	50                   	push   eax
c001374f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013753:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013757:	8b 16                	mov    edx,DWORD PTR [esi]
c0013759:	6b c0 28             	imul   eax,eax,0x28
c001375c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013760:	89 d0                	mov    eax,edx
c0013762:	31 d2                	xor    edx,edx
c0013764:	52                   	push   edx
c0013765:	50                   	push   eax
c0013766:	53                   	push   ebx
c0013767:	e8 96 75 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c001376c:	83 c4 0c             	add    esp,0xc
c001376f:	6a 20                	push   0x20
c0013771:	6a 00                	push   0x0
c0013773:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013777:	52                   	push   edx
c0013778:	e8 43 cd fe ff       	call   c00004c0 <memset>
c001377d:	58                   	pop    eax
c001377e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013780:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013784:	51                   	push   ecx
c0013785:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013789:	52                   	push   edx
c001378a:	6a 00                	push   0x0
c001378c:	6a 1f                	push   0x1f
c001378e:	53                   	push   ebx
c001378f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013792:	83 c4 18             	add    esp,0x18
c0013795:	68 25 08 02 c0       	push   0xc0020825
c001379a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001379e:	52                   	push   edx
c001379f:	e8 2c cf fe ff       	call   c00006d0 <strcmp>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	85 c0                	test   eax,eax
c00137a9:	75 0f                	jne    c00137ba <Thr::loadKernelSymbolTable(char const*)+0x185>
c00137ab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00137ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00137b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ba:	50                   	push   eax
c00137bb:	50                   	push   eax
c00137bc:	68 2d 08 02 c0       	push   0xc002082d
c00137c1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00137c5:	50                   	push   eax
c00137c6:	e8 05 cf fe ff       	call   c00006d0 <strcmp>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	85 c0                	test   eax,eax
c00137d0:	75 0f                	jne    c00137e1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00137d2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00137d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00137d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137e1:	45                   	inc    ebp
c00137e2:	e9 4c ff ff ff       	jmp    c0013733 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00137e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00137ec:	75 10                	jne    c00137fe <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	68 35 08 02 c0       	push   0xc0020835
c00137f6:	e8 d4 cb ff ff       	call   c00103cf <KePanic(char const*)>
c00137fb:	83 c4 10             	add    esp,0x10
c00137fe:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013803:	75 10                	jne    c0013815 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013805:	83 ec 0c             	sub    esp,0xc
c0013808:	68 35 08 02 c0       	push   0xc0020835
c001380d:	e8 bd cb ff ff       	call   c00103cf <KePanic(char const*)>
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	31 d2                	xor    edx,edx
c0013817:	50                   	push   eax
c0013818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381c:	52                   	push   edx
c001381d:	50                   	push   eax
c001381e:	53                   	push   ebx
c001381f:	e8 de 74 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013824:	5a                   	pop    edx
c0013825:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013829:	e8 3f 40 ff ff       	call   c000786d <malloc>
c001382e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013832:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013836:	31 c9                	xor    ecx,ecx
c0013838:	5e                   	pop    esi
c0013839:	8b 03                	mov    eax,DWORD PTR [ebx]
c001383b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001383f:	55                   	push   ebp
c0013840:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013844:	51                   	push   ecx
c0013845:	52                   	push   edx
c0013846:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001384a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001384e:	53                   	push   ebx
c001384f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013852:	83 c4 14             	add    esp,0x14
c0013855:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013859:	e8 0f 40 ff ff       	call   c000786d <malloc>
c001385e:	89 c6                	mov    esi,eax
c0013860:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013862:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013865:	56                   	push   esi
c0013866:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001386a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001386e:	51                   	push   ecx
c001386f:	52                   	push   edx
c0013870:	53                   	push   ebx
c0013871:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013874:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013878:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c001387e:	83 c4 1c             	add    esp,0x1c
c0013881:	c1 e8 04             	shr    eax,0x4
c0013884:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c001388b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001388f:	31 d2                	xor    edx,edx
c0013891:	52                   	push   edx
c0013892:	50                   	push   eax
c0013893:	53                   	push   ebx
c0013894:	e8 69 74 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013899:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001389b:	31 d2                	xor    edx,edx
c001389d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00138a0:	56                   	push   esi
c00138a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138a5:	52                   	push   edx
c00138a6:	50                   	push   eax
c00138a7:	53                   	push   ebx
c00138a8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00138ab:	83 c4 14             	add    esp,0x14
c00138ae:	53                   	push   ebx
c00138af:	e8 ee 73 ff ff       	call   c000aca2 <File::close()>
c00138b4:	5d                   	pop    ebp
c00138b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138b9:	e8 bf 3f ff ff       	call   c000787d <free>
c00138be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00138c1:	e8 b7 3f ff ff       	call   c000787d <free>
c00138c6:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c00138cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00138cf:	8d 50 01             	lea    edx,[eax+0x1]
c00138d2:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c00138d9:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c00138e0:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c00138e6:	83 c4 10             	add    esp,0x10
c00138e9:	b0 01                	mov    al,0x1
c00138eb:	83 c4 5c             	add    esp,0x5c
c00138ee:	5b                   	pop    ebx
c00138ef:	5e                   	pop    esi
c00138f0:	5f                   	pop    edi
c00138f1:	5d                   	pop    ebp
c00138f2:	c3                   	ret    

c00138f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00138f3:	55                   	push   ebp
c00138f4:	57                   	push   edi
c00138f5:	56                   	push   esi
c00138f6:	53                   	push   ebx
c00138f7:	81 ec 68 03 00 00    	sub    esp,0x368
c00138fd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013904:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c001390a:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001390e:	68 14 01 00 00       	push   0x114
c0013913:	e8 55 3f ff ff       	call   c000786d <malloc>
c0013918:	83 c4 0c             	add    esp,0xc
c001391b:	89 c5                	mov    ebp,eax
c001391d:	53                   	push   ebx
c001391e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013925:	50                   	push   eax
c0013926:	e8 59 72 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c001392b:	5e                   	pop    esi
c001392c:	5f                   	pop    edi
c001392d:	6a 01                	push   0x1
c001392f:	55                   	push   ebp
c0013930:	e8 0f 73 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	85 c0                	test   eax,eax
c001393a:	0f 85 a7 06 00 00    	jne    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013940:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	6a 34                	push   0x34
c001394d:	e8 1b 3f ff ff       	call   c000786d <malloc>
c0013952:	5b                   	pop    ebx
c0013953:	89 c7                	mov    edi,eax
c0013955:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013959:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001395c:	53                   	push   ebx
c001395d:	57                   	push   edi
c001395e:	6a 00                	push   0x0
c0013960:	6a 34                	push   0x34
c0013962:	55                   	push   ebp
c0013963:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013966:	83 c4 20             	add    esp,0x20
c0013969:	85 c0                	test   eax,eax
c001396b:	0f 85 76 06 00 00    	jne    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013971:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013977:	0f 85 6a 06 00 00    	jne    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001397d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013980:	85 c0                	test   eax,eax
c0013982:	0f 84 5f 06 00 00    	je     c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013988:	31 d2                	xor    edx,edx
c001398a:	51                   	push   ecx
c001398b:	52                   	push   edx
c001398c:	50                   	push   eax
c001398d:	55                   	push   ebp
c001398e:	e8 6f 73 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013993:	83 c4 10             	add    esp,0x10
c0013996:	85 c0                	test   eax,eax
c0013998:	0f 85 49 06 00 00    	jne    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001399e:	83 ec 0c             	sub    esp,0xc
c00139a1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00139a4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00139a8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00139ac:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139b0:	0f af c2             	imul   eax,edx
c00139b3:	50                   	push   eax
c00139b4:	e8 b4 3e ff ff       	call   c000786d <malloc>
c00139b9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139c7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00139cb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139cf:	0f af c2             	imul   eax,edx
c00139d2:	99                   	cdq    
c00139d3:	52                   	push   edx
c00139d4:	50                   	push   eax
c00139d5:	55                   	push   ebp
c00139d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139d9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00139dc:	83 c4 20             	add    esp,0x20
c00139df:	85 c0                	test   eax,eax
c00139e1:	0f 84 00 06 00 00    	je     c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00139e7:	52                   	push   edx
c00139e8:	31 d2                	xor    edx,edx
c00139ea:	52                   	push   edx
c00139eb:	50                   	push   eax
c00139ec:	55                   	push   ebp
c00139ed:	e8 10 73 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c00139f2:	83 c4 10             	add    esp,0x10
c00139f5:	85 c0                	test   eax,eax
c00139f7:	0f 85 ea 05 00 00    	jne    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00139fd:	83 ec 0c             	sub    esp,0xc
c0013a00:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013a04:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013a08:	31 f6                	xor    esi,esi
c0013a0a:	0f af c2             	imul   eax,edx
c0013a0d:	50                   	push   eax
c0013a0e:	e8 5a 3e ff ff       	call   c000786d <malloc>
c0013a13:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013a16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a21:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013a25:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013a29:	0f af c2             	imul   eax,edx
c0013a2c:	99                   	cdq    
c0013a2d:	52                   	push   edx
c0013a2e:	50                   	push   eax
c0013a2f:	55                   	push   ebp
c0013a30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a33:	83 c4 20             	add    esp,0x20
c0013a36:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013a3a:	0f 86 8a 00 00 00    	jbe    c0013aca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013a40:	0f b7 de             	movzx  ebx,si
c0013a43:	c1 e3 05             	shl    ebx,0x5
c0013a46:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013a4a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013a4d:	75 75                	jne    c0013ac4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013a4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013a52:	31 d2                	xor    edx,edx
c0013a54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013a5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a5f:	50                   	push   eax
c0013a60:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a63:	52                   	push   edx
c0013a64:	50                   	push   eax
c0013a65:	55                   	push   ebp
c0013a66:	e8 97 72 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013a6b:	83 c4 10             	add    esp,0x10
c0013a6e:	85 c0                	test   eax,eax
c0013a70:	0f 85 71 05 00 00    	jne    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013a76:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013a7d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013a80:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0013a84:	31 d2                	xor    edx,edx
c0013a86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013a8a:	83 ec 0c             	sub    esp,0xc
c0013a8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013a91:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013a98:	50                   	push   eax
c0013a99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013aa1:	52                   	push   edx
c0013aa2:	50                   	push   eax
c0013aa3:	55                   	push   ebp
c0013aa4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013aa7:	83 c4 1c             	add    esp,0x1c
c0013aaa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013aad:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013ab0:	50                   	push   eax
c0013ab1:	6a 00                	push   0x0
c0013ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013abb:	50                   	push   eax
c0013abc:	e8 ff c9 fe ff       	call   c00004c0 <memset>
c0013ac1:	83 c4 10             	add    esp,0x10
c0013ac4:	46                   	inc    esi
c0013ac5:	e9 6c ff ff ff       	jmp    c0013a36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013aca:	53                   	push   ebx
c0013acb:	31 db                	xor    ebx,ebx
c0013acd:	68 00 01 00 00       	push   0x100
c0013ad2:	6a 00                	push   0x0
c0013ad4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013ad8:	50                   	push   eax
c0013ad9:	e8 e2 c9 fe ff       	call   c00004c0 <memset>
c0013ade:	83 c4 0c             	add    esp,0xc
c0013ae1:	68 00 01 00 00       	push   0x100
c0013ae6:	6a 00                	push   0x0
c0013ae8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013aef:	50                   	push   eax
c0013af0:	e8 cb c9 fe ff       	call   c00004c0 <memset>
c0013af5:	83 c4 10             	add    esp,0x10
c0013af8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013b00:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013b08:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013b10:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013b18:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013b20:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0013b24:	0f 86 30 01 00 00    	jbe    c0013c5a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013b2a:	0f b7 f3             	movzx  esi,bx
c0013b2d:	6b f6 28             	imul   esi,esi,0x28
c0013b30:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013b34:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b3b:	52                   	push   edx
c0013b3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b40:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013b44:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b46:	6b d2 28             	imul   edx,edx,0x28
c0013b49:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013b4d:	31 d2                	xor    edx,edx
c0013b4f:	52                   	push   edx
c0013b50:	50                   	push   eax
c0013b51:	55                   	push   ebp
c0013b52:	e8 ab 71 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013b57:	83 c4 0c             	add    esp,0xc
c0013b5a:	6a 20                	push   0x20
c0013b5c:	6a 00                	push   0x0
c0013b5e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013b65:	51                   	push   ecx
c0013b66:	e8 55 c9 fe ff       	call   c00004c0 <memset>
c0013b6b:	59                   	pop    ecx
c0013b6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013b6f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013b73:	52                   	push   edx
c0013b74:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013b7b:	51                   	push   ecx
c0013b7c:	6a 00                	push   0x0
c0013b7e:	6a 1f                	push   0x1f
c0013b80:	55                   	push   ebp
c0013b81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b84:	83 c4 1c             	add    esp,0x1c
c0013b87:	6a 09                	push   0x9
c0013b89:	68 4f 08 02 c0       	push   0xc002084f
c0013b8e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013b95:	51                   	push   ecx
c0013b96:	e8 e5 c7 fe ff       	call   c0000380 <memcmp>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	85 c0                	test   eax,eax
c0013ba0:	75 21                	jne    c0013bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013ba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ba6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013baa:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013bae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013bb2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bb5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013bbc:	89 d0                	mov    eax,edx
c0013bbe:	40                   	inc    eax
c0013bbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bc3:	50                   	push   eax
c0013bc4:	6a 09                	push   0x9
c0013bc6:	68 59 08 02 c0       	push   0xc0020859
c0013bcb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013bd2:	50                   	push   eax
c0013bd3:	e8 a8 c7 fe ff       	call   c0000380 <memcmp>
c0013bd8:	83 c4 10             	add    esp,0x10
c0013bdb:	85 c0                	test   eax,eax
c0013bdd:	75 21                	jne    c0013c00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013be3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013be7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013beb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013bef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013bf2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013bf9:	89 d0                	mov    eax,edx
c0013bfb:	40                   	inc    eax
c0013bfc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c00:	50                   	push   eax
c0013c01:	50                   	push   eax
c0013c02:	68 25 08 02 c0       	push   0xc0020825
c0013c07:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c0e:	50                   	push   eax
c0013c0f:	e8 bc ca fe ff       	call   c00006d0 <strcmp>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	85 c0                	test   eax,eax
c0013c19:	75 0f                	jne    c0013c2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013c1b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c2a:	50                   	push   eax
c0013c2b:	50                   	push   eax
c0013c2c:	68 2d 08 02 c0       	push   0xc002082d
c0013c31:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c38:	50                   	push   eax
c0013c39:	e8 92 ca fe ff       	call   c00006d0 <strcmp>
c0013c3e:	83 c4 10             	add    esp,0x10
c0013c41:	85 c0                	test   eax,eax
c0013c43:	75 0f                	jne    c0013c54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013c45:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c48:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013c4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c50:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c54:	43                   	inc    ebx
c0013c55:	e9 c6 fe ff ff       	jmp    c0013b20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013c5a:	31 d2                	xor    edx,edx
c0013c5c:	50                   	push   eax
c0013c5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c61:	52                   	push   edx
c0013c62:	50                   	push   eax
c0013c63:	55                   	push   ebp
c0013c64:	e8 99 70 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013c69:	58                   	pop    eax
c0013c6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c6e:	e8 fa 3b ff ff       	call   c000786d <malloc>
c0013c73:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013c76:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013c7a:	31 d2                	xor    edx,edx
c0013c7c:	58                   	pop    eax
c0013c7d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013c81:	53                   	push   ebx
c0013c82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013c86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c8a:	52                   	push   edx
c0013c8b:	50                   	push   eax
c0013c8c:	55                   	push   ebp
c0013c8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c90:	83 c4 14             	add    esp,0x14
c0013c93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c97:	e8 d1 3b ff ff       	call   c000786d <malloc>
c0013c9c:	31 d2                	xor    edx,edx
c0013c9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013ca2:	83 c4 0c             	add    esp,0xc
c0013ca5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ca9:	52                   	push   edx
c0013caa:	50                   	push   eax
c0013cab:	55                   	push   ebp
c0013cac:	e8 51 70 ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013cb1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013cb4:	31 d2                	xor    edx,edx
c0013cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013cbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cc1:	52                   	push   edx
c0013cc2:	50                   	push   eax
c0013cc3:	55                   	push   ebp
c0013cc4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cc7:	83 c4 20             	add    esp,0x20
c0013cca:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013cd2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013cd6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013cda:	0f 84 0b 03 00 00    	je     c0013feb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0013ce0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013ce7:	31 d2                	xor    edx,edx
c0013ce9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ced:	c1 e8 03             	shr    eax,0x3
c0013cf0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013cf4:	51                   	push   ecx
c0013cf5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cf9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013cfd:	52                   	push   edx
c0013cfe:	50                   	push   eax
c0013cff:	55                   	push   ebp
c0013d00:	e8 fd 6f ff ff       	call   c000ad02 <File::seek(unsigned long long)>
c0013d05:	5b                   	pop    ebx
c0013d06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d0a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013d11:	e8 57 3b ff ff       	call   c000786d <malloc>
c0013d16:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013d19:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d1d:	31 d2                	xor    edx,edx
c0013d1f:	5e                   	pop    esi
c0013d20:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013d24:	50                   	push   eax
c0013d25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d2d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013d34:	52                   	push   edx
c0013d35:	50                   	push   eax
c0013d36:	55                   	push   ebp
c0013d37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d3a:	83 c4 20             	add    esp,0x20
c0013d3d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013d45:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013d49:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0013d4d:	0f 8d 7c 02 00 00    	jge    c0013fcf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0013d53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013d57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d5b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013d60:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013d63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d6b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013d6f:	89 d8                	mov    eax,ebx
c0013d71:	c1 e8 08             	shr    eax,0x8
c0013d74:	89 c6                	mov    esi,eax
c0013d76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013d7a:	c1 e6 04             	shl    esi,0x4
c0013d7d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013d81:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013d84:	85 d2                	test   edx,edx
c0013d86:	0f 85 bf 00 00 00    	jne    c0013e4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013d8c:	83 ec 0c             	sub    esp,0xc
c0013d8f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d93:	03 06                	add    eax,DWORD PTR [esi]
c0013d95:	50                   	push   eax
c0013d96:	e8 4b f8 ff ff       	call   c00135e6 <Thr::getAddressOfKernelSymbol(char const*)>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	89 c2                	mov    edx,eax
c0013da0:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013da5:	85 c0                	test   eax,eax
c0013da7:	0f 85 9e 00 00 00    	jne    c0013e4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013dad:	83 ec 0c             	sub    esp,0xc
c0013db0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013db4:	03 06                	add    eax,DWORD PTR [esi]
c0013db6:	50                   	push   eax
c0013db7:	e8 00 c8 ff ff       	call   c00105bc <KeResolveCompatibilitySymbol(char*)>
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	89 c2                	mov    edx,eax
c0013dc1:	85 c0                	test   eax,eax
c0013dc3:	0f 85 82 00 00 00    	jne    c0013e4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013dc9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013dcd:	50                   	push   eax
c0013dce:	50                   	push   eax
c0013dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dd3:	03 06                	add    eax,DWORD PTR [esi]
c0013dd5:	50                   	push   eax
c0013dd6:	68 63 08 02 c0       	push   0xc0020863
c0013ddb:	e8 2e 68 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013de0:	58                   	pop    eax
c0013de1:	5a                   	pop    edx
c0013de2:	68 7d 08 02 c0       	push   0xc002087d
c0013de7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013dee:	50                   	push   eax
c0013def:	e8 fc c7 fe ff       	call   c00005f0 <strcpy>
c0013df4:	59                   	pop    ecx
c0013df5:	58                   	pop    eax
c0013df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfa:	03 06                	add    eax,DWORD PTR [esi]
c0013dfc:	50                   	push   eax
c0013dfd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e04:	50                   	push   eax
c0013e05:	e8 a6 c9 fe ff       	call   c00007b0 <strcat>
c0013e0a:	58                   	pop    eax
c0013e0b:	5a                   	pop    edx
c0013e0c:	68 13 09 02 c0       	push   0xc0020913
c0013e11:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e18:	50                   	push   eax
c0013e19:	e8 92 c9 fe ff       	call   c00007b0 <strcat>
c0013e1e:	83 c4 10             	add    esp,0x10
c0013e21:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e26:	0f 84 5d 01 00 00    	je     c0013f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013e2c:	83 ec 0c             	sub    esp,0xc
c0013e2f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e36:	50                   	push   eax
c0013e37:	e8 93 c5 ff ff       	call   c00103cf <KePanic(char const*)>
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013e43:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013e47:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013e4b:	80 fb 01             	cmp    bl,0x1
c0013e4e:	0f 85 88 00 00 00    	jne    c0013edc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013e54:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013e5b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013e5f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013e63:	01 ce                	add    esi,ecx
c0013e65:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013e6b:	0f 94 c0             	sete   al
c0013e6e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013e74:	0f 94 c3             	sete   bl
c0013e77:	09 c3                	or     ebx,eax
c0013e79:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e7b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013e80:	74 41                	je     c0013ec3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0013e82:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013e85:	84 db                	test   bl,bl
c0013e87:	75 15                	jne    c0013e9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0013e89:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013e8d:	66 83 f8 0c          	cmp    ax,0xc
c0013e91:	76 05                	jbe    c0013e98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0013e93:	b8 0c 00 00 00       	mov    eax,0xc
c0013e98:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013e9c:	76 37                	jbe    c0013ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013e9e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0013ea2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ea7:	0f 84 dc 00 00 00    	je     c0013f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	68 94 08 02 c0       	push   0xc0020894
c0013eb5:	e8 15 c5 ff ff       	call   c00103cf <KePanic(char const*)>
c0013eba:	83 c4 10             	add    esp,0x10
c0013ebd:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013ec1:	eb 12                	jmp    c0013ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013ec3:	01 c1                	add    ecx,eax
c0013ec5:	84 db                	test   bl,bl
c0013ec7:	75 0c                	jne    c0013ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013ec9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ecd:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013ed1:	77 02                	ja     c0013ed5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013ed3:	01 d1                	add    ecx,edx
c0013ed5:	89 0e                	mov    DWORD PTR [esi],ecx
c0013ed7:	e9 ea 00 00 00       	jmp    c0013fc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013edc:	80 fb 02             	cmp    bl,0x2
c0013edf:	75 7c                	jne    c0013f5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013ee1:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013ee8:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013eec:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013ef0:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013ef6:	74 20                	je     c0013f18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013ef8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013efe:	74 18                	je     c0013f18 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013f00:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f04:	b9 0a 00 00 00       	mov    ecx,0xa
c0013f09:	66 83 f8 0e          	cmp    ax,0xe
c0013f0d:	77 03                	ja     c0013f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013f0f:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013f12:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013f16:	76 1f                	jbe    c0013f37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013f18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013f1c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013f21:	74 66                	je     c0013f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013f23:	83 ec 0c             	sub    esp,0xc
c0013f26:	68 b0 08 02 c0       	push   0xc00208b0
c0013f2b:	e8 9f c4 ff ff       	call   c00103cf <KePanic(char const*)>
c0013f30:	83 c4 10             	add    esp,0x10
c0013f33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f37:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f39:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013f3e:	74 13                	je     c0013f53 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013f40:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013f44:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013f4b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013f4f:	01 c8                	add    eax,ecx
c0013f51:	eb 04                	jmp    c0013f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013f53:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013f57:	01 c2                	add    edx,eax
c0013f59:	89 16                	mov    DWORD PTR [esi],edx
c0013f5b:	eb 69                	jmp    c0013fc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013f5d:	0f b6 db             	movzx  ebx,bl
c0013f60:	50                   	push   eax
c0013f61:	50                   	push   eax
c0013f62:	53                   	push   ebx
c0013f63:	68 cc 08 02 c0       	push   0xc00208cc
c0013f68:	e8 a1 66 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0013f6d:	83 c4 10             	add    esp,0x10
c0013f70:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013f75:	74 12                	je     c0013f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013f77:	83 ec 0c             	sub    esp,0xc
c0013f7a:	68 d7 08 02 c0       	push   0xc00208d7
c0013f7f:	e8 4b c4 ff ff       	call   c00103cf <KePanic(char const*)>
c0013f84:	83 c4 10             	add    esp,0x10
c0013f87:	eb 3d                	jmp    c0013fc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013f89:	83 ec 0c             	sub    esp,0xc
c0013f8c:	55                   	push   ebp
c0013f8d:	e8 10 6d ff ff       	call   c000aca2 <File::close()>
c0013f92:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013f95:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013f98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f9b:	59                   	pop    ecx
c0013f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fa0:	e8 d8 38 ff ff       	call   c000787d <free>
c0013fa5:	5b                   	pop    ebx
c0013fa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013faa:	e8 ce 38 ff ff       	call   c000787d <free>
c0013faf:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013fb2:	e8 c6 38 ff ff       	call   c000787d <free>
c0013fb7:	5e                   	pop    esi
c0013fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fbc:	e8 bc 38 ff ff       	call   c000787d <free>
c0013fc1:	83 c4 10             	add    esp,0x10
c0013fc4:	eb 21                	jmp    c0013fe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013fc6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013fca:	e9 76 fd ff ff       	jmp    c0013d45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013fcf:	83 ec 0c             	sub    esp,0xc
c0013fd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013fd6:	e8 a2 38 ff ff       	call   c000787d <free>
c0013fdb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	e9 eb fc ff ff       	jmp    c0013cd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013fe7:	31 c0                	xor    eax,eax
c0013fe9:	eb 33                	jmp    c001401e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013feb:	83 ec 0c             	sub    esp,0xc
c0013fee:	55                   	push   ebp
c0013fef:	e8 ae 6c ff ff       	call   c000aca2 <File::close()>
c0013ff4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ff7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ffa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ffd:	58                   	pop    eax
c0013ffe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014002:	e8 76 38 ff ff       	call   c000787d <free>
c0014007:	89 3c 24             	mov    DWORD PTR [esp],edi
c001400a:	e8 6e 38 ff ff       	call   c000787d <free>
c001400f:	5a                   	pop    edx
c0014010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014014:	e8 64 38 ff ff       	call   c000787d <free>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	b0 01                	mov    al,0x1
c001401e:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014024:	5b                   	pop    ebx
c0014025:	5e                   	pop    esi
c0014026:	5f                   	pop    edi
c0014027:	5d                   	pop    ebp
c0014028:	c3                   	ret    

c0014029 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014029:	56                   	push   esi
c001402a:	31 d2                	xor    edx,edx
c001402c:	53                   	push   ebx
c001402d:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0014033:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014037:	39 d3                	cmp    ebx,edx
c0014039:	7e 1b                	jle    c0014056 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001403b:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0014042:	39 c8                	cmp    eax,ecx
c0014044:	77 0d                	ja     c0014053 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014046:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c001404d:	01 c6                	add    esi,eax
c001404f:	39 ce                	cmp    esi,ecx
c0014051:	77 05                	ja     c0014058 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014053:	42                   	inc    edx
c0014054:	eb e1                	jmp    c0014037 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014056:	31 c0                	xor    eax,eax
c0014058:	5b                   	pop    ebx
c0014059:	5e                   	pop    esi
c001405a:	c3                   	ret    

c001405b <Thr::getDriverNameFromAddress(unsigned long)>:
c001405b:	53                   	push   ebx
c001405c:	31 c0                	xor    eax,eax
c001405e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014062:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0014068:	39 c3                	cmp    ebx,eax
c001406a:	7e 22                	jle    c001408e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001406c:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0014073:	39 ca                	cmp    edx,ecx
c0014075:	77 14                	ja     c001408b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014077:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c001407e:	39 ca                	cmp    edx,ecx
c0014080:	76 09                	jbe    c001408b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014082:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0014089:	eb 05                	jmp    c0014090 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001408b:	40                   	inc    eax
c001408c:	eb da                	jmp    c0014068 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001408e:	31 c0                	xor    eax,eax
c0014090:	5b                   	pop    ebx
c0014091:	c3                   	ret    

c0014092 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0014092:	53                   	push   ebx
c0014093:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014097:	53                   	push   ebx
c0014098:	e8 8c ff ff ff       	call   c0014029 <Thr::getDriverBaseFromAddress(unsigned long)>
c001409d:	5a                   	pop    edx
c001409e:	31 d2                	xor    edx,edx
c00140a0:	85 c0                	test   eax,eax
c00140a2:	74 04                	je     c00140a8 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00140a4:	89 da                	mov    edx,ebx
c00140a6:	29 c2                	sub    edx,eax
c00140a8:	89 d0                	mov    eax,edx
c00140aa:	5b                   	pop    ebx
c00140ab:	c3                   	ret    

c00140ac <Thr::loadDLL(char const*, bool)>:
c00140ac:	55                   	push   ebp
c00140ad:	57                   	push   edi
c00140ae:	56                   	push   esi
c00140af:	53                   	push   ebx
c00140b0:	81 ec 34 01 00 00    	sub    esp,0x134
c00140b6:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00140bd:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00140c4:	56                   	push   esi
c00140c5:	68 ef 08 02 c0       	push   0xc00208ef
c00140ca:	e8 3f 65 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00140cf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00140d6:	e8 92 37 ff ff       	call   c000786d <malloc>
c00140db:	83 c4 0c             	add    esp,0xc
c00140de:	89 c3                	mov    ebx,eax
c00140e0:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00140e6:	56                   	push   esi
c00140e7:	50                   	push   eax
c00140e8:	e8 97 6a ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c00140ed:	83 c4 10             	add    esp,0x10
c00140f0:	85 db                	test   ebx,ebx
c00140f2:	75 3c                	jne    c0014130 <Thr::loadDLL(char const*, bool)+0x84>
c00140f4:	89 f8                	mov    eax,edi
c00140f6:	84 c0                	test   al,al
c00140f8:	0f 84 d2 01 00 00    	je     c00142d0 <Thr::loadDLL(char const*, bool)+0x224>
c00140fe:	55                   	push   ebp
c00140ff:	55                   	push   ebp
c0014100:	68 00 09 02 c0       	push   0xc0020900
c0014105:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014109:	55                   	push   ebp
c001410a:	e8 e1 c4 fe ff       	call   c00005f0 <strcpy>
c001410f:	58                   	pop    eax
c0014110:	5a                   	pop    edx
c0014111:	56                   	push   esi
c0014112:	55                   	push   ebp
c0014113:	e8 98 c6 fe ff       	call   c00007b0 <strcat>
c0014118:	59                   	pop    ecx
c0014119:	58                   	pop    eax
c001411a:	68 13 09 02 c0       	push   0xc0020913
c001411f:	55                   	push   ebp
c0014120:	e8 8b c6 fe ff       	call   c00007b0 <strcat>
c0014125:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014128:	e8 a2 c2 ff ff       	call   c00103cf <KePanic(char const*)>
c001412d:	83 c4 10             	add    esp,0x10
c0014130:	51                   	push   ecx
c0014131:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014135:	50                   	push   eax
c0014136:	8d 44 24 20          	lea    eax,[esp+0x20]
c001413a:	50                   	push   eax
c001413b:	53                   	push   ebx
c001413c:	e8 af 6d ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0014141:	83 c4 10             	add    esp,0x10
c0014144:	85 db                	test   ebx,ebx
c0014146:	74 0c                	je     c0014154 <Thr::loadDLL(char const*, bool)+0xa8>
c0014148:	83 ec 0c             	sub    esp,0xc
c001414b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001414d:	53                   	push   ebx
c001414e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014151:	83 c4 10             	add    esp,0x10
c0014154:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014159:	75 0a                	jne    c0014165 <Thr::loadDLL(char const*, bool)+0xb9>
c001415b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001415f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014163:	75 3c                	jne    c00141a1 <Thr::loadDLL(char const*, bool)+0xf5>
c0014165:	89 f8                	mov    eax,edi
c0014167:	84 c0                	test   al,al
c0014169:	0f 84 49 01 00 00    	je     c00142b8 <Thr::loadDLL(char const*, bool)+0x20c>
c001416f:	51                   	push   ecx
c0014170:	51                   	push   ecx
c0014171:	68 00 09 02 c0       	push   0xc0020900
c0014176:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001417a:	53                   	push   ebx
c001417b:	e8 70 c4 fe ff       	call   c00005f0 <strcpy>
c0014180:	5d                   	pop    ebp
c0014181:	58                   	pop    eax
c0014182:	56                   	push   esi
c0014183:	53                   	push   ebx
c0014184:	e8 27 c6 fe ff       	call   c00007b0 <strcat>
c0014189:	58                   	pop    eax
c001418a:	5a                   	pop    edx
c001418b:	68 13 09 02 c0       	push   0xc0020913
c0014190:	53                   	push   ebx
c0014191:	e8 1a c6 fe ff       	call   c00007b0 <strcat>
c0014196:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014199:	e8 31 c2 ff ff       	call   c00103cf <KePanic(char const*)>
c001419e:	83 c4 10             	add    esp,0x10
c00141a1:	52                   	push   edx
c00141a2:	6a 03                	push   0x3
c00141a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00141ac:	05 ff 0f 00 00       	add    eax,0xfff
c00141b1:	83 d2 00             	adc    edx,0x0
c00141b4:	0f ac d0 0c          	shrd   eax,edx,0xc
c00141b8:	50                   	push   eax
c00141b9:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00141bf:	e8 54 59 ff ff       	call   c0009b18 <VAS::allocatePages(int, int)>
c00141c4:	59                   	pop    ecx
c00141c5:	89 c3                	mov    ebx,eax
c00141c7:	5d                   	pop    ebp
c00141c8:	50                   	push   eax
c00141c9:	68 92 f4 01 c0       	push   0xc001f492
c00141ce:	e8 3b 64 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00141d3:	89 34 24             	mov    DWORD PTR [esp],esi
c00141d6:	e8 55 c3 fe ff       	call   c0000530 <strlen>
c00141db:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c00141e1:	40                   	inc    eax
c00141e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00141e5:	e8 83 36 ff ff       	call   c000786d <malloc>
c00141ea:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c00141f1:	58                   	pop    eax
c00141f2:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c00141f7:	5a                   	pop    edx
c00141f8:	56                   	push   esi
c00141f9:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c0014200:	e8 eb c3 fe ff       	call   c00005f0 <strcpy>
c0014205:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c001420a:	8d 50 01             	lea    edx,[eax+0x1]
c001420d:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0014214:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c001421a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001421e:	83 c4 0c             	add    esp,0xc
c0014221:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0014228:	6a 01                	push   0x1
c001422a:	53                   	push   ebx
c001422b:	56                   	push   esi
c001422c:	e8 c2 f6 ff ff       	call   c00138f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014231:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014235:	83 c4 10             	add    esp,0x10
c0014238:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001423d:	0f 85 89 00 00 00    	jne    c00142cc <Thr::loadDLL(char const*, bool)+0x220>
c0014243:	89 f8                	mov    eax,edi
c0014245:	84 c0                	test   al,al
c0014247:	74 73                	je     c00142bc <Thr::loadDLL(char const*, bool)+0x210>
c0014249:	83 ec 0c             	sub    esp,0xc
c001424c:	68 15 09 02 c0       	push   0xc0020915
c0014251:	e8 79 c1 ff ff       	call   c00103cf <KePanic(char const*)>
c0014256:	83 c4 10             	add    esp,0x10
c0014259:	eb 61                	jmp    c00142bc <Thr::loadDLL(char const*, bool)+0x210>
c001425b:	50                   	push   eax
c001425c:	50                   	push   eax
c001425d:	89 e8                	mov    eax,ebp
c001425f:	c1 e0 0c             	shl    eax,0xc
c0014262:	01 d8                	add    eax,ebx
c0014264:	50                   	push   eax
c0014265:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001426b:	e8 b6 53 ff ff       	call   c0009626 <VAS::getPageTableEntry(unsigned long)>
c0014270:	83 c4 10             	add    esp,0x10
c0014273:	8b 00                	mov    eax,DWORD PTR [eax]
c0014275:	a8 60                	test   al,0x60
c0014277:	75 11                	jne    c001428a <Thr::loadDLL(char const*, bool)+0x1de>
c0014279:	83 ec 0c             	sub    esp,0xc
c001427c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014281:	50                   	push   eax
c0014282:	e8 60 38 ff ff       	call   c0007ae7 <Phys::freePage(unsigned long)>
c0014287:	83 c4 10             	add    esp,0x10
c001428a:	45                   	inc    ebp
c001428b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001428f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014293:	05 ff 0f 00 00       	add    eax,0xfff
c0014298:	bf 00 00 00 00       	mov    edi,0x0
c001429d:	83 d2 00             	adc    edx,0x0
c00142a0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00142a4:	c1 ea 0c             	shr    edx,0xc
c00142a7:	39 c5                	cmp    ebp,eax
c00142a9:	89 d1                	mov    ecx,edx
c00142ab:	89 f8                	mov    eax,edi
c00142ad:	19 c8                	sbb    eax,ecx
c00142af:	72 aa                	jb     c001425b <Thr::loadDLL(char const*, bool)+0x1af>
c00142b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00142b6:	75 18                	jne    c00142d0 <Thr::loadDLL(char const*, bool)+0x224>
c00142b8:	31 db                	xor    ebx,ebx
c00142ba:	eb 14                	jmp    c00142d0 <Thr::loadDLL(char const*, bool)+0x224>
c00142bc:	83 ec 0c             	sub    esp,0xc
c00142bf:	68 34 09 02 c0       	push   0xc0020934
c00142c4:	e8 06 c1 ff ff       	call   c00103cf <KePanic(char const*)>
c00142c9:	83 c4 10             	add    esp,0x10
c00142cc:	31 ed                	xor    ebp,ebp
c00142ce:	eb bb                	jmp    c001428b <Thr::loadDLL(char const*, bool)+0x1df>
c00142d0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00142d6:	89 d8                	mov    eax,ebx
c00142d8:	5b                   	pop    ebx
c00142d9:	5e                   	pop    esi
c00142da:	5f                   	pop    edi
c00142db:	5d                   	pop    ebp
c00142dc:	c3                   	ret    

c00142dd <Thr::executeDLL(unsigned long, void*)>:
c00142dd:	56                   	push   esi
c00142de:	53                   	push   ebx
c00142df:	52                   	push   edx
c00142e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142e8:	85 db                	test   ebx,ebx
c00142ea:	75 10                	jne    c00142fc <Thr::executeDLL(unsigned long, void*)+0x1f>
c00142ec:	83 ec 0c             	sub    esp,0xc
c00142ef:	68 50 09 02 c0       	push   0xc0020950
c00142f4:	e8 d6 c0 ff ff       	call   c00103cf <KePanic(char const*)>
c00142f9:	83 c4 10             	add    esp,0x10
c00142fc:	50                   	push   eax
c00142fd:	50                   	push   eax
c00142fe:	53                   	push   ebx
c00142ff:	68 7a 09 02 c0       	push   0xc002097a
c0014304:	e8 05 63 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014309:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001430d:	89 d8                	mov    eax,ebx
c001430f:	83 c4 14             	add    esp,0x14
c0014312:	5b                   	pop    ebx
c0014313:	5e                   	pop    esi
c0014314:	ff e0                	jmp    eax
c0014316:	66 90                	xchg   ax,ax

c0014318 <userModeEntryPoint(void*)>:
c0014318:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001431d:	48                   	dec    eax
c001431e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014323:	75 03                	jne    c0014328 <userModeEntryPoint(void*)+0x10>
c0014325:	fb                   	sti    
c0014326:	66 90                	xchg   ax,ax
c0014328:	fb                   	sti    
c0014329:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001432e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014331:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014337:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001433b:	e9 ff be fe ff       	jmp    c000023f <goToUsermode>

c0014340 <changeTSS>:
c0014340:	83 ec 14             	sub    esp,0x14
c0014343:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014348:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001434b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014350:	c1 e2 15             	shl    edx,0x15
c0014353:	29 d0                	sub    eax,edx
c0014355:	50                   	push   eax
c0014356:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001435b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014361:	05 7c 11 00 00       	add    eax,0x117c
c0014366:	50                   	push   eax
c0014367:	e8 38 49 ff ff       	call   c0008ca4 <TSS::setESP(unsigned long)>
c001436c:	83 c4 1c             	add    esp,0x1c
c001436f:	c3                   	ret    

c0014370 <switchToThread(ThreadControlBlock*)>:
c0014370:	57                   	push   edi
c0014371:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014376:	56                   	push   esi
c0014377:	85 c0                	test   eax,eax
c0014379:	53                   	push   ebx
c001437a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001437e:	0f 85 90 00 00 00    	jne    c0014414 <switchToThread(ThreadControlBlock*)+0xa4>
c0014384:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0014387:	80 fa ff             	cmp    dl,0xff
c001438a:	0f 84 80 00 00 00    	je     c0014410 <switchToThread(ThreadControlBlock*)+0xa0>
c0014390:	81 e2 ff 00 00 00    	and    edx,0xff
c0014396:	b8 00 04 00 00       	mov    eax,0x400
c001439b:	29 d0                	sub    eax,edx
c001439d:	d1 f8                	sar    eax,1
c001439f:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c00143a2:	66 90                	xchg   ax,ax
c00143a4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00143a7:	e8 80 26 00 00       	call   c0016a2c <HalQueryPerformanceCounter()>
c00143ac:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c00143b1:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c00143b7:	89 c6                	mov    esi,eax
c00143b9:	89 d7                	mov    edi,edx
c00143bb:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c00143c1:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c00143c6:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c00143cc:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c00143d2:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c00143d8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00143de:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c00143e4:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00143e7:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00143ea:	01 c6                	add    esi,eax
c00143ec:	11 d7                	adc    edi,edx
c00143ee:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00143f1:	83 ec 0c             	sub    esp,0xc
c00143f4:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00143f7:	53                   	push   ebx
c00143f8:	e8 7a be fe ff       	call   c0000277 <switchToThreadASM>
c00143fd:	0f 20 c0             	mov    eax,cr0
c0014400:	83 c8 08             	or     eax,0x8
c0014403:	0f 22 c0             	mov    cr0,eax
c0014406:	83 c4 10             	add    esp,0x10
c0014409:	5b                   	pop    ebx
c001440a:	5e                   	pop    esi
c001440b:	5f                   	pop    edi
c001440c:	c3                   	ret    
c001440d:	8d 76 00             	lea    esi,[esi+0x0]
c0014410:	31 c0                	xor    eax,eax
c0014412:	eb 90                	jmp    c00143a4 <switchToThread(ThreadControlBlock*)+0x34>
c0014414:	5b                   	pop    ebx
c0014415:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c001441f:	5e                   	pop    esi
c0014420:	5f                   	pop    edi
c0014421:	c3                   	ret    
c0014422:	66 90                	xchg   ax,ax

c0014424 <Process::addArgs(char**)>:
c0014424:	57                   	push   edi
c0014425:	56                   	push   esi
c0014426:	53                   	push   ebx
c0014427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001442b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001442f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014439:	85 ff                	test   edi,edi
c001443b:	74 43                	je     c0014480 <Process::addArgs(char**)+0x5c>
c001443d:	8b 07                	mov    eax,DWORD PTR [edi]
c001443f:	85 c0                	test   eax,eax
c0014441:	74 3d                	je     c0014480 <Process::addArgs(char**)+0x5c>
c0014443:	31 db                	xor    ebx,ebx
c0014445:	8d 76 00             	lea    esi,[esi+0x0]
c0014448:	83 ec 0c             	sub    esp,0xc
c001444b:	50                   	push   eax
c001444c:	e8 df c0 fe ff       	call   c0000530 <strlen>
c0014451:	40                   	inc    eax
c0014452:	89 04 24             	mov    DWORD PTR [esp],eax
c0014455:	e8 13 34 ff ff       	call   c000786d <malloc>
c001445a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014461:	5a                   	pop    edx
c0014462:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014465:	59                   	pop    ecx
c0014466:	43                   	inc    ebx
c0014467:	52                   	push   edx
c0014468:	50                   	push   eax
c0014469:	e8 82 c1 fe ff       	call   c00005f0 <strcpy>
c001446e:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014474:	83 c4 10             	add    esp,0x10
c0014477:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001447a:	85 c0                	test   eax,eax
c001447c:	75 ca                	jne    c0014448 <Process::addArgs(char**)+0x24>
c001447e:	66 90                	xchg   ax,ax
c0014480:	5b                   	pop    ebx
c0014481:	5e                   	pop    esi
c0014482:	5f                   	pop    edi
c0014483:	c3                   	ret    

c0014484 <Process::Process(char const*, Process*, char**)>:
c0014484:	56                   	push   esi
c0014485:	53                   	push   ebx
c0014486:	83 ec 14             	sub    esp,0x14
c0014489:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448d:	05 0c 02 00 00       	add    eax,0x20c
c0014492:	bb 07 00 00 00       	mov    ebx,0x7
c0014497:	89 c6                	mov    esi,eax
c0014499:	8d 76 00             	lea    esi,[esi+0x0]
c001449c:	85 db                	test   ebx,ebx
c001449e:	78 14                	js     c00144b4 <Process::Process(char const*, Process*, char**)+0x30>
c00144a0:	83 ec 0c             	sub    esp,0xc
c00144a3:	56                   	push   esi
c00144a4:	e8 6b a2 00 00       	call   c001e714 <ThreadControlBlock::ThreadControlBlock()>
c00144a9:	83 c4 10             	add    esp,0x10
c00144ac:	83 c6 5f             	add    esi,0x5f
c00144af:	4b                   	dec    ebx
c00144b0:	eb ea                	jmp    c001449c <Process::Process(char const*, Process*, char**)+0x18>
c00144b2:	66 90                	xchg   ax,ax
c00144b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144b8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00144bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144c3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00144ca:	83 ec 0c             	sub    esp,0xc
c00144cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144d1:	e8 ee bc ff ff       	call   c00101c4 <Krnl::newProcessEnv(Process*)>
c00144d6:	83 c4 10             	add    esp,0x10
c00144d9:	89 c2                	mov    edx,eax
c00144db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144df:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00144e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00144f2:	a1 40 1b 02 c0       	mov    eax,ds:0xc0021b40
c00144f7:	8d 50 01             	lea    edx,[eax+0x1]
c00144fa:	89 15 40 1b 02 c0    	mov    DWORD PTR ds:0xc0021b40,edx
c0014500:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014504:	89 02                	mov    DWORD PTR [edx],eax
c0014506:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001450e:	83 ec 0c             	sub    esp,0xc
c0014511:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014515:	e8 53 33 ff ff       	call   c000786d <malloc>
c001451a:	83 c4 10             	add    esp,0x10
c001451d:	89 c3                	mov    ebx,eax
c001451f:	83 ec 08             	sub    esp,0x8
c0014522:	6a 00                	push   0x0
c0014524:	53                   	push   ebx
c0014525:	e8 98 59 ff ff       	call   c0009ec2 <VAS::VAS(bool)>
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014531:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014545:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014549:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001454d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014553:	e8 66 c2 ff ff       	call   c00107be <KeInitSignals()>
c0014558:	89 c2                	mov    edx,eax
c001455a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014568:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001456e:	85 c0                	test   eax,eax
c0014570:	74 42                	je     c00145b4 <Process::Process(char const*, Process*, char**)+0x130>
c0014572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014576:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001457c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014586:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001458c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014590:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014596:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001459c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a0:	05 0c 01 00 00       	add    eax,0x10c
c00145a5:	83 ec 08             	sub    esp,0x8
c00145a8:	52                   	push   edx
c00145a9:	50                   	push   eax
c00145aa:	e8 41 c0 fe ff       	call   c00005f0 <strcpy>
c00145af:	83 c4 10             	add    esp,0x10
c00145b2:	eb 64                	jmp    c0014618 <Process::Process(char const*, Process*, char**)+0x194>
c00145b4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00145bc:	83 ec 0c             	sub    esp,0xc
c00145bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00145c3:	e8 a5 32 ff ff       	call   c000786d <malloc>
c00145c8:	83 c4 10             	add    esp,0x10
c00145cb:	89 c3                	mov    ebx,eax
c00145cd:	83 ec 08             	sub    esp,0x8
c00145d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145d4:	53                   	push   ebx
c00145d5:	e8 ce 43 ff ff       	call   c00089a8 <VgaText::VgaText(char const*)>
c00145da:	83 c4 10             	add    esp,0x10
c00145dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00145e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00145f1:	83 ec 0c             	sub    esp,0xc
c00145f4:	50                   	push   eax
c00145f5:	e8 54 3c ff ff       	call   c000824e <addToTerminalCycle(VgaText*)>
c00145fa:	83 c4 10             	add    esp,0x10
c00145fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014601:	05 0c 01 00 00       	add    eax,0x10c
c0014606:	83 ec 08             	sub    esp,0x8
c0014609:	68 99 09 02 c0       	push   0xc0020999
c001460e:	50                   	push   eax
c001460f:	e8 dc bf fe ff       	call   c00005f0 <strcpy>
c0014614:	83 c4 10             	add    esp,0x10
c0014617:	90                   	nop
c0014618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001461c:	83 c0 0c             	add    eax,0xc
c001461f:	83 ec 08             	sub    esp,0x8
c0014622:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014626:	50                   	push   eax
c0014627:	e8 c4 bf fe ff       	call   c00005f0 <strcpy>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	83 ec 08             	sub    esp,0x8
c0014632:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014636:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001463a:	e8 e5 fd ff ff       	call   c0014424 <Process::addArgs(char**)>
c001463f:	83 c4 10             	add    esp,0x10
c0014642:	83 ec 08             	sub    esp,0x8
c0014645:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001464d:	e8 6b ed ff ff       	call   c00133bd <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014652:	83 c4 10             	add    esp,0x10
c0014655:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014659:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001465d:	83 f0 01             	xor    eax,0x1
c0014660:	88 c2                	mov    dl,al
c0014662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014666:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001466c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014670:	25 ff 00 00 00       	and    eax,0xff
c0014675:	83 ec 08             	sub    esp,0x8
c0014678:	50                   	push   eax
c0014679:	68 f0 09 02 c0       	push   0xc00209f0
c001467e:	e8 8b 5f ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014683:	83 c4 10             	add    esp,0x10
c0014686:	90                   	nop
c0014687:	83 c4 14             	add    esp,0x14
c001468a:	5b                   	pop    ebx
c001468b:	5e                   	pop    esi
c001468c:	c3                   	ret    
c001468d:	90                   	nop
c001468e:	66 90                	xchg   ax,ax

c0014690 <Process::Process(bool, char const*, Process*, char**)>:
c0014690:	56                   	push   esi
c0014691:	53                   	push   ebx
c0014692:	83 ec 24             	sub    esp,0x24
c0014695:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014699:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001469d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146a1:	05 0c 02 00 00       	add    eax,0x20c
c00146a6:	bb 07 00 00 00       	mov    ebx,0x7
c00146ab:	89 c6                	mov    esi,eax
c00146ad:	8d 76 00             	lea    esi,[esi+0x0]
c00146b0:	85 db                	test   ebx,ebx
c00146b2:	78 14                	js     c00146c8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	56                   	push   esi
c00146b8:	e8 57 a0 00 00       	call   c001e714 <ThreadControlBlock::ThreadControlBlock()>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	83 c6 5f             	add    esi,0x5f
c00146c3:	4b                   	dec    ebx
c00146c4:	eb ea                	jmp    c00146b0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00146c6:	66 90                	xchg   ax,ax
c00146c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146cc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00146d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146d7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00146de:	83 ec 0c             	sub    esp,0xc
c00146e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00146e5:	e8 da ba ff ff       	call   c00101c4 <Krnl::newProcessEnv(Process*)>
c00146ea:	83 c4 10             	add    esp,0x10
c00146ed:	89 c2                	mov    edx,eax
c00146ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146f3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00146f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146fd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014706:	a1 40 1b 02 c0       	mov    eax,ds:0xc0021b40
c001470b:	8d 50 01             	lea    edx,[eax+0x1]
c001470e:	89 15 40 1b 02 c0    	mov    DWORD PTR ds:0xc0021b40,edx
c0014714:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014718:	89 02                	mov    DWORD PTR [edx],eax
c001471a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014729:	e8 3f 31 ff ff       	call   c000786d <malloc>
c001472e:	83 c4 10             	add    esp,0x10
c0014731:	89 c3                	mov    ebx,eax
c0014733:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014737:	25 ff 00 00 00       	and    eax,0xff
c001473c:	83 ec 08             	sub    esp,0x8
c001473f:	50                   	push   eax
c0014740:	53                   	push   ebx
c0014741:	e8 7c 57 ff ff       	call   c0009ec2 <VAS::VAS(bool)>
c0014746:	83 c4 10             	add    esp,0x10
c0014749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001474d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014753:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014757:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014765:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014769:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001476f:	e8 4a c0 ff ff       	call   c00107be <KeInitSignals()>
c0014774:	89 c2                	mov    edx,eax
c0014776:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001477a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014780:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014784:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001478a:	85 c0                	test   eax,eax
c001478c:	74 42                	je     c00147d0 <Process::Process(bool, char const*, Process*, char**)+0x140>
c001478e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014792:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014798:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001479e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147a2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00147a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147ac:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00147b2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00147b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147bc:	05 0c 01 00 00       	add    eax,0x10c
c00147c1:	83 ec 08             	sub    esp,0x8
c00147c4:	52                   	push   edx
c00147c5:	50                   	push   eax
c00147c6:	e8 25 be fe ff       	call   c00005f0 <strcpy>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	eb 64                	jmp    c0014834 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00147d0:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c00147d8:	83 ec 0c             	sub    esp,0xc
c00147db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147df:	e8 89 30 ff ff       	call   c000786d <malloc>
c00147e4:	83 c4 10             	add    esp,0x10
c00147e7:	89 c3                	mov    ebx,eax
c00147e9:	83 ec 08             	sub    esp,0x8
c00147ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00147f0:	53                   	push   ebx
c00147f1:	e8 b2 41 ff ff       	call   c00089a8 <VgaText::VgaText(char const*)>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147fd:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014807:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001480d:	83 ec 0c             	sub    esp,0xc
c0014810:	50                   	push   eax
c0014811:	e8 38 3a ff ff       	call   c000824e <addToTerminalCycle(VgaText*)>
c0014816:	83 c4 10             	add    esp,0x10
c0014819:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001481d:	05 0c 01 00 00       	add    eax,0x10c
c0014822:	83 ec 08             	sub    esp,0x8
c0014825:	68 99 09 02 c0       	push   0xc0020999
c001482a:	50                   	push   eax
c001482b:	e8 c0 bd fe ff       	call   c00005f0 <strcpy>
c0014830:	83 c4 10             	add    esp,0x10
c0014833:	90                   	nop
c0014834:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014838:	83 c0 0c             	add    eax,0xc
c001483b:	83 ec 08             	sub    esp,0x8
c001483e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014842:	50                   	push   eax
c0014843:	e8 a8 bd fe ff       	call   c00005f0 <strcpy>
c0014848:	83 c4 10             	add    esp,0x10
c001484b:	83 ec 08             	sub    esp,0x8
c001484e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014852:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014856:	e8 c9 fb ff ff       	call   c0014424 <Process::addArgs(char**)>
c001485b:	83 c4 10             	add    esp,0x10
c001485e:	90                   	nop
c001485f:	83 c4 24             	add    esp,0x24
c0014862:	5b                   	pop    ebx
c0014863:	5e                   	pop    esi
c0014864:	c3                   	ret    
c0014865:	8d 76 00             	lea    esi,[esi+0x0]

c0014868 <taskStartupFunction>:
c0014868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014870:	c3                   	ret    
c0014871:	90                   	nop
c0014872:	66 90                	xchg   ax,ax

c0014874 <Semaphore::Semaphore(int)>:
c0014874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014878:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001487c:	89 10                	mov    DWORD PTR [eax],edx
c001487e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014882:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014889:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001488d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014894:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014898:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001489f:	90                   	nop
c00148a0:	c3                   	ret    
c00148a1:	90                   	nop
c00148a2:	66 90                	xchg   ax,ax

c00148a4 <Mutex::Mutex()>:
c00148a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148a8:	6a 01                	push   0x1
c00148aa:	50                   	push   eax
c00148ab:	e8 c4 ff ff ff       	call   c0014874 <Semaphore::Semaphore(int)>
c00148b0:	83 c4 08             	add    esp,0x8
c00148b3:	90                   	nop
c00148b4:	c3                   	ret    
c00148b5:	90                   	nop
c00148b6:	66 90                	xchg   ax,ax

c00148b8 <Process::createThread(void (*)(void*), void*, int)>:
c00148b8:	57                   	push   edi
c00148b9:	31 c9                	xor    ecx,ecx
c00148bb:	56                   	push   esi
c00148bc:	53                   	push   ebx
c00148bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00148c1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00148c8:	89 f2                	mov    edx,esi
c00148ca:	66 90                	xchg   ax,ax
c00148cc:	31 c0                	xor    eax,eax
c00148ce:	66 89 d0             	mov    ax,dx
c00148d1:	83 e2 01             	and    edx,0x1
c00148d4:	74 12                	je     c00148e8 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00148d6:	d1 f8                	sar    eax,1
c00148d8:	41                   	inc    ecx
c00148d9:	89 c2                	mov    edx,eax
c00148db:	83 f9 10             	cmp    ecx,0x10
c00148de:	75 ec                	jne    c00148cc <Process::createThread(void (*)(void*), void*, int)+0x14>
c00148e0:	31 db                	xor    ebx,ebx
c00148e2:	89 d8                	mov    eax,ebx
c00148e4:	5b                   	pop    ebx
c00148e5:	5e                   	pop    esi
c00148e6:	5f                   	pop    edi
c00148e7:	c3                   	ret    
c00148e8:	b8 01 00 00 00       	mov    eax,0x1
c00148ed:	d3 e0                	shl    eax,cl
c00148ef:	09 c6                	or     esi,eax
c00148f1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00148f4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00148fb:	01 c0                	add    eax,eax
c00148fd:	01 c8                	add    eax,ecx
c00148ff:	8d 04 80             	lea    eax,[eax+eax*4]
c0014902:	01 d8                	add    eax,ebx
c0014904:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001490b:	75 0b                	jne    c0014918 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001490d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014917:	90                   	nop
c0014918:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001491e:	83 ec 0c             	sub    esp,0xc
c0014921:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014924:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014927:	01 c0                	add    eax,eax
c0014929:	01 c8                	add    eax,ecx
c001492b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001492e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014931:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014937:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c001493d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014941:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014947:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001494d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014953:	89 ca                	mov    edx,ecx
c0014955:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001495c:	f7 da                	neg    edx
c001495e:	c1 e2 15             	shl    edx,0x15
c0014961:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014967:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001496d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014971:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001497b:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014981:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014985:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001498b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014995:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001499f:	68 00 01 00 00       	push   0x100
c00149a4:	e8 c4 2e ff ff       	call   c000786d <malloc>
c00149a9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00149ac:	58                   	pop    eax
c00149ad:	5a                   	pop    edx
c00149ae:	53                   	push   ebx
c00149af:	68 84 71 02 c0       	push   0xc0027184
c00149b4:	e8 f3 9a 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00149b9:	83 c4 10             	add    esp,0x10
c00149bc:	89 d8                	mov    eax,ebx
c00149be:	5b                   	pop    ebx
c00149bf:	5e                   	pop    esi
c00149c0:	5f                   	pop    edi
c00149c1:	c3                   	ret    
c00149c2:	66 90                	xchg   ax,ax

c00149c4 <Process::createUserThread()>:
c00149c4:	83 ec 0c             	sub    esp,0xc
c00149c7:	68 80 00 00 00       	push   0x80
c00149cc:	6a 00                	push   0x0
c00149ce:	68 18 43 01 c0       	push   0xc0014318
c00149d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149d7:	50                   	push   eax
c00149d8:	e8 db fe ff ff       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c00149dd:	83 c4 1c             	add    esp,0x1c
c00149e0:	c3                   	ret    
c00149e1:	8d 76 00             	lea    esi,[esi+0x0]

c00149e4 <setupMultitasking(void (*)())>:
c00149e4:	56                   	push   esi
c00149e5:	53                   	push   ebx
c00149e6:	53                   	push   ebx
c00149e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00149eb:	eb 13                	jmp    c0014a00 <setupMultitasking(void (*)())+0x1c>
c00149ed:	8d 76 00             	lea    esi,[esi+0x0]
c00149f0:	83 ec 0c             	sub    esp,0xc
c00149f3:	68 84 71 02 c0       	push   0xc0027184
c00149f8:	e8 f7 99 00 00       	call   c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00149fd:	83 c4 10             	add    esp,0x10
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	68 84 71 02 c0       	push   0xc0027184
c0014a08:	e8 c3 99 00 00       	call   c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014a0d:	83 c4 10             	add    esp,0x10
c0014a10:	84 c0                	test   al,al
c0014a12:	74 dc                	je     c00149f0 <setupMultitasking(void (*)())+0xc>
c0014a14:	83 ec 0c             	sub    esp,0xc
c0014a17:	68 24 07 00 00       	push   0x724
c0014a1c:	e8 4c 2e ff ff       	call   c000786d <malloc>
c0014a21:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a28:	89 c3                	mov    ebx,eax
c0014a2a:	6a 00                	push   0x0
c0014a2c:	68 9d 09 02 c0       	push   0xc002099d
c0014a31:	6a 01                	push   0x1
c0014a33:	50                   	push   eax
c0014a34:	e8 57 fc ff ff       	call   c0014690 <Process::Process(bool, char const*, Process*, char**)>
c0014a39:	83 c4 14             	add    esp,0x14
c0014a3c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014a42:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014a48:	50                   	push   eax
c0014a49:	e8 57 3a ff ff       	call   c00084a5 <setActiveTerminal(VgaText*)>
c0014a4e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0014a56:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014a60:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014a66:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014a69:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014a73:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014a79:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014a7f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014a89:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014a93:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014a9d:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014aa3:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014aad:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014ab3:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014abd:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014ac4:	e8 a4 2d ff ff       	call   c000786d <malloc>
c0014ac9:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014acf:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014ad5:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014adb:	5a                   	pop    edx
c0014adc:	59                   	pop    ecx
c0014add:	68 99 09 02 c0       	push   0xc0020999
c0014ae2:	50                   	push   eax
c0014ae3:	e8 08 bb fe ff       	call   c00005f0 <strcpy>
c0014ae8:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014aef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014af3:	83 c4 14             	add    esp,0x14
c0014af6:	5b                   	pop    ebx
c0014af7:	5e                   	pop    esi
c0014af8:	e9 6c b7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014afd:	8d 76 00             	lea    esi,[esi+0x0]

c0014b00 <schedule()>:
c0014b00:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014b06:	85 d2                	test   edx,edx
c0014b08:	74 0e                	je     c0014b18 <schedule()+0x18>
c0014b0a:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014b14:	c3                   	ret    
c0014b15:	8d 76 00             	lea    esi,[esi+0x0]
c0014b18:	53                   	push   ebx
c0014b19:	83 ec 14             	sub    esp,0x14
c0014b1c:	68 84 71 02 c0       	push   0xc0027184
c0014b21:	e8 aa 98 00 00       	call   c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014b26:	83 c4 10             	add    esp,0x10
c0014b29:	84 c0                	test   al,al
c0014b2b:	75 3b                	jne    c0014b68 <schedule()+0x68>
c0014b2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014b35:	4a                   	dec    edx
c0014b36:	74 38                	je     c0014b70 <schedule()+0x70>
c0014b38:	83 ec 0c             	sub    esp,0xc
c0014b3b:	68 84 71 02 c0       	push   0xc0027184
c0014b40:	e8 a7 98 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b45:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014b4c:	89 c3                	mov    ebx,eax
c0014b4e:	e8 a1 98 00 00       	call   c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014b53:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014b5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b5d:	e8 0e f8 ff ff       	call   c0014370 <switchToThread(ThreadControlBlock*)>
c0014b62:	83 c4 10             	add    esp,0x10
c0014b65:	8d 76 00             	lea    esi,[esi+0x0]
c0014b68:	83 c4 08             	add    esp,0x8
c0014b6b:	5b                   	pop    ebx
c0014b6c:	c3                   	ret    
c0014b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b70:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014b77:	83 ec 08             	sub    esp,0x8
c0014b7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b7f:	50                   	push   eax
c0014b80:	68 84 71 02 c0       	push   0xc0027184
c0014b85:	e8 22 99 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014b8a:	83 c4 10             	add    esp,0x10
c0014b8d:	eb a9                	jmp    c0014b38 <schedule()+0x38>
c0014b8f:	90                   	nop

c0014b90 <Semaphore::tryAcquire()>:
c0014b90:	53                   	push   ebx
c0014b91:	83 ec 08             	sub    esp,0x8
c0014b94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014b98:	fa                   	cli    
c0014b99:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b9e:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba1:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014ba7:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014bad:	8d 5a 01             	lea    ebx,[edx+0x1]
c0014bb0:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014bb6:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014bb9:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014bbb:	7c 33                	jl     c0014bf0 <Semaphore::tryAcquire()+0x60>
c0014bbd:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c0014bc3:	85 d2                	test   edx,edx
c0014bc5:	75 0d                	jne    c0014bd4 <Semaphore::tryAcquire()+0x44>
c0014bc7:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c0014bcd:	85 d2                	test   edx,edx
c0014bcf:	75 6b                	jne    c0014c3c <Semaphore::tryAcquire()+0xac>
c0014bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0014bd4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bd9:	85 c0                	test   eax,eax
c0014bdb:	74 0b                	je     c0014be8 <Semaphore::tryAcquire()+0x58>
c0014bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0014be0:	31 c0                	xor    eax,eax
c0014be2:	83 c4 08             	add    esp,0x8
c0014be5:	5b                   	pop    ebx
c0014be6:	c3                   	ret    
c0014be7:	90                   	nop
c0014be8:	fb                   	sti    
c0014be9:	83 c4 08             	add    esp,0x8
c0014bec:	5b                   	pop    ebx
c0014bed:	c3                   	ret    
c0014bee:	66 90                	xchg   ax,ax
c0014bf0:	43                   	inc    ebx
c0014bf1:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c0014bf7:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0014bfa:	85 d2                	test   edx,edx
c0014bfc:	75 22                	jne    c0014c20 <Semaphore::tryAcquire()+0x90>
c0014bfe:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c0014c04:	85 c9                	test   ecx,ecx
c0014c06:	74 18                	je     c0014c20 <Semaphore::tryAcquire()+0x90>
c0014c08:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c12:	e8 e9 fe ff ff       	call   c0014b00 <schedule()>
c0014c17:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c1c:	48                   	dec    eax
c0014c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0014c20:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c25:	85 c0                	test   eax,eax
c0014c27:	75 0b                	jne    c0014c34 <Semaphore::tryAcquire()+0xa4>
c0014c29:	fb                   	sti    
c0014c2a:	b0 01                	mov    al,0x1
c0014c2c:	83 c4 08             	add    esp,0x8
c0014c2f:	5b                   	pop    ebx
c0014c30:	c3                   	ret    
c0014c31:	8d 76 00             	lea    esi,[esi+0x0]
c0014c34:	b0 01                	mov    al,0x1
c0014c36:	83 c4 08             	add    esp,0x8
c0014c39:	5b                   	pop    ebx
c0014c3a:	c3                   	ret    
c0014c3b:	90                   	nop
c0014c3c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c46:	e8 b5 fe ff ff       	call   c0014b00 <schedule()>
c0014c4b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c50:	48                   	dec    eax
c0014c51:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c56:	85 c0                	test   eax,eax
c0014c58:	75 86                	jne    c0014be0 <Semaphore::tryAcquire()+0x50>
c0014c5a:	eb 8c                	jmp    c0014be8 <Semaphore::tryAcquire()+0x58>

c0014c5c <Semaphore::assertLocked(char const*)>:
c0014c5c:	83 ec 0c             	sub    esp,0xc
c0014c5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014c63:	fa                   	cli    
c0014c64:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014c6a:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014c6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014c72:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014c78:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014c7a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014c7d:	7c 29                	jl     c0014ca8 <Semaphore::assertLocked(char const*)+0x4c>
c0014c7f:	90                   	nop
c0014c80:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014c85:	85 c0                	test   eax,eax
c0014c87:	75 0b                	jne    c0014c94 <Semaphore::assertLocked(char const*)+0x38>
c0014c89:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014c8e:	85 c0                	test   eax,eax
c0014c90:	75 2e                	jne    c0014cc0 <Semaphore::assertLocked(char const*)+0x64>
c0014c92:	66 90                	xchg   ax,ax
c0014c94:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c99:	48                   	dec    eax
c0014c9a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c9f:	75 03                	jne    c0014ca4 <Semaphore::assertLocked(char const*)+0x48>
c0014ca1:	fb                   	sti    
c0014ca2:	66 90                	xchg   ax,ax
c0014ca4:	83 c4 0c             	add    esp,0xc
c0014ca7:	c3                   	ret    
c0014ca8:	83 ec 0c             	sub    esp,0xc
c0014cab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014caf:	52                   	push   edx
c0014cb0:	e8 1a b7 ff ff       	call   c00103cf <KePanic(char const*)>
c0014cb5:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014cba:	83 c4 10             	add    esp,0x10
c0014cbd:	48                   	dec    eax
c0014cbe:	eb c0                	jmp    c0014c80 <Semaphore::assertLocked(char const*)+0x24>
c0014cc0:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014cca:	e8 31 fe ff ff       	call   c0014b00 <schedule()>
c0014ccf:	eb c3                	jmp    c0014c94 <Semaphore::assertLocked(char const*)+0x38>
c0014cd1:	8d 76 00             	lea    esi,[esi+0x0]

c0014cd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014cd4:	83 ec 0c             	sub    esp,0xc
c0014cd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ce0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014ce3:	e8 18 fe ff ff       	call   c0014b00 <schedule()>
c0014ce8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ced:	48                   	dec    eax
c0014cee:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014cf3:	75 03                	jne    c0014cf8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014cf5:	fb                   	sti    
c0014cf6:	66 90                	xchg   ax,ax
c0014cf8:	83 c4 0c             	add    esp,0xc
c0014cfb:	c3                   	ret    

c0014cfc <blockTask(TaskState)>:
c0014cfc:	83 ec 0c             	sub    esp,0xc
c0014cff:	fa                   	cli    
c0014d00:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014d06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d12:	e8 e9 fd ff ff       	call   c0014b00 <schedule()>
c0014d17:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d1c:	48                   	dec    eax
c0014d1d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d22:	75 04                	jne    c0014d28 <blockTask(TaskState)+0x2c>
c0014d24:	fb                   	sti    
c0014d25:	8d 76 00             	lea    esi,[esi+0x0]
c0014d28:	83 c4 0c             	add    esp,0xc
c0014d2b:	c3                   	ret    

c0014d2c <waitTask(int, int*, int)>:
c0014d2c:	83 ec 18             	sub    esp,0x18
c0014d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d34:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d38:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014d3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d44:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0014d47:	6a 07                	push   0x7
c0014d49:	e8 ae ff ff ff       	call   c0014cfc <blockTask(TaskState)>
c0014d4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d53:	83 c4 10             	add    esp,0x10
c0014d56:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014d59:	85 d2                	test   edx,edx
c0014d5b:	74 0b                	je     c0014d68 <waitTask(int, int*, int)+0x3c>
c0014d5d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014d60:	89 02                	mov    DWORD PTR [edx],eax
c0014d62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d67:	90                   	nop
c0014d68:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014d6b:	83 c4 0c             	add    esp,0xc
c0014d6e:	c3                   	ret    
c0014d6f:	90                   	nop

c0014d70 <milliTenthSleepUntil(unsigned int)>:
c0014d70:	83 ec 0c             	sub    esp,0xc
c0014d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d77:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014d7d:	76 05                	jbe    c0014d84 <milliTenthSleepUntil(unsigned int)+0x14>
c0014d7f:	90                   	nop
c0014d80:	83 c4 0c             	add    esp,0xc
c0014d83:	c3                   	ret    
c0014d84:	fa                   	cli    
c0014d85:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014d8b:	83 ec 08             	sub    esp,0x8
c0014d8e:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014d94:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014d9a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014d9d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014da3:	52                   	push   edx
c0014da4:	68 78 71 02 c0       	push   0xc0027178
c0014da9:	e8 fe 96 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014dae:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014db5:	e8 42 ff ff ff       	call   c0014cfc <blockTask(TaskState)>
c0014dba:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014dbf:	83 c4 10             	add    esp,0x10
c0014dc2:	48                   	dec    eax
c0014dc3:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014dc8:	85 c0                	test   eax,eax
c0014dca:	75 0c                	jne    c0014dd8 <milliTenthSleepUntil(unsigned int)+0x68>
c0014dcc:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014dd1:	85 c0                	test   eax,eax
c0014dd3:	75 17                	jne    c0014dec <milliTenthSleepUntil(unsigned int)+0x7c>
c0014dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0014dd8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ddd:	48                   	dec    eax
c0014dde:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014de3:	75 9b                	jne    c0014d80 <milliTenthSleepUntil(unsigned int)+0x10>
c0014de5:	fb                   	sti    
c0014de6:	83 c4 0c             	add    esp,0xc
c0014de9:	c3                   	ret    
c0014dea:	66 90                	xchg   ax,ax
c0014dec:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014df6:	e8 05 fd ff ff       	call   c0014b00 <schedule()>
c0014dfb:	eb db                	jmp    c0014dd8 <milliTenthSleepUntil(unsigned int)+0x68>
c0014dfd:	8d 76 00             	lea    esi,[esi+0x0]

c0014e00 <milliTenthSleep(unsigned int)>:
c0014e00:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014e05:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014e09:	e9 62 ff ff ff       	jmp    c0014d70 <milliTenthSleepUntil(unsigned int)>
c0014e0e:	66 90                	xchg   ax,ax

c0014e10 <sleep(unsigned int)>:
c0014e10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e14:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e17:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e1a:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e1d:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e20:	c1 e0 04             	shl    eax,0x4
c0014e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e27:	eb d7                	jmp    c0014e00 <milliTenthSleep(unsigned int)>
c0014e29:	90                   	nop
c0014e2a:	66 90                	xchg   ax,ax

c0014e2c <Semaphore::acquire()>:
c0014e2c:	83 ec 0c             	sub    esp,0xc
c0014e2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e33:	fa                   	cli    
c0014e34:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014e39:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014e3f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014e42:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014e48:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014e4b:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014e4d:	7d 2d                	jge    c0014e7c <Semaphore::acquire()+0x50>
c0014e4f:	41                   	inc    ecx
c0014e50:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014e53:	90                   	nop
c0014e54:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014e59:	85 c0                	test   eax,eax
c0014e5b:	75 0b                	jne    c0014e68 <Semaphore::acquire()+0x3c>
c0014e5d:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014e62:	85 c0                	test   eax,eax
c0014e64:	75 62                	jne    c0014ec8 <Semaphore::acquire()+0x9c>
c0014e66:	66 90                	xchg   ax,ax
c0014e68:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e6d:	48                   	dec    eax
c0014e6e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e73:	75 03                	jne    c0014e78 <Semaphore::acquire()+0x4c>
c0014e75:	fb                   	sti    
c0014e76:	66 90                	xchg   ax,ax
c0014e78:	83 c4 0c             	add    esp,0xc
c0014e7b:	c3                   	ret    
c0014e7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014e88:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014e8b:	85 c9                	test   ecx,ecx
c0014e8d:	74 4d                	je     c0014edc <Semaphore::acquire()+0xb0>
c0014e8f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014e92:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014e98:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014e9b:	90                   	nop
c0014e9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ea1:	83 ec 0c             	sub    esp,0xc
c0014ea4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014ea7:	68 18 0a 02 c0       	push   0xc0020a18
c0014eac:	e8 5d 57 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0014eb1:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014eb8:	e8 3f fe ff ff       	call   c0014cfc <blockTask(TaskState)>
c0014ebd:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014ec2:	83 c4 10             	add    esp,0x10
c0014ec5:	48                   	dec    eax
c0014ec6:	eb 8c                	jmp    c0014e54 <Semaphore::acquire()+0x28>
c0014ec8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014ed2:	e8 29 fc ff ff       	call   c0014b00 <schedule()>
c0014ed7:	eb 8f                	jmp    c0014e68 <Semaphore::acquire()+0x3c>
c0014ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0014edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ee1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014ee4:	eb b6                	jmp    c0014e9c <Semaphore::acquire()+0x70>
c0014ee6:	66 90                	xchg   ax,ax

c0014ee8 <taskReturned>:
c0014ee8:	83 ec 18             	sub    esp,0x18
c0014eeb:	68 38 0a 02 c0       	push   0xc0020a38
c0014ef0:	e8 da b4 ff ff       	call   c00103cf <KePanic(char const*)>
c0014ef5:	83 c4 10             	add    esp,0x10
c0014ef8:	83 ec 0c             	sub    esp,0xc
c0014efb:	6a 02                	push   0x2
c0014efd:	e8 fa fd ff ff       	call   c0014cfc <blockTask(TaskState)>
c0014f02:	fa                   	cli    
c0014f03:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f09:	e8 f2 fb ff ff       	call   c0014b00 <schedule()>
c0014f0e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f13:	83 c4 10             	add    esp,0x10
c0014f16:	48                   	dec    eax
c0014f17:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f1c:	85 c0                	test   eax,eax
c0014f1e:	75 d8                	jne    c0014ef8 <taskReturned+0x10>
c0014f20:	fb                   	sti    
c0014f21:	eb d5                	jmp    c0014ef8 <taskReturned+0x10>
c0014f23:	90                   	nop

c0014f24 <Thr::processFromPID(int)>:
c0014f24:	57                   	push   edi
c0014f25:	56                   	push   esi
c0014f26:	53                   	push   ebx
c0014f27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f2b:	fa                   	cli    
c0014f2c:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014f32:	83 ec 0c             	sub    esp,0xc
c0014f35:	68 84 71 02 c0       	push   0xc0027184
c0014f3a:	e8 ad 94 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	89 c7                	mov    edi,eax
c0014f44:	eb 16                	jmp    c0014f5c <Thr::processFromPID(int)+0x38>
c0014f46:	66 90                	xchg   ax,ax
c0014f48:	83 ec 0c             	sub    esp,0xc
c0014f4b:	68 84 71 02 c0       	push   0xc0027184
c0014f50:	e8 97 94 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	39 f8                	cmp    eax,edi
c0014f5a:	74 4c                	je     c0014fa8 <Thr::processFromPID(int)+0x84>
c0014f5c:	83 ec 0c             	sub    esp,0xc
c0014f5f:	68 84 71 02 c0       	push   0xc0027184
c0014f64:	e8 83 94 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f69:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014f70:	89 c3                	mov    ebx,eax
c0014f72:	e8 7d 94 00 00       	call   c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f77:	58                   	pop    eax
c0014f78:	5a                   	pop    edx
c0014f79:	53                   	push   ebx
c0014f7a:	68 84 71 02 c0       	push   0xc0027184
c0014f7f:	e8 28 95 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f84:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014f87:	83 c4 10             	add    esp,0x10
c0014f8a:	39 30                	cmp    DWORD PTR [eax],esi
c0014f8c:	75 ba                	jne    c0014f48 <Thr::processFromPID(int)+0x24>
c0014f8e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f93:	48                   	dec    eax
c0014f94:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f99:	74 09                	je     c0014fa4 <Thr::processFromPID(int)+0x80>
c0014f9b:	90                   	nop
c0014f9c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014f9f:	5b                   	pop    ebx
c0014fa0:	5e                   	pop    esi
c0014fa1:	5f                   	pop    edi
c0014fa2:	c3                   	ret    
c0014fa3:	90                   	nop
c0014fa4:	fb                   	sti    
c0014fa5:	eb f5                	jmp    c0014f9c <Thr::processFromPID(int)+0x78>
c0014fa7:	90                   	nop
c0014fa8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fad:	48                   	dec    eax
c0014fae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014fb3:	75 07                	jne    c0014fbc <Thr::processFromPID(int)+0x98>
c0014fb5:	fb                   	sti    
c0014fb6:	5b                   	pop    ebx
c0014fb7:	5e                   	pop    esi
c0014fb8:	5f                   	pop    edi
c0014fb9:	c3                   	ret    
c0014fba:	66 90                	xchg   ax,ax
c0014fbc:	5b                   	pop    ebx
c0014fbd:	31 c0                	xor    eax,eax
c0014fbf:	5e                   	pop    esi
c0014fc0:	5f                   	pop    edi
c0014fc1:	c3                   	ret    
c0014fc2:	66 90                	xchg   ax,ax

c0014fc4 <unblockTask(ThreadControlBlock*)>:
c0014fc4:	53                   	push   ebx
c0014fc5:	83 ec 08             	sub    esp,0x8
c0014fc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014fcc:	fa                   	cli    
c0014fcd:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014fd3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014fd6:	85 c0                	test   eax,eax
c0014fd8:	74 66                	je     c0015040 <unblockTask(ThreadControlBlock*)+0x7c>
c0014fda:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014fdd:	48                   	dec    eax
c0014fde:	74 38                	je     c0015018 <unblockTask(ThreadControlBlock*)+0x54>
c0014fe0:	83 ec 0c             	sub    esp,0xc
c0014fe3:	68 84 71 02 c0       	push   0xc0027184
c0014fe8:	e8 ff 93 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fed:	83 c4 10             	add    esp,0x10
c0014ff0:	85 c0                	test   eax,eax
c0014ff2:	75 1c                	jne    c0015010 <unblockTask(ThreadControlBlock*)+0x4c>
c0014ff4:	eb 5e                	jmp    c0015054 <unblockTask(ThreadControlBlock*)+0x90>
c0014ff6:	66 90                	xchg   ax,ax
c0014ff8:	83 ec 08             	sub    esp,0x8
c0014ffb:	50                   	push   eax
c0014ffc:	68 84 71 02 c0       	push   0xc0027184
c0015001:	e8 02 97 00 00       	call   c001e708 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015006:	83 c4 10             	add    esp,0x10
c0015009:	85 c0                	test   eax,eax
c001500b:	74 47                	je     c0015054 <unblockTask(ThreadControlBlock*)+0x90>
c001500d:	8d 76 00             	lea    esi,[esi+0x0]
c0015010:	39 c3                	cmp    ebx,eax
c0015012:	75 e4                	jne    c0014ff8 <unblockTask(ThreadControlBlock*)+0x34>
c0015014:	eb 12                	jmp    c0015028 <unblockTask(ThreadControlBlock*)+0x64>
c0015016:	66 90                	xchg   ax,ax
c0015018:	83 ec 0c             	sub    esp,0xc
c001501b:	68 bb 09 02 c0       	push   0xc00209bb
c0015020:	e8 e9 55 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001502d:	48                   	dec    eax
c001502e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015033:	75 03                	jne    c0015038 <unblockTask(ThreadControlBlock*)+0x74>
c0015035:	fb                   	sti    
c0015036:	66 90                	xchg   ax,ax
c0015038:	83 c4 08             	add    esp,0x8
c001503b:	5b                   	pop    ebx
c001503c:	c3                   	ret    
c001503d:	8d 76 00             	lea    esi,[esi+0x0]
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	68 a4 09 02 c0       	push   0xc00209a4
c0015048:	e8 c1 55 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	eb d6                	jmp    c0015028 <unblockTask(ThreadControlBlock*)+0x64>
c0015052:	66 90                	xchg   ax,ax
c0015054:	83 ec 08             	sub    esp,0x8
c0015057:	53                   	push   ebx
c0015058:	68 84 71 02 c0       	push   0xc0027184
c001505d:	e8 4a 94 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015062:	83 c4 10             	add    esp,0x10
c0015065:	eb c1                	jmp    c0015028 <unblockTask(ThreadControlBlock*)+0x64>
c0015067:	90                   	nop

c0015068 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0015068:	55                   	push   ebp
c0015069:	57                   	push   edi
c001506a:	56                   	push   esi
c001506b:	53                   	push   ebx
c001506c:	83 ec 1c             	sub    esp,0x1c
c001506f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015073:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015076:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001507c:	85 ed                	test   ebp,ebp
c001507e:	7e 24                	jle    c00150a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0015080:	31 f6                	xor    esi,esi
c0015082:	66 90                	xchg   ax,ax
c0015084:	83 ec 0c             	sub    esp,0xc
c0015087:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001508e:	46                   	inc    esi
c001508f:	57                   	push   edi
c0015090:	e8 e8 27 ff ff       	call   c000787d <free>
c0015095:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015098:	83 c4 10             	add    esp,0x10
c001509b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00150a1:	7f e1                	jg     c0015084 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00150a3:	90                   	nop
c00150a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00150ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00150b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00150b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00150b9:	d3 c0                	rol    eax,cl
c00150bb:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c00150c2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00150c5:	89 f7                	mov    edi,esi
c00150c7:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00150cf:	0f 85 77 01 00 00    	jne    c001524c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c00150d5:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00150db:	85 ed                	test   ebp,ebp
c00150dd:	74 1d                	je     c00150fc <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c00150df:	83 ec 0c             	sub    esp,0xc
c00150e2:	55                   	push   ebp
c00150e3:	e8 f8 af ff ff       	call   c00100e0 <EnvVarContainer::~EnvVarContainer()>
c00150e8:	59                   	pop    ecx
c00150e9:	5e                   	pop    esi
c00150ea:	6a 0c                	push   0xc
c00150ec:	55                   	push   ebp
c00150ed:	e8 26 54 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c00150f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00150f5:	83 c4 10             	add    esp,0x10
c00150f8:	89 f7                	mov    edi,esi
c00150fa:	66 90                	xchg   ax,ax
c00150fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015102:	85 c0                	test   eax,eax
c0015104:	0f 84 b6 00 00 00    	je     c00151c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001510a:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c001510d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015111:	31 c9                	xor    ecx,ecx
c0015113:	eb 17                	jmp    c001512c <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0015115:	8d 76 00             	lea    esi,[esi+0x0]
c0015118:	41                   	inc    ecx
c0015119:	83 f9 10             	cmp    ecx,0x10
c001511c:	0f 84 9e 00 00 00    	je     c00151c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0015122:	66 90                	xchg   ax,ax
c0015124:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001512a:	66 90                	xchg   ax,ax
c001512c:	31 d2                	xor    edx,edx
c001512e:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0015135:	d3 fa                	sar    edx,cl
c0015137:	83 e2 01             	and    edx,0x1
c001513a:	74 dc                	je     c0015118 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001513c:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001513f:	01 d2                	add    edx,edx
c0015141:	01 ca                	add    edx,ecx
c0015143:	8d 14 92             	lea    edx,[edx+edx*4]
c0015146:	01 d0                	add    eax,edx
c0015148:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001514e:	83 fd 07             	cmp    ebp,0x7
c0015151:	75 c5                	jne    c0015118 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015153:	05 40 02 00 00       	add    eax,0x240
c0015158:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001515b:	83 fd ff             	cmp    ebp,0xffffffff
c001515e:	0f 8c f0 00 00 00    	jl     c0015254 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015164:	0f 84 ae 01 00 00    	je     c0015318 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c001516a:	85 ed                	test   ebp,ebp
c001516c:	0f 84 92 01 00 00    	je     c0015304 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0015172:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015174:	75 a2                	jne    c0015118 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015176:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001517c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015180:	01 d0                	add    eax,edx
c0015182:	66 90                	xchg   ax,ax
c0015184:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015188:	83 ec 0c             	sub    esp,0xc
c001518b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015191:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015194:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001519a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00151a1:	50                   	push   eax
c00151a2:	e8 1d fe ff ff       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00151ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151b1:	89 f7                	mov    edi,esi
c00151b3:	41                   	inc    ecx
c00151b4:	83 f9 10             	cmp    ecx,0x10
c00151b7:	0f 85 67 ff ff ff    	jne    c0015124 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00151bd:	8d 76 00             	lea    esi,[esi+0x0]
c00151c0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00151c6:	85 c0                	test   eax,eax
c00151c8:	74 62                	je     c001522c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00151ca:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00151d0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00151d6:	74 54                	je     c001522c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c00151d8:	83 ec 0c             	sub    esp,0xc
c00151db:	68 84 71 02 c0       	push   0xc0027184
c00151e0:	e8 07 92 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00151e5:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00151ec:	89 c7                	mov    edi,eax
c00151ee:	e8 dd 91 00 00       	call   c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00151f3:	83 c4 10             	add    esp,0x10
c00151f6:	84 c0                	test   al,al
c00151f8:	0f 84 ce 00 00 00    	je     c00152cc <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c00151fe:	66 90                	xchg   ax,ax
c0015200:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015203:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015209:	85 d2                	test   edx,edx
c001520b:	74 0f                	je     c001521c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c001520d:	83 ec 0c             	sub    esp,0xc
c0015210:	8b 02                	mov    eax,DWORD PTR [edx]
c0015212:	52                   	push   edx
c0015213:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015216:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015219:	83 c4 10             	add    esp,0x10
c001521c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015226:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015229:	8d 76 00             	lea    esi,[esi+0x0]
c001522c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0015232:	85 db                	test   ebx,ebx
c0015234:	74 16                	je     c001524c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0015236:	83 ec 0c             	sub    esp,0xc
c0015239:	53                   	push   ebx
c001523a:	e8 71 46 ff ff       	call   c00098b0 <VAS::~VAS()>
c001523f:	58                   	pop    eax
c0015240:	5a                   	pop    edx
c0015241:	6a 14                	push   0x14
c0015243:	53                   	push   ebx
c0015244:	e8 cf 52 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	83 c4 1c             	add    esp,0x1c
c001524f:	5b                   	pop    ebx
c0015250:	5e                   	pop    esi
c0015251:	5f                   	pop    edi
c0015252:	5d                   	pop    ebp
c0015253:	c3                   	ret    
c0015254:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015258:	83 ec 0c             	sub    esp,0xc
c001525b:	68 6c 0a 02 c0       	push   0xc0020a6c
c0015260:	e8 6a b1 ff ff       	call   c00103cf <KePanic(char const*)>
c0015265:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	89 f7                	mov    edi,esi
c001526d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015271:	e9 a2 fe ff ff       	jmp    c0015118 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0015276:	66 90                	xchg   ax,ax
c0015278:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001527e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015284:	75 1e                	jne    c00152a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0015286:	83 ec 0c             	sub    esp,0xc
c0015289:	68 d4 0a 02 c0       	push   0xc0020ad4
c001528e:	e8 7b 53 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0015293:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001529a:	e8 5d fa ff ff       	call   c0014cfc <blockTask(TaskState)>
c001529f:	83 c4 10             	add    esp,0x10
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	83 ec 08             	sub    esp,0x8
c00152a7:	56                   	push   esi
c00152a8:	68 84 71 02 c0       	push   0xc0027184
c00152ad:	e8 fa 91 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152b2:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00152b9:	e8 2e 91 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	39 f8                	cmp    eax,edi
c00152c3:	0f 84 37 ff ff ff    	je     c0015200 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c00152c9:	8d 76 00             	lea    esi,[esi+0x0]
c00152cc:	83 ec 0c             	sub    esp,0xc
c00152cf:	68 84 71 02 c0       	push   0xc0027184
c00152d4:	e8 13 91 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00152d9:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00152e0:	89 c6                	mov    esi,eax
c00152e2:	e8 0d 91 00 00       	call   c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00152e7:	83 c4 10             	add    esp,0x10
c00152ea:	39 f3                	cmp    ebx,esi
c00152ec:	74 b6                	je     c00152a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00152ee:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00152f1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00152f4:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00152fa:	75 a8                	jne    c00152a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c00152fc:	e9 77 ff ff ff       	jmp    c0015278 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0015301:	8d 76 00             	lea    esi,[esi+0x0]
c0015304:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015308:	83 ec 0c             	sub    esp,0xc
c001530b:	68 a0 0a 02 c0       	push   0xc0020aa0
c0015310:	e9 4b ff ff ff       	jmp    c0015260 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0015315:	8d 76 00             	lea    esi,[esi+0x0]
c0015318:	8b 36                	mov    esi,DWORD PTR [esi]
c001531a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001531e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015321:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015324:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001532a:	01 d7                	add    edi,edx
c001532c:	89 f8                	mov    eax,edi
c001532e:	e9 51 fe ff ff       	jmp    c0015184 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0015333:	90                   	nop

c0015334 <cleanerTaskFunction(void*)>:
c0015334:	53                   	push   ebx
c0015335:	83 ec 08             	sub    esp,0x8
c0015338:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001533d:	48                   	dec    eax
c001533e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015343:	75 03                	jne    c0015348 <cleanerTaskFunction(void*)+0x14>
c0015345:	fb                   	sti    
c0015346:	66 90                	xchg   ax,ax
c0015348:	fa                   	cli    
c0015349:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001534e:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c0015355:	8d 50 01             	lea    edx,[eax+0x1]
c0015358:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c001535e:	0f 84 ac 00 00 00    	je     c0015410 <cleanerTaskFunction(void*)+0xdc>
c0015364:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015369:	85 c0                	test   eax,eax
c001536b:	75 03                	jne    c0015370 <cleanerTaskFunction(void*)+0x3c>
c001536d:	fb                   	sti    
c001536e:	66 90                	xchg   ax,ax
c0015370:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c0015377:	fa                   	cli    
c0015378:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001537e:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015384:	fa                   	cli    
c0015385:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001538b:	eb 2b                	jmp    c00153b8 <cleanerTaskFunction(void*)+0x84>
c001538d:	8d 76 00             	lea    esi,[esi+0x0]
c0015390:	83 ec 0c             	sub    esp,0xc
c0015393:	68 6c 71 02 c0       	push   0xc002716c
c0015398:	e8 4f 90 00 00       	call   c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001539d:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c00153a4:	89 c3                	mov    ebx,eax
c00153a6:	e8 49 90 00 00       	call   c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00153ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153ae:	e8 b5 fc ff ff       	call   c0015068 <cleanupTerminatedTask(ThreadControlBlock*)>
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	66 90                	xchg   ax,ax
c00153b8:	83 ec 0c             	sub    esp,0xc
c00153bb:	68 6c 71 02 c0       	push   0xc002716c
c00153c0:	e8 0b 90 00 00       	call   c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00153c5:	83 c4 10             	add    esp,0x10
c00153c8:	84 c0                	test   al,al
c00153ca:	74 c4                	je     c0015390 <cleanerTaskFunction(void*)+0x5c>
c00153cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153d1:	48                   	dec    eax
c00153d2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153d7:	75 03                	jne    c00153dc <cleanerTaskFunction(void*)+0xa8>
c00153d9:	fb                   	sti    
c00153da:	66 90                	xchg   ax,ax
c00153dc:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00153e1:	48                   	dec    eax
c00153e2:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00153e7:	0f 85 4b ff ff ff    	jne    c0015338 <cleanerTaskFunction(void*)+0x4>
c00153ed:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00153f2:	85 c0                	test   eax,eax
c00153f4:	0f 84 3e ff ff ff    	je     c0015338 <cleanerTaskFunction(void*)+0x4>
c00153fa:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015404:	e8 f7 f6 ff ff       	call   c0014b00 <schedule()>
c0015409:	e9 2a ff ff ff       	jmp    c0015338 <cleanerTaskFunction(void*)+0x4>
c001540e:	66 90                	xchg   ax,ax
c0015410:	83 ec 0c             	sub    esp,0xc
c0015413:	6a 02                	push   0x2
c0015415:	e8 ba f8 ff ff       	call   c0014cd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001541a:	83 c4 10             	add    esp,0x10
c001541d:	e9 4e ff ff ff       	jmp    c0015370 <cleanerTaskFunction(void*)+0x3c>
c0015422:	66 90                	xchg   ax,ax

c0015424 <terminateTask(int)>:
c0015424:	83 ec 14             	sub    esp,0x14
c0015427:	fa                   	cli    
c0015428:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001542e:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015434:	fa                   	cli    
c0015435:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001543b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001543f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015444:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001544c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001544f:	50                   	push   eax
c0015450:	68 6c 71 02 c0       	push   0xc002716c
c0015455:	e8 52 90 00 00       	call   c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001545a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001545f:	83 c4 10             	add    esp,0x10
c0015462:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015469:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c001546e:	85 c0                	test   eax,eax
c0015470:	74 5e                	je     c00154d0 <terminateTask(int)+0xac>
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c001547c:	50                   	push   eax
c001547d:	e8 42 fb ff ff       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c0015482:	83 c4 10             	add    esp,0x10
c0015485:	8d 76 00             	lea    esi,[esi+0x0]
c0015488:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001548d:	48                   	dec    eax
c001548e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015493:	75 03                	jne    c0015498 <terminateTask(int)+0x74>
c0015495:	fb                   	sti    
c0015496:	66 90                	xchg   ax,ax
c0015498:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001549d:	48                   	dec    eax
c001549e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00154a3:	75 0b                	jne    c00154b0 <terminateTask(int)+0x8c>
c00154a5:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c00154ac:	75 36                	jne    c00154e4 <terminateTask(int)+0xc0>
c00154ae:	66 90                	xchg   ax,ax
c00154b0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154b5:	48                   	dec    eax
c00154b6:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154bb:	75 03                	jne    c00154c0 <terminateTask(int)+0x9c>
c00154bd:	fb                   	sti    
c00154be:	66 90                	xchg   ax,ax
c00154c0:	fa                   	cli    
c00154c1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00154c7:	90                   	nop
c00154c8:	e8 33 f6 ff ff       	call   c0014b00 <schedule()>
c00154cd:	eb e1                	jmp    c00154b0 <terminateTask(int)+0x8c>
c00154cf:	90                   	nop
c00154d0:	83 ec 0c             	sub    esp,0xc
c00154d3:	68 d2 09 02 c0       	push   0xc00209d2
c00154d8:	e8 31 51 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	eb a6                	jmp    c0015488 <terminateTask(int)+0x64>
c00154e2:	66 90                	xchg   ax,ax
c00154e4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00154ee:	eb d8                	jmp    c00154c8 <terminateTask(int)+0xa4>

c00154f0 <Thr::terminateFromIRQ(int)>:
c00154f0:	83 ec 18             	sub    esp,0x18
c00154f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00154f7:	50                   	push   eax
c00154f8:	e8 27 ff ff ff       	call   c0015424 <terminateTask(int)>
c00154fd:	90                   	nop
c00154fe:	66 90                	xchg   ax,ax

c0015500 <Semaphore::release()>:
c0015500:	83 ec 0c             	sub    esp,0xc
c0015503:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015507:	fa                   	cli    
c0015508:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001550d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015513:	8d 48 01             	lea    ecx,[eax+0x1]
c0015516:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c001551c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001551f:	85 c9                	test   ecx,ecx
c0015521:	74 41                	je     c0015564 <Semaphore::release()+0x64>
c0015523:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015526:	83 ec 0c             	sub    esp,0xc
c0015529:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001552c:	51                   	push   ecx
c001552d:	e8 92 fa ff ff       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c0015532:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	48                   	dec    eax
c001553b:	90                   	nop
c001553c:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015541:	85 c0                	test   eax,eax
c0015543:	75 0b                	jne    c0015550 <Semaphore::release()+0x50>
c0015545:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001554a:	85 c0                	test   eax,eax
c001554c:	75 1e                	jne    c001556c <Semaphore::release()+0x6c>
c001554e:	66 90                	xchg   ax,ax
c0015550:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015555:	48                   	dec    eax
c0015556:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001555b:	75 03                	jne    c0015560 <Semaphore::release()+0x60>
c001555d:	fb                   	sti    
c001555e:	66 90                	xchg   ax,ax
c0015560:	83 c4 0c             	add    esp,0xc
c0015563:	c3                   	ret    
c0015564:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015567:	eb d3                	jmp    c001553c <Semaphore::release()+0x3c>
c0015569:	8d 76 00             	lea    esi,[esi+0x0]
c001556c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015576:	e8 85 f5 ff ff       	call   c0014b00 <schedule()>
c001557b:	eb d3                	jmp    c0015550 <Semaphore::release()+0x50>
c001557d:	8d 76 00             	lea    esi,[esi+0x0]

c0015580 <__static_initialization_and_destruction_0(int, int)>:
c0015580:	83 ec 0c             	sub    esp,0xc
c0015583:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015588:	0f 85 8e 00 00 00    	jne    c001561c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001558e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015596:	0f 85 80 00 00 00    	jne    c001561c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001559c:	83 ec 0c             	sub    esp,0xc
c001559f:	68 84 71 02 c0       	push   0xc0027184
c00155a4:	e8 b7 91 00 00       	call   c001e760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	83 ec 04             	sub    esp,0x4
c00155af:	68 68 16 02 c0       	push   0xc0021668
c00155b4:	68 84 71 02 c0       	push   0xc0027184
c00155b9:	68 10 e7 01 c0       	push   0xc001e710
c00155be:	e8 05 4f ff ff       	call   c000a4c8 <__cxa_atexit>
c00155c3:	83 c4 10             	add    esp,0x10
c00155c6:	83 ec 0c             	sub    esp,0xc
c00155c9:	68 78 71 02 c0       	push   0xc0027178
c00155ce:	e8 8d 91 00 00       	call   c001e760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00155d3:	83 c4 10             	add    esp,0x10
c00155d6:	83 ec 04             	sub    esp,0x4
c00155d9:	68 68 16 02 c0       	push   0xc0021668
c00155de:	68 78 71 02 c0       	push   0xc0027178
c00155e3:	68 10 e7 01 c0       	push   0xc001e710
c00155e8:	e8 db 4e ff ff       	call   c000a4c8 <__cxa_atexit>
c00155ed:	83 c4 10             	add    esp,0x10
c00155f0:	83 ec 0c             	sub    esp,0xc
c00155f3:	68 6c 71 02 c0       	push   0xc002716c
c00155f8:	e8 63 91 00 00       	call   c001e760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00155fd:	83 c4 10             	add    esp,0x10
c0015600:	83 ec 04             	sub    esp,0x4
c0015603:	68 68 16 02 c0       	push   0xc0021668
c0015608:	68 6c 71 02 c0       	push   0xc002716c
c001560d:	68 10 e7 01 c0       	push   0xc001e710
c0015612:	e8 b1 4e ff ff       	call   c000a4c8 <__cxa_atexit>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	66 90                	xchg   ax,ax
c001561c:	90                   	nop
c001561d:	83 c4 0c             	add    esp,0xc
c0015620:	c3                   	ret    
c0015621:	8d 76 00             	lea    esi,[esi+0x0]

c0015624 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015624:	83 ec 0c             	sub    esp,0xc
c0015627:	83 ec 08             	sub    esp,0x8
c001562a:	68 ff ff 00 00       	push   0xffff
c001562f:	6a 01                	push   0x1
c0015631:	e8 4a ff ff ff       	call   c0015580 <__static_initialization_and_destruction_0(int, int)>
c0015636:	83 c4 10             	add    esp,0x10
c0015639:	83 c4 0c             	add    esp,0xc
c001563c:	c3                   	ret    

c001563d <Vm::inbv(unsigned short)>:
c001563d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015641:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015646:	75 06                	jne    c001564e <Vm::inbv(unsigned short)+0x11>
c0015648:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c001564d:	c3                   	ret    
c001564e:	ec                   	in     al,dx
c001564f:	c3                   	ret    

c0015650 <Vm::outbv(unsigned short, unsigned char)>:
c0015650:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015658:	66 81 fa fe fe       	cmp    dx,0xfefe
c001565d:	75 25                	jne    c0015684 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001565f:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015665:	8d 51 01             	lea    edx,[ecx+0x1]
c0015668:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c001566e:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c0015674:	83 fa 20             	cmp    edx,0x20
c0015677:	75 0c                	jne    c0015685 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015679:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c0015683:	c3                   	ret    
c0015684:	ee                   	out    dx,al
c0015685:	c3                   	ret    

c0015686 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015686:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001568b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015690:	c1 e0 04             	shl    eax,0x4
c0015693:	01 d0                	add    eax,edx
c0015695:	c3                   	ret    

c0015696 <Vm::getSegment(unsigned int)>:
c0015696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001569a:	c1 e8 10             	shr    eax,0x10
c001569d:	c3                   	ret    

c001569e <Vm::getOffset(unsigned int)>:
c001569e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00156a2:	c3                   	ret    

c00156a3 <Vm::mainloop2()>:
c00156a3:	83 ec 18             	sub    esp,0x18
c00156a6:	fa                   	cli    
c00156a7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00156ad:	6a 02                	push   0x2
c00156af:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c00156b6:	e8 19 f6 ff ff       	call   c0014cd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00156bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00156c4:	52                   	push   edx
c00156c5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00156c9:	52                   	push   edx
c00156ca:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00156ce:	52                   	push   edx
c00156cf:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00156d3:	50                   	push   eax
c00156d4:	e8 36 ab fe ff       	call   c000020f <goToVM86>
c00156d9:	83 c4 2c             	add    esp,0x2c
c00156dc:	c3                   	ret    

c00156dd <Vm::mainVm8086Loop(void*)>:
c00156dd:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00156e2:	48                   	dec    eax
c00156e3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00156e8:	75 01                	jne    c00156eb <Vm::mainVm8086Loop(void*)+0xe>
c00156ea:	fb                   	sti    
c00156eb:	eb b6                	jmp    c00156a3 <Vm::mainloop2()>

c00156ed <Vm::mainloop3(unsigned long)>:
c00156ed:	83 ec 18             	sub    esp,0x18
c00156f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156f4:	fa                   	cli    
c00156f5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00156fb:	6a 02                	push   0x2
c00156fd:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c0015704:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c0015709:	e8 c6 f5 ff ff       	call   c0014cd4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001570e:	83 c4 1c             	add    esp,0x1c
c0015711:	eb 90                	jmp    c00156a3 <Vm::mainloop2()>

c0015713 <Vm::initialise8086()>:
c0015713:	83 ec 0c             	sub    esp,0xc
c0015716:	68 80 00 00 00       	push   0x80
c001571b:	6a 00                	push   0x0
c001571d:	68 dd 56 01 c0       	push   0xc00156dd
c0015722:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015728:	e8 8b f1 ff ff       	call   c00148b8 <Process::createThread(void (*)(void*), void*, int)>
c001572d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015734:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c0015739:	68 00 01 00 00       	push   0x100
c001573e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015743:	6a 00                	push   0x0
c0015745:	6a 00                	push   0x0
c0015747:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001574d:	e8 bc 45 ff ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015752:	83 c4 2c             	add    esp,0x2c
c0015755:	c3                   	ret    

c0015756 <Vm::finish8086()>:
c0015756:	53                   	push   ebx
c0015757:	83 ec 08             	sub    esp,0x8
c001575a:	fa                   	cli    
c001575b:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015761:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015768:	75 15                	jne    c001577f <Vm::finish8086()+0x29>
c001576a:	e8 91 f3 ff ff       	call   c0014b00 <schedule()>
c001576f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015774:	48                   	dec    eax
c0015775:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001577a:	75 de                	jne    c001575a <Vm::finish8086()+0x4>
c001577c:	fb                   	sti    
c001577d:	eb db                	jmp    c001575a <Vm::finish8086()+0x4>
c001577f:	83 ec 0c             	sub    esp,0xc
c0015782:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015788:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001578e:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c0015795:	e8 2a f8 ff ff       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c001579a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	8d 50 ff             	lea    edx,[eax-0x1]
c00157a5:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00157ab:	85 d2                	test   edx,edx
c00157ad:	75 01                	jne    c00157b0 <Vm::finish8086()+0x5a>
c00157af:	fb                   	sti    
c00157b0:	89 d8                	mov    eax,ebx
c00157b2:	83 c4 08             	add    esp,0x8
c00157b5:	5b                   	pop    ebx
c00157b6:	c3                   	ret    

c00157b7 <Vm::getOutput8086(unsigned char*)>:
c00157b7:	57                   	push   edi
c00157b8:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c00157be:	56                   	push   esi
c00157bf:	be e0 71 02 c0       	mov    esi,0xc00271e0
c00157c4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00157c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00157ca:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c00157cf:	5e                   	pop    esi
c00157d0:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00157da:	5f                   	pop    edi
c00157db:	c3                   	ret    

c00157dc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00157dc:	55                   	push   ebp
c00157dd:	57                   	push   edi
c00157de:	56                   	push   esi
c00157df:	53                   	push   ebx
c00157e0:	83 ec 0c             	sub    esp,0xc
c00157e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00157e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00157eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00157ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00157f3:	fa                   	cli    
c00157f4:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00157fa:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c0015801:	75 15                	jne    c0015818 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015803:	e8 f8 f2 ff ff       	call   c0014b00 <schedule()>
c0015808:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001580d:	48                   	dec    eax
c001580e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015813:	75 de                	jne    c00157f3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015815:	fb                   	sti    
c0015816:	eb db                	jmp    c00157f3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015818:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c001581d:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015827:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001582b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001582f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015833:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015837:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001583b:	0f b7 ff             	movzx  edi,di
c001583e:	0f b7 f6             	movzx  esi,si
c0015841:	50                   	push   eax
c0015842:	6a 20                	push   0x20
c0015844:	6a 00                	push   0x0
c0015846:	68 e0 71 02 c0       	push   0xc00271e0
c001584b:	e8 70 ac fe ff       	call   c00004c0 <memset>
c0015850:	5a                   	pop    edx
c0015851:	59                   	pop    ecx
c0015852:	57                   	push   edi
c0015853:	56                   	push   esi
c0015854:	e8 2d fe ff ff       	call   c0015686 <Vm::realToLinear(unsigned short, unsigned short)>
c0015859:	83 c4 10             	add    esp,0x10
c001585c:	89 c7                	mov    edi,eax
c001585e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015862:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015866:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015868:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001586d:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015874:	48                   	dec    eax
c0015875:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001587a:	75 01                	jne    c001587d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001587c:	fb                   	sti    
c001587d:	83 ec 0c             	sub    esp,0xc
c0015880:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015886:	e8 39 f7 ff ff       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c001588b:	83 c4 1c             	add    esp,0x1c
c001588e:	b0 01                	mov    al,0x1
c0015890:	5b                   	pop    ebx
c0015891:	5e                   	pop    esi
c0015892:	5f                   	pop    edi
c0015893:	5d                   	pop    ebp
c0015894:	c3                   	ret    

c0015895 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015895:	55                   	push   ebp
c0015896:	57                   	push   edi
c0015897:	56                   	push   esi
c0015898:	53                   	push   ebx
c0015899:	83 ec 2c             	sub    esp,0x2c
c001589c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00158a0:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00158a4:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00158a8:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00158ac:	fa                   	cli    
c00158ad:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00158b3:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c00158ba:	89 f0                	mov    eax,esi
c00158bc:	84 c0                	test   al,al
c00158be:	75 1d                	jne    c00158dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c00158c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00158c4:	e8 37 f2 ff ff       	call   c0014b00 <schedule()>
c00158c9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00158ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00158d2:	48                   	dec    eax
c00158d3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00158d8:	75 d2                	jne    c00158ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00158da:	fb                   	sti    
c00158db:	eb cf                	jmp    c00158ac <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00158dd:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00158e2:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00158ec:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00158f0:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00158f4:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00158f8:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00158fc:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015900:	50                   	push   eax
c0015901:	6a 20                	push   0x20
c0015903:	6a 00                	push   0x0
c0015905:	68 e0 71 02 c0       	push   0xc00271e0
c001590a:	e8 b1 ab fe ff       	call   c00004c0 <memset>
c001590f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015916:	e8 52 1f ff ff       	call   c000786d <malloc>
c001591b:	83 c4 0c             	add    esp,0xc
c001591e:	89 c3                	mov    ebx,eax
c0015920:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0015926:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001592a:	50                   	push   eax
c001592b:	e8 54 52 ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	85 db                	test   ebx,ebx
c0015935:	75 0a                	jne    c0015941 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015937:	83 ec 0c             	sub    esp,0xc
c001593a:	68 fc 0a 02 c0       	push   0xc0020afc
c001593f:	eb 3e                	jmp    c001597f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015941:	50                   	push   eax
c0015942:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015946:	50                   	push   eax
c0015947:	8d 44 24 20          	lea    eax,[esp+0x20]
c001594b:	50                   	push   eax
c001594c:	53                   	push   ebx
c001594d:	e8 9e 55 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0015952:	83 c4 10             	add    esp,0x10
c0015955:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001595a:	74 0a                	je     c0015966 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001595c:	83 ec 0c             	sub    esp,0xc
c001595f:	68 10 0b 02 c0       	push   0xc0020b10
c0015964:	eb 19                	jmp    c001597f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015966:	51                   	push   ecx
c0015967:	51                   	push   ecx
c0015968:	6a 01                	push   0x1
c001596a:	53                   	push   ebx
c001596b:	e8 d4 52 ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0015970:	83 c4 10             	add    esp,0x10
c0015973:	85 c0                	test   eax,eax
c0015975:	74 24                	je     c001599b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0015977:	83 ec 0c             	sub    esp,0xc
c001597a:	68 29 0b 02 c0       	push   0xc0020b29
c001597f:	e8 4b aa ff ff       	call   c00103cf <KePanic(char const*)>
c0015984:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	48                   	dec    eax
c001598d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015992:	85 c0                	test   eax,eax
c0015994:	75 01                	jne    c0015997 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0015996:	fb                   	sti    
c0015997:	31 f6                	xor    esi,esi
c0015999:	eb 58                	jmp    c00159f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001599b:	0f b7 ed             	movzx  ebp,bp
c001599e:	50                   	push   eax
c001599f:	0f b7 ff             	movzx  edi,di
c00159a2:	50                   	push   eax
c00159a3:	55                   	push   ebp
c00159a4:	57                   	push   edi
c00159a5:	e8 dc fc ff ff       	call   c0015686 <Vm::realToLinear(unsigned short, unsigned short)>
c00159aa:	5a                   	pop    edx
c00159ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00159ad:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00159b1:	51                   	push   ecx
c00159b2:	50                   	push   eax
c00159b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00159b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00159bb:	53                   	push   ebx
c00159bc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00159bf:	83 c4 14             	add    esp,0x14
c00159c2:	53                   	push   ebx
c00159c3:	e8 da 52 ff ff       	call   c000aca2 <File::close()>
c00159c8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00159cd:	83 c4 10             	add    esp,0x10
c00159d0:	48                   	dec    eax
c00159d1:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c00159d8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00159dd:	85 c0                	test   eax,eax
c00159df:	75 01                	jne    c00159e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00159e1:	fb                   	sti    
c00159e2:	83 ec 0c             	sub    esp,0xc
c00159e5:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c00159eb:	e8 d4 f5 ff ff       	call   c0014fc4 <unblockTask(ThreadControlBlock*)>
c00159f0:	83 c4 10             	add    esp,0x10
c00159f3:	83 c4 2c             	add    esp,0x2c
c00159f6:	89 f0                	mov    eax,esi
c00159f8:	5b                   	pop    ebx
c00159f9:	5e                   	pop    esi
c00159fa:	5f                   	pop    edi
c00159fb:	5d                   	pop    ebp
c00159fc:	c3                   	ret    

c00159fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00159fd:	57                   	push   edi
c00159fe:	56                   	push   esi
c00159ff:	53                   	push   ebx
c0015a00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a0c:	83 e8 06             	sub    eax,0x6
c0015a0f:	0f b7 c0             	movzx  eax,ax
c0015a12:	50                   	push   eax
c0015a13:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015a18:	50                   	push   eax
c0015a19:	e8 68 fc ff ff       	call   c0015686 <Vm::realToLinear(unsigned short, unsigned short)>
c0015a1e:	5a                   	pop    edx
c0015a1f:	5e                   	pop    esi
c0015a20:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015a23:	8d 56 fa             	lea    edx,[esi-0x6]
c0015a26:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015a2c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015a2f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0015a32:	83 c2 02             	add    edx,0x2
c0015a35:	66 89 10             	mov    WORD PTR [eax],dx
c0015a38:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015a3b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015a3f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015a42:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015a46:	89 d6                	mov    esi,edx
c0015a48:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015a4e:	66 81 e6 ff fd       	and    si,0xfdff
c0015a53:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015a57:	74 07                	je     c0015a60 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015a59:	89 d6                	mov    esi,edx
c0015a5b:	66 81 ce 00 02       	or     si,0x200
c0015a60:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015a64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a69:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015a6d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015a75:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015a78:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015a80:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015a83:	5b                   	pop    ebx
c0015a84:	5e                   	pop    esi
c0015a85:	5f                   	pop    edi
c0015a86:	c3                   	ret    

c0015a87 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015a87:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a8c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015a91:	c1 e0 04             	shl    eax,0x4
c0015a94:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015a97:	c3                   	ret    

c0015a98 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015a98:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015a9d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015aa2:	c1 e0 04             	shl    eax,0x4
c0015aa5:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015aa9:	c3                   	ret    

c0015aaa <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015aaa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015aaf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015ab4:	c1 e0 04             	shl    eax,0x4
c0015ab7:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015aba:	c3                   	ret    

c0015abb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015abb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015ac0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015ac5:	c1 e0 04             	shl    eax,0x4
c0015ac8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015acc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015acf:	c3                   	ret    

c0015ad0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015ad0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015ad5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015ada:	c1 e0 04             	shl    eax,0x4
c0015add:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ae1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015ae5:	c3                   	ret    

c0015ae6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015ae6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015aeb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015af0:	c1 e0 04             	shl    eax,0x4
c0015af3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015af7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015afa:	c3                   	ret    

c0015afb <Vm::faultHandler(regs*)>:
c0015afb:	55                   	push   ebp
c0015afc:	57                   	push   edi
c0015afd:	56                   	push   esi
c0015afe:	53                   	push   ebx
c0015aff:	83 ec 1c             	sub    esp,0x1c
c0015b02:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015b06:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015b09:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015b0d:	0f b7 f8             	movzx  edi,ax
c0015b10:	52                   	push   edx
c0015b11:	0f b7 c0             	movzx  eax,ax
c0015b14:	50                   	push   eax
c0015b15:	e8 6c fb ff ff       	call   c0015686 <Vm::realToLinear(unsigned short, unsigned short)>
c0015b1a:	5a                   	pop    edx
c0015b1b:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0015b1e:	59                   	pop    ecx
c0015b1f:	89 c1                	mov    ecx,eax
c0015b21:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015b24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015b31:	0f b7 c5             	movzx  eax,bp
c0015b34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b38:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015b3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b40:	e8 41 fb ff ff       	call   c0015686 <Vm::realToLinear(unsigned short, unsigned short)>
c0015b45:	5e                   	pop    esi
c0015b46:	be 06 00 00 00       	mov    esi,0x6
c0015b4b:	5a                   	pop    edx
c0015b4c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015b51:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0015b56:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015b59:	80 fa 9d             	cmp    dl,0x9d
c0015b5c:	0f 84 2c 02 00 00    	je     c0015d8e <Vm::faultHandler(regs*)+0x293>
c0015b62:	0f 87 91 00 00 00    	ja     c0015bf9 <Vm::faultHandler(regs*)+0xfe>
c0015b68:	80 fa 66             	cmp    dl,0x66
c0015b6b:	0f 84 98 01 00 00    	je     c0015d09 <Vm::faultHandler(regs*)+0x20e>
c0015b71:	77 47                	ja     c0015bba <Vm::faultHandler(regs*)+0xbf>
c0015b73:	80 fa 36             	cmp    dl,0x36
c0015b76:	0f 84 80 01 00 00    	je     c0015cfc <Vm::faultHandler(regs*)+0x201>
c0015b7c:	77 1a                	ja     c0015b98 <Vm::faultHandler(regs*)+0x9d>
c0015b7e:	80 fa 26             	cmp    dl,0x26
c0015b81:	0f 84 4e 01 00 00    	je     c0015cd5 <Vm::faultHandler(regs*)+0x1da>
c0015b87:	80 fa 2e             	cmp    dl,0x2e
c0015b8a:	0f 85 e2 05 00 00    	jne    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015b90:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015b93:	31 f6                	xor    esi,esi
c0015b95:	41                   	inc    ecx
c0015b96:	eb be                	jmp    c0015b56 <Vm::faultHandler(regs*)+0x5b>
c0015b98:	80 fa 64             	cmp    dl,0x64
c0015b9b:	0f 84 41 01 00 00    	je     c0015ce2 <Vm::faultHandler(regs*)+0x1e7>
c0015ba1:	0f 87 48 01 00 00    	ja     c0015cef <Vm::faultHandler(regs*)+0x1f4>
c0015ba7:	80 fa 3e             	cmp    dl,0x3e
c0015baa:	0f 85 c2 05 00 00    	jne    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015bb0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015bb3:	be 01 00 00 00       	mov    esi,0x1
c0015bb8:	eb db                	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015bba:	80 fa 6d             	cmp    dl,0x6d
c0015bbd:	0f 84 ec 02 00 00    	je     c0015eaf <Vm::faultHandler(regs*)+0x3b4>
c0015bc3:	77 17                	ja     c0015bdc <Vm::faultHandler(regs*)+0xe1>
c0015bc5:	80 fa 67             	cmp    dl,0x67
c0015bc8:	0f 84 48 01 00 00    	je     c0015d16 <Vm::faultHandler(regs*)+0x21b>
c0015bce:	80 fa 6c             	cmp    dl,0x6c
c0015bd1:	0f 84 69 02 00 00    	je     c0015e40 <Vm::faultHandler(regs*)+0x345>
c0015bd7:	e9 96 05 00 00       	jmp    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015bdc:	80 fa 6f             	cmp    dl,0x6f
c0015bdf:	0f 84 f4 03 00 00    	je     c0015fd9 <Vm::faultHandler(regs*)+0x4de>
c0015be5:	0f 82 59 03 00 00    	jb     c0015f44 <Vm::faultHandler(regs*)+0x449>
c0015beb:	80 fa 9c             	cmp    dl,0x9c
c0015bee:	0f 84 2f 01 00 00    	je     c0015d23 <Vm::faultHandler(regs*)+0x228>
c0015bf4:	e9 79 05 00 00       	jmp    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015bf9:	80 fa ec             	cmp    dl,0xec
c0015bfc:	0f 84 14 05 00 00    	je     c0016116 <Vm::faultHandler(regs*)+0x61b>
c0015c02:	77 7b                	ja     c0015c7f <Vm::faultHandler(regs*)+0x184>
c0015c04:	80 fa e4             	cmp    dl,0xe4
c0015c07:	0f 84 93 04 00 00    	je     c00160a0 <Vm::faultHandler(regs*)+0x5a5>
c0015c0d:	77 53                	ja     c0015c62 <Vm::faultHandler(regs*)+0x167>
c0015c0f:	80 fa cd             	cmp    dl,0xcd
c0015c12:	0f 84 d9 01 00 00    	je     c0015df1 <Vm::faultHandler(regs*)+0x2f6>
c0015c18:	80 fa cf             	cmp    dl,0xcf
c0015c1b:	0f 85 51 05 00 00    	jne    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015c21:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015c24:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0015c27:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015c2b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015c2e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015c32:	81 ca 00 02 02 00    	or     edx,0x20200
c0015c38:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015c3b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015c3f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015c45:	66 c1 e8 09          	shr    ax,0x9
c0015c49:	83 e0 01             	and    eax,0x1
c0015c4c:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015c4f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015c52:	83 c0 06             	add    eax,0x6
c0015c55:	25 ff ff 00 00       	and    eax,0xffff
c0015c5a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015c5d:	e9 0c 05 00 00       	jmp    c001616e <Vm::faultHandler(regs*)+0x673>
c0015c62:	80 fa e6             	cmp    dl,0xe6
c0015c65:	0f 84 7f 04 00 00    	je     c00160ea <Vm::faultHandler(regs*)+0x5ef>
c0015c6b:	0f 82 4b 04 00 00    	jb     c00160bc <Vm::faultHandler(regs*)+0x5c1>
c0015c71:	80 fa e7             	cmp    dl,0xe7
c0015c74:	0f 84 87 04 00 00    	je     c0016101 <Vm::faultHandler(regs*)+0x606>
c0015c7a:	e9 f3 04 00 00       	jmp    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015c7f:	80 fa ef             	cmp    dl,0xef
c0015c82:	0f 84 d1 04 00 00    	je     c0016159 <Vm::faultHandler(regs*)+0x65e>
c0015c88:	77 28                	ja     c0015cb2 <Vm::faultHandler(regs*)+0x1b7>
c0015c8a:	80 fa ed             	cmp    dl,0xed
c0015c8d:	0f 84 9f 04 00 00    	je     c0016132 <Vm::faultHandler(regs*)+0x637>
c0015c93:	80 fa ee             	cmp    dl,0xee
c0015c96:	0f 85 d6 04 00 00    	jne    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015c9c:	50                   	push   eax
c0015c9d:	50                   	push   eax
c0015c9e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015ca2:	50                   	push   eax
c0015ca3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015ca7:	50                   	push   eax
c0015ca8:	e8 a3 f9 ff ff       	call   c0015650 <Vm::outbv(unsigned short, unsigned char)>
c0015cad:	e9 9f 04 00 00       	jmp    c0016151 <Vm::faultHandler(regs*)+0x656>
c0015cb2:	80 fa fa             	cmp    dl,0xfa
c0015cb5:	0f 84 69 01 00 00    	je     c0015e24 <Vm::faultHandler(regs*)+0x329>
c0015cbb:	80 fa fb             	cmp    dl,0xfb
c0015cbe:	0f 84 6e 01 00 00    	je     c0015e32 <Vm::faultHandler(regs*)+0x337>
c0015cc4:	80 fa f3             	cmp    dl,0xf3
c0015cc7:	0f 85 a5 04 00 00    	jne    c0016172 <Vm::faultHandler(regs*)+0x677>
c0015ccd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015cd0:	e9 c0 fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015cd5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015cd8:	be 02 00 00 00       	mov    esi,0x2
c0015cdd:	e9 b3 fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015ce2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015ce5:	be 03 00 00 00       	mov    esi,0x3
c0015cea:	e9 a6 fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015cef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015cf2:	be 04 00 00 00       	mov    esi,0x4
c0015cf7:	e9 99 fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015cfc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015cff:	be 05 00 00 00       	mov    esi,0x5
c0015d04:	e9 8c fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015d09:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d0c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015d11:	e9 7f fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015d16:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d19:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015d1e:	e9 72 fe ff ff       	jmp    c0015b95 <Vm::faultHandler(regs*)+0x9a>
c0015d23:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0015d26:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015d2f:	74 30                	je     c0015d61 <Vm::faultHandler(regs*)+0x266>
c0015d31:	83 e9 04             	sub    ecx,0x4
c0015d34:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015d3a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015d40:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015d43:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015d46:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d4c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015d50:	0f 84 15 04 00 00    	je     c001616b <Vm::faultHandler(regs*)+0x670>
c0015d56:	80 ce 02             	or     dh,0x2
c0015d59:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015d5c:	e9 0a 04 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015d61:	83 e9 02             	sub    ecx,0x2
c0015d64:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015d6a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015d6d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015d71:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d77:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015d7b:	74 05                	je     c0015d82 <Vm::faultHandler(regs*)+0x287>
c0015d7d:	80 ce 02             	or     dh,0x2
c0015d80:	eb 03                	jmp    c0015d85 <Vm::faultHandler(regs*)+0x28a>
c0015d82:	80 e6 fd             	and    dh,0xfd
c0015d85:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015d89:	e9 dd 03 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015d8e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015d93:	74 2a                	je     c0015dbf <Vm::faultHandler(regs*)+0x2c4>
c0015d95:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d97:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015d9d:	81 ca 00 02 02 00    	or     edx,0x20200
c0015da3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015da8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dae:	c1 e8 09             	shr    eax,0x9
c0015db1:	83 e0 01             	and    eax,0x1
c0015db4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015db7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015dba:	83 c0 04             	add    eax,0x4
c0015dbd:	eb 25                	jmp    c0015de4 <Vm::faultHandler(regs*)+0x2e9>
c0015dbf:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015dc2:	81 ca 00 02 02 00    	or     edx,0x20200
c0015dc8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015dcb:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015dce:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015dd4:	66 c1 e8 09          	shr    ax,0x9
c0015dd8:	83 e0 01             	and    eax,0x1
c0015ddb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015dde:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015de1:	83 c0 02             	add    eax,0x2
c0015de4:	25 ff ff 00 00       	and    eax,0xffff
c0015de9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015dec:	e9 7a 03 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015df1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015df5:	3c ee                	cmp    al,0xee
c0015df7:	75 10                	jne    c0015e09 <Vm::faultHandler(regs*)+0x30e>
c0015df9:	83 ec 0c             	sub    esp,0xc
c0015dfc:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015dff:	e8 e9 f8 ff ff       	call   c00156ed <Vm::mainloop3(unsigned long)>
c0015e04:	e9 4b 03 00 00       	jmp    c0016154 <Vm::faultHandler(regs*)+0x659>
c0015e09:	83 ec 0c             	sub    esp,0xc
c0015e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e14:	51                   	push   ecx
c0015e15:	50                   	push   eax
c0015e16:	53                   	push   ebx
c0015e17:	e8 e1 fb ff ff       	call   c00159fd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015e1c:	83 c4 20             	add    esp,0x20
c0015e1f:	e9 4a 03 00 00       	jmp    c001616e <Vm::faultHandler(regs*)+0x673>
c0015e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e29:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015e2d:	e9 39 03 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015e32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e37:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015e3b:	e9 2b 03 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015e40:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015e43:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e48:	74 2b                	je     c0015e75 <Vm::faultHandler(regs*)+0x37a>
c0015e4a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015e51:	76 22                	jbe    c0015e75 <Vm::faultHandler(regs*)+0x37a>
c0015e53:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015e57:	50                   	push   eax
c0015e58:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015e5c:	50                   	push   eax
c0015e5d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015e61:	50                   	push   eax
c0015e62:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015e66:	50                   	push   eax
c0015e67:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e6b:	50                   	push   eax
c0015e6c:	6a 6c                	push   0x6c
c0015e6e:	6a 6c                	push   0x6c
c0015e70:	e9 b9 01 00 00       	jmp    c001602e <Vm::faultHandler(regs*)+0x533>
c0015e75:	83 ec 0c             	sub    esp,0xc
c0015e78:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015e7c:	0f b7 f6             	movzx  esi,si
c0015e7f:	50                   	push   eax
c0015e80:	e8 b8 f7 ff ff       	call   c001563d <Vm::inbv(unsigned short)>
c0015e85:	83 c4 0c             	add    esp,0xc
c0015e88:	0f b6 c0             	movzx  eax,al
c0015e8b:	50                   	push   eax
c0015e8c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015e90:	50                   	push   eax
c0015e91:	56                   	push   esi
c0015e92:	e8 24 fc ff ff       	call   c0015abb <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015e97:	83 c4 10             	add    esp,0x10
c0015e9a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015e9d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015ea1:	74 03                	je     c0015ea6 <Vm::faultHandler(regs*)+0x3ab>
c0015ea3:	48                   	dec    eax
c0015ea4:	eb 01                	jmp    c0015ea7 <Vm::faultHandler(regs*)+0x3ac>
c0015ea6:	40                   	inc    eax
c0015ea7:	0f b7 c0             	movzx  eax,ax
c0015eaa:	e9 8d 00 00 00       	jmp    c0015f3c <Vm::faultHandler(regs*)+0x441>
c0015eaf:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015eb2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015eb5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015eba:	74 29                	je     c0015ee5 <Vm::faultHandler(regs*)+0x3ea>
c0015ebc:	3d ff ff 00 00       	cmp    eax,0xffff
c0015ec1:	76 22                	jbe    c0015ee5 <Vm::faultHandler(regs*)+0x3ea>
c0015ec3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015ec7:	50                   	push   eax
c0015ec8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015ecc:	50                   	push   eax
c0015ecd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015ed1:	50                   	push   eax
c0015ed2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015ed6:	50                   	push   eax
c0015ed7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015edb:	50                   	push   eax
c0015edc:	6a 6d                	push   0x6d
c0015ede:	6a 6d                	push   0x6d
c0015ee0:	e9 49 01 00 00       	jmp    c001602e <Vm::faultHandler(regs*)+0x533>
c0015ee5:	0f b7 c8             	movzx  ecx,ax
c0015ee8:	0f b7 f6             	movzx  esi,si
c0015eeb:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015eee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015ef3:	74 20                	je     c0015f15 <Vm::faultHandler(regs*)+0x41a>
c0015ef5:	ed                   	in     eax,dx
c0015ef6:	55                   	push   ebp
c0015ef7:	50                   	push   eax
c0015ef8:	51                   	push   ecx
c0015ef9:	56                   	push   esi
c0015efa:	e8 e7 fb ff ff       	call   c0015ae6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f05:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015f09:	74 05                	je     c0015f10 <Vm::faultHandler(regs*)+0x415>
c0015f0b:	83 e8 04             	sub    eax,0x4
c0015f0e:	eb 27                	jmp    c0015f37 <Vm::faultHandler(regs*)+0x43c>
c0015f10:	83 c0 04             	add    eax,0x4
c0015f13:	eb 22                	jmp    c0015f37 <Vm::faultHandler(regs*)+0x43c>
c0015f15:	66 ed                	in     ax,dx
c0015f17:	0f b7 c0             	movzx  eax,ax
c0015f1a:	57                   	push   edi
c0015f1b:	50                   	push   eax
c0015f1c:	51                   	push   ecx
c0015f1d:	56                   	push   esi
c0015f1e:	e8 ad fb ff ff       	call   c0015ad0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015f23:	83 c4 10             	add    esp,0x10
c0015f26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f29:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015f2d:	74 05                	je     c0015f34 <Vm::faultHandler(regs*)+0x439>
c0015f2f:	83 e8 02             	sub    eax,0x2
c0015f32:	eb 03                	jmp    c0015f37 <Vm::faultHandler(regs*)+0x43c>
c0015f34:	83 c0 02             	add    eax,0x2
c0015f37:	25 ff ff 00 00       	and    eax,0xffff
c0015f3c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015f3f:	e9 27 02 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015f44:	8d 46 ff             	lea    eax,[esi-0x1]
c0015f47:	3c 05                	cmp    al,0x5
c0015f49:	77 24                	ja     c0015f6f <Vm::faultHandler(regs*)+0x474>
c0015f4b:	0f b6 c0             	movzx  eax,al
c0015f4e:	ff 24 85 9c 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf464]
c0015f55:	0f b7 fd             	movzx  edi,bp
c0015f58:	eb 15                	jmp    c0015f6f <Vm::faultHandler(regs*)+0x474>
c0015f5a:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015f5e:	eb 0f                	jmp    c0015f6f <Vm::faultHandler(regs*)+0x474>
c0015f60:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015f64:	eb 09                	jmp    c0015f6f <Vm::faultHandler(regs*)+0x474>
c0015f66:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015f6a:	eb 03                	jmp    c0015f6f <Vm::faultHandler(regs*)+0x474>
c0015f6c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015f6f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015f72:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f77:	74 29                	je     c0015fa2 <Vm::faultHandler(regs*)+0x4a7>
c0015f79:	3d ff ff 00 00       	cmp    eax,0xffff
c0015f7e:	76 22                	jbe    c0015fa2 <Vm::faultHandler(regs*)+0x4a7>
c0015f80:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015f84:	50                   	push   eax
c0015f85:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015f89:	50                   	push   eax
c0015f8a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015f8e:	50                   	push   eax
c0015f8f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f93:	50                   	push   eax
c0015f94:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f98:	50                   	push   eax
c0015f99:	6a 6e                	push   0x6e
c0015f9b:	6a 6e                	push   0x6e
c0015f9d:	e9 8c 00 00 00       	jmp    c001602e <Vm::faultHandler(regs*)+0x533>
c0015fa2:	0f b7 c0             	movzx  eax,ax
c0015fa5:	52                   	push   edx
c0015fa6:	52                   	push   edx
c0015fa7:	50                   	push   eax
c0015fa8:	57                   	push   edi
c0015fa9:	e8 d9 fa ff ff       	call   c0015a87 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015fae:	59                   	pop    ecx
c0015faf:	0f b6 c0             	movzx  eax,al
c0015fb2:	5e                   	pop    esi
c0015fb3:	50                   	push   eax
c0015fb4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015fb8:	50                   	push   eax
c0015fb9:	e8 92 f6 ff ff       	call   c0015650 <Vm::outbv(unsigned short, unsigned char)>
c0015fbe:	83 c4 10             	add    esp,0x10
c0015fc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015fc4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015fc8:	74 03                	je     c0015fcd <Vm::faultHandler(regs*)+0x4d2>
c0015fca:	48                   	dec    eax
c0015fcb:	eb 01                	jmp    c0015fce <Vm::faultHandler(regs*)+0x4d3>
c0015fcd:	40                   	inc    eax
c0015fce:	0f b7 c0             	movzx  eax,ax
c0015fd1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015fd4:	e9 92 01 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0015fd9:	8d 46 ff             	lea    eax,[esi-0x1]
c0015fdc:	3c 05                	cmp    al,0x5
c0015fde:	77 1f                	ja     c0015fff <Vm::faultHandler(regs*)+0x504>
c0015fe0:	0f b6 c0             	movzx  eax,al
c0015fe3:	ff 24 85 b4 0b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf44c]
c0015fea:	89 ef                	mov    edi,ebp
c0015fec:	eb 11                	jmp    c0015fff <Vm::faultHandler(regs*)+0x504>
c0015fee:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015ff1:	eb 0c                	jmp    c0015fff <Vm::faultHandler(regs*)+0x504>
c0015ff3:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015ff6:	eb 07                	jmp    c0015fff <Vm::faultHandler(regs*)+0x504>
c0015ff8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015ffb:	eb 02                	jmp    c0015fff <Vm::faultHandler(regs*)+0x504>
c0015ffd:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015fff:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016002:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016007:	74 37                	je     c0016040 <Vm::faultHandler(regs*)+0x545>
c0016009:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001600f:	76 2f                	jbe    c0016040 <Vm::faultHandler(regs*)+0x545>
c0016011:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016015:	50                   	push   eax
c0016016:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001601a:	50                   	push   eax
c001601b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001601f:	50                   	push   eax
c0016020:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016024:	50                   	push   eax
c0016025:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016029:	50                   	push   eax
c001602a:	6a 6f                	push   0x6f
c001602c:	6a 6f                	push   0x6f
c001602e:	68 42 0b 02 c0       	push   0xc0020b42
c0016033:	e8 d6 45 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016038:	83 c4 20             	add    esp,0x20
c001603b:	e9 86 01 00 00       	jmp    c00161c6 <Vm::faultHandler(regs*)+0x6cb>
c0016040:	0f b7 d7             	movzx  edx,di
c0016043:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016046:	0f b7 c6             	movzx  eax,si
c0016049:	81 e1 00 04 00 00    	and    ecx,0x400
c001604f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016052:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016057:	74 1d                	je     c0016076 <Vm::faultHandler(regs*)+0x57b>
c0016059:	55                   	push   ebp
c001605a:	55                   	push   ebp
c001605b:	50                   	push   eax
c001605c:	52                   	push   edx
c001605d:	e8 48 fa ff ff       	call   c0015aaa <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016062:	83 c4 10             	add    esp,0x10
c0016065:	89 fa                	mov    edx,edi
c0016067:	ef                   	out    dx,eax
c0016068:	85 c9                	test   ecx,ecx
c001606a:	74 05                	je     c0016071 <Vm::faultHandler(regs*)+0x576>
c001606c:	83 ee 04             	sub    esi,0x4
c001606f:	eb 21                	jmp    c0016092 <Vm::faultHandler(regs*)+0x597>
c0016071:	83 c6 04             	add    esi,0x4
c0016074:	eb 1c                	jmp    c0016092 <Vm::faultHandler(regs*)+0x597>
c0016076:	55                   	push   ebp
c0016077:	55                   	push   ebp
c0016078:	50                   	push   eax
c0016079:	52                   	push   edx
c001607a:	e8 19 fa ff ff       	call   c0015a98 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001607f:	83 c4 10             	add    esp,0x10
c0016082:	89 fa                	mov    edx,edi
c0016084:	66 ef                	out    dx,ax
c0016086:	85 c9                	test   ecx,ecx
c0016088:	74 05                	je     c001608f <Vm::faultHandler(regs*)+0x594>
c001608a:	83 ee 02             	sub    esi,0x2
c001608d:	eb 03                	jmp    c0016092 <Vm::faultHandler(regs*)+0x597>
c001608f:	83 c6 02             	add    esi,0x2
c0016092:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016098:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001609b:	e9 cb 00 00 00       	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c00160a0:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00160a7:	83 ec 0c             	sub    esp,0xc
c00160aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00160ae:	50                   	push   eax
c00160af:	e8 89 f5 ff ff       	call   c001563d <Vm::inbv(unsigned short)>
c00160b4:	0f b6 c0             	movzx  eax,al
c00160b7:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00160ba:	eb 3f                	jmp    c00160fb <Vm::faultHandler(regs*)+0x600>
c00160bc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00160c1:	74 07                	je     c00160ca <Vm::faultHandler(regs*)+0x5cf>
c00160c3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00160c7:	ed                   	in     eax,dx
c00160c8:	eb 14                	jmp    c00160de <Vm::faultHandler(regs*)+0x5e3>
c00160ca:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00160cd:	66 31 f6             	xor    si,si
c00160d0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00160d3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00160d7:	66 ed                	in     ax,dx
c00160d9:	0f b7 c0             	movzx  eax,ax
c00160dc:	09 f0                	or     eax,esi
c00160de:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00160e1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00160e5:	e9 84 00 00 00       	jmp    c001616e <Vm::faultHandler(regs*)+0x673>
c00160ea:	52                   	push   edx
c00160eb:	52                   	push   edx
c00160ec:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00160f0:	50                   	push   eax
c00160f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00160f5:	50                   	push   eax
c00160f6:	e8 55 f5 ff ff       	call   c0015650 <Vm::outbv(unsigned short, unsigned char)>
c00160fb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00160ff:	eb 53                	jmp    c0016154 <Vm::faultHandler(regs*)+0x659>
c0016101:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016104:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016108:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001610d:	74 03                	je     c0016112 <Vm::faultHandler(regs*)+0x617>
c001610f:	ef                   	out    dx,eax
c0016110:	eb cf                	jmp    c00160e1 <Vm::faultHandler(regs*)+0x5e6>
c0016112:	66 ef                	out    dx,ax
c0016114:	eb cb                	jmp    c00160e1 <Vm::faultHandler(regs*)+0x5e6>
c0016116:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001611d:	83 ec 0c             	sub    esp,0xc
c0016120:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016124:	50                   	push   eax
c0016125:	e8 13 f5 ff ff       	call   c001563d <Vm::inbv(unsigned short)>
c001612a:	0f b6 c0             	movzx  eax,al
c001612d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016130:	eb 1f                	jmp    c0016151 <Vm::faultHandler(regs*)+0x656>
c0016132:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016135:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001613a:	74 03                	je     c001613f <Vm::faultHandler(regs*)+0x644>
c001613c:	ed                   	in     eax,dx
c001613d:	eb 0d                	jmp    c001614c <Vm::faultHandler(regs*)+0x651>
c001613f:	66 ed                	in     ax,dx
c0016141:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016144:	0f b7 c0             	movzx  eax,ax
c0016147:	66 31 d2             	xor    dx,dx
c001614a:	09 d0                	or     eax,edx
c001614c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001614f:	eb 1a                	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0016151:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016154:	83 c4 10             	add    esp,0x10
c0016157:	eb 15                	jmp    c001616e <Vm::faultHandler(regs*)+0x673>
c0016159:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001615c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001615f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016164:	74 03                	je     c0016169 <Vm::faultHandler(regs*)+0x66e>
c0016166:	ef                   	out    dx,eax
c0016167:	eb 02                	jmp    c001616b <Vm::faultHandler(regs*)+0x670>
c0016169:	66 ef                	out    dx,ax
c001616b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001616e:	b0 01                	mov    al,0x1
c0016170:	eb 56                	jmp    c00161c8 <Vm::faultHandler(regs*)+0x6cd>
c0016172:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016176:	50                   	push   eax
c0016177:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001617b:	50                   	push   eax
c001617c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016180:	50                   	push   eax
c0016181:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016185:	50                   	push   eax
c0016186:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001618a:	50                   	push   eax
c001618b:	52                   	push   edx
c001618c:	52                   	push   edx
c001618d:	68 6f 0b 02 c0       	push   0xc0020b6f
c0016192:	e8 77 44 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016197:	83 c4 20             	add    esp,0x20
c001619a:	83 ec 0c             	sub    esp,0xc
c001619d:	6a 60                	push   0x60
c001619f:	e8 99 f4 ff ff       	call   c001563d <Vm::inbv(unsigned short)>
c00161a4:	83 c4 10             	add    esp,0x10
c00161a7:	3c 1c                	cmp    al,0x1c
c00161a9:	74 04                	je     c00161af <Vm::faultHandler(regs*)+0x6b4>
c00161ab:	3c 5a                	cmp    al,0x5a
c00161ad:	75 eb                	jne    c001619a <Vm::faultHandler(regs*)+0x69f>
c00161af:	3c 1c                	cmp    al,0x1c
c00161b1:	74 04                	je     c00161b7 <Vm::faultHandler(regs*)+0x6bc>
c00161b3:	3c 5a                	cmp    al,0x5a
c00161b5:	75 0f                	jne    c00161c6 <Vm::faultHandler(regs*)+0x6cb>
c00161b7:	83 ec 0c             	sub    esp,0xc
c00161ba:	6a 60                	push   0x60
c00161bc:	e8 7c f4 ff ff       	call   c001563d <Vm::inbv(unsigned short)>
c00161c1:	83 c4 10             	add    esp,0x10
c00161c4:	eb e9                	jmp    c00161af <Vm::faultHandler(regs*)+0x6b4>
c00161c6:	31 c0                	xor    eax,eax
c00161c8:	83 c4 1c             	add    esp,0x1c
c00161cb:	5b                   	pop    ebx
c00161cc:	5e                   	pop    esi
c00161cd:	5f                   	pop    edi
c00161ce:	5d                   	pop    ebp
c00161cf:	c3                   	ret    

c00161d0 <noCopro(unsigned long)>:
c00161d0:	c3                   	ret    

c00161d1 <nmiHandler(regs*, void*)>:
c00161d1:	83 ec 0c             	sub    esp,0xc
c00161d4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00161d9:	83 ec 0c             	sub    esp,0xc
c00161dc:	50                   	push   eax
c00161dd:	e8 aa 0e ff ff       	call   c000708c <Computer::handleNMI()>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	90                   	nop
c00161e6:	83 c4 0c             	add    esp,0xc
c00161e9:	c3                   	ret    

c00161ea <doubleFault(regs*, void*)>:
c00161ea:	55                   	push   ebp
c00161eb:	89 e5                	mov    ebp,esp
c00161ed:	83 ec 08             	sub    esp,0x8
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	68 cc 0b 02 c0       	push   0xc0020bcc
c00161f8:	e8 d2 a1 ff ff       	call   c00103cf <KePanic(char const*)>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	90                   	nop
c0016201:	c9                   	leave  
c0016202:	c3                   	ret    

c0016203 <displayDebugInfo(regs*)>:
c0016203:	83 ec 1c             	sub    esp,0x1c
c0016206:	0f 20 c0             	mov    eax,cr0
c0016209:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001620d:	0f 20 d0             	mov    eax,cr2
c0016210:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016214:	0f 20 d8             	mov    eax,cr3
c0016217:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001621b:	0f 20 e0             	mov    eax,cr4
c001621e:	89 04 24             	mov    DWORD PTR [esp],eax
c0016221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016225:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016228:	83 ec 08             	sub    esp,0x8
c001622b:	50                   	push   eax
c001622c:	68 e8 0b 02 c0       	push   0xc0020be8
c0016231:	e8 d8 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016236:	83 c4 10             	add    esp,0x10
c0016239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001623d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016240:	83 ec 08             	sub    esp,0x8
c0016243:	50                   	push   eax
c0016244:	68 d9 0b 02 c0       	push   0xc0020bd9
c0016249:	e8 c0 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001624e:	83 c4 10             	add    esp,0x10
c0016251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016255:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016258:	83 ec 08             	sub    esp,0x8
c001625b:	50                   	push   eax
c001625c:	68 e4 0b 02 c0       	push   0xc0020be4
c0016261:	e8 a8 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016266:	83 c4 10             	add    esp,0x10
c0016269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001626d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016270:	83 ec 08             	sub    esp,0x8
c0016273:	50                   	push   eax
c0016274:	68 f3 0b 02 c0       	push   0xc0020bf3
c0016279:	e8 90 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016285:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016288:	83 ec 08             	sub    esp,0x8
c001628b:	50                   	push   eax
c001628c:	68 fe 0b 02 c0       	push   0xc0020bfe
c0016291:	e8 78 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	83 ec 08             	sub    esp,0x8
c001629c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00162a0:	68 09 0c 02 c0       	push   0xc0020c09
c00162a5:	e8 64 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00162aa:	83 c4 10             	add    esp,0x10
c00162ad:	83 ec 08             	sub    esp,0x8
c00162b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00162b4:	68 14 0c 02 c0       	push   0xc0020c14
c00162b9:	e8 50 43 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00162be:	83 c4 10             	add    esp,0x10
c00162c1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	50                   	push   eax
c00162d0:	e8 d0 21 ff ff       	call   c00084a5 <setActiveTerminal(VgaText*)>
c00162d5:	83 c4 10             	add    esp,0x10
c00162d8:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162dd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162e3:	83 ec 08             	sub    esp,0x8
c00162e6:	68 1f 0c 02 c0       	push   0xc0020c1f
c00162eb:	50                   	push   eax
c00162ec:	e8 f3 24 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00162f9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016303:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016306:	83 ec 08             	sub    esp,0x8
c0016309:	52                   	push   edx
c001630a:	50                   	push   eax
c001630b:	e8 8e 24 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016318:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001631e:	83 ec 08             	sub    esp,0x8
c0016321:	68 2d 0c 02 c0       	push   0xc0020c2d
c0016326:	50                   	push   eax
c0016327:	e8 b8 24 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c001632c:	83 c4 10             	add    esp,0x10
c001632f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016334:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001633a:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001633f:	8b 12                	mov    edx,DWORD PTR [edx]
c0016341:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016344:	83 c2 0c             	add    edx,0xc
c0016347:	83 ec 08             	sub    esp,0x8
c001634a:	52                   	push   edx
c001634b:	50                   	push   eax
c001634c:	e8 93 24 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016359:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001635f:	83 ec 08             	sub    esp,0x8
c0016362:	68 36 0c 02 c0       	push   0xc0020c36
c0016367:	50                   	push   eax
c0016368:	e8 77 24 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016375:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001637b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001637f:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0016382:	83 ec 08             	sub    esp,0x8
c0016385:	52                   	push   edx
c0016386:	50                   	push   eax
c0016387:	e8 12 24 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c001638c:	83 c4 10             	add    esp,0x10
c001638f:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016394:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001639a:	83 ec 08             	sub    esp,0x8
c001639d:	68 3e 0c 02 c0       	push   0xc0020c3e
c00163a2:	50                   	push   eax
c00163a3:	e8 3c 24 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00163a8:	83 c4 10             	add    esp,0x10
c00163ab:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163ba:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00163bd:	83 ec 08             	sub    esp,0x8
c00163c0:	52                   	push   edx
c00163c1:	50                   	push   eax
c00163c2:	e8 d7 23 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c00163c7:	83 c4 10             	add    esp,0x10
c00163ca:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163d5:	83 ec 08             	sub    esp,0x8
c00163d8:	68 46 0c 02 c0       	push   0xc0020c46
c00163dd:	50                   	push   eax
c00163de:	e8 01 24 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00163e3:	83 c4 10             	add    esp,0x10
c00163e6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163f5:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00163f8:	83 ec 08             	sub    esp,0x8
c00163fb:	52                   	push   edx
c00163fc:	50                   	push   eax
c00163fd:	e8 9c 23 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c0016402:	83 c4 10             	add    esp,0x10
c0016405:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001640a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016410:	83 ec 08             	sub    esp,0x8
c0016413:	68 4e 0c 02 c0       	push   0xc0020c4e
c0016418:	50                   	push   eax
c0016419:	e8 c6 23 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c001641e:	83 c4 10             	add    esp,0x10
c0016421:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016426:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001642c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016430:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016433:	83 ec 08             	sub    esp,0x8
c0016436:	52                   	push   edx
c0016437:	50                   	push   eax
c0016438:	e8 61 23 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016445:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001644b:	83 ec 08             	sub    esp,0x8
c001644e:	68 56 0c 02 c0       	push   0xc0020c56
c0016453:	50                   	push   eax
c0016454:	e8 8b 23 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016459:	83 c4 10             	add    esp,0x10
c001645c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016461:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016467:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001646b:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001646e:	83 ec 08             	sub    esp,0x8
c0016471:	52                   	push   edx
c0016472:	50                   	push   eax
c0016473:	e8 26 23 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c0016478:	83 c4 10             	add    esp,0x10
c001647b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016480:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016486:	83 ec 08             	sub    esp,0x8
c0016489:	68 5e 0c 02 c0       	push   0xc0020c5e
c001648e:	50                   	push   eax
c001648f:	e8 50 23 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016494:	83 c4 10             	add    esp,0x10
c0016497:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001649c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164a2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164a6:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00164a9:	83 ec 08             	sub    esp,0x8
c00164ac:	52                   	push   edx
c00164ad:	50                   	push   eax
c00164ae:	e8 eb 22 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164c1:	83 ec 08             	sub    esp,0x8
c00164c4:	68 66 0c 02 c0       	push   0xc0020c66
c00164c9:	50                   	push   eax
c00164ca:	e8 15 23 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164dd:	83 ec 08             	sub    esp,0x8
c00164e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00164e4:	50                   	push   eax
c00164e5:	e8 b4 22 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164f8:	83 ec 08             	sub    esp,0x8
c00164fb:	68 6f 0c 02 c0       	push   0xc0020c6f
c0016500:	50                   	push   eax
c0016501:	e8 de 22 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001650e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016514:	83 ec 08             	sub    esp,0x8
c0016517:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001651b:	50                   	push   eax
c001651c:	e8 7d 22 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c0016521:	83 c4 10             	add    esp,0x10
c0016524:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016529:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001652f:	83 ec 08             	sub    esp,0x8
c0016532:	68 77 0c 02 c0       	push   0xc0020c77
c0016537:	50                   	push   eax
c0016538:	e8 a7 22 ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c001653d:	83 c4 10             	add    esp,0x10
c0016540:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016545:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001654b:	83 ec 08             	sub    esp,0x8
c001654e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016552:	50                   	push   eax
c0016553:	e8 46 22 ff ff       	call   c000879e <VgaText::putx(unsigned int)>
c0016558:	83 c4 10             	add    esp,0x10
c001655b:	fa                   	cli    
c001655c:	f4                   	hlt    
c001655d:	eb fe                	jmp    c001655d <displayDebugInfo(regs*)+0x35a>

c001655f <HalSystemIdle()>:
c001655f:	56                   	push   esi
c0016560:	53                   	push   ebx
c0016561:	83 ec 14             	sub    esp,0x14
c0016564:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016569:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001656f:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016575:	83 e0 04             	and    eax,0x4
c0016578:	84 c0                	test   al,al
c001657a:	0f 95 c0             	setne  al
c001657d:	84 c0                	test   al,al
c001657f:	74 4c                	je     c00165cd <HalSystemIdle()+0x6e>
c0016581:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016586:	83 ec 08             	sub    esp,0x8
c0016589:	68 e1 00 00 00       	push   0xe1
c001658e:	50                   	push   eax
c001658f:	e8 10 09 ff ff       	call   c0006ea4 <Computer::rdmsr(unsigned int)>
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001659b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001659f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00165a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165a8:	83 e2 02             	and    edx,0x2
c00165ab:	89 d3                	mov    ebx,edx
c00165ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165b1:	83 e2 00             	and    edx,0x0
c00165b4:	89 d6                	mov    esi,edx
c00165b6:	56                   	push   esi
c00165b7:	53                   	push   ebx
c00165b8:	68 e1 00 00 00       	push   0xe1
c00165bd:	50                   	push   eax
c00165be:	e8 0d 09 ff ff       	call   c0006ed0 <Computer::wrmsr(unsigned int, unsigned long long)>
c00165c3:	83 c4 10             	add    esp,0x10
c00165c6:	e8 c9 9b fe ff       	call   c0000194 <doTPAUSE>
c00165cb:	eb 01                	jmp    c00165ce <HalSystemIdle()+0x6f>
c00165cd:	f4                   	hlt    
c00165ce:	90                   	nop
c00165cf:	83 c4 14             	add    esp,0x14
c00165d2:	5b                   	pop    ebx
c00165d3:	5e                   	pop    esi
c00165d4:	c3                   	ret    

c00165d5 <displayProgramFault(char const*)>:
c00165d5:	83 ec 0c             	sub    esp,0xc
c00165d8:	83 ec 0c             	sub    esp,0xc
c00165db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00165df:	e8 2a 40 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00165e4:	83 c4 10             	add    esp,0x10
c00165e7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00165ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00165ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165f7:	85 c0                	test   eax,eax
c00165f9:	74 21                	je     c001661c <displayProgramFault(char const*)+0x47>
c00165fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016600:	8b 00                	mov    eax,DWORD PTR [eax]
c0016602:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016605:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001660b:	6a 04                	push   0x4
c001660d:	6a 0f                	push   0xf
c001660f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016613:	50                   	push   eax
c0016614:	e8 3d 22 ff ff       	call   c0008856 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016619:	83 c4 10             	add    esp,0x10
c001661c:	90                   	nop
c001661d:	83 c4 0c             	add    esp,0xc
c0016620:	c3                   	ret    

c0016621 <gpFault(regs*, void*)>:
c0016621:	83 ec 1c             	sub    esp,0x1c
c0016624:	c7 05 10 72 02 c0 fb 5a 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc0015afb
c001662e:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c0016633:	85 c0                	test   eax,eax
c0016635:	74 1c                	je     c0016653 <gpFault(regs*, void*)+0x32>
c0016637:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c001663c:	83 ec 0c             	sub    esp,0xc
c001663f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016643:	ff d0                	call   eax
c0016645:	83 c4 10             	add    esp,0x10
c0016648:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001664c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016651:	75 2e                	jne    c0016681 <gpFault(regs*, void*)+0x60>
c0016653:	83 ec 0c             	sub    esp,0xc
c0016656:	68 7f 0c 02 c0       	push   0xc0020c7f
c001665b:	e8 75 ff ff ff       	call   c00165d5 <displayProgramFault(char const*)>
c0016660:	83 c4 10             	add    esp,0x10
c0016663:	83 ec 0c             	sub    esp,0xc
c0016666:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001666a:	e8 94 fb ff ff       	call   c0016203 <displayDebugInfo(regs*)>
c001666f:	83 c4 10             	add    esp,0x10
c0016672:	83 ec 0c             	sub    esp,0xc
c0016675:	6a 00                	push   0x0
c0016677:	e8 74 ee ff ff       	call   c00154f0 <Thr::terminateFromIRQ(int)>
c001667c:	83 c4 10             	add    esp,0x10
c001667f:	eb 01                	jmp    c0016682 <gpFault(regs*, void*)+0x61>
c0016681:	90                   	nop
c0016682:	83 c4 1c             	add    esp,0x1c
c0016685:	c3                   	ret    

c0016686 <pgFault(regs*, void*)>:
c0016686:	83 ec 1c             	sub    esp,0x1c
c0016689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001668d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016690:	0f 20 d0             	mov    eax,cr2
c0016693:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001669b:	83 ec 04             	sub    esp,0x4
c001669e:	52                   	push   edx
c001669f:	50                   	push   eax
c00166a0:	68 5c 0d 02 c0       	push   0xc0020d5c
c00166a5:	e8 64 3f ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c00166aa:	83 c4 10             	add    esp,0x10
c00166ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00166b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00166b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166b7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00166bd:	0f 20 d2             	mov    edx,cr2
c00166c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00166c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166c8:	83 ec 08             	sub    esp,0x8
c00166cb:	52                   	push   edx
c00166cc:	50                   	push   eax
c00166cd:	e8 32 3b ff ff       	call   c000a204 <VAS::tryLoadBackOffDisk(unsigned long)>
c00166d2:	83 c4 10             	add    esp,0x10
c00166d5:	84 c0                	test   al,al
c00166d7:	75 2e                	jne    c0016707 <pgFault(regs*, void*)+0x81>
c00166d9:	83 ec 0c             	sub    esp,0xc
c00166dc:	68 98 0c 02 c0       	push   0xc0020c98
c00166e1:	e8 ef fe ff ff       	call   c00165d5 <displayProgramFault(char const*)>
c00166e6:	83 c4 10             	add    esp,0x10
c00166e9:	83 ec 0c             	sub    esp,0xc
c00166ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166f0:	e8 0e fb ff ff       	call   c0016203 <displayDebugInfo(regs*)>
c00166f5:	83 c4 10             	add    esp,0x10
c00166f8:	83 ec 0c             	sub    esp,0xc
c00166fb:	6a 00                	push   0x0
c00166fd:	e8 ee ed ff ff       	call   c00154f0 <Thr::terminateFromIRQ(int)>
c0016702:	83 c4 10             	add    esp,0x10
c0016705:	eb 01                	jmp    c0016708 <pgFault(regs*, void*)+0x82>
c0016707:	90                   	nop
c0016708:	83 c4 1c             	add    esp,0x1c
c001670b:	c3                   	ret    

c001670c <otherISRHandler(regs*, void*)>:
c001670c:	83 ec 0c             	sub    esp,0xc
c001670f:	83 ec 0c             	sub    esp,0xc
c0016712:	68 84 0d 02 c0       	push   0xc0020d84
c0016717:	e8 b9 fe ff ff       	call   c00165d5 <displayProgramFault(char const*)>
c001671c:	83 c4 10             	add    esp,0x10
c001671f:	83 ec 0c             	sub    esp,0xc
c0016722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016726:	e8 d8 fa ff ff       	call   c0016203 <displayDebugInfo(regs*)>
c001672b:	83 c4 10             	add    esp,0x10
c001672e:	83 ec 0c             	sub    esp,0xc
c0016731:	6a 00                	push   0x0
c0016733:	e8 b8 ed ff ff       	call   c00154f0 <Thr::terminateFromIRQ(int)>
c0016738:	83 c4 10             	add    esp,0x10
c001673b:	90                   	nop
c001673c:	83 c4 0c             	add    esp,0xc
c001673f:	c3                   	ret    

c0016740 <opcodeFault(regs*, void*)>:
c0016740:	55                   	push   ebp
c0016741:	89 e5                	mov    ebp,esp
c0016743:	83 ec 08             	sub    esp,0x8
c0016746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016749:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001674c:	83 ec 08             	sub    esp,0x8
c001674f:	50                   	push   eax
c0016750:	68 a3 0c 02 c0       	push   0xc0020ca3
c0016755:	e8 b4 3e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001675a:	83 c4 10             	add    esp,0x10
c001675d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016762:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016768:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001676e:	84 c0                	test   al,al
c0016770:	74 21                	je     c0016793 <opcodeFault(regs*, void*)+0x53>
c0016772:	83 ec 0c             	sub    esp,0xc
c0016775:	68 ac 0d 02 c0       	push   0xc0020dac
c001677a:	e8 8f 3e ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016785:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016788:	8d 50 19             	lea    edx,[eax+0x19]
c001678b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001678e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016791:	eb 2b                	jmp    c00167be <opcodeFault(regs*, void*)+0x7e>
c0016793:	83 ec 0c             	sub    esp,0xc
c0016796:	68 b1 0c 02 c0       	push   0xc0020cb1
c001679b:	e8 35 fe ff ff       	call   c00165d5 <displayProgramFault(char const*)>
c00167a0:	83 c4 10             	add    esp,0x10
c00167a3:	83 ec 0c             	sub    esp,0xc
c00167a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00167a9:	e8 55 fa ff ff       	call   c0016203 <displayDebugInfo(regs*)>
c00167ae:	83 c4 10             	add    esp,0x10
c00167b1:	83 ec 0c             	sub    esp,0xc
c00167b4:	6a 00                	push   0x0
c00167b6:	e8 35 ed ff ff       	call   c00154f0 <Thr::terminateFromIRQ(int)>
c00167bb:	83 c4 10             	add    esp,0x10
c00167be:	c9                   	leave  
c00167bf:	c3                   	ret    

c00167c0 <i386SaveCoprocessor(void*)>:
c00167c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167c4:	83 c0 3f             	add    eax,0x3f
c00167c7:	83 e0 c0             	and    eax,0xffffffc0
c00167ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167ce:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c00167d4 <i386LoadCoprocessor(void*)>:
c00167d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167d8:	83 c0 3f             	add    eax,0x3f
c00167db:	83 e0 c0             	and    eax,0xffffffc0
c00167de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167e2:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c00167e8 <x87EmulHandler(regs*, void*)>:
c00167e8:	53                   	push   ebx
c00167e9:	83 ec 08             	sub    esp,0x8
c00167ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167f1:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00167f5:	74 10                	je     c0016807 <x87EmulHandler(regs*, void*)+0x1f>
c00167f7:	83 ec 0c             	sub    esp,0xc
c00167fa:	68 be 0c 02 c0       	push   0xc0020cbe
c00167ff:	e8 cb 9b ff ff       	call   c00103cf <KePanic(char const*)>
c0016804:	83 c4 10             	add    esp,0x10
c0016807:	0f 20 c0             	mov    eax,cr0
c001680a:	a8 08                	test   al,0x8
c001680c:	74 59                	je     c0016867 <x87EmulHandler(regs*, void*)+0x7f>
c001680e:	0f 06                	clts   
c0016810:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c0016815:	85 c0                	test   eax,eax
c0016817:	74 0e                	je     c0016827 <x87EmulHandler(regs*, void*)+0x3f>
c0016819:	83 ec 0c             	sub    esp,0xc
c001681c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001681f:	e8 9c ff ff ff       	call   c00167c0 <i386SaveCoprocessor(void*)>
c0016824:	83 c4 10             	add    esp,0x10
c0016827:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001682d:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016831:	75 12                	jne    c0016845 <x87EmulHandler(regs*, void*)+0x5d>
c0016833:	83 ec 0c             	sub    esp,0xc
c0016836:	68 40 02 00 00       	push   0x240
c001683b:	e8 2d 10 ff ff       	call   c000786d <malloc>
c0016840:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016843:	eb 10                	jmp    c0016855 <x87EmulHandler(regs*, void*)+0x6d>
c0016845:	83 ec 0c             	sub    esp,0xc
c0016848:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c001684d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016850:	e8 7f ff ff ff       	call   c00167d4 <i386LoadCoprocessor(void*)>
c0016855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001685a:	83 c4 10             	add    esp,0x10
c001685d:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c0016862:	83 c4 08             	add    esp,0x8
c0016865:	5b                   	pop    ebx
c0016866:	c3                   	ret    
c0016867:	83 ec 0c             	sub    esp,0xc
c001686a:	68 d2 0c 02 c0       	push   0xc0020cd2
c001686f:	e8 9a 3d ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016874:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001687c:	83 c4 18             	add    esp,0x18
c001687f:	5b                   	pop    ebx
c0016880:	e9 6b ec ff ff       	jmp    c00154f0 <Thr::terminateFromIRQ(int)>

c0016885 <HalInitialiseCoprocessor()>:
c0016885:	83 ec 10             	sub    esp,0x10
c0016888:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c0016892:	6a 00                	push   0x0
c0016894:	68 e8 67 01 c0       	push   0xc00167e8
c0016899:	6a 07                	push   0x7
c001689b:	e8 e0 56 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00168a0:	e8 4b 6e 00 00       	call   c001d6f0 <avxDetect>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	85 c0                	test   eax,eax
c00168aa:	74 1c                	je     c00168c8 <HalInitialiseCoprocessor()+0x43>
c00168ac:	c7 05 0c 72 02 c0 1a d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d71a
c00168b6:	c7 05 08 72 02 c0 2b d7 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d72b
c00168c0:	83 c4 0c             	add    esp,0xc
c00168c3:	e9 74 6e 00 00       	jmp    c001d73c <avxInit>
c00168c8:	e8 b3 71 00 00       	call   c001da80 <absolutelyNoChanceInHell>
c00168cd:	85 c0                	test   eax,eax
c00168cf:	74 1c                	je     c00168ed <HalInitialiseCoprocessor()+0x68>
c00168d1:	c7 05 0c 72 02 c0 98 da 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001da98
c00168db:	c7 05 08 72 02 c0 a0 da 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001daa0
c00168e5:	83 c4 0c             	add    esp,0xc
c00168e8:	e9 bb 71 00 00       	jmp    c001daa8 <sseInit>
c00168ed:	e8 d4 71 00 00       	call   c001dac6 <x87Detect>
c00168f2:	85 c0                	test   eax,eax
c00168f4:	74 1c                	je     c0016912 <HalInitialiseCoprocessor()+0x8d>
c00168f6:	c7 05 0c 72 02 c0 e1 da 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001dae1
c0016900:	c7 05 08 72 02 c0 e8 da 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001dae8
c001690a:	83 c4 0c             	add    esp,0xc
c001690d:	e9 dd 71 00 00       	jmp    c001daef <x87Init>
c0016912:	c7 05 0c 72 02 c0 d0 61 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc00161d0
c001691c:	c7 05 08 72 02 c0 d0 61 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc00161d0
c0016926:	0f 20 c0             	mov    eax,cr0
c0016929:	83 c8 04             	or     eax,0x4
c001692c:	0f 22 c0             	mov    cr0,eax
c001692f:	83 c4 0c             	add    esp,0xc
c0016932:	c3                   	ret    

c0016933 <HalPanic(char const*)>:
c0016933:	53                   	push   ebx
c0016934:	83 ec 10             	sub    esp,0x10
c0016937:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001693b:	fa                   	cli    
c001693c:	53                   	push   ebx
c001693d:	68 e8 0c 02 c0       	push   0xc0020ce8
c0016942:	e8 c7 3c ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0016947:	83 c4 0c             	add    esp,0xc
c001694a:	6a 01                	push   0x1
c001694c:	6a 0f                	push   0xf
c001694e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016954:	e8 a5 19 ff ff       	call   c00082fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016959:	58                   	pop    eax
c001695a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016960:	e8 8b 1b ff ff       	call   c00084f0 <VgaText::clearScreen()>
c0016965:	5a                   	pop    edx
c0016966:	59                   	pop    ecx
c0016967:	68 44 f5 01 c0       	push   0xc001f544
c001696c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016972:	e8 bf 19 ff ff       	call   c0008336 <VgaText::setTitle(char*)>
c0016977:	83 c4 0c             	add    esp,0xc
c001697a:	6a 01                	push   0x1
c001697c:	6a 0f                	push   0xf
c001697e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016984:	e8 75 19 ff ff       	call   c00082fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016989:	58                   	pop    eax
c001698a:	5a                   	pop    edx
c001698b:	68 01 0d 02 c0       	push   0xc0020d01
c0016990:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016996:	e8 49 1e ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c001699b:	83 c4 0c             	add    esp,0xc
c001699e:	6a 0f                	push   0xf
c00169a0:	6a 01                	push   0x1
c00169a2:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169a8:	e8 51 19 ff ff       	call   c00082fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00169ad:	59                   	pop    ecx
c00169ae:	58                   	pop    eax
c00169af:	68 0a 0d 02 c0       	push   0xc0020d0a
c00169b4:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169ba:	e8 25 1e ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00169bf:	83 c4 0c             	add    esp,0xc
c00169c2:	6a 01                	push   0x1
c00169c4:	6a 0f                	push   0xf
c00169c6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169cc:	e8 2d 19 ff ff       	call   c00082fe <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00169d1:	58                   	pop    eax
c00169d2:	5a                   	pop    edx
c00169d3:	68 4e 0d 02 c0       	push   0xc0020d4e
c00169d8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169de:	e8 01 1e ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00169e3:	59                   	pop    ecx
c00169e4:	58                   	pop    eax
c00169e5:	68 17 0d 02 c0       	push   0xc0020d17
c00169ea:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169f0:	e8 ef 1d ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c00169f5:	58                   	pop    eax
c00169f6:	5a                   	pop    edx
c00169f7:	68 51 0d 02 c0       	push   0xc0020d51
c00169fc:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a02:	e8 dd 1d ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016a07:	59                   	pop    ecx
c0016a08:	58                   	pop    eax
c0016a09:	53                   	push   ebx
c0016a0a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a10:	e8 cf 1d ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016a15:	58                   	pop    eax
c0016a16:	5a                   	pop    edx
c0016a17:	68 4e 0d 02 c0       	push   0xc0020d4e
c0016a1c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a22:	e8 bd 1d ff ff       	call   c00087e4 <VgaText::puts(char const*)>
c0016a27:	83 c4 10             	add    esp,0x10
c0016a2a:	eb fe                	jmp    c0016a2a <HalPanic(char const*)+0xf7>

c0016a2c <HalQueryPerformanceCounter()>:
c0016a2c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016a31:	31 d2                	xor    edx,edx
c0016a33:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016a39:	31 c0                	xor    eax,eax
c0016a3b:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016a42:	74 02                	je     c0016a46 <HalQueryPerformanceCounter()+0x1a>
c0016a44:	0f 31                	rdtsc  
c0016a46:	c3                   	ret    

c0016a47 <HalInitialise()>:
c0016a47:	53                   	push   ebx
c0016a48:	83 ec 08             	sub    esp,0x8
c0016a4b:	e8 63 57 ff ff       	call   c000c1b3 <setupINTS()>
c0016a50:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c0016a57:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016a5c:	75 07                	jne    c0016a65 <HalInitialise()+0x1e>
c0016a5e:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016a65:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016a6c:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c0016a73:	e8 a8 02 00 00       	call   c0016d20 <picOpen()>
c0016a78:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016a7f:	74 0a                	je     c0016a8b <HalInitialise()+0x44>
c0016a81:	e8 e2 01 00 00       	call   c0016c68 <picDisable()>
c0016a86:	e8 e3 65 00 00       	call   c001d06e <apicOpen()>
c0016a8b:	bb 0f 00 00 00       	mov    ebx,0xf
c0016a90:	50                   	push   eax
c0016a91:	6a 00                	push   0x0
c0016a93:	68 0c 67 01 c0       	push   0xc001670c
c0016a98:	6a 00                	push   0x0
c0016a9a:	e8 e1 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016a9f:	83 c4 0c             	add    esp,0xc
c0016aa2:	6a 00                	push   0x0
c0016aa4:	68 0c 67 01 c0       	push   0xc001670c
c0016aa9:	6a 01                	push   0x1
c0016aab:	e8 d0 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ab0:	83 c4 0c             	add    esp,0xc
c0016ab3:	6a 00                	push   0x0
c0016ab5:	68 d1 61 01 c0       	push   0xc00161d1
c0016aba:	6a 02                	push   0x2
c0016abc:	e8 bf 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ac1:	83 c4 0c             	add    esp,0xc
c0016ac4:	6a 00                	push   0x0
c0016ac6:	68 0c 67 01 c0       	push   0xc001670c
c0016acb:	6a 03                	push   0x3
c0016acd:	e8 ae 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ad2:	83 c4 0c             	add    esp,0xc
c0016ad5:	6a 00                	push   0x0
c0016ad7:	68 0c 67 01 c0       	push   0xc001670c
c0016adc:	6a 04                	push   0x4
c0016ade:	e8 9d 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ae3:	83 c4 0c             	add    esp,0xc
c0016ae6:	6a 00                	push   0x0
c0016ae8:	68 0c 67 01 c0       	push   0xc001670c
c0016aed:	6a 05                	push   0x5
c0016aef:	e8 8c 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016af4:	83 c4 0c             	add    esp,0xc
c0016af7:	6a 00                	push   0x0
c0016af9:	68 40 67 01 c0       	push   0xc0016740
c0016afe:	6a 06                	push   0x6
c0016b00:	e8 7b 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b05:	83 c4 0c             	add    esp,0xc
c0016b08:	6a 00                	push   0x0
c0016b0a:	68 ea 61 01 c0       	push   0xc00161ea
c0016b0f:	6a 08                	push   0x8
c0016b11:	e8 6a 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b16:	83 c4 0c             	add    esp,0xc
c0016b19:	6a 00                	push   0x0
c0016b1b:	68 0c 67 01 c0       	push   0xc001670c
c0016b20:	6a 09                	push   0x9
c0016b22:	e8 59 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b27:	83 c4 0c             	add    esp,0xc
c0016b2a:	6a 00                	push   0x0
c0016b2c:	68 0c 67 01 c0       	push   0xc001670c
c0016b31:	6a 0a                	push   0xa
c0016b33:	e8 48 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b38:	83 c4 0c             	add    esp,0xc
c0016b3b:	6a 00                	push   0x0
c0016b3d:	68 0c 67 01 c0       	push   0xc001670c
c0016b42:	6a 0b                	push   0xb
c0016b44:	e8 37 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b49:	83 c4 0c             	add    esp,0xc
c0016b4c:	6a 00                	push   0x0
c0016b4e:	68 21 66 01 c0       	push   0xc0016621
c0016b53:	6a 0d                	push   0xd
c0016b55:	e8 26 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b5a:	83 c4 0c             	add    esp,0xc
c0016b5d:	6a 00                	push   0x0
c0016b5f:	68 86 66 01 c0       	push   0xc0016686
c0016b64:	6a 0e                	push   0xe
c0016b66:	e8 15 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b6b:	83 c4 10             	add    esp,0x10
c0016b6e:	50                   	push   eax
c0016b6f:	6a 00                	push   0x0
c0016b71:	68 0c 67 01 c0       	push   0xc001670c
c0016b76:	53                   	push   ebx
c0016b77:	43                   	inc    ebx
c0016b78:	e8 03 54 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	83 fb 1e             	cmp    ebx,0x1e
c0016b83:	75 e9                	jne    c0016b6e <HalInitialise()+0x127>
c0016b85:	50                   	push   eax
c0016b86:	6a 00                	push   0x0
c0016b88:	68 56 16 01 c0       	push   0xc0011656
c0016b8d:	6a 60                	push   0x60
c0016b8f:	e8 ec 53 ff ff       	call   c000bf80 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b94:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016b99:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016ba3:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016baa:	e8 be 0c ff ff       	call   c000786d <malloc>
c0016baf:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bb2:	89 c3                	mov    ebx,eax
c0016bb4:	e8 2f 09 00 00       	call   c00174e8 <RTC::RTC()>
c0016bb9:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0016bc3:	5a                   	pop    edx
c0016bc4:	59                   	pop    ecx
c0016bc5:	53                   	push   ebx
c0016bc6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016bcc:	e8 7b 4e ff ff       	call   c000ba4c <Device::addChild(Device*)>
c0016bd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bd3:	6a 00                	push   0x0
c0016bd5:	6a 00                	push   0x0
c0016bd7:	6a 00                	push   0x0
c0016bd9:	53                   	push   ebx
c0016bda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016bdd:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016be2:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016be8:	83 c4 28             	add    esp,0x28
c0016beb:	5b                   	pop    ebx
c0016bec:	c3                   	ret    

c0016bed <HalMakeBeep(int)>:
c0016bed:	53                   	push   ebx
c0016bee:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016bf2:	85 db                	test   ebx,ebx
c0016bf4:	75 07                	jne    c0016bfd <HalMakeBeep(int)+0x10>
c0016bf6:	e4 61                	in     al,0x61
c0016bf8:	83 e0 fc             	and    eax,0xfffffffc
c0016bfb:	eb 26                	jmp    c0016c23 <HalMakeBeep(int)+0x36>
c0016bfd:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016c02:	99                   	cdq    
c0016c03:	f7 fb                	idiv   ebx
c0016c05:	89 c1                	mov    ecx,eax
c0016c07:	b0 b6                	mov    al,0xb6
c0016c09:	e6 43                	out    0x43,al
c0016c0b:	88 c8                	mov    al,cl
c0016c0d:	e6 42                	out    0x42,al
c0016c0f:	89 c8                	mov    eax,ecx
c0016c11:	c1 e8 08             	shr    eax,0x8
c0016c14:	e6 42                	out    0x42,al
c0016c16:	e4 61                	in     al,0x61
c0016c18:	88 c2                	mov    dl,al
c0016c1a:	83 ca 03             	or     edx,0x3
c0016c1d:	38 c2                	cmp    dl,al
c0016c1f:	74 04                	je     c0016c25 <HalMakeBeep(int)+0x38>
c0016c21:	88 d0                	mov    al,dl
c0016c23:	e6 61                	out    0x61,al
c0016c25:	5b                   	pop    ebx
c0016c26:	c3                   	ret    

c0016c27 <HalGetRand()>:
c0016c27:	31 c0                	xor    eax,eax
c0016c29:	c3                   	ret    

c0016c2a <HalEndOfInterrupt(int)>:
c0016c2a:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016c31:	74 23                	je     c0016c56 <HalEndOfInterrupt(int)+0x2c>
c0016c33:	83 ec 14             	sub    esp,0x14
c0016c36:	6a 1b                	push   0x1b
c0016c38:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c3e:	e8 61 02 ff ff       	call   c0006ea4 <Computer::rdmsr(unsigned int)>
c0016c43:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016c48:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016c52:	83 c4 1c             	add    esp,0x1c
c0016c55:	c3                   	ret    
c0016c56:	e9 55 02 00 00       	jmp    c0016eb0 <picEOI(int)>

c0016c5b <HalRestart()>:
c0016c5b:	c3                   	ret    

c0016c5c <HalShutdown()>:
c0016c5c:	c3                   	ret    

c0016c5d <HalSleep()>:
c0016c5d:	c3                   	ret    
c0016c5e:	66 90                	xchg   ax,ax

c0016c60 <picIoWait()>:
c0016c60:	eb 00                	jmp    c0016c62 <picIoWait()+0x2>
c0016c62:	eb 00                	jmp    c0016c64 <picIoWait()+0x4>
c0016c64:	90                   	nop
c0016c65:	c3                   	ret    
c0016c66:	66 90                	xchg   ax,ax

c0016c68 <picDisable()>:
c0016c68:	83 ec 10             	sub    esp,0x10
c0016c6b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016c72:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016c77:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016c7b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016c80:	ee                   	out    dx,al
c0016c81:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016c88:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016c8d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016c91:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016c96:	ee                   	out    dx,al
c0016c97:	90                   	nop
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	c3                   	ret    

c0016c9c <picGetIRQReg(int)>:
c0016c9c:	83 ec 10             	sub    esp,0x10
c0016c9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ca3:	25 ff 00 00 00       	and    eax,0xff
c0016ca8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016caf:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0016cb3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016cb7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016cbc:	ee                   	out    dx,al
c0016cbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cc1:	25 ff 00 00 00       	and    eax,0xff
c0016cc6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016ccd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016cd1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016cd5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016cda:	ee                   	out    dx,al
c0016cdb:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0016ce2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016ce7:	89 c2                	mov    edx,eax
c0016ce9:	ec                   	in     al,dx
c0016cea:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016cee:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016cf2:	25 ff 00 00 00       	and    eax,0xff
c0016cf7:	c1 e0 08             	shl    eax,0x8
c0016cfa:	89 c1                	mov    ecx,eax
c0016cfc:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016d03:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016d08:	89 c2                	mov    edx,eax
c0016d0a:	ec                   	in     al,dx
c0016d0b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016d0f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016d13:	25 ff 00 00 00       	and    eax,0xff
c0016d18:	09 c8                	or     eax,ecx
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	c3                   	ret    
c0016d1e:	66 90                	xchg   ax,ax

c0016d20 <picOpen()>:
c0016d20:	83 ec 50             	sub    esp,0x50
c0016d23:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016d2a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016d2f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016d33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016d37:	ee                   	out    dx,al
c0016d38:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016d3f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016d44:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016d48:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d4c:	ee                   	out    dx,al
c0016d4d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016d55:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016d5d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016d64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d68:	89 c2                	mov    edx,eax
c0016d6a:	ec                   	in     al,dx
c0016d6b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016d6f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016d73:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016d77:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016d7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d82:	89 c2                	mov    edx,eax
c0016d84:	ec                   	in     al,dx
c0016d85:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016d89:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016d8d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016d91:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016d98:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016d9d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016da1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016da5:	ee                   	out    dx,al
c0016da6:	e8 b5 fe ff ff       	call   c0016c60 <picIoWait()>
c0016dab:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016db2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016db7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016dbb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016dbf:	ee                   	out    dx,al
c0016dc0:	e8 9b fe ff ff       	call   c0016c60 <picIoWait()>
c0016dc5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016dc9:	25 ff 00 00 00       	and    eax,0xff
c0016dce:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016dd5:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016dd9:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016ddd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016de1:	ee                   	out    dx,al
c0016de2:	e8 79 fe ff ff       	call   c0016c60 <picIoWait()>
c0016de7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016deb:	25 ff 00 00 00       	and    eax,0xff
c0016df0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016df7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016dfb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016dff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016e03:	ee                   	out    dx,al
c0016e04:	e8 57 fe ff ff       	call   c0016c60 <picIoWait()>
c0016e09:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016e10:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016e15:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016e19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e1d:	ee                   	out    dx,al
c0016e1e:	e8 3d fe ff ff       	call   c0016c60 <picIoWait()>
c0016e23:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016e2a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016e2f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016e33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016e37:	ee                   	out    dx,al
c0016e38:	e8 23 fe ff ff       	call   c0016c60 <picIoWait()>
c0016e3d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016e44:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016e49:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016e4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016e51:	ee                   	out    dx,al
c0016e52:	e8 09 fe ff ff       	call   c0016c60 <picIoWait()>
c0016e57:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016e5e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016e63:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016e67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016e6b:	ee                   	out    dx,al
c0016e6c:	e8 ef fd ff ff       	call   c0016c60 <picIoWait()>
c0016e71:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016e75:	25 ff 00 00 00       	and    eax,0xff
c0016e7a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016e81:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016e85:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016e89:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e8d:	ee                   	out    dx,al
c0016e8e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016e92:	25 ff 00 00 00       	and    eax,0xff
c0016e97:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016e9e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016ea2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016ea6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016eaa:	ee                   	out    dx,al
c0016eab:	90                   	nop
c0016eac:	83 c4 50             	add    esp,0x50
c0016eaf:	c3                   	ret    

c0016eb0 <picEOI(int)>:
c0016eb0:	83 ec 10             	sub    esp,0x10
c0016eb3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016eb8:	75 22                	jne    c0016edc <picEOI(int)+0x2c>
c0016eba:	6a 0b                	push   0xb
c0016ebc:	e8 db fd ff ff       	call   c0016c9c <picGetIRQReg(int)>
c0016ec1:	83 c4 04             	add    esp,0x4
c0016ec4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016ec9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016ece:	25 ff ff 00 00       	and    eax,0xffff
c0016ed3:	25 80 00 00 00       	and    eax,0x80
c0016ed8:	74 72                	je     c0016f4c <picEOI(int)+0x9c>
c0016eda:	66 90                	xchg   ax,ax
c0016edc:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016ee1:	75 31                	jne    c0016f14 <picEOI(int)+0x64>
c0016ee3:	6a 0b                	push   0xb
c0016ee5:	e8 b2 fd ff ff       	call   c0016c9c <picGetIRQReg(int)>
c0016eea:	83 c4 04             	add    esp,0x4
c0016eed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016ef2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ef6:	66 85 c0             	test   ax,ax
c0016ef9:	78 19                	js     c0016f14 <picEOI(int)+0x64>
c0016efb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016f02:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016f07:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016f0b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016f10:	ee                   	out    dx,al
c0016f11:	eb 3d                	jmp    c0016f50 <picEOI(int)+0xa0>
c0016f13:	90                   	nop
c0016f14:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016f19:	7e 19                	jle    c0016f34 <picEOI(int)+0x84>
c0016f1b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016f22:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016f27:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016f2b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016f30:	ee                   	out    dx,al
c0016f31:	8d 76 00             	lea    esi,[esi+0x0]
c0016f34:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016f3b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016f40:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016f44:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016f49:	ee                   	out    dx,al
c0016f4a:	eb 04                	jmp    c0016f50 <picEOI(int)+0xa0>
c0016f4c:	90                   	nop
c0016f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	c3                   	ret    

c0016f54 <RTC::open(int, int, void*)>:
c0016f54:	31 c0                	xor    eax,eax
c0016f56:	c3                   	ret    
c0016f57:	90                   	nop

c0016f58 <RTC::close(int, int, void*)>:
c0016f58:	31 c0                	xor    eax,eax
c0016f5a:	c3                   	ret    
c0016f5b:	90                   	nop

c0016f5c <RTC::timeInSecondsUTC()>:
c0016f5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f60:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016f6c:	c3                   	ret    
c0016f6d:	90                   	nop

c0016f6e <RTC::timeInDatetimeUTC()>:
c0016f6e:	53                   	push   ebx
c0016f6f:	83 ec 14             	sub    esp,0x14
c0016f72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f7c:	50                   	push   eax
c0016f7d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016f80:	83 c4 0c             	add    esp,0xc
c0016f83:	52                   	push   edx
c0016f84:	50                   	push   eax
c0016f85:	53                   	push   ebx
c0016f86:	e8 35 48 ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c0016f8b:	89 d8                	mov    eax,ebx
c0016f8d:	83 c4 14             	add    esp,0x14
c0016f90:	5b                   	pop    ebx
c0016f91:	c2 04 00             	ret    0x4

c0016f94 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016f94:	56                   	push   esi
c0016f95:	53                   	push   ebx
c0016f96:	83 ec 14             	sub    esp,0x14
c0016f99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f9f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016fa2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016fa6:	52                   	push   edx
c0016fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016faf:	50                   	push   eax
c0016fb0:	e8 0b 48 ff ff       	call   c000b7c0 <secondsToDatetime(unsigned long long)>
c0016fb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fb9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016fbd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016fc1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016fc5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016fc9:	89 f0                	mov    eax,esi
c0016fcb:	83 c4 20             	add    esp,0x20
c0016fce:	5b                   	pop    ebx
c0016fcf:	5e                   	pop    esi
c0016fd0:	ff e0                	jmp    eax

c0016fd2 <RTC::~RTC()>:
c0016fd2:	83 ec 0c             	sub    esp,0xc
c0016fd5:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c0016fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fde:	89 10                	mov    DWORD PTR [eax],edx
c0016fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe4:	83 ec 0c             	sub    esp,0xc
c0016fe7:	50                   	push   eax
c0016fe8:	e8 57 45 ff ff       	call   c000b544 <Clock::~Clock()>
c0016fed:	83 c4 10             	add    esp,0x10
c0016ff0:	90                   	nop
c0016ff1:	83 c4 0c             	add    esp,0xc
c0016ff4:	c3                   	ret    
c0016ff5:	90                   	nop

c0016ff6 <RTC::~RTC()>:
c0016ff6:	83 ec 0c             	sub    esp,0xc
c0016ff9:	83 ec 0c             	sub    esp,0xc
c0016ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017000:	e8 cd ff ff ff       	call   c0016fd2 <RTC::~RTC()>
c0017005:	83 c4 10             	add    esp,0x10
c0017008:	83 ec 08             	sub    esp,0x8
c001700b:	68 60 01 00 00       	push   0x160
c0017010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017014:	e8 ff 34 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0017019:	83 c4 10             	add    esp,0x10
c001701c:	83 c4 0c             	add    esp,0xc
c001701f:	c3                   	ret    

c0017020 <RTC::get_update_in_progress_flag()>:
c0017020:	83 ec 14             	sub    esp,0x14
c0017023:	6a 0a                	push   0xa
c0017025:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001702b:	e8 28 ff fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017030:	83 c4 1c             	add    esp,0x1c
c0017033:	c0 e8 07             	shr    al,0x7
c0017036:	c3                   	ret    
c0017037:	90                   	nop

c0017038 <RTC::completeRTCRefresh()>:
c0017038:	55                   	push   ebp
c0017039:	57                   	push   edi
c001703a:	56                   	push   esi
c001703b:	53                   	push   ebx
c001703c:	83 ec 2c             	sub    esp,0x2c
c001703f:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0017045:	83 ec 0c             	sub    esp,0xc
c0017048:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001704c:	e8 cf ff ff ff       	call   c0017020 <RTC::get_update_in_progress_flag()>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	84 c0                	test   al,al
c0017056:	74 0e                	je     c0017066 <RTC::completeRTCRefresh()+0x2e>
c0017058:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001705e:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0017064:	73 df                	jae    c0017045 <RTC::completeRTCRefresh()+0xd>
c0017066:	55                   	push   ebp
c0017067:	55                   	push   ebp
c0017068:	6a 00                	push   0x0
c001706a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017070:	e8 e3 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017075:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017079:	58                   	pop    eax
c001707a:	5a                   	pop    edx
c001707b:	6a 02                	push   0x2
c001707d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017083:	e8 d0 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017088:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001708c:	59                   	pop    ecx
c001708d:	5b                   	pop    ebx
c001708e:	6a 04                	push   0x4
c0017090:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017096:	e8 bd fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c001709b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001709f:	5e                   	pop    esi
c00170a0:	5f                   	pop    edi
c00170a1:	6a 07                	push   0x7
c00170a3:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170a9:	e8 aa fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c00170ae:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00170b2:	5d                   	pop    ebp
c00170b3:	58                   	pop    eax
c00170b4:	6a 08                	push   0x8
c00170b6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170bc:	e8 97 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c00170c1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00170c5:	58                   	pop    eax
c00170c6:	5a                   	pop    edx
c00170c7:	6a 09                	push   0x9
c00170c9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170cf:	e8 84 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	0f b6 e8             	movzx  ebp,al
c00170da:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c00170e0:	83 ec 0c             	sub    esp,0xc
c00170e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170e7:	e8 34 ff ff ff       	call   c0017020 <RTC::get_update_in_progress_flag()>
c00170ec:	83 c4 10             	add    esp,0x10
c00170ef:	84 c0                	test   al,al
c00170f1:	74 0e                	je     c0017101 <RTC::completeRTCRefresh()+0xc9>
c00170f3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00170f9:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c00170ff:	73 df                	jae    c00170e0 <RTC::completeRTCRefresh()+0xa8>
c0017101:	50                   	push   eax
c0017102:	50                   	push   eax
c0017103:	6a 00                	push   0x0
c0017105:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001710b:	e8 48 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017110:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0017114:	58                   	pop    eax
c0017115:	5a                   	pop    edx
c0017116:	6a 02                	push   0x2
c0017118:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001711e:	e8 35 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017123:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017127:	59                   	pop    ecx
c0017128:	5b                   	pop    ebx
c0017129:	6a 04                	push   0x4
c001712b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017131:	e8 22 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017136:	5e                   	pop    esi
c0017137:	88 c3                	mov    bl,al
c0017139:	5f                   	pop    edi
c001713a:	6a 07                	push   0x7
c001713c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017142:	e8 11 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017147:	89 c6                	mov    esi,eax
c0017149:	58                   	pop    eax
c001714a:	5a                   	pop    edx
c001714b:	6a 08                	push   0x8
c001714d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017153:	e8 00 fe fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017158:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001715c:	59                   	pop    ecx
c001715d:	5f                   	pop    edi
c001715e:	6a 09                	push   0x9
c0017160:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017166:	e8 ed fd fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c001716b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001716f:	0f b6 f8             	movzx  edi,al
c0017172:	83 c4 10             	add    esp,0x10
c0017175:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0017179:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001717d:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017181:	89 f1                	mov    ecx,esi
c0017183:	0f 94 c0             	sete   al
c0017186:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001718a:	0f 94 c2             	sete   dl
c001718d:	21 d0                	and    eax,edx
c001718f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0017193:	0f 94 c2             	sete   dl
c0017196:	21 c2                	and    edx,eax
c0017198:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001719c:	0f 94 c0             	sete   al
c001719f:	21 d0                	and    eax,edx
c00171a1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00171a5:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c00171a9:	0f 94 c1             	sete   cl
c00171ac:	84 c8                	test   al,cl
c00171ae:	75 29                	jne    c00171d9 <RTC::completeRTCRefresh()+0x1a1>
c00171b0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00171b4:	89 fd                	mov    ebp,edi
c00171b6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00171ba:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c00171be:	89 f0                	mov    eax,esi
c00171c0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00171c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171c8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00171cc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00171d0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00171d4:	e9 01 ff ff ff       	jmp    c00170da <RTC::completeRTCRefresh()+0xa2>
c00171d9:	39 fd                	cmp    ebp,edi
c00171db:	75 d3                	jne    c00171b0 <RTC::completeRTCRefresh()+0x178>
c00171dd:	55                   	push   ebp
c00171de:	55                   	push   ebp
c00171df:	6a 0b                	push   0xb
c00171e1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171e7:	e8 6c fd fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c00171ec:	83 c4 10             	add    esp,0x10
c00171ef:	89 c5                	mov    ebp,eax
c00171f1:	a8 04                	test   al,0x4
c00171f3:	75 78                	jne    c001726d <RTC::completeRTCRefresh()+0x235>
c00171f5:	b1 0a                	mov    cl,0xa
c00171f7:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c00171fb:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00171ff:	83 e2 0f             	and    edx,0xf
c0017202:	c0 e8 04             	shr    al,0x4
c0017205:	c1 ef 04             	shr    edi,0x4
c0017208:	f6 e1                	mul    cl
c001720a:	6b ff 0a             	imul   edi,edi,0xa
c001720d:	01 d0                	add    eax,edx
c001720f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0017213:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0017217:	83 e2 0f             	and    edx,0xf
c001721a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001721e:	c0 e8 04             	shr    al,0x4
c0017221:	f6 e1                	mul    cl
c0017223:	01 d0                	add    eax,edx
c0017225:	88 da                	mov    dl,bl
c0017227:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001722b:	83 e2 0f             	and    edx,0xf
c001722e:	88 d8                	mov    al,bl
c0017230:	83 e3 80             	and    ebx,0xffffff80
c0017233:	c0 e8 04             	shr    al,0x4
c0017236:	83 e0 07             	and    eax,0x7
c0017239:	f6 e1                	mul    cl
c001723b:	01 d0                	add    eax,edx
c001723d:	89 f2                	mov    edx,esi
c001723f:	09 c3                	or     ebx,eax
c0017241:	83 e2 0f             	and    edx,0xf
c0017244:	89 f0                	mov    eax,esi
c0017246:	c0 e8 04             	shr    al,0x4
c0017249:	f6 e1                	mul    cl
c001724b:	8d 34 02             	lea    esi,[edx+eax*1]
c001724e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0017252:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0017256:	83 e2 0f             	and    edx,0xf
c0017259:	c0 e8 04             	shr    al,0x4
c001725c:	f6 e1                	mul    cl
c001725e:	01 d0                	add    eax,edx
c0017260:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0017264:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017268:	83 e0 0f             	and    eax,0xf
c001726b:	01 c7                	add    edi,eax
c001726d:	83 e5 02             	and    ebp,0x2
c0017270:	75 14                	jne    c0017286 <RTC::completeRTCRefresh()+0x24e>
c0017272:	84 db                	test   bl,bl
c0017274:	79 10                	jns    c0017286 <RTC::completeRTCRefresh()+0x24e>
c0017276:	83 e3 7f             	and    ebx,0x7f
c0017279:	b9 18 00 00 00       	mov    ecx,0x18
c001727e:	8d 43 0c             	lea    eax,[ebx+0xc]
c0017281:	99                   	cdq    
c0017282:	f7 f9                	idiv   ecx
c0017284:	88 d3                	mov    bl,dl
c0017286:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001728c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0017292:	77 06                	ja     c001729a <RTC::completeRTCRefresh()+0x262>
c0017294:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001729a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001729f:	31 d2                	xor    edx,edx
c00172a1:	c1 e1 10             	shl    ecx,0x10
c00172a4:	89 d7                	mov    edi,edx
c00172a6:	c1 e5 10             	shl    ebp,0x10
c00172a9:	31 c0                	xor    eax,eax
c00172ab:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00172b1:	09 cf                	or     edi,ecx
c00172b3:	89 fa                	mov    edx,edi
c00172b5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c00172b9:	88 da                	mov    dl,bl
c00172bb:	89 f3                	mov    ebx,esi
c00172bd:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c00172c1:	88 d8                	mov    al,bl
c00172c3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c00172c7:	0f b7 c8             	movzx  ecx,ax
c00172ca:	09 e9                	or     ecx,ebp
c00172cc:	89 c8                	mov    eax,ecx
c00172ce:	51                   	push   ecx
c00172cf:	51                   	push   ecx
c00172d0:	52                   	push   edx
c00172d1:	50                   	push   eax
c00172d2:	e8 5c 43 ff ff       	call   c000b633 <datetimeToSeconds(datetime_t)>
c00172d7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00172db:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00172e1:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00172e7:	83 c4 3c             	add    esp,0x3c
c00172ea:	5b                   	pop    ebx
c00172eb:	5e                   	pop    esi
c00172ec:	5f                   	pop    edi
c00172ed:	5d                   	pop    ebp
c00172ee:	c3                   	ret    
c00172ef:	90                   	nop

c00172f0 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00172f0:	55                   	push   ebp
c00172f1:	57                   	push   edi
c00172f2:	56                   	push   esi
c00172f3:	53                   	push   ebx
c00172f4:	83 ec 30             	sub    esp,0x30
c00172f7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00172fb:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00172ff:	6a 00                	push   0x0
c0017301:	6a 00                	push   0x0
c0017303:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017309:	e8 60 fd fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c001730e:	83 c4 0c             	add    esp,0xc
c0017311:	6a 00                	push   0x0
c0017313:	6a 02                	push   0x2
c0017315:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001731b:	e8 4e fd fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017320:	31 d2                	xor    edx,edx
c0017322:	89 f9                	mov    ecx,edi
c0017324:	89 f8                	mov    eax,edi
c0017326:	c1 e9 10             	shr    ecx,0x10
c0017329:	0f b6 c4             	movzx  eax,ah
c001732c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0017330:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017334:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017338:	b9 64 00 00 00       	mov    ecx,0x64
c001733d:	89 f0                	mov    eax,esi
c001733f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0017343:	89 f0                	mov    eax,esi
c0017345:	0f b6 c4             	movzx  eax,ah
c0017348:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001734c:	89 f0                	mov    eax,esi
c001734e:	c1 e8 10             	shr    eax,0x10
c0017351:	66 f7 f1             	div    cx
c0017354:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0017359:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001735e:	59                   	pop    ecx
c001735f:	5b                   	pop    ebx
c0017360:	89 fb                	mov    ebx,edi
c0017362:	6a 0b                	push   0xb
c0017364:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001736a:	e8 e9 fb fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c001736f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c001737b:	75 74                	jne    c00173f1 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c001737d:	b2 0a                	mov    dl,0xa
c001737f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017383:	0f b6 c1             	movzx  eax,cl
c0017386:	f6 f2                	div    dl
c0017388:	88 c3                	mov    bl,al
c001738a:	88 e0                	mov    al,ah
c001738c:	c1 e3 04             	shl    ebx,0x4
c001738f:	09 c3                	or     ebx,eax
c0017391:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017396:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001739a:	f6 f2                	div    dl
c001739c:	88 c1                	mov    cl,al
c001739e:	88 e0                	mov    al,ah
c00173a0:	c1 e1 04             	shl    ecx,0x4
c00173a3:	09 c1                	or     ecx,eax
c00173a5:	89 f8                	mov    eax,edi
c00173a7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00173ab:	0f b6 c0             	movzx  eax,al
c00173ae:	f6 f2                	div    dl
c00173b0:	88 c3                	mov    bl,al
c00173b2:	88 e0                	mov    al,ah
c00173b4:	c1 e3 04             	shl    ebx,0x4
c00173b7:	09 c3                	or     ebx,eax
c00173b9:	89 f0                	mov    eax,esi
c00173bb:	0f b6 c0             	movzx  eax,al
c00173be:	f6 f2                	div    dl
c00173c0:	88 c1                	mov    cl,al
c00173c2:	88 e0                	mov    al,ah
c00173c4:	c1 e1 04             	shl    ecx,0x4
c00173c7:	09 c1                	or     ecx,eax
c00173c9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00173ce:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c00173d2:	f6 f2                	div    dl
c00173d4:	88 c1                	mov    cl,al
c00173d6:	88 e0                	mov    al,ah
c00173d8:	c1 e1 04             	shl    ecx,0x4
c00173db:	09 c1                	or     ecx,eax
c00173dd:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c00173e2:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00173e6:	f6 f2                	div    dl
c00173e8:	89 c5                	mov    ebp,eax
c00173ea:	88 e0                	mov    al,ah
c00173ec:	c1 e5 04             	shl    ebp,0x4
c00173ef:	09 c5                	or     ebp,eax
c00173f1:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00173f6:	75 17                	jne    c001740f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00173f8:	80 fb 0b             	cmp    bl,0xb
c00173fb:	76 0c                	jbe    c0017409 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00173fd:	80 eb 0c             	sub    bl,0xc
c0017400:	75 02                	jne    c0017404 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017402:	b3 0c                	mov    bl,0xc
c0017404:	83 cb 80             	or     ebx,0xffffff80
c0017407:	eb 06                	jmp    c001740f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0017409:	84 db                	test   bl,bl
c001740b:	75 02                	jne    c001740f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001740d:	b3 0c                	mov    bl,0xc
c001740f:	0f b6 db             	movzx  ebx,bl
c0017412:	50                   	push   eax
c0017413:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0017418:	50                   	push   eax
c0017419:	6a 00                	push   0x0
c001741b:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017421:	e8 48 fc fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017426:	83 c4 0c             	add    esp,0xc
c0017429:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001742e:	50                   	push   eax
c001742f:	6a 02                	push   0x2
c0017431:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017437:	e8 32 fc fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c001743c:	83 c4 0c             	add    esp,0xc
c001743f:	53                   	push   ebx
c0017440:	6a 04                	push   0x4
c0017442:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017448:	e8 21 fc fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c001744d:	83 c4 0c             	add    esp,0xc
c0017450:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017455:	50                   	push   eax
c0017456:	6a 07                	push   0x7
c0017458:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001745e:	e8 0b fc fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017463:	83 c4 0c             	add    esp,0xc
c0017466:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001746b:	50                   	push   eax
c001746c:	6a 08                	push   0x8
c001746e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017474:	e8 f5 fb fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017479:	83 c4 0c             	add    esp,0xc
c001747c:	89 e8                	mov    eax,ebp
c001747e:	0f b6 e8             	movzx  ebp,al
c0017481:	55                   	push   ebp
c0017482:	6a 09                	push   0x9
c0017484:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001748a:	e8 df fb fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c001748f:	5a                   	pop    edx
c0017490:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017494:	e8 9f fb ff ff       	call   c0017038 <RTC::completeRTCRefresh()>
c0017499:	83 c4 3c             	add    esp,0x3c
c001749c:	b0 01                	mov    al,0x1
c001749e:	5b                   	pop    ebx
c001749f:	5e                   	pop    esi
c00174a0:	5f                   	pop    edi
c00174a1:	5d                   	pop    ebp
c00174a2:	c3                   	ret    

c00174a3 <rtcIRQHandler(regs*, void*)>:
c00174a3:	53                   	push   ebx
c00174a4:	83 ec 10             	sub    esp,0x10
c00174a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00174ab:	6a 0c                	push   0xc
c00174ad:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174b3:	e8 a0 fa fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c00174b8:	83 c4 10             	add    esp,0x10
c00174bb:	84 c0                	test   al,al
c00174bd:	79 24                	jns    c00174e3 <rtcIRQHandler(regs*, void*)+0x40>
c00174bf:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00174c6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00174cd:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c00174d4:	75 0d                	jne    c00174e3 <rtcIRQHandler(regs*, void*)+0x40>
c00174d6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00174da:	83 c4 08             	add    esp,0x8
c00174dd:	5b                   	pop    ebx
c00174de:	e9 55 fb ff ff       	jmp    c0017038 <RTC::completeRTCRefresh()>
c00174e3:	83 c4 08             	add    esp,0x8
c00174e6:	5b                   	pop    ebx
c00174e7:	c3                   	ret    

c00174e8 <RTC::RTC()>:
c00174e8:	83 ec 1c             	sub    esp,0x1c
c00174eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174ef:	83 ec 08             	sub    esp,0x8
c00174f2:	68 cf 0d 02 c0       	push   0xc0020dcf
c00174f7:	50                   	push   eax
c00174f8:	e8 11 40 ff ff       	call   c000b50e <Clock::Clock(char const*)>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	ba ec 0d 02 c0       	mov    edx,0xc0020dec
c0017505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017509:	89 10                	mov    DWORD PTR [eax],edx
c001750b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001750f:	83 ec 0c             	sub    esp,0xc
c0017512:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017516:	6a 01                	push   0x1
c0017518:	68 a3 74 01 c0       	push   0xc00174a3
c001751d:	6a 08                	push   0x8
c001751f:	50                   	push   eax
c0017520:	e8 d3 44 ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017525:	83 c4 20             	add    esp,0x20
c0017528:	89 c2                	mov    edx,eax
c001752a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001752e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017534:	fa                   	cli    
c0017535:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001753a:	40                   	inc    eax
c001753b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0017540:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017545:	83 ec 08             	sub    esp,0x8
c0017548:	6a 0b                	push   0xb
c001754a:	50                   	push   eax
c001754b:	e8 08 fa fe ff       	call   c0006f58 <Computer::readCMOS(unsigned char)>
c0017550:	83 c4 10             	add    esp,0x10
c0017553:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017557:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001755c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017560:	83 ca 10             	or     edx,0x10
c0017563:	81 e2 ff 00 00 00    	and    edx,0xff
c0017569:	83 ec 04             	sub    esp,0x4
c001756c:	52                   	push   edx
c001756d:	6a 0b                	push   0xb
c001756f:	50                   	push   eax
c0017570:	e8 f9 fa fe ff       	call   c000706e <Computer::writeCMOS(unsigned char, unsigned char)>
c0017575:	83 c4 10             	add    esp,0x10
c0017578:	83 ec 0c             	sub    esp,0xc
c001757b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001757f:	e8 b4 fa ff ff       	call   c0017038 <RTC::completeRTCRefresh()>
c0017584:	83 c4 10             	add    esp,0x10
c0017587:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001758c:	48                   	dec    eax
c001758d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0017592:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017597:	85 c0                	test   eax,eax
c0017599:	75 01                	jne    c001759c <RTC::RTC()+0xb4>
c001759b:	fb                   	sti    
c001759c:	90                   	nop
c001759d:	83 c4 1c             	add    esp,0x1c
c00175a0:	c3                   	ret    
c00175a1:	66 90                	xchg   ax,ax
c00175a3:	90                   	nop

c00175a4 <HalConsoleScroll(int, int)>:
c00175a4:	83 ec 10             	sub    esp,0x10
c00175a7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00175af:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00175b7:	90                   	nop
c00175b8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00175bd:	0f 8f e1 00 00 00    	jg     c00176a4 <HalConsoleScroll(int, int)+0x100>
c00175c3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00175cb:	90                   	nop
c00175cc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00175d4:	0f 8f be 00 00 00    	jg     c0017698 <HalConsoleScroll(int, int)+0xf4>
c00175da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175de:	89 d0                	mov    eax,edx
c00175e0:	c1 e0 02             	shl    eax,0x2
c00175e3:	01 d0                	add    eax,edx
c00175e5:	c1 e0 05             	shl    eax,0x5
c00175e8:	89 c2                	mov    edx,eax
c00175ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00175ee:	01 d0                	add    eax,edx
c00175f0:	89 c2                	mov    edx,eax
c00175f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175f6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00175f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00175fd:	89 d0                	mov    eax,edx
c00175ff:	c1 e0 02             	shl    eax,0x2
c0017602:	01 d0                	add    eax,edx
c0017604:	c1 e0 05             	shl    eax,0x5
c0017607:	89 c2                	mov    edx,eax
c0017609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001760d:	01 d0                	add    eax,edx
c001760f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017619:	01 c2                	add    edx,eax
c001761b:	8a 01                	mov    al,BYTE PTR [ecx]
c001761d:	88 02                	mov    BYTE PTR [edx],al
c001761f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017624:	75 66                	jne    c001768c <HalConsoleScroll(int, int)+0xe8>
c0017626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001762a:	83 e0 01             	and    eax,0x1
c001762d:	74 39                	je     c0017668 <HalConsoleScroll(int, int)+0xc4>
c001762f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017633:	83 e0 0f             	and    eax,0xf
c0017636:	88 c2                	mov    dl,al
c0017638:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001763c:	c1 e0 04             	shl    eax,0x4
c001763f:	88 d1                	mov    cl,dl
c0017641:	09 c1                	or     ecx,eax
c0017643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017647:	89 d0                	mov    eax,edx
c0017649:	c1 e0 02             	shl    eax,0x2
c001764c:	01 d0                	add    eax,edx
c001764e:	c1 e0 05             	shl    eax,0x5
c0017651:	89 c2                	mov    edx,eax
c0017653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017657:	01 d0                	add    eax,edx
c0017659:	89 c2                	mov    edx,eax
c001765b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001765f:	01 d0                	add    eax,edx
c0017661:	88 ca                	mov    dl,cl
c0017663:	88 10                	mov    BYTE PTR [eax],dl
c0017665:	eb 25                	jmp    c001768c <HalConsoleScroll(int, int)+0xe8>
c0017667:	90                   	nop
c0017668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001766c:	89 d0                	mov    eax,edx
c001766e:	c1 e0 02             	shl    eax,0x2
c0017671:	01 d0                	add    eax,edx
c0017673:	c1 e0 05             	shl    eax,0x5
c0017676:	89 c2                	mov    edx,eax
c0017678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001767c:	01 d0                	add    eax,edx
c001767e:	89 c2                	mov    edx,eax
c0017680:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017684:	01 d0                	add    eax,edx
c0017686:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017689:	8d 76 00             	lea    esi,[esi+0x0]
c001768c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017690:	e9 37 ff ff ff       	jmp    c00175cc <HalConsoleScroll(int, int)+0x28>
c0017695:	8d 76 00             	lea    esi,[esi+0x0]
c0017698:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001769c:	e9 17 ff ff ff       	jmp    c00175b8 <HalConsoleScroll(int, int)+0x14>
c00176a1:	8d 76 00             	lea    esi,[esi+0x0]
c00176a4:	90                   	nop
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	c3                   	ret    
c00176a9:	8d 76 00             	lea    esi,[esi+0x0]

c00176ac <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00176ac:	83 ec 14             	sub    esp,0x14
c00176af:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176b3:	88 04 24             	mov    BYTE PTR [esp],al
c00176b6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00176b9:	25 ff 00 00 00       	and    eax,0xff
c00176be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176c2:	89 d1                	mov    ecx,edx
c00176c4:	83 e1 0f             	and    ecx,0xf
c00176c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176cb:	c1 e2 04             	shl    edx,0x4
c00176ce:	81 e2 ff 00 00 00    	and    edx,0xff
c00176d4:	09 ca                	or     edx,ecx
c00176d6:	c1 e2 08             	shl    edx,0x8
c00176d9:	09 d0                	or     eax,edx
c00176db:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00176e0:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00176e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176ec:	89 d0                	mov    eax,edx
c00176ee:	c1 e0 02             	shl    eax,0x2
c00176f1:	01 d0                	add    eax,edx
c00176f3:	c1 e0 04             	shl    eax,0x4
c00176f6:	89 c2                	mov    edx,eax
c00176f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00176fc:	01 d0                	add    eax,edx
c00176fe:	01 c0                	add    eax,eax
c0017700:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017708:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001770d:	66 89 02             	mov    WORD PTR [edx],ax
c0017710:	90                   	nop
c0017711:	83 c4 14             	add    esp,0x14
c0017714:	c3                   	ret    
c0017715:	8d 76 00             	lea    esi,[esi+0x0]

c0017718 <HalConsoleCursorUpdate(int, int)>:
c0017718:	83 ec 20             	sub    esp,0x20
c001771b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001771f:	89 c2                	mov    edx,eax
c0017721:	89 d0                	mov    eax,edx
c0017723:	c1 e0 02             	shl    eax,0x2
c0017726:	01 d0                	add    eax,edx
c0017728:	c1 e0 04             	shl    eax,0x4
c001772b:	89 c2                	mov    edx,eax
c001772d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017731:	01 d0                	add    eax,edx
c0017733:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017738:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001773f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017744:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017748:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001774c:	ee                   	out    dx,al
c001774d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017752:	25 ff 00 00 00       	and    eax,0xff
c0017757:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001775e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017762:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001776a:	ee                   	out    dx,al
c001776b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017772:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017777:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001777b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001777f:	ee                   	out    dx,al
c0017780:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017785:	66 c1 e8 08          	shr    ax,0x8
c0017789:	25 ff 00 00 00       	and    eax,0xff
c001778e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017795:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017799:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001779d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177a1:	ee                   	out    dx,al
c00177a2:	90                   	nop
c00177a3:	83 c4 20             	add    esp,0x20
c00177a6:	c3                   	ret    
c00177a7:	90                   	nop

c00177a8 <FAT::getName()>:
c00177a8:	b8 20 0e 02 c0       	mov    eax,0xc0020e20
c00177ad:	c3                   	ret    
c00177ae:	66 90                	xchg   ax,ax

c00177b0 <FAT::tell(void*, unsigned long long*)>:
c00177b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00177b5:	75 09                	jne    c00177c0 <FAT::tell(void*, unsigned long long*)+0x10>
c00177b7:	b8 04 00 00 00       	mov    eax,0x4
c00177bc:	c3                   	ret    
c00177bd:	8d 76 00             	lea    esi,[esi+0x0]
c00177c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00177c5:	75 09                	jne    c00177d0 <FAT::tell(void*, unsigned long long*)+0x20>
c00177c7:	b8 04 00 00 00       	mov    eax,0x4
c00177cc:	c3                   	ret    
c00177cd:	8d 76 00             	lea    esi,[esi+0x0]
c00177d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00177d7:	ba 00 00 00 00       	mov    edx,0x0
c00177dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177e0:	89 01                	mov    DWORD PTR [ecx],eax
c00177e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00177e5:	b8 00 00 00 00       	mov    eax,0x0
c00177ea:	c3                   	ret    
c00177eb:	90                   	nop

c00177ec <FAT::stat(void*, unsigned long long*)>:
c00177ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00177f1:	75 09                	jne    c00177fc <FAT::stat(void*, unsigned long long*)+0x10>
c00177f3:	b8 04 00 00 00       	mov    eax,0x4
c00177f8:	c3                   	ret    
c00177f9:	8d 76 00             	lea    esi,[esi+0x0]
c00177fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017801:	75 09                	jne    c001780c <FAT::stat(void*, unsigned long long*)+0x20>
c0017803:	b8 04 00 00 00       	mov    eax,0x4
c0017808:	c3                   	ret    
c0017809:	8d 76 00             	lea    esi,[esi+0x0]
c001780c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017810:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017813:	ba 00 00 00 00       	mov    edx,0x0
c0017818:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001781c:	89 01                	mov    DWORD PTR [ecx],eax
c001781e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017821:	b8 00 00 00 00       	mov    eax,0x0
c0017826:	c3                   	ret    
c0017827:	90                   	nop

c0017828 <FAT::~FAT()>:
c0017828:	83 ec 0c             	sub    esp,0xc
c001782b:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c0017830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017834:	89 10                	mov    DWORD PTR [eax],edx
c0017836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001783a:	83 ec 0c             	sub    esp,0xc
c001783d:	50                   	push   eax
c001783e:	e8 11 31 ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c0017843:	83 c4 10             	add    esp,0x10
c0017846:	90                   	nop
c0017847:	83 c4 0c             	add    esp,0xc
c001784a:	c3                   	ret    
c001784b:	90                   	nop

c001784c <FAT::~FAT()>:
c001784c:	83 ec 0c             	sub    esp,0xc
c001784f:	83 ec 0c             	sub    esp,0xc
c0017852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017856:	e8 cd ff ff ff       	call   c0017828 <FAT::~FAT()>
c001785b:	83 c4 10             	add    esp,0x10
c001785e:	83 ec 08             	sub    esp,0x8
c0017861:	6a 08                	push   0x8
c0017863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017867:	e8 ac 2c ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001786c:	83 c4 10             	add    esp,0x10
c001786f:	83 c4 0c             	add    esp,0xc
c0017872:	c3                   	ret    
c0017873:	90                   	nop

c0017874 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017874:	83 ec 1c             	sub    esp,0x1c
c0017877:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001787e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017883:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017887:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001788e:	83 f8 ff             	cmp    eax,0xffffffff
c0017891:	75 35                	jne    c00178c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017893:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017897:	88 c2                	mov    dl,al
c0017899:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001789e:	01 d0                	add    eax,edx
c00178a0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00178a4:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00178aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178ae:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00178b5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178be:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00178c5:	eb 19                	jmp    c00178e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00178c7:	90                   	nop
c00178c8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00178cc:	88 c2                	mov    dl,al
c00178ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178d2:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00178d9:	01 d0                	add    eax,edx
c00178db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00178df:	90                   	nop
c00178e0:	83 ec 04             	sub    esp,0x4
c00178e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00178e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00178eb:	8d 44 24 15          	lea    eax,[esp+0x15]
c00178ef:	50                   	push   eax
c00178f0:	e8 4f d5 fe ff       	call   c0004e44 <f_getlabel>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017901:	75 09                	jne    c001790c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017903:	b8 00 00 00 00       	mov    eax,0x0
c0017908:	eb 0a                	jmp    c0017914 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001790a:	66 90                	xchg   ax,ax
c001790c:	b8 01 00 00 00       	mov    eax,0x1
c0017911:	8d 76 00             	lea    esi,[esi+0x0]
c0017914:	83 c4 1c             	add    esp,0x1c
c0017917:	c3                   	ret    

c0017918 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017918:	57                   	push   edi
c0017919:	83 ec 58             	sub    esp,0x58
c001791c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017924:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017928:	b8 00 00 00 00       	mov    eax,0x0
c001792d:	b9 0f 00 00 00       	mov    ecx,0xf
c0017932:	fc                   	cld    
c0017933:	89 d7                	mov    edi,edx
c0017935:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017937:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001793b:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017942:	83 f8 ff             	cmp    eax,0xffffffff
c0017945:	75 35                	jne    c001797c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017947:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001794b:	88 c2                	mov    dl,al
c001794d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017952:	01 d0                	add    eax,edx
c0017954:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017958:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c001795e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017962:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017969:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001796e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017972:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017979:	eb 19                	jmp    c0017994 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001797b:	90                   	nop
c001797c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017980:	88 c2                	mov    dl,al
c0017982:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017986:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001798d:	01 d0                	add    eax,edx
c001798f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017993:	90                   	nop
c0017994:	83 ec 08             	sub    esp,0x8
c0017997:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001799b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001799f:	50                   	push   eax
c00179a0:	e8 0b 8e fe ff       	call   c00007b0 <strcat>
c00179a5:	83 c4 10             	add    esp,0x10
c00179a8:	83 ec 0c             	sub    esp,0xc
c00179ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00179af:	50                   	push   eax
c00179b0:	e8 e0 d5 fe ff       	call   c0004f95 <f_setlabel>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00179bc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00179c1:	75 09                	jne    c00179cc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00179c3:	b8 00 00 00 00       	mov    eax,0x0
c00179c8:	eb 0a                	jmp    c00179d4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00179ca:	66 90                	xchg   ax,ax
c00179cc:	b8 01 00 00 00       	mov    eax,0x1
c00179d1:	8d 76 00             	lea    esi,[esi+0x0]
c00179d4:	83 c4 58             	add    esp,0x58
c00179d7:	5f                   	pop    edi
c00179d8:	c3                   	ret    
c00179d9:	90                   	nop
c00179da:	66 90                	xchg   ax,ax

c00179dc <FAT::format(LogicalDisk*, int, char const*, int)>:
c00179dc:	83 ec 2c             	sub    esp,0x2c
c00179df:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00179e7:	83 ec 08             	sub    esp,0x8
c00179ea:	68 44 0e 02 c0       	push   0xc0020e44
c00179ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179f3:	e8 d8 8c fe ff       	call   c00006d0 <strcmp>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	85 c0                	test   eax,eax
c00179fd:	0f 94 c0             	sete   al
c0017a00:	84 c0                	test   al,al
c0017a02:	74 10                	je     c0017a14 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017a04:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017a0c:	e9 b3 00 00 00       	jmp    c0017ac4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017a11:	8d 76 00             	lea    esi,[esi+0x0]
c0017a14:	83 ec 08             	sub    esp,0x8
c0017a17:	68 36 0e 02 c0       	push   0xc0020e36
c0017a1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a20:	e8 ab 8c fe ff       	call   c00006d0 <strcmp>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	85 c0                	test   eax,eax
c0017a2a:	0f 94 c0             	sete   al
c0017a2d:	84 c0                	test   al,al
c0017a2f:	74 0f                	je     c0017a40 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017a31:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017a39:	e9 86 00 00 00       	jmp    c0017ac4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017a3e:	66 90                	xchg   ax,ax
c0017a40:	83 ec 08             	sub    esp,0x8
c0017a43:	68 3c 0e 02 c0       	push   0xc0020e3c
c0017a48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a4c:	e8 7f 8c fe ff       	call   c00006d0 <strcmp>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	85 c0                	test   eax,eax
c0017a56:	0f 94 c0             	sete   al
c0017a59:	84 c0                	test   al,al
c0017a5b:	74 0b                	je     c0017a68 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017a5d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017a65:	eb 5d                	jmp    c0017ac4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017a67:	90                   	nop
c0017a68:	83 ec 08             	sub    esp,0x8
c0017a6b:	68 fc eb 01 c0       	push   0xc001ebfc
c0017a70:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a74:	e8 57 8c fe ff       	call   c00006d0 <strcmp>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	85 c0                	test   eax,eax
c0017a7e:	0f 94 c0             	sete   al
c0017a81:	84 c0                	test   al,al
c0017a83:	74 0b                	je     c0017a90 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017a85:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017a8d:	eb 35                	jmp    c0017ac4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017a8f:	90                   	nop
c0017a90:	83 ec 08             	sub    esp,0x8
c0017a93:	68 42 0e 02 c0       	push   0xc0020e42
c0017a98:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a9c:	e8 2f 8c fe ff       	call   c00006d0 <strcmp>
c0017aa1:	83 c4 10             	add    esp,0x10
c0017aa4:	85 c0                	test   eax,eax
c0017aa6:	0f 94 c0             	sete   al
c0017aa9:	84 c0                	test   al,al
c0017aab:	74 0b                	je     c0017ab8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017aad:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017ab5:	eb 0d                	jmp    c0017ac4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ab7:	90                   	nop
c0017ab8:	b8 08 00 00 00       	mov    eax,0x8
c0017abd:	e9 ea 00 00 00       	jmp    c0017bac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017ac2:	66 90                	xchg   ax,ax
c0017ac4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017acb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017ad0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ad4:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017adb:	83 f8 ff             	cmp    eax,0xffffffff
c0017ade:	75 34                	jne    c0017b14 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0017ae0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017ae4:	88 c2                	mov    dl,al
c0017ae6:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017aeb:	01 d0                	add    eax,edx
c0017aed:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017af1:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017af7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017afb:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017b02:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b07:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017b0b:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017b12:	eb 18                	jmp    c0017b2c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017b14:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017b18:	88 c2                	mov    dl,al
c0017b1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b1e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017b25:	01 d0                	add    eax,edx
c0017b27:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017b2b:	90                   	nop
c0017b2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b30:	88 04 24             	mov    BYTE PTR [esp],al
c0017b33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017b37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017b43:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017b48:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017b50:	83 ec 0c             	sub    esp,0xc
c0017b53:	68 00 20 00 00       	push   0x2000
c0017b58:	e8 10 fd fe ff       	call   c000786d <malloc>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b64:	68 00 20 00 00       	push   0x2000
c0017b69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b6d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b71:	50                   	push   eax
c0017b72:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017b76:	50                   	push   eax
c0017b77:	e8 09 d7 fe ff       	call   c0005285 <f_mkfs>
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b83:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b88:	75 0a                	jne    c0017b94 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017b8a:	b8 00 00 00 00       	mov    eax,0x0
c0017b8f:	eb 1b                	jmp    c0017bac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017b91:	8d 76 00             	lea    esi,[esi+0x0]
c0017b94:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017b99:	75 09                	jne    c0017ba4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017b9b:	b8 09 00 00 00       	mov    eax,0x9
c0017ba0:	eb 0a                	jmp    c0017bac <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017ba2:	66 90                	xchg   ax,ax
c0017ba4:	b8 01 00 00 00       	mov    eax,0x1
c0017ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bac:	83 c4 2c             	add    esp,0x2c
c0017baf:	c3                   	ret    

c0017bb0 <FAT::tryMount(LogicalDisk*, int)>:
c0017bb0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017bb6:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017bbb:	83 f8 14             	cmp    eax,0x14
c0017bbe:	75 18                	jne    c0017bd8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017bc0:	83 ec 0c             	sub    esp,0xc
c0017bc3:	68 48 0e 02 c0       	push   0xc0020e48
c0017bc8:	e8 02 88 ff ff       	call   c00103cf <KePanic(char const*)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	b0 00                	mov    al,0x0
c0017bd2:	e9 e9 01 00 00       	jmp    c0017dc0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017bd7:	90                   	nop
c0017bd8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017bdf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017be5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017beb:	3d 00 02 00 00       	cmp    eax,0x200
c0017bf0:	74 0a                	je     c0017bfc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017bf2:	b0 00                	mov    al,0x0
c0017bf4:	e9 c7 01 00 00       	jmp    c0017dc0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0017bfc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017c04:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017c0b:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017c12:	83 f8 ff             	cmp    eax,0xffffffff
c0017c15:	74 09                	je     c0017c20 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017c17:	b0 01                	mov    al,0x1
c0017c19:	e9 a2 01 00 00       	jmp    c0017dc0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017c1e:	66 90                	xchg   ax,ax
c0017c20:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017c2a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017c32:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017c39:	88 c2                	mov    dl,al
c0017c3b:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c40:	01 d0                	add    eax,edx
c0017c42:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017c49:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017c4f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017c56:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017c5d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c62:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017c69:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017c70:	83 ec 0c             	sub    esp,0xc
c0017c73:	68 34 02 00 00       	push   0x234
c0017c78:	e8 f0 fb fe ff       	call   c000786d <malloc>
c0017c7d:	83 c4 10             	add    esp,0x10
c0017c80:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017c87:	83 ec 04             	sub    esp,0x4
c0017c8a:	6a 00                	push   0x0
c0017c8c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017c93:	50                   	push   eax
c0017c94:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017c9b:	e8 0b be fe ff       	call   c0003aab <f_mount>
c0017ca0:	83 c4 10             	add    esp,0x10
c0017ca3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017caa:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0017cb2:	74 1c                	je     c0017cd0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017cb4:	83 ec 0c             	sub    esp,0xc
c0017cb7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017cbe:	e8 ca fb fe ff       	call   c000788d <rfree>
c0017cc3:	83 c4 10             	add    esp,0x10
c0017cc6:	b0 00                	mov    al,0x0
c0017cc8:	e9 f3 00 00 00       	jmp    c0017dc0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0017cd0:	83 ec 04             	sub    esp,0x4
c0017cd3:	68 00 01 00 00       	push   0x100
c0017cd8:	6a 00                	push   0x0
c0017cda:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017ce1:	50                   	push   eax
c0017ce2:	e8 d9 87 fe ff       	call   c00004c0 <memset>
c0017ce7:	83 c4 10             	add    esp,0x10
c0017cea:	83 ec 08             	sub    esp,0x8
c0017ced:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017cf4:	50                   	push   eax
c0017cf5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017cfc:	50                   	push   eax
c0017cfd:	e8 ae 8a fe ff       	call   c00007b0 <strcat>
c0017d02:	83 c4 10             	add    esp,0x10
c0017d05:	83 ec 08             	sub    esp,0x8
c0017d08:	68 56 0e 02 c0       	push   0xc0020e56
c0017d0d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017d14:	50                   	push   eax
c0017d15:	e8 96 8a fe ff       	call   c00007b0 <strcat>
c0017d1a:	83 c4 10             	add    esp,0x10
c0017d1d:	83 ec 04             	sub    esp,0x4
c0017d20:	6a 01                	push   0x1
c0017d22:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017d29:	50                   	push   eax
c0017d2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017d2e:	50                   	push   eax
c0017d2f:	e8 d9 bd fe ff       	call   c0003b0d <f_open>
c0017d34:	83 c4 10             	add    esp,0x10
c0017d37:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017d3e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017d45:	85 c0                	test   eax,eax
c0017d47:	74 0b                	je     c0017d54 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017d49:	78 31                	js     c0017d7c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017d4b:	83 e8 04             	sub    eax,0x4
c0017d4e:	83 f8 01             	cmp    eax,0x1
c0017d51:	77 29                	ja     c0017d7c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017d53:	90                   	nop
c0017d54:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017d5c:	83 ec 0c             	sub    esp,0xc
c0017d5f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017d63:	50                   	push   eax
c0017d64:	e8 57 c5 fe ff       	call   c00042c0 <f_close>
c0017d69:	83 c4 10             	add    esp,0x10
c0017d6c:	90                   	nop
c0017d6d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017d75:	74 41                	je     c0017db8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017d77:	eb 33                	jmp    c0017dac <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017d79:	8d 76 00             	lea    esi,[esi+0x0]
c0017d7c:	83 ec 0c             	sub    esp,0xc
c0017d7f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017d86:	e8 02 fb fe ff       	call   c000788d <rfree>
c0017d8b:	83 c4 10             	add    esp,0x10
c0017d8e:	83 ec 04             	sub    esp,0x4
c0017d91:	6a 00                	push   0x0
c0017d93:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017d9a:	50                   	push   eax
c0017d9b:	6a 00                	push   0x0
c0017d9d:	e8 09 bd fe ff       	call   c0003aab <f_mount>
c0017da2:	83 c4 10             	add    esp,0x10
c0017da5:	b0 00                	mov    al,0x0
c0017da7:	eb 17                	jmp    c0017dc0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017da9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dac:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017db1:	40                   	inc    eax
c0017db2:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017db7:	90                   	nop
c0017db8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017dbf:	90                   	nop
c0017dc0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017dc6:	c3                   	ret    
c0017dc7:	90                   	nop

c0017dc8 <FAT::allocateSwapfile(char const*, int)>:
c0017dc8:	55                   	push   ebp
c0017dc9:	57                   	push   edi
c0017dca:	56                   	push   esi
c0017dcb:	53                   	push   ebx
c0017dcc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017dd2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017ddd:	83 ec 0c             	sub    esp,0xc
c0017de0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017de7:	e8 81 fa fe ff       	call   c000786d <malloc>
c0017dec:	83 c4 10             	add    esp,0x10
c0017def:	89 c7                	mov    edi,eax
c0017df1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017df6:	83 ec 04             	sub    esp,0x4
c0017df9:	50                   	push   eax
c0017dfa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017e01:	57                   	push   edi
c0017e02:	e8 7d 2d ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0017e07:	83 c4 10             	add    esp,0x10
c0017e0a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017e11:	83 ec 04             	sub    esp,0x4
c0017e14:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017e18:	50                   	push   eax
c0017e19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017e1d:	50                   	push   eax
c0017e1e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017e25:	e8 c6 30 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0017e2a:	83 c4 10             	add    esp,0x10
c0017e2d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017e34:	c1 e0 14             	shl    eax,0x14
c0017e37:	89 c7                	mov    edi,eax
c0017e39:	89 c5                	mov    ebp,eax
c0017e3b:	c1 fd 1f             	sar    ebp,0x1f
c0017e3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e46:	89 f9                	mov    ecx,edi
c0017e48:	31 c1                	xor    ecx,eax
c0017e4a:	89 cb                	mov    ebx,ecx
c0017e4c:	89 e9                	mov    ecx,ebp
c0017e4e:	31 d1                	xor    ecx,edx
c0017e50:	89 ce                	mov    esi,ecx
c0017e52:	89 f0                	mov    eax,esi
c0017e54:	09 d8                	or     eax,ebx
c0017e56:	0f 84 9c 00 00 00    	je     c0017ef8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017e5c:	83 ec 0c             	sub    esp,0xc
c0017e5f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017e66:	e8 51 2f ff ff       	call   c000adbc <File::unlink()>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	83 ec 08             	sub    esp,0x8
c0017e71:	6a 12                	push   0x12
c0017e73:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017e7a:	e8 c5 2d ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017e89:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017e8f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017e96:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017e9d:	c1 e0 14             	shl    eax,0x14
c0017ea0:	83 ec 04             	sub    esp,0x4
c0017ea3:	6a 01                	push   0x1
c0017ea5:	50                   	push   eax
c0017ea6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017ead:	e8 73 d2 fe ff       	call   c0005125 <f_expand>
c0017eb2:	83 c4 10             	add    esp,0x10
c0017eb5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017ebc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ebe:	83 c0 10             	add    eax,0x10
c0017ec1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017eca:	52                   	push   edx
c0017ecb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017ecf:	52                   	push   edx
c0017ed0:	6a 00                	push   0x0
c0017ed2:	68 00 04 00 00       	push   0x400
c0017ed7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017ede:	ff d0                	call   eax
c0017ee0:	83 c4 20             	add    esp,0x20
c0017ee3:	83 ec 0c             	sub    esp,0xc
c0017ee6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017eed:	e8 b0 2d ff ff       	call   c000aca2 <File::close()>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ef8:	83 ec 08             	sub    esp,0x8
c0017efb:	6a 01                	push   0x1
c0017efd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f04:	e8 3b 2d ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0017f09:	83 c4 10             	add    esp,0x10
c0017f0c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f15:	83 c0 0c             	add    eax,0xc
c0017f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f1a:	83 ec 0c             	sub    esp,0xc
c0017f1d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f21:	52                   	push   edx
c0017f22:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017f26:	52                   	push   edx
c0017f27:	6a 00                	push   0x0
c0017f29:	6a 04                	push   0x4
c0017f2b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017f32:	ff d0                	call   eax
c0017f34:	83 c4 20             	add    esp,0x20
c0017f37:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017f3e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017f44:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017f4b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017f52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017f55:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017f5c:	83 ec 0c             	sub    esp,0xc
c0017f5f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f66:	e8 37 2d ff ff       	call   c000aca2 <File::close()>
c0017f6b:	83 c4 10             	add    esp,0x10
c0017f6e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017f75:	ba 00 00 00 00       	mov    edx,0x0
c0017f7a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017f80:	5b                   	pop    ebx
c0017f81:	5e                   	pop    esi
c0017f82:	5f                   	pop    edi
c0017f83:	5d                   	pop    ebp
c0017f84:	c3                   	ret    
c0017f85:	90                   	nop
c0017f86:	66 90                	xchg   ax,ax

c0017f88 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017f88:	57                   	push   edi
c0017f89:	56                   	push   esi
c0017f8a:	53                   	push   ebx
c0017f8b:	81 ec 50 02 00 00    	sub    esp,0x250
c0017f91:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017f99:	74 0d                	je     c0017fa8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017f9b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017fa3:	75 0f                	jne    c0017fb4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fa8:	b8 04 00 00 00       	mov    eax,0x4
c0017fad:	e9 36 01 00 00       	jmp    c00180e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017fb2:	66 90                	xchg   ax,ax
c0017fb4:	83 ec 08             	sub    esp,0x8
c0017fb7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017fbe:	50                   	push   eax
c0017fbf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017fc6:	e8 b8 c5 fe ff       	call   c0004583 <f_readdir>
c0017fcb:	83 c4 10             	add    esp,0x10
c0017fce:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017fd5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017fdc:	83 ec 0c             	sub    esp,0xc
c0017fdf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017fe6:	83 c0 16             	add    eax,0x16
c0017fe9:	50                   	push   eax
c0017fea:	e8 41 85 fe ff       	call   c0000530 <strlen>
c0017fef:	83 c4 10             	add    esp,0x10
c0017ff2:	ba 00 00 00 00       	mov    edx,0x0
c0017ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ffb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017fff:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018006:	25 ff 00 00 00       	and    eax,0xff
c001800b:	83 e0 10             	and    eax,0x10
c001800e:	74 08                	je     c0018018 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0018010:	b8 02 00 00 00       	mov    eax,0x2
c0018015:	eb 09                	jmp    c0018020 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018017:	90                   	nop
c0018018:	b8 01 00 00 00       	mov    eax,0x1
c001801d:	8d 76 00             	lea    esi,[esi+0x0]
c0018020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018024:	83 ec 08             	sub    esp,0x8
c0018027:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001802e:	83 c0 16             	add    eax,0x16
c0018031:	50                   	push   eax
c0018032:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018036:	83 c0 10             	add    eax,0x10
c0018039:	50                   	push   eax
c001803a:	e8 b1 85 fe ff       	call   c00005f0 <strcpy>
c001803f:	83 c4 10             	add    esp,0x10
c0018042:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018049:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0018050:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018054:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001805b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0018062:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018069:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018070:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0018077:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001807e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0018085:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001808c:	89 c6                	mov    esi,eax
c001808e:	89 d7                	mov    edi,edx
c0018090:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018092:	89 c8                	mov    eax,ecx
c0018094:	89 fa                	mov    edx,edi
c0018096:	89 f3                	mov    ebx,esi
c0018098:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001809f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00180a6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00180ad:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00180b4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00180ba:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00180c1:	84 c0                	test   al,al
c00180c3:	75 07                	jne    c00180cc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c00180c5:	b8 07 00 00 00       	mov    eax,0x7
c00180ca:	eb 1c                	jmp    c00180e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00180cc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00180d3:	85 c0                	test   eax,eax
c00180d5:	75 09                	jne    c00180e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c00180d7:	b8 00 00 00 00       	mov    eax,0x0
c00180dc:	eb 0a                	jmp    c00180e8 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00180de:	66 90                	xchg   ax,ax
c00180e0:	b8 01 00 00 00       	mov    eax,0x1
c00180e5:	8d 76 00             	lea    esi,[esi+0x0]
c00180e8:	81 c4 50 02 00 00    	add    esp,0x250
c00180ee:	5b                   	pop    ebx
c00180ef:	5e                   	pop    esi
c00180f0:	5f                   	pop    edi
c00180f1:	c3                   	ret    
c00180f2:	66 90                	xchg   ax,ax

c00180f4 <FAT::read(void*, unsigned long, void*, int*)>:
c00180f4:	83 ec 1c             	sub    esp,0x1c
c00180f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00180fc:	74 0a                	je     c0018108 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00180fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018103:	75 0b                	jne    c0018110 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018105:	8d 76 00             	lea    esi,[esi+0x0]
c0018108:	b8 04 00 00 00       	mov    eax,0x4
c001810d:	eb 41                	jmp    c0018150 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001810f:	90                   	nop
c0018110:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018114:	50                   	push   eax
c0018115:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018119:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001811d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018121:	e8 b2 bc fe ff       	call   c0003dd8 <f_read>
c0018126:	83 c4 10             	add    esp,0x10
c0018129:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001812d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018131:	89 c2                	mov    edx,eax
c0018133:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018137:	89 10                	mov    DWORD PTR [eax],edx
c0018139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001813d:	85 c0                	test   eax,eax
c001813f:	75 07                	jne    c0018148 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018141:	b8 00 00 00 00       	mov    eax,0x0
c0018146:	eb 08                	jmp    c0018150 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018148:	b8 01 00 00 00       	mov    eax,0x1
c001814d:	8d 76 00             	lea    esi,[esi+0x0]
c0018150:	83 c4 1c             	add    esp,0x1c
c0018153:	c3                   	ret    

c0018154 <FAT::write(void*, unsigned long, void*, int*)>:
c0018154:	83 ec 1c             	sub    esp,0x1c
c0018157:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001815c:	74 0a                	je     c0018168 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001815e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018163:	75 0b                	jne    c0018170 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0018165:	8d 76 00             	lea    esi,[esi+0x0]
c0018168:	b8 04 00 00 00       	mov    eax,0x4
c001816d:	eb 41                	jmp    c00181b0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001816f:	90                   	nop
c0018170:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018174:	50                   	push   eax
c0018175:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018179:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001817d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018181:	e8 51 be fe ff       	call   c0003fd7 <f_write>
c0018186:	83 c4 10             	add    esp,0x10
c0018189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001818d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018191:	89 c2                	mov    edx,eax
c0018193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018197:	89 10                	mov    DWORD PTR [eax],edx
c0018199:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001819d:	85 c0                	test   eax,eax
c001819f:	75 07                	jne    c00181a8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00181a1:	b8 00 00 00 00       	mov    eax,0x0
c00181a6:	eb 08                	jmp    c00181b0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00181a8:	b8 01 00 00 00       	mov    eax,0x1
c00181ad:	8d 76 00             	lea    esi,[esi+0x0]
c00181b0:	83 c4 1c             	add    esp,0x1c
c00181b3:	c3                   	ret    

c00181b4 <FAT::close(void*)>:
c00181b4:	83 ec 1c             	sub    esp,0x1c
c00181b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00181bc:	75 0a                	jne    c00181c8 <FAT::close(void*)+0x14>
c00181be:	b8 04 00 00 00       	mov    eax,0x4
c00181c3:	eb 3f                	jmp    c0018204 <FAT::close(void*)+0x50>
c00181c5:	8d 76 00             	lea    esi,[esi+0x0]
c00181c8:	83 ec 0c             	sub    esp,0xc
c00181cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00181cf:	e8 ec c0 fe ff       	call   c00042c0 <f_close>
c00181d4:	83 c4 10             	add    esp,0x10
c00181d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181db:	83 ec 0c             	sub    esp,0xc
c00181de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00181e2:	e8 96 f6 fe ff       	call   c000787d <free>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181ee:	85 c0                	test   eax,eax
c00181f0:	75 0a                	jne    c00181fc <FAT::close(void*)+0x48>
c00181f2:	b8 00 00 00 00       	mov    eax,0x0
c00181f7:	eb 0b                	jmp    c0018204 <FAT::close(void*)+0x50>
c00181f9:	8d 76 00             	lea    esi,[esi+0x0]
c00181fc:	b8 01 00 00 00       	mov    eax,0x1
c0018201:	8d 76 00             	lea    esi,[esi+0x0]
c0018204:	83 c4 1c             	add    esp,0x1c
c0018207:	c3                   	ret    

c0018208 <FAT::closeDir(void*)>:
c0018208:	83 ec 1c             	sub    esp,0x1c
c001820b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018210:	75 0a                	jne    c001821c <FAT::closeDir(void*)+0x14>
c0018212:	b8 04 00 00 00       	mov    eax,0x4
c0018217:	eb 3f                	jmp    c0018258 <FAT::closeDir(void*)+0x50>
c0018219:	8d 76 00             	lea    esi,[esi+0x0]
c001821c:	83 ec 0c             	sub    esp,0xc
c001821f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018223:	e8 39 c3 fe ff       	call   c0004561 <f_closedir>
c0018228:	83 c4 10             	add    esp,0x10
c001822b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001822f:	83 ec 0c             	sub    esp,0xc
c0018232:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018236:	e8 42 f6 fe ff       	call   c000787d <free>
c001823b:	83 c4 10             	add    esp,0x10
c001823e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018242:	85 c0                	test   eax,eax
c0018244:	75 0a                	jne    c0018250 <FAT::closeDir(void*)+0x48>
c0018246:	b8 00 00 00 00       	mov    eax,0x0
c001824b:	eb 0b                	jmp    c0018258 <FAT::closeDir(void*)+0x50>
c001824d:	8d 76 00             	lea    esi,[esi+0x0]
c0018250:	b8 01 00 00 00       	mov    eax,0x1
c0018255:	8d 76 00             	lea    esi,[esi+0x0]
c0018258:	83 c4 1c             	add    esp,0x1c
c001825b:	c3                   	ret    

c001825c <FAT::seek(void*, unsigned long long)>:
c001825c:	83 ec 2c             	sub    esp,0x2c
c001825f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018263:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018267:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001826b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001826f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0018274:	75 0a                	jne    c0018280 <FAT::seek(void*, unsigned long long)+0x24>
c0018276:	b8 04 00 00 00       	mov    eax,0x4
c001827b:	eb 33                	jmp    c00182b0 <FAT::seek(void*, unsigned long long)+0x54>
c001827d:	8d 76 00             	lea    esi,[esi+0x0]
c0018280:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018284:	83 ec 08             	sub    esp,0x8
c0018287:	50                   	push   eax
c0018288:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001828c:	e8 5e c0 fe ff       	call   c00042ef <f_lseek>
c0018291:	83 c4 10             	add    esp,0x10
c0018294:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001829c:	85 c0                	test   eax,eax
c001829e:	75 08                	jne    c00182a8 <FAT::seek(void*, unsigned long long)+0x4c>
c00182a0:	b8 00 00 00 00       	mov    eax,0x0
c00182a5:	eb 09                	jmp    c00182b0 <FAT::seek(void*, unsigned long long)+0x54>
c00182a7:	90                   	nop
c00182a8:	b8 01 00 00 00       	mov    eax,0x1
c00182ad:	8d 76 00             	lea    esi,[esi+0x0]
c00182b0:	83 c4 2c             	add    esp,0x2c
c00182b3:	c3                   	ret    

c00182b4 <fatWrapperReadDisk>:
c00182b4:	53                   	push   ebx
c00182b5:	83 ec 18             	sub    esp,0x18
c00182b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00182c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182c4:	25 ff 00 00 00       	and    eax,0xff
c00182c9:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00182d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00182d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00182d8:	ba 00 00 00 00       	mov    edx,0x0
c00182dd:	83 ec 0c             	sub    esp,0xc
c00182e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182e4:	53                   	push   ebx
c00182e5:	52                   	push   edx
c00182e6:	50                   	push   eax
c00182e7:	51                   	push   ecx
c00182e8:	e8 71 4a ff ff       	call   c000cd5e <LogicalDisk::read(unsigned long long, int, void*)>
c00182ed:	83 c4 20             	add    esp,0x20
c00182f0:	83 c4 18             	add    esp,0x18
c00182f3:	5b                   	pop    ebx
c00182f4:	c3                   	ret    
c00182f5:	8d 76 00             	lea    esi,[esi+0x0]

c00182f8 <fatWrapperWriteDisk>:
c00182f8:	53                   	push   ebx
c00182f9:	83 ec 18             	sub    esp,0x18
c00182fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018300:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018304:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018308:	25 ff 00 00 00       	and    eax,0xff
c001830d:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018314:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018318:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001831c:	ba 00 00 00 00       	mov    edx,0x0
c0018321:	83 ec 0c             	sub    esp,0xc
c0018324:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018328:	53                   	push   ebx
c0018329:	52                   	push   edx
c001832a:	50                   	push   eax
c001832b:	51                   	push   ecx
c001832c:	e8 99 4a ff ff       	call   c000cdca <LogicalDisk::write(unsigned long long, int, void*)>
c0018331:	83 c4 20             	add    esp,0x20
c0018334:	83 c4 18             	add    esp,0x18
c0018337:	5b                   	pop    ebx
c0018338:	c3                   	ret    
c0018339:	8d 76 00             	lea    esi,[esi+0x0]

c001833c <fatWrapperIoctl>:
c001833c:	53                   	push   ebx
c001833d:	83 ec 28             	sub    esp,0x28
c0018340:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018344:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018348:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001834c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018350:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0018355:	75 35                	jne    c001838c <fatWrapperIoctl+0x50>
c0018357:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001835b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001835f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018363:	25 ff 00 00 00       	and    eax,0xff
c0018368:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c001836f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018375:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001837b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001837f:	66 89 02             	mov    WORD PTR [edx],ax
c0018382:	b8 00 00 00 00       	mov    eax,0x0
c0018387:	e9 c4 00 00 00       	jmp    c0018450 <fatWrapperIoctl+0x114>
c001838c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0018391:	75 75                	jne    c0018408 <fatWrapperIoctl+0xcc>
c0018393:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018397:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001839b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001839f:	25 ff 00 00 00       	and    eax,0xff
c00183a4:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c00183ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00183b1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00183b7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00183bd:	89 c8                	mov    eax,ecx
c00183bf:	89 da                	mov    edx,ebx
c00183c1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00183c5:	c1 e0 0a             	shl    eax,0xa
c00183c8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00183cc:	81 e1 ff 00 00 00    	and    ecx,0xff
c00183d2:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c00183d9:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00183df:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00183e5:	89 cb                	mov    ebx,ecx
c00183e7:	c1 fb 1f             	sar    ebx,0x1f
c00183ea:	53                   	push   ebx
c00183eb:	51                   	push   ecx
c00183ec:	52                   	push   edx
c00183ed:	50                   	push   eax
c00183ee:	e8 0d 5a 00 00       	call   c001de00 <__udivdi3>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	89 c2                	mov    edx,eax
c00183f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183fc:	89 10                	mov    DWORD PTR [eax],edx
c00183fe:	b8 00 00 00 00       	mov    eax,0x0
c0018403:	eb 4b                	jmp    c0018450 <fatWrapperIoctl+0x114>
c0018405:	8d 76 00             	lea    esi,[esi+0x0]
c0018408:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001840d:	75 09                	jne    c0018418 <fatWrapperIoctl+0xdc>
c001840f:	b8 00 00 00 00       	mov    eax,0x0
c0018414:	eb 3a                	jmp    c0018450 <fatWrapperIoctl+0x114>
c0018416:	66 90                	xchg   ax,ax
c0018418:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001841d:	75 19                	jne    c0018438 <fatWrapperIoctl+0xfc>
c001841f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018423:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018427:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001842b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018431:	b8 00 00 00 00       	mov    eax,0x0
c0018436:	eb 18                	jmp    c0018450 <fatWrapperIoctl+0x114>
c0018438:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001843d:	75 09                	jne    c0018448 <fatWrapperIoctl+0x10c>
c001843f:	b8 00 00 00 00       	mov    eax,0x0
c0018444:	eb 0a                	jmp    c0018450 <fatWrapperIoctl+0x114>
c0018446:	66 90                	xchg   ax,ax
c0018448:	b8 04 00 00 00       	mov    eax,0x4
c001844d:	8d 76 00             	lea    esi,[esi+0x0]
c0018450:	83 c4 28             	add    esp,0x28
c0018453:	5b                   	pop    ebx
c0018454:	c3                   	ret    
c0018455:	90                   	nop
c0018456:	66 90                	xchg   ax,ax

c0018458 <FAT::FAT()>:
c0018458:	83 ec 1c             	sub    esp,0x1c
c001845b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845f:	83 ec 0c             	sub    esp,0xc
c0018462:	50                   	push   eax
c0018463:	e8 c8 24 ff ff       	call   c000a930 <Filesystem::Filesystem()>
c0018468:	83 c4 10             	add    esp,0x10
c001846b:	ba 6c 0e 02 c0       	mov    edx,0xc0020e6c
c0018470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018474:	89 10                	mov    DWORD PTR [eax],edx
c0018476:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c0018480:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018488:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001848d:	7f 15                	jg     c00184a4 <FAT::FAT()+0x4c>
c001848f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018493:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c001849e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00184a2:	eb e4                	jmp    c0018488 <FAT::FAT()+0x30>
c00184a4:	90                   	nop
c00184a5:	83 c4 1c             	add    esp,0x1c
c00184a8:	c3                   	ret    
c00184a9:	90                   	nop
c00184aa:	66 90                	xchg   ax,ax

c00184ac <FAT::fixFilepath(char*)>:
c00184ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184b0:	8a 00                	mov    al,BYTE PTR [eax]
c00184b2:	3c 40                	cmp    al,0x40
c00184b4:	7e 2e                	jle    c00184e4 <FAT::fixFilepath(char*)+0x38>
c00184b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184ba:	8a 00                	mov    al,BYTE PTR [eax]
c00184bc:	83 e8 41             	sub    eax,0x41
c00184bf:	88 c2                	mov    dl,al
c00184c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184c5:	88 10                	mov    BYTE PTR [eax],dl
c00184c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184cb:	8a 00                	mov    al,BYTE PTR [eax]
c00184cd:	0f be c0             	movsx  eax,al
c00184d0:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00184d7:	83 c0 30             	add    eax,0x30
c00184da:	88 c2                	mov    dl,al
c00184dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184e0:	88 10                	mov    BYTE PTR [eax],dl
c00184e2:	66 90                	xchg   ax,ax
c00184e4:	90                   	nop
c00184e5:	c3                   	ret    
c00184e6:	66 90                	xchg   ax,ax

c00184e8 <FAT::open(char const*, void**, FileOpenMode)>:
c00184e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00184ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00184f6:	74 0c                	je     c0018504 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00184f8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018500:	75 0e                	jne    c0018510 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018502:	66 90                	xchg   ax,ax
c0018504:	b8 04 00 00 00       	mov    eax,0x4
c0018509:	e9 0a 01 00 00       	jmp    c0018618 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001850e:	66 90                	xchg   ax,ax
c0018510:	83 ec 08             	sub    esp,0x8
c0018513:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001851a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001851e:	50                   	push   eax
c001851f:	e8 cc 80 fe ff       	call   c00005f0 <strcpy>
c0018524:	83 c4 10             	add    esp,0x10
c0018527:	83 ec 08             	sub    esp,0x8
c001852a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001852e:	50                   	push   eax
c001852f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018536:	e8 71 ff ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018546:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001854d:	83 e0 01             	and    eax,0x1
c0018550:	74 0a                	je     c001855c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0018552:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001855a:	66 90                	xchg   ax,ax
c001855c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018563:	83 e0 04             	and    eax,0x4
c0018566:	74 10                	je     c0018578 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018568:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018570:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018578:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001857f:	83 e0 02             	and    eax,0x2
c0018582:	74 08                	je     c001858c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018584:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001858c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018593:	83 e0 08             	and    eax,0x8
c0018596:	74 08                	je     c00185a0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018598:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00185a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00185a7:	83 e0 10             	and    eax,0x10
c00185aa:	74 08                	je     c00185b4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00185ac:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00185b4:	83 ec 0c             	sub    esp,0xc
c00185b7:	68 28 02 00 00       	push   0x228
c00185bc:	e8 ac f2 fe ff       	call   c000786d <malloc>
c00185c1:	83 c4 10             	add    esp,0x10
c00185c4:	89 c2                	mov    edx,eax
c00185c6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00185cd:	89 10                	mov    DWORD PTR [eax],edx
c00185cf:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00185d6:	31 d2                	xor    edx,edx
c00185d8:	88 c2                	mov    dl,al
c00185da:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00185e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00185e3:	83 ec 04             	sub    esp,0x4
c00185e6:	52                   	push   edx
c00185e7:	8d 54 24 10          	lea    edx,[esp+0x10]
c00185eb:	52                   	push   edx
c00185ec:	50                   	push   eax
c00185ed:	e8 1b b5 fe ff       	call   c0003b0d <f_open>
c00185f2:	83 c4 10             	add    esp,0x10
c00185f5:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00185fc:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018604:	74 0a                	je     c0018610 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0018606:	b8 01 00 00 00       	mov    eax,0x1
c001860b:	eb 0b                	jmp    c0018618 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001860d:	8d 76 00             	lea    esi,[esi+0x0]
c0018610:	b8 00 00 00 00       	mov    eax,0x0
c0018615:	8d 76 00             	lea    esi,[esi+0x0]
c0018618:	81 c4 1c 01 00 00    	add    esp,0x11c
c001861e:	c3                   	ret    
c001861f:	90                   	nop

c0018620 <FAT::openDir(char const*, void**)>:
c0018620:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018626:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001862e:	74 0c                	je     c001863c <FAT::openDir(char const*, void**)+0x1c>
c0018630:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018638:	75 0e                	jne    c0018648 <FAT::openDir(char const*, void**)+0x28>
c001863a:	66 90                	xchg   ax,ax
c001863c:	b8 04 00 00 00       	mov    eax,0x4
c0018641:	e9 82 00 00 00       	jmp    c00186c8 <FAT::openDir(char const*, void**)+0xa8>
c0018646:	66 90                	xchg   ax,ax
c0018648:	83 ec 08             	sub    esp,0x8
c001864b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018652:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018656:	50                   	push   eax
c0018657:	e8 94 7f fe ff       	call   c00005f0 <strcpy>
c001865c:	83 c4 10             	add    esp,0x10
c001865f:	83 ec 08             	sub    esp,0x8
c0018662:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018666:	50                   	push   eax
c0018667:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001866e:	e8 39 fe ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c0018673:	83 c4 10             	add    esp,0x10
c0018676:	83 ec 0c             	sub    esp,0xc
c0018679:	6a 30                	push   0x30
c001867b:	e8 ed f1 fe ff       	call   c000786d <malloc>
c0018680:	83 c4 10             	add    esp,0x10
c0018683:	89 c2                	mov    edx,eax
c0018685:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001868c:	89 10                	mov    DWORD PTR [eax],edx
c001868e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018695:	8b 00                	mov    eax,DWORD PTR [eax]
c0018697:	83 ec 08             	sub    esp,0x8
c001869a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001869e:	52                   	push   edx
c001869f:	50                   	push   eax
c00186a0:	e8 f1 bd fe ff       	call   c0004496 <f_opendir>
c00186a5:	83 c4 10             	add    esp,0x10
c00186a8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00186af:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00186b7:	74 07                	je     c00186c0 <FAT::openDir(char const*, void**)+0xa0>
c00186b9:	b8 01 00 00 00       	mov    eax,0x1
c00186be:	eb 08                	jmp    c00186c8 <FAT::openDir(char const*, void**)+0xa8>
c00186c0:	b8 00 00 00 00       	mov    eax,0x0
c00186c5:	8d 76 00             	lea    esi,[esi+0x0]
c00186c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00186ce:	c3                   	ret    
c00186cf:	90                   	nop

c00186d0 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00186d0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00186d6:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00186de:	75 0c                	jne    c00186ec <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00186e0:	b8 04 00 00 00       	mov    eax,0x4
c00186e5:	e9 d6 00 00 00       	jmp    c00187c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00186ea:	66 90                	xchg   ax,ax
c00186ec:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00186f4:	75 0a                	jne    c0018700 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00186f6:	b8 04 00 00 00       	mov    eax,0x4
c00186fb:	e9 c0 00 00 00       	jmp    c00187c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018700:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018708:	75 0a                	jne    c0018714 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001870a:	b8 04 00 00 00       	mov    eax,0x4
c001870f:	e9 ac 00 00 00       	jmp    c00187c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018714:	83 ec 08             	sub    esp,0x8
c0018717:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001871e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018725:	50                   	push   eax
c0018726:	e8 c5 7e fe ff       	call   c00005f0 <strcpy>
c001872b:	83 c4 10             	add    esp,0x10
c001872e:	83 ec 08             	sub    esp,0x8
c0018731:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018738:	50                   	push   eax
c0018739:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018740:	e8 67 fd ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	83 ec 08             	sub    esp,0x8
c001874b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001874f:	50                   	push   eax
c0018750:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018757:	50                   	push   eax
c0018758:	e8 b8 be fe ff       	call   c0004615 <f_stat>
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018767:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001876e:	85 c0                	test   eax,eax
c0018770:	74 0a                	je     c001877c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018772:	83 f8 04             	cmp    eax,0x4
c0018775:	74 39                	je     c00187b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018777:	eb 3f                	jmp    c00187b8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018779:	8d 76 00             	lea    esi,[esi+0x0]
c001877c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018780:	25 ff 00 00 00       	and    eax,0xff
c0018785:	83 e0 10             	and    eax,0x10
c0018788:	0f 95 c2             	setne  dl
c001878b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018792:	88 10                	mov    BYTE PTR [eax],dl
c0018794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018798:	ba 00 00 00 00       	mov    edx,0x0
c001879d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00187a4:	89 01                	mov    DWORD PTR [ecx],eax
c00187a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00187a9:	b8 00 00 00 00       	mov    eax,0x0
c00187ae:	eb 10                	jmp    c00187c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00187b0:	b8 02 00 00 00       	mov    eax,0x2
c00187b5:	eb 09                	jmp    c00187c0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00187b7:	90                   	nop
c00187b8:	b8 01 00 00 00       	mov    eax,0x1
c00187bd:	8d 76 00             	lea    esi,[esi+0x0]
c00187c0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00187c6:	c3                   	ret    
c00187c7:	90                   	nop

c00187c8 <FAT::unlink(char const*)>:
c00187c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00187ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00187d6:	75 08                	jne    c00187e0 <FAT::unlink(char const*)+0x18>
c00187d8:	b8 04 00 00 00       	mov    eax,0x4
c00187dd:	eb 61                	jmp    c0018840 <FAT::unlink(char const*)+0x78>
c00187df:	90                   	nop
c00187e0:	83 ec 08             	sub    esp,0x8
c00187e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00187ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00187ee:	50                   	push   eax
c00187ef:	e8 fc 7d fe ff       	call   c00005f0 <strcpy>
c00187f4:	83 c4 10             	add    esp,0x10
c00187f7:	83 ec 08             	sub    esp,0x8
c00187fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00187fe:	50                   	push   eax
c00187ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018806:	e8 a1 fc ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c001880b:	83 c4 10             	add    esp,0x10
c001880e:	83 ec 0c             	sub    esp,0xc
c0018811:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018815:	50                   	push   eax
c0018816:	e8 5f c0 fe ff       	call   c000487a <f_unlink>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018825:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001882c:	85 c0                	test   eax,eax
c001882e:	75 08                	jne    c0018838 <FAT::unlink(char const*)+0x70>
c0018830:	b8 00 00 00 00       	mov    eax,0x0
c0018835:	eb 09                	jmp    c0018840 <FAT::unlink(char const*)+0x78>
c0018837:	90                   	nop
c0018838:	b8 01 00 00 00       	mov    eax,0x1
c001883d:	8d 76 00             	lea    esi,[esi+0x0]
c0018840:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018846:	c3                   	ret    
c0018847:	90                   	nop

c0018848 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018848:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001884e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018855:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001885c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018860:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018864:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001886c:	75 0a                	jne    c0018878 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001886e:	b8 04 00 00 00       	mov    eax,0x4
c0018873:	e9 54 01 00 00       	jmp    c00189cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018878:	83 ec 08             	sub    esp,0x8
c001887b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018882:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018886:	50                   	push   eax
c0018887:	e8 64 7d fe ff       	call   c00005f0 <strcpy>
c001888c:	83 c4 10             	add    esp,0x10
c001888f:	83 ec 08             	sub    esp,0x8
c0018892:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018896:	50                   	push   eax
c0018897:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001889e:	e8 09 fc ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c00188a3:	83 c4 10             	add    esp,0x10
c00188a6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00188ae:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00188b6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00188ba:	25 ff 00 00 00       	and    eax,0xff
c00188bf:	83 e0 01             	and    eax,0x1
c00188c2:	74 08                	je     c00188cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00188c4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00188cc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00188d0:	25 ff 00 00 00       	and    eax,0xff
c00188d5:	83 e0 02             	and    eax,0x2
c00188d8:	74 0a                	je     c00188e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c00188da:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00188e2:	66 90                	xchg   ax,ax
c00188e4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00188e8:	25 ff 00 00 00       	and    eax,0xff
c00188ed:	83 e0 04             	and    eax,0x4
c00188f0:	74 0a                	je     c00188fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c00188f2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00188fa:	66 90                	xchg   ax,ax
c00188fc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018900:	25 ff 00 00 00       	and    eax,0xff
c0018905:	83 e0 08             	and    eax,0x8
c0018908:	74 0a                	je     c0018914 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001890a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0018912:	66 90                	xchg   ax,ax
c0018914:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018918:	25 ff 00 00 00       	and    eax,0xff
c001891d:	83 e0 01             	and    eax,0x1
c0018920:	74 0a                	je     c001892c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0018922:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001892a:	66 90                	xchg   ax,ax
c001892c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018930:	25 ff 00 00 00       	and    eax,0xff
c0018935:	83 e0 02             	and    eax,0x2
c0018938:	74 0a                	je     c0018944 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001893a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0018942:	66 90                	xchg   ax,ax
c0018944:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018948:	25 ff 00 00 00       	and    eax,0xff
c001894d:	83 e0 04             	and    eax,0x4
c0018950:	74 0a                	je     c001895c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0018952:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001895a:	66 90                	xchg   ax,ax
c001895c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018960:	25 ff 00 00 00       	and    eax,0xff
c0018965:	83 e0 08             	and    eax,0x8
c0018968:	74 0a                	je     c0018974 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001896a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0018972:	66 90                	xchg   ax,ax
c0018974:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001897b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0018982:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018989:	31 d2                	xor    edx,edx
c001898b:	88 c2                	mov    dl,al
c001898d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018994:	25 ff 00 00 00       	and    eax,0xff
c0018999:	83 ec 04             	sub    esp,0x4
c001899c:	52                   	push   edx
c001899d:	50                   	push   eax
c001899e:	8d 44 24 24          	lea    eax,[esp+0x24]
c00189a2:	50                   	push   eax
c00189a3:	e8 45 c3 fe ff       	call   c0004ced <f_chmod>
c00189a8:	83 c4 10             	add    esp,0x10
c00189ab:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00189b2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00189b9:	85 c0                	test   eax,eax
c00189bb:	75 07                	jne    c00189c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00189bd:	b8 00 00 00 00       	mov    eax,0x0
c00189c2:	eb 08                	jmp    c00189cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00189c4:	b8 01 00 00 00       	mov    eax,0x1
c00189c9:	8d 76 00             	lea    esi,[esi+0x0]
c00189cc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00189d2:	c3                   	ret    
c00189d3:	90                   	nop

c00189d4 <FAT::rename(char const*, char const*)>:
c00189d4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00189da:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00189e2:	74 0c                	je     c00189f0 <FAT::rename(char const*, char const*)+0x1c>
c00189e4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00189ec:	75 0e                	jne    c00189fc <FAT::rename(char const*, char const*)+0x28>
c00189ee:	66 90                	xchg   ax,ax
c00189f0:	b8 04 00 00 00       	mov    eax,0x4
c00189f5:	e9 9e 00 00 00       	jmp    c0018a98 <FAT::rename(char const*, char const*)+0xc4>
c00189fa:	66 90                	xchg   ax,ax
c00189fc:	83 ec 08             	sub    esp,0x8
c00189ff:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018a06:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018a0d:	50                   	push   eax
c0018a0e:	e8 dd 7b fe ff       	call   c00005f0 <strcpy>
c0018a13:	83 c4 10             	add    esp,0x10
c0018a16:	83 ec 08             	sub    esp,0x8
c0018a19:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018a20:	50                   	push   eax
c0018a21:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018a28:	e8 7f fa ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c0018a2d:	83 c4 10             	add    esp,0x10
c0018a30:	83 ec 08             	sub    esp,0x8
c0018a33:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018a3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018a3e:	50                   	push   eax
c0018a3f:	e8 ac 7b fe ff       	call   c00005f0 <strcpy>
c0018a44:	83 c4 10             	add    esp,0x10
c0018a47:	83 ec 08             	sub    esp,0x8
c0018a4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018a4e:	50                   	push   eax
c0018a4f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018a56:	e8 51 fa ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c0018a5b:	83 c4 10             	add    esp,0x10
c0018a5e:	83 ec 08             	sub    esp,0x8
c0018a61:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018a65:	50                   	push   eax
c0018a66:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018a6d:	50                   	push   eax
c0018a6e:	e8 c4 c0 fe ff       	call   c0004b37 <f_rename>
c0018a73:	83 c4 10             	add    esp,0x10
c0018a76:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018a7d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018a84:	85 c0                	test   eax,eax
c0018a86:	75 08                	jne    c0018a90 <FAT::rename(char const*, char const*)+0xbc>
c0018a88:	b8 00 00 00 00       	mov    eax,0x0
c0018a8d:	eb 09                	jmp    c0018a98 <FAT::rename(char const*, char const*)+0xc4>
c0018a8f:	90                   	nop
c0018a90:	b8 01 00 00 00       	mov    eax,0x1
c0018a95:	8d 76 00             	lea    esi,[esi+0x0]
c0018a98:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018a9e:	c3                   	ret    
c0018a9f:	90                   	nop

c0018aa0 <FAT::mkdir(char const*)>:
c0018aa0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018aa6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018aae:	75 08                	jne    c0018ab8 <FAT::mkdir(char const*)+0x18>
c0018ab0:	b8 04 00 00 00       	mov    eax,0x4
c0018ab5:	eb 61                	jmp    c0018b18 <FAT::mkdir(char const*)+0x78>
c0018ab7:	90                   	nop
c0018ab8:	83 ec 08             	sub    esp,0x8
c0018abb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ac2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ac6:	50                   	push   eax
c0018ac7:	e8 24 7b fe ff       	call   c00005f0 <strcpy>
c0018acc:	83 c4 10             	add    esp,0x10
c0018acf:	83 ec 08             	sub    esp,0x8
c0018ad2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ad6:	50                   	push   eax
c0018ad7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018ade:	e8 c9 f9 ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c0018ae3:	83 c4 10             	add    esp,0x10
c0018ae6:	83 ec 0c             	sub    esp,0xc
c0018ae9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018aed:	50                   	push   eax
c0018aee:	e8 a9 be fe ff       	call   c000499c <f_mkdir>
c0018af3:	83 c4 10             	add    esp,0x10
c0018af6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018afd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018b04:	85 c0                	test   eax,eax
c0018b06:	75 08                	jne    c0018b10 <FAT::mkdir(char const*)+0x70>
c0018b08:	b8 00 00 00 00       	mov    eax,0x0
c0018b0d:	eb 09                	jmp    c0018b18 <FAT::mkdir(char const*)+0x78>
c0018b0f:	90                   	nop
c0018b10:	b8 01 00 00 00       	mov    eax,0x1
c0018b15:	8d 76 00             	lea    esi,[esi+0x0]
c0018b18:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018b1e:	c3                   	ret    
c0018b1f:	90                   	nop

c0018b20 <FAT::exists(char const*)>:
c0018b20:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018b26:	83 ec 08             	sub    esp,0x8
c0018b29:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018b30:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b34:	50                   	push   eax
c0018b35:	e8 b6 7a fe ff       	call   c00005f0 <strcpy>
c0018b3a:	83 c4 10             	add    esp,0x10
c0018b3d:	83 ec 08             	sub    esp,0x8
c0018b40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b44:	50                   	push   eax
c0018b45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018b4c:	e8 5b f9 ff ff       	call   c00184ac <FAT::fixFilepath(char*)>
c0018b51:	83 c4 10             	add    esp,0x10
c0018b54:	83 ec 08             	sub    esp,0x8
c0018b57:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018b5e:	50                   	push   eax
c0018b5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b63:	50                   	push   eax
c0018b64:	e8 ac ba fe ff       	call   c0004615 <f_stat>
c0018b69:	83 c4 10             	add    esp,0x10
c0018b6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018b73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018b7a:	85 c0                	test   eax,eax
c0018b7c:	75 06                	jne    c0018b84 <FAT::exists(char const*)+0x64>
c0018b7e:	b0 01                	mov    al,0x1
c0018b80:	eb 06                	jmp    c0018b88 <FAT::exists(char const*)+0x68>
c0018b82:	66 90                	xchg   ax,ax
c0018b84:	b0 00                	mov    al,0x0
c0018b86:	66 90                	xchg   ax,ax
c0018b88:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018b8e:	c3                   	ret    
c0018b8f:	90                   	nop

c0018b90 <isoReadDiscSectorHelper>:
c0018b90:	83 ec 2c             	sub    esp,0x2c
c0018b93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018b97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b9b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018ba0:	83 e8 41             	sub    eax,0x41
c0018ba3:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018baa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018bae:	ba 00 00 00 00       	mov    edx,0x0
c0018bb3:	83 ec 0c             	sub    esp,0xc
c0018bb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018bba:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bbe:	52                   	push   edx
c0018bbf:	50                   	push   eax
c0018bc0:	51                   	push   ecx
c0018bc1:	e8 98 41 ff ff       	call   c000cd5e <LogicalDisk::read(unsigned long long, int, void*)>
c0018bc6:	83 c4 20             	add    esp,0x20
c0018bc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018bcd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018bd2:	74 0c                	je     c0018be0 <isoReadDiscSectorHelper+0x50>
c0018bd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018bd8:	c1 e0 0b             	shl    eax,0xb
c0018bdb:	eb 0b                	jmp    c0018be8 <isoReadDiscSectorHelper+0x58>
c0018bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0018be0:	b8 00 00 00 00       	mov    eax,0x0
c0018be5:	8d 76 00             	lea    esi,[esi+0x0]
c0018be8:	83 c4 2c             	add    esp,0x2c
c0018beb:	c3                   	ret    

c0018bec <iso_kprintf>:
c0018bec:	83 ec 0c             	sub    esp,0xc
c0018bef:	83 ec 08             	sub    esp,0x8
c0018bf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018bf6:	68 79 08 02 c0       	push   0xc0020879
c0018bfb:	e8 0e 1a ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018c00:	83 c4 10             	add    esp,0x10
c0018c03:	90                   	nop
c0018c04:	83 c4 0c             	add    esp,0xc
c0018c07:	c3                   	ret    

c0018c08 <iso_kprintfd>:
c0018c08:	83 ec 0c             	sub    esp,0xc
c0018c0b:	83 ec 08             	sub    esp,0x8
c0018c0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018c12:	68 9b f8 01 c0       	push   0xc001f89b
c0018c17:	e8 f2 19 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018c1c:	83 c4 10             	add    esp,0x10
c0018c1f:	90                   	nop
c0018c20:	83 c4 0c             	add    esp,0xc
c0018c23:	c3                   	ret    

c0018c24 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018c24:	b8 08 00 00 00       	mov    eax,0x8
c0018c29:	c3                   	ret    

c0018c2a <ISO9660::getName()>:
c0018c2a:	b8 cc 0e 02 c0       	mov    eax,0xc0020ecc
c0018c2f:	c3                   	ret    

c0018c30 <ISO9660::closeDir(void*)>:
c0018c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018c34:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c36:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018c39:	90                   	nop

c0018c3a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018c3a:	b8 01 00 00 00       	mov    eax,0x1
c0018c3f:	c3                   	ret    

c0018c40 <ISO9660::unlink(char const*)>:
c0018c40:	b8 01 00 00 00       	mov    eax,0x1
c0018c45:	c3                   	ret    

c0018c46 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0018c46:	b8 03 00 00 00       	mov    eax,0x3
c0018c4b:	c3                   	ret    

c0018c4c <ISO9660::rename(char const*, char const*)>:
c0018c4c:	b8 01 00 00 00       	mov    eax,0x1
c0018c51:	c3                   	ret    

c0018c52 <ISO9660::mkdir(char const*)>:
c0018c52:	b8 01 00 00 00       	mov    eax,0x1
c0018c57:	c3                   	ret    

c0018c58 <ISO9660::~ISO9660()>:
c0018c58:	83 ec 0c             	sub    esp,0xc
c0018c5b:	ba 0c 10 02 c0       	mov    edx,0xc002100c
c0018c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c64:	89 10                	mov    DWORD PTR [eax],edx
c0018c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c6a:	83 ec 0c             	sub    esp,0xc
c0018c6d:	50                   	push   eax
c0018c6e:	e8 e1 1c ff ff       	call   c000a954 <Filesystem::~Filesystem()>
c0018c73:	83 c4 10             	add    esp,0x10
c0018c76:	90                   	nop
c0018c77:	83 c4 0c             	add    esp,0xc
c0018c7a:	c3                   	ret    
c0018c7b:	90                   	nop

c0018c7c <ISO9660::~ISO9660()>:
c0018c7c:	83 ec 0c             	sub    esp,0xc
c0018c7f:	83 ec 0c             	sub    esp,0xc
c0018c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c86:	e8 cd ff ff ff       	call   c0018c58 <ISO9660::~ISO9660()>
c0018c8b:	83 c4 10             	add    esp,0x10
c0018c8e:	83 ec 08             	sub    esp,0x8
c0018c91:	6a 08                	push   0x8
c0018c93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c97:	e8 7c 18 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	83 c4 0c             	add    esp,0xc
c0018ca2:	c3                   	ret    
c0018ca3:	90                   	nop

c0018ca4 <ISO9660::exists(char const*)>:
c0018ca4:	83 ec 18             	sub    esp,0x18
c0018ca7:	68 e7 0e 02 c0       	push   0xc0020ee7
c0018cac:	e8 1e 77 ff ff       	call   c00103cf <KePanic(char const*)>
c0018cb1:	31 c0                	xor    eax,eax
c0018cb3:	83 c4 1c             	add    esp,0x1c
c0018cb6:	c3                   	ret    
c0018cb7:	90                   	nop

c0018cb8 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018cb8:	56                   	push   esi
c0018cb9:	53                   	push   ebx
c0018cba:	53                   	push   ebx
c0018cbb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018cbf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018cc3:	85 db                	test   ebx,ebx
c0018cc5:	0f 84 c2 00 00 00    	je     c0018d8d <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018ccb:	85 f6                	test   esi,esi
c0018ccd:	0f 84 ba 00 00 00    	je     c0018d8d <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018cd3:	b8 03 00 00 00       	mov    eax,0x3
c0018cd8:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018cdd:	0f 85 af 00 00 00    	jne    c0018d92 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018ce3:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018ce8:	38 03                	cmp    BYTE PTR [ebx],al
c0018cea:	74 1b                	je     c0018d07 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018cec:	84 c0                	test   al,al
c0018cee:	74 10                	je     c0018d00 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018cf0:	83 ec 0c             	sub    esp,0xc
c0018cf3:	68 05 0f 02 c0       	push   0xc0020f05
c0018cf8:	e8 d2 76 ff ff       	call   c00103cf <KePanic(char const*)>
c0018cfd:	83 c4 10             	add    esp,0x10
c0018d00:	8a 03                	mov    al,BYTE PTR [ebx]
c0018d02:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018d07:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018d0a:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018d11:	85 c0                	test   eax,eax
c0018d13:	74 09                	je     c0018d1e <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018d15:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018d1c:	74 48                	je     c0018d66 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018d1e:	83 ec 0c             	sub    esp,0xc
c0018d21:	68 15 0f 02 c0       	push   0xc0020f15
c0018d26:	e8 e3 18 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018d2b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018d2e:	83 c4 10             	add    esp,0x10
c0018d31:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018d38:	85 c0                	test   eax,eax
c0018d3a:	74 17                	je     c0018d53 <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018d3c:	83 ec 0c             	sub    esp,0xc
c0018d3f:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018d46:	68 35 0f 02 c0       	push   0xc0020f35
c0018d4b:	e8 be 18 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018d50:	83 c4 10             	add    esp,0x10
c0018d53:	83 ec 0c             	sub    esp,0xc
c0018d56:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018d5d:	50                   	push   eax
c0018d5e:	e8 e8 da fe ff       	call   c000684b <init_percd>
c0018d63:	83 c4 10             	add    esp,0x10
c0018d66:	83 c3 03             	add    ebx,0x3
c0018d69:	51                   	push   ecx
c0018d6a:	51                   	push   ecx
c0018d6b:	6a 00                	push   0x0
c0018d6d:	53                   	push   ebx
c0018d6e:	e8 a0 d5 fe ff       	call   c0006313 <iso_open>
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	89 c2                	mov    edx,eax
c0018d78:	b8 01 00 00 00       	mov    eax,0x1
c0018d7d:	83 fa ff             	cmp    edx,0xffffffff
c0018d80:	74 10                	je     c0018d92 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018d82:	83 c2 32             	add    edx,0x32
c0018d85:	31 c0                	xor    eax,eax
c0018d87:	01 d2                	add    edx,edx
c0018d89:	89 16                	mov    DWORD PTR [esi],edx
c0018d8b:	eb 05                	jmp    c0018d92 <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018d8d:	b8 04 00 00 00       	mov    eax,0x4
c0018d92:	5a                   	pop    edx
c0018d93:	5b                   	pop    ebx
c0018d94:	5e                   	pop    esi
c0018d95:	c3                   	ret    

c0018d96 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018d96:	53                   	push   ebx
c0018d97:	83 ec 08             	sub    esp,0x8
c0018d9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d9e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018da2:	85 c0                	test   eax,eax
c0018da4:	74 2d                	je     c0018dd3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018da6:	85 db                	test   ebx,ebx
c0018da8:	74 29                	je     c0018dd3 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018daa:	b9 02 00 00 00       	mov    ecx,0x2
c0018daf:	52                   	push   edx
c0018db0:	99                   	cdq    
c0018db1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018db5:	f7 f9                	idiv   ecx
c0018db7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018dbb:	83 e8 32             	sub    eax,0x32
c0018dbe:	50                   	push   eax
c0018dbf:	e8 f7 d5 fe ff       	call   c00063bb <iso_read>
c0018dc4:	83 c4 10             	add    esp,0x10
c0018dc7:	89 03                	mov    DWORD PTR [ebx],eax
c0018dc9:	09 d0                	or     eax,edx
c0018dcb:	0f 94 c0             	sete   al
c0018dce:	0f b6 c0             	movzx  eax,al
c0018dd1:	eb 05                	jmp    c0018dd8 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018dd3:	b8 04 00 00 00       	mov    eax,0x4
c0018dd8:	83 c4 08             	add    esp,0x8
c0018ddb:	5b                   	pop    ebx
c0018ddc:	c3                   	ret    
c0018ddd:	90                   	nop

c0018dde <ISO9660::seek(void*, unsigned long long)>:
c0018dde:	57                   	push   edi
c0018ddf:	56                   	push   esi
c0018de0:	b8 04 00 00 00       	mov    eax,0x4
c0018de5:	51                   	push   ecx
c0018de6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018dea:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018dee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018df2:	85 d2                	test   edx,edx
c0018df4:	74 26                	je     c0018e1c <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018df6:	6a 00                	push   0x0
c0018df8:	b9 02 00 00 00       	mov    ecx,0x2
c0018dfd:	57                   	push   edi
c0018dfe:	89 d0                	mov    eax,edx
c0018e00:	56                   	push   esi
c0018e01:	99                   	cdq    
c0018e02:	f7 f9                	idiv   ecx
c0018e04:	83 e8 32             	sub    eax,0x32
c0018e07:	50                   	push   eax
c0018e08:	e8 c4 d6 fe ff       	call   c00064d1 <iso_seek>
c0018e0d:	83 c4 10             	add    esp,0x10
c0018e10:	31 f0                	xor    eax,esi
c0018e12:	31 fa                	xor    edx,edi
c0018e14:	09 d0                	or     eax,edx
c0018e16:	0f 95 c0             	setne  al
c0018e19:	0f b6 c0             	movzx  eax,al
c0018e1c:	5a                   	pop    edx
c0018e1d:	5e                   	pop    esi
c0018e1e:	5f                   	pop    edi
c0018e1f:	c3                   	ret    

c0018e20 <ISO9660::tell(void*, unsigned long long*)>:
c0018e20:	53                   	push   ebx
c0018e21:	83 ec 08             	sub    esp,0x8
c0018e24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e28:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018e2c:	85 c0                	test   eax,eax
c0018e2e:	74 24                	je     c0018e54 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018e30:	85 db                	test   ebx,ebx
c0018e32:	74 20                	je     c0018e54 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018e34:	83 ec 0c             	sub    esp,0xc
c0018e37:	b9 02 00 00 00       	mov    ecx,0x2
c0018e3c:	99                   	cdq    
c0018e3d:	f7 f9                	idiv   ecx
c0018e3f:	83 e8 32             	sub    eax,0x32
c0018e42:	50                   	push   eax
c0018e43:	e8 0d d7 fe ff       	call   c0006555 <iso_tell>
c0018e48:	83 c4 10             	add    esp,0x10
c0018e4b:	89 03                	mov    DWORD PTR [ebx],eax
c0018e4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018e50:	31 c0                	xor    eax,eax
c0018e52:	eb 05                	jmp    c0018e59 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018e54:	b8 04 00 00 00       	mov    eax,0x4
c0018e59:	83 c4 08             	add    esp,0x8
c0018e5c:	5b                   	pop    ebx
c0018e5d:	c3                   	ret    

c0018e5e <ISO9660::stat(void*, unsigned long long*)>:
c0018e5e:	53                   	push   ebx
c0018e5f:	83 ec 14             	sub    esp,0x14
c0018e62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018e66:	68 59 0f 02 c0       	push   0xc0020f59
c0018e6b:	e8 9e 17 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018e78:	74 2c                	je     c0018ea6 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018e7a:	85 db                	test   ebx,ebx
c0018e7c:	74 28                	je     c0018ea6 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018e7e:	83 ec 0c             	sub    esp,0xc
c0018e81:	b9 02 00 00 00       	mov    ecx,0x2
c0018e86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e8a:	99                   	cdq    
c0018e8b:	f7 f9                	idiv   ecx
c0018e8d:	83 e8 32             	sub    eax,0x32
c0018e90:	50                   	push   eax
c0018e91:	e8 f0 d6 fe ff       	call   c0006586 <iso_total>
c0018e96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018e9d:	89 03                	mov    DWORD PTR [ebx],eax
c0018e9f:	83 c4 10             	add    esp,0x10
c0018ea2:	31 c0                	xor    eax,eax
c0018ea4:	eb 05                	jmp    c0018eab <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018ea6:	b8 04 00 00 00       	mov    eax,0x4
c0018eab:	83 c4 08             	add    esp,0x8
c0018eae:	5b                   	pop    ebx
c0018eaf:	c3                   	ret    

c0018eb0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018eb0:	55                   	push   ebp
c0018eb1:	57                   	push   edi
c0018eb2:	56                   	push   esi
c0018eb3:	53                   	push   ebx
c0018eb4:	83 ec 18             	sub    esp,0x18
c0018eb7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018ebb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018ebf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ec3:	68 61 0f 02 c0       	push   0xc0020f61
c0018ec8:	e8 41 17 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018ecd:	83 c4 10             	add    esp,0x10
c0018ed0:	85 ff                	test   edi,edi
c0018ed2:	0f 94 c2             	sete   dl
c0018ed5:	85 f6                	test   esi,esi
c0018ed7:	0f 94 c0             	sete   al
c0018eda:	08 c2                	or     dl,al
c0018edc:	0f 85 d5 00 00 00    	jne    c0018fb7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018ee2:	85 db                	test   ebx,ebx
c0018ee4:	0f 84 cd 00 00 00    	je     c0018fb7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018eea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018eed:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018ef3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018efa:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018eff:	38 03                	cmp    BYTE PTR [ebx],al
c0018f01:	74 1b                	je     c0018f1e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018f03:	84 c0                	test   al,al
c0018f05:	74 10                	je     c0018f17 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018f07:	83 ec 0c             	sub    esp,0xc
c0018f0a:	68 05 0f 02 c0       	push   0xc0020f05
c0018f0f:	e8 bb 74 ff ff       	call   c00103cf <KePanic(char const*)>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	8a 03                	mov    al,BYTE PTR [ebx]
c0018f19:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018f1e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018f21:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018f28:	85 c0                	test   eax,eax
c0018f2a:	74 09                	je     c0018f35 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018f2c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018f33:	74 51                	je     c0018f86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018f35:	83 ec 0c             	sub    esp,0xc
c0018f38:	68 69 0f 02 c0       	push   0xc0020f69
c0018f3d:	e8 cc 16 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018f42:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018f45:	83 c4 10             	add    esp,0x10
c0018f48:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018f50:	74 21                	je     c0018f73 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018f52:	83 ec 0c             	sub    esp,0xc
c0018f55:	68 89 0f 02 c0       	push   0xc0020f89
c0018f5a:	e8 af 16 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0018f5f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018f62:	83 c4 10             	add    esp,0x10
c0018f65:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018f6c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018f73:	83 ec 0c             	sub    esp,0xc
c0018f76:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018f7d:	50                   	push   eax
c0018f7e:	e8 c8 d8 fe ff       	call   c000684b <init_percd>
c0018f83:	83 c4 10             	add    esp,0x10
c0018f86:	83 c3 03             	add    ebx,0x3
c0018f89:	52                   	push   edx
c0018f8a:	52                   	push   edx
c0018f8b:	6a 00                	push   0x0
c0018f8d:	53                   	push   ebx
c0018f8e:	e8 80 d3 fe ff       	call   c0006313 <iso_open>
c0018f93:	83 c4 10             	add    esp,0x10
c0018f96:	89 c5                	mov    ebp,eax
c0018f98:	83 f8 ff             	cmp    eax,0xffffffff
c0018f9b:	75 21                	jne    c0018fbe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018f9d:	50                   	push   eax
c0018f9e:	50                   	push   eax
c0018f9f:	6a 01                	push   0x1
c0018fa1:	53                   	push   ebx
c0018fa2:	e8 6c d3 fe ff       	call   c0006313 <iso_open>
c0018fa7:	83 c4 10             	add    esp,0x10
c0018faa:	ba 02 00 00 00       	mov    edx,0x2
c0018faf:	40                   	inc    eax
c0018fb0:	74 2b                	je     c0018fdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018fb2:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018fb5:	eb 24                	jmp    c0018fdb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018fb7:	ba 04 00 00 00       	mov    edx,0x4
c0018fbc:	eb 1f                	jmp    c0018fdd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018fbe:	83 ec 0c             	sub    esp,0xc
c0018fc1:	50                   	push   eax
c0018fc2:	e8 bf d5 fe ff       	call   c0006586 <iso_total>
c0018fc7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018fce:	89 07                	mov    DWORD PTR [edi],eax
c0018fd0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018fd3:	e8 c5 d3 fe ff       	call   c000639d <iso_close>
c0018fd8:	83 c4 10             	add    esp,0x10
c0018fdb:	31 d2                	xor    edx,edx
c0018fdd:	83 c4 0c             	add    esp,0xc
c0018fe0:	89 d0                	mov    eax,edx
c0018fe2:	5b                   	pop    ebx
c0018fe3:	5e                   	pop    esi
c0018fe4:	5f                   	pop    edi
c0018fe5:	5d                   	pop    ebp
c0018fe6:	c3                   	ret    
c0018fe7:	90                   	nop

c0018fe8 <ISO9660::close(void*)>:
c0018fe8:	83 ec 0c             	sub    esp,0xc
c0018feb:	b8 04 00 00 00       	mov    eax,0x4
c0018ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ff4:	85 d2                	test   edx,edx
c0018ff6:	74 1b                	je     c0019013 <ISO9660::close(void*)+0x2b>
c0018ff8:	83 ec 0c             	sub    esp,0xc
c0018ffb:	b9 02 00 00 00       	mov    ecx,0x2
c0019000:	89 d0                	mov    eax,edx
c0019002:	99                   	cdq    
c0019003:	f7 f9                	idiv   ecx
c0019005:	83 e8 32             	sub    eax,0x32
c0019008:	50                   	push   eax
c0019009:	e8 8f d3 fe ff       	call   c000639d <iso_close>
c001900e:	83 c4 10             	add    esp,0x10
c0019011:	31 c0                	xor    eax,eax
c0019013:	83 c4 0c             	add    esp,0xc
c0019016:	c3                   	ret    
c0019017:	90                   	nop

c0019018 <ISO9660::openDir(char const*, void**)>:
c0019018:	56                   	push   esi
c0019019:	53                   	push   ebx
c001901a:	50                   	push   eax
c001901b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001901f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019023:	85 db                	test   ebx,ebx
c0019025:	0f 84 b5 00 00 00    	je     c00190e0 <ISO9660::openDir(char const*, void**)+0xc8>
c001902b:	85 f6                	test   esi,esi
c001902d:	0f 84 ad 00 00 00    	je     c00190e0 <ISO9660::openDir(char const*, void**)+0xc8>
c0019033:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0019038:	38 03                	cmp    BYTE PTR [ebx],al
c001903a:	74 1b                	je     c0019057 <ISO9660::openDir(char const*, void**)+0x3f>
c001903c:	84 c0                	test   al,al
c001903e:	74 10                	je     c0019050 <ISO9660::openDir(char const*, void**)+0x38>
c0019040:	83 ec 0c             	sub    esp,0xc
c0019043:	68 05 0f 02 c0       	push   0xc0020f05
c0019048:	e8 82 73 ff ff       	call   c00103cf <KePanic(char const*)>
c001904d:	83 c4 10             	add    esp,0x10
c0019050:	8a 03                	mov    al,BYTE PTR [ebx]
c0019052:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0019057:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001905a:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0019061:	85 c0                	test   eax,eax
c0019063:	74 10                	je     c0019075 <ISO9660::openDir(char const*, void**)+0x5d>
c0019065:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001906c:	74 1a                	je     c0019088 <ISO9660::openDir(char const*, void**)+0x70>
c001906e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019075:	83 ec 0c             	sub    esp,0xc
c0019078:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c001907f:	50                   	push   eax
c0019080:	e8 c6 d7 fe ff       	call   c000684b <init_percd>
c0019085:	83 c4 10             	add    esp,0x10
c0019088:	83 c3 03             	add    ebx,0x3
c001908b:	50                   	push   eax
c001908c:	50                   	push   eax
c001908d:	6a 01                	push   0x1
c001908f:	53                   	push   ebx
c0019090:	e8 7e d2 fe ff       	call   c0006313 <iso_open>
c0019095:	83 c4 10             	add    esp,0x10
c0019098:	89 c3                	mov    ebx,eax
c001909a:	83 f8 ff             	cmp    eax,0xffffffff
c001909d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00190a2:	75 1c                	jne    c00190c0 <ISO9660::openDir(char const*, void**)+0xa8>
c00190a4:	53                   	push   ebx
c00190a5:	53                   	push   ebx
c00190a6:	68 ad 0f 02 c0       	push   0xc0020fad
c00190ab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00190b1:	e8 2e f7 fe ff       	call   c00087e4 <VgaText::puts(char const*)>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	b8 01 00 00 00       	mov    eax,0x1
c00190be:	eb 25                	jmp    c00190e5 <ISO9660::openDir(char const*, void**)+0xcd>
c00190c0:	01 db                	add    ebx,ebx
c00190c2:	51                   	push   ecx
c00190c3:	83 c3 65             	add    ebx,0x65
c00190c6:	51                   	push   ecx
c00190c7:	68 c0 0f 02 c0       	push   0xc0020fc0
c00190cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00190d2:	e8 0d f7 fe ff       	call   c00087e4 <VgaText::puts(char const*)>
c00190d7:	89 1e                	mov    DWORD PTR [esi],ebx
c00190d9:	83 c4 10             	add    esp,0x10
c00190dc:	31 c0                	xor    eax,eax
c00190de:	eb 05                	jmp    c00190e5 <ISO9660::openDir(char const*, void**)+0xcd>
c00190e0:	b8 04 00 00 00       	mov    eax,0x4
c00190e5:	5a                   	pop    edx
c00190e6:	5b                   	pop    ebx
c00190e7:	5e                   	pop    esi
c00190e8:	c3                   	ret    
c00190e9:	90                   	nop

c00190ea <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00190ea:	55                   	push   ebp
c00190eb:	57                   	push   edi
c00190ec:	56                   	push   esi
c00190ed:	53                   	push   ebx
c00190ee:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00190f4:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00190fb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0019102:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001910a:	0f 84 e7 00 00 00    	je     c00191f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019110:	85 db                	test   ebx,ebx
c0019112:	0f 84 df 00 00 00    	je     c00191f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0019118:	83 ec 0c             	sub    esp,0xc
c001911b:	68 d3 0f 02 c0       	push   0xc0020fd3
c0019120:	e8 e9 14 ff ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c0019125:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001912c:	b9 02 00 00 00       	mov    ecx,0x2
c0019131:	99                   	cdq    
c0019132:	f7 f9                	idiv   ecx
c0019134:	83 e8 32             	sub    eax,0x32
c0019137:	89 04 24             	mov    DWORD PTR [esp],eax
c001913a:	e8 98 d4 fe ff       	call   c00065d7 <iso_readdir>
c001913f:	83 c4 10             	add    esp,0x10
c0019142:	89 c6                	mov    esi,eax
c0019144:	85 c0                	test   eax,eax
c0019146:	75 37                	jne    c001917f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019148:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001914d:	56                   	push   esi
c001914e:	56                   	push   esi
c001914f:	68 de 0f 02 c0       	push   0xc0020fde
c0019154:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001915a:	e8 85 f6 fe ff       	call   c00087e4 <VgaText::puts(char const*)>
c001915f:	83 c4 0c             	add    esp,0xc
c0019162:	68 10 01 00 00       	push   0x110
c0019167:	6a 00                	push   0x0
c0019169:	57                   	push   edi
c001916a:	e8 51 73 fe ff       	call   c00004c0 <memset>
c001916f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019175:	83 c4 10             	add    esp,0x10
c0019178:	b8 01 00 00 00       	mov    eax,0x1
c001917d:	eb 7d                	jmp    c00191fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001917f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019185:	8d 68 08             	lea    ebp,[eax+0x8]
c0019188:	83 ec 0c             	sub    esp,0xc
c001918b:	55                   	push   ebp
c001918c:	e8 9f 73 fe ff       	call   c0000530 <strlen>
c0019191:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019199:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001919d:	83 c4 10             	add    esp,0x10
c00191a0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00191a4:	75 0a                	jne    c00191b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c00191a6:	b8 02 00 00 00       	mov    eax,0x2
c00191ab:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00191ae:	74 05                	je     c00191b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c00191b0:	b8 01 00 00 00       	mov    eax,0x1
c00191b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191b9:	50                   	push   eax
c00191ba:	50                   	push   eax
c00191bb:	55                   	push   ebp
c00191bc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00191c0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00191c4:	50                   	push   eax
c00191c5:	e8 26 74 fe ff       	call   c00005f0 <strcpy>
c00191ca:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00191d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191d3:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00191d9:	5a                   	pop    edx
c00191da:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00191df:	59                   	pop    ecx
c00191e0:	68 f1 0f 02 c0       	push   0xc0020ff1
c00191e5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00191eb:	e8 f4 f5 fe ff       	call   c00087e4 <VgaText::puts(char const*)>
c00191f0:	83 c4 10             	add    esp,0x10
c00191f3:	31 c0                	xor    eax,eax
c00191f5:	eb 05                	jmp    c00191fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00191f7:	b8 04 00 00 00       	mov    eax,0x4
c00191fc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019202:	5b                   	pop    ebx
c0019203:	5e                   	pop    esi
c0019204:	5f                   	pop    edi
c0019205:	5d                   	pop    ebp
c0019206:	c3                   	ret    

c0019207 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019207:	57                   	push   edi
c0019208:	56                   	push   esi
c0019209:	53                   	push   ebx
c001920a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001920e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019212:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019216:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c001921c:	75 08                	jne    c0019226 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001921e:	38 1d 44 1b 02 c0    	cmp    BYTE PTR ds:0xc0021b44,bl
c0019224:	74 4a                	je     c0019270 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019226:	83 ec 0c             	sub    esp,0xc
c0019229:	31 d2                	xor    edx,edx
c001922b:	68 40 73 02 c0       	push   0xc0027340
c0019230:	0f be c3             	movsx  eax,bl
c0019233:	6a 01                	push   0x1
c0019235:	52                   	push   edx
c0019236:	56                   	push   esi
c0019237:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c001923e:	e8 1b 3b ff ff       	call   c000cd5e <LogicalDisk::read(unsigned long long, int, void*)>
c0019243:	83 c4 20             	add    esp,0x20
c0019246:	85 c0                	test   eax,eax
c0019248:	75 0e                	jne    c0019258 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001924a:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c0019250:	88 1d 44 1b 02 c0    	mov    BYTE PTR ds:0xc0021b44,bl
c0019256:	eb 18                	jmp    c0019270 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0019258:	50                   	push   eax
c0019259:	68 00 08 00 00       	push   0x800
c001925e:	6a 00                	push   0x0
c0019260:	57                   	push   edi
c0019261:	e8 5a 72 fe ff       	call   c00004c0 <memset>
c0019266:	83 c4 10             	add    esp,0x10
c0019269:	b8 01 00 00 00       	mov    eax,0x1
c001926e:	eb 0e                	jmp    c001927e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019270:	be 40 73 02 c0       	mov    esi,0xc0027340
c0019275:	b9 00 08 00 00       	mov    ecx,0x800
c001927a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001927c:	31 c0                	xor    eax,eax
c001927e:	5b                   	pop    ebx
c001927f:	5e                   	pop    esi
c0019280:	5f                   	pop    edi
c0019281:	c3                   	ret    

c0019282 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019282:	53                   	push   ebx
c0019283:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019289:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c0019293:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001929a:	8d 58 41             	lea    ebx,[eax+0x41]
c001929d:	0f be db             	movsx  ebx,bl
c00192a0:	53                   	push   ebx
c00192a1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192a5:	50                   	push   eax
c00192a6:	6a 10                	push   0x10
c00192a8:	e8 5a ff ff ff       	call   c0019207 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	31 d2                	xor    edx,edx
c00192b2:	85 c0                	test   eax,eax
c00192b4:	75 33                	jne    c00192e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00192b6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00192bb:	75 2c                	jne    c00192e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00192bd:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00192c2:	75 25                	jne    c00192e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00192c4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00192c9:	75 1e                	jne    c00192e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00192cb:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00192d0:	75 17                	jne    c00192e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00192d2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00192d7:	75 10                	jne    c00192e9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00192d9:	83 ec 0c             	sub    esp,0xc
c00192dc:	53                   	push   ebx
c00192dd:	e8 69 d5 fe ff       	call   c000684b <init_percd>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	40                   	inc    eax
c00192e6:	0f 95 c2             	setne  dl
c00192e9:	88 d0                	mov    al,dl
c00192eb:	81 c4 08 08 00 00    	add    esp,0x808
c00192f1:	5b                   	pop    ebx
c00192f2:	c3                   	ret    
c00192f3:	90                   	nop

c00192f4 <ISO9660::ISO9660()>:
c00192f4:	83 ec 0c             	sub    esp,0xc
c00192f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192fb:	83 ec 0c             	sub    esp,0xc
c00192fe:	50                   	push   eax
c00192ff:	e8 2c 16 ff ff       	call   c000a930 <Filesystem::Filesystem()>
c0019304:	83 c4 10             	add    esp,0x10
c0019307:	ba 0c 10 02 c0       	mov    edx,0xc002100c
c001930c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019310:	89 10                	mov    DWORD PTR [eax],edx
c0019312:	e8 46 d6 fe ff       	call   c000695d <fs_iso9660_init>
c0019317:	90                   	nop
c0019318:	83 c4 0c             	add    esp,0xc
c001931b:	c3                   	ret    

c001931c <SoundCard::beginPlayback()>:
c001931c:	c7 44 24 04 6c 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002106c
c0019324:	e9 a6 70 ff ff       	jmp    c00103cf <KePanic(char const*)>
c0019329:	90                   	nop

c001932a <SoundCard::stopPlayback()>:
c001932a:	c7 44 24 04 6c 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc002106c
c0019332:	e9 98 70 ff ff       	jmp    c00103cf <KePanic(char const*)>
c0019337:	90                   	nop

c0019338 <SoundCard::SoundCard(char const*)>:
c0019338:	83 ec 1c             	sub    esp,0x1c
c001933b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001933f:	83 ec 08             	sub    esp,0x8
c0019342:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019346:	50                   	push   eax
c0019347:	e8 98 28 ff ff       	call   c000bbe4 <Device::Device(char const*)>
c001934c:	83 c4 10             	add    esp,0x10
c001934f:	ba b8 10 02 c0       	mov    edx,0xc00210b8
c0019354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019358:	89 10                	mov    DWORD PTR [eax],edx
c001935a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001935e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019369:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019377:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019385:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001938f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019393:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001939d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193a5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00193aa:	7f 19                	jg     c00193c5 <SoundCard::SoundCard(char const*)+0x8d>
c00193ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00193b4:	83 c2 54             	add    edx,0x54
c00193b7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00193bf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00193c3:	eb e0                	jmp    c00193a5 <SoundCard::SoundCard(char const*)+0x6d>
c00193c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193c9:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00193d0:	90                   	nop
c00193d1:	83 c4 1c             	add    esp,0x1c
c00193d4:	c3                   	ret    
c00193d5:	90                   	nop

c00193d6 <SoundCard::~SoundCard()>:
c00193d6:	83 ec 0c             	sub    esp,0xc
c00193d9:	ba b8 10 02 c0       	mov    edx,0xc00210b8
c00193de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e2:	89 10                	mov    DWORD PTR [eax],edx
c00193e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	50                   	push   eax
c00193ec:	e8 5d 25 ff ff       	call   c000b94e <Device::~Device()>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	90                   	nop
c00193f5:	83 c4 0c             	add    esp,0xc
c00193f8:	c3                   	ret    
c00193f9:	90                   	nop

c00193fa <SoundCard::~SoundCard()>:
c00193fa:	83 ec 0c             	sub    esp,0xc
c00193fd:	83 ec 0c             	sub    esp,0xc
c0019400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019404:	e8 cd ff ff ff       	call   c00193d6 <SoundCard::~SoundCard()>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	83 ec 08             	sub    esp,0x8
c001940f:	68 e8 01 00 00       	push   0x1e8
c0019414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019418:	e8 fb 10 ff ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001941d:	83 c4 10             	add    esp,0x10
c0019420:	83 c4 0c             	add    esp,0xc
c0019423:	c3                   	ret    

c0019424 <SoundCard::configureRates(int, int, int)>:
c0019424:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019428:	31 c0                	xor    eax,eax
c001942a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019431:	75 20                	jne    c0019453 <SoundCard::configureRates(int, int, int)+0x2f>
c0019433:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019437:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001943d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019441:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001944b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019451:	b0 01                	mov    al,0x1
c0019453:	c3                   	ret    

c0019454 <SoundCard::getSamples16(int, short*)>:
c0019454:	55                   	push   ebp
c0019455:	57                   	push   edi
c0019456:	31 ff                	xor    edi,edi
c0019458:	56                   	push   esi
c0019459:	53                   	push   ebx
c001945a:	31 db                	xor    ebx,ebx
c001945c:	83 ec 10             	sub    esp,0x10
c001945f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019463:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019467:	8d 04 36             	lea    eax,[esi+esi*1]
c001946a:	50                   	push   eax
c001946b:	6a 00                	push   0x0
c001946d:	55                   	push   ebp
c001946e:	e8 4d 70 fe ff       	call   c00004c0 <memset>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001947a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019481:	85 c0                	test   eax,eax
c0019483:	74 1b                	je     c00194a0 <SoundCard::getSamples16(int, short*)+0x4c>
c0019485:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019489:	75 15                	jne    c00194a0 <SoundCard::getSamples16(int, short*)+0x4c>
c001948b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001948f:	55                   	push   ebp
c0019490:	56                   	push   esi
c0019491:	50                   	push   eax
c0019492:	e8 ed 02 00 00       	call   c0019784 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019497:	83 c4 10             	add    esp,0x10
c001949a:	39 c7                	cmp    edi,eax
c001949c:	7d 02                	jge    c00194a0 <SoundCard::getSamples16(int, short*)+0x4c>
c001949e:	89 c7                	mov    edi,eax
c00194a0:	43                   	inc    ebx
c00194a1:	83 fb 20             	cmp    ebx,0x20
c00194a4:	75 d0                	jne    c0019476 <SoundCard::getSamples16(int, short*)+0x22>
c00194a6:	83 c4 0c             	add    esp,0xc
c00194a9:	89 f8                	mov    eax,edi
c00194ab:	5b                   	pop    ebx
c00194ac:	5e                   	pop    esi
c00194ad:	5f                   	pop    edi
c00194ae:	5d                   	pop    ebp
c00194af:	c3                   	ret    

c00194b0 <SoundCard::getSamples32(int, int*)>:
c00194b0:	55                   	push   ebp
c00194b1:	57                   	push   edi
c00194b2:	31 ff                	xor    edi,edi
c00194b4:	56                   	push   esi
c00194b5:	31 f6                	xor    esi,esi
c00194b7:	53                   	push   ebx
c00194b8:	83 ec 10             	sub    esp,0x10
c00194bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194bf:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00194c3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00194c7:	c1 e0 02             	shl    eax,0x2
c00194ca:	50                   	push   eax
c00194cb:	6a 00                	push   0x0
c00194cd:	55                   	push   ebp
c00194ce:	e8 ed 6f fe ff       	call   c00004c0 <memset>
c00194d3:	83 c4 10             	add    esp,0x10
c00194d6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00194dd:	85 c0                	test   eax,eax
c00194df:	74 1b                	je     c00194fc <SoundCard::getSamples32(int, int*)+0x4c>
c00194e1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00194e5:	75 15                	jne    c00194fc <SoundCard::getSamples32(int, int*)+0x4c>
c00194e7:	53                   	push   ebx
c00194e8:	55                   	push   ebp
c00194e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00194ed:	50                   	push   eax
c00194ee:	e8 55 03 00 00       	call   c0019848 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00194f3:	83 c4 10             	add    esp,0x10
c00194f6:	39 c6                	cmp    esi,eax
c00194f8:	7d 02                	jge    c00194fc <SoundCard::getSamples32(int, int*)+0x4c>
c00194fa:	89 c6                	mov    esi,eax
c00194fc:	47                   	inc    edi
c00194fd:	83 ff 20             	cmp    edi,0x20
c0019500:	75 d4                	jne    c00194d6 <SoundCard::getSamples32(int, int*)+0x26>
c0019502:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0019508:	85 f6                	test   esi,esi
c001950a:	75 0f                	jne    c001951b <SoundCard::getSamples32(int, int*)+0x6b>
c001950c:	84 c0                	test   al,al
c001950e:	74 1b                	je     c001952b <SoundCard::getSamples32(int, int*)+0x7b>
c0019510:	83 ec 0c             	sub    esp,0xc
c0019513:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019515:	53                   	push   ebx
c0019516:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019519:	eb 0d                	jmp    c0019528 <SoundCard::getSamples32(int, int*)+0x78>
c001951b:	84 c0                	test   al,al
c001951d:	75 0c                	jne    c001952b <SoundCard::getSamples32(int, int*)+0x7b>
c001951f:	83 ec 0c             	sub    esp,0xc
c0019522:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019524:	53                   	push   ebx
c0019525:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	83 c4 0c             	add    esp,0xc
c001952e:	89 f0                	mov    eax,esi
c0019530:	5b                   	pop    ebx
c0019531:	5e                   	pop    esi
c0019532:	5f                   	pop    edi
c0019533:	5d                   	pop    ebp
c0019534:	c3                   	ret    
c0019535:	90                   	nop

c0019536 <SoundCard::addChannel(SoundPort*)>:
c0019536:	83 ec 0c             	sub    esp,0xc
c0019539:	31 c0                	xor    eax,eax
c001953b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001953f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019547:	74 1b                	je     c0019564 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019549:	40                   	inc    eax
c001954a:	83 f8 20             	cmp    eax,0x20
c001954d:	75 f0                	jne    c001953f <SoundCard::addChannel(SoundPort*)+0x9>
c001954f:	83 ec 0c             	sub    esp,0xc
c0019552:	68 91 10 02 c0       	push   0xc0021091
c0019557:	e8 73 6e ff ff       	call   c00103cf <KePanic(char const*)>
c001955c:	83 c4 10             	add    esp,0x10
c001955f:	83 c8 ff             	or     eax,0xffffffff
c0019562:	eb 0b                	jmp    c001956f <SoundCard::addChannel(SoundPort*)+0x39>
c0019564:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019568:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001956f:	83 c4 0c             	add    esp,0xc
c0019572:	c3                   	ret    
c0019573:	90                   	nop

c0019574 <SoundCard::removeChannel(int)>:
c0019574:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019578:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001957c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019587:	c3                   	ret    

c0019588 <SoundPort::SoundPort(int, int, int, int)>:
c0019588:	83 ec 0c             	sub    esp,0xc
c001958b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001958f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001959a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001959e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00195a6:	89 10                	mov    DWORD PTR [eax],edx
c00195a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00195b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00195b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00195be:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00195c3:	75 13                	jne    c00195d8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00195c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00195cb:	05 a0 0f 00 00       	add    eax,0xfa0
c00195d0:	01 c0                	add    eax,eax
c00195d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00195d6:	66 90                	xchg   ax,ax
c00195d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00195e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195e7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00195ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00195f5:	c1 e0 02             	shl    eax,0x2
c00195f8:	83 ec 0c             	sub    esp,0xc
c00195fb:	50                   	push   eax
c00195fc:	e8 6c e2 fe ff       	call   c000786d <malloc>
c0019601:	83 c4 10             	add    esp,0x10
c0019604:	89 c2                	mov    edx,eax
c0019606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001960a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001960d:	90                   	nop
c001960e:	83 c4 0c             	add    esp,0xc
c0019611:	c3                   	ret    
c0019612:	66 90                	xchg   ax,ax

c0019614 <SoundPort::~SoundPort()>:
c0019614:	83 ec 0c             	sub    esp,0xc
c0019617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001961e:	85 c0                	test   eax,eax
c0019620:	74 1e                	je     c0019640 <SoundPort::~SoundPort()+0x2c>
c0019622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019626:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019629:	83 ec 0c             	sub    esp,0xc
c001962c:	50                   	push   eax
c001962d:	e8 4b e2 fe ff       	call   c000787d <free>
c0019632:	83 c4 10             	add    esp,0x10
c0019635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019639:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019640:	90                   	nop
c0019641:	83 c4 0c             	add    esp,0xc
c0019644:	c3                   	ret    
c0019645:	90                   	nop
c0019646:	66 90                	xchg   ax,ax

c0019648 <SoundPort::unpause()>:
c0019648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001964c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019650:	c3                   	ret    
c0019651:	90                   	nop
c0019652:	66 90                	xchg   ax,ax

c0019654 <SoundPort::pause()>:
c0019654:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019658:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001965c:	c3                   	ret    
c001965d:	90                   	nop
c001965e:	66 90                	xchg   ax,ax

c0019660 <SoundPort::getBufferUsed()>:
c0019660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019664:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019667:	c3                   	ret    

c0019668 <SoundPort::getBufferSize()>:
c0019668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001966c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001966f:	c3                   	ret    

c0019670 <SoundPort::buffer16(short*, int)>:
c0019670:	55                   	push   ebp
c0019671:	57                   	push   edi
c0019672:	56                   	push   esi
c0019673:	53                   	push   ebx
c0019674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019678:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001967c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001967f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019682:	74 68                	je     c00196ec <SoundPort::buffer16(short*, int)+0x7c>
c0019684:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019688:	85 c9                	test   ecx,ecx
c001968a:	7e 60                	jle    c00196ec <SoundPort::buffer16(short*, int)+0x7c>
c001968c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019690:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019693:	c1 e1 0f             	shl    ecx,0xf
c0019696:	8d 70 01             	lea    esi,[eax+0x1]
c0019699:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001969c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001969f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00196a2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00196a5:	74 4d                	je     c00196f4 <SoundPort::buffer16(short*, int)+0x84>
c00196a7:	31 f6                	xor    esi,esi
c00196a9:	eb 21                	jmp    c00196cc <SoundPort::buffer16(short*, int)+0x5c>
c00196ab:	90                   	nop
c00196ac:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00196b1:	8d 79 01             	lea    edi,[ecx+0x1]
c00196b4:	c1 e3 0f             	shl    ebx,0xf
c00196b7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00196ba:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00196bd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00196c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00196c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00196c6:	74 1c                	je     c00196e4 <SoundPort::buffer16(short*, int)+0x74>
c00196c8:	89 c6                	mov    esi,eax
c00196ca:	66 90                	xchg   ax,ax
c00196cc:	8d 46 01             	lea    eax,[esi+0x1]
c00196cf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00196d3:	75 d7                	jne    c00196ac <SoundPort::buffer16(short*, int)+0x3c>
c00196d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00196d9:	8d 76 00             	lea    esi,[esi+0x0]
c00196dc:	5b                   	pop    ebx
c00196dd:	5e                   	pop    esi
c00196de:	5f                   	pop    edi
c00196df:	5d                   	pop    ebp
c00196e0:	c3                   	ret    
c00196e1:	8d 76 00             	lea    esi,[esi+0x0]
c00196e4:	5b                   	pop    ebx
c00196e5:	8d 46 02             	lea    eax,[esi+0x2]
c00196e8:	5e                   	pop    esi
c00196e9:	5f                   	pop    edi
c00196ea:	5d                   	pop    ebp
c00196eb:	c3                   	ret    
c00196ec:	5b                   	pop    ebx
c00196ed:	31 c0                	xor    eax,eax
c00196ef:	5e                   	pop    esi
c00196f0:	5f                   	pop    edi
c00196f1:	5d                   	pop    ebp
c00196f2:	c3                   	ret    
c00196f3:	90                   	nop
c00196f4:	b8 01 00 00 00       	mov    eax,0x1
c00196f9:	eb e1                	jmp    c00196dc <SoundPort::buffer16(short*, int)+0x6c>
c00196fb:	90                   	nop

c00196fc <SoundPort::buffer32(int*, int)>:
c00196fc:	55                   	push   ebp
c00196fd:	57                   	push   edi
c00196fe:	56                   	push   esi
c00196ff:	53                   	push   ebx
c0019700:	51                   	push   ecx
c0019701:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019709:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001970c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019710:	89 04 24             	mov    DWORD PTR [esp],eax
c0019713:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019716:	74 5c                	je     c0019774 <SoundPort::buffer32(int*, int)+0x78>
c0019718:	85 c0                	test   eax,eax
c001971a:	7e 58                	jle    c0019774 <SoundPort::buffer32(int*, int)+0x78>
c001971c:	8d 71 01             	lea    esi,[ecx+0x1]
c001971f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019722:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019725:	8b 37                	mov    esi,DWORD PTR [edi]
c0019727:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001972a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001972d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019730:	74 4a                	je     c001977c <SoundPort::buffer32(int*, int)+0x80>
c0019732:	31 f6                	xor    esi,esi
c0019734:	eb 1e                	jmp    c0019754 <SoundPort::buffer32(int*, int)+0x58>
c0019736:	66 90                	xchg   ax,ax
c0019738:	8d 69 01             	lea    ebp,[ecx+0x1]
c001973b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001973e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019741:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019744:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019748:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001974b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001974e:	74 18                	je     c0019768 <SoundPort::buffer32(int*, int)+0x6c>
c0019750:	89 de                	mov    esi,ebx
c0019752:	66 90                	xchg   ax,ax
c0019754:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019757:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001975a:	75 dc                	jne    c0019738 <SoundPort::buffer32(int*, int)+0x3c>
c001975c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001975f:	90                   	nop
c0019760:	5a                   	pop    edx
c0019761:	5b                   	pop    ebx
c0019762:	5e                   	pop    esi
c0019763:	5f                   	pop    edi
c0019764:	5d                   	pop    ebp
c0019765:	c3                   	ret    
c0019766:	66 90                	xchg   ax,ax
c0019768:	5a                   	pop    edx
c0019769:	8d 46 02             	lea    eax,[esi+0x2]
c001976c:	5b                   	pop    ebx
c001976d:	5e                   	pop    esi
c001976e:	5f                   	pop    edi
c001976f:	5d                   	pop    ebp
c0019770:	c3                   	ret    
c0019771:	8d 76 00             	lea    esi,[esi+0x0]
c0019774:	5a                   	pop    edx
c0019775:	31 c0                	xor    eax,eax
c0019777:	5b                   	pop    ebx
c0019778:	5e                   	pop    esi
c0019779:	5f                   	pop    edi
c001977a:	5d                   	pop    ebp
c001977b:	c3                   	ret    
c001977c:	b8 01 00 00 00       	mov    eax,0x1
c0019781:	eb dd                	jmp    c0019760 <SoundPort::buffer32(int*, int)+0x64>
c0019783:	90                   	nop

c0019784 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019784:	57                   	push   edi
c0019785:	56                   	push   esi
c0019786:	53                   	push   ebx
c0019787:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001978b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001978f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019795:	39 03                	cmp    DWORD PTR [ebx],eax
c0019797:	74 13                	je     c00197ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019799:	83 ec 0c             	sub    esp,0xc
c001979c:	68 e4 10 02 c0       	push   0xc00210e4
c00197a1:	e8 29 6c ff ff       	call   c00103cf <KePanic(char const*)>
c00197a6:	83 c4 10             	add    esp,0x10
c00197a9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ac:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00197b2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00197b5:	74 11                	je     c00197c8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00197b7:	83 ec 0c             	sub    esp,0xc
c00197ba:	68 23 11 02 c0       	push   0xc0021123
c00197bf:	e8 0b 6c ff ff       	call   c00103cf <KePanic(char const*)>
c00197c4:	83 c4 10             	add    esp,0x10
c00197c7:	90                   	nop
c00197c8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00197ce:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00197d1:	74 11                	je     c00197e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00197d3:	83 ec 0c             	sub    esp,0xc
c00197d6:	68 23 11 02 c0       	push   0xc0021123
c00197db:	e8 ef 6b ff ff       	call   c00103cf <KePanic(char const*)>
c00197e0:	83 c4 10             	add    esp,0x10
c00197e3:	90                   	nop
c00197e4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00197e7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00197eb:	7e 07                	jle    c00197f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00197ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197f1:	8d 76 00             	lea    esi,[esi+0x0]
c00197f4:	85 f6                	test   esi,esi
c00197f6:	7e 2c                	jle    c0019824 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00197f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00197fc:	8d 3c 36             	lea    edi,[esi+esi*1]
c00197ff:	31 c9                	xor    ecx,ecx
c0019801:	01 d7                	add    edi,edx
c0019803:	90                   	nop
c0019804:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019807:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001980a:	85 c0                	test   eax,eax
c001980c:	79 06                	jns    c0019814 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001980e:	05 ff 7f 00 00       	add    eax,0x7fff
c0019813:	90                   	nop
c0019814:	c1 f8 0f             	sar    eax,0xf
c0019817:	83 c1 04             	add    ecx,0x4
c001981a:	66 01 02             	add    WORD PTR [edx],ax
c001981d:	83 c2 02             	add    edx,0x2
c0019820:	39 d7                	cmp    edi,edx
c0019822:	75 e0                	jne    c0019804 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019824:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019827:	50                   	push   eax
c0019828:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001982b:	29 f0                	sub    eax,esi
c001982d:	c1 e0 02             	shl    eax,0x2
c0019830:	50                   	push   eax
c0019831:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019834:	50                   	push   eax
c0019835:	52                   	push   edx
c0019836:	e8 95 6b fe ff       	call   c00003d0 <memmove>
c001983b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001983e:	83 c4 10             	add    esp,0x10
c0019841:	89 f0                	mov    eax,esi
c0019843:	5b                   	pop    ebx
c0019844:	5e                   	pop    esi
c0019845:	5f                   	pop    edi
c0019846:	c3                   	ret    
c0019847:	90                   	nop

c0019848 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019848:	57                   	push   edi
c0019849:	56                   	push   esi
c001984a:	53                   	push   ebx
c001984b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001984f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019853:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019857:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001985d:	39 06                	cmp    DWORD PTR [esi],eax
c001985f:	74 13                	je     c0019874 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019861:	83 ec 0c             	sub    esp,0xc
c0019864:	68 04 11 02 c0       	push   0xc0021104
c0019869:	e8 61 6b ff ff       	call   c00103cf <KePanic(char const*)>
c001986e:	83 c4 10             	add    esp,0x10
c0019871:	8d 76 00             	lea    esi,[esi+0x0]
c0019874:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001987a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001987d:	74 11                	je     c0019890 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001987f:	83 ec 0c             	sub    esp,0xc
c0019882:	68 3f 11 02 c0       	push   0xc002113f
c0019887:	e8 43 6b ff ff       	call   c00103cf <KePanic(char const*)>
c001988c:	83 c4 10             	add    esp,0x10
c001988f:	90                   	nop
c0019890:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019896:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019899:	74 11                	je     c00198ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001989b:	83 ec 0c             	sub    esp,0xc
c001989e:	68 3f 11 02 c0       	push   0xc002113f
c00198a3:	e8 27 6b ff ff       	call   c00103cf <KePanic(char const*)>
c00198a8:	83 c4 10             	add    esp,0x10
c00198ab:	90                   	nop
c00198ac:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00198af:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00198b3:	7e 07                	jle    c00198bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00198b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00198b9:	8d 76 00             	lea    esi,[esi+0x0]
c00198bc:	85 ff                	test   edi,edi
c00198be:	7e 1c                	jle    c00198dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00198c0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00198c7:	31 c0                	xor    eax,eax
c00198c9:	8d 76 00             	lea    esi,[esi+0x0]
c00198cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00198cf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00198d2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00198d5:	83 c0 04             	add    eax,0x4
c00198d8:	39 c1                	cmp    ecx,eax
c00198da:	75 f0                	jne    c00198cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00198dc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00198df:	50                   	push   eax
c00198e0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00198e3:	29 f8                	sub    eax,edi
c00198e5:	c1 e0 02             	shl    eax,0x2
c00198e8:	50                   	push   eax
c00198e9:	8d 04 ba             	lea    eax,[edx+edi*4]
c00198ec:	50                   	push   eax
c00198ed:	52                   	push   edx
c00198ee:	e8 dd 6a fe ff       	call   c00003d0 <memmove>
c00198f3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00198f6:	83 c4 10             	add    esp,0x10
c00198f9:	89 f8                	mov    eax,edi
c00198fb:	5b                   	pop    ebx
c00198fc:	5e                   	pop    esi
c00198fd:	5f                   	pop    edi
c00198fe:	c3                   	ret    
c00198ff:	90                   	nop

c0019900 <PCI::open(int, int, void*)>:
c0019900:	83 ec 18             	sub    esp,0x18
c0019903:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019907:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001990b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019911:	8b 10                	mov    edx,DWORD PTR [eax]
c0019913:	50                   	push   eax
c0019914:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019917:	31 c0                	xor    eax,eax
c0019919:	83 c4 1c             	add    esp,0x1c
c001991c:	c3                   	ret    
c001991d:	90                   	nop

c001991e <PCI::close(int, int, void*)>:
c001991e:	31 c0                	xor    eax,eax
c0019920:	c3                   	ret    
c0019921:	90                   	nop

c0019922 <PCI::PCI()>:
c0019922:	83 ec 0c             	sub    esp,0xc
c0019925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019929:	83 ec 08             	sub    esp,0x8
c001992c:	68 5b 11 02 c0       	push   0xc002115b
c0019931:	50                   	push   eax
c0019932:	e8 69 1a ff ff       	call   c000b3a0 <Bus::Bus(char const*)>
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	ba 04 12 02 c0       	mov    edx,0xc0021204
c001993f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019943:	89 10                	mov    DWORD PTR [eax],edx
c0019945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019949:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0019953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019957:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c001995c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019960:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019966:	31 d2                	xor    edx,edx
c0019968:	88 c2                	mov    dl,al
c001996a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001996e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019979:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001997f:	31 d2                	xor    edx,edx
c0019981:	88 c2                	mov    dl,al
c0019983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019987:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001998c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019990:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019996:	8d 50 01             	lea    edx,[eax+0x1]
c0019999:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001999d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00199a3:	31 d2                	xor    edx,edx
c00199a5:	88 c2                	mov    dl,al
c00199a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00199af:	83 c9 c0             	or     ecx,0xffffffc0
c00199b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00199b6:	90                   	nop
c00199b7:	83 c4 0c             	add    esp,0xc
c00199ba:	c3                   	ret    
c00199bb:	90                   	nop

c00199bc <PCI::readBAR8(unsigned int, int)>:
c00199bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199c4:	f6 c2 01             	test   dl,0x1
c00199c7:	74 07                	je     c00199d0 <PCI::readBAR8(unsigned int, int)+0x14>
c00199c9:	83 e2 fc             	and    edx,0xfffffffc
c00199cc:	01 c2                	add    edx,eax
c00199ce:	ec                   	in     al,dx
c00199cf:	c3                   	ret    
c00199d0:	83 e2 f0             	and    edx,0xfffffff0
c00199d3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00199d6:	c3                   	ret    
c00199d7:	90                   	nop

c00199d8 <PCI::readBAR16(unsigned int, int)>:
c00199d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199e0:	f6 c2 01             	test   dl,0x1
c00199e3:	74 08                	je     c00199ed <PCI::readBAR16(unsigned int, int)+0x15>
c00199e5:	83 e2 fc             	and    edx,0xfffffffc
c00199e8:	01 c2                	add    edx,eax
c00199ea:	66 ed                	in     ax,dx
c00199ec:	c3                   	ret    
c00199ed:	83 e2 f0             	and    edx,0xfffffff0
c00199f0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00199f4:	c3                   	ret    
c00199f5:	90                   	nop

c00199f6 <PCI::readBAR32(unsigned int, int)>:
c00199f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00199fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199fe:	f6 c2 01             	test   dl,0x1
c0019a01:	74 07                	je     c0019a0a <PCI::readBAR32(unsigned int, int)+0x14>
c0019a03:	83 e2 fc             	and    edx,0xfffffffc
c0019a06:	01 c2                	add    edx,eax
c0019a08:	ed                   	in     eax,dx
c0019a09:	c3                   	ret    
c0019a0a:	83 e2 f0             	and    edx,0xfffffff0
c0019a0d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019a10:	c3                   	ret    
c0019a11:	90                   	nop

c0019a12 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019a12:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a1a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a1e:	f6 c2 01             	test   dl,0x1
c0019a21:	74 07                	je     c0019a2a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019a23:	83 e2 fc             	and    edx,0xfffffffc
c0019a26:	01 ca                	add    edx,ecx
c0019a28:	ee                   	out    dx,al
c0019a29:	c3                   	ret    
c0019a2a:	83 e2 f0             	and    edx,0xfffffff0
c0019a2d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019a30:	c3                   	ret    
c0019a31:	90                   	nop

c0019a32 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019a32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a3e:	f6 c2 01             	test   dl,0x1
c0019a41:	74 08                	je     c0019a4b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0019a43:	83 e2 fc             	and    edx,0xfffffffc
c0019a46:	01 ca                	add    edx,ecx
c0019a48:	66 ef                	out    dx,ax
c0019a4a:	c3                   	ret    
c0019a4b:	83 e2 f0             	and    edx,0xfffffff0
c0019a4e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019a52:	c3                   	ret    
c0019a53:	90                   	nop

c0019a54 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019a54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a60:	f6 c2 01             	test   dl,0x1
c0019a63:	74 07                	je     c0019a6c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019a65:	83 e2 fc             	and    edx,0xfffffffc
c0019a68:	01 ca                	add    edx,ecx
c0019a6a:	ef                   	out    dx,eax
c0019a6b:	c3                   	ret    
c0019a6c:	83 e2 f0             	and    edx,0xfffffff0
c0019a6f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019a72:	c3                   	ret    
c0019a73:	90                   	nop

c0019a74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019a74:	55                   	push   ebp
c0019a75:	57                   	push   edi
c0019a76:	56                   	push   esi
c0019a77:	53                   	push   ebx
c0019a78:	83 ec 0c             	sub    esp,0xc
c0019a7b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019a7f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0019a83:	89 f0                	mov    eax,esi
c0019a85:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019a89:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a8d:	3c 07                	cmp    al,0x7
c0019a8f:	76 10                	jbe    c0019aa1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019a91:	83 ec 0c             	sub    esp,0xc
c0019a94:	68 63 11 02 c0       	push   0xc0021163
c0019a99:	e8 31 69 ff ff       	call   c00103cf <KePanic(char const*)>
c0019a9e:	83 c4 10             	add    esp,0x10
c0019aa1:	80 fb 0f             	cmp    bl,0xf
c0019aa4:	76 10                	jbe    c0019ab6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019aa6:	83 ec 0c             	sub    esp,0xc
c0019aa9:	68 93 11 02 c0       	push   0xc0021193
c0019aae:	e8 1c 69 ff ff       	call   c00103cf <KePanic(char const*)>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	8d 04 36             	lea    eax,[esi+esi*1]
c0019ab9:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019abe:	83 c8 f0             	or     eax,0xfffffff0
c0019ac1:	ee                   	out    dx,al
c0019ac2:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019ac7:	89 e8                	mov    eax,ebp
c0019ac9:	ee                   	out    dx,al
c0019aca:	83 c4 0c             	add    esp,0xc
c0019acd:	89 d8                	mov    eax,ebx
c0019acf:	66 81 e7 fc 00       	and    di,0xfc
c0019ad4:	5b                   	pop    ebx
c0019ad5:	c1 e0 08             	shl    eax,0x8
c0019ad8:	5e                   	pop    esi
c0019ad9:	09 f8                	or     eax,edi
c0019adb:	5f                   	pop    edi
c0019adc:	66 0d 00 c0          	or     ax,0xc000
c0019ae0:	5d                   	pop    ebp
c0019ae1:	c3                   	ret    

c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019ae2:	57                   	push   edi
c0019ae3:	56                   	push   esi
c0019ae4:	53                   	push   ebx
c0019ae5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019aed:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019af3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019af7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019afb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019aff:	83 ff 01             	cmp    edi,0x1
c0019b02:	75 3e                	jne    c0019b42 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0019b04:	89 de                	mov    esi,ebx
c0019b06:	0f b6 c0             	movzx  eax,al
c0019b09:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019b0f:	c1 e0 10             	shl    eax,0x10
c0019b12:	0f b6 c9             	movzx  ecx,cl
c0019b15:	09 f0                	or     eax,esi
c0019b17:	c1 e1 08             	shl    ecx,0x8
c0019b1a:	0f b6 d2             	movzx  edx,dl
c0019b1d:	09 c8                	or     eax,ecx
c0019b1f:	c1 e2 0b             	shl    edx,0xb
c0019b22:	09 d0                	or     eax,edx
c0019b24:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019b29:	0d 00 00 00 80       	or     eax,0x80000000
c0019b2e:	ef                   	out    dx,eax
c0019b2f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019b34:	ed                   	in     eax,dx
c0019b35:	83 e3 02             	and    ebx,0x2
c0019b38:	0f b6 cb             	movzx  ecx,bl
c0019b3b:	c1 e1 03             	shl    ecx,0x3
c0019b3e:	d3 e8                	shr    eax,cl
c0019b40:	eb 43                	jmp    c0019b85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019b42:	83 ff 02             	cmp    edi,0x2
c0019b45:	75 2c                	jne    c0019b73 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0019b47:	83 ec 0c             	sub    esp,0xc
c0019b4a:	0f b6 c9             	movzx  ecx,cl
c0019b4d:	0f b6 d2             	movzx  edx,dl
c0019b50:	0f b6 fb             	movzx  edi,bl
c0019b53:	0f b6 c0             	movzx  eax,al
c0019b56:	57                   	push   edi
c0019b57:	51                   	push   ecx
c0019b58:	52                   	push   edx
c0019b59:	50                   	push   eax
c0019b5a:	56                   	push   esi
c0019b5b:	e8 14 ff ff ff       	call   c0019a74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019b60:	89 c2                	mov    edx,eax
c0019b62:	ed                   	in     eax,dx
c0019b63:	83 e3 02             	and    ebx,0x2
c0019b66:	83 c4 20             	add    esp,0x20
c0019b69:	0f b6 cb             	movzx  ecx,bl
c0019b6c:	c1 e1 03             	shl    ecx,0x3
c0019b6f:	d3 e8                	shr    eax,cl
c0019b71:	eb 12                	jmp    c0019b85 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019b73:	83 ec 0c             	sub    esp,0xc
c0019b76:	68 c3 11 02 c0       	push   0xc00211c3
c0019b7b:	e8 4f 68 ff ff       	call   c00103cf <KePanic(char const*)>
c0019b80:	83 c4 10             	add    esp,0x10
c0019b83:	31 c0                	xor    eax,eax
c0019b85:	5b                   	pop    ebx
c0019b86:	5e                   	pop    esi
c0019b87:	5f                   	pop    edi
c0019b88:	c3                   	ret    
c0019b89:	90                   	nop

c0019b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019b8a:	83 ec 18             	sub    esp,0x18
c0019b8d:	6a 00                	push   0x0
c0019b8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b94:	50                   	push   eax
c0019b95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019b9a:	50                   	push   eax
c0019b9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ba0:	50                   	push   eax
c0019ba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ba5:	e8 38 ff ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019baa:	83 c4 2c             	add    esp,0x2c
c0019bad:	c3                   	ret    

c0019bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019bae:	83 ec 18             	sub    esp,0x18
c0019bb1:	6a 0e                	push   0xe
c0019bb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bb8:	50                   	push   eax
c0019bb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bbe:	50                   	push   eax
c0019bbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019bc4:	50                   	push   eax
c0019bc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019bc9:	e8 14 ff ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019bce:	83 c4 2c             	add    esp,0x2c
c0019bd1:	0f b6 c0             	movzx  eax,al
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019bd6:	55                   	push   ebp
c0019bd7:	57                   	push   edi
c0019bd8:	56                   	push   esi
c0019bd9:	53                   	push   ebx
c0019bda:	83 ec 18             	sub    esp,0x18
c0019bdd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019be2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019be7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019bec:	6a 0a                	push   0xa
c0019bee:	56                   	push   esi
c0019bef:	55                   	push   ebp
c0019bf0:	57                   	push   edi
c0019bf1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019bf5:	e8 e8 fe ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019bfa:	83 c4 14             	add    esp,0x14
c0019bfd:	89 c3                	mov    ebx,eax
c0019bff:	6a 0a                	push   0xa
c0019c01:	0f b6 db             	movzx  ebx,bl
c0019c04:	56                   	push   esi
c0019c05:	55                   	push   ebp
c0019c06:	57                   	push   edi
c0019c07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019c0b:	e8 d2 fe ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c10:	83 c4 2c             	add    esp,0x2c
c0019c13:	25 00 ff 00 00       	and    eax,0xff00
c0019c18:	09 d8                	or     eax,ebx
c0019c1a:	5b                   	pop    ebx
c0019c1b:	5e                   	pop    esi
c0019c1c:	5f                   	pop    edi
c0019c1d:	5d                   	pop    ebp
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019c20:	83 ec 18             	sub    esp,0x18
c0019c23:	6a 08                	push   0x8
c0019c25:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c2a:	50                   	push   eax
c0019c2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c30:	50                   	push   eax
c0019c31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c36:	50                   	push   eax
c0019c37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c3b:	e8 a2 fe ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c40:	83 c4 2c             	add    esp,0x2c
c0019c43:	0f b6 c4             	movzx  eax,ah
c0019c46:	c3                   	ret    
c0019c47:	90                   	nop

c0019c48 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019c48:	83 ec 18             	sub    esp,0x18
c0019c4b:	6a 08                	push   0x8
c0019c4d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c52:	50                   	push   eax
c0019c53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c58:	50                   	push   eax
c0019c59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c5e:	50                   	push   eax
c0019c5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c63:	e8 7a fe ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c68:	83 c4 2c             	add    esp,0x2c
c0019c6b:	c3                   	ret    

c0019c6c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019c6c:	83 ec 18             	sub    esp,0x18
c0019c6f:	6a 3c                	push   0x3c
c0019c71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c76:	50                   	push   eax
c0019c77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c7c:	50                   	push   eax
c0019c7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c82:	50                   	push   eax
c0019c83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c87:	e8 56 fe ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c8c:	83 c4 2c             	add    esp,0x2c
c0019c8f:	c3                   	ret    

c0019c90 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019c90:	83 ec 18             	sub    esp,0x18
c0019c93:	6a 18                	push   0x18
c0019c95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c9a:	50                   	push   eax
c0019c9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ca0:	50                   	push   eax
c0019ca1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019ca6:	50                   	push   eax
c0019ca7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019cab:	e8 32 fe ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cb0:	83 c4 2c             	add    esp,0x2c
c0019cb3:	0f b6 c4             	movzx  eax,ah
c0019cb6:	c3                   	ret    
c0019cb7:	90                   	nop

c0019cb8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019cb8:	55                   	push   ebp
c0019cb9:	57                   	push   edi
c0019cba:	56                   	push   esi
c0019cbb:	53                   	push   ebx
c0019cbc:	83 ec 28             	sub    esp,0x28
c0019cbf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019cc3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019cc8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019ccd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0019cd2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019cd9:	8d 43 12             	lea    eax,[ebx+0x12]
c0019cdc:	83 c3 10             	add    ebx,0x10
c0019cdf:	0f b6 c0             	movzx  eax,al
c0019ce2:	0f b6 db             	movzx  ebx,bl
c0019ce5:	50                   	push   eax
c0019ce6:	51                   	push   ecx
c0019ce7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019ceb:	57                   	push   edi
c0019cec:	55                   	push   ebp
c0019ced:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019cf1:	e8 ec fd ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cf6:	83 c4 14             	add    esp,0x14
c0019cf9:	89 c6                	mov    esi,eax
c0019cfb:	53                   	push   ebx
c0019cfc:	c1 e6 10             	shl    esi,0x10
c0019cff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d03:	51                   	push   ecx
c0019d04:	57                   	push   edi
c0019d05:	55                   	push   ebp
c0019d06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019d0a:	e8 d3 fd ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d0f:	83 c4 3c             	add    esp,0x3c
c0019d12:	0f b7 c0             	movzx  eax,ax
c0019d15:	5b                   	pop    ebx
c0019d16:	09 f0                	or     eax,esi
c0019d18:	5e                   	pop    esi
c0019d19:	5f                   	pop    edi
c0019d1a:	5d                   	pop    ebp
c0019d1b:	c3                   	ret    

c0019d1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019d1c:	55                   	push   ebp
c0019d1d:	57                   	push   edi
c0019d1e:	56                   	push   esi
c0019d1f:	53                   	push   ebx
c0019d20:	83 ec 0c             	sub    esp,0xc
c0019d23:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019d27:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d2b:	89 f5                	mov    ebp,esi
c0019d2d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019d33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d37:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019d3b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019d43:	83 f9 01             	cmp    ecx,0x1
c0019d46:	75 5d                	jne    c0019da5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019d48:	0f b6 c8             	movzx  ecx,al
c0019d4b:	0f b6 d2             	movzx  edx,dl
c0019d4e:	c1 e1 10             	shl    ecx,0x10
c0019d51:	c1 e2 0b             	shl    edx,0xb
c0019d54:	89 f0                	mov    eax,esi
c0019d56:	25 fc 00 00 00       	and    eax,0xfc
c0019d5b:	09 c1                	or     ecx,eax
c0019d5d:	89 e8                	mov    eax,ebp
c0019d5f:	0f b6 c0             	movzx  eax,al
c0019d62:	c1 e0 08             	shl    eax,0x8
c0019d65:	09 c1                	or     ecx,eax
c0019d67:	09 d1                	or     ecx,edx
c0019d69:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019d6e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019d74:	89 c8                	mov    eax,ecx
c0019d76:	ef                   	out    dx,eax
c0019d77:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019d7c:	ed                   	in     eax,dx
c0019d7d:	0f b7 db             	movzx  ebx,bx
c0019d80:	83 e6 02             	and    esi,0x2
c0019d83:	74 0a                	je     c0019d8f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019d85:	0f b7 d0             	movzx  edx,ax
c0019d88:	c1 e3 10             	shl    ebx,0x10
c0019d8b:	09 d3                	or     ebx,edx
c0019d8d:	eb 05                	jmp    c0019d94 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019d8f:	66 31 c0             	xor    ax,ax
c0019d92:	09 c3                	or     ebx,eax
c0019d94:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019d99:	89 c8                	mov    eax,ecx
c0019d9b:	ef                   	out    dx,eax
c0019d9c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019da1:	89 d8                	mov    eax,ebx
c0019da3:	eb 41                	jmp    c0019de6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019da5:	83 f9 02             	cmp    ecx,0x2
c0019da8:	75 45                	jne    c0019def <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	0f b6 d2             	movzx  edx,dl
c0019db0:	89 f1                	mov    ecx,esi
c0019db2:	0f b6 c0             	movzx  eax,al
c0019db5:	0f b6 f1             	movzx  esi,cl
c0019db8:	89 e9                	mov    ecx,ebp
c0019dba:	56                   	push   esi
c0019dbb:	0f b6 c9             	movzx  ecx,cl
c0019dbe:	51                   	push   ecx
c0019dbf:	52                   	push   edx
c0019dc0:	50                   	push   eax
c0019dc1:	57                   	push   edi
c0019dc2:	e8 ad fc ff ff       	call   c0019a74 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019dc7:	89 c2                	mov    edx,eax
c0019dc9:	ed                   	in     eax,dx
c0019dca:	83 c4 20             	add    esp,0x20
c0019dcd:	0f b7 db             	movzx  ebx,bx
c0019dd0:	f6 c2 02             	test   dl,0x2
c0019dd3:	74 0c                	je     c0019de1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019dd5:	0f b7 c8             	movzx  ecx,ax
c0019dd8:	89 d8                	mov    eax,ebx
c0019dda:	c1 e0 10             	shl    eax,0x10
c0019ddd:	09 c8                	or     eax,ecx
c0019ddf:	eb 05                	jmp    c0019de6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019de1:	66 31 c0             	xor    ax,ax
c0019de4:	09 d8                	or     eax,ebx
c0019de6:	ef                   	out    dx,eax
c0019de7:	83 c4 0c             	add    esp,0xc
c0019dea:	5b                   	pop    ebx
c0019deb:	5e                   	pop    esi
c0019dec:	5f                   	pop    edi
c0019ded:	5d                   	pop    ebp
c0019dee:	c3                   	ret    
c0019def:	c7 44 24 20 c3 11 02 c0 	mov    DWORD PTR [esp+0x20],0xc00211c3
c0019df7:	83 c4 0c             	add    esp,0xc
c0019dfa:	5b                   	pop    ebx
c0019dfb:	5e                   	pop    esi
c0019dfc:	5f                   	pop    edi
c0019dfd:	5d                   	pop    ebp
c0019dfe:	e9 cc 65 ff ff       	jmp    c00103cf <KePanic(char const*)>
c0019e03:	90                   	nop

c0019e04 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019e04:	55                   	push   ebp
c0019e05:	57                   	push   edi
c0019e06:	56                   	push   esi
c0019e07:	53                   	push   ebx
c0019e08:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019e0e:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019e15:	0f 85 bd 00 00 00    	jne    c0019ed8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019e1b:	83 ec 0c             	sub    esp,0xc
c0019e1e:	68 14 01 00 00       	push   0x114
c0019e23:	e8 45 da fe ff       	call   c000786d <malloc>
c0019e28:	83 c4 0c             	add    esp,0xc
c0019e2b:	89 c3                	mov    ebx,eax
c0019e2d:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019e33:	68 c9 11 02 c0       	push   0xc00211c9
c0019e38:	50                   	push   eax
c0019e39:	e8 46 0d ff ff       	call   c000ab84 <File::File(char const*, Process*)>
c0019e3e:	83 c4 10             	add    esp,0x10
c0019e41:	85 db                	test   ebx,ebx
c0019e43:	0f 84 47 02 00 00    	je     c001a090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019e49:	56                   	push   esi
c0019e4a:	56                   	push   esi
c0019e4b:	6a 01                	push   0x1
c0019e4d:	53                   	push   ebx
c0019e4e:	e8 f1 0d ff ff       	call   c000ac44 <File::open(FileOpenMode)>
c0019e53:	83 c4 10             	add    esp,0x10
c0019e56:	85 c0                	test   eax,eax
c0019e58:	0f 85 32 02 00 00    	jne    c001a090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019e5e:	52                   	push   edx
c0019e5f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019e63:	50                   	push   eax
c0019e64:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019e68:	50                   	push   eax
c0019e69:	53                   	push   ebx
c0019e6a:	e8 81 10 ff ff       	call   c000aef0 <File::stat(unsigned long long*, bool*)>
c0019e6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019e73:	40                   	inc    eax
c0019e74:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e77:	e8 f1 d9 fe ff       	call   c000786d <malloc>
c0019e7c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019e80:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019e85:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019e89:	59                   	pop    ecx
c0019e8a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019e8c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019e90:	51                   	push   ecx
c0019e91:	50                   	push   eax
c0019e92:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e96:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019e9a:	53                   	push   ebx
c0019e9b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e9e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019ea2:	83 c4 20             	add    esp,0x20
c0019ea5:	89 c8                	mov    eax,ecx
c0019ea7:	99                   	cdq    
c0019ea8:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019eac:	0f 85 de 01 00 00    	jne    c001a090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019eb2:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019eb6:	0f 85 d4 01 00 00    	jne    c001a090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	53                   	push   ebx
c0019ec0:	e8 dd 0d ff ff       	call   c000aca2 <File::close()>
c0019ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ec9:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019ed0:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019ed5:	83 c4 10             	add    esp,0x10
c0019ed8:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019edd:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019ee3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ee6:	31 ff                	xor    edi,edi
c0019ee8:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019ef0:	31 f6                	xor    esi,esi
c0019ef2:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019ef7:	31 db                	xor    ebx,ebx
c0019ef9:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019f01:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019f06:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019f0d:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019f11:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019f18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019f1c:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019f1f:	0f 8e 6b 01 00 00    	jle    c001a090 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019f25:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019f28:	d4 40                	aam    0x40
c0019f2a:	d5 39                	aad    0x39
c0019f2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019f30:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019f34:	d4 40                	aam    0x40
c0019f36:	d5 39                	aad    0x39
c0019f38:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019f3c:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019f40:	d4 40                	aam    0x40
c0019f42:	d5 39                	aad    0x39
c0019f44:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019f48:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019f4c:	d4 40                	aam    0x40
c0019f4e:	d5 39                	aad    0x39
c0019f50:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f54:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019f58:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019f5c:	3c 56                	cmp    al,0x56
c0019f5e:	74 45                	je     c0019fa5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c0019f60:	d4 40                	aam    0x40
c0019f62:	d5 39                	aad    0x39
c0019f64:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019f67:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019f6b:	0f b6 c9             	movzx  ecx,cl
c0019f6e:	c1 e1 04             	shl    ecx,0x4
c0019f71:	d4 40                	aam    0x40
c0019f73:	d5 39                	aad    0x39
c0019f75:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019f78:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019f7c:	0f b6 db             	movzx  ebx,bl
c0019f7f:	09 cb                	or     ebx,ecx
c0019f81:	c1 e3 04             	shl    ebx,0x4
c0019f84:	d4 40                	aam    0x40
c0019f86:	d5 39                	aad    0x39
c0019f88:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019f8b:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019f8f:	0f b6 c9             	movzx  ecx,cl
c0019f92:	09 cb                	or     ebx,ecx
c0019f94:	c1 e3 04             	shl    ebx,0x4
c0019f97:	89 d9                	mov    ecx,ebx
c0019f99:	d4 40                	aam    0x40
c0019f9b:	d5 39                	aad    0x39
c0019f9d:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019fa0:	0f b6 db             	movzx  ebx,bl
c0019fa3:	09 cb                	or     ebx,ecx
c0019fa5:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019fa9:	80 f9 58             	cmp    cl,0x58
c0019fac:	74 47                	je     c0019ff5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c0019fae:	88 c8                	mov    al,cl
c0019fb0:	d4 40                	aam    0x40
c0019fb2:	d5 39                	aad    0x39
c0019fb4:	83 e8 30             	sub    eax,0x30
c0019fb7:	0f b6 e8             	movzx  ebp,al
c0019fba:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019fbe:	c1 e5 04             	shl    ebp,0x4
c0019fc1:	d4 40                	aam    0x40
c0019fc3:	d5 39                	aad    0x39
c0019fc5:	83 e8 30             	sub    eax,0x30
c0019fc8:	0f b6 f0             	movzx  esi,al
c0019fcb:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019fcf:	09 ee                	or     esi,ebp
c0019fd1:	c1 e6 04             	shl    esi,0x4
c0019fd4:	d4 40                	aam    0x40
c0019fd6:	d5 39                	aad    0x39
c0019fd8:	83 e8 30             	sub    eax,0x30
c0019fdb:	0f b6 e8             	movzx  ebp,al
c0019fde:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019fe2:	09 ee                	or     esi,ebp
c0019fe4:	c1 e6 04             	shl    esi,0x4
c0019fe7:	89 f5                	mov    ebp,esi
c0019fe9:	d4 40                	aam    0x40
c0019feb:	d5 39                	aad    0x39
c0019fed:	83 e8 30             	sub    eax,0x30
c0019ff0:	0f b6 f0             	movzx  esi,al
c0019ff3:	09 ee                	or     esi,ebp
c0019ff5:	83 c7 10             	add    edi,0x10
c0019ff8:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019ffc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019fff:	3c 0a                	cmp    al,0xa
c001a001:	74 09                	je     c001a00c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a003:	45                   	inc    ebp
c001a004:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001a007:	75 16                	jne    c001a01f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c001a009:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001a00c:	3c 0a                	cmp    al,0xa
c001a00e:	0f 94 c0             	sete   al
c001a011:	0f b6 c0             	movzx  eax,al
c001a014:	01 c7                	add    edi,eax
c001a016:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001a01b:	75 0c                	jne    c001a029 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c001a01d:	eb 15                	jmp    c001a034 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c001a01f:	47                   	inc    edi
c001a020:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a023:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a027:	eb d3                	jmp    c0019ffc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c001a029:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001a02e:	0f 85 e8 fe ff ff    	jne    c0019f1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a034:	80 f9 58             	cmp    cl,0x58
c001a037:	74 0b                	je     c001a044 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c001a039:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001a03e:	0f 85 d8 fe ff ff    	jne    c0019f1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a044:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a048:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a04c:	c1 e1 04             	shl    ecx,0x4
c001a04f:	83 e8 30             	sub    eax,0x30
c001a052:	09 c8                	or     eax,ecx
c001a054:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001a058:	0f 85 be fe ff ff    	jne    c0019f1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a05e:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001a062:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a066:	c1 e1 04             	shl    ecx,0x4
c001a069:	83 e8 30             	sub    eax,0x30
c001a06c:	09 c8                	or     eax,ecx
c001a06e:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001a072:	0f 85 a4 fe ff ff    	jne    c0019f1c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a078:	50                   	push   eax
c001a079:	50                   	push   eax
c001a07a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a07e:	50                   	push   eax
c001a07f:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001a086:	e8 65 65 fe ff       	call   c00005f0 <strcpy>
c001a08b:	83 c4 10             	add    esp,0x10
c001a08e:	eb 15                	jmp    c001a0a5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c001a090:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a097:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001a0a2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a0a5:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a0ac:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a0b2:	5b                   	pop    ebx
c001a0b3:	5e                   	pop    esi
c001a0b4:	5f                   	pop    edi
c001a0b5:	5d                   	pop    ebp
c001a0b6:	c3                   	ret    
c001a0b7:	90                   	nop

c001a0b8 <PCI::checkBus(unsigned char)>:
c001a0b8:	56                   	push   esi
c001a0b9:	53                   	push   ebx
c001a0ba:	31 f6                	xor    esi,esi
c001a0bc:	51                   	push   ecx
c001a0bd:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001a0c1:	0f b6 c3             	movzx  eax,bl
c001a0c4:	52                   	push   edx
c001a0c5:	56                   	push   esi
c001a0c6:	46                   	inc    esi
c001a0c7:	50                   	push   eax
c001a0c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0cc:	e8 f3 02 00 00       	call   c001a3c4 <PCI::checkDevice(unsigned char, unsigned char)>
c001a0d1:	83 c4 10             	add    esp,0x10
c001a0d4:	83 fe 20             	cmp    esi,0x20
c001a0d7:	75 e8                	jne    c001a0c1 <PCI::checkBus(unsigned char)+0x9>
c001a0d9:	58                   	pop    eax
c001a0da:	5b                   	pop    ebx
c001a0db:	5e                   	pop    esi
c001a0dc:	c3                   	ret    
c001a0dd:	90                   	nop

c001a0de <PCI::foundDevice(PCIDeviceInfo)>:
c001a0de:	55                   	push   ebp
c001a0df:	57                   	push   edi
c001a0e0:	56                   	push   esi
c001a0e1:	53                   	push   ebx
c001a0e2:	83 ec 1c             	sub    esp,0x1c
c001a0e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a0e9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001a0ef:	0f 84 52 01 00 00    	je     c001a247 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a0f5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a0f9:	66 81 f9 06 04       	cmp    cx,0x406
c001a0fe:	75 2c                	jne    c001a12c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001a100:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a105:	50                   	push   eax
c001a106:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a10b:	50                   	push   eax
c001a10c:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a111:	50                   	push   eax
c001a112:	56                   	push   esi
c001a113:	e8 78 fb ff ff       	call   c0019c90 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a118:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a11c:	0f b6 c0             	movzx  eax,al
c001a11f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a123:	83 c4 2c             	add    esp,0x2c
c001a126:	5b                   	pop    ebx
c001a127:	5e                   	pop    esi
c001a128:	5f                   	pop    edi
c001a129:	5d                   	pop    ebp
c001a12a:	eb 8c                	jmp    c001a0b8 <PCI::checkBus(unsigned char)>
c001a12c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a130:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a136:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a13a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a13e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a142:	88 d3                	mov    bl,dl
c001a144:	85 c0                	test   eax,eax
c001a146:	74 33                	je     c001a17b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a148:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a14b:	85 d2                	test   edx,edx
c001a14d:	74 28                	je     c001a177 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a14f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a155:	31 ef                	xor    edi,ebp
c001a157:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a15d:	75 18                	jne    c001a177 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a15f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a163:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a169:	75 0c                	jne    c001a177 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a16b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a171:	0f 84 d0 00 00 00    	je     c001a247 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a177:	8b 00                	mov    eax,DWORD PTR [eax]
c001a179:	eb c9                	jmp    c001a144 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a17b:	66 81 f9 01 06       	cmp    cx,0x601
c001a180:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a184:	75 19                	jne    c001a19f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a186:	83 ec 0c             	sub    esp,0xc
c001a189:	68 64 01 00 00       	push   0x164
c001a18e:	e8 da d6 fe ff       	call   c000786d <malloc>
c001a193:	89 c5                	mov    ebp,eax
c001a195:	89 04 24             	mov    DWORD PTR [esp],eax
c001a198:	e8 47 0e 00 00       	call   c001afe4 <SATABus::SATABus()>
c001a19d:	eb 1e                	jmp    c001a1bd <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a19f:	66 81 f9 01 01       	cmp    cx,0x101
c001a1a4:	75 60                	jne    c001a206 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a1a6:	83 ec 0c             	sub    esp,0xc
c001a1a9:	68 70 02 00 00       	push   0x270
c001a1ae:	e8 ba d6 fe ff       	call   c000786d <malloc>
c001a1b3:	89 c5                	mov    ebp,eax
c001a1b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1b8:	e8 cb 02 00 00       	call   c001a488 <IDE::IDE()>
c001a1bd:	58                   	pop    eax
c001a1be:	5a                   	pop    edx
c001a1bf:	55                   	push   ebp
c001a1c0:	56                   	push   esi
c001a1c1:	e8 86 18 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c001a1c6:	83 ec 1c             	sub    esp,0x1c
c001a1c9:	b9 09 00 00 00       	mov    ecx,0x9
c001a1ce:	fc                   	cld    
c001a1cf:	89 e7                	mov    edi,esp
c001a1d1:	89 de                	mov    esi,ebx
c001a1d3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a1d5:	55                   	push   ebp
c001a1d6:	e8 b7 17 ff ff       	call   c000b992 <Device::preOpenPCI(PCIDeviceInfo)>
c001a1db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a1de:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a1e2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a1ea:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a1f2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a1fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a1fd:	83 c4 4c             	add    esp,0x4c
c001a200:	5b                   	pop    ebx
c001a201:	5e                   	pop    esi
c001a202:	5f                   	pop    edi
c001a203:	5d                   	pop    ebp
c001a204:	ff e0                	jmp    eax
c001a206:	83 ec 0c             	sub    esp,0xc
c001a209:	68 58 01 00 00       	push   0x158
c001a20e:	e8 5a d6 fe ff       	call   c000786d <malloc>
c001a213:	89 c5                	mov    ebp,eax
c001a215:	58                   	pop    eax
c001a216:	5a                   	pop    edx
c001a217:	68 e2 11 02 c0       	push   0xc00211e2
c001a21c:	55                   	push   ebp
c001a21d:	e8 c8 1a ff ff       	call   c000bcea <DriverlessDevice::DriverlessDevice(char const*)>
c001a222:	59                   	pop    ecx
c001a223:	5f                   	pop    edi
c001a224:	55                   	push   ebp
c001a225:	56                   	push   esi
c001a226:	e8 21 18 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c001a22b:	b9 09 00 00 00       	mov    ecx,0x9
c001a230:	fc                   	cld    
c001a231:	89 df                	mov    edi,ebx
c001a233:	89 de                	mov    esi,ebx
c001a235:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a237:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a23b:	83 c4 2c             	add    esp,0x2c
c001a23e:	5b                   	pop    ebx
c001a23f:	5e                   	pop    esi
c001a240:	5f                   	pop    edi
c001a241:	5d                   	pop    ebp
c001a242:	e9 4b 17 ff ff       	jmp    c000b992 <Device::preOpenPCI(PCIDeviceInfo)>
c001a247:	83 c4 1c             	add    esp,0x1c
c001a24a:	5b                   	pop    ebx
c001a24b:	5e                   	pop    esi
c001a24c:	5f                   	pop    edi
c001a24d:	5d                   	pop    ebp
c001a24e:	c3                   	ret    
c001a24f:	90                   	nop

c001a250 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a250:	55                   	push   ebp
c001a251:	57                   	push   edi
c001a252:	56                   	push   esi
c001a253:	53                   	push   ebx
c001a254:	83 ec 68             	sub    esp,0x68
c001a257:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a25b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a262:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a266:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a26d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001a272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a276:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a27d:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a282:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a286:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a28b:	6a 0c                	push   0xc
c001a28d:	57                   	push   edi
c001a28e:	53                   	push   ebx
c001a28f:	56                   	push   esi
c001a290:	55                   	push   ebp
c001a291:	e8 4c f8 ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a296:	83 c4 20             	add    esp,0x20
c001a299:	57                   	push   edi
c001a29a:	53                   	push   ebx
c001a29b:	56                   	push   esi
c001a29c:	55                   	push   ebp
c001a29d:	e8 34 f9 ff ff       	call   c0019bd6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a2a2:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a2a7:	57                   	push   edi
c001a2a8:	53                   	push   ebx
c001a2a9:	56                   	push   esi
c001a2aa:	55                   	push   ebp
c001a2ab:	e8 bc f9 ff ff       	call   c0019c6c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a2b0:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a2b4:	83 c4 14             	add    esp,0x14
c001a2b7:	6a 3c                	push   0x3c
c001a2b9:	57                   	push   edi
c001a2ba:	53                   	push   ebx
c001a2bb:	56                   	push   esi
c001a2bc:	55                   	push   ebp
c001a2bd:	e8 20 f8 ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2c2:	0f b6 c4             	movzx  eax,ah
c001a2c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2c9:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a2cd:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a2d1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001a2d6:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a2dc:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a2e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2e6:	83 c4 20             	add    esp,0x20
c001a2e9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a2ee:	74 30                	je     c001a320 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a2f0:	31 c0                	xor    eax,eax
c001a2f2:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a2f6:	7e 28                	jle    c001a320 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a2f8:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a300:	39 cb                	cmp    ebx,ecx
c001a302:	75 19                	jne    c001a31d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a304:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a30c:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a310:	75 0b                	jne    c001a31d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a312:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a319:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001a31d:	40                   	inc    eax
c001a31e:	eb d2                	jmp    c001a2f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a320:	31 d2                	xor    edx,edx
c001a322:	83 ec 0c             	sub    esp,0xc
c001a325:	57                   	push   edi
c001a326:	53                   	push   ebx
c001a327:	56                   	push   esi
c001a328:	52                   	push   edx
c001a329:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001a32d:	55                   	push   ebp
c001a32e:	e8 85 f9 ff ff       	call   c0019cb8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a333:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a337:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a33b:	42                   	inc    edx
c001a33c:	83 c4 20             	add    esp,0x20
c001a33f:	83 fa 06             	cmp    edx,0x6
c001a342:	75 de                	jne    c001a322 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a344:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a349:	83 ec 0c             	sub    esp,0xc
c001a34c:	86 e0                	xchg   al,ah
c001a34e:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a353:	6a 02                	push   0x2
c001a355:	57                   	push   edi
c001a356:	53                   	push   ebx
c001a357:	56                   	push   esi
c001a358:	55                   	push   ebp
c001a359:	e8 84 f7 ff ff       	call   c0019ae2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a35e:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a363:	83 c4 20             	add    esp,0x20
c001a366:	57                   	push   edi
c001a367:	53                   	push   ebx
c001a368:	56                   	push   esi
c001a369:	55                   	push   ebp
c001a36a:	e8 b1 f8 ff ff       	call   c0019c20 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a36f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a373:	57                   	push   edi
c001a374:	53                   	push   ebx
c001a375:	56                   	push   esi
c001a376:	55                   	push   ebp
c001a377:	e8 0e f8 ff ff       	call   c0019b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a37c:	b9 09 00 00 00       	mov    ecx,0x9
c001a381:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a386:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a38a:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a38e:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a392:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a396:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a39a:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a39e:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a3a2:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a3a6:	83 ec 0c             	sub    esp,0xc
c001a3a9:	fc                   	cld    
c001a3aa:	89 e7                	mov    edi,esp
c001a3ac:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a3b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a3b2:	55                   	push   ebp
c001a3b3:	e8 26 fd ff ff       	call   c001a0de <PCI::foundDevice(PCIDeviceInfo)>
c001a3b8:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	5f                   	pop    edi
c001a3c1:	5d                   	pop    ebp
c001a3c2:	c3                   	ret    
c001a3c3:	90                   	nop

c001a3c4 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a3c4:	55                   	push   ebp
c001a3c5:	57                   	push   edi
c001a3c6:	56                   	push   esi
c001a3c7:	53                   	push   ebx
c001a3c8:	83 ec 0c             	sub    esp,0xc
c001a3cb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a3cf:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a3d4:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a3d9:	6a 00                	push   0x0
c001a3db:	56                   	push   esi
c001a3dc:	57                   	push   edi
c001a3dd:	55                   	push   ebp
c001a3de:	e8 a7 f7 ff ff       	call   c0019b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a3e3:	6a 00                	push   0x0
c001a3e5:	56                   	push   esi
c001a3e6:	57                   	push   edi
c001a3e7:	55                   	push   ebp
c001a3e8:	e8 63 fe ff ff       	call   c001a250 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a3ed:	83 c4 20             	add    esp,0x20
c001a3f0:	6a 00                	push   0x0
c001a3f2:	56                   	push   esi
c001a3f3:	57                   	push   edi
c001a3f4:	55                   	push   ebp
c001a3f5:	e8 b4 f7 ff ff       	call   c0019bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	84 c0                	test   al,al
c001a3ff:	79 27                	jns    c001a428 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a401:	bb 01 00 00 00       	mov    ebx,0x1
c001a406:	53                   	push   ebx
c001a407:	56                   	push   esi
c001a408:	57                   	push   edi
c001a409:	55                   	push   ebp
c001a40a:	e8 7b f7 ff ff       	call   c0019b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a40f:	83 c4 10             	add    esp,0x10
c001a412:	66 40                	inc    ax
c001a414:	74 0c                	je     c001a422 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a416:	53                   	push   ebx
c001a417:	56                   	push   esi
c001a418:	57                   	push   edi
c001a419:	55                   	push   ebp
c001a41a:	e8 31 fe ff ff       	call   c001a250 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a41f:	83 c4 10             	add    esp,0x10
c001a422:	43                   	inc    ebx
c001a423:	83 fb 08             	cmp    ebx,0x8
c001a426:	75 de                	jne    c001a406 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a428:	83 c4 0c             	add    esp,0xc
c001a42b:	5b                   	pop    ebx
c001a42c:	5e                   	pop    esi
c001a42d:	5f                   	pop    edi
c001a42e:	5d                   	pop    ebp
c001a42f:	c3                   	ret    

c001a430 <PCI::detect()>:
c001a430:	56                   	push   esi
c001a431:	53                   	push   ebx
c001a432:	53                   	push   ebx
c001a433:	31 db                	xor    ebx,ebx
c001a435:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a439:	6a 00                	push   0x0
c001a43b:	6a 00                	push   0x0
c001a43d:	6a 00                	push   0x0
c001a43f:	56                   	push   esi
c001a440:	e8 69 f7 ff ff       	call   c0019bae <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a445:	83 c4 10             	add    esp,0x10
c001a448:	a8 80                	test   al,0x80
c001a44a:	75 21                	jne    c001a46d <PCI::detect()+0x3d>
c001a44c:	51                   	push   ecx
c001a44d:	51                   	push   ecx
c001a44e:	6a 00                	push   0x0
c001a450:	56                   	push   esi
c001a451:	e8 62 fc ff ff       	call   c001a0b8 <PCI::checkBus(unsigned char)>
c001a456:	83 c4 10             	add    esp,0x10
c001a459:	eb 24                	jmp    c001a47f <PCI::detect()+0x4f>
c001a45b:	52                   	push   edx
c001a45c:	52                   	push   edx
c001a45d:	53                   	push   ebx
c001a45e:	43                   	inc    ebx
c001a45f:	56                   	push   esi
c001a460:	e8 53 fc ff ff       	call   c001a0b8 <PCI::checkBus(unsigned char)>
c001a465:	83 c4 10             	add    esp,0x10
c001a468:	83 fb 08             	cmp    ebx,0x8
c001a46b:	74 12                	je     c001a47f <PCI::detect()+0x4f>
c001a46d:	53                   	push   ebx
c001a46e:	6a 00                	push   0x0
c001a470:	6a 00                	push   0x0
c001a472:	56                   	push   esi
c001a473:	e8 12 f7 ff ff       	call   c0019b8a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a478:	83 c4 10             	add    esp,0x10
c001a47b:	66 40                	inc    ax
c001a47d:	74 dc                	je     c001a45b <PCI::detect()+0x2b>
c001a47f:	58                   	pop    eax
c001a480:	5b                   	pop    ebx
c001a481:	5e                   	pop    esi
c001a482:	c3                   	ret    
c001a483:	90                   	nop

c001a484 <IDE::close(int, int, void*)>:
c001a484:	83 c8 ff             	or     eax,0xffffffff
c001a487:	c3                   	ret    

c001a488 <IDE::IDE()>:
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a48f:	83 ec 08             	sub    esp,0x8
c001a492:	68 28 12 02 c0       	push   0xc0021228
c001a497:	50                   	push   eax
c001a498:	e8 f3 18 ff ff       	call   c000bd90 <HardDiskController::HardDiskController(char const*)>
c001a49d:	83 c4 10             	add    esp,0x10
c001a4a0:	ba b8 12 02 c0       	mov    edx,0xc00212b8
c001a4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4a9:	89 10                	mov    DWORD PTR [eax],edx
c001a4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a4b6:	90                   	nop
c001a4b7:	83 c4 0c             	add    esp,0xc
c001a4ba:	c3                   	ret    
c001a4bb:	90                   	nop

c001a4bc <IDE::prepareInterrupt(unsigned char)>:
c001a4bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a4c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a4c5:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a4cd:	c3                   	ret    

c001a4ce <selectDrive(unsigned char, unsigned char)>:
c001a4ce:	c3                   	ret    
c001a4cf:	90                   	nop

c001a4d0 <IDE::getBase(unsigned char)>:
c001a4d0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a4d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4d9:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a4e1:	c3                   	ret    

c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a4e2:	55                   	push   ebp
c001a4e3:	57                   	push   edi
c001a4e4:	56                   	push   esi
c001a4e5:	53                   	push   ebx
c001a4e6:	83 ec 1c             	sub    esp,0x1c
c001a4e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a4ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a4f1:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a4f4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a4fc:	80 f9 03             	cmp    cl,0x3
c001a4ff:	77 51                	ja     c001a552 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a501:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a505:	0f b6 f2             	movzx  esi,dl
c001a508:	0f b6 db             	movzx  ebx,bl
c001a50b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a50e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a512:	83 ca 80             	or     edx,0xffffff80
c001a515:	0f b6 d2             	movzx  edx,dl
c001a518:	52                   	push   edx
c001a519:	6a 0c                	push   0xc
c001a51b:	56                   	push   esi
c001a51c:	57                   	push   edi
c001a51d:	e8 c0 ff ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a522:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a527:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a52b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a52f:	ee                   	out    dx,al
c001a530:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a535:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a539:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a53d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a541:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a549:	83 c4 2c             	add    esp,0x2c
c001a54c:	5b                   	pop    ebx
c001a54d:	5e                   	pop    esi
c001a54e:	5f                   	pop    edi
c001a54f:	5d                   	pop    ebp
c001a550:	eb 90                	jmp    c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a552:	80 fb 07             	cmp    bl,0x7
c001a555:	77 12                	ja     c001a569 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a557:	0f b6 d2             	movzx  edx,dl
c001a55a:	0f b6 db             	movzx  ebx,bl
c001a55d:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a565:	89 da                	mov    edx,ebx
c001a567:	eb 2f                	jmp    c001a598 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a569:	80 fb 0d             	cmp    bl,0xd
c001a56c:	77 13                	ja     c001a581 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a56e:	0f b6 d2             	movzx  edx,dl
c001a571:	0f b6 db             	movzx  ebx,bl
c001a574:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a57b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a57f:	eb 17                	jmp    c001a598 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a581:	80 fb 15             	cmp    bl,0x15
c001a584:	77 13                	ja     c001a599 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a586:	0f b6 d2             	movzx  edx,dl
c001a589:	0f b6 db             	movzx  ebx,bl
c001a58c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a594:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a598:	ee                   	out    dx,al
c001a599:	83 c4 1c             	add    esp,0x1c
c001a59c:	5b                   	pop    ebx
c001a59d:	5e                   	pop    esi
c001a59e:	5f                   	pop    edi
c001a59f:	5d                   	pop    ebp
c001a5a0:	c3                   	ret    
c001a5a1:	90                   	nop

c001a5a2 <IDE::read(unsigned char, unsigned char)>:
c001a5a2:	55                   	push   ebp
c001a5a3:	57                   	push   edi
c001a5a4:	56                   	push   esi
c001a5a5:	53                   	push   ebx
c001a5a6:	83 ec 1c             	sub    esp,0x1c
c001a5a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a5ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a5b1:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a5b4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a5b8:	3c 03                	cmp    al,0x3
c001a5ba:	77 43                	ja     c001a5ff <IDE::read(unsigned char, unsigned char)+0x5d>
c001a5bc:	0f b6 f2             	movzx  esi,dl
c001a5bf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a5c2:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a5c6:	83 c8 80             	or     eax,0xffffff80
c001a5c9:	0f b6 c0             	movzx  eax,al
c001a5cc:	50                   	push   eax
c001a5cd:	6a 0c                	push   0xc
c001a5cf:	56                   	push   esi
c001a5d0:	57                   	push   edi
c001a5d1:	e8 0c ff ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5d6:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a5db:	0f b6 c3             	movzx  eax,bl
c001a5de:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a5e2:	ec                   	in     al,dx
c001a5e3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a5e7:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a5ec:	52                   	push   edx
c001a5ed:	6a 0c                	push   0xc
c001a5ef:	56                   	push   esi
c001a5f0:	57                   	push   edi
c001a5f1:	e8 ec fe ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5f6:	83 c4 20             	add    esp,0x20
c001a5f9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a5fd:	eb 49                	jmp    c001a648 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a5ff:	80 fb 07             	cmp    bl,0x7
c001a602:	77 12                	ja     c001a616 <IDE::read(unsigned char, unsigned char)+0x74>
c001a604:	0f b6 d2             	movzx  edx,dl
c001a607:	0f b6 c3             	movzx  eax,bl
c001a60a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a612:	89 c2                	mov    edx,eax
c001a614:	eb 31                	jmp    c001a647 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a616:	80 fb 0d             	cmp    bl,0xd
c001a619:	77 13                	ja     c001a62e <IDE::read(unsigned char, unsigned char)+0x8c>
c001a61b:	0f b6 d2             	movzx  edx,dl
c001a61e:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a625:	0f b6 d3             	movzx  edx,bl
c001a628:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a62c:	eb 19                	jmp    c001a647 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a62e:	31 c0                	xor    eax,eax
c001a630:	80 fb 15             	cmp    bl,0x15
c001a633:	77 13                	ja     c001a648 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a635:	0f b6 d2             	movzx  edx,dl
c001a638:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a640:	0f b6 d3             	movzx  edx,bl
c001a643:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a647:	ec                   	in     al,dx
c001a648:	83 c4 1c             	add    esp,0x1c
c001a64b:	5b                   	pop    ebx
c001a64c:	5e                   	pop    esi
c001a64d:	5f                   	pop    edi
c001a64e:	5d                   	pop    ebp
c001a64f:	c3                   	ret    

c001a650 <IDE::waitInterrupt(unsigned char)>:
c001a650:	57                   	push   edi
c001a651:	56                   	push   esi
c001a652:	31 f6                	xor    esi,esi
c001a654:	53                   	push   ebx
c001a655:	83 ec 10             	sub    esp,0x10
c001a658:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a65c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a660:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a664:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a669:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a670:	84 db                	test   bl,bl
c001a672:	75 33                	jne    c001a6a7 <IDE::waitInterrupt(unsigned char)+0x57>
c001a674:	52                   	push   edx
c001a675:	6a 0c                	push   0xc
c001a677:	50                   	push   eax
c001a678:	57                   	push   edi
c001a679:	e8 24 ff ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001a67e:	83 c4 10             	add    esp,0x10
c001a681:	a8 01                	test   al,0x1
c001a683:	75 2a                	jne    c001a6af <IDE::waitInterrupt(unsigned char)+0x5f>
c001a685:	f7 c6 04 00 00 00    	test   esi,0x4
c001a68b:	75 12                	jne    c001a69f <IDE::waitInterrupt(unsigned char)+0x4f>
c001a68d:	83 fe 32             	cmp    esi,0x32
c001a690:	7e 0d                	jle    c001a69f <IDE::waitInterrupt(unsigned char)+0x4f>
c001a692:	83 ec 0c             	sub    esp,0xc
c001a695:	6a 64                	push   0x64
c001a697:	e8 64 a7 ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001a69c:	83 c4 10             	add    esp,0x10
c001a69f:	83 fe 3c             	cmp    esi,0x3c
c001a6a2:	74 0b                	je     c001a6af <IDE::waitInterrupt(unsigned char)+0x5f>
c001a6a4:	46                   	inc    esi
c001a6a5:	eb bd                	jmp    c001a664 <IDE::waitInterrupt(unsigned char)+0x14>
c001a6a7:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a6af:	83 c4 10             	add    esp,0x10
c001a6b2:	88 d8                	mov    al,bl
c001a6b4:	5b                   	pop    ebx
c001a6b5:	5e                   	pop    esi
c001a6b6:	5f                   	pop    edi
c001a6b7:	c3                   	ret    

c001a6b8 <ideChannel0IRQHandler(regs*, void*)>:
c001a6b8:	83 ec 10             	sub    esp,0x10
c001a6bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6bf:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a6c6:	6a 07                	push   0x7
c001a6c8:	6a 00                	push   0x0
c001a6ca:	50                   	push   eax
c001a6cb:	e8 d2 fe ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001a6d0:	83 c4 1c             	add    esp,0x1c
c001a6d3:	c3                   	ret    

c001a6d4 <ideChannel1IRQHandler(regs*, void*)>:
c001a6d4:	83 ec 10             	sub    esp,0x10
c001a6d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a6db:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a6e2:	6a 07                	push   0x7
c001a6e4:	6a 01                	push   0x1
c001a6e6:	50                   	push   eax
c001a6e7:	e8 b6 fe ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001a6ec:	83 c4 1c             	add    esp,0x1c
c001a6ef:	c3                   	ret    

c001a6f0 <IDE::enableIRQs(unsigned char, bool)>:
c001a6f0:	57                   	push   edi
c001a6f1:	56                   	push   esi
c001a6f2:	be 04 00 00 00       	mov    esi,0x4
c001a6f7:	53                   	push   ebx
c001a6f8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a701:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a706:	0f 94 c0             	sete   al
c001a709:	01 c0                	add    eax,eax
c001a70b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a712:	0f b6 c0             	movzx  eax,al
c001a715:	50                   	push   eax
c001a716:	6a 0c                	push   0xc
c001a718:	57                   	push   edi
c001a719:	53                   	push   ebx
c001a71a:	e8 c3 fd ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a71f:	83 c4 10             	add    esp,0x10
c001a722:	50                   	push   eax
c001a723:	6a 0c                	push   0xc
c001a725:	57                   	push   edi
c001a726:	53                   	push   ebx
c001a727:	e8 76 fe ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001a72c:	83 c4 10             	add    esp,0x10
c001a72f:	4e                   	dec    esi
c001a730:	75 f0                	jne    c001a722 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a732:	5b                   	pop    ebx
c001a733:	5e                   	pop    esi
c001a734:	5f                   	pop    edi
c001a735:	c3                   	ret    

c001a736 <IDE::open(int, int, void*)>:
c001a736:	55                   	push   ebp
c001a737:	57                   	push   edi
c001a738:	56                   	push   esi
c001a739:	53                   	push   ebx
c001a73a:	83 ec 1c             	sub    esp,0x1c
c001a73d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a741:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a74a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a753:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a75a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a761:	0f 85 b0 02 00 00    	jne    c001aa17 <IDE::open(int, int, void*)+0x2e1>
c001a767:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a76d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a771:	83 e0 7f             	and    eax,0x7f
c001a774:	3c 05                	cmp    al,0x5
c001a776:	74 04                	je     c001a77c <IDE::open(int, int, void*)+0x46>
c001a778:	3c 0f                	cmp    al,0xf
c001a77a:	75 32                	jne    c001a7ae <IDE::open(int, int, void*)+0x78>
c001a77c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a782:	83 e0 fc             	and    eax,0xfffffffc
c001a785:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a78c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a792:	83 e0 fc             	and    eax,0xfffffffc
c001a795:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a79c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a7a2:	83 e0 fc             	and    eax,0xfffffffc
c001a7a5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a7ac:	eb 14                	jmp    c001a7c2 <IDE::open(int, int, void*)+0x8c>
c001a7ae:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a7b8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a7c2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a7c9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a7d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7d4:	89 c6                	mov    esi,eax
c001a7d6:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a7db:	c1 e6 10             	shl    esi,0x10
c001a7de:	89 e8                	mov    eax,ebp
c001a7e0:	89 fa                	mov    edx,edi
c001a7e2:	c1 e0 0b             	shl    eax,0xb
c001a7e5:	09 f0                	or     eax,esi
c001a7e7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a7ee:	c1 e6 08             	shl    esi,0x8
c001a7f1:	09 c6                	or     esi,eax
c001a7f3:	89 f0                	mov    eax,esi
c001a7f5:	0d 08 00 00 80       	or     eax,0x80000008
c001a7fa:	ef                   	out    dx,eax
c001a7fb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a800:	89 ca                	mov    edx,ecx
c001a802:	ed                   	in     eax,dx
c001a803:	c1 e8 10             	shr    eax,0x10
c001a806:	3d ff ff 00 00       	cmp    eax,0xffff
c001a80b:	0f 84 f5 00 00 00    	je     c001a906 <IDE::open(int, int, void*)+0x1d0>
c001a811:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a817:	89 fa                	mov    edx,edi
c001a819:	89 f0                	mov    eax,esi
c001a81b:	ef                   	out    dx,eax
c001a81c:	b0 fe                	mov    al,0xfe
c001a81e:	89 ca                	mov    edx,ecx
c001a820:	ee                   	out    dx,al
c001a821:	89 f0                	mov    eax,esi
c001a823:	89 fa                	mov    edx,edi
c001a825:	ef                   	out    dx,eax
c001a826:	89 ca                	mov    edx,ecx
c001a828:	ed                   	in     eax,dx
c001a829:	3c fe                	cmp    al,0xfe
c001a82b:	0f 85 a9 00 00 00    	jne    c001a8da <IDE::open(int, int, void*)+0x1a4>
c001a831:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a837:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a83e:	74 33                	je     c001a873 <IDE::open(int, int, void*)+0x13d>
c001a840:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a846:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a84a:	40                   	inc    eax
c001a84b:	83 ec 0c             	sub    esp,0xc
c001a84e:	0f b6 c0             	movzx  eax,al
c001a851:	50                   	push   eax
c001a852:	55                   	push   ebp
c001a853:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a857:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a85d:	51                   	push   ecx
c001a85e:	e8 85 40 ff ff       	call   c000e8e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a863:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a868:	83 c4 1c             	add    esp,0x1c
c001a86b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a871:	eb 0a                	jmp    c001a87d <IDE::open(int, int, void*)+0x147>
c001a873:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a87d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a884:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a88b:	c1 e1 10             	shl    ecx,0x10
c001a88e:	c1 e0 08             	shl    eax,0x8
c001a891:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a896:	09 c1                	or     ecx,eax
c001a898:	89 fa                	mov    edx,edi
c001a89a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a8a1:	c1 e0 0b             	shl    eax,0xb
c001a8a4:	09 c1                	or     ecx,eax
c001a8a6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a8ac:	89 c8                	mov    eax,ecx
c001a8ae:	ef                   	out    dx,eax
c001a8af:	be fc 0c 00 00       	mov    esi,0xcfc
c001a8b4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a8ba:	89 f2                	mov    edx,esi
c001a8bc:	ee                   	out    dx,al
c001a8bd:	89 c8                	mov    eax,ecx
c001a8bf:	89 fa                	mov    edx,edi
c001a8c1:	ef                   	out    dx,eax
c001a8c2:	89 f2                	mov    edx,esi
c001a8c4:	ed                   	in     eax,dx
c001a8c5:	0f b6 c0             	movzx  eax,al
c001a8c8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a8ce:	74 46                	je     c001a916 <IDE::open(int, int, void*)+0x1e0>
c001a8d0:	83 ec 0c             	sub    esp,0xc
c001a8d3:	68 40 12 02 c0       	push   0xc0021240
c001a8d8:	eb 34                	jmp    c001a90e <IDE::open(int, int, void*)+0x1d8>
c001a8da:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a8e3:	75 17                	jne    c001a8fc <IDE::open(int, int, void*)+0x1c6>
c001a8e5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a8ea:	74 07                	je     c001a8f3 <IDE::open(int, int, void*)+0x1bd>
c001a8ec:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a8f1:	75 09                	jne    c001a8fc <IDE::open(int, int, void*)+0x1c6>
c001a8f3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a8fa:	eb 1a                	jmp    c001a916 <IDE::open(int, int, void*)+0x1e0>
c001a8fc:	83 ec 0c             	sub    esp,0xc
c001a8ff:	68 48 12 02 c0       	push   0xc0021248
c001a904:	eb 08                	jmp    c001a90e <IDE::open(int, int, void*)+0x1d8>
c001a906:	83 ec 0c             	sub    esp,0xc
c001a909:	68 79 12 02 c0       	push   0xc0021279
c001a90e:	e8 bc 5a ff ff       	call   c00103cf <KePanic(char const*)>
c001a913:	83 c4 10             	add    esp,0x10
c001a916:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a91d:	79 1a                	jns    c001a939 <IDE::open(int, int, void*)+0x203>
c001a91f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a925:	83 e0 fc             	and    eax,0xfffffffc
c001a928:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a92f:	83 c0 08             	add    eax,0x8
c001a932:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a939:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a93f:	89 c2                	mov    edx,eax
c001a941:	83 e2 0f             	and    edx,0xf
c001a944:	66 83 fa 08          	cmp    dx,0x8
c001a948:	75 0a                	jne    c001a954 <IDE::open(int, int, void*)+0x21e>
c001a94a:	83 e8 02             	sub    eax,0x2
c001a94d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a954:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a95a:	89 c2                	mov    edx,eax
c001a95c:	83 e2 0f             	and    edx,0xf
c001a95f:	66 83 fa 08          	cmp    dx,0x8
c001a963:	75 0a                	jne    c001a96f <IDE::open(int, int, void*)+0x239>
c001a965:	83 e8 02             	sub    eax,0x2
c001a968:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a96f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a976:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a97d:	89 d0                	mov    eax,edx
c001a97f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a982:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a986:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a98a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a98d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a992:	0f b6 c9             	movzx  ecx,cl
c001a995:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a99c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a99f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a9a3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a9a7:	8d 50 02             	lea    edx,[eax+0x2]
c001a9aa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a9af:	0f b6 d2             	movzx  edx,dl
c001a9b2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a9b8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a9bb:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a9bf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a9c3:	8d 48 03             	lea    ecx,[eax+0x3]
c001a9c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a9cb:	0f b6 c9             	movzx  ecx,cl
c001a9ce:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a9d4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a9d7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a9db:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a9df:	8d 50 04             	lea    edx,[eax+0x4]
c001a9e2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a9e8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a9ed:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a9f4:	66 85 f6             	test   si,si
c001a9f7:	74 5b                	je     c001aa54 <IDE::open(int, int, void*)+0x31e>
c001a9f9:	0f b6 d2             	movzx  edx,dl
c001a9fc:	83 c0 05             	add    eax,0x5
c001a9ff:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aa02:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aa06:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001aa0a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001aa10:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aa15:	eb 3d                	jmp    c001aa54 <IDE::open(int, int, void*)+0x31e>
c001aa17:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001aa1d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001aa24:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aa2b:	66 05 06 02          	add    ax,0x206
c001aa2f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aa36:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001aa3d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aa44:	66 05 06 02          	add    ax,0x206
c001aa48:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aa4f:	e9 e5 fe ff ff       	jmp    c001a939 <IDE::open(int, int, void*)+0x203>
c001aa54:	50                   	push   eax
c001aa55:	50                   	push   eax
c001aa56:	6a 00                	push   0x0
c001aa58:	53                   	push   ebx
c001aa59:	e8 5e fa ff ff       	call   c001a4bc <IDE::prepareInterrupt(unsigned char)>
c001aa5e:	5a                   	pop    edx
c001aa5f:	59                   	pop    ecx
c001aa60:	6a 01                	push   0x1
c001aa62:	53                   	push   ebx
c001aa63:	e8 54 fa ff ff       	call   c001a4bc <IDE::prepareInterrupt(unsigned char)>
c001aa68:	83 c4 0c             	add    esp,0xc
c001aa6b:	6a 00                	push   0x0
c001aa6d:	6a 00                	push   0x0
c001aa6f:	53                   	push   ebx
c001aa70:	e8 7b fc ff ff       	call   c001a6f0 <IDE::enableIRQs(unsigned char, bool)>
c001aa75:	83 c4 0c             	add    esp,0xc
c001aa78:	6a 00                	push   0x0
c001aa7a:	6a 01                	push   0x1
c001aa7c:	53                   	push   ebx
c001aa7d:	e8 6e fc ff ff       	call   c001a6f0 <IDE::enableIRQs(unsigned char, bool)>
c001aa82:	83 c4 10             	add    esp,0x10
c001aa85:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001aa8c:	74 34                	je     c001aac2 <IDE::open(int, int, void*)+0x38c>
c001aa8e:	83 ec 0c             	sub    esp,0xc
c001aa91:	53                   	push   ebx
c001aa92:	6a 01                	push   0x1
c001aa94:	68 b8 a6 01 c0       	push   0xc001a6b8
c001aa99:	6a 0e                	push   0xe
c001aa9b:	53                   	push   ebx
c001aa9c:	e8 57 0f ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aaa1:	83 c4 14             	add    esp,0x14
c001aaa4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001aaaa:	53                   	push   ebx
c001aaab:	6a 01                	push   0x1
c001aaad:	68 d4 a6 01 c0       	push   0xc001a6d4
c001aab2:	6a 0f                	push   0xf
c001aab4:	53                   	push   ebx
c001aab5:	e8 3e 0f ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aaba:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001aac0:	eb 38                	jmp    c001aafa <IDE::open(int, int, void*)+0x3c4>
c001aac2:	83 ec 0c             	sub    esp,0xc
c001aac5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001aacf:	53                   	push   ebx
c001aad0:	6a 00                	push   0x0
c001aad2:	68 b8 a6 01 c0       	push   0xc001a6b8
c001aad7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001aadd:	53                   	push   ebx
c001aade:	e8 15 0f ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aae3:	83 c4 14             	add    esp,0x14
c001aae6:	53                   	push   ebx
c001aae7:	6a 00                	push   0x0
c001aae9:	68 d4 a6 01 c0       	push   0xc001a6d4
c001aaee:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001aaf4:	53                   	push   ebx
c001aaf5:	e8 fe 0e ff ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001aafa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aafc:	83 c4 20             	add    esp,0x20
c001aaff:	83 ec 0c             	sub    esp,0xc
c001ab02:	53                   	push   ebx
c001ab03:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ab06:	83 c4 0c             	add    esp,0xc
c001ab09:	6a 07                	push   0x7
c001ab0b:	6a 00                	push   0x0
c001ab0d:	53                   	push   ebx
c001ab0e:	e8 8f fa ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ab13:	83 c4 0c             	add    esp,0xc
c001ab16:	6a 07                	push   0x7
c001ab18:	6a 01                	push   0x1
c001ab1a:	53                   	push   ebx
c001ab1b:	e8 82 fa ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ab20:	83 c4 0c             	add    esp,0xc
c001ab23:	6a 01                	push   0x1
c001ab25:	6a 00                	push   0x0
c001ab27:	53                   	push   ebx
c001ab28:	e8 c3 fb ff ff       	call   c001a6f0 <IDE::enableIRQs(unsigned char, bool)>
c001ab2d:	83 c4 0c             	add    esp,0xc
c001ab30:	6a 01                	push   0x1
c001ab32:	6a 01                	push   0x1
c001ab34:	53                   	push   ebx
c001ab35:	e8 b6 fb ff ff       	call   c001a6f0 <IDE::enableIRQs(unsigned char, bool)>
c001ab3a:	83 c4 2c             	add    esp,0x2c
c001ab3d:	31 c0                	xor    eax,eax
c001ab3f:	5b                   	pop    ebx
c001ab40:	5e                   	pop    esi
c001ab41:	5f                   	pop    edi
c001ab42:	5d                   	pop    ebp
c001ab43:	c3                   	ret    

c001ab44 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ab44:	55                   	push   ebp
c001ab45:	57                   	push   edi
c001ab46:	56                   	push   esi
c001ab47:	53                   	push   ebx
c001ab48:	83 ec 1c             	sub    esp,0x1c
c001ab4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ab53:	8d 50 f8             	lea    edx,[eax-0x8]
c001ab56:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ab5a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ab5e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ab62:	80 fa 03             	cmp    dl,0x3
c001ab65:	77 5d                	ja     c001abc4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ab67:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ab6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab6f:	0f b6 db             	movzx  ebx,bl
c001ab72:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ab75:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ab79:	83 ca 80             	or     edx,0xffffff80
c001ab7c:	0f b6 d2             	movzx  edx,dl
c001ab7f:	52                   	push   edx
c001ab80:	6a 0c                	push   0xc
c001ab82:	53                   	push   ebx
c001ab83:	56                   	push   esi
c001ab84:	e8 59 f9 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab89:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ab8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab92:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ab96:	0f b6 c0             	movzx  eax,al
c001ab99:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ab9d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ab9f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001aba4:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001aba8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001abac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001abb0:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001abb8:	83 c4 2c             	add    esp,0x2c
c001abbb:	5b                   	pop    ebx
c001abbc:	5e                   	pop    esi
c001abbd:	5f                   	pop    edi
c001abbe:	5d                   	pop    ebp
c001abbf:	e9 1e f9 ff ff       	jmp    c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001abc4:	3c 07                	cmp    al,0x7
c001abc6:	77 10                	ja     c001abd8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001abc8:	0f b6 db             	movzx  ebx,bl
c001abcb:	0f b6 d0             	movzx  edx,al
c001abce:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001abd6:	eb 2d                	jmp    c001ac05 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001abd8:	3c 0d                	cmp    al,0xd
c001abda:	77 13                	ja     c001abef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001abdc:	0f b6 db             	movzx  ebx,bl
c001abdf:	0f b6 c0             	movzx  eax,al
c001abe2:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001abe9:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001abed:	eb 16                	jmp    c001ac05 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001abef:	3c 15                	cmp    al,0x15
c001abf1:	77 14                	ja     c001ac07 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001abf3:	0f b6 db             	movzx  ebx,bl
c001abf6:	0f b6 c0             	movzx  eax,al
c001abf9:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ac01:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ac05:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ac07:	83 c4 1c             	add    esp,0x1c
c001ac0a:	5b                   	pop    ebx
c001ac0b:	5e                   	pop    esi
c001ac0c:	5f                   	pop    edi
c001ac0d:	5d                   	pop    ebp
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <IDE::detect()>:
c001ac10:	55                   	push   ebp
c001ac11:	57                   	push   edi
c001ac12:	56                   	push   esi
c001ac13:	53                   	push   ebx
c001ac14:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ac1a:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ac21:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ac28:	0f 85 97 02 00 00    	jne    c001aec5 <IDE::detect()+0x2b5>
c001ac2e:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ac35:	31 f6                	xor    esi,esi
c001ac37:	31 ed                	xor    ebp,ebp
c001ac39:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ac41:	89 e8                	mov    eax,ebp
c001ac43:	c1 e0 06             	shl    eax,0x6
c001ac46:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ac4e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ac52:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ac56:	c1 e0 04             	shl    eax,0x4
c001ac59:	83 c8 a0             	or     eax,0xffffffa0
c001ac5c:	0f b6 c0             	movzx  eax,al
c001ac5f:	50                   	push   eax
c001ac60:	6a 06                	push   0x6
c001ac62:	56                   	push   esi
c001ac63:	53                   	push   ebx
c001ac64:	e8 79 f8 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac69:	83 c4 0c             	add    esp,0xc
c001ac6c:	6a 0c                	push   0xc
c001ac6e:	56                   	push   esi
c001ac6f:	53                   	push   ebx
c001ac70:	e8 2d f9 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ac75:	83 c4 0c             	add    esp,0xc
c001ac78:	6a 0c                	push   0xc
c001ac7a:	56                   	push   esi
c001ac7b:	53                   	push   ebx
c001ac7c:	e8 21 f9 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ac81:	83 c4 0c             	add    esp,0xc
c001ac84:	6a 0c                	push   0xc
c001ac86:	56                   	push   esi
c001ac87:	53                   	push   ebx
c001ac88:	e8 15 f9 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ac8d:	83 c4 0c             	add    esp,0xc
c001ac90:	6a 0c                	push   0xc
c001ac92:	56                   	push   esi
c001ac93:	53                   	push   ebx
c001ac94:	e8 09 f9 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ac99:	68 ec 00 00 00       	push   0xec
c001ac9e:	6a 07                	push   0x7
c001aca0:	56                   	push   esi
c001aca1:	53                   	push   ebx
c001aca2:	e8 3b f8 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aca7:	83 c4 1c             	add    esp,0x1c
c001acaa:	6a 0c                	push   0xc
c001acac:	56                   	push   esi
c001acad:	53                   	push   ebx
c001acae:	e8 ef f8 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001acb3:	83 c4 0c             	add    esp,0xc
c001acb6:	6a 0c                	push   0xc
c001acb8:	56                   	push   esi
c001acb9:	53                   	push   ebx
c001acba:	e8 e3 f8 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001acbf:	83 c4 0c             	add    esp,0xc
c001acc2:	6a 0c                	push   0xc
c001acc4:	56                   	push   esi
c001acc5:	53                   	push   ebx
c001acc6:	e8 d7 f8 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001accb:	83 c4 0c             	add    esp,0xc
c001acce:	6a 0c                	push   0xc
c001acd0:	56                   	push   esi
c001acd1:	53                   	push   ebx
c001acd2:	e8 cb f8 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001acd7:	83 c4 0c             	add    esp,0xc
c001acda:	6a 0c                	push   0xc
c001acdc:	56                   	push   esi
c001acdd:	53                   	push   ebx
c001acde:	e8 bf f8 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ace3:	83 c4 10             	add    esp,0x10
c001ace6:	84 c0                	test   al,al
c001ace8:	0f 84 5f 01 00 00    	je     c001ae4d <IDE::detect()+0x23d>
c001acee:	31 ff                	xor    edi,edi
c001acf0:	50                   	push   eax
c001acf1:	6a 0c                	push   0xc
c001acf3:	56                   	push   esi
c001acf4:	53                   	push   ebx
c001acf5:	e8 a8 f8 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	a8 01                	test   al,0x1
c001acff:	0f 85 69 01 00 00    	jne    c001ae6e <IDE::detect()+0x25e>
c001ad05:	84 c0                	test   al,al
c001ad07:	78 04                	js     c001ad0d <IDE::detect()+0xfd>
c001ad09:	a8 08                	test   al,0x8
c001ad0b:	75 23                	jne    c001ad30 <IDE::detect()+0x120>
c001ad0d:	47                   	inc    edi
c001ad0e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ad14:	7e da                	jle    c001acf0 <IDE::detect()+0xe0>
c001ad16:	83 ec 0c             	sub    esp,0xc
c001ad19:	6a 32                	push   0x32
c001ad1b:	e8 e0 a0 ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001ad20:	83 c4 10             	add    esp,0x10
c001ad23:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ad29:	75 c5                	jne    c001acf0 <IDE::detect()+0xe0>
c001ad2b:	e9 3e 01 00 00       	jmp    c001ae6e <IDE::detect()+0x25e>
c001ad30:	31 c9                	xor    ecx,ecx
c001ad32:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ad36:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ad3a:	83 ec 0c             	sub    esp,0xc
c001ad3d:	68 80 00 00 00       	push   0x80
c001ad42:	57                   	push   edi
c001ad43:	6a 00                	push   0x0
c001ad45:	56                   	push   esi
c001ad46:	53                   	push   ebx
c001ad47:	e8 f8 fd ff ff       	call   c001ab44 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ad4c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ad51:	89 e8                	mov    eax,ebp
c001ad53:	89 d1                	mov    ecx,edx
c001ad55:	c1 e0 06             	shl    eax,0x6
c001ad58:	01 d8                	add    eax,ebx
c001ad5a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ad61:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ad68:	89 f2                	mov    edx,esi
c001ad6a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ad70:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ad74:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ad7a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad7e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ad85:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ad8d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ad94:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ad9c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ada2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ada9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001adaf:	8d 54 24 58          	lea    edx,[esp+0x58]
c001adb3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001adb7:	83 c4 20             	add    esp,0x20
c001adba:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001adbd:	83 c0 02             	add    eax,0x2
c001adc0:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001adc6:	83 c7 02             	add    edi,0x2
c001adc9:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001adcc:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001add2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001add6:	75 e2                	jne    c001adba <IDE::detect()+0x1aa>
c001add8:	89 e8                	mov    eax,ebp
c001adda:	c1 e0 06             	shl    eax,0x6
c001addd:	01 d8                	add    eax,ebx
c001addf:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ade5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001adec:	66 c1 ea 09          	shr    dx,0x9
c001adf0:	83 e2 01             	and    edx,0x1
c001adf3:	84 c9                	test   cl,cl
c001adf5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001adfb:	75 22                	jne    c001ae1f <IDE::detect()+0x20f>
c001adfd:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ae04:	74 46                	je     c001ae4c <IDE::detect()+0x23c>
c001ae06:	83 ec 0c             	sub    esp,0xc
c001ae09:	68 7c 01 00 00       	push   0x17c
c001ae0e:	e8 5a ca fe ff       	call   c000786d <malloc>
c001ae13:	89 c7                	mov    edi,eax
c001ae15:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae18:	e8 11 05 00 00       	call   c001b32e <ATA::ATA()>
c001ae1d:	eb 17                	jmp    c001ae36 <IDE::detect()+0x226>
c001ae1f:	83 ec 0c             	sub    esp,0xc
c001ae22:	68 84 01 00 00       	push   0x184
c001ae27:	e8 41 ca fe ff       	call   c000786d <malloc>
c001ae2c:	89 c7                	mov    edi,eax
c001ae2e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae31:	e8 1e 0e 00 00       	call   c001bc54 <ATAPI::ATAPI()>
c001ae36:	5a                   	pop    edx
c001ae37:	59                   	pop    ecx
c001ae38:	57                   	push   edi
c001ae39:	53                   	push   ebx
c001ae3a:	e8 0d 0c ff ff       	call   c000ba4c <Device::addChild(Device*)>
c001ae3f:	8b 07                	mov    eax,DWORD PTR [edi]
c001ae41:	53                   	push   ebx
c001ae42:	55                   	push   ebp
c001ae43:	6a 00                	push   0x0
c001ae45:	57                   	push   edi
c001ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae49:	83 c4 20             	add    esp,0x20
c001ae4c:	45                   	inc    ebp
c001ae4d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ae52:	74 0d                	je     c001ae61 <IDE::detect()+0x251>
c001ae54:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ae5c:	e9 e0 fd ff ff       	jmp    c001ac41 <IDE::detect()+0x31>
c001ae61:	4e                   	dec    esi
c001ae62:	74 61                	je     c001aec5 <IDE::detect()+0x2b5>
c001ae64:	be 01 00 00 00       	mov    esi,0x1
c001ae69:	e9 cb fd ff ff       	jmp    c001ac39 <IDE::detect()+0x29>
c001ae6e:	50                   	push   eax
c001ae6f:	6a 04                	push   0x4
c001ae71:	56                   	push   esi
c001ae72:	53                   	push   ebx
c001ae73:	e8 2a f7 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ae78:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae7c:	83 c4 0c             	add    esp,0xc
c001ae7f:	6a 05                	push   0x5
c001ae81:	56                   	push   esi
c001ae82:	53                   	push   ebx
c001ae83:	e8 1a f7 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ae8f:	80 fa 14             	cmp    dl,0x14
c001ae92:	75 04                	jne    c001ae98 <IDE::detect()+0x288>
c001ae94:	3c eb                	cmp    al,0xeb
c001ae96:	eb 07                	jmp    c001ae9f <IDE::detect()+0x28f>
c001ae98:	3c 96                	cmp    al,0x96
c001ae9a:	75 b1                	jne    c001ae4d <IDE::detect()+0x23d>
c001ae9c:	80 fa 69             	cmp    dl,0x69
c001ae9f:	75 ac                	jne    c001ae4d <IDE::detect()+0x23d>
c001aea1:	68 a1 00 00 00       	push   0xa1
c001aea6:	6a 07                	push   0x7
c001aea8:	56                   	push   esi
c001aea9:	53                   	push   ebx
c001aeaa:	e8 33 f6 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001aeaf:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001aeb6:	e8 45 9f ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001aebb:	83 c4 10             	add    esp,0x10
c001aebe:	b1 01                	mov    cl,0x1
c001aec0:	e9 6d fe ff ff       	jmp    c001ad32 <IDE::detect()+0x122>
c001aec5:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aecb:	5b                   	pop    ebx
c001aecc:	5e                   	pop    esi
c001aecd:	5f                   	pop    edi
c001aece:	5d                   	pop    ebp
c001aecf:	c3                   	ret    

c001aed0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001aed0:	55                   	push   ebp
c001aed1:	57                   	push   edi
c001aed2:	56                   	push   esi
c001aed3:	53                   	push   ebx
c001aed4:	83 ec 1c             	sub    esp,0x1c
c001aed7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001aedb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001aedf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aee3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001aee7:	88 c3                	mov    bl,al
c001aee9:	84 c0                	test   al,al
c001aeeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aeef:	0f 84 81 00 00 00    	je     c001af76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aef5:	83 ec 0c             	sub    esp,0xc
c001aef8:	68 a3 12 02 c0       	push   0xc00212a3
c001aefd:	e8 0c f7 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001af02:	83 c4 10             	add    esp,0x10
c001af05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af09:	3c 01                	cmp    al,0x1
c001af0b:	74 63                	je     c001af70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001af0d:	3c 02                	cmp    al,0x2
c001af0f:	75 53                	jne    c001af64 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001af11:	01 f6                	add    esi,esi
c001af13:	09 ee                	or     esi,ebp
c001af15:	50                   	push   eax
c001af16:	89 f0                	mov    eax,esi
c001af18:	6a 01                	push   0x1
c001af1a:	0f b6 f0             	movzx  esi,al
c001af1d:	c1 e6 06             	shl    esi,0x6
c001af20:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001af28:	50                   	push   eax
c001af29:	57                   	push   edi
c001af2a:	e8 73 f6 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001af2f:	83 c4 10             	add    esp,0x10
c001af32:	a8 01                	test   al,0x1
c001af34:	74 02                	je     c001af38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001af36:	b3 07                	mov    bl,0x7
c001af38:	a8 02                	test   al,0x2
c001af3a:	74 02                	je     c001af3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001af3c:	b3 03                	mov    bl,0x3
c001af3e:	a8 04                	test   al,0x4
c001af40:	74 02                	je     c001af44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001af42:	b3 14                	mov    bl,0x14
c001af44:	a8 08                	test   al,0x8
c001af46:	74 02                	je     c001af4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001af48:	b3 03                	mov    bl,0x3
c001af4a:	a8 10                	test   al,0x10
c001af4c:	74 02                	je     c001af50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001af4e:	b3 15                	mov    bl,0x15
c001af50:	a8 20                	test   al,0x20
c001af52:	74 02                	je     c001af56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001af54:	b3 03                	mov    bl,0x3
c001af56:	a8 40                	test   al,0x40
c001af58:	74 02                	je     c001af5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001af5a:	b3 16                	mov    bl,0x16
c001af5c:	84 c0                	test   al,al
c001af5e:	79 16                	jns    c001af76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af60:	b3 0d                	mov    bl,0xd
c001af62:	eb 12                	jmp    c001af76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af64:	3c 03                	cmp    al,0x3
c001af66:	74 0c                	je     c001af74 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001af68:	3c 04                	cmp    al,0x4
c001af6a:	75 0a                	jne    c001af76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af6c:	b3 08                	mov    bl,0x8
c001af6e:	eb 06                	jmp    c001af76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af70:	b3 13                	mov    bl,0x13
c001af72:	eb 02                	jmp    c001af76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af74:	b3 17                	mov    bl,0x17
c001af76:	83 c4 1c             	add    esp,0x1c
c001af79:	88 d8                	mov    al,bl
c001af7b:	5b                   	pop    ebx
c001af7c:	5e                   	pop    esi
c001af7d:	5f                   	pop    edi
c001af7e:	5d                   	pop    ebp
c001af7f:	c3                   	ret    

c001af80 <IDE::polling(unsigned char, unsigned int)>:
c001af80:	55                   	push   ebp
c001af81:	bd 04 00 00 00       	mov    ebp,0x4
c001af86:	57                   	push   edi
c001af87:	56                   	push   esi
c001af88:	53                   	push   ebx
c001af89:	83 ec 0c             	sub    esp,0xc
c001af8c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001af90:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001af94:	0f b6 f3             	movzx  esi,bl
c001af97:	52                   	push   edx
c001af98:	6a 0c                	push   0xc
c001af9a:	56                   	push   esi
c001af9b:	57                   	push   edi
c001af9c:	e8 01 f6 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001afa1:	83 c4 10             	add    esp,0x10
c001afa4:	4d                   	dec    ebp
c001afa5:	75 ed                	jne    c001af94 <IDE::polling(unsigned char, unsigned int)+0x14>
c001afa7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001afac:	50                   	push   eax
c001afad:	6a 0c                	push   0xc
c001afaf:	56                   	push   esi
c001afb0:	57                   	push   edi
c001afb1:	e8 ec f5 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	a8 01                	test   al,0x1
c001afbb:	75 17                	jne    c001afd4 <IDE::polling(unsigned char, unsigned int)+0x54>
c001afbd:	a8 20                	test   al,0x20
c001afbf:	75 0f                	jne    c001afd0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001afc1:	4b                   	dec    ebx
c001afc2:	74 10                	je     c001afd4 <IDE::polling(unsigned char, unsigned int)+0x54>
c001afc4:	84 c0                	test   al,al
c001afc6:	78 e4                	js     c001afac <IDE::polling(unsigned char, unsigned int)+0x2c>
c001afc8:	a8 08                	test   al,0x8
c001afca:	74 e0                	je     c001afac <IDE::polling(unsigned char, unsigned int)+0x2c>
c001afcc:	31 c0                	xor    eax,eax
c001afce:	eb 06                	jmp    c001afd6 <IDE::polling(unsigned char, unsigned int)+0x56>
c001afd0:	b0 01                	mov    al,0x1
c001afd2:	eb 02                	jmp    c001afd6 <IDE::polling(unsigned char, unsigned int)+0x56>
c001afd4:	b0 02                	mov    al,0x2
c001afd6:	83 c4 0c             	add    esp,0xc
c001afd9:	5b                   	pop    ebx
c001afda:	5e                   	pop    esi
c001afdb:	5f                   	pop    edi
c001afdc:	5d                   	pop    ebp
c001afdd:	c3                   	ret    

c001afde <SATABus::close(int, int, void*)>:
c001afde:	31 c0                	xor    eax,eax
c001afe0:	c3                   	ret    
c001afe1:	90                   	nop

c001afe2 <SATABus::detect()>:
c001afe2:	c3                   	ret    
c001afe3:	90                   	nop

c001afe4 <SATABus::SATABus()>:
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afeb:	83 ec 08             	sub    esp,0x8
c001afee:	68 dc 12 02 c0       	push   0xc00212dc
c001aff3:	50                   	push   eax
c001aff4:	e8 97 0d ff ff       	call   c000bd90 <HardDiskController::HardDiskController(char const*)>
c001aff9:	83 c4 10             	add    esp,0x10
c001affc:	ba 08 13 02 c0       	mov    edx,0xc0021308
c001b001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b005:	89 10                	mov    DWORD PTR [eax],edx
c001b007:	83 ec 0c             	sub    esp,0xc
c001b00a:	6a 50                	push   0x50
c001b00c:	e8 f6 cb fe ff       	call   c0007c07 <Phys::allocateContiguousPages(int)>
c001b011:	83 c4 10             	add    esp,0x10
c001b014:	89 c2                	mov    edx,eax
c001b016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b01a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b020:	83 ec 0c             	sub    esp,0xc
c001b023:	6a 50                	push   0x50
c001b025:	e8 27 e3 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001b02a:	83 c4 10             	add    esp,0x10
c001b02d:	89 c2                	mov    edx,eax
c001b02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b033:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b039:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001b03e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b042:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b048:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b04c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b052:	83 ec 0c             	sub    esp,0xc
c001b055:	6a 03                	push   0x3
c001b057:	6a 50                	push   0x50
c001b059:	51                   	push   ecx
c001b05a:	52                   	push   edx
c001b05b:	50                   	push   eax
c001b05c:	e8 ad ec fe ff       	call   c0009d0e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b061:	83 c4 20             	add    esp,0x20
c001b064:	90                   	nop
c001b065:	83 c4 0c             	add    esp,0xc
c001b068:	c3                   	ret    
c001b069:	90                   	nop

c001b06a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b06a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b06e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b071:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b074:	09 c2                	or     edx,eax
c001b076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b07a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b080:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b082:	31 c0                	xor    eax,eax
c001b084:	c1 e9 08             	shr    ecx,0x8
c001b087:	83 e1 0f             	and    ecx,0xf
c001b08a:	39 c8                	cmp    eax,ecx
c001b08c:	74 0a                	je     c001b098 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b08e:	f6 c2 01             	test   dl,0x1
c001b091:	74 08                	je     c001b09b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b093:	d1 ea                	shr    edx,1
c001b095:	40                   	inc    eax
c001b096:	eb f2                	jmp    c001b08a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b098:	83 c8 ff             	or     eax,0xffffffff
c001b09b:	c3                   	ret    

c001b09c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b09c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0a0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b0a3:	89 c2                	mov    edx,eax
c001b0a5:	c1 ea 08             	shr    edx,0x8
c001b0a8:	83 e2 0f             	and    edx,0xf
c001b0ab:	fe ca                	dec    dl
c001b0ad:	75 31                	jne    c001b0e0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b0af:	83 e0 0f             	and    eax,0xf
c001b0b2:	3c 03                	cmp    al,0x3
c001b0b4:	75 2a                	jne    c001b0e0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b0b6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b0b9:	b8 02 00 00 00       	mov    eax,0x2
c001b0be:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b0c4:	74 1c                	je     c001b0e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b0c6:	b8 04 00 00 00       	mov    eax,0x4
c001b0cb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b0d1:	74 0f                	je     c001b0e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b0d3:	31 c0                	xor    eax,eax
c001b0d5:	83 fa 03             	cmp    edx,0x3
c001b0d8:	0f 94 c0             	sete   al
c001b0db:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b0df:	c3                   	ret    
c001b0e0:	31 c0                	xor    eax,eax
c001b0e2:	c3                   	ret    
c001b0e3:	90                   	nop

c001b0e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b0e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0e8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0eb:	0f ba e2 0f          	bt     edx,0xf
c001b0ef:	72 f7                	jb     c001b0e8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b0f1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0f4:	83 ca 10             	or     edx,0x10
c001b0f7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b0fa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b0fd:	83 ca 01             	or     edx,0x1
c001b100:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b103:	c3                   	ret    

c001b104 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b108:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b10b:	83 e2 fe             	and    edx,0xfffffffe
c001b10e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b111:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b114:	83 e2 ef             	and    edx,0xffffffef
c001b117:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b11a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b11d:	0f ba e2 0e          	bt     edx,0xe
c001b121:	72 f7                	jb     c001b11a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b123:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b126:	0f ba e2 0f          	bt     edx,0xf
c001b12a:	72 ee                	jb     c001b11a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b12c:	c3                   	ret    
c001b12d:	90                   	nop

c001b12e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b12e:	55                   	push   ebp
c001b12f:	57                   	push   edi
c001b130:	56                   	push   esi
c001b131:	53                   	push   ebx
c001b132:	83 ec 1c             	sub    esp,0x1c
c001b135:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b139:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b13d:	53                   	push   ebx
c001b13e:	56                   	push   esi
c001b13f:	e8 c0 ff ff ff       	call   c001b104 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b144:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b148:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b14e:	83 ec 0c             	sub    esp,0xc
c001b151:	c1 e5 0a             	shl    ebp,0xa
c001b154:	01 e8                	add    eax,ebp
c001b156:	89 03                	mov    DWORD PTR [ebx],eax
c001b158:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b15a:	68 00 04 00 00       	push   0x400
c001b15f:	6a 00                	push   0x0
c001b161:	50                   	push   eax
c001b162:	e8 59 53 fe ff       	call   c00004c0 <memset>
c001b167:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b16d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b171:	01 e8                	add    eax,ebp
c001b173:	83 c4 1c             	add    esp,0x1c
c001b176:	89 03                	mov    DWORD PTR [ebx],eax
c001b178:	c1 e2 08             	shl    edx,0x8
c001b17b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b182:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b188:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b18e:	01 f8                	add    eax,edi
c001b190:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b193:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b196:	68 00 01 00 00       	push   0x100
c001b19b:	6a 00                	push   0x0
c001b19d:	50                   	push   eax
c001b19e:	e8 1d 53 fe ff       	call   c00004c0 <memset>
c001b1a3:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b1a9:	01 fa                	add    edx,edi
c001b1ab:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b1af:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b1b2:	c1 e7 0d             	shl    edi,0xd
c001b1b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b1bc:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b1c2:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b1c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b1cc:	31 ff                	xor    edi,edi
c001b1ce:	83 c4 10             	add    esp,0x10
c001b1d1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b1d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b1db:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b1e1:	83 c5 20             	add    ebp,0x20
c001b1e4:	01 f8                	add    eax,edi
c001b1e6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b1e9:	52                   	push   edx
c001b1ea:	68 00 01 00 00       	push   0x100
c001b1ef:	6a 00                	push   0x0
c001b1f1:	50                   	push   eax
c001b1f2:	e8 c9 52 fe ff       	call   c00004c0 <memset>
c001b1f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1fb:	83 c4 10             	add    esp,0x10
c001b1fe:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b204:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b20b:	01 f8                	add    eax,edi
c001b20d:	81 c7 00 01 00 00    	add    edi,0x100
c001b213:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b216:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b21c:	75 b3                	jne    c001b1d1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b21e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b225:	50                   	push   eax
c001b226:	50                   	push   eax
c001b227:	53                   	push   ebx
c001b228:	56                   	push   esi
c001b229:	e8 b6 fe ff ff       	call   c001b0e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b22e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b235:	83 c4 2c             	add    esp,0x2c
c001b238:	5b                   	pop    ebx
c001b239:	5e                   	pop    esi
c001b23a:	5f                   	pop    edi
c001b23b:	5d                   	pop    ebp
c001b23c:	c3                   	ret    
c001b23d:	90                   	nop

c001b23e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b23e:	55                   	push   ebp
c001b23f:	57                   	push   edi
c001b240:	56                   	push   esi
c001b241:	53                   	push   ebx
c001b242:	31 db                	xor    ebx,ebx
c001b244:	83 ec 0c             	sub    esp,0xc
c001b247:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b24b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b24f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b252:	f7 c7 01 00 00 00    	test   edi,0x1
c001b258:	74 7a                	je     c001b2d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b25a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b25e:	89 d8                	mov    eax,ebx
c001b260:	c1 e0 07             	shl    eax,0x7
c001b263:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b26a:	55                   	push   ebp
c001b26b:	56                   	push   esi
c001b26c:	e8 2b fe ff ff       	call   c001b09c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b271:	5a                   	pop    edx
c001b272:	83 f8 01             	cmp    eax,0x1
c001b275:	59                   	pop    ecx
c001b276:	75 21                	jne    c001b299 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b278:	50                   	push   eax
c001b279:	53                   	push   ebx
c001b27a:	55                   	push   ebp
c001b27b:	56                   	push   esi
c001b27c:	e8 ad fe ff ff       	call   c001b12e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b281:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b288:	e8 e0 c5 fe ff       	call   c000786d <malloc>
c001b28d:	89 c5                	mov    ebp,eax
c001b28f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b292:	e8 71 10 00 00       	call   c001c308 <SATA::SATA()>
c001b297:	eb 24                	jmp    c001b2bd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b299:	83 f8 04             	cmp    eax,0x4
c001b29c:	75 36                	jne    c001b2d4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b29e:	51                   	push   ecx
c001b29f:	53                   	push   ebx
c001b2a0:	55                   	push   ebp
c001b2a1:	56                   	push   esi
c001b2a2:	e8 87 fe ff ff       	call   c001b12e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b2a7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b2ae:	e8 ba c5 fe ff       	call   c000786d <malloc>
c001b2b3:	89 c5                	mov    ebp,eax
c001b2b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b2b8:	e8 a5 17 00 00       	call   c001ca62 <SATAPI::SATAPI()>
c001b2bd:	58                   	pop    eax
c001b2be:	5a                   	pop    edx
c001b2bf:	55                   	push   ebp
c001b2c0:	56                   	push   esi
c001b2c1:	e8 86 07 ff ff       	call   c000ba4c <Device::addChild(Device*)>
c001b2c6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b2c9:	56                   	push   esi
c001b2ca:	6a 00                	push   0x0
c001b2cc:	53                   	push   ebx
c001b2cd:	55                   	push   ebp
c001b2ce:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b2d1:	83 c4 20             	add    esp,0x20
c001b2d4:	d1 ef                	shr    edi,1
c001b2d6:	43                   	inc    ebx
c001b2d7:	83 fb 20             	cmp    ebx,0x20
c001b2da:	0f 85 72 ff ff ff    	jne    c001b252 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b2e0:	83 c4 0c             	add    esp,0xc
c001b2e3:	5b                   	pop    ebx
c001b2e4:	5e                   	pop    esi
c001b2e5:	5f                   	pop    edi
c001b2e6:	5d                   	pop    ebp
c001b2e7:	c3                   	ret    

c001b2e8 <SATABus::open(int, int, void*)>:
c001b2e8:	83 ec 14             	sub    esp,0x14
c001b2eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2ef:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b2f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b2fb:	52                   	push   edx
c001b2fc:	50                   	push   eax
c001b2fd:	e8 3c ff ff ff       	call   c001b23e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b302:	31 c0                	xor    eax,eax
c001b304:	83 c4 1c             	add    esp,0x1c
c001b307:	c3                   	ret    

c001b308 <ATA::close(int, int, void*)>:
c001b308:	83 ec 0c             	sub    esp,0xc
c001b30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b30f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b315:	85 c0                	test   eax,eax
c001b317:	74 0c                	je     c001b325 <ATA::close(int, int, void*)+0x1d>
c001b319:	83 ec 0c             	sub    esp,0xc
c001b31c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b31e:	50                   	push   eax
c001b31f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b322:	83 c4 10             	add    esp,0x10
c001b325:	31 c0                	xor    eax,eax
c001b327:	83 c4 0c             	add    esp,0xc
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <ATA::powerSaving(PowerSavingLevel)>:
c001b32c:	c3                   	ret    
c001b32d:	90                   	nop

c001b32e <ATA::ATA()>:
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b335:	83 ec 04             	sub    esp,0x4
c001b338:	68 00 02 00 00       	push   0x200
c001b33d:	68 d5 13 02 c0       	push   0xc00213d5
c001b342:	50                   	push   eax
c001b343:	e8 d2 0a ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	ba 48 13 02 c0       	mov    edx,0xc0021348
c001b350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b354:	89 10                	mov    DWORD PTR [eax],edx
c001b356:	90                   	nop
c001b357:	83 c4 0c             	add    esp,0xc
c001b35a:	c3                   	ret    
c001b35b:	90                   	nop

c001b35c <ATA::flush(bool)>:
c001b35c:	53                   	push   ebx
c001b35d:	83 ec 08             	sub    esp,0x8
c001b360:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b365:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b369:	19 c0                	sbb    eax,eax
c001b36b:	83 e0 fd             	and    eax,0xfffffffd
c001b36e:	05 ea 00 00 00       	add    eax,0xea
c001b373:	50                   	push   eax
c001b374:	6a 07                	push   0x7
c001b376:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b37d:	50                   	push   eax
c001b37e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b384:	e8 59 f1 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b389:	83 c4 0c             	add    esp,0xc
c001b38c:	6a 00                	push   0x0
c001b38e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b395:	50                   	push   eax
c001b396:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b39c:	e8 df fb ff ff       	call   c001af80 <IDE::polling(unsigned char, unsigned int)>
c001b3a1:	83 c4 18             	add    esp,0x18
c001b3a4:	5b                   	pop    ebx
c001b3a5:	c3                   	ret    

c001b3a6 <ATA::readyForCommand()>:
c001b3a6:	56                   	push   esi
c001b3a7:	53                   	push   ebx
c001b3a8:	53                   	push   ebx
c001b3a9:	31 db                	xor    ebx,ebx
c001b3ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3af:	51                   	push   ecx
c001b3b0:	6a 0c                	push   0xc
c001b3b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b3b9:	50                   	push   eax
c001b3ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b3c0:	e8 dd f1 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001b3c5:	83 c4 10             	add    esp,0x10
c001b3c8:	a8 88                	test   al,0x88
c001b3ca:	74 1f                	je     c001b3eb <ATA::readyForCommand()+0x45>
c001b3cc:	43                   	inc    ebx
c001b3cd:	83 fb 63             	cmp    ebx,0x63
c001b3d0:	7e dd                	jle    c001b3af <ATA::readyForCommand()+0x9>
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	6a 0a                	push   0xa
c001b3d7:	e8 24 9a ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001b3dc:	83 c4 10             	add    esp,0x10
c001b3df:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b3e5:	75 c8                	jne    c001b3af <ATA::readyForCommand()+0x9>
c001b3e7:	31 c0                	xor    eax,eax
c001b3e9:	eb 02                	jmp    c001b3ed <ATA::readyForCommand()+0x47>
c001b3eb:	b0 01                	mov    al,0x1
c001b3ed:	5a                   	pop    edx
c001b3ee:	5b                   	pop    ebx
c001b3ef:	5e                   	pop    esi
c001b3f0:	c3                   	ret    
c001b3f1:	90                   	nop

c001b3f2 <ATA::access(unsigned long long, int, void*, bool)>:
c001b3f2:	55                   	push   ebp
c001b3f3:	57                   	push   edi
c001b3f4:	56                   	push   esi
c001b3f5:	53                   	push   ebx
c001b3f6:	83 ec 2c             	sub    esp,0x2c
c001b3f9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b3fd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b401:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b405:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b409:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b40d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b411:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b415:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b41b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b41f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b425:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b429:	c1 e0 06             	shl    eax,0x6
c001b42c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b434:	74 5d                	je     c001b493 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001b436:	89 fa                	mov    edx,edi
c001b438:	89 f0                	mov    eax,esi
c001b43a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b43e:	c1 ea 1c             	shr    edx,0x1c
c001b441:	89 d1                	mov    ecx,edx
c001b443:	09 c1                	or     ecx,eax
c001b445:	74 25                	je     c001b46c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001b447:	31 ed                	xor    ebp,ebp
c001b449:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001b450:	89 fa                	mov    edx,edi
c001b452:	89 f0                	mov    eax,esi
c001b454:	0f ad d0             	shrd   eax,edx,cl
c001b457:	d3 ea                	shr    edx,cl
c001b459:	f6 c1 20             	test   cl,0x20
c001b45c:	74 02                	je     c001b460 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001b45e:	89 d0                	mov    eax,edx
c001b460:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001b464:	45                   	inc    ebp
c001b465:	83 fd 06             	cmp    ebp,0x6
c001b468:	75 df                	jne    c001b449 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001b46a:	eb 76                	jmp    c001b4e2 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001b46c:	89 f0                	mov    eax,esi
c001b46e:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b473:	89 fa                	mov    edx,edi
c001b475:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b47c:	0f ac d0 10          	shrd   eax,edx,0x10
c001b480:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b485:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b489:	c1 ee 18             	shr    esi,0x18
c001b48c:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b491:	eb 56                	jmp    c001b4e9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b493:	6a 00                	push   0x0
c001b495:	6a 3f                	push   0x3f
c001b497:	57                   	push   edi
c001b498:	56                   	push   esi
c001b499:	e8 62 2a 00 00       	call   c001df00 <__umoddi3>
c001b49e:	83 c4 10             	add    esp,0x10
c001b4a1:	40                   	inc    eax
c001b4a2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b4a6:	6a 00                	push   0x0
c001b4a8:	68 f0 03 00 00       	push   0x3f0
c001b4ad:	57                   	push   edi
c001b4ae:	56                   	push   esi
c001b4af:	e8 4c 29 00 00       	call   c001de00 <__udivdi3>
c001b4b4:	83 c4 10             	add    esp,0x10
c001b4b7:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b4bc:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b4c3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b4c8:	6a 00                	push   0x0
c001b4ca:	6a 3f                	push   0x3f
c001b4cc:	57                   	push   edi
c001b4cd:	56                   	push   esi
c001b4ce:	e8 2d 29 00 00       	call   c001de00 <__udivdi3>
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	89 c6                	mov    esi,eax
c001b4d8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001b4dd:	83 e6 0f             	and    esi,0xf
c001b4e0:	eb 07                	jmp    c001b4e9 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b4e2:	31 f6                	xor    esi,esi
c001b4e4:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001b4e9:	bf 01 00 00 00       	mov    edi,0x1
c001b4ee:	50                   	push   eax
c001b4ef:	6a 00                	push   0x0
c001b4f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4f8:	50                   	push   eax
c001b4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b4fd:	e8 ee f1 ff ff       	call   c001a6f0 <IDE::enableIRQs(unsigned char, bool)>
c001b502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b505:	e8 9c fe ff ff       	call   c001b3a6 <ATA::readyForCommand()>
c001b50a:	83 c4 10             	add    esp,0x10
c001b50d:	84 c0                	test   al,al
c001b50f:	0f 84 4e 02 00 00    	je     c001b763 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b515:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b51b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b521:	c1 e0 04             	shl    eax,0x4
c001b524:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b52b:	09 c6                	or     esi,eax
c001b52d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b532:	75 05                	jne    c001b539 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b534:	83 ce a0             	or     esi,0xffffffa0
c001b537:	eb 03                	jmp    c001b53c <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b539:	83 ce e0             	or     esi,0xffffffe0
c001b53c:	89 f0                	mov    eax,esi
c001b53e:	0f b6 f0             	movzx  esi,al
c001b541:	56                   	push   esi
c001b542:	6a 06                	push   0x6
c001b544:	51                   	push   ecx
c001b545:	52                   	push   edx
c001b546:	e8 97 ef ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b54b:	83 c4 10             	add    esp,0x10
c001b54e:	6a 00                	push   0x0
c001b550:	6a 01                	push   0x1
c001b552:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b559:	50                   	push   eax
c001b55a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b560:	e8 7d ef ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b56d:	75 6e                	jne    c001b5dd <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b56f:	6a 00                	push   0x0
c001b571:	6a 08                	push   0x8
c001b573:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b57a:	50                   	push   eax
c001b57b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b581:	e8 5c ef ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b586:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b58b:	50                   	push   eax
c001b58c:	6a 09                	push   0x9
c001b58e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b595:	50                   	push   eax
c001b596:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b59c:	e8 41 ef ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5a1:	83 c4 20             	add    esp,0x20
c001b5a4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b5a9:	50                   	push   eax
c001b5aa:	6a 0a                	push   0xa
c001b5ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5b3:	50                   	push   eax
c001b5b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5ba:	e8 23 ef ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5bf:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b5c4:	50                   	push   eax
c001b5c5:	6a 0b                	push   0xb
c001b5c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5ce:	50                   	push   eax
c001b5cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5d5:	e8 08 ef ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5da:	83 c4 20             	add    esp,0x20
c001b5dd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b5e2:	50                   	push   eax
c001b5e3:	6a 02                	push   0x2
c001b5e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b5ec:	50                   	push   eax
c001b5ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b5f3:	e8 ea ee ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5f8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b5fd:	50                   	push   eax
c001b5fe:	6a 03                	push   0x3
c001b600:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b607:	50                   	push   eax
c001b608:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b60e:	e8 cf ee ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b613:	83 c4 20             	add    esp,0x20
c001b616:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b61b:	50                   	push   eax
c001b61c:	6a 04                	push   0x4
c001b61e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b625:	50                   	push   eax
c001b626:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b62c:	e8 b1 ee ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b631:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b636:	50                   	push   eax
c001b637:	6a 05                	push   0x5
c001b639:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b640:	50                   	push   eax
c001b641:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b647:	e8 96 ee ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b64c:	83 c4 20             	add    esp,0x20
c001b64f:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b654:	0f 94 c0             	sete   al
c001b657:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b65c:	74 09                	je     c001b667 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b65e:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b665:	eb 07                	jmp    c001b66e <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b667:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b66e:	0f b6 c0             	movzx  eax,al
c001b671:	50                   	push   eax
c001b672:	6a 07                	push   0x7
c001b674:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b67b:	50                   	push   eax
c001b67c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b682:	e8 5b ee ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b687:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b68b:	83 c4 10             	add    esp,0x10
c001b68e:	85 f6                	test   esi,esi
c001b690:	0f 84 ae 00 00 00    	je     c001b744 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b696:	50                   	push   eax
c001b697:	6a 01                	push   0x1
c001b699:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b6a0:	50                   	push   eax
c001b6a1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b6a7:	e8 d4 f8 ff ff       	call   c001af80 <IDE::polling(unsigned char, unsigned int)>
c001b6ac:	83 c4 10             	add    esp,0x10
c001b6af:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b6b5:	84 c0                	test   al,al
c001b6b7:	74 20                	je     c001b6d9 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b6b9:	0f b6 f8             	movzx  edi,al
c001b6bc:	0f b6 d2             	movzx  edx,dl
c001b6bf:	57                   	push   edi
c001b6c0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b6c7:	50                   	push   eax
c001b6c8:	52                   	push   edx
c001b6c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b6cf:	e8 fc f7 ff ff       	call   c001aed0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b6d4:	e9 87 00 00 00       	jmp    c001b760 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b6d9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b6de:	74 33                	je     c001b713 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b6e0:	31 ed                	xor    ebp,ebp
c001b6e2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6e6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b6ea:	50                   	push   eax
c001b6eb:	50                   	push   eax
c001b6ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b6f3:	50                   	push   eax
c001b6f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b6fa:	e8 d1 ed ff ff       	call   c001a4d0 <IDE::getBase(unsigned char)>
c001b6ff:	89 c2                	mov    edx,eax
c001b701:	89 f8                	mov    eax,edi
c001b703:	66 ef                	out    dx,ax
c001b705:	45                   	inc    ebp
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b70f:	75 d1                	jne    c001b6e2 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b711:	eb 23                	jmp    c001b736 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b713:	0f b6 d2             	movzx  edx,dl
c001b716:	51                   	push   ecx
c001b717:	51                   	push   ecx
c001b718:	52                   	push   edx
c001b719:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b71f:	e8 ac ed ff ff       	call   c001a4d0 <IDE::getBase(unsigned char)>
c001b724:	b9 00 01 00 00       	mov    ecx,0x100
c001b729:	89 c2                	mov    edx,eax
c001b72b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b72f:	fc                   	cld    
c001b730:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b73e:	4e                   	dec    esi
c001b73f:	e9 4a ff ff ff       	jmp    c001b68e <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b744:	31 ff                	xor    edi,edi
c001b746:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b74b:	74 16                	je     c001b763 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b74d:	50                   	push   eax
c001b74e:	50                   	push   eax
c001b74f:	31 c0                	xor    eax,eax
c001b751:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b756:	0f 94 c0             	sete   al
c001b759:	50                   	push   eax
c001b75a:	53                   	push   ebx
c001b75b:	e8 fc fb ff ff       	call   c001b35c <ATA::flush(bool)>
c001b760:	83 c4 10             	add    esp,0x10
c001b763:	83 c4 2c             	add    esp,0x2c
c001b766:	89 f8                	mov    eax,edi
c001b768:	5b                   	pop    ebx
c001b769:	5e                   	pop    esi
c001b76a:	5f                   	pop    edi
c001b76b:	5d                   	pop    ebp
c001b76c:	c3                   	ret    
c001b76d:	90                   	nop

c001b76e <ATA::detectCHS()>:
c001b76e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b772:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b778:	c1 e0 06             	shl    eax,0x6
c001b77b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b781:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b78b:	c7 44 24 04 2c 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002132c
c001b793:	e9 37 4c ff ff       	jmp    c00103cf <KePanic(char const*)>

c001b798 <ATA::open(int, int, void*)>:
c001b798:	53                   	push   ebx
c001b799:	83 ec 08             	sub    esp,0x8
c001b79c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b7a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b7a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7a8:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b7ae:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b7b4:	c1 e0 06             	shl    eax,0x6
c001b7b7:	01 d0                	add    eax,edx
c001b7b9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b7c0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b7c6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b7cd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b7d7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b7dd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b7e4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b7eb:	75 0c                	jne    c001b7f9 <ATA::open(int, int, void*)+0x61>
c001b7ed:	83 ec 0c             	sub    esp,0xc
c001b7f0:	53                   	push   ebx
c001b7f1:	e8 78 ff ff ff       	call   c001b76e <ATA::detectCHS()>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b7ff:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b805:	c1 e0 06             	shl    eax,0x6
c001b808:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b80f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b819:	d1 e8                	shr    eax,1
c001b81b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b821:	6a 04                	push   0x4
c001b823:	6a 0c                	push   0xc
c001b825:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b82c:	50                   	push   eax
c001b82d:	52                   	push   edx
c001b82e:	e8 af ec ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b833:	90                   	nop
c001b834:	90                   	nop
c001b835:	6a 00                	push   0x0
c001b837:	6a 0c                	push   0xc
c001b839:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b840:	50                   	push   eax
c001b841:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b847:	e8 96 ec ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b84c:	83 c4 14             	add    esp,0x14
c001b84f:	53                   	push   ebx
c001b850:	e8 2d 06 ff ff       	call   c000be82 <PhysicalDisk::startCache()>
c001b855:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b858:	e8 99 17 ff ff       	call   c000cff6 <createPartitionsForDisk(PhysicalDisk*)>
c001b85d:	31 c0                	xor    eax,eax
c001b85f:	83 c4 18             	add    esp,0x18
c001b862:	5b                   	pop    ebx
c001b863:	c3                   	ret    

c001b864 <combineCharAndColour(char, unsigned char)>:
c001b864:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b869:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b86f:	c1 e0 08             	shl    eax,0x8
c001b872:	09 d0                	or     eax,edx
c001b874:	c3                   	ret    

c001b875 <combineColours(unsigned char, unsigned char)>:
c001b875:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b87a:	c1 e0 04             	shl    eax,0x4
c001b87d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b881:	c3                   	ret    

c001b882 <ATA::read(unsigned long long, int, void*)>:
c001b882:	55                   	push   ebp
c001b883:	57                   	push   edi
c001b884:	56                   	push   esi
c001b885:	be 04 00 00 00       	mov    esi,0x4
c001b88a:	53                   	push   ebx
c001b88b:	83 ec 0c             	sub    esp,0xc
c001b88e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b892:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b896:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b899:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b89d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b8a1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b8a7:	0f 87 a1 01 00 00    	ja     c001ba4e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b8ad:	be 06 00 00 00       	mov    esi,0x6
c001b8b2:	85 c9                	test   ecx,ecx
c001b8b4:	0f 84 94 01 00 00    	je     c001ba4e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b8ba:	55                   	push   ebp
c001b8bb:	55                   	push   ebp
c001b8bc:	6a 00                	push   0x0
c001b8be:	51                   	push   ecx
c001b8bf:	53                   	push   ebx
c001b8c0:	52                   	push   edx
c001b8c1:	50                   	push   eax
c001b8c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b8c6:	e8 27 fb ff ff       	call   c001b3f2 <ATA::access(unsigned long long, int, void*, bool)>
c001b8cb:	83 c4 20             	add    esp,0x20
c001b8ce:	89 c6                	mov    esi,eax
c001b8d0:	85 c0                	test   eax,eax
c001b8d2:	0f 85 71 01 00 00    	jne    c001ba49 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b8d8:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b8de:	89 da                	mov    edx,ebx
c001b8e0:	50                   	push   eax
c001b8e1:	bd 10 27 00 00       	mov    ebp,0x2710
c001b8e6:	50                   	push   eax
c001b8e7:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b8ed:	6a 0f                	push   0xf
c001b8ef:	6a 00                	push   0x0
c001b8f1:	e8 7f ff ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001b8f6:	59                   	pop    ecx
c001b8f7:	b9 0a 00 00 00       	mov    ecx,0xa
c001b8fc:	5b                   	pop    ebx
c001b8fd:	0f b6 d8             	movzx  ebx,al
c001b900:	89 d0                	mov    eax,edx
c001b902:	53                   	push   ebx
c001b903:	99                   	cdq    
c001b904:	f7 fd                	idiv   ebp
c001b906:	99                   	cdq    
c001b907:	f7 f9                	idiv   ecx
c001b909:	83 c2 30             	add    edx,0x30
c001b90c:	0f b6 d2             	movzx  edx,dl
c001b90f:	52                   	push   edx
c001b910:	e8 4f ff ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b915:	5f                   	pop    edi
c001b916:	bf e8 03 00 00       	mov    edi,0x3e8
c001b91b:	5a                   	pop    edx
c001b91c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b922:	53                   	push   ebx
c001b923:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b928:	99                   	cdq    
c001b929:	f7 ff                	idiv   edi
c001b92b:	99                   	cdq    
c001b92c:	f7 f9                	idiv   ecx
c001b92e:	8d 42 30             	lea    eax,[edx+0x30]
c001b931:	0f b6 c0             	movzx  eax,al
c001b934:	50                   	push   eax
c001b935:	e8 2a ff ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b93a:	5f                   	pop    edi
c001b93b:	bf 64 00 00 00       	mov    edi,0x64
c001b940:	5a                   	pop    edx
c001b941:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b947:	53                   	push   ebx
c001b948:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b94d:	99                   	cdq    
c001b94e:	f7 ff                	idiv   edi
c001b950:	99                   	cdq    
c001b951:	f7 f9                	idiv   ecx
c001b953:	8d 42 30             	lea    eax,[edx+0x30]
c001b956:	0f b6 c0             	movzx  eax,al
c001b959:	50                   	push   eax
c001b95a:	e8 05 ff ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b95f:	5a                   	pop    edx
c001b960:	5a                   	pop    edx
c001b961:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b967:	53                   	push   ebx
c001b968:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b96d:	99                   	cdq    
c001b96e:	f7 f9                	idiv   ecx
c001b970:	99                   	cdq    
c001b971:	f7 f9                	idiv   ecx
c001b973:	8d 42 30             	lea    eax,[edx+0x30]
c001b976:	0f b6 c0             	movzx  eax,al
c001b979:	50                   	push   eax
c001b97a:	e8 e5 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b97f:	5a                   	pop    edx
c001b980:	5a                   	pop    edx
c001b981:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b987:	53                   	push   ebx
c001b988:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b98d:	99                   	cdq    
c001b98e:	f7 f9                	idiv   ecx
c001b990:	83 c2 30             	add    edx,0x30
c001b993:	0f b6 d2             	movzx  edx,dl
c001b996:	52                   	push   edx
c001b997:	e8 c8 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b99c:	5a                   	pop    edx
c001b99d:	5a                   	pop    edx
c001b99e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b9a4:	53                   	push   ebx
c001b9a5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b9aa:	99                   	cdq    
c001b9ab:	f7 fd                	idiv   ebp
c001b9ad:	99                   	cdq    
c001b9ae:	f7 f9                	idiv   ecx
c001b9b0:	8d 42 30             	lea    eax,[edx+0x30]
c001b9b3:	0f b6 c0             	movzx  eax,al
c001b9b6:	50                   	push   eax
c001b9b7:	e8 a8 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b9bc:	5d                   	pop    ebp
c001b9bd:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b9c2:	5a                   	pop    edx
c001b9c3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b9c9:	53                   	push   ebx
c001b9ca:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b9cf:	99                   	cdq    
c001b9d0:	f7 fd                	idiv   ebp
c001b9d2:	99                   	cdq    
c001b9d3:	f7 f9                	idiv   ecx
c001b9d5:	8d 42 30             	lea    eax,[edx+0x30]
c001b9d8:	0f b6 c0             	movzx  eax,al
c001b9db:	50                   	push   eax
c001b9dc:	e8 83 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001b9e1:	5d                   	pop    ebp
c001b9e2:	5a                   	pop    edx
c001b9e3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b9e9:	53                   	push   ebx
c001b9ea:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b9ef:	99                   	cdq    
c001b9f0:	f7 ff                	idiv   edi
c001b9f2:	99                   	cdq    
c001b9f3:	f7 f9                	idiv   ecx
c001b9f5:	8d 42 30             	lea    eax,[edx+0x30]
c001b9f8:	0f b6 c0             	movzx  eax,al
c001b9fb:	50                   	push   eax
c001b9fc:	e8 63 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001ba01:	5f                   	pop    edi
c001ba02:	5d                   	pop    ebp
c001ba03:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ba09:	53                   	push   ebx
c001ba0a:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba0f:	99                   	cdq    
c001ba10:	f7 f9                	idiv   ecx
c001ba12:	99                   	cdq    
c001ba13:	f7 f9                	idiv   ecx
c001ba15:	8d 42 30             	lea    eax,[edx+0x30]
c001ba18:	0f b6 c0             	movzx  eax,al
c001ba1b:	50                   	push   eax
c001ba1c:	e8 43 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001ba21:	5a                   	pop    edx
c001ba22:	5f                   	pop    edi
c001ba23:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ba29:	53                   	push   ebx
c001ba2a:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba2f:	99                   	cdq    
c001ba30:	f7 f9                	idiv   ecx
c001ba32:	83 c2 30             	add    edx,0x30
c001ba35:	0f b6 d2             	movzx  edx,dl
c001ba38:	52                   	push   edx
c001ba39:	e8 26 fe ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ba47:	eb 05                	jmp    c001ba4e <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ba49:	be 01 00 00 00       	mov    esi,0x1
c001ba4e:	83 c4 0c             	add    esp,0xc
c001ba51:	89 f0                	mov    eax,esi
c001ba53:	5b                   	pop    ebx
c001ba54:	5e                   	pop    esi
c001ba55:	5f                   	pop    edi
c001ba56:	5d                   	pop    ebp
c001ba57:	c3                   	ret    

c001ba58 <ATA::write(unsigned long long, int, void*)>:
c001ba58:	55                   	push   ebp
c001ba59:	57                   	push   edi
c001ba5a:	56                   	push   esi
c001ba5b:	be 04 00 00 00       	mov    esi,0x4
c001ba60:	53                   	push   ebx
c001ba61:	83 ec 0c             	sub    esp,0xc
c001ba64:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba6c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ba6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba73:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ba77:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ba7d:	0f 87 9c 01 00 00    	ja     c001bc1f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ba83:	be 06 00 00 00       	mov    esi,0x6
c001ba88:	85 c9                	test   ecx,ecx
c001ba8a:	0f 84 8f 01 00 00    	je     c001bc1f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ba90:	55                   	push   ebp
c001ba91:	55                   	push   ebp
c001ba92:	6a 01                	push   0x1
c001ba94:	51                   	push   ecx
c001ba95:	53                   	push   ebx
c001ba96:	52                   	push   edx
c001ba97:	50                   	push   eax
c001ba98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ba9c:	e8 51 f9 ff ff       	call   c001b3f2 <ATA::access(unsigned long long, int, void*, bool)>
c001baa1:	83 c4 20             	add    esp,0x20
c001baa4:	89 c6                	mov    esi,eax
c001baa6:	85 c0                	test   eax,eax
c001baa8:	0f 85 6c 01 00 00    	jne    c001bc1a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001baae:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001bab4:	bd 10 27 00 00       	mov    ebp,0x2710
c001bab9:	50                   	push   eax
c001baba:	50                   	push   eax
c001babb:	6a 0f                	push   0xf
c001babd:	6a 00                	push   0x0
c001babf:	e8 b1 fd ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001bac4:	5a                   	pop    edx
c001bac5:	0f b6 d8             	movzx  ebx,al
c001bac8:	59                   	pop    ecx
c001bac9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bace:	53                   	push   ebx
c001bacf:	b9 0a 00 00 00       	mov    ecx,0xa
c001bad4:	99                   	cdq    
c001bad5:	f7 fd                	idiv   ebp
c001bad7:	99                   	cdq    
c001bad8:	f7 f9                	idiv   ecx
c001bada:	8d 42 30             	lea    eax,[edx+0x30]
c001badd:	0f b6 c0             	movzx  eax,al
c001bae0:	50                   	push   eax
c001bae1:	e8 7e fd ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bae6:	5f                   	pop    edi
c001bae7:	bf e8 03 00 00       	mov    edi,0x3e8
c001baec:	5a                   	pop    edx
c001baed:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001baf3:	53                   	push   ebx
c001baf4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001baf9:	99                   	cdq    
c001bafa:	f7 ff                	idiv   edi
c001bafc:	99                   	cdq    
c001bafd:	f7 f9                	idiv   ecx
c001baff:	8d 42 30             	lea    eax,[edx+0x30]
c001bb02:	0f b6 c0             	movzx  eax,al
c001bb05:	50                   	push   eax
c001bb06:	e8 59 fd ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bb0b:	5f                   	pop    edi
c001bb0c:	bf 64 00 00 00       	mov    edi,0x64
c001bb11:	5a                   	pop    edx
c001bb12:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bb18:	53                   	push   ebx
c001bb19:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb1e:	99                   	cdq    
c001bb1f:	f7 ff                	idiv   edi
c001bb21:	99                   	cdq    
c001bb22:	f7 f9                	idiv   ecx
c001bb24:	8d 42 30             	lea    eax,[edx+0x30]
c001bb27:	0f b6 c0             	movzx  eax,al
c001bb2a:	50                   	push   eax
c001bb2b:	e8 34 fd ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bb30:	5a                   	pop    edx
c001bb31:	5a                   	pop    edx
c001bb32:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bb38:	53                   	push   ebx
c001bb39:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb3e:	99                   	cdq    
c001bb3f:	f7 f9                	idiv   ecx
c001bb41:	99                   	cdq    
c001bb42:	f7 f9                	idiv   ecx
c001bb44:	8d 42 30             	lea    eax,[edx+0x30]
c001bb47:	0f b6 c0             	movzx  eax,al
c001bb4a:	50                   	push   eax
c001bb4b:	e8 14 fd ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bb50:	5a                   	pop    edx
c001bb51:	5a                   	pop    edx
c001bb52:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bb58:	53                   	push   ebx
c001bb59:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb5e:	99                   	cdq    
c001bb5f:	f7 f9                	idiv   ecx
c001bb61:	8d 42 30             	lea    eax,[edx+0x30]
c001bb64:	0f b6 c0             	movzx  eax,al
c001bb67:	50                   	push   eax
c001bb68:	e8 f7 fc ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bb6d:	5a                   	pop    edx
c001bb6e:	5a                   	pop    edx
c001bb6f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bb75:	53                   	push   ebx
c001bb76:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bb7b:	99                   	cdq    
c001bb7c:	f7 fd                	idiv   ebp
c001bb7e:	99                   	cdq    
c001bb7f:	f7 f9                	idiv   ecx
c001bb81:	8d 42 30             	lea    eax,[edx+0x30]
c001bb84:	0f b6 c0             	movzx  eax,al
c001bb87:	50                   	push   eax
c001bb88:	e8 d7 fc ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bb8d:	5d                   	pop    ebp
c001bb8e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bb93:	5a                   	pop    edx
c001bb94:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bb9a:	53                   	push   ebx
c001bb9b:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bba0:	99                   	cdq    
c001bba1:	f7 fd                	idiv   ebp
c001bba3:	99                   	cdq    
c001bba4:	f7 f9                	idiv   ecx
c001bba6:	8d 42 30             	lea    eax,[edx+0x30]
c001bba9:	0f b6 c0             	movzx  eax,al
c001bbac:	50                   	push   eax
c001bbad:	e8 b2 fc ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bbb2:	5d                   	pop    ebp
c001bbb3:	5a                   	pop    edx
c001bbb4:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bbba:	53                   	push   ebx
c001bbbb:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bbc0:	99                   	cdq    
c001bbc1:	f7 ff                	idiv   edi
c001bbc3:	99                   	cdq    
c001bbc4:	f7 f9                	idiv   ecx
c001bbc6:	8d 42 30             	lea    eax,[edx+0x30]
c001bbc9:	0f b6 c0             	movzx  eax,al
c001bbcc:	50                   	push   eax
c001bbcd:	e8 92 fc ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bbd2:	5f                   	pop    edi
c001bbd3:	5d                   	pop    ebp
c001bbd4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bbda:	53                   	push   ebx
c001bbdb:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bbe0:	99                   	cdq    
c001bbe1:	f7 f9                	idiv   ecx
c001bbe3:	99                   	cdq    
c001bbe4:	f7 f9                	idiv   ecx
c001bbe6:	8d 42 30             	lea    eax,[edx+0x30]
c001bbe9:	0f b6 c0             	movzx  eax,al
c001bbec:	50                   	push   eax
c001bbed:	e8 72 fc ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bbf2:	5a                   	pop    edx
c001bbf3:	5f                   	pop    edi
c001bbf4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bbfa:	53                   	push   ebx
c001bbfb:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc00:	99                   	cdq    
c001bc01:	f7 f9                	idiv   ecx
c001bc03:	83 c2 30             	add    edx,0x30
c001bc06:	0f b6 d2             	movzx  edx,dl
c001bc09:	52                   	push   edx
c001bc0a:	e8 55 fc ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001bc0f:	83 c4 10             	add    esp,0x10
c001bc12:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bc18:	eb 05                	jmp    c001bc1f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bc1a:	be 01 00 00 00       	mov    esi,0x1
c001bc1f:	83 c4 0c             	add    esp,0xc
c001bc22:	89 f0                	mov    eax,esi
c001bc24:	5b                   	pop    ebx
c001bc25:	5e                   	pop    esi
c001bc26:	5f                   	pop    edi
c001bc27:	5d                   	pop    ebp
c001bc28:	c3                   	ret    
c001bc29:	90                   	nop

c001bc2a <ATAPI::write(unsigned long long, int, void*)>:
c001bc2a:	b8 03 00 00 00       	mov    eax,0x3
c001bc2f:	c3                   	ret    

c001bc30 <ATAPI::close(int, int, void*)>:
c001bc30:	83 ec 0c             	sub    esp,0xc
c001bc33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc37:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bc3d:	85 c0                	test   eax,eax
c001bc3f:	74 0c                	je     c001bc4d <ATAPI::close(int, int, void*)+0x1d>
c001bc41:	83 ec 0c             	sub    esp,0xc
c001bc44:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc46:	50                   	push   eax
c001bc47:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bc4a:	83 c4 10             	add    esp,0x10
c001bc4d:	31 c0                	xor    eax,eax
c001bc4f:	83 c4 0c             	add    esp,0xc
c001bc52:	c3                   	ret    
c001bc53:	90                   	nop

c001bc54 <ATAPI::ATAPI()>:
c001bc54:	83 ec 0c             	sub    esp,0xc
c001bc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc5b:	83 ec 04             	sub    esp,0x4
c001bc5e:	68 00 08 00 00       	push   0x800
c001bc63:	68 75 14 02 c0       	push   0xc0021475
c001bc68:	50                   	push   eax
c001bc69:	e8 ac 01 ff ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bc6e:	83 c4 10             	add    esp,0x10
c001bc71:	ba 90 13 02 c0       	mov    edx,0xc0021390
c001bc76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc7a:	89 10                	mov    DWORD PTR [eax],edx
c001bc7c:	90                   	nop
c001bc7d:	83 c4 0c             	add    esp,0xc
c001bc80:	c3                   	ret    
c001bc81:	90                   	nop

c001bc82 <ATAPI::readyForCommand()>:
c001bc82:	56                   	push   esi
c001bc83:	53                   	push   ebx
c001bc84:	53                   	push   ebx
c001bc85:	31 db                	xor    ebx,ebx
c001bc87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc8b:	51                   	push   ecx
c001bc8c:	6a 0c                	push   0xc
c001bc8e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bc95:	50                   	push   eax
c001bc96:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bc9c:	e8 01 e9 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001bca1:	83 c4 10             	add    esp,0x10
c001bca4:	a8 88                	test   al,0x88
c001bca6:	74 25                	je     c001bccd <ATAPI::readyForCommand()+0x4b>
c001bca8:	43                   	inc    ebx
c001bca9:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001bcaf:	7e da                	jle    c001bc8b <ATAPI::readyForCommand()+0x9>
c001bcb1:	83 ec 0c             	sub    esp,0xc
c001bcb4:	68 5e 01 00 00       	push   0x15e
c001bcb9:	e8 42 91 ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001bcc7:	75 c2                	jne    c001bc8b <ATAPI::readyForCommand()+0x9>
c001bcc9:	31 c0                	xor    eax,eax
c001bccb:	eb 02                	jmp    c001bccf <ATAPI::readyForCommand()+0x4d>
c001bccd:	b0 01                	mov    al,0x1
c001bccf:	5a                   	pop    edx
c001bcd0:	5b                   	pop    ebx
c001bcd1:	5e                   	pop    esi
c001bcd2:	c3                   	ret    
c001bcd3:	90                   	nop

c001bcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001bcd4:	55                   	push   ebp
c001bcd5:	57                   	push   edi
c001bcd6:	56                   	push   esi
c001bcd7:	53                   	push   ebx
c001bcd8:	83 ec 20             	sub    esp,0x20
c001bcdb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bcdf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001bce3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001bce7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bceb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bcef:	6a 01                	push   0x1
c001bcf1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bcf8:	50                   	push   eax
c001bcf9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bcff:	e8 ec e9 ff ff       	call   c001a6f0 <IDE::enableIRQs(unsigned char, bool)>
c001bd04:	5e                   	pop    esi
c001bd05:	58                   	pop    eax
c001bd06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd0d:	50                   	push   eax
c001bd0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd14:	e8 a3 e7 ff ff       	call   c001a4bc <IDE::prepareInterrupt(unsigned char)>
c001bd19:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd1c:	e8 61 ff ff ff       	call   c001bc82 <ATAPI::readyForCommand()>
c001bd21:	83 c4 10             	add    esp,0x10
c001bd24:	84 c0                	test   al,al
c001bd26:	75 0a                	jne    c001bd32 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001bd28:	bb 01 00 00 00       	mov    ebx,0x1
c001bd2d:	e9 57 02 00 00       	jmp    c001bf89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bd32:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001bd38:	c1 e0 04             	shl    eax,0x4
c001bd3b:	0f b6 c0             	movzx  eax,al
c001bd3e:	50                   	push   eax
c001bd3f:	6a 06                	push   0x6
c001bd41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd48:	50                   	push   eax
c001bd49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd4f:	e8 8e e7 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd54:	6a 00                	push   0x0
c001bd56:	6a 01                	push   0x1
c001bd58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd5f:	50                   	push   eax
c001bd60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd66:	e8 77 e7 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd6b:	83 c4 20             	add    esp,0x20
c001bd6e:	0f b6 c3             	movzx  eax,bl
c001bd71:	0f b6 df             	movzx  ebx,bh
c001bd74:	50                   	push   eax
c001bd75:	6a 04                	push   0x4
c001bd77:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd7e:	50                   	push   eax
c001bd7f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd85:	e8 58 e7 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd8a:	53                   	push   ebx
c001bd8b:	6a 05                	push   0x5
c001bd8d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bd94:	50                   	push   eax
c001bd95:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bd9b:	e8 42 e7 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bda0:	83 c4 20             	add    esp,0x20
c001bda3:	68 a0 00 00 00       	push   0xa0
c001bda8:	6a 07                	push   0x7
c001bdaa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdb1:	50                   	push   eax
c001bdb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdb8:	e8 25 e7 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdbd:	83 c4 0c             	add    esp,0xc
c001bdc0:	6a 01                	push   0x1
c001bdc2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdc9:	50                   	push   eax
c001bdca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdd0:	e8 ab f1 ff ff       	call   c001af80 <IDE::polling(unsigned char, unsigned int)>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001bdde:	84 c0                	test   al,al
c001bde0:	74 23                	je     c001be05 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001bde2:	0f b6 d8             	movzx  ebx,al
c001bde5:	0f b6 d2             	movzx  edx,dl
c001bde8:	53                   	push   ebx
c001bde9:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001bdf0:	50                   	push   eax
c001bdf1:	52                   	push   edx
c001bdf2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdf8:	e8 d3 f0 ff ff       	call   c001aed0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bdfd:	83 c4 10             	add    esp,0x10
c001be00:	e9 84 01 00 00       	jmp    c001bf89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001be05:	0f b6 d2             	movzx  edx,dl
c001be08:	53                   	push   ebx
c001be09:	53                   	push   ebx
c001be0a:	52                   	push   edx
c001be0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be11:	e8 ba e6 ff ff       	call   c001a4d0 <IDE::getBase(unsigned char)>
c001be16:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001be1a:	b9 06 00 00 00       	mov    ecx,0x6
c001be1f:	89 c2                	mov    edx,eax
c001be21:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001be24:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001be28:	83 c4 10             	add    esp,0x10
c001be2b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001be31:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001be38:	85 db                	test   ebx,ebx
c001be3a:	0f 84 ec 00 00 00    	je     c001bf2c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001be40:	51                   	push   ecx
c001be41:	51                   	push   ecx
c001be42:	52                   	push   edx
c001be43:	50                   	push   eax
c001be44:	e8 07 e8 ff ff       	call   c001a650 <IDE::waitInterrupt(unsigned char)>
c001be49:	83 c4 10             	add    esp,0x10
c001be4c:	84 c0                	test   al,al
c001be4e:	0f 84 d4 fe ff ff    	je     c001bd28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001be54:	56                   	push   esi
c001be55:	56                   	push   esi
c001be56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be5d:	50                   	push   eax
c001be5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be64:	e8 53 e6 ff ff       	call   c001a4bc <IDE::prepareInterrupt(unsigned char)>
c001be69:	83 c4 0c             	add    esp,0xc
c001be6c:	6a 04                	push   0x4
c001be6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be75:	50                   	push   eax
c001be76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be7c:	e8 21 e7 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001be81:	83 c4 0c             	add    esp,0xc
c001be84:	89 c6                	mov    esi,eax
c001be86:	6a 05                	push   0x5
c001be88:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be8f:	50                   	push   eax
c001be90:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be96:	e8 07 e7 ff ff       	call   c001a5a2 <IDE::read(unsigned char, unsigned char)>
c001be9b:	89 f1                	mov    ecx,esi
c001be9d:	0f b6 c0             	movzx  eax,al
c001bea0:	0f b6 f1             	movzx  esi,cl
c001bea3:	c1 e0 08             	shl    eax,0x8
c001bea6:	09 c6                	or     esi,eax
c001bea8:	d1 fe                	sar    esi,1
c001beaa:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001beae:	83 c4 10             	add    esp,0x10
c001beb1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001beb6:	74 41                	je     c001bef9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001beb8:	31 c9                	xor    ecx,ecx
c001beba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bec0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bec7:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001becb:	75 0a                	jne    c001bed7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001becd:	01 c9                	add    ecx,ecx
c001becf:	01 cd                	add    ebp,ecx
c001bed1:	4b                   	dec    ebx
c001bed2:	e9 54 ff ff ff       	jmp    c001be2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bed7:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bedc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bee0:	51                   	push   ecx
c001bee1:	51                   	push   ecx
c001bee2:	52                   	push   edx
c001bee3:	50                   	push   eax
c001bee4:	e8 e7 e5 ff ff       	call   c001a4d0 <IDE::getBase(unsigned char)>
c001bee9:	89 c2                	mov    edx,eax
c001beeb:	89 f0                	mov    eax,esi
c001beed:	66 ef                	out    dx,ax
c001beef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bef3:	83 c4 10             	add    esp,0x10
c001bef6:	41                   	inc    ecx
c001bef7:	eb c1                	jmp    c001beba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bef9:	31 f6                	xor    esi,esi
c001befb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bf01:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bf08:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bf0c:	75 06                	jne    c001bf14 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bf0e:	01 f6                	add    esi,esi
c001bf10:	01 f5                	add    ebp,esi
c001bf12:	eb bd                	jmp    c001bed1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bf14:	51                   	push   ecx
c001bf15:	51                   	push   ecx
c001bf16:	52                   	push   edx
c001bf17:	50                   	push   eax
c001bf18:	e8 b3 e5 ff ff       	call   c001a4d0 <IDE::getBase(unsigned char)>
c001bf1d:	89 c2                	mov    edx,eax
c001bf1f:	66 ed                	in     ax,dx
c001bf21:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001bf26:	83 c4 10             	add    esp,0x10
c001bf29:	46                   	inc    esi
c001bf2a:	eb cf                	jmp    c001befb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001bf2c:	51                   	push   ecx
c001bf2d:	51                   	push   ecx
c001bf2e:	52                   	push   edx
c001bf2f:	50                   	push   eax
c001bf30:	e8 1b e7 ff ff       	call   c001a650 <IDE::waitInterrupt(unsigned char)>
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	84 c0                	test   al,al
c001bf3a:	0f 84 e8 fd ff ff    	je     c001bd28 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bf40:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bf45:	52                   	push   edx
c001bf46:	52                   	push   edx
c001bf47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf4e:	50                   	push   eax
c001bf4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf55:	e8 62 e5 ff ff       	call   c001a4bc <IDE::prepareInterrupt(unsigned char)>
c001bf5a:	83 c4 10             	add    esp,0x10
c001bf5d:	50                   	push   eax
c001bf5e:	50                   	push   eax
c001bf5f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf66:	50                   	push   eax
c001bf67:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf6d:	e8 5e e5 ff ff       	call   c001a4d0 <IDE::getBase(unsigned char)>
c001bf72:	8d 50 07             	lea    edx,[eax+0x7]
c001bf75:	ec                   	in     al,dx
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	a8 88                	test   al,0x88
c001bf7b:	74 0a                	je     c001bf87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001bf7d:	4b                   	dec    ebx
c001bf7e:	75 dd                	jne    c001bf5d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001bf80:	bb 02 00 00 00       	mov    ebx,0x2
c001bf85:	eb 02                	jmp    c001bf89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bf87:	31 db                	xor    ebx,ebx
c001bf89:	83 c4 1c             	add    esp,0x1c
c001bf8c:	89 d8                	mov    eax,ebx
c001bf8e:	5b                   	pop    ebx
c001bf8f:	5e                   	pop    esi
c001bf90:	5f                   	pop    edi
c001bf91:	5d                   	pop    ebp
c001bf92:	c3                   	ret    
c001bf93:	90                   	nop

c001bf94 <ATAPI::diskRemoved()>:
c001bf94:	53                   	push   ebx
c001bf95:	83 ec 14             	sub    esp,0x14
c001bf98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bf9c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001bfa3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001bfa9:	e8 36 0d ff ff       	call   c000cce4 <LogicalDisk::unmount()>
c001bfae:	58                   	pop    eax
c001bfaf:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001bfb5:	e8 0a 17 ff ff       	call   c000d6c4 <VCache::writeWriteBuffer()>
c001bfba:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bfc0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bfc4:	83 c4 18             	add    esp,0x18
c001bfc7:	5b                   	pop    ebx
c001bfc8:	e9 e7 16 ff ff       	jmp    c000d6b4 <VCache::invalidateReadBuffer()>
c001bfcd:	90                   	nop

c001bfce <ATAPI::eject()>:
c001bfce:	57                   	push   edi
c001bfcf:	b9 03 00 00 00       	mov    ecx,0x3
c001bfd4:	53                   	push   ebx
c001bfd5:	83 ec 14             	sub    esp,0x14
c001bfd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bfdc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bfe0:	fc                   	cld    
c001bfe1:	31 c0                	xor    eax,eax
c001bfe3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bfe5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bfea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bfef:	50                   	push   eax
c001bff0:	50                   	push   eax
c001bff1:	6a 00                	push   0x0
c001bff3:	6a 00                	push   0x0
c001bff5:	6a 00                	push   0x0
c001bff7:	6a 02                	push   0x2
c001bff9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bffd:	50                   	push   eax
c001bffe:	53                   	push   ebx
c001bfff:	e8 d0 fc ff ff       	call   c001bcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c004:	83 c4 14             	add    esp,0x14
c001c007:	53                   	push   ebx
c001c008:	e8 87 ff ff ff       	call   c001bf94 <ATAPI::diskRemoved()>
c001c00d:	83 c4 24             	add    esp,0x24
c001c010:	31 c0                	xor    eax,eax
c001c012:	5b                   	pop    ebx
c001c013:	5f                   	pop    edi
c001c014:	c3                   	ret    
c001c015:	90                   	nop

c001c016 <ATAPI::diskInserted()>:
c001c016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c01a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c021:	c3                   	ret    

c001c022 <ATAPI::detectMedia()>:
c001c022:	56                   	push   esi
c001c023:	53                   	push   ebx
c001c024:	83 ec 28             	sub    esp,0x28
c001c027:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c02b:	6a 0c                	push   0xc
c001c02d:	6a 00                	push   0x0
c001c02f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c033:	56                   	push   esi
c001c034:	e8 87 44 fe ff       	call   c00004c0 <memset>
c001c039:	58                   	pop    eax
c001c03a:	5a                   	pop    edx
c001c03b:	6a 00                	push   0x0
c001c03d:	6a 00                	push   0x0
c001c03f:	6a 00                	push   0x0
c001c041:	6a 00                	push   0x0
c001c043:	56                   	push   esi
c001c044:	53                   	push   ebx
c001c045:	e8 8a fc ff ff       	call   c001bcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c04a:	83 c4 1c             	add    esp,0x1c
c001c04d:	6a 0c                	push   0xc
c001c04f:	6a 00                	push   0x0
c001c051:	56                   	push   esi
c001c052:	e8 69 44 fe ff       	call   c00004c0 <memset>
c001c057:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c05c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c061:	59                   	pop    ecx
c001c062:	58                   	pop    eax
c001c063:	6a 01                	push   0x1
c001c065:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c069:	50                   	push   eax
c001c06a:	6a 00                	push   0x0
c001c06c:	6a 12                	push   0x12
c001c06e:	56                   	push   esi
c001c06f:	53                   	push   ebx
c001c070:	e8 5f fc ff ff       	call   c001bcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c075:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c079:	83 c4 20             	add    esp,0x20
c001c07c:	83 e0 7f             	and    eax,0x7f
c001c07f:	3c 70                	cmp    al,0x70
c001c081:	74 15                	je     c001c098 <ATAPI::detectMedia()+0x76>
c001c083:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c08a:	75 0c                	jne    c001c098 <ATAPI::detectMedia()+0x76>
c001c08c:	83 ec 0c             	sub    esp,0xc
c001c08f:	53                   	push   ebx
c001c090:	e8 81 ff ff ff       	call   c001c016 <ATAPI::diskInserted()>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c09c:	83 e0 0f             	and    eax,0xf
c001c09f:	3c 02                	cmp    al,0x2
c001c0a1:	75 1b                	jne    c001c0be <ATAPI::detectMedia()+0x9c>
c001c0a3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c0a8:	75 2d                	jne    c001c0d7 <ATAPI::detectMedia()+0xb5>
c001c0aa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c0b1:	74 24                	je     c001c0d7 <ATAPI::detectMedia()+0xb5>
c001c0b3:	83 ec 0c             	sub    esp,0xc
c001c0b6:	53                   	push   ebx
c001c0b7:	e8 d8 fe ff ff       	call   c001bf94 <ATAPI::diskRemoved()>
c001c0bc:	eb 16                	jmp    c001c0d4 <ATAPI::detectMedia()+0xb2>
c001c0be:	84 c0                	test   al,al
c001c0c0:	75 15                	jne    c001c0d7 <ATAPI::detectMedia()+0xb5>
c001c0c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c0c9:	75 0c                	jne    c001c0d7 <ATAPI::detectMedia()+0xb5>
c001c0cb:	83 ec 0c             	sub    esp,0xc
c001c0ce:	53                   	push   ebx
c001c0cf:	e8 42 ff ff ff       	call   c001c016 <ATAPI::diskInserted()>
c001c0d4:	83 c4 10             	add    esp,0x10
c001c0d7:	83 c4 24             	add    esp,0x24
c001c0da:	5b                   	pop    ebx
c001c0db:	5e                   	pop    esi
c001c0dc:	c3                   	ret    
c001c0dd:	90                   	nop

c001c0de <ATAPI::open(int, int, void*)>:
c001c0de:	56                   	push   esi
c001c0df:	53                   	push   ebx
c001c0e0:	50                   	push   eax
c001c0e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c0ed:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c0f3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c0f9:	c1 e0 06             	shl    eax,0x6
c001c0fc:	01 d0                	add    eax,edx
c001c0fe:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c105:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c10b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c112:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c11c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c122:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c129:	6a 04                	push   0x4
c001c12b:	6a 0c                	push   0xc
c001c12d:	51                   	push   ecx
c001c12e:	52                   	push   edx
c001c12f:	e8 ae e3 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c134:	90                   	nop
c001c135:	90                   	nop
c001c136:	6a 00                	push   0x0
c001c138:	6a 0c                	push   0xc
c001c13a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c141:	50                   	push   eax
c001c142:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c148:	e8 95 e3 ff ff       	call   c001a4e2 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c14d:	83 c4 14             	add    esp,0x14
c001c150:	68 78 01 00 00       	push   0x178
c001c155:	e8 13 b7 fe ff       	call   c000786d <malloc>
c001c15a:	83 c4 0c             	add    esp,0xc
c001c15d:	89 c6                	mov    esi,eax
c001c15f:	6a 00                	push   0x0
c001c161:	68 ff ff ff 7f       	push   0x7fffffff
c001c166:	6a 00                	push   0x0
c001c168:	6a 00                	push   0x0
c001c16a:	53                   	push   ebx
c001c16b:	68 27 15 02 c0       	push   0xc0021527
c001c170:	50                   	push   eax
c001c171:	e8 b0 09 ff ff       	call   c000cb26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c176:	83 c4 14             	add    esp,0x14
c001c179:	56                   	push   esi
c001c17a:	e8 67 0a ff ff       	call   c000cbe6 <LogicalDisk::assignDriveLetter()>
c001c17f:	5a                   	pop    edx
c001c180:	0f be c0             	movsx  eax,al
c001c183:	59                   	pop    ecx
c001c184:	50                   	push   eax
c001c185:	68 78 13 02 c0       	push   0xc0021378
c001c18a:	e8 7f e4 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001c18f:	58                   	pop    eax
c001c190:	5a                   	pop    edx
c001c191:	56                   	push   esi
c001c192:	53                   	push   ebx
c001c193:	e8 b4 f8 fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001c198:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c19e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1a1:	e8 dc fc fe ff       	call   c000be82 <PhysicalDisk::startCache()>
c001c1a6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c1ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1b0:	e8 6d fe ff ff       	call   c001c022 <ATAPI::detectMedia()>
c001c1b5:	83 c4 14             	add    esp,0x14
c001c1b8:	31 c0                	xor    eax,eax
c001c1ba:	5b                   	pop    ebx
c001c1bb:	5e                   	pop    esi
c001c1bc:	c3                   	ret    
c001c1bd:	90                   	nop

c001c1be <ATAPI::read(unsigned long long, int, void*)>:
c001c1be:	55                   	push   ebp
c001c1bf:	57                   	push   edi
c001c1c0:	56                   	push   esi
c001c1c1:	53                   	push   ebx
c001c1c2:	83 ec 1c             	sub    esp,0x1c
c001c1c5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c1c9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1cd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c1d1:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c1d8:	74 3c                	je     c001c216 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c1da:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c1de:	b9 03 00 00 00       	mov    ecx,0x3
c001c1e3:	fc                   	cld    
c001c1e4:	31 c0                	xor    eax,eax
c001c1e6:	0f ce                	bswap  esi
c001c1e8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c1ea:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c1ef:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c1f3:	89 e8                	mov    eax,ebp
c001c1f5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c1f9:	50                   	push   eax
c001c1fa:	50                   	push   eax
c001c1fb:	55                   	push   ebp
c001c1fc:	c1 e5 0b             	shl    ebp,0xb
c001c1ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c203:	6a 00                	push   0x0
c001c205:	55                   	push   ebp
c001c206:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c20a:	50                   	push   eax
c001c20b:	53                   	push   ebx
c001c20c:	e8 c3 fa ff ff       	call   c001bcd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c211:	83 c4 20             	add    esp,0x20
c001c214:	eb 1a                	jmp    c001c230 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c216:	83 ec 0c             	sub    esp,0xc
c001c219:	53                   	push   ebx
c001c21a:	e8 03 fe ff ff       	call   c001c022 <ATAPI::detectMedia()>
c001c21f:	83 c4 10             	add    esp,0x10
c001c222:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c229:	75 af                	jne    c001c1da <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c22b:	b8 02 00 00 00       	mov    eax,0x2
c001c230:	83 c4 1c             	add    esp,0x1c
c001c233:	5b                   	pop    ebx
c001c234:	5e                   	pop    esi
c001c235:	5f                   	pop    edi
c001c236:	5d                   	pop    ebp
c001c237:	c3                   	ret    

c001c238 <SATA::close(int, int, void*)>:
c001c238:	83 ec 0c             	sub    esp,0xc
c001c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c245:	85 c0                	test   eax,eax
c001c247:	74 0c                	je     c001c255 <SATA::close(int, int, void*)+0x1d>
c001c249:	83 ec 0c             	sub    esp,0xc
c001c24c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c24e:	50                   	push   eax
c001c24f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c252:	83 c4 10             	add    esp,0x10
c001c255:	31 c0                	xor    eax,eax
c001c257:	83 c4 0c             	add    esp,0xc
c001c25a:	c3                   	ret    
c001c25b:	90                   	nop

c001c25c <SATA::powerSaving(PowerSavingLevel)>:
c001c25c:	c3                   	ret    
c001c25d:	90                   	nop

c001c25e <SATA::open(int, int, void*)>:
c001c25e:	56                   	push   esi
c001c25f:	53                   	push   ebx
c001c260:	50                   	push   eax
c001c261:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c269:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c273:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c279:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c283:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c287:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c291:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c297:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c29e:	e8 a6 b8 fe ff       	call   c0007b49 <Phys::allocatePage()>
c001c2a3:	89 c6                	mov    esi,eax
c001c2a5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c2ab:	81 c6 00 10 00 00    	add    esi,0x1000
c001c2b1:	e8 93 b8 fe ff       	call   c0007b49 <Phys::allocatePage()>
c001c2b6:	39 c6                	cmp    esi,eax
c001c2b8:	74 10                	je     c001c2ca <SATA::open(int, int, void*)+0x6c>
c001c2ba:	83 ec 0c             	sub    esp,0xc
c001c2bd:	68 c0 13 02 c0       	push   0xc00213c0
c001c2c2:	e8 08 41 ff ff       	call   c00103cf <KePanic(char const*)>
c001c2c7:	83 c4 10             	add    esp,0x10
c001c2ca:	83 ec 0c             	sub    esp,0xc
c001c2cd:	6a 02                	push   0x2
c001c2cf:	e8 7d d0 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001c2d4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c2da:	6a 03                	push   0x3
c001c2dc:	50                   	push   eax
c001c2dd:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c2e3:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c2e9:	e8 26 d7 fe ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c2ee:	83 c4 14             	add    esp,0x14
c001c2f1:	53                   	push   ebx
c001c2f2:	e8 8b fb fe ff       	call   c000be82 <PhysicalDisk::startCache()>
c001c2f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2fa:	e8 f7 0c ff ff       	call   c000cff6 <createPartitionsForDisk(PhysicalDisk*)>
c001c2ff:	83 c4 14             	add    esp,0x14
c001c302:	31 c0                	xor    eax,eax
c001c304:	5b                   	pop    ebx
c001c305:	5e                   	pop    esi
c001c306:	c3                   	ret    
c001c307:	90                   	nop

c001c308 <SATA::SATA()>:
c001c308:	83 ec 0c             	sub    esp,0xc
c001c30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30f:	83 ec 04             	sub    esp,0x4
c001c312:	68 00 02 00 00       	push   0x200
c001c317:	68 d4 13 02 c0       	push   0xc00213d4
c001c31c:	50                   	push   eax
c001c31d:	e8 f8 fa fe ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c322:	83 c4 10             	add    esp,0x10
c001c325:	ba 44 14 02 c0       	mov    edx,0xc0021444
c001c32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c32e:	89 10                	mov    DWORD PTR [eax],edx
c001c330:	90                   	nop
c001c331:	83 c4 0c             	add    esp,0xc
c001c334:	c3                   	ret    
c001c335:	90                   	nop

c001c336 <SATA::access(unsigned long long, int, void*, bool)>:
c001c336:	55                   	push   ebp
c001c337:	57                   	push   edi
c001c338:	56                   	push   esi
c001c339:	53                   	push   ebx
c001c33a:	83 ec 2c             	sub    esp,0x2c
c001c33d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c341:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c349:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c34d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c351:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c356:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c35a:	7e 10                	jle    c001c36c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c35c:	83 ec 0c             	sub    esp,0xc
c001c35f:	68 e4 13 02 c0       	push   0xc00213e4
c001c364:	e8 66 40 ff ff       	call   c00103cf <KePanic(char const*)>
c001c369:	83 c4 10             	add    esp,0x10
c001c36c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c372:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c37e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c382:	89 d0                	mov    eax,edx
c001c384:	c1 e0 07             	shl    eax,0x7
c001c387:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c38b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c395:	51                   	push   ecx
c001c396:	8d 42 02             	lea    eax,[edx+0x2]
c001c399:	51                   	push   ecx
c001c39a:	c1 e0 07             	shl    eax,0x7
c001c39d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c3a1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c3a5:	50                   	push   eax
c001c3a6:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c3ac:	e8 b9 ec ff ff       	call   c001b06a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c3b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3b5:	83 c4 10             	add    esp,0x10
c001c3b8:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c3bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3c1:	0f 84 4f 01 00 00    	je     c001c516 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c3c7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c3cb:	c1 e0 09             	shl    eax,0x9
c001c3ce:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c3d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c3d7:	74 0e                	je     c001c3e7 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c3d9:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c3df:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c3e3:	89 c1                	mov    ecx,eax
c001c3e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c3e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c3eb:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c3f1:	8d 42 02             	lea    eax,[edx+0x2]
c001c3f4:	c1 e0 07             	shl    eax,0x7
c001c3f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c3fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3fd:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c403:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c409:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c40d:	c1 e1 05             	shl    ecx,0x5
c001c410:	01 c8                	add    eax,ecx
c001c412:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c416:	83 e1 01             	and    ecx,0x1
c001c419:	89 ce                	mov    esi,ecx
c001c41b:	8a 08                	mov    cl,BYTE PTR [eax]
c001c41d:	c1 e6 06             	shl    esi,0x6
c001c420:	83 e1 bf             	and    ecx,0xffffffbf
c001c423:	09 f1                	or     ecx,esi
c001c425:	88 08                	mov    BYTE PTR [eax],cl
c001c427:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c429:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c42f:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c435:	89 08                	mov    DWORD PTR [eax],ecx
c001c437:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c43d:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c443:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c449:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c44c:	50                   	push   eax
c001c44d:	68 90 00 00 00       	push   0x90
c001c452:	6a 00                	push   0x0
c001c454:	56                   	push   esi
c001c455:	e8 66 40 fe ff       	call   c00004c0 <memset>
c001c45a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c460:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c464:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c46a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c46e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c472:	83 c4 10             	add    esp,0x10
c001c475:	48                   	dec    eax
c001c476:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c47b:	89 c1                	mov    ecx,eax
c001c47d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c483:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c488:	09 c8                	or     eax,ecx
c001c48a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c490:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c493:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c49a:	66 25 00 7f          	and    ax,0x7f00
c001c49e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4a2:	66 0d 27 80          	or     ax,0x8027
c001c4a6:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c4ab:	66 89 06             	mov    WORD PTR [esi],ax
c001c4ae:	19 c0                	sbb    eax,eax
c001c4b0:	83 e0 f0             	and    eax,0xfffffff0
c001c4b3:	83 c0 35             	add    eax,0x35
c001c4b6:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c4b9:	89 e8                	mov    eax,ebp
c001c4bb:	c1 e8 10             	shr    eax,0x10
c001c4be:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c4c1:	89 e8                	mov    eax,ebp
c001c4c3:	c1 e8 18             	shr    eax,0x18
c001c4c6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c4c9:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c4cd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c4d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c4d4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c4d7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c4db:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c4df:	89 d6                	mov    esi,edx
c001c4e1:	31 c0                	xor    eax,eax
c001c4e3:	c1 e6 07             	shl    esi,0x7
c001c4e6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4ea:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c4f0:	80 e1 88             	and    cl,0x88
c001c4f3:	74 0a                	je     c001c4ff <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c4f5:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c4fa:	74 0a                	je     c001c506 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c4fc:	40                   	inc    eax
c001c4fd:	eb eb                	jmp    c001c4ea <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c4ff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c504:	75 17                	jne    c001c51d <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c506:	83 ec 0c             	sub    esp,0xc
c001c509:	68 1d 14 02 c0       	push   0xc002141d
c001c50e:	e8 fb e0 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001c513:	83 c4 10             	add    esp,0x10
c001c516:	b8 01 00 00 00       	mov    eax,0x1
c001c51b:	eb 5d                	jmp    c001c57a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c51d:	b8 01 00 00 00       	mov    eax,0x1
c001c522:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c526:	c1 e2 07             	shl    edx,0x7
c001c529:	d3 e0                	shl    eax,cl
c001c52b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c52f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c535:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c53b:	85 c8                	test   eax,ecx
c001c53d:	74 16                	je     c001c555 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c53f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c545:	0f ba e1 1e          	bt     ecx,0x1e
c001c549:	73 ea                	jae    c001c535 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c54b:	83 ec 0c             	sub    esp,0xc
c001c54e:	68 2b 14 02 c0       	push   0xc002142b
c001c553:	eb b9                	jmp    c001c50e <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c555:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c55b:	0f ba e0 1e          	bt     eax,0x1e
c001c55f:	72 b5                	jb     c001c516 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c561:	31 c0                	xor    eax,eax
c001c563:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c568:	75 10                	jne    c001c57a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c56a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c570:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c574:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c578:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c57a:	83 c4 2c             	add    esp,0x2c
c001c57d:	5b                   	pop    ebx
c001c57e:	5e                   	pop    esi
c001c57f:	5f                   	pop    edi
c001c580:	5d                   	pop    ebp
c001c581:	c3                   	ret    

c001c582 <SATA::read(unsigned long long, int, void*)>:
c001c582:	55                   	push   ebp
c001c583:	57                   	push   edi
c001c584:	56                   	push   esi
c001c585:	be 04 00 00 00       	mov    esi,0x4
c001c58a:	53                   	push   ebx
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c592:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c596:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c599:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c59d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c5a1:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c5a7:	0f 87 1a 02 00 00    	ja     c001c7c7 <SATA::read(unsigned long long, int, void*)+0x245>
c001c5ad:	be 06 00 00 00       	mov    esi,0x6
c001c5b2:	85 c9                	test   ecx,ecx
c001c5b4:	0f 84 0d 02 00 00    	je     c001c7c7 <SATA::read(unsigned long long, int, void*)+0x245>
c001c5ba:	56                   	push   esi
c001c5bb:	56                   	push   esi
c001c5bc:	6a 00                	push   0x0
c001c5be:	51                   	push   ecx
c001c5bf:	53                   	push   ebx
c001c5c0:	52                   	push   edx
c001c5c1:	50                   	push   eax
c001c5c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5c6:	e8 6b fd ff ff       	call   c001c336 <SATA::access(unsigned long long, int, void*, bool)>
c001c5cb:	83 c4 20             	add    esp,0x20
c001c5ce:	89 c6                	mov    esi,eax
c001c5d0:	85 c0                	test   eax,eax
c001c5d2:	0f 85 ea 01 00 00    	jne    c001c7c2 <SATA::read(unsigned long long, int, void*)+0x240>
c001c5d8:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c5de:	bb 0a 00 00 00       	mov    ebx,0xa
c001c5e3:	50                   	push   eax
c001c5e4:	50                   	push   eax
c001c5e5:	6a 0f                	push   0xf
c001c5e7:	6a 00                	push   0x0
c001c5e9:	e8 87 f2 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c5ee:	5a                   	pop    edx
c001c5ef:	0f b6 c0             	movzx  eax,al
c001c5f2:	59                   	pop    ecx
c001c5f3:	b9 10 27 00 00       	mov    ecx,0x2710
c001c5f8:	50                   	push   eax
c001c5f9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5fe:	99                   	cdq    
c001c5ff:	f7 f9                	idiv   ecx
c001c601:	99                   	cdq    
c001c602:	f7 fb                	idiv   ebx
c001c604:	8d 42 30             	lea    eax,[edx+0x30]
c001c607:	0f b6 c0             	movzx  eax,al
c001c60a:	50                   	push   eax
c001c60b:	e8 54 f2 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c610:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c616:	5f                   	pop    edi
c001c617:	5d                   	pop    ebp
c001c618:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c61d:	6a 0f                	push   0xf
c001c61f:	6a 00                	push   0x0
c001c621:	e8 4f f2 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c626:	5a                   	pop    edx
c001c627:	0f b6 c0             	movzx  eax,al
c001c62a:	59                   	pop    ecx
c001c62b:	50                   	push   eax
c001c62c:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c631:	99                   	cdq    
c001c632:	f7 fd                	idiv   ebp
c001c634:	99                   	cdq    
c001c635:	f7 fb                	idiv   ebx
c001c637:	8d 42 30             	lea    eax,[edx+0x30]
c001c63a:	0f b6 c0             	movzx  eax,al
c001c63d:	50                   	push   eax
c001c63e:	e8 21 f2 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c643:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c649:	5f                   	pop    edi
c001c64a:	bf 64 00 00 00       	mov    edi,0x64
c001c64f:	58                   	pop    eax
c001c650:	6a 0f                	push   0xf
c001c652:	6a 00                	push   0x0
c001c654:	e8 1c f2 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c659:	5a                   	pop    edx
c001c65a:	0f b6 c0             	movzx  eax,al
c001c65d:	59                   	pop    ecx
c001c65e:	50                   	push   eax
c001c65f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c664:	99                   	cdq    
c001c665:	f7 ff                	idiv   edi
c001c667:	99                   	cdq    
c001c668:	f7 fb                	idiv   ebx
c001c66a:	8d 42 30             	lea    eax,[edx+0x30]
c001c66d:	0f b6 c0             	movzx  eax,al
c001c670:	50                   	push   eax
c001c671:	e8 ee f1 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c676:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c67c:	58                   	pop    eax
c001c67d:	5a                   	pop    edx
c001c67e:	6a 0f                	push   0xf
c001c680:	6a 00                	push   0x0
c001c682:	e8 ee f1 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c687:	59                   	pop    ecx
c001c688:	0f b6 c0             	movzx  eax,al
c001c68b:	5a                   	pop    edx
c001c68c:	50                   	push   eax
c001c68d:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c692:	99                   	cdq    
c001c693:	f7 fb                	idiv   ebx
c001c695:	99                   	cdq    
c001c696:	f7 fb                	idiv   ebx
c001c698:	8d 42 30             	lea    eax,[edx+0x30]
c001c69b:	0f b6 c0             	movzx  eax,al
c001c69e:	50                   	push   eax
c001c69f:	e8 c0 f1 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c6a4:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c6aa:	59                   	pop    ecx
c001c6ab:	58                   	pop    eax
c001c6ac:	6a 0f                	push   0xf
c001c6ae:	6a 00                	push   0x0
c001c6b0:	e8 c0 f1 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c6b5:	5a                   	pop    edx
c001c6b6:	0f b6 c0             	movzx  eax,al
c001c6b9:	59                   	pop    ecx
c001c6ba:	50                   	push   eax
c001c6bb:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c6c0:	99                   	cdq    
c001c6c1:	f7 fb                	idiv   ebx
c001c6c3:	8d 42 30             	lea    eax,[edx+0x30]
c001c6c6:	0f b6 c0             	movzx  eax,al
c001c6c9:	50                   	push   eax
c001c6ca:	e8 95 f1 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c6cf:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c6d5:	58                   	pop    eax
c001c6d6:	5a                   	pop    edx
c001c6d7:	6a 0f                	push   0xf
c001c6d9:	6a 00                	push   0x0
c001c6db:	e8 95 f1 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c6e0:	59                   	pop    ecx
c001c6e1:	0f b6 c0             	movzx  eax,al
c001c6e4:	5a                   	pop    edx
c001c6e5:	b9 10 27 00 00       	mov    ecx,0x2710
c001c6ea:	50                   	push   eax
c001c6eb:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c6f0:	99                   	cdq    
c001c6f1:	f7 f9                	idiv   ecx
c001c6f3:	99                   	cdq    
c001c6f4:	f7 fb                	idiv   ebx
c001c6f6:	8d 42 30             	lea    eax,[edx+0x30]
c001c6f9:	0f b6 c0             	movzx  eax,al
c001c6fc:	50                   	push   eax
c001c6fd:	e8 62 f1 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c702:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c708:	59                   	pop    ecx
c001c709:	58                   	pop    eax
c001c70a:	6a 0f                	push   0xf
c001c70c:	6a 00                	push   0x0
c001c70e:	e8 62 f1 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c713:	5a                   	pop    edx
c001c714:	0f b6 c0             	movzx  eax,al
c001c717:	59                   	pop    ecx
c001c718:	50                   	push   eax
c001c719:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c71e:	99                   	cdq    
c001c71f:	f7 fd                	idiv   ebp
c001c721:	99                   	cdq    
c001c722:	f7 fb                	idiv   ebx
c001c724:	8d 42 30             	lea    eax,[edx+0x30]
c001c727:	0f b6 c0             	movzx  eax,al
c001c72a:	50                   	push   eax
c001c72b:	e8 34 f1 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c730:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c736:	5d                   	pop    ebp
c001c737:	58                   	pop    eax
c001c738:	6a 0f                	push   0xf
c001c73a:	6a 00                	push   0x0
c001c73c:	e8 34 f1 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c741:	5a                   	pop    edx
c001c742:	0f b6 c0             	movzx  eax,al
c001c745:	59                   	pop    ecx
c001c746:	50                   	push   eax
c001c747:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c74c:	99                   	cdq    
c001c74d:	f7 ff                	idiv   edi
c001c74f:	99                   	cdq    
c001c750:	f7 fb                	idiv   ebx
c001c752:	8d 42 30             	lea    eax,[edx+0x30]
c001c755:	0f b6 c0             	movzx  eax,al
c001c758:	50                   	push   eax
c001c759:	e8 06 f1 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c75e:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c764:	5f                   	pop    edi
c001c765:	5d                   	pop    ebp
c001c766:	6a 0f                	push   0xf
c001c768:	6a 00                	push   0x0
c001c76a:	e8 06 f1 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c76f:	5a                   	pop    edx
c001c770:	0f b6 c0             	movzx  eax,al
c001c773:	59                   	pop    ecx
c001c774:	50                   	push   eax
c001c775:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c77a:	99                   	cdq    
c001c77b:	f7 fb                	idiv   ebx
c001c77d:	99                   	cdq    
c001c77e:	f7 fb                	idiv   ebx
c001c780:	8d 42 30             	lea    eax,[edx+0x30]
c001c783:	0f b6 c0             	movzx  eax,al
c001c786:	50                   	push   eax
c001c787:	e8 d8 f0 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c78c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c792:	5f                   	pop    edi
c001c793:	5d                   	pop    ebp
c001c794:	6a 0f                	push   0xf
c001c796:	6a 00                	push   0x0
c001c798:	e8 d8 f0 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c79d:	5a                   	pop    edx
c001c79e:	0f b6 c0             	movzx  eax,al
c001c7a1:	59                   	pop    ecx
c001c7a2:	50                   	push   eax
c001c7a3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c7a8:	99                   	cdq    
c001c7a9:	f7 fb                	idiv   ebx
c001c7ab:	83 c2 30             	add    edx,0x30
c001c7ae:	0f b6 d2             	movzx  edx,dl
c001c7b1:	52                   	push   edx
c001c7b2:	e8 ad f0 ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c7b7:	83 c4 10             	add    esp,0x10
c001c7ba:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c7c0:	eb 05                	jmp    c001c7c7 <SATA::read(unsigned long long, int, void*)+0x245>
c001c7c2:	be 01 00 00 00       	mov    esi,0x1
c001c7c7:	83 c4 0c             	add    esp,0xc
c001c7ca:	89 f0                	mov    eax,esi
c001c7cc:	5b                   	pop    ebx
c001c7cd:	5e                   	pop    esi
c001c7ce:	5f                   	pop    edi
c001c7cf:	5d                   	pop    ebp
c001c7d0:	c3                   	ret    
c001c7d1:	90                   	nop

c001c7d2 <SATA::write(unsigned long long, int, void*)>:
c001c7d2:	55                   	push   ebp
c001c7d3:	b8 04 00 00 00       	mov    eax,0x4
c001c7d8:	57                   	push   edi
c001c7d9:	56                   	push   esi
c001c7da:	53                   	push   ebx
c001c7db:	83 ec 1c             	sub    esp,0x1c
c001c7de:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c7e2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c7e6:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c7e9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c7ed:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c7f1:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c7f7:	0f 87 32 02 00 00    	ja     c001ca2f <SATA::write(unsigned long long, int, void*)+0x25d>
c001c7fd:	b8 06 00 00 00       	mov    eax,0x6
c001c802:	85 ff                	test   edi,edi
c001c804:	0f 84 25 02 00 00    	je     c001ca2f <SATA::write(unsigned long long, int, void*)+0x25d>
c001c80a:	89 ee                	mov    esi,ebp
c001c80c:	c1 e6 09             	shl    esi,0x9
c001c80f:	01 fe                	add    esi,edi
c001c811:	89 c8                	mov    eax,ecx
c001c813:	89 da                	mov    edx,ebx
c001c815:	83 c0 01             	add    eax,0x1
c001c818:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c81c:	83 d2 00             	adc    edx,0x0
c001c81f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c823:	50                   	push   eax
c001c824:	50                   	push   eax
c001c825:	6a 01                	push   0x1
c001c827:	57                   	push   edi
c001c828:	81 c7 00 02 00 00    	add    edi,0x200
c001c82e:	6a 01                	push   0x1
c001c830:	53                   	push   ebx
c001c831:	51                   	push   ecx
c001c832:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c836:	e8 fb fa ff ff       	call   c001c336 <SATA::access(unsigned long long, int, void*, bool)>
c001c83b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c83f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c843:	83 c4 20             	add    esp,0x20
c001c846:	39 f7                	cmp    edi,esi
c001c848:	75 c7                	jne    c001c811 <SATA::write(unsigned long long, int, void*)+0x3f>
c001c84a:	bb 0a 00 00 00       	mov    ebx,0xa
c001c84f:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c855:	bd 10 27 00 00       	mov    ebp,0x2710
c001c85a:	50                   	push   eax
c001c85b:	50                   	push   eax
c001c85c:	6a 0f                	push   0xf
c001c85e:	6a 00                	push   0x0
c001c860:	e8 10 f0 ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c865:	5a                   	pop    edx
c001c866:	0f b6 c0             	movzx  eax,al
c001c869:	59                   	pop    ecx
c001c86a:	50                   	push   eax
c001c86b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c870:	99                   	cdq    
c001c871:	f7 fd                	idiv   ebp
c001c873:	99                   	cdq    
c001c874:	f7 fb                	idiv   ebx
c001c876:	8d 42 30             	lea    eax,[edx+0x30]
c001c879:	0f b6 c0             	movzx  eax,al
c001c87c:	50                   	push   eax
c001c87d:	e8 e2 ef ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c882:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c888:	5e                   	pop    esi
c001c889:	5f                   	pop    edi
c001c88a:	bf e8 03 00 00       	mov    edi,0x3e8
c001c88f:	6a 0f                	push   0xf
c001c891:	6a 00                	push   0x0
c001c893:	e8 dd ef ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c898:	5a                   	pop    edx
c001c899:	0f b6 c0             	movzx  eax,al
c001c89c:	59                   	pop    ecx
c001c89d:	50                   	push   eax
c001c89e:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c8a3:	99                   	cdq    
c001c8a4:	f7 ff                	idiv   edi
c001c8a6:	99                   	cdq    
c001c8a7:	f7 fb                	idiv   ebx
c001c8a9:	8d 42 30             	lea    eax,[edx+0x30]
c001c8ac:	0f b6 c0             	movzx  eax,al
c001c8af:	50                   	push   eax
c001c8b0:	e8 af ef ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c8b5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c8bb:	5e                   	pop    esi
c001c8bc:	be 64 00 00 00       	mov    esi,0x64
c001c8c1:	58                   	pop    eax
c001c8c2:	6a 0f                	push   0xf
c001c8c4:	6a 00                	push   0x0
c001c8c6:	e8 aa ef ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c8cb:	5a                   	pop    edx
c001c8cc:	0f b6 c0             	movzx  eax,al
c001c8cf:	59                   	pop    ecx
c001c8d0:	50                   	push   eax
c001c8d1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c8d6:	99                   	cdq    
c001c8d7:	f7 fe                	idiv   esi
c001c8d9:	99                   	cdq    
c001c8da:	f7 fb                	idiv   ebx
c001c8dc:	8d 42 30             	lea    eax,[edx+0x30]
c001c8df:	0f b6 c0             	movzx  eax,al
c001c8e2:	50                   	push   eax
c001c8e3:	e8 7c ef ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c8e8:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c8ee:	58                   	pop    eax
c001c8ef:	5a                   	pop    edx
c001c8f0:	6a 0f                	push   0xf
c001c8f2:	6a 00                	push   0x0
c001c8f4:	e8 7c ef ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c8f9:	59                   	pop    ecx
c001c8fa:	0f b6 c0             	movzx  eax,al
c001c8fd:	5a                   	pop    edx
c001c8fe:	50                   	push   eax
c001c8ff:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c904:	99                   	cdq    
c001c905:	f7 fb                	idiv   ebx
c001c907:	99                   	cdq    
c001c908:	f7 fb                	idiv   ebx
c001c90a:	8d 42 30             	lea    eax,[edx+0x30]
c001c90d:	0f b6 c0             	movzx  eax,al
c001c910:	50                   	push   eax
c001c911:	e8 4e ef ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c916:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c91c:	59                   	pop    ecx
c001c91d:	58                   	pop    eax
c001c91e:	6a 0f                	push   0xf
c001c920:	6a 00                	push   0x0
c001c922:	e8 4e ef ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c927:	5a                   	pop    edx
c001c928:	0f b6 c0             	movzx  eax,al
c001c92b:	59                   	pop    ecx
c001c92c:	50                   	push   eax
c001c92d:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c932:	99                   	cdq    
c001c933:	f7 fb                	idiv   ebx
c001c935:	83 c2 30             	add    edx,0x30
c001c938:	0f b6 d2             	movzx  edx,dl
c001c93b:	52                   	push   edx
c001c93c:	e8 23 ef ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c941:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c947:	58                   	pop    eax
c001c948:	5a                   	pop    edx
c001c949:	6a 0f                	push   0xf
c001c94b:	6a 00                	push   0x0
c001c94d:	e8 23 ef ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c952:	59                   	pop    ecx
c001c953:	0f b6 c0             	movzx  eax,al
c001c956:	5a                   	pop    edx
c001c957:	50                   	push   eax
c001c958:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c95d:	99                   	cdq    
c001c95e:	f7 fd                	idiv   ebp
c001c960:	99                   	cdq    
c001c961:	f7 fb                	idiv   ebx
c001c963:	8d 42 30             	lea    eax,[edx+0x30]
c001c966:	0f b6 c0             	movzx  eax,al
c001c969:	50                   	push   eax
c001c96a:	e8 f5 ee ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c96f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c975:	59                   	pop    ecx
c001c976:	5d                   	pop    ebp
c001c977:	6a 0f                	push   0xf
c001c979:	6a 00                	push   0x0
c001c97b:	e8 f5 ee ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c980:	5a                   	pop    edx
c001c981:	0f b6 c0             	movzx  eax,al
c001c984:	59                   	pop    ecx
c001c985:	50                   	push   eax
c001c986:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c98b:	99                   	cdq    
c001c98c:	f7 ff                	idiv   edi
c001c98e:	99                   	cdq    
c001c98f:	f7 fb                	idiv   ebx
c001c991:	8d 42 30             	lea    eax,[edx+0x30]
c001c994:	0f b6 c0             	movzx  eax,al
c001c997:	50                   	push   eax
c001c998:	e8 c7 ee ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c99d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c9a3:	5f                   	pop    edi
c001c9a4:	5d                   	pop    ebp
c001c9a5:	6a 0f                	push   0xf
c001c9a7:	6a 00                	push   0x0
c001c9a9:	e8 c7 ee ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c9ae:	5a                   	pop    edx
c001c9af:	0f b6 c0             	movzx  eax,al
c001c9b2:	59                   	pop    ecx
c001c9b3:	50                   	push   eax
c001c9b4:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c9b9:	99                   	cdq    
c001c9ba:	f7 fe                	idiv   esi
c001c9bc:	99                   	cdq    
c001c9bd:	f7 fb                	idiv   ebx
c001c9bf:	8d 42 30             	lea    eax,[edx+0x30]
c001c9c2:	0f b6 c0             	movzx  eax,al
c001c9c5:	50                   	push   eax
c001c9c6:	e8 99 ee ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c9cb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c9d1:	5e                   	pop    esi
c001c9d2:	5f                   	pop    edi
c001c9d3:	6a 0f                	push   0xf
c001c9d5:	6a 00                	push   0x0
c001c9d7:	e8 99 ee ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001c9dc:	5d                   	pop    ebp
c001c9dd:	0f b6 c0             	movzx  eax,al
c001c9e0:	5a                   	pop    edx
c001c9e1:	50                   	push   eax
c001c9e2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c9e7:	99                   	cdq    
c001c9e8:	f7 fb                	idiv   ebx
c001c9ea:	99                   	cdq    
c001c9eb:	f7 fb                	idiv   ebx
c001c9ed:	8d 42 30             	lea    eax,[edx+0x30]
c001c9f0:	0f b6 c0             	movzx  eax,al
c001c9f3:	50                   	push   eax
c001c9f4:	e8 6b ee ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001c9f9:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c9ff:	59                   	pop    ecx
c001ca00:	5e                   	pop    esi
c001ca01:	6a 0f                	push   0xf
c001ca03:	6a 00                	push   0x0
c001ca05:	e8 6b ee ff ff       	call   c001b875 <combineColours(unsigned char, unsigned char)>
c001ca0a:	5f                   	pop    edi
c001ca0b:	0f b6 c0             	movzx  eax,al
c001ca0e:	5d                   	pop    ebp
c001ca0f:	50                   	push   eax
c001ca10:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca15:	99                   	cdq    
c001ca16:	f7 fb                	idiv   ebx
c001ca18:	83 c2 30             	add    edx,0x30
c001ca1b:	0f b6 d2             	movzx  edx,dl
c001ca1e:	52                   	push   edx
c001ca1f:	e8 40 ee ff ff       	call   c001b864 <combineCharAndColour(char, unsigned char)>
c001ca24:	83 c4 10             	add    esp,0x10
c001ca27:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ca2d:	31 c0                	xor    eax,eax
c001ca2f:	83 c4 1c             	add    esp,0x1c
c001ca32:	5b                   	pop    ebx
c001ca33:	5e                   	pop    esi
c001ca34:	5f                   	pop    edi
c001ca35:	5d                   	pop    ebp
c001ca36:	c3                   	ret    
c001ca37:	90                   	nop

c001ca38 <SATAPI::write(unsigned long long, int, void*)>:
c001ca38:	b8 03 00 00 00       	mov    eax,0x3
c001ca3d:	c3                   	ret    

c001ca3e <SATAPI::close(int, int, void*)>:
c001ca3e:	83 ec 0c             	sub    esp,0xc
c001ca41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca45:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ca4b:	85 c0                	test   eax,eax
c001ca4d:	74 0c                	je     c001ca5b <SATAPI::close(int, int, void*)+0x1d>
c001ca4f:	83 ec 0c             	sub    esp,0xc
c001ca52:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca54:	50                   	push   eax
c001ca55:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ca58:	83 c4 10             	add    esp,0x10
c001ca5b:	31 c0                	xor    eax,eax
c001ca5d:	83 c4 0c             	add    esp,0xc
c001ca60:	c3                   	ret    
c001ca61:	90                   	nop

c001ca62 <SATAPI::SATAPI()>:
c001ca62:	83 ec 0c             	sub    esp,0xc
c001ca65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca69:	83 ec 04             	sub    esp,0x4
c001ca6c:	68 00 08 00 00       	push   0x800
c001ca71:	68 74 14 02 c0       	push   0xc0021474
c001ca76:	50                   	push   eax
c001ca77:	e8 9e f3 fe ff       	call   c000be1a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca7c:	83 c4 10             	add    esp,0x10
c001ca7f:	ba 68 15 02 c0       	mov    edx,0xc0021568
c001ca84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca88:	89 10                	mov    DWORD PTR [eax],edx
c001ca8a:	90                   	nop
c001ca8b:	83 c4 0c             	add    esp,0xc
c001ca8e:	c3                   	ret    
c001ca8f:	90                   	nop

c001ca90 <SATAPI::diskRemoved()>:
c001ca90:	c3                   	ret    
c001ca91:	90                   	nop

c001ca92 <SATAPI::diskInserted()>:
c001ca92:	83 ec 18             	sub    esp,0x18
c001ca95:	68 80 14 02 c0       	push   0xc0021480
c001ca9a:	e8 6f db fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001ca9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa3:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001caaa:	83 c4 1c             	add    esp,0x1c
c001caad:	c3                   	ret    

c001caae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001caae:	55                   	push   ebp
c001caaf:	57                   	push   edi
c001cab0:	56                   	push   esi
c001cab1:	53                   	push   ebx
c001cab2:	83 ec 34             	sub    esp,0x34
c001cab5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cab9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cabd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001cac1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cac5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001cac9:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001cacf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cad5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cad9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001cadf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cae3:	83 c0 02             	add    eax,0x2
c001cae6:	c1 e0 07             	shl    eax,0x7
c001cae9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001caed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001caf5:	c1 e0 07             	shl    eax,0x7
c001caf8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cafc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb00:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cb0e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cb14:	e8 51 e5 ff ff       	call   c001b06a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb1d:	83 c4 10             	add    esp,0x10
c001cb20:	b8 01 00 00 00       	mov    eax,0x1
c001cb25:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cb2a:	0f 84 49 02 00 00    	je     c001cd79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cb30:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cb36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3a:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb3c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cb42:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cb48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb4c:	c1 e1 05             	shl    ecx,0x5
c001cb4f:	01 c8                	add    eax,ecx
c001cb51:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cb53:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001cb59:	81 c9 25 00 01 00    	or     ecx,0x10025
c001cb5f:	89 08                	mov    DWORD PTR [eax],ecx
c001cb61:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cb67:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001cb6d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001cb73:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001cb76:	8d 7b 40             	lea    edi,[ebx+0x40]
c001cb79:	50                   	push   eax
c001cb7a:	68 90 00 00 00       	push   0x90
c001cb7f:	6a 00                	push   0x0
c001cb81:	53                   	push   ebx
c001cb82:	e8 39 39 fe ff       	call   c00004c0 <memset>
c001cb87:	b9 0c 00 00 00       	mov    ecx,0xc
c001cb8c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001cb90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb92:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001cb98:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001cb9c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001cba2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001cba6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cbaa:	48                   	dec    eax
c001cbab:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cbb0:	89 c1                	mov    ecx,eax
c001cbb2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001cbb8:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cbbd:	09 c8                	or     eax,ecx
c001cbbf:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001cbc5:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001cbc8:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001cbcf:	66 25 00 7f          	and    ax,0x7f00
c001cbd3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cbd7:	66 0d 27 80          	or     ax,0x8027
c001cbdb:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001cbdf:	66 89 03             	mov    WORD PTR [ebx],ax
c001cbe2:	89 d0                	mov    eax,edx
c001cbe4:	c1 ea 18             	shr    edx,0x18
c001cbe7:	c1 e8 10             	shr    eax,0x10
c001cbea:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001cbed:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001cbf0:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001cbf4:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001cbf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbfb:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001cbfe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001cc02:	83 c4 10             	add    esp,0x10
c001cc05:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001cc09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cc0d:	31 c0                	xor    eax,eax
c001cc0f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001cc15:	80 e1 88             	and    cl,0x88
c001cc18:	74 0a                	je     c001cc24 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001cc1a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc1f:	74 0a                	je     c001cc2b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001cc21:	40                   	inc    eax
c001cc22:	eb eb                	jmp    c001cc0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001cc24:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc29:	75 43                	jne    c001cc6e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001cc2b:	83 ec 0c             	sub    esp,0xc
c001cc2e:	68 98 14 02 c0       	push   0xc0021498
c001cc33:	e8 d6 d9 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001cc38:	58                   	pop    eax
c001cc39:	5a                   	pop    edx
c001cc3a:	68 ad 14 02 c0       	push   0xc00214ad
c001cc3f:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001cc45:	e8 9a bb fe ff       	call   c00087e4 <VgaText::puts(char const*)>
c001cc4a:	59                   	pop    ecx
c001cc4b:	5b                   	pop    ebx
c001cc4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cc50:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cc56:	e8 a9 e4 ff ff       	call   c001b104 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cc5b:	5e                   	pop    esi
c001cc5c:	5f                   	pop    edi
c001cc5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cc61:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cc67:	e8 78 e4 ff ff       	call   c001b0e4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cc6c:	eb 48                	jmp    c001ccb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001cc6e:	be 01 00 00 00       	mov    esi,0x1
c001cc73:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cc77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc7b:	d3 e6                	shl    esi,cl
c001cc7d:	c1 e7 07             	shl    edi,0x7
c001cc80:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001cc86:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001cc8b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001cc8f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001cc95:	85 c6                	test   esi,eax
c001cc97:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001cc9d:	0f 84 a3 00 00 00    	je     c001cd46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001cca3:	0f ba e0 1e          	bt     eax,0x1e
c001cca7:	73 1a                	jae    c001ccc3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001cca9:	83 ec 0c             	sub    esp,0xc
c001ccac:	68 bf 14 02 c0       	push   0xc00214bf
c001ccb1:	e8 58 d9 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001ccb6:	83 c4 10             	add    esp,0x10
c001ccb9:	b8 01 00 00 00       	mov    eax,0x1
c001ccbe:	e9 b6 00 00 00       	jmp    c001cd79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001ccc3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ccc9:	83 f8 0d             	cmp    eax,0xd
c001cccc:	77 0a                	ja     c001ccd8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001ccce:	83 ec 0c             	sub    esp,0xc
c001ccd1:	68 c8 00 00 00       	push   0xc8
c001ccd6:	eb 28                	jmp    c001cd00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001ccd8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ccde:	83 f8 0d             	cmp    eax,0xd
c001cce1:	77 0a                	ja     c001cced <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001cce3:	83 ec 0c             	sub    esp,0xc
c001cce6:	68 58 02 00 00       	push   0x258
c001cceb:	eb 13                	jmp    c001cd00 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cced:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ccf3:	83 f8 06             	cmp    eax,0x6
c001ccf6:	77 10                	ja     c001cd08 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	68 dc 05 00 00       	push   0x5dc
c001cd00:	e8 fb 80 ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001cd05:	83 c4 10             	add    esp,0x10
c001cd08:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cd0c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001cd0f:	75 06                	jne    c001cd17 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001cd11:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001cd15:	74 15                	je     c001cd2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cd17:	83 fb 06             	cmp    ebx,0x6
c001cd1a:	77 10                	ja     c001cd2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cd1c:	83 ec 0c             	sub    esp,0xc
c001cd1f:	68 c4 09 00 00       	push   0x9c4
c001cd24:	e8 d7 80 ff ff       	call   c0014e00 <milliTenthSleep(unsigned int)>
c001cd29:	83 c4 10             	add    esp,0x10
c001cd2c:	43                   	inc    ebx
c001cd2d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001cd33:	0f 85 56 ff ff ff    	jne    c001cc8f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001cd39:	83 ec 0c             	sub    esp,0xc
c001cd3c:	68 d2 14 02 c0       	push   0xc00214d2
c001cd41:	e9 6b ff ff ff       	jmp    c001ccb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001cd46:	0f ba e0 1e          	bt     eax,0x1e
c001cd4a:	73 0d                	jae    c001cd59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001cd4c:	83 ec 0c             	sub    esp,0xc
c001cd4f:	68 e6 14 02 c0       	push   0xc00214e6
c001cd54:	e9 58 ff ff ff       	jmp    c001ccb1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001cd59:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001cd5e:	74 17                	je     c001cd77 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001cd60:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001cd65:	74 10                	je     c001cd77 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001cd67:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001cd6d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001cd71:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001cd75:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cd77:	31 c0                	xor    eax,eax
c001cd79:	83 c4 2c             	add    esp,0x2c
c001cd7c:	5b                   	pop    ebx
c001cd7d:	5e                   	pop    esi
c001cd7e:	5f                   	pop    edi
c001cd7f:	5d                   	pop    ebp
c001cd80:	c3                   	ret    
c001cd81:	90                   	nop

c001cd82 <SATAPI::eject()>:
c001cd82:	57                   	push   edi
c001cd83:	b9 03 00 00 00       	mov    ecx,0x3
c001cd88:	83 ec 18             	sub    esp,0x18
c001cd8b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cd8f:	fc                   	cld    
c001cd90:	31 c0                	xor    eax,eax
c001cd92:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cd94:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cd99:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cd9e:	50                   	push   eax
c001cd9f:	6a 00                	push   0x0
c001cda1:	6a 00                	push   0x0
c001cda3:	6a 00                	push   0x0
c001cda5:	6a 00                	push   0x0
c001cda7:	6a 02                	push   0x2
c001cda9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cdad:	50                   	push   eax
c001cdae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cdb2:	e8 f7 fc ff ff       	call   c001caae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cdb7:	31 c0                	xor    eax,eax
c001cdb9:	83 c4 38             	add    esp,0x38
c001cdbc:	5f                   	pop    edi
c001cdbd:	c3                   	ret    

c001cdbe <SATAPI::detectMedia()>:
c001cdbe:	53                   	push   ebx
c001cdbf:	83 ec 14             	sub    esp,0x14
c001cdc2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cdc6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cdcc:	e8 f3 08 ff ff       	call   c000d6c4 <VCache::writeWriteBuffer()>
c001cdd1:	59                   	pop    ecx
c001cdd2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cdd8:	e8 d7 08 ff ff       	call   c000d6b4 <VCache::invalidateReadBuffer()>
c001cddd:	c7 04 24 fb 14 02 c0 	mov    DWORD PTR [esp],0xc00214fb
c001cde4:	e8 25 d8 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001cde9:	83 c4 10             	add    esp,0x10
c001cdec:	31 c0                	xor    eax,eax
c001cdee:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001cdf5:	85 d2                	test   edx,edx
c001cdf7:	74 0f                	je     c001ce08 <SATAPI::detectMedia()+0x4a>
c001cdf9:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001cdff:	75 07                	jne    c001ce08 <SATAPI::detectMedia()+0x4a>
c001ce01:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001ce08:	40                   	inc    eax
c001ce09:	83 f8 1a             	cmp    eax,0x1a
c001ce0c:	75 e0                	jne    c001cdee <SATAPI::detectMedia()+0x30>
c001ce0e:	83 c4 08             	add    esp,0x8
c001ce11:	5b                   	pop    ebx
c001ce12:	c3                   	ret    
c001ce13:	90                   	nop

c001ce14 <SATAPI::open(int, int, void*)>:
c001ce14:	56                   	push   esi
c001ce15:	53                   	push   ebx
c001ce16:	51                   	push   ecx
c001ce17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ce1f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ce29:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ce2f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ce39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce3d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ce47:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ce4d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ce54:	e8 f0 ac fe ff       	call   c0007b49 <Phys::allocatePage()>
c001ce59:	89 c6                	mov    esi,eax
c001ce5b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ce61:	81 c6 00 10 00 00    	add    esi,0x1000
c001ce67:	e8 dd ac fe ff       	call   c0007b49 <Phys::allocatePage()>
c001ce6c:	39 c6                	cmp    esi,eax
c001ce6e:	74 10                	je     c001ce80 <SATAPI::open(int, int, void*)+0x6c>
c001ce70:	83 ec 0c             	sub    esp,0xc
c001ce73:	68 10 15 02 c0       	push   0xc0021510
c001ce78:	e8 52 35 ff ff       	call   c00103cf <KePanic(char const*)>
c001ce7d:	83 c4 10             	add    esp,0x10
c001ce80:	83 ec 0c             	sub    esp,0xc
c001ce83:	6a 02                	push   0x2
c001ce85:	e8 c7 c4 fe ff       	call   c0009351 <Virt::allocateKernelVirtualPages(int)>
c001ce8a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ce90:	6a 03                	push   0x3
c001ce92:	50                   	push   eax
c001ce93:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ce99:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001ce9f:	e8 70 cb fe ff       	call   c0009a14 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cea4:	83 c4 14             	add    esp,0x14
c001cea7:	68 78 01 00 00       	push   0x178
c001ceac:	e8 bc a9 fe ff       	call   c000786d <malloc>
c001ceb1:	83 c4 0c             	add    esp,0xc
c001ceb4:	89 c6                	mov    esi,eax
c001ceb6:	6a 00                	push   0x0
c001ceb8:	68 ff ff ff 7f       	push   0x7fffffff
c001cebd:	6a 00                	push   0x0
c001cebf:	6a 00                	push   0x0
c001cec1:	53                   	push   ebx
c001cec2:	68 26 15 02 c0       	push   0xc0021526
c001cec7:	50                   	push   eax
c001cec8:	e8 59 fc fe ff       	call   c000cb26 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cecd:	83 c4 14             	add    esp,0x14
c001ced0:	56                   	push   esi
c001ced1:	e8 10 fd fe ff       	call   c000cbe6 <LogicalDisk::assignDriveLetter()>
c001ced6:	5a                   	pop    edx
c001ced7:	0f be c0             	movsx  eax,al
c001ceda:	59                   	pop    ecx
c001cedb:	50                   	push   eax
c001cedc:	68 78 13 02 c0       	push   0xc0021378
c001cee1:	e8 28 d7 fe ff       	call   c000a60e <Dbg::kprintf(char const*, ...)>
c001cee6:	58                   	pop    eax
c001cee7:	5a                   	pop    edx
c001cee8:	56                   	push   esi
c001cee9:	53                   	push   ebx
c001ceea:	e8 5d eb fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001ceef:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001cef5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cef8:	e8 85 ef fe ff       	call   c000be82 <PhysicalDisk::startCache()>
c001cefd:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001cf04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf07:	e8 b2 fe ff ff       	call   c001cdbe <SATAPI::detectMedia()>
c001cf0c:	83 c4 14             	add    esp,0x14
c001cf0f:	31 c0                	xor    eax,eax
c001cf11:	5b                   	pop    ebx
c001cf12:	5e                   	pop    esi
c001cf13:	c3                   	ret    

c001cf14 <SATAPI::read(unsigned long long, int, void*)>:
c001cf14:	57                   	push   edi
c001cf15:	56                   	push   esi
c001cf16:	53                   	push   ebx
c001cf17:	83 ec 30             	sub    esp,0x30
c001cf1a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cf1e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001cf22:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001cf26:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cf32:	83 fe 04             	cmp    esi,0x4
c001cf35:	7e 10                	jle    c001cf47 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001cf37:	83 ec 0c             	sub    esp,0xc
c001cf3a:	68 34 15 02 c0       	push   0xc0021534
c001cf3f:	e8 8b 34 ff ff       	call   c00103cf <KePanic(char const*)>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf4d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cf53:	51                   	push   ecx
c001cf54:	50                   	push   eax
c001cf55:	83 c0 02             	add    eax,0x2
c001cf58:	c1 e0 07             	shl    eax,0x7
c001cf5b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001cf61:	50                   	push   eax
c001cf62:	52                   	push   edx
c001cf63:	e8 c6 e1 ff ff       	call   c001b12e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cf68:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001cf6c:	b9 03 00 00 00       	mov    ecx,0x3
c001cf71:	fc                   	cld    
c001cf72:	31 c0                	xor    eax,eax
c001cf74:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cf76:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001cf7b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001cf80:	83 c4 0c             	add    esp,0xc
c001cf83:	6a 00                	push   0x0
c001cf85:	6a 00                	push   0x0
c001cf87:	6a 00                	push   0x0
c001cf89:	6a 00                	push   0x0
c001cf8b:	6a 02                	push   0x2
c001cf8d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cf91:	50                   	push   eax
c001cf92:	53                   	push   ebx
c001cf93:	e8 16 fb ff ff       	call   c001caae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cf98:	83 c4 20             	add    esp,0x20
c001cf9b:	85 c0                	test   eax,eax
c001cf9d:	75 44                	jne    c001cfe3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001cf9f:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001cfa3:	b9 03 00 00 00       	mov    ecx,0x3
c001cfa8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cfaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cfae:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001cfb3:	0f c8                	bswap  eax
c001cfb5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001cfb9:	89 f0                	mov    eax,esi
c001cfbb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001cfbf:	50                   	push   eax
c001cfc0:	56                   	push   esi
c001cfc1:	c1 e6 0b             	shl    esi,0xb
c001cfc4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cfc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfd0:	56                   	push   esi
c001cfd1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cfd5:	50                   	push   eax
c001cfd6:	53                   	push   ebx
c001cfd7:	e8 d2 fa ff ff       	call   c001caae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cfdc:	83 c4 20             	add    esp,0x20
c001cfdf:	85 c0                	test   eax,eax
c001cfe1:	74 14                	je     c001cff7 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cfe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cfe7:	83 ec 0c             	sub    esp,0xc
c001cfea:	53                   	push   ebx
c001cfeb:	e8 ce fd ff ff       	call   c001cdbe <SATAPI::detectMedia()>
c001cff0:	83 c4 10             	add    esp,0x10
c001cff3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cff7:	83 c4 30             	add    esp,0x30
c001cffa:	5b                   	pop    ebx
c001cffb:	5e                   	pop    esi
c001cffc:	5f                   	pop    edi
c001cffd:	c3                   	ret    

c001cffe <IOAPIC::close(int, int, void*)>:
c001cffe:	b8 00 00 00 00       	mov    eax,0x0
c001d003:	c3                   	ret    

c001d004 <apicGetBase()>:
c001d004:	55                   	push   ebp
c001d005:	89 e5                	mov    ebp,esp
c001d007:	83 ec 18             	sub    esp,0x18
c001d00a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d00f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d015:	83 e0 08             	and    eax,0x8
c001d018:	84 c0                	test   al,al
c001d01a:	75 07                	jne    c001d023 <apicGetBase()+0x1f>
c001d01c:	b8 00 00 00 00       	mov    eax,0x0
c001d021:	eb 21                	jmp    c001d044 <apicGetBase()+0x40>
c001d023:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d028:	83 ec 08             	sub    esp,0x8
c001d02b:	6a 1b                	push   0x1b
c001d02d:	50                   	push   eax
c001d02e:	e8 71 9e fe ff       	call   c0006ea4 <Computer::rdmsr(unsigned int)>
c001d033:	83 c4 10             	add    esp,0x10
c001d036:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d039:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d03c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d03f:	25 00 00 ff ff       	and    eax,0xffff0000
c001d044:	c9                   	leave  
c001d045:	c3                   	ret    

c001d046 <IOAPIC::IOAPIC()>:
c001d046:	83 ec 0c             	sub    esp,0xc
c001d049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d04d:	83 ec 08             	sub    esp,0x8
c001d050:	68 98 15 02 c0       	push   0xc0021598
c001d055:	50                   	push   eax
c001d056:	e8 89 eb fe ff       	call   c000bbe4 <Device::Device(char const*)>
c001d05b:	83 c4 10             	add    esp,0x10
c001d05e:	ba a8 15 02 c0       	mov    edx,0xc00215a8
c001d063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d067:	89 10                	mov    DWORD PTR [eax],edx
c001d069:	90                   	nop
c001d06a:	83 c4 0c             	add    esp,0xc
c001d06d:	c3                   	ret    

c001d06e <apicOpen()>:
c001d06e:	55                   	push   ebp
c001d06f:	89 e5                	mov    ebp,esp
c001d071:	53                   	push   ebx
c001d072:	83 ec 34             	sub    esp,0x34
c001d075:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001d07a:	83 f0 01             	xor    eax,0x1
c001d07d:	84 c0                	test   al,al
c001d07f:	0f 84 9d 00 00 00    	je     c001d122 <apicOpen()+0xb4>
c001d085:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d089:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001d08e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d091:	0f 83 84 00 00 00    	jae    c001d11b <apicOpen()+0xad>
c001d097:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d09e:	83 ec 0c             	sub    esp,0xc
c001d0a1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d0a4:	e8 c4 a7 fe ff       	call   c000786d <malloc>
c001d0a9:	83 c4 10             	add    esp,0x10
c001d0ac:	89 c3                	mov    ebx,eax
c001d0ae:	83 ec 0c             	sub    esp,0xc
c001d0b1:	53                   	push   ebx
c001d0b2:	e8 8f ff ff ff       	call   c001d046 <IOAPIC::IOAPIC()>
c001d0b7:	83 c4 10             	add    esp,0x10
c001d0ba:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d0bd:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d0c0:	25 ff 00 00 00       	and    eax,0xff
c001d0c5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d0c8:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001d0cf:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001d0d4:	40                   	inc    eax
c001d0d5:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001d0da:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d0df:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d0e5:	83 ec 08             	sub    esp,0x8
c001d0e8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d0eb:	50                   	push   eax
c001d0ec:	e8 5b e9 fe ff       	call   c000ba4c <Device::addChild(Device*)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d0f7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0f9:	83 c0 08             	add    eax,0x8
c001d0fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0fe:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d101:	25 ff 00 00 00       	and    eax,0xff
c001d106:	6a 00                	push   0x0
c001d108:	6a 00                	push   0x0
c001d10a:	50                   	push   eax
c001d10b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d10e:	ff d2                	call   edx
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d116:	e9 6e ff ff ff       	jmp    c001d089 <apicOpen()+0x1b>
c001d11b:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001d122:	e8 dd fe ff ff       	call   c001d004 <apicGetBase()>
c001d127:	05 f0 00 00 00       	add    eax,0xf0
c001d12c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d12f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d132:	8b 00                	mov    eax,DWORD PTR [eax]
c001d134:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d137:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d13e:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d145:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d148:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d14b:	89 10                	mov    DWORD PTR [eax],edx
c001d14d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d154:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001d159:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d15c:	7d 70                	jge    c001d1ce <apicOpen()+0x160>
c001d15e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d161:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d168:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d16b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d16e:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d175:	c1 e8 08             	shr    eax,0x8
c001d178:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d17c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d17f:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d186:	c1 e8 18             	shr    eax,0x18
c001d189:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d18c:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d190:	75 37                	jne    c001d1c9 <apicOpen()+0x15b>
c001d192:	e8 6d fe ff ff       	call   c001d004 <apicGetBase()>
c001d197:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d19b:	75 07                	jne    c001d1a4 <apicOpen()+0x136>
c001d19d:	ba 60 03 00 00       	mov    edx,0x360
c001d1a2:	eb 05                	jmp    c001d1a9 <apicOpen()+0x13b>
c001d1a4:	ba 50 03 00 00       	mov    edx,0x350
c001d1a9:	01 d0                	add    eax,edx
c001d1ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d1ae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d1b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1b3:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d1b6:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d1bd:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d1c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d1c4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d1c7:	89 10                	mov    DWORD PTR [eax],edx
c001d1c9:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d1cc:	eb 86                	jmp    c001d154 <apicOpen()+0xe6>
c001d1ce:	90                   	nop
c001d1cf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d1d2:	c9                   	leave  
c001d1d3:	c3                   	ret    

c001d1d4 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d1d4:	55                   	push   ebp
c001d1d5:	89 e5                	mov    ebp,esp
c001d1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1e0:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1e3:	72 1d                	jb     c001d202 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1e8:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1f1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d1f7:	01 d0                	add    eax,edx
c001d1f9:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1fc:	73 04                	jae    c001d202 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1fe:	b0 01                	mov    al,0x1
c001d200:	eb 02                	jmp    c001d204 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d202:	b0 00                	mov    al,0x0
c001d204:	5d                   	pop    ebp
c001d205:	c3                   	ret    

c001d206 <IOAPIC::read(int)>:
c001d206:	55                   	push   ebp
c001d207:	89 e5                	mov    ebp,esp
c001d209:	83 ec 10             	sub    esp,0x10
c001d20c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d20f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d215:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d218:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d21b:	31 d2                	xor    edx,edx
c001d21d:	88 c2                	mov    dl,al
c001d21f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d222:	89 10                	mov    DWORD PTR [eax],edx
c001d224:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d227:	83 c0 10             	add    eax,0x10
c001d22a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d22c:	c9                   	leave  
c001d22d:	c3                   	ret    

c001d22e <IOAPIC::open(int, int, void*)>:
c001d22e:	55                   	push   ebp
c001d22f:	89 e5                	mov    ebp,esp
c001d231:	57                   	push   edi
c001d232:	56                   	push   esi
c001d233:	53                   	push   ebx
c001d234:	83 ec 04             	sub    esp,0x4
c001d237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d23a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d23d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d246:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d24c:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001d253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d256:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d25c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d25f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d265:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001d26c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d26f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d278:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d27e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d281:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d287:	89 c6                	mov    esi,eax
c001d289:	81 e6 ff 00 00 00    	and    esi,0xff
c001d28f:	89 d0                	mov    eax,edx
c001d291:	ba 00 00 00 00       	mov    edx,0x0
c001d296:	89 c7                	mov    edi,eax
c001d298:	83 e7 ff             	and    edi,0xffffffff
c001d29b:	89 f9                	mov    ecx,edi
c001d29d:	89 d0                	mov    eax,edx
c001d29f:	25 ff 00 00 00       	and    eax,0xff
c001d2a4:	89 c3                	mov    ebx,eax
c001d2a6:	89 c8                	mov    eax,ecx
c001d2a8:	89 da                	mov    edx,ebx
c001d2aa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2ad:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d2b0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d2b4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d2b8:	83 e0 00             	and    eax,0x0
c001d2bb:	09 d0                	or     eax,edx
c001d2bd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d2c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2c4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d2ca:	8d 50 01             	lea    edx,[eax+0x1]
c001d2cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2d0:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d2d6:	31 d2                	xor    edx,edx
c001d2d8:	88 c2                	mov    dl,al
c001d2da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2dd:	83 c2 08             	add    edx,0x8
c001d2e0:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d2e4:	81 e1 ff 00 00 00    	and    ecx,0xff
c001d2ea:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d2f0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d2f4:	6a 01                	push   0x1
c001d2f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2f9:	e8 08 ff ff ff       	call   c001d206 <IOAPIC::read(int)>
c001d2fe:	83 c4 08             	add    esp,0x8
c001d301:	c1 f8 10             	sar    eax,0x10
c001d304:	25 ff 00 00 00       	and    eax,0xff
c001d309:	8d 50 01             	lea    edx,[eax+0x1]
c001d30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d30f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d315:	b8 00 00 00 00       	mov    eax,0x0
c001d31a:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d31d:	5b                   	pop    ebx
c001d31e:	5e                   	pop    esi
c001d31f:	5f                   	pop    edi
c001d320:	5d                   	pop    ebp
c001d321:	c3                   	ret    

c001d322 <IOAPIC::write(int, int)>:
c001d322:	55                   	push   ebp
c001d323:	89 e5                	mov    ebp,esp
c001d325:	83 ec 10             	sub    esp,0x10
c001d328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d32b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d331:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d334:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d337:	31 d2                	xor    edx,edx
c001d339:	88 c2                	mov    dl,al
c001d33b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d33e:	89 10                	mov    DWORD PTR [eax],edx
c001d340:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d343:	8d 50 10             	lea    edx,[eax+0x10]
c001d346:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d349:	89 02                	mov    DWORD PTR [edx],eax
c001d34b:	90                   	nop
c001d34c:	c9                   	leave  
c001d34d:	c3                   	ret    

c001d34e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d34e:	55                   	push   ebp
c001d34f:	89 e5                	mov    ebp,esp
c001d351:	53                   	push   ebx
c001d352:	83 ec 2c             	sub    esp,0x2c
c001d355:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d358:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d35b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d35e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d361:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d364:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d367:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d36a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d36d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d370:	88 d8                	mov    al,bl
c001d372:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d375:	88 c8                	mov    al,cl
c001d377:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d37a:	88 d0                	mov    al,dl
c001d37c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d37f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d382:	25 ff 00 00 00       	and    eax,0xff
c001d387:	83 c0 08             	add    eax,0x8
c001d38a:	01 c0                	add    eax,eax
c001d38c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d38f:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d392:	25 ff 00 00 00       	and    eax,0xff
c001d397:	83 c0 08             	add    eax,0x8
c001d39a:	01 c0                	add    eax,eax
c001d39c:	40                   	inc    eax
c001d39d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d3a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d3a3:	50                   	push   eax
c001d3a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3a7:	e8 5a fe ff ff       	call   c001d206 <IOAPIC::read(int)>
c001d3ac:	83 c4 08             	add    esp,0x8
c001d3af:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d3b2:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d3b9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d3bc:	c1 e0 18             	shl    eax,0x18
c001d3bf:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d3c2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d3c5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d3c8:	52                   	push   edx
c001d3c9:	50                   	push   eax
c001d3ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3cd:	e8 50 ff ff ff       	call   c001d322 <IOAPIC::write(int, int)>
c001d3d2:	83 c4 0c             	add    esp,0xc
c001d3d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d3d8:	50                   	push   eax
c001d3d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3dc:	e8 25 fe ff ff       	call   c001d206 <IOAPIC::read(int)>
c001d3e1:	83 c4 08             	add    esp,0x8
c001d3e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d3e7:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d3ee:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d3f5:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d3fc:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d400:	74 09                	je     c001d40b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d402:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d409:	eb 07                	jmp    c001d412 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d40b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d412:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d416:	74 09                	je     c001d421 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d418:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d41f:	eb 07                	jmp    c001d428 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d421:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d428:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d42f:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d432:	25 ff 00 00 00       	and    eax,0xff
c001d437:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d43a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d43d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d440:	52                   	push   edx
c001d441:	50                   	push   eax
c001d442:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d445:	e8 d8 fe ff ff       	call   c001d322 <IOAPIC::write(int, int)>
c001d44a:	83 c4 0c             	add    esp,0xc
c001d44d:	90                   	nop
c001d44e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d451:	c9                   	leave  
c001d452:	c3                   	ret    
c001d453:	90                   	nop

c001d454 <APICTimer::close(int, int, void*)>:
c001d454:	b8 00 00 00 00       	mov    eax,0x0
c001d459:	c3                   	ret    
c001d45a:	66 90                	xchg   ax,ax

c001d45c <apicTimerHandler(regs*, void*)>:
c001d45c:	83 ec 0c             	sub    esp,0xc
c001d45f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d463:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d465:	b8 10 27 00 00       	mov    eax,0x2710
c001d46a:	ba 00 00 00 00       	mov    edx,0x0
c001d46f:	f7 f1                	div    ecx
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	50                   	push   eax
c001d475:	e8 62 ff fe ff       	call   c000d3dc <timerHandler(unsigned int)>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	90                   	nop
c001d47e:	83 c4 0c             	add    esp,0xc
c001d481:	c3                   	ret    
c001d482:	66 90                	xchg   ax,ax

c001d484 <APICTimer::open(int, int, void*)>:
c001d484:	83 ec 0c             	sub    esp,0xc
c001d487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d48d:	83 c0 24             	add    eax,0x24
c001d490:	8b 00                	mov    eax,DWORD PTR [eax]
c001d492:	83 ec 08             	sub    esp,0x8
c001d495:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d499:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d49d:	ff d0                	call   eax
c001d49f:	83 c4 10             	add    esp,0x10
c001d4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4aa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d4b8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d4be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d4c2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d4c8:	83 ec 0c             	sub    esp,0xc
c001d4cb:	51                   	push   ecx
c001d4cc:	6a 01                	push   0x1
c001d4ce:	68 5c d4 01 c0       	push   0xc001d45c
c001d4d3:	52                   	push   edx
c001d4d4:	50                   	push   eax
c001d4d5:	e8 1e e5 fe ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d4da:	83 c4 20             	add    esp,0x20
c001d4dd:	89 c2                	mov    edx,eax
c001d4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d4e9:	b8 00 00 00 00       	mov    eax,0x0
c001d4ee:	83 c4 0c             	add    esp,0xc
c001d4f1:	c3                   	ret    
c001d4f2:	66 90                	xchg   ax,ax

c001d4f4 <APICTimer::write(int)>:
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	83 ec 0c             	sub    esp,0xc
c001d4fa:	68 cc 15 02 c0       	push   0xc00215cc
c001d4ff:	e8 cb 2e ff ff       	call   c00103cf <KePanic(char const*)>
c001d504:	83 c4 10             	add    esp,0x10
c001d507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d50f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d515:	90                   	nop
c001d516:	83 c4 0c             	add    esp,0xc
c001d519:	c3                   	ret    
c001d51a:	66 90                	xchg   ax,ax

c001d51c <APICTimer::APICTimer()>:
c001d51c:	83 ec 0c             	sub    esp,0xc
c001d51f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d523:	83 ec 08             	sub    esp,0x8
c001d526:	68 dc 15 02 c0       	push   0xc00215dc
c001d52b:	50                   	push   eax
c001d52c:	e8 df fd fe ff       	call   c000d310 <Timer::Timer(char const*)>
c001d531:	83 c4 10             	add    esp,0x10
c001d534:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c001d539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53d:	89 10                	mov    DWORD PTR [eax],edx
c001d53f:	90                   	nop
c001d540:	83 c4 0c             	add    esp,0xc
c001d543:	c3                   	ret    

c001d544 <PIT::write(int)>:
c001d544:	83 ec 10             	sub    esp,0x10
c001d547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d54b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d54f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d555:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d559:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d55e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d563:	99                   	cdq    
c001d564:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d568:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d56c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d573:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d578:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d57c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d581:	ee                   	out    dx,al
c001d582:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d586:	25 ff 00 00 00       	and    eax,0xff
c001d58b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d592:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d596:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d59a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d59f:	ee                   	out    dx,al
c001d5a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d5a4:	c1 f8 08             	sar    eax,0x8
c001d5a7:	25 ff 00 00 00       	and    eax,0xff
c001d5ac:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d5b3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d5b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d5bb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d5c0:	ee                   	out    dx,al
c001d5c1:	90                   	nop
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	c3                   	ret    
c001d5c6:	66 90                	xchg   ax,ax

c001d5c8 <pitHandler(regs*, void*)>:
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d5d1:	b8 10 27 00 00       	mov    eax,0x2710
c001d5d6:	99                   	cdq    
c001d5d7:	f7 f9                	idiv   ecx
c001d5d9:	83 ec 0c             	sub    esp,0xc
c001d5dc:	50                   	push   eax
c001d5dd:	e8 fa fd fe ff       	call   c000d3dc <timerHandler(unsigned int)>
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	90                   	nop
c001d5e6:	83 c4 0c             	add    esp,0xc
c001d5e9:	c3                   	ret    
c001d5ea:	66 90                	xchg   ax,ax

c001d5ec <PIT::open(int, int, void*)>:
c001d5ec:	83 ec 0c             	sub    esp,0xc
c001d5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5f5:	83 c0 24             	add    eax,0x24
c001d5f8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5fa:	83 ec 08             	sub    esp,0x8
c001d5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d605:	ff d0                	call   eax
c001d607:	83 c4 10             	add    esp,0x10
c001d60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60e:	83 ec 0c             	sub    esp,0xc
c001d611:	6a 00                	push   0x0
c001d613:	6a 01                	push   0x1
c001d615:	68 c8 d5 01 c0       	push   0xc001d5c8
c001d61a:	6a 00                	push   0x0
c001d61c:	50                   	push   eax
c001d61d:	e8 d6 e3 fe ff       	call   c000b9f8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d622:	83 c4 20             	add    esp,0x20
c001d625:	89 c2                	mov    edx,eax
c001d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d631:	b8 00 00 00 00       	mov    eax,0x0
c001d636:	83 c4 0c             	add    esp,0xc
c001d639:	c3                   	ret    
c001d63a:	66 90                	xchg   ax,ax

c001d63c <PIT::close(int, int, void*)>:
c001d63c:	83 ec 0c             	sub    esp,0xc
c001d63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d643:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d651:	6a 01                	push   0x1
c001d653:	68 c8 d5 01 c0       	push   0xc001d5c8
c001d658:	6a 00                	push   0x0
c001d65a:	50                   	push   eax
c001d65b:	e8 ce e3 fe ff       	call   c000ba2e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d660:	83 c4 10             	add    esp,0x10
c001d663:	b8 00 00 00 00       	mov    eax,0x0
c001d668:	83 c4 0c             	add    esp,0xc
c001d66b:	c3                   	ret    

c001d66c <PIT::PIT()>:
c001d66c:	83 ec 0c             	sub    esp,0xc
c001d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d673:	83 ec 08             	sub    esp,0x8
c001d676:	68 18 16 02 c0       	push   0xc0021618
c001d67b:	50                   	push   eax
c001d67c:	e8 8f fc fe ff       	call   c000d310 <Timer::Timer(char const*)>
c001d681:	83 c4 10             	add    esp,0x10
c001d684:	ba 40 16 02 c0       	mov    edx,0xc0021640
c001d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d68d:	89 10                	mov    DWORD PTR [eax],edx
c001d68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d693:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d699:	31 d2                	xor    edx,edx
c001d69b:	88 c2                	mov    dl,al
c001d69d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6a1:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d6a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d6b2:	31 d2                	xor    edx,edx
c001d6b4:	88 c2                	mov    dl,al
c001d6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ba:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d6c9:	8d 50 01             	lea    edx,[eax+0x1]
c001d6cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6d0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d6d6:	31 d2                	xor    edx,edx
c001d6d8:	88 c2                	mov    dl,al
c001d6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6de:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d6e2:	83 e1 3f             	and    ecx,0x3f
c001d6e5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d6e9:	90                   	nop
c001d6ea:	83 c4 0c             	add    esp,0xc
c001d6ed:	c3                   	ret    
c001d6ee:	66 90                	xchg   ax,ax

c001d6f0 <avxDetect>:
c001d6f0:	b8 01 00 00 00       	mov    eax,0x1
c001d6f5:	0f a2                	cpuid  
c001d6f7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d6fd:	74 15                	je     c001d714 <avxDetect.noAVX>
c001d6ff:	b8 01 00 00 00       	mov    eax,0x1
c001d704:	0f a2                	cpuid  
c001d706:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d70c:	74 06                	je     c001d714 <avxDetect.noAVX>
c001d70e:	b8 01 00 00 00       	mov    eax,0x1
c001d713:	c3                   	ret    

c001d714 <avxDetect.noAVX>:
c001d714:	b8 00 00 00 00       	mov    eax,0x0
c001d719:	c3                   	ret    

c001d71a <avxSave>:
c001d71a:	53                   	push   ebx
c001d71b:	52                   	push   edx
c001d71c:	31 c0                	xor    eax,eax
c001d71e:	48                   	dec    eax
c001d71f:	89 c2                	mov    edx,eax
c001d721:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d725:	0f ae 23             	xsave  [ebx]
c001d728:	5a                   	pop    edx
c001d729:	5b                   	pop    ebx
c001d72a:	c3                   	ret    

c001d72b <avxLoad>:
c001d72b:	53                   	push   ebx
c001d72c:	52                   	push   edx
c001d72d:	31 c0                	xor    eax,eax
c001d72f:	48                   	dec    eax
c001d730:	89 c2                	mov    edx,eax
c001d732:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d736:	0f ae 2b             	xrstor [ebx]
c001d739:	5a                   	pop    edx
c001d73a:	5b                   	pop    ebx
c001d73b:	c3                   	ret    

c001d73c <avxInit>:
c001d73c:	e8 67 03 00 00       	call   c001daa8 <sseInit>
c001d741:	50                   	push   eax
c001d742:	51                   	push   ecx
c001d743:	0f 20 e0             	mov    eax,cr4
c001d746:	0d 00 00 04 00       	or     eax,0x40000
c001d74b:	0f 22 e0             	mov    cr4,eax
c001d74e:	31 c9                	xor    ecx,ecx
c001d750:	0f 01 d0             	xgetbv 
c001d753:	0d 07 00 00 00       	or     eax,0x7
c001d758:	0f 01 d1             	xsetbv 
c001d75b:	59                   	pop    ecx
c001d75c:	58                   	pop    eax
c001d75d:	c3                   	ret    

c001d75e <avxClose>:
c001d75e:	c3                   	ret    

c001d75f <wouldSheSayYes>:
c001d75f:	c3                   	ret    
c001d760:	49                   	dec    ecx
c001d761:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d765:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d769:	75 20                	jne    c001d78b <isr0+0xb>
c001d76b:	4e                   	dec    esi
c001d76c:	79 61                	jns    c001d7cf <isr7+0x3>
c001d76e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d773:	66 90                	xchg   ax,ax
c001d775:	66 90                	xchg   ax,ax
c001d777:	66 90                	xchg   ax,ax
c001d779:	66 90                	xchg   ax,ax
c001d77b:	66 90                	xchg   ax,ax
c001d77d:	66 90                	xchg   ax,ax
c001d77f:	90                   	nop

c001d780 <isr0>:
c001d780:	fa                   	cli    
c001d781:	68 00 00 00 00       	push   0x0
c001d786:	68 00 00 00 00       	push   0x0
c001d78b:	e9 56 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d790 <isr1>:
c001d790:	fa                   	cli    
c001d791:	6a 00                	push   0x0
c001d793:	6a 01                	push   0x1
c001d795:	e9 4c 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d79a <isr2>:
c001d79a:	fa                   	cli    
c001d79b:	6a 00                	push   0x0
c001d79d:	6a 02                	push   0x2
c001d79f:	e9 42 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7a4 <isr3>:
c001d7a4:	fa                   	cli    
c001d7a5:	6a 00                	push   0x0
c001d7a7:	6a 03                	push   0x3
c001d7a9:	e9 38 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7ae <isr4>:
c001d7ae:	fa                   	cli    
c001d7af:	6a 00                	push   0x0
c001d7b1:	6a 04                	push   0x4
c001d7b3:	e9 2e 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7b8 <isr5>:
c001d7b8:	fa                   	cli    
c001d7b9:	6a 00                	push   0x0
c001d7bb:	6a 05                	push   0x5
c001d7bd:	e9 24 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7c2 <isr6>:
c001d7c2:	fa                   	cli    
c001d7c3:	6a 00                	push   0x0
c001d7c5:	6a 06                	push   0x6
c001d7c7:	e9 1a 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7cc <isr7>:
c001d7cc:	fa                   	cli    
c001d7cd:	6a 00                	push   0x0
c001d7cf:	6a 07                	push   0x7
c001d7d1:	e9 10 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7d6 <isr8>:
c001d7d6:	fa                   	cli    
c001d7d7:	6a 08                	push   0x8
c001d7d9:	e9 08 01 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7de <isr9>:
c001d7de:	fa                   	cli    
c001d7df:	6a 00                	push   0x0
c001d7e1:	6a 09                	push   0x9
c001d7e3:	e9 fe 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7e8 <isr10>:
c001d7e8:	fa                   	cli    
c001d7e9:	6a 0a                	push   0xa
c001d7eb:	e9 f6 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7f0 <isr11>:
c001d7f0:	fa                   	cli    
c001d7f1:	6a 0b                	push   0xb
c001d7f3:	e9 ee 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d7f8 <isr12>:
c001d7f8:	fa                   	cli    
c001d7f9:	6a 0c                	push   0xc
c001d7fb:	e9 e6 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d800 <isr13>:
c001d800:	fa                   	cli    
c001d801:	6a 0d                	push   0xd
c001d803:	53                   	push   ebx
c001d804:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d808:	81 fb d6 d9 01 c0    	cmp    ebx,0xc001d9d6
c001d80e:	5b                   	pop    ebx
c001d80f:	0f 84 c3 01 00 00    	je     c001d9d8 <finishSignal2>
c001d815:	e9 cc 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d81a <isr14>:
c001d81a:	fa                   	cli    
c001d81b:	6a 0e                	push   0xe
c001d81d:	e9 c4 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d822 <isr15>:
c001d822:	fa                   	cli    
c001d823:	6a 00                	push   0x0
c001d825:	6a 0f                	push   0xf
c001d827:	e9 ba 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d82c <isr16>:
c001d82c:	fa                   	cli    
c001d82d:	6a 00                	push   0x0
c001d82f:	6a 10                	push   0x10
c001d831:	e9 b0 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d836 <isr17>:
c001d836:	fa                   	cli    
c001d837:	6a 00                	push   0x0
c001d839:	6a 11                	push   0x11
c001d83b:	e9 a6 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d840 <isr18>:
c001d840:	fa                   	cli    
c001d841:	6a 00                	push   0x0
c001d843:	6a 12                	push   0x12
c001d845:	e9 9c 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d84a <irq3>:
c001d84a:	fa                   	cli    
c001d84b:	6a 00                	push   0x0
c001d84d:	6a 23                	push   0x23
c001d84f:	e9 92 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d854 <irq4>:
c001d854:	fa                   	cli    
c001d855:	6a 00                	push   0x0
c001d857:	6a 24                	push   0x24
c001d859:	e9 88 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d85e <irq5>:
c001d85e:	fa                   	cli    
c001d85f:	6a 00                	push   0x0
c001d861:	6a 25                	push   0x25
c001d863:	e9 7e 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d868 <irq6>:
c001d868:	fa                   	cli    
c001d869:	6a 00                	push   0x0
c001d86b:	6a 26                	push   0x26
c001d86d:	e9 74 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d872 <irq7>:
c001d872:	fa                   	cli    
c001d873:	6a 00                	push   0x0
c001d875:	6a 27                	push   0x27
c001d877:	e9 6a 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d87c <irq8>:
c001d87c:	fa                   	cli    
c001d87d:	6a 00                	push   0x0
c001d87f:	6a 28                	push   0x28
c001d881:	e9 60 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d886 <irq9>:
c001d886:	fa                   	cli    
c001d887:	6a 00                	push   0x0
c001d889:	6a 29                	push   0x29
c001d88b:	e9 56 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d890 <irq10>:
c001d890:	fa                   	cli    
c001d891:	6a 00                	push   0x0
c001d893:	6a 2a                	push   0x2a
c001d895:	e9 4c 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d89a <irq11>:
c001d89a:	fa                   	cli    
c001d89b:	6a 00                	push   0x0
c001d89d:	6a 2b                	push   0x2b
c001d89f:	e9 42 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d8a4 <irq12>:
c001d8a4:	fa                   	cli    
c001d8a5:	6a 00                	push   0x0
c001d8a7:	6a 2c                	push   0x2c
c001d8a9:	e9 38 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d8ae <irq13>:
c001d8ae:	fa                   	cli    
c001d8af:	6a 00                	push   0x0
c001d8b1:	6a 2d                	push   0x2d
c001d8b3:	e9 2e 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d8b8 <irq14>:
c001d8b8:	fa                   	cli    
c001d8b9:	6a 00                	push   0x0
c001d8bb:	6a 2e                	push   0x2e
c001d8bd:	e9 24 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d8c2 <irq15>:
c001d8c2:	fa                   	cli    
c001d8c3:	6a 00                	push   0x0
c001d8c5:	6a 2f                	push   0x2f
c001d8c7:	e9 1a 00 00 00       	jmp    c001d8e6 <int_common_stub>

c001d8cc <irq1>:
c001d8cc:	fa                   	cli    
c001d8cd:	6a 00                	push   0x0
c001d8cf:	6a 21                	push   0x21
c001d8d1:	eb 13                	jmp    c001d8e6 <int_common_stub>

c001d8d3 <irq2>:
c001d8d3:	fa                   	cli    
c001d8d4:	6a 00                	push   0x0
c001d8d6:	6a 22                	push   0x22
c001d8d8:	eb 0c                	jmp    c001d8e6 <int_common_stub>

c001d8da <isr96>:
c001d8da:	6a 00                	push   0x0
c001d8dc:	6a 60                	push   0x60
c001d8de:	fb                   	sti    
c001d8df:	eb 37                	jmp    c001d918 <syscall_common_stub>

c001d8e1 <irq0>:
c001d8e1:	fa                   	cli    
c001d8e2:	6a 00                	push   0x0
c001d8e4:	6a 20                	push   0x20

c001d8e6 <int_common_stub>:
c001d8e6:	60                   	pusha  
c001d8e7:	1e                   	push   ds
c001d8e8:	06                   	push   es
c001d8e9:	0f a0                	push   fs
c001d8eb:	0f a8                	push   gs
c001d8ed:	66 b8 10 00          	mov    ax,0x10
c001d8f1:	66 8e d8             	mov    ds,ax
c001d8f4:	66 8e c0             	mov    es,ax
c001d8f7:	66 8e e0             	mov    fs,ax
c001d8fa:	66 8e e8             	mov    gs,ax
c001d8fd:	54                   	push   esp
c001d8fe:	fc                   	cld    
c001d8ff:	e8 f4 e5 fe ff       	call   c000bef8 <int_handler>
c001d904:	81 c4 04 00 00 00    	add    esp,0x4
c001d90a:	0f a9                	pop    gs
c001d90c:	0f a1                	pop    fs
c001d90e:	07                   	pop    es
c001d90f:	1f                   	pop    ds
c001d910:	61                   	popa   
c001d911:	81 c4 08 00 00 00    	add    esp,0x8
c001d917:	cf                   	iret   

c001d918 <syscall_common_stub>:
c001d918:	60                   	pusha  
c001d919:	1e                   	push   ds
c001d91a:	06                   	push   es
c001d91b:	0f a0                	push   fs
c001d91d:	0f a8                	push   gs
c001d91f:	66 b8 10 00          	mov    ax,0x10
c001d923:	66 8e d8             	mov    ds,ax
c001d926:	66 8e c0             	mov    es,ax
c001d929:	66 8e e0             	mov    fs,ax
c001d92c:	66 8e e8             	mov    gs,ax
c001d92f:	54                   	push   esp
c001d930:	fc                   	cld    
c001d931:	e8 c2 e5 fe ff       	call   c000bef8 <int_handler>
c001d936:	81 c4 04 00 00 00    	add    esp,0x4
c001d93c:	0f a9                	pop    gs
c001d93e:	0f a1                	pop    fs
c001d940:	07                   	pop    es
c001d941:	1f                   	pop    ds
c001d942:	e8 64 30 ff ff       	call   c00109ab <KiCheckSignalZ>
c001d947:	3d 00 00 00 00       	cmp    eax,0x0
c001d94c:	0f 84 c0 00 00 00    	je     c001da12 <skipSignals>
c001d952:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001d957:	61                   	popa   
c001d958:	53                   	push   ebx
c001d959:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001d95f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001d962:	5b                   	pop    ebx
c001d963:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001d968:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001d96b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001d96e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d971:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001d974:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001d977:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001d97a:	81 c4 08 00 00 00    	add    esp,0x8
c001d980:	5e                   	pop    esi
c001d981:	5b                   	pop    ebx
c001d982:	59                   	pop    ecx
c001d983:	5a                   	pop    edx
c001d984:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001d987:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001d98a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d98d:	52                   	push   edx
c001d98e:	51                   	push   ecx
c001d98f:	53                   	push   ebx
c001d990:	56                   	push   esi
c001d991:	81 ec 08 00 00 00    	sub    esp,0x8
c001d997:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001d99a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001d99d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001d9a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d9a6:	60                   	pusha  
c001d9a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001d9ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001d9b0:	89 e3                	mov    ebx,esp
c001d9b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d9b5:	52                   	push   edx
c001d9b6:	68 d6 d9 01 c0       	push   0xc001d9d6
c001d9bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001d9be:	89 dc                	mov    esp,ebx
c001d9c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001d9c3:	68 23 00 00 00       	push   0x23
c001d9c8:	51                   	push   ecx
c001d9c9:	68 02 02 00 00       	push   0x202
c001d9ce:	68 1b 00 00 00       	push   0x1b
c001d9d3:	ff 36                	push   DWORD PTR [esi]
c001d9d5:	cf                   	iret   

c001d9d6 <finishSignal>:
c001d9d6:	cd 0f                	int    0xf

c001d9d8 <finishSignal2>:
c001d9d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001d9de:	e8 45 30 ff ff       	call   c0010a28 <KiFinishSignalZ>
c001d9e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001d9e9:	68 23 00 00 00       	push   0x23
c001d9ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001d9f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001d9f4:	68 1b 00 00 00       	push   0x1b
c001d9f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001d9fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001da02:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001da05:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001da08:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001da0b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001da0e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001da11:	cf                   	iret   

c001da12 <skipSignals>:
c001da12:	61                   	popa   
c001da13:	81 c4 08 00 00 00    	add    esp,0x8
c001da19:	cf                   	iret   
c001da1a:	90                   	nop
c001da1b:	90                   	nop

c001da1c <irq16>:
c001da1c:	fa                   	cli    
c001da1d:	6a 00                	push   0x0
c001da1f:	6a 30                	push   0x30
c001da21:	e9 c0 fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da26 <irq17>:
c001da26:	fa                   	cli    
c001da27:	6a 00                	push   0x0
c001da29:	6a 31                	push   0x31
c001da2b:	e9 b6 fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da30 <irq18>:
c001da30:	fa                   	cli    
c001da31:	6a 00                	push   0x0
c001da33:	6a 32                	push   0x32
c001da35:	e9 ac fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da3a <irq19>:
c001da3a:	fa                   	cli    
c001da3b:	6a 00                	push   0x0
c001da3d:	6a 33                	push   0x33
c001da3f:	e9 a2 fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da44 <irq20>:
c001da44:	fa                   	cli    
c001da45:	6a 00                	push   0x0
c001da47:	6a 34                	push   0x34
c001da49:	e9 98 fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da4e <irq21>:
c001da4e:	fa                   	cli    
c001da4f:	6a 00                	push   0x0
c001da51:	6a 35                	push   0x35
c001da53:	e9 8e fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da58 <irq22>:
c001da58:	fa                   	cli    
c001da59:	6a 00                	push   0x0
c001da5b:	6a 36                	push   0x36
c001da5d:	e9 84 fe ff ff       	jmp    c001d8e6 <int_common_stub>

c001da62 <irq23>:
c001da62:	fa                   	cli    
c001da63:	6a 00                	push   0x0
c001da65:	6a 37                	push   0x37
c001da67:	e9 7a fe ff ff       	jmp    c001d8e6 <int_common_stub>
c001da6c:	66 90                	xchg   ax,ax
c001da6e:	66 90                	xchg   ax,ax

c001da70 <i386GetRDRAND>:
c001da70:	b9 64 00 00 00       	mov    ecx,0x64

c001da75 <retry>:
c001da75:	0f c7 f0             	rdrand eax
c001da78:	72 05                	jb     c001da7f <retry.done>
c001da7a:	e2 f9                	loop   c001da75 <retry>

c001da7c <retry.fail>:
c001da7c:	31 c0                	xor    eax,eax
c001da7e:	c3                   	ret    

c001da7f <retry.done>:
c001da7f:	c3                   	ret    

c001da80 <absolutelyNoChanceInHell>:
c001da80:	b8 01 00 00 00       	mov    eax,0x1
c001da85:	0f a2                	cpuid  
c001da87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001da8d:	74 06                	je     c001da95 <sseDetect.noSSE>
c001da8f:	b8 01 00 00 00       	mov    eax,0x1
c001da94:	c3                   	ret    

c001da95 <sseDetect.noSSE>:
c001da95:	31 c0                	xor    eax,eax
c001da97:	c3                   	ret    

c001da98 <sseSave>:
c001da98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da9c:	0f ae 00             	fxsave [eax]
c001da9f:	c3                   	ret    

c001daa0 <sseLoad>:
c001daa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001daa4:	0f ae 08             	fxrstor [eax]
c001daa7:	c3                   	ret    

c001daa8 <sseInit>:
c001daa8:	e8 42 00 00 00       	call   c001daef <x87Init>
c001daad:	0f 20 e0             	mov    eax,cr4
c001dab0:	66 0d 00 06          	or     ax,0x600
c001dab4:	0f 22 e0             	mov    cr4,eax
c001dab7:	c3                   	ret    

c001dab8 <sseClose>:
c001dab8:	c3                   	ret    
c001dab9:	66 90                	xchg   ax,ax
c001dabb:	66 90                	xchg   ax,ax
c001dabd:	66 90                	xchg   ax,ax
c001dabf:	90                   	nop

c001dac0 <value_37F>:
c001dac0:	7f 03                	jg     c001dac5 <value_37A+0x1>

c001dac2 <value_37E>:
c001dac2:	7e 03                	jle    c001dac7 <x87Detect+0x1>

c001dac4 <value_37A>:
c001dac4:	7a 03                	jp     c001dac9 <x87Detect+0x3>

c001dac6 <x87Detect>:
c001dac6:	b8 01 00 00 00       	mov    eax,0x1
c001dacb:	0f a2                	cpuid  
c001dacd:	f7 c2 01 00 00 00    	test   edx,0x1
c001dad3:	74 06                	je     c001dadb <x87Detect.nox87>
c001dad5:	b8 01 00 00 00       	mov    eax,0x1
c001dada:	c3                   	ret    

c001dadb <x87Detect.nox87>:
c001dadb:	b8 00 00 00 00       	mov    eax,0x0
c001dae0:	c3                   	ret    

c001dae1 <x87Save>:
c001dae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dae5:	dd 30                	fnsave [eax]
c001dae7:	c3                   	ret    

c001dae8 <x87Load>:
c001dae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001daec:	dd 20                	frstor [eax]
c001daee:	c3                   	ret    

c001daef <x87Init>:
c001daef:	0f 20 c0             	mov    eax,cr0
c001daf2:	66 25 fb ff          	and    ax,0xfffb
c001daf6:	66 0d 22 00          	or     ax,0x22
c001dafa:	0f 22 c0             	mov    cr0,eax
c001dafd:	db e3                	fninit 
c001daff:	0f 06                	clts   
c001db01:	d9 2d c4 da 01 c0    	fldcw  WORD PTR ds:0xc001dac4
c001db07:	c3                   	ret    

c001db08 <x87Close>:
c001db08:	c3                   	ret    
c001db09:	66 90                	xchg   ax,ax
c001db0b:	90                   	nop

c001db0c <__do_global_ctors_aux>:
c001db0c:	a1 bc ea 01 c0       	mov    eax,ds:0xc001eabc
c001db11:	83 f8 ff             	cmp    eax,0xffffffff
c001db14:	74 1a                	je     c001db30 <__do_global_ctors_aux+0x24>
c001db16:	55                   	push   ebp
c001db17:	89 e5                	mov    ebp,esp
c001db19:	53                   	push   ebx
c001db1a:	52                   	push   edx
c001db1b:	bb bc ea 01 c0       	mov    ebx,0xc001eabc
c001db20:	ff d0                	call   eax
c001db22:	83 eb 04             	sub    ebx,0x4
c001db25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db27:	83 f8 ff             	cmp    eax,0xffffffff
c001db2a:	75 f4                	jne    c001db20 <__do_global_ctors_aux+0x14>
c001db2c:	58                   	pop    eax
c001db2d:	5b                   	pop    ebx
c001db2e:	5d                   	pop    ebp
c001db2f:	c3                   	ret    
c001db30:	c3                   	ret    
c001db31:	66 90                	xchg   ax,ax
c001db33:	90                   	nop

c001db34 <__divdi3>:
c001db34:	55                   	push   ebp
c001db35:	57                   	push   edi
c001db36:	56                   	push   esi
c001db37:	53                   	push   ebx
c001db38:	83 ec 1c             	sub    esp,0x1c
c001db3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001db3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001db43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001db46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001db4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001db4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001db52:	85 db                	test   ebx,ebx
c001db54:	0f 88 8e 00 00 00    	js     c001dbe8 <__divdi3+0xb4>
c001db5a:	89 dd                	mov    ebp,ebx
c001db5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001db64:	89 d3                	mov    ebx,edx
c001db66:	85 d2                	test   edx,edx
c001db68:	79 0d                	jns    c001db77 <__divdi3+0x43>
c001db6a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001db6e:	f7 d8                	neg    eax
c001db70:	83 d2 00             	adc    edx,0x0
c001db73:	f7 da                	neg    edx
c001db75:	89 d3                	mov    ebx,edx
c001db77:	89 c7                	mov    edi,eax
c001db79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001db7c:	85 db                	test   ebx,ebx
c001db7e:	75 48                	jne    c001dbc8 <__divdi3+0x94>
c001db80:	39 ef                	cmp    edi,ebp
c001db82:	76 24                	jbe    c001dba8 <__divdi3+0x74>
c001db84:	89 ea                	mov    edx,ebp
c001db86:	f7 f7                	div    edi
c001db88:	89 c1                	mov    ecx,eax
c001db8a:	31 f6                	xor    esi,esi
c001db8c:	89 c8                	mov    eax,ecx
c001db8e:	89 f2                	mov    edx,esi
c001db90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db94:	85 c9                	test   ecx,ecx
c001db96:	74 07                	je     c001db9f <__divdi3+0x6b>
c001db98:	f7 d8                	neg    eax
c001db9a:	83 d2 00             	adc    edx,0x0
c001db9d:	f7 da                	neg    edx
c001db9f:	83 c4 1c             	add    esp,0x1c
c001dba2:	5b                   	pop    ebx
c001dba3:	5e                   	pop    esi
c001dba4:	5f                   	pop    edi
c001dba5:	5d                   	pop    ebp
c001dba6:	c3                   	ret    
c001dba7:	90                   	nop
c001dba8:	85 ff                	test   edi,edi
c001dbaa:	75 0b                	jne    c001dbb7 <__divdi3+0x83>
c001dbac:	b8 01 00 00 00       	mov    eax,0x1
c001dbb1:	31 d2                	xor    edx,edx
c001dbb3:	f7 f3                	div    ebx
c001dbb5:	89 c7                	mov    edi,eax
c001dbb7:	31 d2                	xor    edx,edx
c001dbb9:	89 e8                	mov    eax,ebp
c001dbbb:	f7 f7                	div    edi
c001dbbd:	89 c6                	mov    esi,eax
c001dbbf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dbc2:	f7 f7                	div    edi
c001dbc4:	89 c1                	mov    ecx,eax
c001dbc6:	eb c4                	jmp    c001db8c <__divdi3+0x58>
c001dbc8:	39 eb                	cmp    ebx,ebp
c001dbca:	77 3c                	ja     c001dc08 <__divdi3+0xd4>
c001dbcc:	0f bd f3             	bsr    esi,ebx
c001dbcf:	83 f6 1f             	xor    esi,0x1f
c001dbd2:	75 40                	jne    c001dc14 <__divdi3+0xe0>
c001dbd4:	39 eb                	cmp    ebx,ebp
c001dbd6:	72 09                	jb     c001dbe1 <__divdi3+0xad>
c001dbd8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dbdb:	0f 87 97 00 00 00    	ja     c001dc78 <__divdi3+0x144>
c001dbe1:	b9 01 00 00 00       	mov    ecx,0x1
c001dbe6:	eb a4                	jmp    c001db8c <__divdi3+0x58>
c001dbe8:	f7 d9                	neg    ecx
c001dbea:	83 d3 00             	adc    ebx,0x0
c001dbed:	f7 db                	neg    ebx
c001dbef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dbf2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dbf6:	89 dd                	mov    ebp,ebx
c001dbf8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001dc00:	e9 5f ff ff ff       	jmp    c001db64 <__divdi3+0x30>
c001dc05:	8d 76 00             	lea    esi,[esi+0x0]
c001dc08:	31 f6                	xor    esi,esi
c001dc0a:	31 c9                	xor    ecx,ecx
c001dc0c:	e9 7b ff ff ff       	jmp    c001db8c <__divdi3+0x58>
c001dc11:	8d 76 00             	lea    esi,[esi+0x0]
c001dc14:	b8 20 00 00 00       	mov    eax,0x20
c001dc19:	29 f0                	sub    eax,esi
c001dc1b:	89 f1                	mov    ecx,esi
c001dc1d:	d3 e3                	shl    ebx,cl
c001dc1f:	89 fa                	mov    edx,edi
c001dc21:	88 c1                	mov    cl,al
c001dc23:	d3 ea                	shr    edx,cl
c001dc25:	09 da                	or     edx,ebx
c001dc27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc2b:	89 f1                	mov    ecx,esi
c001dc2d:	d3 e7                	shl    edi,cl
c001dc2f:	89 eb                	mov    ebx,ebp
c001dc31:	88 c1                	mov    cl,al
c001dc33:	d3 eb                	shr    ebx,cl
c001dc35:	89 f1                	mov    ecx,esi
c001dc37:	d3 e5                	shl    ebp,cl
c001dc39:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001dc3c:	88 c1                	mov    cl,al
c001dc3e:	d3 ea                	shr    edx,cl
c001dc40:	09 d5                	or     ebp,edx
c001dc42:	89 e8                	mov    eax,ebp
c001dc44:	89 da                	mov    edx,ebx
c001dc46:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001dc4a:	89 d3                	mov    ebx,edx
c001dc4c:	89 c5                	mov    ebp,eax
c001dc4e:	f7 e7                	mul    edi
c001dc50:	39 d3                	cmp    ebx,edx
c001dc52:	72 18                	jb     c001dc6c <__divdi3+0x138>
c001dc54:	74 0a                	je     c001dc60 <__divdi3+0x12c>
c001dc56:	89 e9                	mov    ecx,ebp
c001dc58:	31 f6                	xor    esi,esi
c001dc5a:	e9 2d ff ff ff       	jmp    c001db8c <__divdi3+0x58>
c001dc5f:	90                   	nop
c001dc60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001dc63:	89 f1                	mov    ecx,esi
c001dc65:	d3 e7                	shl    edi,cl
c001dc67:	39 c7                	cmp    edi,eax
c001dc69:	73 eb                	jae    c001dc56 <__divdi3+0x122>
c001dc6b:	90                   	nop
c001dc6c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001dc6f:	31 f6                	xor    esi,esi
c001dc71:	e9 16 ff ff ff       	jmp    c001db8c <__divdi3+0x58>
c001dc76:	66 90                	xchg   ax,ax
c001dc78:	31 c9                	xor    ecx,ecx
c001dc7a:	e9 0d ff ff ff       	jmp    c001db8c <__divdi3+0x58>
c001dc7f:	90                   	nop

c001dc80 <__moddi3>:
c001dc80:	55                   	push   ebp
c001dc81:	57                   	push   edi
c001dc82:	56                   	push   esi
c001dc83:	53                   	push   ebx
c001dc84:	83 ec 2c             	sub    esp,0x2c
c001dc87:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dc8b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001dc8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc93:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001dc97:	85 db                	test   ebx,ebx
c001dc99:	0f 88 85 00 00 00    	js     c001dd24 <__moddi3+0xa4>
c001dc9f:	89 de                	mov    esi,ebx
c001dca1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dca9:	89 d7                	mov    edi,edx
c001dcab:	85 d2                	test   edx,edx
c001dcad:	79 09                	jns    c001dcb8 <__moddi3+0x38>
c001dcaf:	f7 d8                	neg    eax
c001dcb1:	83 d2 00             	adc    edx,0x0
c001dcb4:	f7 da                	neg    edx
c001dcb6:	89 d7                	mov    edi,edx
c001dcb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcbc:	89 cd                	mov    ebp,ecx
c001dcbe:	85 ff                	test   edi,edi
c001dcc0:	75 52                	jne    c001dd14 <__moddi3+0x94>
c001dcc2:	89 c3                	mov    ebx,eax
c001dcc4:	39 f0                	cmp    eax,esi
c001dcc6:	76 24                	jbe    c001dcec <__moddi3+0x6c>
c001dcc8:	89 c8                	mov    eax,ecx
c001dcca:	89 f2                	mov    edx,esi
c001dccc:	f7 f3                	div    ebx
c001dcce:	89 d6                	mov    esi,edx
c001dcd0:	89 f0                	mov    eax,esi
c001dcd2:	31 d2                	xor    edx,edx
c001dcd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcd8:	85 c9                	test   ecx,ecx
c001dcda:	74 07                	je     c001dce3 <__moddi3+0x63>
c001dcdc:	f7 d8                	neg    eax
c001dcde:	83 d2 00             	adc    edx,0x0
c001dce1:	f7 da                	neg    edx
c001dce3:	83 c4 2c             	add    esp,0x2c
c001dce6:	5b                   	pop    ebx
c001dce7:	5e                   	pop    esi
c001dce8:	5f                   	pop    edi
c001dce9:	5d                   	pop    ebp
c001dcea:	c3                   	ret    
c001dceb:	90                   	nop
c001dcec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dcf0:	85 db                	test   ebx,ebx
c001dcf2:	75 0d                	jne    c001dd01 <__moddi3+0x81>
c001dcf4:	b8 01 00 00 00       	mov    eax,0x1
c001dcf9:	31 d2                	xor    edx,edx
c001dcfb:	f7 f7                	div    edi
c001dcfd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd01:	89 f0                	mov    eax,esi
c001dd03:	31 d2                	xor    edx,edx
c001dd05:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dd09:	f7 f7                	div    edi
c001dd0b:	89 e8                	mov    eax,ebp
c001dd0d:	f7 f7                	div    edi
c001dd0f:	89 d6                	mov    esi,edx
c001dd11:	eb bd                	jmp    c001dcd0 <__moddi3+0x50>
c001dd13:	90                   	nop
c001dd14:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dd18:	39 f7                	cmp    edi,esi
c001dd1a:	76 20                	jbe    c001dd3c <__moddi3+0xbc>
c001dd1c:	89 c8                	mov    eax,ecx
c001dd1e:	89 f2                	mov    edx,esi
c001dd20:	eb b2                	jmp    c001dcd4 <__moddi3+0x54>
c001dd22:	66 90                	xchg   ax,ax
c001dd24:	f7 d9                	neg    ecx
c001dd26:	83 d3 00             	adc    ebx,0x0
c001dd29:	f7 db                	neg    ebx
c001dd2b:	89 de                	mov    esi,ebx
c001dd2d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001dd35:	e9 6f ff ff ff       	jmp    c001dca9 <__moddi3+0x29>
c001dd3a:	66 90                	xchg   ax,ax
c001dd3c:	0f bd c7             	bsr    eax,edi
c001dd3f:	83 f0 1f             	xor    eax,0x1f
c001dd42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd46:	75 24                	jne    c001dd6c <__moddi3+0xec>
c001dd48:	39 f7                	cmp    edi,esi
c001dd4a:	72 06                	jb     c001dd52 <__moddi3+0xd2>
c001dd4c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001dd50:	77 0c                	ja     c001dd5e <__moddi3+0xde>
c001dd52:	89 e9                	mov    ecx,ebp
c001dd54:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001dd58:	19 fe                	sbb    esi,edi
c001dd5a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dd5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dd62:	89 f2                	mov    edx,esi
c001dd64:	e9 6b ff ff ff       	jmp    c001dcd4 <__moddi3+0x54>
c001dd69:	8d 76 00             	lea    esi,[esi+0x0]
c001dd6c:	b8 20 00 00 00       	mov    eax,0x20
c001dd71:	89 c2                	mov    edx,eax
c001dd73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001dd77:	29 da                	sub    edx,ebx
c001dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dd7d:	88 d9                	mov    cl,bl
c001dd7f:	d3 e7                	shl    edi,cl
c001dd81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd85:	88 d1                	mov    cl,dl
c001dd87:	d3 e8                	shr    eax,cl
c001dd89:	09 c7                	or     edi,eax
c001dd8b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001dd8f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dd93:	89 d8                	mov    eax,ebx
c001dd95:	88 d9                	mov    cl,bl
c001dd97:	d3 e7                	shl    edi,cl
c001dd99:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dd9d:	89 f3                	mov    ebx,esi
c001dd9f:	88 d1                	mov    cl,dl
c001dda1:	d3 eb                	shr    ebx,cl
c001dda3:	89 c7                	mov    edi,eax
c001dda5:	88 c1                	mov    cl,al
c001dda7:	d3 e6                	shl    esi,cl
c001dda9:	89 e8                	mov    eax,ebp
c001ddab:	88 d1                	mov    cl,dl
c001ddad:	d3 e8                	shr    eax,cl
c001ddaf:	09 f0                	or     eax,esi
c001ddb1:	89 f9                	mov    ecx,edi
c001ddb3:	d3 e5                	shl    ebp,cl
c001ddb5:	89 da                	mov    edx,ebx
c001ddb7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001ddbb:	89 d3                	mov    ebx,edx
c001ddbd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ddc1:	89 c6                	mov    esi,eax
c001ddc3:	89 d1                	mov    ecx,edx
c001ddc5:	39 d3                	cmp    ebx,edx
c001ddc7:	72 27                	jb     c001ddf0 <__moddi3+0x170>
c001ddc9:	74 21                	je     c001ddec <__moddi3+0x16c>
c001ddcb:	29 f5                	sub    ebp,esi
c001ddcd:	19 cb                	sbb    ebx,ecx
c001ddcf:	89 de                	mov    esi,ebx
c001ddd1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001ddd5:	d3 e6                	shl    esi,cl
c001ddd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001dddb:	89 f9                	mov    ecx,edi
c001dddd:	d3 ed                	shr    ebp,cl
c001dddf:	09 ee                	or     esi,ebp
c001dde1:	89 f0                	mov    eax,esi
c001dde3:	d3 eb                	shr    ebx,cl
c001dde5:	89 da                	mov    edx,ebx
c001dde7:	e9 e8 fe ff ff       	jmp    c001dcd4 <__moddi3+0x54>
c001ddec:	39 c5                	cmp    ebp,eax
c001ddee:	73 db                	jae    c001ddcb <__moddi3+0x14b>
c001ddf0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001ddf4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001ddf8:	89 d1                	mov    ecx,edx
c001ddfa:	89 c6                	mov    esi,eax
c001ddfc:	eb cd                	jmp    c001ddcb <__moddi3+0x14b>
c001ddfe:	66 90                	xchg   ax,ax

c001de00 <__udivdi3>:
c001de00:	55                   	push   ebp
c001de01:	57                   	push   edi
c001de02:	56                   	push   esi
c001de03:	53                   	push   ebx
c001de04:	83 ec 1c             	sub    esp,0x1c
c001de07:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001de0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001de0f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001de13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de17:	85 d2                	test   edx,edx
c001de19:	75 41                	jne    c001de5c <__udivdi3+0x5c>
c001de1b:	39 f7                	cmp    edi,esi
c001de1d:	76 15                	jbe    c001de34 <__udivdi3+0x34>
c001de1f:	89 e8                	mov    eax,ebp
c001de21:	89 f2                	mov    edx,esi
c001de23:	f7 f7                	div    edi
c001de25:	31 db                	xor    ebx,ebx
c001de27:	89 da                	mov    edx,ebx
c001de29:	83 c4 1c             	add    esp,0x1c
c001de2c:	5b                   	pop    ebx
c001de2d:	5e                   	pop    esi
c001de2e:	5f                   	pop    edi
c001de2f:	5d                   	pop    ebp
c001de30:	c3                   	ret    
c001de31:	8d 76 00             	lea    esi,[esi+0x0]
c001de34:	89 f9                	mov    ecx,edi
c001de36:	85 ff                	test   edi,edi
c001de38:	75 0b                	jne    c001de45 <__udivdi3+0x45>
c001de3a:	b8 01 00 00 00       	mov    eax,0x1
c001de3f:	31 d2                	xor    edx,edx
c001de41:	f7 f7                	div    edi
c001de43:	89 c1                	mov    ecx,eax
c001de45:	31 d2                	xor    edx,edx
c001de47:	89 f0                	mov    eax,esi
c001de49:	f7 f1                	div    ecx
c001de4b:	89 c3                	mov    ebx,eax
c001de4d:	89 e8                	mov    eax,ebp
c001de4f:	f7 f1                	div    ecx
c001de51:	89 da                	mov    edx,ebx
c001de53:	83 c4 1c             	add    esp,0x1c
c001de56:	5b                   	pop    ebx
c001de57:	5e                   	pop    esi
c001de58:	5f                   	pop    edi
c001de59:	5d                   	pop    ebp
c001de5a:	c3                   	ret    
c001de5b:	90                   	nop
c001de5c:	39 f2                	cmp    edx,esi
c001de5e:	77 1c                	ja     c001de7c <__udivdi3+0x7c>
c001de60:	0f bd da             	bsr    ebx,edx
c001de63:	83 f3 1f             	xor    ebx,0x1f
c001de66:	75 24                	jne    c001de8c <__udivdi3+0x8c>
c001de68:	39 f2                	cmp    edx,esi
c001de6a:	72 08                	jb     c001de74 <__udivdi3+0x74>
c001de6c:	39 ef                	cmp    edi,ebp
c001de6e:	0f 87 84 00 00 00    	ja     c001def8 <__udivdi3+0xf8>
c001de74:	b8 01 00 00 00       	mov    eax,0x1
c001de79:	eb ac                	jmp    c001de27 <__udivdi3+0x27>
c001de7b:	90                   	nop
c001de7c:	31 db                	xor    ebx,ebx
c001de7e:	31 c0                	xor    eax,eax
c001de80:	89 da                	mov    edx,ebx
c001de82:	83 c4 1c             	add    esp,0x1c
c001de85:	5b                   	pop    ebx
c001de86:	5e                   	pop    esi
c001de87:	5f                   	pop    edi
c001de88:	5d                   	pop    ebp
c001de89:	c3                   	ret    
c001de8a:	66 90                	xchg   ax,ax
c001de8c:	b8 20 00 00 00       	mov    eax,0x20
c001de91:	29 d8                	sub    eax,ebx
c001de93:	88 d9                	mov    cl,bl
c001de95:	d3 e2                	shl    edx,cl
c001de97:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de9b:	89 fa                	mov    edx,edi
c001de9d:	88 c1                	mov    cl,al
c001de9f:	d3 ea                	shr    edx,cl
c001dea1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dea5:	09 d1                	or     ecx,edx
c001dea7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001deab:	88 d9                	mov    cl,bl
c001dead:	d3 e7                	shl    edi,cl
c001deaf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001deb3:	89 f7                	mov    edi,esi
c001deb5:	88 c1                	mov    cl,al
c001deb7:	d3 ef                	shr    edi,cl
c001deb9:	88 d9                	mov    cl,bl
c001debb:	d3 e6                	shl    esi,cl
c001debd:	89 ea                	mov    edx,ebp
c001debf:	88 c1                	mov    cl,al
c001dec1:	d3 ea                	shr    edx,cl
c001dec3:	09 d6                	or     esi,edx
c001dec5:	89 f0                	mov    eax,esi
c001dec7:	89 fa                	mov    edx,edi
c001dec9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001decd:	89 d7                	mov    edi,edx
c001decf:	89 c6                	mov    esi,eax
c001ded1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ded5:	39 d7                	cmp    edi,edx
c001ded7:	72 13                	jb     c001deec <__udivdi3+0xec>
c001ded9:	74 09                	je     c001dee4 <__udivdi3+0xe4>
c001dedb:	89 f0                	mov    eax,esi
c001dedd:	31 db                	xor    ebx,ebx
c001dedf:	e9 43 ff ff ff       	jmp    c001de27 <__udivdi3+0x27>
c001dee4:	88 d9                	mov    cl,bl
c001dee6:	d3 e5                	shl    ebp,cl
c001dee8:	39 c5                	cmp    ebp,eax
c001deea:	73 ef                	jae    c001dedb <__udivdi3+0xdb>
c001deec:	8d 46 ff             	lea    eax,[esi-0x1]
c001deef:	31 db                	xor    ebx,ebx
c001def1:	e9 31 ff ff ff       	jmp    c001de27 <__udivdi3+0x27>
c001def6:	66 90                	xchg   ax,ax
c001def8:	31 c0                	xor    eax,eax
c001defa:	e9 28 ff ff ff       	jmp    c001de27 <__udivdi3+0x27>
c001deff:	90                   	nop

c001df00 <__umoddi3>:
c001df00:	55                   	push   ebp
c001df01:	57                   	push   edi
c001df02:	56                   	push   esi
c001df03:	53                   	push   ebx
c001df04:	83 ec 1c             	sub    esp,0x1c
c001df07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001df0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df0f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001df13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001df17:	89 da                	mov    edx,ebx
c001df19:	85 c0                	test   eax,eax
c001df1b:	75 37                	jne    c001df54 <__umoddi3+0x54>
c001df1d:	39 df                	cmp    edi,ebx
c001df1f:	76 13                	jbe    c001df34 <__umoddi3+0x34>
c001df21:	89 f0                	mov    eax,esi
c001df23:	f7 f7                	div    edi
c001df25:	89 d0                	mov    eax,edx
c001df27:	31 d2                	xor    edx,edx
c001df29:	83 c4 1c             	add    esp,0x1c
c001df2c:	5b                   	pop    ebx
c001df2d:	5e                   	pop    esi
c001df2e:	5f                   	pop    edi
c001df2f:	5d                   	pop    ebp
c001df30:	c3                   	ret    
c001df31:	8d 76 00             	lea    esi,[esi+0x0]
c001df34:	89 fd                	mov    ebp,edi
c001df36:	85 ff                	test   edi,edi
c001df38:	75 0b                	jne    c001df45 <__umoddi3+0x45>
c001df3a:	b8 01 00 00 00       	mov    eax,0x1
c001df3f:	31 d2                	xor    edx,edx
c001df41:	f7 f7                	div    edi
c001df43:	89 c5                	mov    ebp,eax
c001df45:	89 d8                	mov    eax,ebx
c001df47:	31 d2                	xor    edx,edx
c001df49:	f7 f5                	div    ebp
c001df4b:	89 f0                	mov    eax,esi
c001df4d:	f7 f5                	div    ebp
c001df4f:	89 d0                	mov    eax,edx
c001df51:	eb d4                	jmp    c001df27 <__umoddi3+0x27>
c001df53:	90                   	nop
c001df54:	89 f1                	mov    ecx,esi
c001df56:	39 d8                	cmp    eax,ebx
c001df58:	76 0a                	jbe    c001df64 <__umoddi3+0x64>
c001df5a:	89 f0                	mov    eax,esi
c001df5c:	83 c4 1c             	add    esp,0x1c
c001df5f:	5b                   	pop    ebx
c001df60:	5e                   	pop    esi
c001df61:	5f                   	pop    edi
c001df62:	5d                   	pop    ebp
c001df63:	c3                   	ret    
c001df64:	0f bd e8             	bsr    ebp,eax
c001df67:	83 f5 1f             	xor    ebp,0x1f
c001df6a:	75 1c                	jne    c001df88 <__umoddi3+0x88>
c001df6c:	39 d8                	cmp    eax,ebx
c001df6e:	72 04                	jb     c001df74 <__umoddi3+0x74>
c001df70:	39 f7                	cmp    edi,esi
c001df72:	77 08                	ja     c001df7c <__umoddi3+0x7c>
c001df74:	89 da                	mov    edx,ebx
c001df76:	29 fe                	sub    esi,edi
c001df78:	19 c2                	sbb    edx,eax
c001df7a:	89 f1                	mov    ecx,esi
c001df7c:	89 c8                	mov    eax,ecx
c001df7e:	83 c4 1c             	add    esp,0x1c
c001df81:	5b                   	pop    ebx
c001df82:	5e                   	pop    esi
c001df83:	5f                   	pop    edi
c001df84:	5d                   	pop    ebp
c001df85:	c3                   	ret    
c001df86:	66 90                	xchg   ax,ax
c001df88:	ba 20 00 00 00       	mov    edx,0x20
c001df8d:	29 ea                	sub    edx,ebp
c001df8f:	89 e9                	mov    ecx,ebp
c001df91:	d3 e0                	shl    eax,cl
c001df93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001df97:	89 f8                	mov    eax,edi
c001df99:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001df9d:	88 d1                	mov    cl,dl
c001df9f:	d3 e8                	shr    eax,cl
c001dfa1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dfa5:	09 c1                	or     ecx,eax
c001dfa7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dfab:	89 e9                	mov    ecx,ebp
c001dfad:	d3 e7                	shl    edi,cl
c001dfaf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dfb3:	89 d8                	mov    eax,ebx
c001dfb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dfb9:	88 d1                	mov    cl,dl
c001dfbb:	d3 e8                	shr    eax,cl
c001dfbd:	89 c7                	mov    edi,eax
c001dfbf:	89 e9                	mov    ecx,ebp
c001dfc1:	d3 e3                	shl    ebx,cl
c001dfc3:	89 f0                	mov    eax,esi
c001dfc5:	88 d1                	mov    cl,dl
c001dfc7:	d3 e8                	shr    eax,cl
c001dfc9:	09 d8                	or     eax,ebx
c001dfcb:	89 e9                	mov    ecx,ebp
c001dfcd:	d3 e6                	shl    esi,cl
c001dfcf:	89 f3                	mov    ebx,esi
c001dfd1:	89 fa                	mov    edx,edi
c001dfd3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001dfd7:	89 d1                	mov    ecx,edx
c001dfd9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dfdd:	89 c6                	mov    esi,eax
c001dfdf:	89 d7                	mov    edi,edx
c001dfe1:	39 d1                	cmp    ecx,edx
c001dfe3:	72 27                	jb     c001e00c <__umoddi3+0x10c>
c001dfe5:	74 21                	je     c001e008 <__umoddi3+0x108>
c001dfe7:	89 ca                	mov    edx,ecx
c001dfe9:	29 f3                	sub    ebx,esi
c001dfeb:	19 fa                	sbb    edx,edi
c001dfed:	89 d0                	mov    eax,edx
c001dfef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001dff3:	d3 e0                	shl    eax,cl
c001dff5:	89 e9                	mov    ecx,ebp
c001dff7:	d3 eb                	shr    ebx,cl
c001dff9:	09 d8                	or     eax,ebx
c001dffb:	d3 ea                	shr    edx,cl
c001dffd:	83 c4 1c             	add    esp,0x1c
c001e000:	5b                   	pop    ebx
c001e001:	5e                   	pop    esi
c001e002:	5f                   	pop    edi
c001e003:	5d                   	pop    ebp
c001e004:	c3                   	ret    
c001e005:	8d 76 00             	lea    esi,[esi+0x0]
c001e008:	39 c3                	cmp    ebx,eax
c001e00a:	73 db                	jae    c001dfe7 <__umoddi3+0xe7>
c001e00c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e010:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e014:	89 d7                	mov    edi,edx
c001e016:	89 c6                	mov    esi,eax
c001e018:	eb cd                	jmp    c001dfe7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e01a <_init>:
c001e01a:	55                   	push   ebp
c001e01b:	89 e5                	mov    ebp,esp
c001e01d:	e8 d2 20 fe ff       	call   c00000f4 <frame_dummy>
c001e022:	e8 e5 fa ff ff       	call   c001db0c <__do_global_ctors_aux>
c001e027:	5d                   	pop    ebp
c001e028:	c3                   	ret    

Disassembly of section .fini:

c001e029 <_fini>:
c001e029:	55                   	push   ebp
c001e02a:	89 e5                	mov    ebp,esp
c001e02c:	e8 53 20 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e031:	5d                   	pop    ebp
c001e032:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e034 <Computer::~Computer()>:
c001e034:	83 ec 0c             	sub    esp,0xc
c001e037:	ba 54 f3 01 c0       	mov    edx,0xc001f354
c001e03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e040:	89 10                	mov    DWORD PTR [eax],edx
c001e042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e046:	83 ec 0c             	sub    esp,0xc
c001e049:	50                   	push   eax
c001e04a:	e8 ff d8 fe ff       	call   c000b94e <Device::~Device()>
c001e04f:	83 c4 10             	add    esp,0x10
c001e052:	90                   	nop
c001e053:	83 c4 0c             	add    esp,0xc
c001e056:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e058 <Computer::~Computer()>:
c001e058:	83 ec 0c             	sub    esp,0xc
c001e05b:	83 ec 0c             	sub    esp,0xc
c001e05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e062:	e8 cd ff ff ff       	call   c001e034 <Computer::~Computer()>
c001e067:	83 c4 10             	add    esp,0x10
c001e06a:	83 ec 08             	sub    esp,0x8
c001e06d:	68 70 01 00 00       	push   0x170
c001e072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e076:	e8 9d c4 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e07b:	83 c4 10             	add    esp,0x10
c001e07e:	83 c4 0c             	add    esp,0xc
c001e081:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e082 <idleCommon()>:
c001e082:	83 ec 0c             	sub    esp,0xc
c001e085:	fa                   	cli    
c001e086:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001e08c:	e8 6f 6a ff ff       	call   c0014b00 <schedule()>
c001e091:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001e096:	48                   	dec    eax
c001e097:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001e09c:	75 01                	jne    c001e09f <idleCommon()+0x1d>
c001e09e:	fb                   	sti    
c001e09f:	83 c4 0c             	add    esp,0xc
c001e0a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e0a4 <LinkedList<UnixFile>::~LinkedList()>:
c001e0a4:	90                   	nop
c001e0a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e0a6 <LinkedList<UnixFile>::LinkedList()>:
c001e0a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e0b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e0bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e0db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e0e6:	90                   	nop
c001e0e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e0e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e0f0:	75 10                	jne    c001e102 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e0f2:	83 ec 0c             	sub    esp,0xc
c001e0f5:	68 68 f5 01 c0       	push   0xc001f568
c001e0fa:	e8 d0 22 ff ff       	call   c00103cf <KePanic(char const*)>
c001e0ff:	83 c4 10             	add    esp,0x10
c001e102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e106:	8b 00                	mov    eax,DWORD PTR [eax]
c001e108:	85 c0                	test   eax,eax
c001e10a:	74 34                	je     c001e140 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e110:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e113:	85 c0                	test   eax,eax
c001e115:	74 29                	je     c001e140 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e117:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e11b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e11e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e122:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e129:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e12d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e134:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e137:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e13e:	eb 65                	jmp    c001e1a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e144:	8b 00                	mov    eax,DWORD PTR [eax]
c001e146:	85 c0                	test   eax,eax
c001e148:	75 4b                	jne    c001e195 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e14e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e151:	85 c0                	test   eax,eax
c001e153:	75 40                	jne    c001e195 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e159:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e15d:	89 10                	mov    DWORD PTR [eax],edx
c001e15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e167:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e171:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e17f:	85 c0                	test   eax,eax
c001e181:	74 22                	je     c001e1a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e183:	83 ec 0c             	sub    esp,0xc
c001e186:	68 8a f5 01 c0       	push   0xc001f58a
c001e18b:	e8 3f 22 ff ff       	call   c00103cf <KePanic(char const*)>
c001e190:	83 c4 10             	add    esp,0x10
c001e193:	eb 10                	jmp    c001e1a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e195:	83 ec 0c             	sub    esp,0xc
c001e198:	68 94 f5 01 c0       	push   0xc001f594
c001e19d:	e8 2d 22 ff ff       	call   c00103cf <KePanic(char const*)>
c001e1a2:	83 c4 10             	add    esp,0x10
c001e1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e1ac:	8d 50 01             	lea    edx,[eax+0x1]
c001e1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e1b6:	90                   	nop
c001e1b7:	83 c4 0c             	add    esp,0xc
c001e1ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e1bc <LinkedList<UnixFile>::getFirstElement()>:
c001e1bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e1c4 <LinkedList<UnixFile>::removeFirst()>:
c001e1c4:	83 ec 0c             	sub    esp,0xc
c001e1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1cd:	85 c0                	test   eax,eax
c001e1cf:	75 12                	jne    c001e1e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e1d1:	83 ec 0c             	sub    esp,0xc
c001e1d4:	68 a0 f5 01 c0       	push   0xc001f5a0
c001e1d9:	e8 f1 21 ff ff       	call   c00103cf <KePanic(char const*)>
c001e1de:	83 c4 10             	add    esp,0x10
c001e1e1:	eb 7e                	jmp    c001e261 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e1ed:	85 c0                	test   eax,eax
c001e1ef:	74 10                	je     c001e201 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e1f1:	83 ec 0c             	sub    esp,0xc
c001e1f4:	68 eb f5 01 c0       	push   0xc001f5eb
c001e1f9:	e8 d1 21 ff ff       	call   c00103cf <KePanic(char const*)>
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e205:	8b 00                	mov    eax,DWORD PTR [eax]
c001e207:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e20a:	85 c0                	test   eax,eax
c001e20c:	75 33                	jne    c001e241 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e212:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e227:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e22a:	83 f8 01             	cmp    eax,0x1
c001e22d:	74 21                	je     c001e250 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e22f:	83 ec 0c             	sub    esp,0xc
c001e232:	68 c4 f5 01 c0       	push   0xc001f5c4
c001e237:	e8 93 21 ff ff       	call   c00103cf <KePanic(char const*)>
c001e23c:	83 c4 10             	add    esp,0x10
c001e23f:	eb 0f                	jmp    c001e250 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e241:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e245:	8b 00                	mov    eax,DWORD PTR [eax]
c001e247:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e24a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24e:	89 10                	mov    DWORD PTR [eax],edx
c001e250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e254:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e257:	8d 50 ff             	lea    edx,[eax-0x1]
c001e25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e25e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e261:	83 c4 0c             	add    esp,0xc
c001e264:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e266 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e266:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e26a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e26d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e26e <DriverlessDevice::~DriverlessDevice()>:
c001e26e:	ba 3c fc 01 c0       	mov    edx,0xc001fc3c
c001e273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e277:	89 10                	mov    DWORD PTR [eax],edx
c001e279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e27d:	50                   	push   eax
c001e27e:	e8 cb d6 fe ff       	call   c000b94e <Device::~Device()>
c001e283:	83 c4 04             	add    esp,0x4
c001e286:	90                   	nop
c001e287:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e288 <DriverlessDevice::~DriverlessDevice()>:
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	83 ec 0c             	sub    esp,0xc
c001e28e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e292:	e8 d7 ff ff ff       	call   c001e26e <DriverlessDevice::~DriverlessDevice()>
c001e297:	83 c4 10             	add    esp,0x10
c001e29a:	83 ec 08             	sub    esp,0x8
c001e29d:	68 58 01 00 00       	push   0x158
c001e2a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2a6:	e8 6d c2 fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e2ab:	83 c4 10             	add    esp,0x10
c001e2ae:	83 c4 0c             	add    esp,0xc
c001e2b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e2b2 <LinkedList<Device>::addElement(Device*)>:
c001e2b2:	83 ec 0c             	sub    esp,0xc
c001e2b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e2ba:	75 10                	jne    c001e2cc <LinkedList<Device>::addElement(Device*)+0x1a>
c001e2bc:	83 ec 0c             	sub    esp,0xc
c001e2bf:	68 68 f5 01 c0       	push   0xc001f568
c001e2c4:	e8 06 21 ff ff       	call   c00103cf <KePanic(char const*)>
c001e2c9:	83 c4 10             	add    esp,0x10
c001e2cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2d2:	85 c0                	test   eax,eax
c001e2d4:	74 3a                	je     c001e310 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2dd:	85 c0                	test   eax,eax
c001e2df:	74 2f                	je     c001e310 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e2e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e2fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e301:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e304:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e30e:	eb 68                	jmp    c001e378 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e314:	8b 00                	mov    eax,DWORD PTR [eax]
c001e316:	85 c0                	test   eax,eax
c001e318:	75 4e                	jne    c001e368 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e321:	85 c0                	test   eax,eax
c001e323:	75 43                	jne    c001e368 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e329:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e32d:	89 10                	mov    DWORD PTR [eax],edx
c001e32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e333:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e337:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e33a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e33e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e341:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e352:	85 c0                	test   eax,eax
c001e354:	74 22                	je     c001e378 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e356:	83 ec 0c             	sub    esp,0xc
c001e359:	68 8a f5 01 c0       	push   0xc001f58a
c001e35e:	e8 6c 20 ff ff       	call   c00103cf <KePanic(char const*)>
c001e363:	83 c4 10             	add    esp,0x10
c001e366:	eb 10                	jmp    c001e378 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e368:	83 ec 0c             	sub    esp,0xc
c001e36b:	68 94 f5 01 c0       	push   0xc001f594
c001e370:	e8 5a 20 ff ff       	call   c00103cf <KePanic(char const*)>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e37f:	8d 50 01             	lea    edx,[eax+0x1]
c001e382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e386:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e389:	90                   	nop
c001e38a:	83 c4 0c             	add    esp,0xc
c001e38d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e38e <LinkedList<Device>::LinkedList()>:
c001e38e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e392:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e39c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e3ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e3b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e3c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e3ce:	90                   	nop
c001e3cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e3d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3d6:	85 c0                	test   eax,eax
c001e3d8:	75 0e                	jne    c001e3e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e3da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3e1:	85 c0                	test   eax,eax
c001e3e3:	75 03                	jne    c001e3e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e3e5:	b0 01                	mov    al,0x1
c001e3e7:	c3                   	ret    
c001e3e8:	b0 00                	mov    al,0x0
c001e3ea:	90                   	nop
c001e3eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e3ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e3f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e3f4:	83 ec 0c             	sub    esp,0xc
c001e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3fd:	85 c0                	test   eax,eax
c001e3ff:	75 17                	jne    c001e418 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e401:	83 ec 0c             	sub    esp,0xc
c001e404:	68 a0 f5 01 c0       	push   0xc001f5a0
c001e409:	e8 c1 1f ff ff       	call   c00103cf <KePanic(char const*)>
c001e40e:	83 c4 10             	add    esp,0x10
c001e411:	e9 92 00 00 00       	jmp    c001e4a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e416:	66 90                	xchg   ax,ax
c001e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e41f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e422:	85 c0                	test   eax,eax
c001e424:	0f 95 c0             	setne  al
c001e427:	84 c0                	test   al,al
c001e429:	74 11                	je     c001e43c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e42b:	83 ec 0c             	sub    esp,0xc
c001e42e:	68 eb f5 01 c0       	push   0xc001f5eb
c001e433:	e8 97 1f ff ff       	call   c00103cf <KePanic(char const*)>
c001e438:	83 c4 10             	add    esp,0x10
c001e43b:	90                   	nop
c001e43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e440:	8b 00                	mov    eax,DWORD PTR [eax]
c001e442:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e445:	85 c0                	test   eax,eax
c001e447:	0f 94 c0             	sete   al
c001e44a:	84 c0                	test   al,al
c001e44c:	74 36                	je     c001e484 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e452:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e467:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e46a:	83 f8 01             	cmp    eax,0x1
c001e46d:	74 25                	je     c001e494 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e46f:	83 ec 0c             	sub    esp,0xc
c001e472:	68 c4 f5 01 c0       	push   0xc001f5c4
c001e477:	e8 53 1f ff ff       	call   c00103cf <KePanic(char const*)>
c001e47c:	83 c4 10             	add    esp,0x10
c001e47f:	eb 13                	jmp    c001e494 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e481:	8d 76 00             	lea    esi,[esi+0x0]
c001e484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e488:	8b 00                	mov    eax,DWORD PTR [eax]
c001e48a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e491:	89 10                	mov    DWORD PTR [eax],edx
c001e493:	90                   	nop
c001e494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e498:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e49b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4a5:	8d 76 00             	lea    esi,[esi+0x0]
c001e4a8:	83 c4 0c             	add    esp,0xc
c001e4ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e4ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e4ac:	83 ec 0c             	sub    esp,0xc
c001e4af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e4b4:	75 12                	jne    c001e4c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e4b6:	83 ec 0c             	sub    esp,0xc
c001e4b9:	68 68 f5 01 c0       	push   0xc001f568
c001e4be:	e8 0c 1f ff ff       	call   c00103cf <KePanic(char const*)>
c001e4c3:	83 c4 10             	add    esp,0x10
c001e4c6:	66 90                	xchg   ax,ax
c001e4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4ce:	85 c0                	test   eax,eax
c001e4d0:	74 36                	je     c001e508 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4d9:	85 c0                	test   eax,eax
c001e4db:	74 2b                	je     c001e508 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e4dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e4eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e4f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e4f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e504:	eb 6a                	jmp    c001e570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e506:	66 90                	xchg   ax,ax
c001e508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e50c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e50e:	85 c0                	test   eax,eax
c001e510:	75 4e                	jne    c001e560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e516:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e519:	85 c0                	test   eax,eax
c001e51b:	75 43                	jne    c001e560 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e525:	89 10                	mov    DWORD PTR [eax],edx
c001e527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e52b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e52f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e539:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e547:	85 c0                	test   eax,eax
c001e549:	74 25                	je     c001e570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e54b:	83 ec 0c             	sub    esp,0xc
c001e54e:	68 8a f5 01 c0       	push   0xc001f58a
c001e553:	e8 77 1e ff ff       	call   c00103cf <KePanic(char const*)>
c001e558:	83 c4 10             	add    esp,0x10
c001e55b:	eb 13                	jmp    c001e570 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e55d:	8d 76 00             	lea    esi,[esi+0x0]
c001e560:	83 ec 0c             	sub    esp,0xc
c001e563:	68 94 f5 01 c0       	push   0xc001f594
c001e568:	e8 62 1e ff ff       	call   c00103cf <KePanic(char const*)>
c001e56d:	83 c4 10             	add    esp,0x10
c001e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e577:	8d 50 01             	lea    edx,[eax+0x1]
c001e57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e57e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e581:	90                   	nop
c001e582:	83 c4 0c             	add    esp,0xc
c001e585:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e588 <ACPI::~ACPI()>:
c001e588:	83 ec 0c             	sub    esp,0xc
c001e58b:	ba 08 02 02 c0       	mov    edx,0xc0020208
c001e590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e594:	89 10                	mov    DWORD PTR [eax],edx
c001e596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59a:	83 ec 0c             	sub    esp,0xc
c001e59d:	50                   	push   eax
c001e59e:	e8 ab d3 fe ff       	call   c000b94e <Device::~Device()>
c001e5a3:	83 c4 10             	add    esp,0x10
c001e5a6:	90                   	nop
c001e5a7:	83 c4 0c             	add    esp,0xc
c001e5aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e5ac <ACPI::~ACPI()>:
c001e5ac:	83 ec 0c             	sub    esp,0xc
c001e5af:	83 ec 0c             	sub    esp,0xc
c001e5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5b6:	e8 cd ff ff ff       	call   c001e588 <ACPI::~ACPI()>
c001e5bb:	83 c4 10             	add    esp,0x10
c001e5be:	83 ec 08             	sub    esp,0x8
c001e5c1:	68 64 12 00 00       	push   0x1264
c001e5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5ca:	e8 49 bf fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e5cf:	83 c4 10             	add    esp,0x10
c001e5d2:	83 c4 0c             	add    esp,0xc
c001e5d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e5d8 <LinkedList<Device>::~LinkedList()>:
c001e5d8:	90                   	nop
c001e5d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e5dc <LinkedList<Device>::isEmpty()>:
c001e5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5e2:	85 c0                	test   eax,eax
c001e5e4:	75 0e                	jne    c001e5f4 <LinkedList<Device>::isEmpty()+0x18>
c001e5e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5ed:	85 c0                	test   eax,eax
c001e5ef:	75 03                	jne    c001e5f4 <LinkedList<Device>::isEmpty()+0x18>
c001e5f1:	b0 01                	mov    al,0x1
c001e5f3:	c3                   	ret    
c001e5f4:	b0 00                	mov    al,0x0
c001e5f6:	90                   	nop
c001e5f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e5f8 <LinkedList<Device>::getFirstElement()>:
c001e5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e600 <LinkedList<Device>::removeFirst()>:
c001e600:	83 ec 0c             	sub    esp,0xc
c001e603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e607:	8b 00                	mov    eax,DWORD PTR [eax]
c001e609:	85 c0                	test   eax,eax
c001e60b:	75 17                	jne    c001e624 <LinkedList<Device>::removeFirst()+0x24>
c001e60d:	83 ec 0c             	sub    esp,0xc
c001e610:	68 a0 f5 01 c0       	push   0xc001f5a0
c001e615:	e8 b5 1d ff ff       	call   c00103cf <KePanic(char const*)>
c001e61a:	83 c4 10             	add    esp,0x10
c001e61d:	e9 92 00 00 00       	jmp    c001e6b4 <LinkedList<Device>::removeFirst()+0xb4>
c001e622:	66 90                	xchg   ax,ax
c001e624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e628:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e62b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e631:	85 c0                	test   eax,eax
c001e633:	74 13                	je     c001e648 <LinkedList<Device>::removeFirst()+0x48>
c001e635:	83 ec 0c             	sub    esp,0xc
c001e638:	68 eb f5 01 c0       	push   0xc001f5eb
c001e63d:	e8 8d 1d ff ff       	call   c00103cf <KePanic(char const*)>
c001e642:	83 c4 10             	add    esp,0x10
c001e645:	8d 76 00             	lea    esi,[esi+0x0]
c001e648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e64c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e64e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e654:	85 c0                	test   eax,eax
c001e656:	75 34                	jne    c001e68c <LinkedList<Device>::removeFirst()+0x8c>
c001e658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e65c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e666:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e671:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e674:	83 f8 01             	cmp    eax,0x1
c001e677:	74 27                	je     c001e6a0 <LinkedList<Device>::removeFirst()+0xa0>
c001e679:	83 ec 0c             	sub    esp,0xc
c001e67c:	68 c4 f5 01 c0       	push   0xc001f5c4
c001e681:	e8 49 1d ff ff       	call   c00103cf <KePanic(char const*)>
c001e686:	83 c4 10             	add    esp,0x10
c001e689:	eb 15                	jmp    c001e6a0 <LinkedList<Device>::removeFirst()+0xa0>
c001e68b:	90                   	nop
c001e68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e690:	8b 00                	mov    eax,DWORD PTR [eax]
c001e692:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69c:	89 10                	mov    DWORD PTR [eax],edx
c001e69e:	66 90                	xchg   ax,ax
c001e6a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e6a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6b4:	83 c4 0c             	add    esp,0xc
c001e6b7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e6b8 <CPU::~CPU()>:
c001e6b8:	83 ec 0c             	sub    esp,0xc
c001e6bb:	ba a4 03 02 c0       	mov    edx,0xc00203a4
c001e6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c4:	89 10                	mov    DWORD PTR [eax],edx
c001e6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	50                   	push   eax
c001e6ce:	e8 7b d2 fe ff       	call   c000b94e <Device::~Device()>
c001e6d3:	83 c4 10             	add    esp,0x10
c001e6d6:	90                   	nop
c001e6d7:	83 c4 0c             	add    esp,0xc
c001e6da:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e6dc <CPU::~CPU()>:
c001e6dc:	83 ec 0c             	sub    esp,0xc
c001e6df:	83 ec 0c             	sub    esp,0xc
c001e6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6e6:	e8 cd ff ff ff       	call   c001e6b8 <CPU::~CPU()>
c001e6eb:	83 c4 10             	add    esp,0x10
c001e6ee:	83 ec 08             	sub    esp,0x8
c001e6f1:	68 94 11 00 00       	push   0x1194
c001e6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6fa:	e8 19 be fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e6ff:	83 c4 10             	add    esp,0x10
c001e702:	83 c4 0c             	add    esp,0xc
c001e705:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e708 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e708:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e70c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e70f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e710 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e710:	90                   	nop
c001e711:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e714 <ThreadControlBlock::ThreadControlBlock()>:
c001e714:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e718:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e71f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e723:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e72a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e72e:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e735:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e739:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e744:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e74f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e757:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e75b:	90                   	nop
c001e75c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e760 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e764:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e76a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e76e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e775:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e779:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e784:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e78e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e795:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e799:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e7a0:	90                   	nop
c001e7a1:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e7a2 <PCI::~PCI()>:
c001e7a2:	83 ec 0c             	sub    esp,0xc
c001e7a5:	ba 04 12 02 c0       	mov    edx,0xc0021204
c001e7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7ae:	89 10                	mov    DWORD PTR [eax],edx
c001e7b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	50                   	push   eax
c001e7b8:	e8 1b cc fe ff       	call   c000b3d8 <Bus::~Bus()>
c001e7bd:	83 c4 10             	add    esp,0x10
c001e7c0:	90                   	nop
c001e7c1:	83 c4 0c             	add    esp,0xc
c001e7c4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e7c6 <PCI::~PCI()>:
c001e7c6:	83 ec 0c             	sub    esp,0xc
c001e7c9:	83 ec 0c             	sub    esp,0xc
c001e7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7d0:	e8 cd ff ff ff       	call   c001e7a2 <PCI::~PCI()>
c001e7d5:	83 c4 10             	add    esp,0x10
c001e7d8:	83 ec 08             	sub    esp,0x8
c001e7db:	68 5c 01 00 00       	push   0x15c
c001e7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7e4:	e8 2f bd fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e7e9:	83 c4 10             	add    esp,0x10
c001e7ec:	83 c4 0c             	add    esp,0xc
c001e7ef:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e7f0 <IDE::~IDE()>:
c001e7f0:	83 ec 0c             	sub    esp,0xc
c001e7f3:	ba b8 12 02 c0       	mov    edx,0xc00212b8
c001e7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fc:	89 10                	mov    DWORD PTR [eax],edx
c001e7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e802:	83 ec 0c             	sub    esp,0xc
c001e805:	50                   	push   eax
c001e806:	e8 bd d5 fe ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	90                   	nop
c001e80f:	83 c4 0c             	add    esp,0xc
c001e812:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e814 <IDE::~IDE()>:
c001e814:	83 ec 0c             	sub    esp,0xc
c001e817:	83 ec 0c             	sub    esp,0xc
c001e81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e81e:	e8 cd ff ff ff       	call   c001e7f0 <IDE::~IDE()>
c001e823:	83 c4 10             	add    esp,0x10
c001e826:	83 ec 08             	sub    esp,0x8
c001e829:	68 70 02 00 00       	push   0x270
c001e82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e832:	e8 e1 bc fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	83 c4 0c             	add    esp,0xc
c001e83d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e83e <SATABus::~SATABus()>:
c001e83e:	83 ec 0c             	sub    esp,0xc
c001e841:	ba 08 13 02 c0       	mov    edx,0xc0021308
c001e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84a:	89 10                	mov    DWORD PTR [eax],edx
c001e84c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	50                   	push   eax
c001e854:	e8 6f d5 fe ff       	call   c000bdc8 <HardDiskController::~HardDiskController()>
c001e859:	83 c4 10             	add    esp,0x10
c001e85c:	90                   	nop
c001e85d:	83 c4 0c             	add    esp,0xc
c001e860:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e862 <SATABus::~SATABus()>:
c001e862:	83 ec 0c             	sub    esp,0xc
c001e865:	83 ec 0c             	sub    esp,0xc
c001e868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e86c:	e8 cd ff ff ff       	call   c001e83e <SATABus::~SATABus()>
c001e871:	83 c4 10             	add    esp,0x10
c001e874:	83 ec 08             	sub    esp,0x8
c001e877:	68 64 01 00 00       	push   0x164
c001e87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e880:	e8 93 bc fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e885:	83 c4 10             	add    esp,0x10
c001e888:	83 c4 0c             	add    esp,0xc
c001e88b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e88c <ATA::~ATA()>:
c001e88c:	83 ec 0c             	sub    esp,0xc
c001e88f:	ba 48 13 02 c0       	mov    edx,0xc0021348
c001e894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e898:	89 10                	mov    DWORD PTR [eax],edx
c001e89a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89e:	83 ec 0c             	sub    esp,0xc
c001e8a1:	50                   	push   eax
c001e8a2:	e8 03 d6 fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001e8a7:	83 c4 10             	add    esp,0x10
c001e8aa:	90                   	nop
c001e8ab:	83 c4 0c             	add    esp,0xc
c001e8ae:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e8b0 <ATA::~ATA()>:
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	83 ec 0c             	sub    esp,0xc
c001e8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ba:	e8 cd ff ff ff       	call   c001e88c <ATA::~ATA()>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	83 ec 08             	sub    esp,0x8
c001e8c5:	68 7c 01 00 00       	push   0x17c
c001e8ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ce:	e8 45 bc fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e8d3:	83 c4 10             	add    esp,0x10
c001e8d6:	83 c4 0c             	add    esp,0xc
c001e8d9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e8da <ATAPI::~ATAPI()>:
c001e8da:	83 ec 0c             	sub    esp,0xc
c001e8dd:	ba 90 13 02 c0       	mov    edx,0xc0021390
c001e8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e6:	89 10                	mov    DWORD PTR [eax],edx
c001e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ec:	83 ec 0c             	sub    esp,0xc
c001e8ef:	50                   	push   eax
c001e8f0:	e8 b5 d5 fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001e8f5:	83 c4 10             	add    esp,0x10
c001e8f8:	90                   	nop
c001e8f9:	83 c4 0c             	add    esp,0xc
c001e8fc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e8fe <ATAPI::~ATAPI()>:
c001e8fe:	83 ec 0c             	sub    esp,0xc
c001e901:	83 ec 0c             	sub    esp,0xc
c001e904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e908:	e8 cd ff ff ff       	call   c001e8da <ATAPI::~ATAPI()>
c001e90d:	83 c4 10             	add    esp,0x10
c001e910:	83 ec 08             	sub    esp,0x8
c001e913:	68 84 01 00 00       	push   0x184
c001e918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e91c:	e8 f7 bb fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e921:	83 c4 10             	add    esp,0x10
c001e924:	83 c4 0c             	add    esp,0xc
c001e927:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e928 <SATA::~SATA()>:
c001e928:	83 ec 0c             	sub    esp,0xc
c001e92b:	ba 44 14 02 c0       	mov    edx,0xc0021444
c001e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e934:	89 10                	mov    DWORD PTR [eax],edx
c001e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93a:	83 ec 0c             	sub    esp,0xc
c001e93d:	50                   	push   eax
c001e93e:	e8 67 d5 fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	90                   	nop
c001e947:	83 c4 0c             	add    esp,0xc
c001e94a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e94c <SATA::~SATA()>:
c001e94c:	83 ec 0c             	sub    esp,0xc
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e956:	e8 cd ff ff ff       	call   c001e928 <SATA::~SATA()>
c001e95b:	83 c4 10             	add    esp,0x10
c001e95e:	83 ec 08             	sub    esp,0x8
c001e961:	68 7c 01 00 00       	push   0x17c
c001e966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e96a:	e8 a9 bb fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e96f:	83 c4 10             	add    esp,0x10
c001e972:	83 c4 0c             	add    esp,0xc
c001e975:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e976 <SATAPI::~SATAPI()>:
c001e976:	83 ec 0c             	sub    esp,0xc
c001e979:	ba 68 15 02 c0       	mov    edx,0xc0021568
c001e97e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e982:	89 10                	mov    DWORD PTR [eax],edx
c001e984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	50                   	push   eax
c001e98c:	e8 19 d5 fe ff       	call   c000beaa <PhysicalDisk::~PhysicalDisk()>
c001e991:	83 c4 10             	add    esp,0x10
c001e994:	90                   	nop
c001e995:	83 c4 0c             	add    esp,0xc
c001e998:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e99a <SATAPI::~SATAPI()>:
c001e99a:	83 ec 0c             	sub    esp,0xc
c001e99d:	83 ec 0c             	sub    esp,0xc
c001e9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a4:	e8 cd ff ff ff       	call   c001e976 <SATAPI::~SATAPI()>
c001e9a9:	83 c4 10             	add    esp,0x10
c001e9ac:	83 ec 08             	sub    esp,0x8
c001e9af:	68 84 01 00 00       	push   0x184
c001e9b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9b8:	e8 5b bb fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001e9bd:	83 c4 10             	add    esp,0x10
c001e9c0:	83 c4 0c             	add    esp,0xc
c001e9c3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e9c4 <IOAPIC::~IOAPIC()>:
c001e9c4:	83 ec 0c             	sub    esp,0xc
c001e9c7:	ba a8 15 02 c0       	mov    edx,0xc00215a8
c001e9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d0:	89 10                	mov    DWORD PTR [eax],edx
c001e9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d6:	83 ec 0c             	sub    esp,0xc
c001e9d9:	50                   	push   eax
c001e9da:	e8 6f cf fe ff       	call   c000b94e <Device::~Device()>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	90                   	nop
c001e9e3:	83 c4 0c             	add    esp,0xc
c001e9e6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e9e8 <IOAPIC::~IOAPIC()>:
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	83 ec 0c             	sub    esp,0xc
c001e9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9f2:	e8 cd ff ff ff       	call   c001e9c4 <IOAPIC::~IOAPIC()>
c001e9f7:	83 c4 10             	add    esp,0x10
c001e9fa:	83 ec 08             	sub    esp,0x8
c001e9fd:	68 68 01 00 00       	push   0x168
c001ea02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea06:	e8 0d bb fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	83 c4 0c             	add    esp,0xc
c001ea11:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ea14 <APICTimer::~APICTimer()>:
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	ba f0 15 02 c0       	mov    edx,0xc00215f0
c001ea1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea20:	89 10                	mov    DWORD PTR [eax],edx
c001ea22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea26:	83 ec 0c             	sub    esp,0xc
c001ea29:	50                   	push   eax
c001ea2a:	e8 19 e9 fe ff       	call   c000d348 <Timer::~Timer()>
c001ea2f:	83 c4 10             	add    esp,0x10
c001ea32:	90                   	nop
c001ea33:	83 c4 0c             	add    esp,0xc
c001ea36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ea38 <APICTimer::~APICTimer()>:
c001ea38:	83 ec 0c             	sub    esp,0xc
c001ea3b:	83 ec 0c             	sub    esp,0xc
c001ea3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea42:	e8 cd ff ff ff       	call   c001ea14 <APICTimer::~APICTimer()>
c001ea47:	83 c4 10             	add    esp,0x10
c001ea4a:	83 ec 08             	sub    esp,0x8
c001ea4d:	68 60 01 00 00       	push   0x160
c001ea52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea56:	e8 bd ba fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001ea5b:	83 c4 10             	add    esp,0x10
c001ea5e:	83 c4 0c             	add    esp,0xc
c001ea61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ea64 <PIT::~PIT()>:
c001ea64:	83 ec 0c             	sub    esp,0xc
c001ea67:	ba 40 16 02 c0       	mov    edx,0xc0021640
c001ea6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea70:	89 10                	mov    DWORD PTR [eax],edx
c001ea72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea76:	83 ec 0c             	sub    esp,0xc
c001ea79:	50                   	push   eax
c001ea7a:	e8 c9 e8 fe ff       	call   c000d348 <Timer::~Timer()>
c001ea7f:	83 c4 10             	add    esp,0x10
c001ea82:	90                   	nop
c001ea83:	83 c4 0c             	add    esp,0xc
c001ea86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ea88 <PIT::~PIT()>:
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea92:	e8 cd ff ff ff       	call   c001ea64 <PIT::~PIT()>
c001ea97:	83 c4 10             	add    esp,0x10
c001ea9a:	83 ec 08             	sub    esp,0x8
c001ea9d:	68 5c 01 00 00       	push   0x15c
c001eaa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eaa6:	e8 6d ba fe ff       	call   c000a518 <operator delete(void*, unsigned long)>
c001eaab:	83 c4 10             	add    esp,0x10
c001eaae:	83 c4 0c             	add    esp,0xc
c001eab1:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 95 04 02 c0       	mov    esi,0xc0020495
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be b1 04 02 c0       	mov    esi,0xc00204b1
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
